#!/bin/bash
home="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function echoerr() {
    >&2 echo $@
}

TWI_TOOL=$(readlink -f "$home/../build-Native-speed/twi-tool.main.out")
TWI_BUS=2

declare -A TWI_DEVICES
TWI_DEVICES=(
    [io]=2c
    [driver]=2e
    [arm]=2a
)

function twi_call() {
    test -x "$TWI_TOOL" || { echoerr "TwiTool not found: $TWI_TOOL"; return 1; }
    test $# -ge 2 || { echoerr "twi_call: need at least 2 parameters: <twi-function-name> <twi-device: one of (${!TWI_DEVICES[@]})>"; return 1; }
    func="$1"
    device="$2"
    shift 2

    device_address=${TWI_DEVICES[$device]}
    test -n "$device_address" || { echoerr "Address of device $device not registered."; return 1; }

    echo "$TWI_TOOL" -b $TWI_BUS -d $device_address -f $func $@
}

function param_u16bit() {
    param=$1
    param_name="Parameter"
    test "$param" -lt $((2**16)) -a "$param" -ge 0 || { echoerr "$param_name out of bounds 0..2^16"; return 1; }
    val=`printf '%04x' $param`

    # Split the 16-bit hex-value into two separate bytes
    param_high=${val:0:2}
    param_low=${val: -2}

    echo "-p $param_low -p $param_high"
}

function param_enum() {
    param_u16bit $@
}

function param_s32bit() {
    param="$1"
    param_name="Parameter"
    test "$param" -lt $((2**31)) -a "$param" -gt -$((2**31)) || { echoerr "$param_name out of bounds -2^31..2^31"; return 1; }
    val=`printf '%08x' $param`

    # Split the 32-bit hex-value into four separate bytes
    param3=${val: -8:2}
    param2=${val: -6:2}
    param1=${val: -4:2}
    param0=${val: -2:2}

    echo "-p $param0 -p $param1 -p $param2 -p $param3"
}

BACKWARD=0
FORWARD=1
STOPPED=2

MOT_LEFT=0
MOT_RIGHT=1

function set_motor_help() {
    echoerr "Need 2 parameters: [-l|-r] <signed 16-bit number>"
}

function set_motor() {
    set -e
    test $# = 2 || { set_motor_help; return 1; }

    local MOTOR=
    case "$1" in
        -l) MOTOR=$MOT_LEFT;;
        -r) MOTOR=$MOT_RIGHT;;
        *) set_motor_help; return 1 ;;
    esac

    local MOTOR_VAL=$2
    local MOTOR_DIR=

    # Determine the motor directions
    if [ $MOTOR_VAL -gt 0 ]; then MOTOR_DIR=$FORWARD
    elif [ $MOTOR_VAL -lt 0 ]; then MOTOR_DIR=$BACKWARD; MOTOR_VAL=$((-MOTOR_VAL))
    else MOTOR_DIR=$STOPPED
    fi

    twi_call tank_driver_set_motor driver $(param_enum $MOTOR) $(param_enum $MOTOR_DIR) $(param_u16bit $MOTOR_VAL)
}
