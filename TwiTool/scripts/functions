#!/bin/bash
home="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function echoerr() {
    >&2 echo $@
}

TWI_TOOL=$(readlink -f "$home/../build-Native-speed/twi-tool.main.out")
TWI_BUS=2

declare -A TWI_DEVICES
TWI_DEVICES=(
    [io]=2c
    [driver]=2e
    [arm]=2a
)

function twi_call() {
    test -x "$TWI_TOOL" || { echoerr "TwiTool not found: $TWI_TOOL"; return 1; }
    test $# -ge 2 || { echoerr "twi_call: need at least 2 parameters: <twi-function-name> <twi-device: one of (${!TWI_DEVICES[@]})>"; return 1; }
    func="$1"
    device="$2"
    shift 2

    device_address=${TWI_DEVICES[$device]}
    test -n "$device_address" || { echoerr "Address of device $device not registered."; return 1; }

    "$TWI_TOOL" -b $TWI_BUS -d $device_address -f $func $@
}

function param_u16bit() {
    param=$1
    param_name="Parameter"
    test "$param" -lt $((2**16)) -a "$param" -ge 0 || { echoerr "$param_name out of bounds 0..2^16"; return 1; }
    val=`printf '%04x' $param`

    # Split the 16-bit hex-value into two separate bytes
    param_high=${val:0:2}
    param_low=${val: -2}

    echo "-p $param_low -p $param_high"
}

function param_enum() {
    param_u16bit $@
}

function param_s32bit() {
    param="$1"
    param_name="Parameter"
    test "$param" -lt $((2**31)) -a "$param" -gt -$((2**31)) || { echoerr "$param_name out of bounds -2^31..2^31"; return 1; }
    val=`printf '%08x' $param`

    # Split the 32-bit hex-value into four separate bytes
    param3=${val: -8:2}
    param2=${val: -6:2}
    param1=${val: -4:2}
    param0=${val: -2:2}

    echo "-p $param0 -p $param1 -p $param2 -p $param3"
}

BACKWARD=0
FORWARD=1
STOPPED=2

MOT_LEFT=0
MOT_RIGHT=1

function set_motors() {
    left=$1
    right=$2
    test -n "$left" || left=0
    test -n "$right" || right=0

    # Determine the motor directions
    if [ $left -gt 0 ]; then leftdir=$FORWARD
    elif [ $left -lt 0 ]; then leftdir=$BACKWARD; left=$((-left))
    else leftdir=$STOPPED
    fi
    if [ $right -gt 0 ]; then rightdir=$FORWARD
    elif [ $right -lt 0 ]; then rightdir=$BACKWARD; right=$((-right))
    else rightdir=$STOPPED
    fi

    twi_call tank_driver_set_motor driver $(param_enum $MOT_LEFT) $(param_enum $leftdir) $(param_u16bit $left) &
    twi_call tank_driver_set_motor driver $(param_enum $MOT_RIGHT) $(param_enum $rightdir) $(param_u16bit $right) &
    wait
}
