
NIBObeeLibTests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001cba  00001d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  00800114  00800114  00001d62  2**0
                  ALLOC
  3 .stab         00000e10  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000362  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00002ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000900  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002cf3  00000000  00000000  00003996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012c6  00000000  00000000  00006689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004ebe  00000000  00000000  0000794f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005d0  00000000  00000000  0000c810  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000121a  00000000  00000000  0000cde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015ae  00000000  00000000  0000dffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00078d89  00000000  00000000  0000f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000313  00000000  00000000  00088331  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00088644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_1>
       8:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_2>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_13>
      38:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_14>
      3c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_24>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_26>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea eb       	ldi	r30, 0xBA	; 186
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 31       	cpi	r26, 0x14	; 20
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a4 e1       	ldi	r26, 0x14	; 20
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 39       	cpi	r26, 0x92	; 146
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 4f 0a 	call	0x149e	; 0x149e <main>
      c6:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <bgx1_transaction>:
uint8_t bgx1_x;
uint8_t bgx1_y;


static uint8_t bgx1_transaction(uint8_t txsize, uint8_t rxsize) {
  i2c_tx_size = txsize;
      ce:	80 93 51 01 	sts	0x0151, r24
  i2c_rx_size = rxsize;
      d2:	60 93 53 01 	sts	0x0153, r22
  i2c_start_transmission();
      d6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <i2c_start_transmission>
  return i2c_wait_transmission();
      da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <i2c_wait_transmission>
}
      de:	08 95       	ret

000000e0 <bgx1_transaction_posres.clone.0>:

static uint8_t bgx1_transaction_posres(uint8_t txsize, uint8_t rxsize) {
      e0:	1f 93       	push	r17
  uint8_t res = bgx1_transaction(txsize, rxsize);
      e2:	63 e0       	ldi	r22, 0x03	; 3
      e4:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
      e8:	18 2f       	mov	r17, r24
  if (i2c_status() == I2C_SUCCESS) {
      ea:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_status>
      ee:	82 30       	cpi	r24, 0x02	; 2
      f0:	41 f4       	brne	.+16     	; 0x102 <bgx1_transaction_posres.clone.0+0x22>
    bgx1_x = i2c_buf[1];
      f2:	80 91 2a 01 	lds	r24, 0x012A
      f6:	80 93 28 01 	sts	0x0128, r24
    bgx1_y = i2c_buf[2];
      fa:	80 91 2b 01 	lds	r24, 0x012B
      fe:	80 93 27 01 	sts	0x0127, r24
  }
  return res;
}
     102:	81 2f       	mov	r24, r17
     104:	1f 91       	pop	r17
     106:	08 95       	ret

00000108 <bgx1_reset>:
  uint16_t version = bgx1_getVersion();
  return (i2c_status() == I2C_SUCCESS) && (HIBYTE(version) == HIBYTE(BGX1_VERSION));
}

void bgx1_reset() {
  i2c_buf[0] = BGX1_I2C_ADDR;
     108:	86 e1       	ldi	r24, 0x16	; 22
     10a:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_Reset;
     10e:	10 92 2a 01 	sts	0x012A, r1
  bgx1_transaction(2, 1);
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	61 e0       	ldi	r22, 0x01	; 1
     116:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     11a:	08 95       	ret

0000011c <bgx1_getVersion>:

uint16_t bgx1_getVersion() {
  i2c_buf[0] = BGX1_I2C_ADDR;
     11c:	86 e1       	ldi	r24, 0x16	; 22
     11e:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_GetVersion;
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	80 93 2a 01 	sts	0x012A, r24
  bgx1_transaction(2, 3);
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	63 e0       	ldi	r22, 0x03	; 3
     12c:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  return MAKE_WORD(i2c_buf[1], i2c_buf[2]);
     130:	30 91 2a 01 	lds	r19, 0x012A
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	80 91 2b 01 	lds	r24, 0x012B
     13a:	28 0f       	add	r18, r24
     13c:	31 1d       	adc	r19, r1
}
     13e:	c9 01       	movw	r24, r18
     140:	08 95       	ret

00000142 <bgx1_init>:
  }
  return res;
}


uint8_t bgx1_init() {
     142:	1f 93       	push	r17
  if (!(nibobee_initialization&NIBOBEE_I2C_INITIALIZED)) {
     144:	80 91 6f 01 	lds	r24, 0x016F
     148:	82 fd       	sbrc	r24, 2
     14a:	02 c0       	rjmp	.+4      	; 0x150 <bgx1_init+0xe>
    i2c_init();
     14c:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_init>
  }
  uint16_t version = bgx1_getVersion();
     150:	0e 94 8e 00 	call	0x11c	; 0x11c <bgx1_getVersion>
     154:	19 2f       	mov	r17, r25
  return (i2c_status() == I2C_SUCCESS) && (HIBYTE(version) == HIBYTE(BGX1_VERSION));
     156:	0e 94 9f 03 	call	0x73e	; 0x73e <i2c_status>
     15a:	82 30       	cpi	r24, 0x02	; 2
     15c:	21 f4       	brne	.+8      	; 0x166 <bgx1_init+0x24>
  }
  return res;
}


uint8_t bgx1_init() {
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	11 30       	cpi	r17, 0x01	; 1
     164:	11 f0       	breq	.+4      	; 0x16a <bgx1_init+0x28>
  if (!(nibobee_initialization&NIBOBEE_I2C_INITIALIZED)) {
    i2c_init();
  }
  uint16_t version = bgx1_getVersion();
  return (i2c_status() == I2C_SUCCESS) && (HIBYTE(version) == HIBYTE(BGX1_VERSION));
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
}
     16a:	1f 91       	pop	r17
     16c:	08 95       	ret

0000016e <bgx1_getStatus>:
  bgx1_transaction(2, 3);
  return MAKE_WORD(i2c_buf[1], i2c_buf[2]);
}

uint8_t bgx1_getStatus() {
  i2c_buf[0] = BGX1_I2C_ADDR;
     16e:	86 e1       	ldi	r24, 0x16	; 22
     170:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_GetStatus;
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	80 93 2a 01 	sts	0x012A, r24
  bgx1_transaction(2, 2);
     17a:	62 e0       	ldi	r22, 0x02	; 2
     17c:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  return i2c_buf[1];
}
     180:	80 91 2a 01 	lds	r24, 0x012A
     184:	08 95       	ret

00000186 <bgx1_setStatus>:

void bgx1_setStatus(uint8_t status) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     186:	96 e1       	ldi	r25, 0x16	; 22
     188:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_SetStatus;
     18c:	93 e0       	ldi	r25, 0x03	; 3
     18e:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = status;
     192:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 1);
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	61 e0       	ldi	r22, 0x01	; 1
     19a:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     19e:	08 95       	ret

000001a0 <bgx1_move>:

void bgx1_move(uint8_t x, uint8_t y) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     1a0:	96 e1       	ldi	r25, 0x16	; 22
     1a2:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_Move;
     1a6:	90 e1       	ldi	r25, 0x10	; 16
     1a8:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = x;
     1ac:	80 93 2b 01 	sts	0x012B, r24
  i2c_buf[3] = y;
     1b0:	60 93 2c 01 	sts	0x012C, r22
  bgx1_transaction(4, 1);
     1b4:	84 e0       	ldi	r24, 0x04	; 4
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     1bc:	08 95       	ret

000001be <bgx1_mode>:

void bgx1_mode(uint8_t mode) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     1be:	96 e1       	ldi	r25, 0x16	; 22
     1c0:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_Mode;
     1c4:	91 e1       	ldi	r25, 0x11	; 17
     1c6:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = mode;
     1ca:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 1);
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     1d6:	08 95       	ret

000001d8 <bgx1_fillAll>:

void bgx1_fillAll(uint8_t pattern) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     1d8:	96 e1       	ldi	r25, 0x16	; 22
     1da:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_FillAll;
     1de:	92 e1       	ldi	r25, 0x12	; 18
     1e0:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = pattern;
     1e4:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 1);
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     1f0:	08 95       	ret

000001f2 <bgx1_print>:

void bgx1_print(const char * text) {
     1f2:	1f 93       	push	r17
     1f4:	bc 01       	movw	r22, r24
  i2c_buf[0] = BGX1_I2C_ADDR;
     1f6:	86 e1       	ldi	r24, 0x16	; 22
     1f8:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_Print;
     1fc:	83 e1       	ldi	r24, 0x13	; 19
     1fe:	80 93 2a 01 	sts	0x012A, r24
  uint8_t len = strlen(text);
     202:	db 01       	movw	r26, r22
     204:	0d 90       	ld	r0, X+
     206:	00 20       	and	r0, r0
     208:	e9 f7       	brne	.-6      	; 0x204 <bgx1_print+0x12>
     20a:	ad 01       	movw	r20, r26
     20c:	41 50       	subi	r20, 0x01	; 1
     20e:	50 40       	sbci	r21, 0x00	; 0
     210:	46 1b       	sub	r20, r22
     212:	57 0b       	sbc	r21, r23
     214:	14 2f       	mov	r17, r20
  memcpy(i2c_buf+2, text, len);
     216:	2b e2       	ldi	r18, 0x2B	; 43
     218:	31 e0       	ldi	r19, 0x01	; 1
     21a:	c9 01       	movw	r24, r18
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <memcpy>
  bgx1_transaction_posres(2+len, 3);
     222:	81 2f       	mov	r24, r17
     224:	8e 5f       	subi	r24, 0xFE	; 254
     226:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     22a:	1f 91       	pop	r17
     22c:	08 95       	ret

0000022e <bgx1_print_P>:

void bgx1_print_P(const char * text) {
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
  i2c_buf[0] = BGX1_I2C_ADDR;
     236:	86 e1       	ldi	r24, 0x16	; 22
     238:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_Print;
     23c:	83 e1       	ldi	r24, 0x13	; 19
     23e:	80 93 2a 01 	sts	0x012A, r24
  uint8_t len = strlen_P(text);
     242:	ce 01       	movw	r24, r28
     244:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <strlen_P>
     248:	18 2f       	mov	r17, r24
  memcpy_P(i2c_buf+2, text, len);
     24a:	8b e2       	ldi	r24, 0x2B	; 43
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	be 01       	movw	r22, r28
     250:	41 2f       	mov	r20, r17
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <memcpy_P>
  bgx1_transaction_posres(2+len, 3);
     258:	81 2f       	mov	r24, r17
     25a:	8e 5f       	subi	r24, 0xFE	; 254
     25c:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	08 95       	ret

00000268 <bgx1_textWidth>:

uint8_t bgx1_textWidth(const char * text) {
     268:	1f 93       	push	r17
     26a:	bc 01       	movw	r22, r24
  i2c_buf[0] = BGX1_I2C_ADDR;
     26c:	86 e1       	ldi	r24, 0x16	; 22
     26e:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_TextWidth;
     272:	84 e1       	ldi	r24, 0x14	; 20
     274:	80 93 2a 01 	sts	0x012A, r24
  uint8_t len = strlen(text);
     278:	db 01       	movw	r26, r22
     27a:	0d 90       	ld	r0, X+
     27c:	00 20       	and	r0, r0
     27e:	e9 f7       	brne	.-6      	; 0x27a <bgx1_textWidth+0x12>
     280:	ad 01       	movw	r20, r26
     282:	41 50       	subi	r20, 0x01	; 1
     284:	50 40       	sbci	r21, 0x00	; 0
     286:	46 1b       	sub	r20, r22
     288:	57 0b       	sbc	r21, r23
     28a:	14 2f       	mov	r17, r20
  memcpy(i2c_buf+2, text, len);
     28c:	2b e2       	ldi	r18, 0x2B	; 43
     28e:	31 e0       	ldi	r19, 0x01	; 1
     290:	c9 01       	movw	r24, r18
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <memcpy>
  bgx1_transaction(2+len, 2);
     298:	81 2f       	mov	r24, r17
     29a:	8e 5f       	subi	r24, 0xFE	; 254
     29c:	62 e0       	ldi	r22, 0x02	; 2
     29e:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  return i2c_buf[1];
}
     2a2:	80 91 2a 01 	lds	r24, 0x012A
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <bgx1_textWidth_P>:

uint8_t bgx1_textWidth_P(PGM_P text) {
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
  i2c_buf[0] = BGX1_I2C_ADDR;
     2b2:	86 e1       	ldi	r24, 0x16	; 22
     2b4:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_TextWidth;
     2b8:	84 e1       	ldi	r24, 0x14	; 20
     2ba:	80 93 2a 01 	sts	0x012A, r24
  uint8_t len = strlen_P(text);
     2be:	ce 01       	movw	r24, r28
     2c0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <strlen_P>
     2c4:	18 2f       	mov	r17, r24
  memcpy_P(i2c_buf+2, text, len);
     2c6:	8b e2       	ldi	r24, 0x2B	; 43
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	be 01       	movw	r22, r28
     2cc:	41 2f       	mov	r20, r17
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <memcpy_P>
  bgx1_transaction(2+len, 2);
     2d4:	81 2f       	mov	r24, r17
     2d6:	8e 5f       	subi	r24, 0xFE	; 254
     2d8:	62 e0       	ldi	r22, 0x02	; 2
     2da:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  return i2c_buf[1];
}
     2de:	80 91 2a 01 	lds	r24, 0x012A
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	08 95       	ret

000002ea <bgx1_selectFont>:

void bgx1_selectFont(uint8_t id) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     2ea:	96 e1       	ldi	r25, 0x16	; 22
     2ec:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_SelectFont;
     2f0:	95 e1       	ldi	r25, 0x15	; 21
     2f2:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = id;
     2f6:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 1);
     2fa:	83 e0       	ldi	r24, 0x03	; 3
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     302:	08 95       	ret

00000304 <bgx1_hLine>:

void bgx1_hLine(uint8_t length) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     304:	96 e1       	ldi	r25, 0x16	; 22
     306:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_HLine;
     30a:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = length;
     30e:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction_posres(3, 3);
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     318:	08 95       	ret

0000031a <bgx1_vLine>:

void bgx1_vLine(uint8_t length) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     31a:	96 e1       	ldi	r25, 0x16	; 22
     31c:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_VLine;
     320:	97 e1       	ldi	r25, 0x17	; 23
     322:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = length;
     326:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction_posres(3, 3);
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     330:	08 95       	ret

00000332 <bgx1_box>:

void bgx1_box(uint8_t width, uint8_t height) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     332:	96 e1       	ldi	r25, 0x16	; 22
     334:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_Box;
     338:	98 e1       	ldi	r25, 0x18	; 24
     33a:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = width;
     33e:	80 93 2b 01 	sts	0x012B, r24
  i2c_buf[3] = height;
     342:	60 93 2c 01 	sts	0x012C, r22
  bgx1_transaction_posres(4, 3);
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     34c:	08 95       	ret

0000034e <bgx1_drawBitmap>:
  memcpy_P (i2c_buf+4, bitmap, size);
  bgx1_transaction_posres(4+size, 3);
}


void bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bitmap[]) {
     34e:	2f 92       	push	r2
     350:	3f 92       	push	r3
     352:	4f 92       	push	r4
     354:	5f 92       	push	r5
     356:	6f 92       	push	r6
     358:	7f 92       	push	r7
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	e8 2e       	mov	r14, r24
     374:	16 2f       	mov	r17, r22
     376:	e5 2f       	mov	r30, r21
  const uint8_t * data = bitmap;
  uint8_t row_size = ((width-1)/8+1);
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	68 e0       	ldi	r22, 0x08	; 8
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     384:	9b 01       	movw	r18, r22
     386:	f6 2e       	mov	r15, r22
     388:	f3 94       	inc	r15
  uint8_t rows_per_tile = BITMAP_MAX/row_size;
     38a:	6f 2d       	mov	r22, r15
     38c:	82 e1       	ldi	r24, 0x12	; 18
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     396:	b6 2e       	mov	r11, r22
  uint8_t x = bgx1_y;
     398:	a0 90 27 01 	lds	r10, 0x0127
  uint8_t y = bgx1_x;
     39c:	00 91 28 01 	lds	r16, 0x0128
  bgx1_transaction_posres(4+size, 3);
}


void bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bitmap[]) {
  const uint8_t * data = bitmap;
     3a0:	24 2e       	mov	r2, r20
     3a2:	e1 01       	movw	r28, r2
     3a4:	6e 01       	movw	r12, r28
     3a6:	de 2e       	mov	r13, r30
     3a8:	e6 01       	movw	r28, r12
  bgx1_transaction_posres(4, 3);
}

// max 18 Byte bitmap
static void bgx1_drawTile(uint8_t width, uint8_t height, const uint8_t bitmap[]) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     3aa:	46 e1       	ldi	r20, 0x16	; 22
     3ac:	74 2e       	mov	r7, r20
  i2c_buf[1] = CMD_Bitmap;
     3ae:	99 e1       	ldi	r25, 0x19	; 25
     3b0:	69 2e       	mov	r6, r25
  i2c_buf[2] = width;
  i2c_buf[3] = height;
  uint8_t size = height * ((width-1)/8+1);
     3b2:	29 01       	movw	r4, r18
     3b4:	08 94       	sec
     3b6:	41 1c       	adc	r4, r1
     3b8:	51 1c       	adc	r5, r1
  memcpy (i2c_buf+4, bitmap, size);
     3ba:	8d e2       	ldi	r24, 0x2D	; 45
     3bc:	88 2e       	mov	r8, r24
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	98 2e       	mov	r9, r24
  const uint8_t * data = bitmap;
  uint8_t row_size = ((width-1)/8+1);
  uint8_t rows_per_tile = BITMAP_MAX/row_size;
  uint8_t x = bgx1_y;
  uint8_t y = bgx1_x;
  while (height) {
     3c2:	26 c0       	rjmp	.+76     	; 0x410 <bgx1_drawBitmap+0xc2>
    bgx1_move(x, y);
     3c4:	8a 2d       	mov	r24, r10
     3c6:	60 2f       	mov	r22, r16
     3c8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <bgx1_move>
    uint8_t h = (height>rows_per_tile)?rows_per_tile:height;
     3cc:	d1 2e       	mov	r13, r17
     3ce:	b1 16       	cp	r11, r17
     3d0:	08 f4       	brcc	.+2      	; 0x3d4 <bgx1_drawBitmap+0x86>
     3d2:	db 2c       	mov	r13, r11
  bgx1_transaction_posres(4, 3);
}

// max 18 Byte bitmap
static void bgx1_drawTile(uint8_t width, uint8_t height, const uint8_t bitmap[]) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     3d4:	70 92 29 01 	sts	0x0129, r7
  i2c_buf[1] = CMD_Bitmap;
     3d8:	60 92 2a 01 	sts	0x012A, r6
  i2c_buf[2] = width;
     3dc:	e0 92 2b 01 	sts	0x012B, r14
  i2c_buf[3] = height;
     3e0:	d0 92 2c 01 	sts	0x012C, r13
  uint8_t size = height * ((width-1)/8+1);
     3e4:	d4 9c       	mul	r13, r4
     3e6:	c0 2c       	mov	r12, r0
     3e8:	11 24       	eor	r1, r1
  memcpy (i2c_buf+4, bitmap, size);
     3ea:	c4 01       	movw	r24, r8
     3ec:	be 01       	movw	r22, r28
     3ee:	4c 2d       	mov	r20, r12
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <memcpy>
  bgx1_transaction_posres(4+size, 3);
     3f6:	8c 2d       	mov	r24, r12
     3f8:	8c 5f       	subi	r24, 0xFC	; 252
     3fa:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
     3fe:	1d 19       	sub	r17, r13
  memcpy_P (i2c_buf+4, bitmap, size);
  bgx1_transaction_posres(4+size, 3);
}


void bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bitmap[]) {
     400:	2d 2d       	mov	r18, r13
     402:	3f 2d       	mov	r19, r15
     404:	23 9f       	mul	r18, r19
     406:	c0 01       	movw	r24, r0
     408:	11 24       	eor	r1, r1
  i2c_buf[1] = CMD_Bitmap;
  i2c_buf[2] = width;
  i2c_buf[3] = height;
  uint8_t size = height * ((width-1)/8+1);
  memcpy (i2c_buf+4, bitmap, size);
  bgx1_transaction_posres(4+size, 3);
     40a:	c8 0f       	add	r28, r24
     40c:	d9 1f       	adc	r29, r25
     40e:	0d 0d       	add	r16, r13
  const uint8_t * data = bitmap;
  uint8_t row_size = ((width-1)/8+1);
  uint8_t rows_per_tile = BITMAP_MAX/row_size;
  uint8_t x = bgx1_y;
  uint8_t y = bgx1_x;
  while (height) {
     410:	11 23       	and	r17, r17
     412:	c1 f6       	brne	.-80     	; 0x3c4 <bgx1_drawBitmap+0x76>
      data += row_size;
      height--;
      y++;
    }
  }  
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	bf 90       	pop	r11
     426:	af 90       	pop	r10
     428:	9f 90       	pop	r9
     42a:	8f 90       	pop	r8
     42c:	7f 90       	pop	r7
     42e:	6f 90       	pop	r6
     430:	5f 90       	pop	r5
     432:	4f 90       	pop	r4
     434:	3f 90       	pop	r3
     436:	2f 90       	pop	r2
     438:	08 95       	ret

0000043a <bgx1_drawBitmap_P>:

void bgx1_drawBitmap_P(uint8_t width, uint8_t height, PGM_P bitmap) {
     43a:	8f 92       	push	r8
     43c:	9f 92       	push	r9
     43e:	af 92       	push	r10
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	e8 2e       	mov	r14, r24
     454:	16 2f       	mov	r17, r22
     456:	e5 2f       	mov	r30, r21
  PGM_P data = bitmap;
  uint8_t row_size = ((width-1)/8+1);
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	68 e0       	ldi	r22, 0x08	; 8
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     464:	9b 01       	movw	r18, r22
     466:	f6 2e       	mov	r15, r22
     468:	f3 94       	inc	r15
  uint8_t rows_per_tile = BITMAP_MAX/row_size;
     46a:	6f 2d       	mov	r22, r15
     46c:	82 e1       	ldi	r24, 0x12	; 18
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     476:	06 2f       	mov	r16, r22
    }
  }  
}

void bgx1_drawBitmap_P(uint8_t width, uint8_t height, PGM_P bitmap) {
  PGM_P data = bitmap;
     478:	c4 2e       	mov	r12, r20
     47a:	e6 01       	movw	r28, r12
     47c:	6e 01       	movw	r12, r28
     47e:	de 2e       	mov	r13, r30
     480:	e6 01       	movw	r28, r12
  bgx1_transaction_posres(4+size, 3);
}

// max 18 Byte bitmap
static void bgx1_drawTile_P(uint8_t width, uint8_t height, PGM_P bitmap) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     482:	66 e1       	ldi	r22, 0x16	; 22
     484:	b6 2e       	mov	r11, r22
  i2c_buf[1] = CMD_Bitmap;
     486:	59 e1       	ldi	r21, 0x19	; 25
     488:	a5 2e       	mov	r10, r21
  i2c_buf[2] = width;
  i2c_buf[3] = height;
  uint8_t size = height * ((width-1)/8+1);
     48a:	49 01       	movw	r8, r18
     48c:	08 94       	sec
     48e:	81 1c       	adc	r8, r1
     490:	91 1c       	adc	r9, r1
  PGM_P data = bitmap;
  uint8_t row_size = ((width-1)/8+1);
  uint8_t rows_per_tile = BITMAP_MAX/row_size;
  //uint8_t x = bgx1_y;
  uint8_t y = bgx1_x;
  while (height) {
     492:	22 c0       	rjmp	.+68     	; 0x4d8 <bgx1_drawBitmap_P+0x9e>
    uint8_t h = (height>rows_per_tile)?rows_per_tile:height;
     494:	d1 2e       	mov	r13, r17
     496:	01 17       	cp	r16, r17
     498:	08 f4       	brcc	.+2      	; 0x49c <bgx1_drawBitmap_P+0x62>
     49a:	d0 2e       	mov	r13, r16
  bgx1_transaction_posres(4+size, 3);
}

// max 18 Byte bitmap
static void bgx1_drawTile_P(uint8_t width, uint8_t height, PGM_P bitmap) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     49c:	b0 92 29 01 	sts	0x0129, r11
  i2c_buf[1] = CMD_Bitmap;
     4a0:	a0 92 2a 01 	sts	0x012A, r10
  i2c_buf[2] = width;
     4a4:	e0 92 2b 01 	sts	0x012B, r14
  i2c_buf[3] = height;
     4a8:	d0 92 2c 01 	sts	0x012C, r13
  uint8_t size = height * ((width-1)/8+1);
     4ac:	d8 9c       	mul	r13, r8
     4ae:	c0 2c       	mov	r12, r0
     4b0:	11 24       	eor	r1, r1
  memcpy_P (i2c_buf+4, bitmap, size);
     4b2:	8d e2       	ldi	r24, 0x2D	; 45
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	be 01       	movw	r22, r28
     4b8:	4c 2d       	mov	r20, r12
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <memcpy_P>
  bgx1_transaction_posres(4+size, 3);
     4c0:	8c 2d       	mov	r24, r12
     4c2:	8c 5f       	subi	r24, 0xFC	; 252
     4c4:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
     4c8:	1d 19       	sub	r17, r13
      y++;
    }
  }  
}

void bgx1_drawBitmap_P(uint8_t width, uint8_t height, PGM_P bitmap) {
     4ca:	5d 2d       	mov	r21, r13
     4cc:	2f 2d       	mov	r18, r15
     4ce:	52 9f       	mul	r21, r18
     4d0:	c0 01       	movw	r24, r0
     4d2:	11 24       	eor	r1, r1
  i2c_buf[1] = CMD_Bitmap;
  i2c_buf[2] = width;
  i2c_buf[3] = height;
  uint8_t size = height * ((width-1)/8+1);
  memcpy_P (i2c_buf+4, bitmap, size);
  bgx1_transaction_posres(4+size, 3);
     4d4:	c8 0f       	add	r28, r24
     4d6:	d9 1f       	adc	r29, r25
  PGM_P data = bitmap;
  uint8_t row_size = ((width-1)/8+1);
  uint8_t rows_per_tile = BITMAP_MAX/row_size;
  //uint8_t x = bgx1_y;
  uint8_t y = bgx1_x;
  while (height) {
     4d8:	11 23       	and	r17, r17
     4da:	e1 f6       	brne	.-72     	; 0x494 <bgx1_drawBitmap_P+0x5a>
      data += row_size;
      height--;
      y++;
    }
  }  
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	df 90       	pop	r13
     4ea:	cf 90       	pop	r12
     4ec:	bf 90       	pop	r11
     4ee:	af 90       	pop	r10
     4f0:	9f 90       	pop	r9
     4f2:	8f 90       	pop	r8
     4f4:	08 95       	ret

000004f6 <bgx1_embeddedImage>:

void bgx1_embeddedImage(uint8_t id) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     4f6:	96 e1       	ldi	r25, 0x16	; 22
     4f8:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_EmbeddedImage;
     4fc:	9a e1       	ldi	r25, 0x1A	; 26
     4fe:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = id;
     502:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction_posres(3, 3);
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     50c:	08 95       	ret

0000050e <bgx1_lineTo>:

void bgx1_lineTo(uint8_t x, uint8_t y) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     50e:	96 e1       	ldi	r25, 0x16	; 22
     510:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_LineTo;
     514:	9b e1       	ldi	r25, 0x1B	; 27
     516:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = x;
     51a:	80 93 2b 01 	sts	0x012B, r24
  i2c_buf[3] = y;
     51e:	60 93 2c 01 	sts	0x012C, r22
  bgx1_transaction_posres(4, 3);
     522:	84 e0       	ldi	r24, 0x04	; 4
     524:	0e 94 70 00 	call	0xe0	; 0xe0 <bgx1_transaction_posres.clone.0>
}
     528:	08 95       	ret

0000052a <bgx1_termClear>:

void bgx1_termClear() {
  i2c_buf[0] = BGX1_I2C_ADDR;
     52a:	86 e1       	ldi	r24, 0x16	; 22
     52c:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_TermClear;
     530:	80 e3       	ldi	r24, 0x30	; 48
     532:	80 93 2a 01 	sts	0x012A, r24
  bgx1_transaction(2, 1);
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     53e:	08 95       	ret

00000540 <bgx1_termGoto>:

void bgx1_termGoto(uint8_t col, uint8_t row) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     540:	96 e1       	ldi	r25, 0x16	; 22
     542:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_TermGoto;
     546:	91 e3       	ldi	r25, 0x31	; 49
     548:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = col;
     54c:	80 93 2b 01 	sts	0x012B, r24
  i2c_buf[3] = row;
     550:	60 93 2c 01 	sts	0x012C, r22
  bgx1_transaction(4, 1);
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     55c:	08 95       	ret

0000055e <bgx1_termScroll>:

void bgx1_termScroll(int8_t lines) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     55e:	96 e1       	ldi	r25, 0x16	; 22
     560:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_TermScroll;
     564:	92 e3       	ldi	r25, 0x32	; 50
     566:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = lines;
     56a:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 1);
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     576:	08 95       	ret

00000578 <bgx1_termPrint>:

void bgx1_termPrint(const char * text) {
     578:	1f 93       	push	r17
     57a:	bc 01       	movw	r22, r24
  i2c_buf[0] = BGX1_I2C_ADDR;
     57c:	86 e1       	ldi	r24, 0x16	; 22
     57e:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_TermPrint;
     582:	83 e3       	ldi	r24, 0x33	; 51
     584:	80 93 2a 01 	sts	0x012A, r24
  uint8_t len = strlen(text);
     588:	db 01       	movw	r26, r22
     58a:	0d 90       	ld	r0, X+
     58c:	00 20       	and	r0, r0
     58e:	e9 f7       	brne	.-6      	; 0x58a <bgx1_termPrint+0x12>
     590:	ad 01       	movw	r20, r26
     592:	41 50       	subi	r20, 0x01	; 1
     594:	50 40       	sbci	r21, 0x00	; 0
     596:	46 1b       	sub	r20, r22
     598:	57 0b       	sbc	r21, r23
     59a:	14 2f       	mov	r17, r20
  memcpy (i2c_buf+2, text, len);
     59c:	2b e2       	ldi	r18, 0x2B	; 43
     59e:	31 e0       	ldi	r19, 0x01	; 1
     5a0:	c9 01       	movw	r24, r18
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <memcpy>
  bgx1_transaction(2+len, 2);
     5a8:	81 2f       	mov	r24, r17
     5aa:	8e 5f       	subi	r24, 0xFE	; 254
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     5b2:	1f 91       	pop	r17
     5b4:	08 95       	ret

000005b6 <bgx1_termPrint_P>:

void bgx1_termPrint_P(PGM_P text) {
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
  i2c_buf[0] = BGX1_I2C_ADDR;
     5be:	86 e1       	ldi	r24, 0x16	; 22
     5c0:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_TermPrint;
     5c4:	83 e3       	ldi	r24, 0x33	; 51
     5c6:	80 93 2a 01 	sts	0x012A, r24
  uint8_t len = strlen_P(text);
     5ca:	ce 01       	movw	r24, r28
     5cc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <strlen_P>
     5d0:	18 2f       	mov	r17, r24
  memcpy_P (i2c_buf+2, text, len);
     5d2:	8b e2       	ldi	r24, 0x2B	; 43
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	be 01       	movw	r22, r28
     5d8:	41 2f       	mov	r20, r17
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <memcpy_P>
  bgx1_transaction(2+len, 2);
     5e0:	81 2f       	mov	r24, r17
     5e2:	8e 5f       	subi	r24, 0xFE	; 254
     5e4:	62 e0       	ldi	r22, 0x02	; 2
     5e6:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	08 95       	ret

000005f2 <bgx1_syncPort>:

void bgx1_syncPort() {
  i2c_buf[0] = BGX1_I2C_ADDR;
     5f2:	86 e1       	ldi	r24, 0x16	; 22
     5f4:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_SyncPort;
     5f8:	80 e4       	ldi	r24, 0x40	; 64
     5fa:	80 93 2a 01 	sts	0x012A, r24
  i2c_buf[2] = bgx1_DDR;
     5fe:	80 91 14 01 	lds	r24, 0x0114
     602:	80 93 2b 01 	sts	0x012B, r24
  i2c_buf[3] = bgx1_PORT;
     606:	80 91 15 01 	lds	r24, 0x0115
     60a:	80 93 2c 01 	sts	0x012C, r24
  bgx1_transaction(4, 2);
     60e:	84 e0       	ldi	r24, 0x04	; 4
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  bgx1_PIN = i2c_buf[1];
     616:	80 91 2a 01 	lds	r24, 0x012A
     61a:	80 93 16 01 	sts	0x0116, r24
}
     61e:	08 95       	ret

00000620 <bgx1_getAnalog>:

uint16_t bgx1_getAnalog(uint8_t index) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     620:	96 e1       	ldi	r25, 0x16	; 22
     622:	90 93 29 01 	sts	0x0129, r25
  i2c_buf[1] = CMD_GetAnalog;
     626:	91 e4       	ldi	r25, 0x41	; 65
     628:	90 93 2a 01 	sts	0x012A, r25
  i2c_buf[2] = index;
     62c:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 3);
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	63 e0       	ldi	r22, 0x03	; 3
     634:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  return MAKE_WORD(i2c_buf[1], i2c_buf[2]);
     638:	30 91 2a 01 	lds	r19, 0x012A
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	80 91 2b 01 	lds	r24, 0x012B
     642:	28 0f       	add	r18, r24
     644:	31 1d       	adc	r19, r1
}
     646:	c9 01       	movw	r24, r18
     648:	08 95       	ret

0000064a <bgx1_syncInterface>:

void bgx1_syncInterface() {
  i2c_buf[0] = BGX1_I2C_ADDR;
     64a:	86 e1       	ldi	r24, 0x16	; 22
     64c:	80 93 29 01 	sts	0x0129, r24
  i2c_buf[1] = CMD_SyncInterface;
     650:	82 e4       	ldi	r24, 0x42	; 66
     652:	80 93 2a 01 	sts	0x012A, r24
  i2c_buf[2] = bgx1_Leds;
     656:	80 91 17 01 	lds	r24, 0x0117
     65a:	80 93 2b 01 	sts	0x012B, r24
  bgx1_transaction(3, 2);
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
  bgx1_Keys = i2c_buf[1];
     666:	80 91 2a 01 	lds	r24, 0x012A
     66a:	80 93 18 01 	sts	0x0118, r24
}
     66e:	08 95       	ret

00000670 <bgx1_setIllumination>:

void bgx1_setIllumination(uint16_t value) {
  i2c_buf[0] = BGX1_I2C_ADDR;
     670:	26 e1       	ldi	r18, 0x16	; 22
     672:	20 93 29 01 	sts	0x0129, r18
  i2c_buf[1] = CMD_SetIllumination;
     676:	23 e4       	ldi	r18, 0x43	; 67
     678:	20 93 2a 01 	sts	0x012A, r18
  i2c_buf[2] = HIBYTE(value);
     67c:	90 93 2b 01 	sts	0x012B, r25
  i2c_buf[3] = LOBYTE(value);
     680:	80 93 2c 01 	sts	0x012C, r24
  bgx1_transaction(4, 1);
     684:	84 e0       	ldi	r24, 0x04	; 4
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	0e 94 67 00 	call	0xce	; 0xce <bgx1_transaction>
}
     68c:	08 95       	ret

0000068e <delay>:
#ifdef __cplusplus
extern "C" {
#endif

void delay(uint16_t ms){
    while(ms--)
     68e:	07 c0       	rjmp	.+14     	; 0x69e <delay+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     690:	e7 e8       	ldi	r30, 0x87	; 135
     692:	f3 e1       	ldi	r31, 0x13	; 19
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <delay+0x6>
     698:	00 c0       	rjmp	.+0      	; 0x69a <delay+0xc>
     69a:	00 00       	nop
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	b9 f7       	brne	.-18     	; 0x690 <delay+0x2>
      delay_ms(1);
}
     6a2:	08 95       	ret

000006a4 <i2c_start_transmission>:

////////////////////////////////////////////////////////////////////////////////

uint8_t i2c_start_transmission(void) {
  uint8_t res = 0;
  cli();
     6a4:	f8 94       	cli
  do {
    if (i2c_state == I2C_BUSY) {
     6a6:	80 91 4e 01 	lds	r24, 0x014E
     6aa:	88 23       	and	r24, r24
     6ac:	11 f4       	brne	.+4      	; 0x6b2 <i2c_start_transmission+0xe>
      i2c_state = I2C_ERROR+1;
     6ae:	81 e1       	ldi	r24, 0x11	; 17
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <i2c_start_transmission+0x18>
      break;
    }
  
    if (TWCR & _BV(TWSTO)) {
     6b2:	80 91 bc 00 	lds	r24, 0x00BC
     6b6:	84 ff       	sbrs	r24, 4
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <i2c_start_transmission+0x20>
      i2c_state = I2C_ERROR+2;
     6ba:	82 e1       	ldi	r24, 0x12	; 18
     6bc:	80 93 4e 01 	sts	0x014E, r24
}

////////////////////////////////////////////////////////////////////////////////

uint8_t i2c_start_transmission(void) {
  uint8_t res = 0;
     6c0:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  
    if (TWCR & _BV(TWSTO)) {
      i2c_state = I2C_ERROR+2;
      break;
     6c2:	15 c0       	rjmp	.+42     	; 0x6ee <i2c_start_transmission+0x4a>
    }
    if (TWCR & _BV(TWSTA)) {
     6c4:	80 91 bc 00 	lds	r24, 0x00BC
     6c8:	85 ff       	sbrs	r24, 5
     6ca:	07 c0       	rjmp	.+14     	; 0x6da <i2c_start_transmission+0x36>
      TWCR = 0;
     6cc:	10 92 bc 00 	sts	0x00BC, r1
      TWCR = _BV(TWEN);
     6d0:	84 e0       	ldi	r24, 0x04	; 4
     6d2:	80 93 bc 00 	sts	0x00BC, r24
      i2c_state = I2C_ERROR+8;
     6d6:	88 e1       	ldi	r24, 0x18	; 24
     6d8:	f1 cf       	rjmp	.-30     	; 0x6bc <i2c_start_transmission+0x18>
      break;
    }
    i2c_state = I2C_BUSY;
     6da:	10 92 4e 01 	sts	0x014E, r1
#ifdef NIBO_I2C_TXRX
    i2c_size = i2c_tx_size;
     6de:	80 91 51 01 	lds	r24, 0x0151
     6e2:	80 93 4f 01 	sts	0x014F, r24
};

////////////////////////////////////////////////////////////////////////////////

static inline void twi_start() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE) | _BV(TWSTA);
     6e6:	85 ea       	ldi	r24, 0xA5	; 165
     6e8:	80 93 bc 00 	sts	0x00BC, r24
    i2c_state = I2C_BUSY;
#ifdef NIBO_I2C_TXRX
    i2c_size = i2c_tx_size;
#endif
    twi_start();
    res = 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
  } while(0);
  sei();
     6ee:	78 94       	sei
  return res;
}
     6f0:	08 95       	ret

000006f2 <i2c_wait_transmission>:

uint8_t i2c_wait_transmission(void) {
  uint16_t i = 50000; // wait up to 50 ms for command to complete
     6f2:	80 e5       	ldi	r24, 0x50	; 80
     6f4:	93 ec       	ldi	r25, 0xC3	; 195
  while (i--) {
     6f6:	0c c0       	rjmp	.+24     	; 0x710 <i2c_wait_transmission+0x1e>
    if ((TWCR & _BV(TWIE))||(TWCR & _BV(TWSTO))) {
     6f8:	20 91 bc 00 	lds	r18, 0x00BC
     6fc:	20 fd       	sbrc	r18, 0
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <i2c_wait_transmission+0x16>
     700:	20 91 bc 00 	lds	r18, 0x00BC
     704:	24 ff       	sbrs	r18, 4
     706:	19 c0       	rjmp	.+50     	; 0x73a <i2c_wait_transmission+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     708:	26 e0       	ldi	r18, 0x06	; 6
     70a:	2a 95       	dec	r18
     70c:	f1 f7       	brne	.-4      	; 0x70a <i2c_wait_transmission+0x18>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <i2c_wait_transmission+0x1e>
  return res;
}

uint8_t i2c_wait_transmission(void) {
  uint16_t i = 50000; // wait up to 50 ms for command to complete
  while (i--) {
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	8f 3f       	cpi	r24, 0xFF	; 255
     716:	92 07       	cpc	r25, r18
     718:	79 f7       	brne	.-34     	; 0x6f8 <i2c_wait_transmission+0x6>
    } else {
//      _delay_us(10);
      return 1;
    }
  }
  cli();
     71a:	f8 94       	cli
  TWCR = 0;
     71c:	10 92 bc 00 	sts	0x00BC, r1
  TWCR = _BV(TWEN);
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	80 93 bc 00 	sts	0x00BC, r24
  if (i2c_state < I2C_ERROR) {
     726:	80 91 4e 01 	lds	r24, 0x014E
     72a:	80 31       	cpi	r24, 0x10	; 16
     72c:	18 f4       	brcc	.+6      	; 0x734 <i2c_wait_transmission+0x42>
    i2c_state = I2C_ERROR+3;
     72e:	83 e1       	ldi	r24, 0x13	; 19
     730:	80 93 4e 01 	sts	0x014E, r24
  }
  sei();
     734:	78 94       	sei
  return 0;
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	08 95       	ret
  while (i--) {
    if ((TWCR & _BV(TWIE))||(TWCR & _BV(TWSTO))) {
      _delay_us(1);
    } else {
//      _delay_us(10);
      return 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
  if (i2c_state < I2C_ERROR) {
    i2c_state = I2C_ERROR+3;
  }
  sei();
  return 0;
}
     73c:	08 95       	ret

0000073e <i2c_status>:


uint8_t i2c_status(void) {
  uint8_t res = i2c_state;
     73e:	80 91 4e 01 	lds	r24, 0x014E
  return res;
}
     742:	08 95       	ret

00000744 <i2c_init>:


void i2c_init(void) {
  TWCR = 0;
     744:	ec eb       	ldi	r30, 0xBC	; 188
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	10 82       	st	Z, r1
  TWBR = I2C_TWBR_INIT;
     74a:	84 e6       	ldi	r24, 0x64	; 100
     74c:	80 93 b8 00 	sts	0x00B8, r24
  TWDR = 0xff;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWEN);
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	80 83       	st	Z, r24
  i2c_state = I2C_IDLE;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 4e 01 	sts	0x014E, r24
  nibobee_initialization |= NIBOBEE_I2C_INITIALIZED;
     760:	80 91 6f 01 	lds	r24, 0x016F
     764:	84 60       	ori	r24, 0x04	; 4
     766:	80 93 6f 01 	sts	0x016F, r24
}
     76a:	08 95       	ret

0000076c <__vector_26>:


ISR(TWI_vect) {
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	0b b6       	in	r0, 0x3b	; 59
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	ef 93       	push	r30
     784:	ff 93       	push	r31
  uint8_t res = TWSR & TW_STATUS_MASK;
     786:	80 91 b9 00 	lds	r24, 0x00B9
     78a:	88 7f       	andi	r24, 0xF8	; 248
  i2c_last_TWSR = res;
     78c:	80 93 50 01 	sts	0x0150, r24
  switch (res) {
     790:	88 32       	cpi	r24, 0x28	; 40
     792:	51 f1       	breq	.+84     	; 0x7e8 <__vector_26+0x7c>
     794:	89 32       	cpi	r24, 0x29	; 41
     796:	88 f4       	brcc	.+34     	; 0x7ba <__vector_26+0x4e>
     798:	80 31       	cpi	r24, 0x10	; 16
     79a:	21 f1       	breq	.+72     	; 0x7e4 <__vector_26+0x78>
     79c:	81 31       	cpi	r24, 0x11	; 17
     79e:	38 f4       	brcc	.+14     	; 0x7ae <__vector_26+0x42>
     7a0:	88 23       	and	r24, r24
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <__vector_26+0x3a>
     7a4:	71 c0       	rjmp	.+226    	; 0x888 <__vector_26+0x11c>
     7a6:	88 30       	cpi	r24, 0x08	; 8
     7a8:	09 f0       	breq	.+2      	; 0x7ac <__vector_26+0x40>
     7aa:	73 c0       	rjmp	.+230    	; 0x892 <__vector_26+0x126>
     7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <__vector_26+0x78>
     7ae:	88 31       	cpi	r24, 0x18	; 24
     7b0:	d9 f0       	breq	.+54     	; 0x7e8 <__vector_26+0x7c>
     7b2:	80 32       	cpi	r24, 0x20	; 32
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_26+0x4c>
     7b6:	6d c0       	rjmp	.+218    	; 0x892 <__vector_26+0x126>
     7b8:	67 c0       	rjmp	.+206    	; 0x888 <__vector_26+0x11c>
     7ba:	80 34       	cpi	r24, 0x40	; 64
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <__vector_26+0x54>
     7be:	42 c0       	rjmp	.+132    	; 0x844 <__vector_26+0xd8>
     7c0:	81 34       	cpi	r24, 0x41	; 65
     7c2:	38 f4       	brcc	.+14     	; 0x7d2 <__vector_26+0x66>
     7c4:	80 33       	cpi	r24, 0x30	; 48
     7c6:	09 f4       	brne	.+2      	; 0x7ca <__vector_26+0x5e>
     7c8:	5f c0       	rjmp	.+190    	; 0x888 <__vector_26+0x11c>
     7ca:	88 33       	cpi	r24, 0x38	; 56
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <__vector_26+0x64>
     7ce:	61 c0       	rjmp	.+194    	; 0x892 <__vector_26+0x126>
     7d0:	56 c0       	rjmp	.+172    	; 0x87e <__vector_26+0x112>
     7d2:	80 35       	cpi	r24, 0x50	; 80
     7d4:	59 f1       	breq	.+86     	; 0x82c <__vector_26+0xc0>
     7d6:	88 35       	cpi	r24, 0x58	; 88
     7d8:	09 f4       	brne	.+2      	; 0x7dc <__vector_26+0x70>
     7da:	42 c0       	rjmp	.+132    	; 0x860 <__vector_26+0xf4>
     7dc:	88 34       	cpi	r24, 0x48	; 72
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_26+0x76>
     7e0:	58 c0       	rjmp	.+176    	; 0x892 <__vector_26+0x126>
     7e2:	52 c0       	rjmp	.+164    	; 0x888 <__vector_26+0x11c>
    case TW_START:
    case TW_REP_START:
      i2c_pos=0;
     7e4:	10 92 52 01 	sts	0x0152, r1
    case TW_MT_SLA_ACK:
    case TW_MT_DATA_ACK:
      if (i2c_pos<i2c_size) {
     7e8:	90 91 52 01 	lds	r25, 0x0152
     7ec:	80 91 4f 01 	lds	r24, 0x014F
     7f0:	98 17       	cp	r25, r24
     7f2:	68 f4       	brcc	.+26     	; 0x80e <__vector_26+0xa2>
        twi_send(i2c_buf[i2c_pos++]);
     7f4:	80 91 52 01 	lds	r24, 0x0152
     7f8:	e8 2f       	mov	r30, r24
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	e7 5d       	subi	r30, 0xD7	; 215
     7fe:	fe 4f       	sbci	r31, 0xFE	; 254
     800:	90 81       	ld	r25, Z
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	80 93 52 01 	sts	0x0152, r24
static inline void twi_start() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE) | _BV(TWSTA);
}

static inline void twi_send(uint8_t data) {
  TWDR = data;
     808:	90 93 bb 00 	sts	0x00BB, r25
     80c:	27 c0       	rjmp	.+78     	; 0x85c <__vector_26+0xf0>
    case TW_MT_DATA_ACK:
      if (i2c_pos<i2c_size) {
        twi_send(i2c_buf[i2c_pos++]);
      } else {
#ifdef NIBO_I2C_TXRX
        if (i2c_rx_size) {
     80e:	80 91 53 01 	lds	r24, 0x0153
     812:	88 23       	and	r24, r24
     814:	69 f1       	breq	.+90     	; 0x870 <__vector_26+0x104>
          i2c_size = i2c_rx_size;
     816:	80 91 53 01 	lds	r24, 0x0153
     81a:	80 93 4f 01 	sts	0x014F, r24
          i2c_buf[0] |= 0x01;
     81e:	80 91 29 01 	lds	r24, 0x0129
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 93 29 01 	sts	0x0129, r24
};

////////////////////////////////////////////////////////////////////////////////

static inline void twi_start() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE) | _BV(TWSTA);
     828:	85 ea       	ldi	r24, 0xA5	; 165
     82a:	26 c0       	rjmp	.+76     	; 0x878 <__vector_26+0x10c>
        twi_stop();
      }
      break;
    
    case TW_MR_DATA_ACK:
      i2c_buf[i2c_pos++] = TWDR;
     82c:	80 91 52 01 	lds	r24, 0x0152
     830:	90 91 bb 00 	lds	r25, 0x00BB
     834:	e8 2f       	mov	r30, r24
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	e7 5d       	subi	r30, 0xD7	; 215
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	90 83       	st	Z, r25
     83e:	8f 5f       	subi	r24, 0xFF	; 255
     840:	80 93 52 01 	sts	0x0152, r24
    case TW_MR_SLA_ACK:
      if (i2c_pos+1<i2c_size) {
     844:	80 91 52 01 	lds	r24, 0x0152
     848:	20 91 4f 01 	lds	r18, 0x014F
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	82 17       	cp	r24, r18
     854:	93 07       	cpc	r25, r19
     856:	14 f4       	brge	.+4      	; 0x85c <__vector_26+0xf0>
  TWDR = data;
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE);
}

static inline void twi_ack() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE) | _BV(TWEA);
     858:	85 ec       	ldi	r24, 0xC5	; 197
     85a:	0e c0       	rjmp	.+28     	; 0x878 <__vector_26+0x10c>
}

static inline void twi_nak() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE);
     85c:	85 e8       	ldi	r24, 0x85	; 133
     85e:	0c c0       	rjmp	.+24     	; 0x878 <__vector_26+0x10c>
      }
      break;
    
    case TW_MR_DATA_NACK:
      // Last byte was received
      i2c_buf[i2c_pos] = TWDR;
     860:	e0 91 52 01 	lds	r30, 0x0152
     864:	80 91 bb 00 	lds	r24, 0x00BB
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	e7 5d       	subi	r30, 0xD7	; 215
     86c:	fe 4f       	sbci	r31, 0xFE	; 254
     86e:	80 83       	st	Z, r24
      i2c_state = I2C_SUCCESS;
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	80 93 4e 01 	sts	0x014E, r24
static inline void twi_nak() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE);
}

static inline void twi_stop() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
     876:	84 e9       	ldi	r24, 0x94	; 148
     878:	80 93 bc 00 	sts	0x00BC, r24
     87c:	10 c0       	rjmp	.+32     	; 0x89e <__vector_26+0x132>
}

static inline void twi_abort() {
  TWCR = _BV(TWEN) | _BV(TWINT);
     87e:	84 e8       	ldi	r24, 0x84	; 132
     880:	80 93 bc 00 	sts	0x00BC, r24
      twi_stop();
      break;
      
    case TW_MT_ARB_LOST:
      twi_abort();
      i2c_state = I2C_ERROR+5;
     884:	85 e1       	ldi	r24, 0x15	; 21
     886:	09 c0       	rjmp	.+18     	; 0x89a <__vector_26+0x12e>
static inline void twi_nak() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWIE);
}

static inline void twi_stop() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
     888:	84 e9       	ldi	r24, 0x94	; 148
     88a:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR:
    case TW_MT_SLA_NACK:
    case TW_MR_SLA_NACK:
    case TW_MT_DATA_NACK:
      twi_stop();
      i2c_state = I2C_ERROR+6;
     88e:	86 e1       	ldi	r24, 0x16	; 22
     890:	04 c0       	rjmp	.+8      	; 0x89a <__vector_26+0x12e>
static inline void twi_stop() {
  TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
}

static inline void twi_abort() {
  TWCR = _BV(TWEN) | _BV(TWINT);
     892:	84 e8       	ldi	r24, 0x84	; 132
     894:	80 93 bc 00 	sts	0x00BC, r24
      i2c_state = I2C_ERROR+6;
      break;
    
    default:
      twi_abort();
      i2c_state = I2C_ERROR+7;
     898:	87 e1       	ldi	r24, 0x17	; 23
     89a:	80 93 4e 01 	sts	0x014E, r24
  }
}
     89e:	ff 91       	pop	r31
     8a0:	ef 91       	pop	r30
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	3f 91       	pop	r19
     8a8:	2f 91       	pop	r18
     8aa:	0f 90       	pop	r0
     8ac:	0b be       	out	0x3b, r0	; 59
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <led_init>:
extern "C" {
#endif


void led_init() {
  activate_output_group(IO_LEDS);  // LED bits als Output
     8b8:	84 b1       	in	r24, 0x04	; 4
     8ba:	8f 60       	ori	r24, 0x0F	; 15
     8bc:	84 b9       	out	0x04, r24	; 4
}
     8be:	08 95       	ret

000008c0 <led_set>:

void led_set(uint8_t led, uint8_t status) {
  if (status) {
     8c0:	66 23       	and	r22, r22
     8c2:	89 f0       	breq	.+34     	; 0x8e6 <led_set+0x26>
    switch (led) {
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	49 f0       	breq	.+18     	; 0x8da <led_set+0x1a>
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	28 f0       	brcs	.+10     	; 0x8d6 <led_set+0x16>
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	39 f0       	breq	.+14     	; 0x8de <led_set+0x1e>
     8d0:	83 30       	cpi	r24, 0x03	; 3
     8d2:	c9 f4       	brne	.+50     	; 0x906 <led_set+0x46>
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <led_set+0x22>
      case 0: set_output_groupbit(IO_LEDS, L_YE); break;
     8d6:	28 9a       	sbi	0x05, 0	; 5
     8d8:	08 95       	ret
      case 1: set_output_groupbit(IO_LEDS, L_RD); break;
     8da:	29 9a       	sbi	0x05, 1	; 5
     8dc:	08 95       	ret
      case 2: set_output_groupbit(IO_LEDS, R_RD); break;
     8de:	2a 9a       	sbi	0x05, 2	; 5
     8e0:	08 95       	ret
      case 3: set_output_groupbit(IO_LEDS, R_YE); break;
     8e2:	2b 9a       	sbi	0x05, 3	; 5
     8e4:	08 95       	ret
    }
  } else {
    switch (led) {
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	49 f0       	breq	.+18     	; 0x8fc <led_set+0x3c>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	28 f0       	brcs	.+10     	; 0x8f8 <led_set+0x38>
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	39 f0       	breq	.+14     	; 0x900 <led_set+0x40>
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	41 f4       	brne	.+16     	; 0x906 <led_set+0x46>
     8f6:	06 c0       	rjmp	.+12     	; 0x904 <led_set+0x44>
      case 0: clear_output_groupbit(IO_LEDS, L_YE); break;
     8f8:	28 98       	cbi	0x05, 0	; 5
     8fa:	08 95       	ret
      case 1: clear_output_groupbit(IO_LEDS, L_RD); break;
     8fc:	29 98       	cbi	0x05, 1	; 5
     8fe:	08 95       	ret
      case 2: clear_output_groupbit(IO_LEDS, R_RD); break;
     900:	2a 98       	cbi	0x05, 2	; 5
     902:	08 95       	ret
      case 3: clear_output_groupbit(IO_LEDS, R_YE); break;
     904:	2b 98       	cbi	0x05, 3	; 5
     906:	08 95       	ret

00000908 <motpid_calculate_single>:
  motpid_reset();
  motpid_mode=new_mode;
}


static int16_t motpid_calculate_single(int16_t a2, int16_t a1, int16_t o1, int16_t setpoint, int16_t reading) {
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
  int16_t temp = o1;
  if (temp >= +16384) temp = +16384;
     90c:	e0 e4       	ldi	r30, 0x40	; 64
     90e:	40 30       	cpi	r20, 0x00	; 0
     910:	5e 07       	cpc	r21, r30
     912:	2c f4       	brge	.+10     	; 0x91e <motpid_calculate_single+0x16>
  if (temp <= -16384) temp = -16384;
     914:	e0 ec       	ldi	r30, 0xC0	; 192
     916:	41 30       	cpi	r20, 0x01	; 1
     918:	5e 07       	cpc	r21, r30
     91a:	24 f0       	brlt	.+8      	; 0x924 <motpid_calculate_single+0x1c>
     91c:	05 c0       	rjmp	.+10     	; 0x928 <motpid_calculate_single+0x20>
}


static int16_t motpid_calculate_single(int16_t a2, int16_t a1, int16_t o1, int16_t setpoint, int16_t reading) {
  int16_t temp = o1;
  if (temp >= +16384) temp = +16384;
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e4       	ldi	r21, 0x40	; 64
     922:	02 c0       	rjmp	.+4      	; 0x928 <motpid_calculate_single+0x20>
  if (temp <= -16384) temp = -16384;
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	50 ec       	ldi	r21, 0xC0	; 192
  temp += MOTPID_KI * (setpoint - reading);
  temp += MOTPID_KD * (2*a1 - a2 - reading);
     928:	db 01       	movw	r26, r22
     92a:	aa 0f       	add	r26, r26
     92c:	bb 1f       	adc	r27, r27
     92e:	a8 1b       	sub	r26, r24
     930:	b9 0b       	sbc	r27, r25
     932:	a0 1b       	sub	r26, r16
     934:	b1 0b       	sbc	r27, r17
     936:	fd 01       	movw	r30, r26
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	8a 95       	dec	r24
     940:	e1 f7       	brne	.-8      	; 0x93a <motpid_calculate_single+0x32>
     942:	ea 1b       	sub	r30, r26
     944:	fb 0b       	sbc	r31, r27

static int16_t motpid_calculate_single(int16_t a2, int16_t a1, int16_t o1, int16_t setpoint, int16_t reading) {
  int16_t temp = o1;
  if (temp >= +16384) temp = +16384;
  if (temp <= -16384) temp = -16384;
  temp += MOTPID_KI * (setpoint - reading);
     946:	20 1b       	sub	r18, r16
     948:	31 0b       	sbc	r19, r17
     94a:	c9 01       	movw	r24, r18
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	e8 0f       	add	r30, r24
     95a:	f9 1f       	adc	r31, r25
  temp += MOTPID_KD * (2*a1 - a2 - reading);
  temp += MOTPID_KP * (a1 - reading);
     95c:	60 1b       	sub	r22, r16
     95e:	71 0b       	sbc	r23, r17
     960:	cb 01       	movw	r24, r22
     962:	88 0f       	add	r24, r24
     964:	99 1f       	adc	r25, r25
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	86 0f       	add	r24, r22
     96c:	97 1f       	adc	r25, r23
static int16_t motpid_calculate_single(int16_t a2, int16_t a1, int16_t o1, int16_t setpoint, int16_t reading) {
  int16_t temp = o1;
  if (temp >= +16384) temp = +16384;
  if (temp <= -16384) temp = -16384;
  temp += MOTPID_KI * (setpoint - reading);
  temp += MOTPID_KD * (2*a1 - a2 - reading);
     96e:	e8 0f       	add	r30, r24
     970:	f9 1f       	adc	r31, r25
  temp += MOTPID_KP * (a1 - reading);
     972:	e4 0f       	add	r30, r20
     974:	f5 1f       	adc	r31, r21
  return temp;
}
     976:	cf 01       	movw	r24, r30
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	08 95       	ret

0000097e <motpid_reset>:
static motpid_dyndata_t motpid_dyndata_left;
static motpid_dyndata_t motpid_dyndata_right;


void motpid_reset(void) {
  motpid_dyndata_left.a2 = 0;
     97e:	10 92 22 01 	sts	0x0122, r1
     982:	10 92 21 01 	sts	0x0121, r1
  motpid_dyndata_left.a1 = 0;
     986:	10 92 24 01 	sts	0x0124, r1
     98a:	10 92 23 01 	sts	0x0123, r1
  motpid_dyndata_left.o1 = 0;
     98e:	10 92 26 01 	sts	0x0126, r1
     992:	10 92 25 01 	sts	0x0125, r1
  motpid_dyndata_right.a2 = 0;
     996:	10 92 1c 01 	sts	0x011C, r1
     99a:	10 92 1b 01 	sts	0x011B, r1
  motpid_dyndata_right.a1 = 0;
     99e:	10 92 1e 01 	sts	0x011E, r1
     9a2:	10 92 1d 01 	sts	0x011D, r1
  motpid_dyndata_right.o1 = 0;
     9a6:	10 92 20 01 	sts	0x0120, r1
     9aa:	10 92 1f 01 	sts	0x011F, r1
}
     9ae:	08 95       	ret

000009b0 <motpid_change_mode>:


void motpid_change_mode(uint8_t new_mode) {
     9b0:	df 93       	push	r29
     9b2:	cf 93       	push	r28
     9b4:	0f 92       	push	r0
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
  if (motpid_mode==new_mode)
     9ba:	90 91 5d 01 	lds	r25, 0x015D
     9be:	98 17       	cp	r25, r24
     9c0:	31 f0       	breq	.+12     	; 0x9ce <motpid_change_mode+0x1e>
    return;
  motpid_reset();
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	0e 94 bf 04 	call	0x97e	; 0x97e <motpid_reset>
  motpid_mode=new_mode;
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	80 93 5d 01 	sts	0x015D, r24
}
     9ce:	0f 90       	pop	r0
     9d0:	cf 91       	pop	r28
     9d2:	df 91       	pop	r29
     9d4:	08 95       	ret

000009d6 <motpid_left_timer_int>:
  temp += MOTPID_KP * (a1 - reading);
  return temp;
}


void motpid_left_timer_int(void) {
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
  motpid_left_speed = (3*motpid_left_speed + (MOTPID_FREQ/2)*odometry_pid_left)/4;
     9e2:	90 91 69 01 	lds	r25, 0x0169
     9e6:	82 e3       	ldi	r24, 0x32	; 50
     9e8:	98 02       	muls	r25, r24
     9ea:	c0 01       	movw	r24, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	40 91 61 01 	lds	r20, 0x0161
     9f2:	50 91 62 01 	lds	r21, 0x0162
     9f6:	9a 01       	movw	r18, r20
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	24 0f       	add	r18, r20
     9fe:	35 1f       	adc	r19, r21
     a00:	82 0f       	add	r24, r18
     a02:	93 1f       	adc	r25, r19
     a04:	24 e0       	ldi	r18, 0x04	; 4
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	b9 01       	movw	r22, r18
     a0a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     a0e:	eb 01       	movw	r28, r22
     a10:	70 93 62 01 	sts	0x0162, r23
     a14:	60 93 61 01 	sts	0x0161, r22
  motpid_left_speed2 = (3*motpid_left_speed2 + motpid_left_speed)/4;
     a18:	40 91 5b 01 	lds	r20, 0x015B
     a1c:	50 91 5c 01 	lds	r21, 0x015C
     a20:	ca 01       	movw	r24, r20
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	84 0f       	add	r24, r20
     a28:	95 1f       	adc	r25, r21
     a2a:	86 0f       	add	r24, r22
     a2c:	97 1f       	adc	r25, r23
     a2e:	b9 01       	movw	r22, r18
     a30:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     a34:	70 93 5c 01 	sts	0x015C, r23
     a38:	60 93 5b 01 	sts	0x015B, r22
  if (motpid_mode) {
     a3c:	80 91 5d 01 	lds	r24, 0x015D
     a40:	88 23       	and	r24, r24
     a42:	09 f4       	brne	.+2      	; 0xa46 <motpid_left_timer_int+0x70>
     a44:	4d c0       	rjmp	.+154    	; 0xae0 <motpid_left_timer_int+0x10a>
    int16_t value = motpid_left_speed;
    int16_t setpoint = motpid_left_value;
     a46:	20 91 5f 01 	lds	r18, 0x015F
     a4a:	30 91 60 01 	lds	r19, 0x0160
    if (motpid_mode==MOTPID_MODE_POS) {
     a4e:	84 30       	cpi	r24, 0x04	; 4
     a50:	21 f5       	brne	.+72     	; 0xa9a <motpid_left_timer_int+0xc4>
      setpoint -= odometry_left;
     a52:	40 91 6a 01 	lds	r20, 0x016A
     a56:	50 91 6b 01 	lds	r21, 0x016B
      if (setpoint>motpid_position_speed) setpoint=motpid_position_speed;
     a5a:	80 91 11 01 	lds	r24, 0x0111
     a5e:	90 91 12 01 	lds	r25, 0x0112
     a62:	24 1b       	sub	r18, r20
     a64:	35 0b       	sbc	r19, r21
     a66:	82 17       	cp	r24, r18
     a68:	93 07       	cpc	r25, r19
     a6a:	0c f4       	brge	.+2      	; 0xa6e <motpid_left_timer_int+0x98>
     a6c:	9c 01       	movw	r18, r24
      if (setpoint<-motpid_position_speed) setpoint=-motpid_position_speed;
     a6e:	90 95       	com	r25
     a70:	81 95       	neg	r24
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
  if (motpid_mode) {
    int16_t value = motpid_left_speed;
    int16_t setpoint = motpid_left_value;
    if (motpid_mode==MOTPID_MODE_POS) {
      setpoint -= odometry_left;
      if (setpoint>motpid_position_speed) setpoint=motpid_position_speed;
     a74:	28 17       	cp	r18, r24
     a76:	39 07       	cpc	r19, r25
     a78:	0c f4       	brge	.+2      	; 0xa7c <motpid_left_timer_int+0xa6>
     a7a:	9c 01       	movw	r18, r24
      if (setpoint<-motpid_position_speed) setpoint=-motpid_position_speed;
      if (setpoint==0) {
     a7c:	21 15       	cp	r18, r1
     a7e:	31 05       	cpc	r19, r1
     a80:	61 f4       	brne	.+24     	; 0xa9a <motpid_left_timer_int+0xc4>
        motpid_dyndata_left.a2 = motpid_dyndata_left.a1 = motpid_dyndata_left.o1 = 0;
     a82:	10 92 26 01 	sts	0x0126, r1
     a86:	10 92 25 01 	sts	0x0125, r1
     a8a:	10 92 24 01 	sts	0x0124, r1
     a8e:	10 92 23 01 	sts	0x0123, r1
     a92:	10 92 22 01 	sts	0x0122, r1
     a96:	10 92 21 01 	sts	0x0121, r1
      }
    }

    motpid_dyndata_left.o1 = motpid_calculate_single(motpid_dyndata_left.a2,  motpid_dyndata_left.a1,
     a9a:	e0 90 23 01 	lds	r14, 0x0123
     a9e:	f0 90 24 01 	lds	r15, 0x0124
     aa2:	40 91 25 01 	lds	r20, 0x0125
     aa6:	50 91 26 01 	lds	r21, 0x0126
     aaa:	80 91 21 01 	lds	r24, 0x0121
     aae:	90 91 22 01 	lds	r25, 0x0122
     ab2:	b7 01       	movw	r22, r14
     ab4:	8e 01       	movw	r16, r28
     ab6:	0e 94 84 04 	call	0x908	; 0x908 <motpid_calculate_single>
     aba:	90 93 26 01 	sts	0x0126, r25
     abe:	80 93 25 01 	sts	0x0125, r24
        motpid_dyndata_left.o1, setpoint,  value);
    motpid_dyndata_left.a2 = motpid_dyndata_left.a1;
     ac2:	f0 92 22 01 	sts	0x0122, r15
     ac6:	e0 92 21 01 	sts	0x0121, r14
    motpid_dyndata_left.a1 = value;
     aca:	d0 93 24 01 	sts	0x0124, r29
     ace:	c0 93 23 01 	sts	0x0123, r28

    motpwm_setLeft(motpid_dyndata_left.o1 / 16);
     ad2:	60 e1       	ldi	r22, 0x10	; 16
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     ada:	cb 01       	movw	r24, r22
     adc:	0e 94 06 07 	call	0xe0c	; 0xe0c <motpwm_setLeft>
  }
  odometry_pid_left = 0;
     ae0:	10 92 69 01 	sts	0x0169, r1
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <motpid_right_timer_int>:


void motpid_right_timer_int(void) {
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
  motpid_right_speed = (3*motpid_right_speed + (MOTPID_FREQ/2)*odometry_pid_right)/4;
     afe:	90 91 6e 01 	lds	r25, 0x016E
     b02:	82 e3       	ldi	r24, 0x32	; 50
     b04:	98 02       	muls	r25, r24
     b06:	c0 01       	movw	r24, r0
     b08:	11 24       	eor	r1, r1
     b0a:	40 91 58 01 	lds	r20, 0x0158
     b0e:	50 91 59 01 	lds	r21, 0x0159
     b12:	9a 01       	movw	r18, r20
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	24 0f       	add	r18, r20
     b1a:	35 1f       	adc	r19, r21
     b1c:	82 0f       	add	r24, r18
     b1e:	93 1f       	adc	r25, r19
     b20:	24 e0       	ldi	r18, 0x04	; 4
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	b9 01       	movw	r22, r18
     b26:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     b2a:	eb 01       	movw	r28, r22
     b2c:	70 93 59 01 	sts	0x0159, r23
     b30:	60 93 58 01 	sts	0x0158, r22
  motpid_right_speed2 = (3*motpid_right_speed2 + motpid_right_speed)/4;
     b34:	40 91 54 01 	lds	r20, 0x0154
     b38:	50 91 55 01 	lds	r21, 0x0155
     b3c:	ca 01       	movw	r24, r20
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	84 0f       	add	r24, r20
     b44:	95 1f       	adc	r25, r21
     b46:	86 0f       	add	r24, r22
     b48:	97 1f       	adc	r25, r23
     b4a:	b9 01       	movw	r22, r18
     b4c:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     b50:	70 93 55 01 	sts	0x0155, r23
     b54:	60 93 54 01 	sts	0x0154, r22
  if (motpid_mode) {
     b58:	80 91 5d 01 	lds	r24, 0x015D
     b5c:	88 23       	and	r24, r24
     b5e:	09 f4       	brne	.+2      	; 0xb62 <motpid_right_timer_int+0x70>
     b60:	4d c0       	rjmp	.+154    	; 0xbfc <motpid_right_timer_int+0x10a>
    int16_t value = motpid_right_speed;
    int16_t setpoint = motpid_right_value;
     b62:	20 91 56 01 	lds	r18, 0x0156
     b66:	30 91 57 01 	lds	r19, 0x0157
    if (motpid_mode==MOTPID_MODE_POS) {
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	21 f5       	brne	.+72     	; 0xbb6 <motpid_right_timer_int+0xc4>
      setpoint -= odometry_right;
     b6e:	40 91 6c 01 	lds	r20, 0x016C
     b72:	50 91 6d 01 	lds	r21, 0x016D
      if (setpoint>motpid_position_speed) setpoint=motpid_position_speed;
     b76:	80 91 11 01 	lds	r24, 0x0111
     b7a:	90 91 12 01 	lds	r25, 0x0112
     b7e:	24 1b       	sub	r18, r20
     b80:	35 0b       	sbc	r19, r21
     b82:	82 17       	cp	r24, r18
     b84:	93 07       	cpc	r25, r19
     b86:	0c f4       	brge	.+2      	; 0xb8a <motpid_right_timer_int+0x98>
     b88:	9c 01       	movw	r18, r24
      if (setpoint<-motpid_position_speed) setpoint=-motpid_position_speed;
     b8a:	90 95       	com	r25
     b8c:	81 95       	neg	r24
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
  if (motpid_mode) {
    int16_t value = motpid_right_speed;
    int16_t setpoint = motpid_right_value;
    if (motpid_mode==MOTPID_MODE_POS) {
      setpoint -= odometry_right;
      if (setpoint>motpid_position_speed) setpoint=motpid_position_speed;
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	0c f4       	brge	.+2      	; 0xb98 <motpid_right_timer_int+0xa6>
     b96:	9c 01       	movw	r18, r24
      if (setpoint<-motpid_position_speed) setpoint=-motpid_position_speed;
      if (setpoint==0) {
     b98:	21 15       	cp	r18, r1
     b9a:	31 05       	cpc	r19, r1
     b9c:	61 f4       	brne	.+24     	; 0xbb6 <motpid_right_timer_int+0xc4>
        motpid_dyndata_right.a2 = motpid_dyndata_right.a1 = motpid_dyndata_right.o1 = 0;
     b9e:	10 92 20 01 	sts	0x0120, r1
     ba2:	10 92 1f 01 	sts	0x011F, r1
     ba6:	10 92 1e 01 	sts	0x011E, r1
     baa:	10 92 1d 01 	sts	0x011D, r1
     bae:	10 92 1c 01 	sts	0x011C, r1
     bb2:	10 92 1b 01 	sts	0x011B, r1
      }
    }

    motpid_dyndata_right.o1 = motpid_calculate_single(motpid_dyndata_right.a2,  motpid_dyndata_right.a1,
     bb6:	e0 90 1d 01 	lds	r14, 0x011D
     bba:	f0 90 1e 01 	lds	r15, 0x011E
     bbe:	40 91 1f 01 	lds	r20, 0x011F
     bc2:	50 91 20 01 	lds	r21, 0x0120
     bc6:	80 91 1b 01 	lds	r24, 0x011B
     bca:	90 91 1c 01 	lds	r25, 0x011C
     bce:	b7 01       	movw	r22, r14
     bd0:	8e 01       	movw	r16, r28
     bd2:	0e 94 84 04 	call	0x908	; 0x908 <motpid_calculate_single>
     bd6:	90 93 20 01 	sts	0x0120, r25
     bda:	80 93 1f 01 	sts	0x011F, r24
        motpid_dyndata_right.o1, setpoint,  value);
    motpid_dyndata_right.a2 = motpid_dyndata_right.a1;
     bde:	f0 92 1c 01 	sts	0x011C, r15
     be2:	e0 92 1b 01 	sts	0x011B, r14
    motpid_dyndata_right.a1 = value;
     be6:	d0 93 1e 01 	sts	0x011E, r29
     bea:	c0 93 1d 01 	sts	0x011D, r28

    motpwm_setRight(motpid_dyndata_right.o1 / 16);
     bee:	60 e1       	ldi	r22, 0x10	; 16
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
     bf6:	cb 01       	movw	r24, r22
     bf8:	0e 94 40 07 	call	0xe80	; 0xe80 <motpwm_setRight>
  }
  odometry_pid_right = 0;
     bfc:	10 92 6e 01 	sts	0x016E, r1
}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <__vector_15>:


ISR(TIMER1_OVF_vect) {
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	0b b6       	in	r0, 0x3b	; 59
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
  static uint8_t counter=0;
  static uint8_t running=0;
  counter++;
     c34:	80 91 1a 01 	lds	r24, 0x011A
     c38:	98 2f       	mov	r25, r24
     c3a:	9f 5f       	subi	r25, 0xFF	; 255
     c3c:	90 93 1a 01 	sts	0x011A, r25
  if (running) {
     c40:	20 91 19 01 	lds	r18, 0x0119
     c44:	22 23       	and	r18, r18
     c46:	e1 f4       	brne	.+56     	; 0xc80 <__vector_15+0x72>
    return;
  }
  running=1;
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	20 93 19 01 	sts	0x0119, r18
  if (counter>=15) {
     c4e:	9f 30       	cpi	r25, 0x0F	; 15
     c50:	40 f0       	brcs	.+16     	; 0xc62 <__vector_15+0x54>
    counter-=15;
     c52:	8e 50       	subi	r24, 0x0E	; 14
     c54:	80 93 1a 01 	sts	0x011A, r24
    clock_inc_irq(1, 22);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	66 e1       	ldi	r22, 0x16	; 22
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <clock_inc_irq>
  }

  motpid_cnt++;
     c62:	80 91 5e 01 	lds	r24, 0x015E
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	80 93 5e 01 	sts	0x015E, r24
  if (motpid_cnt>=MOTPID_CALL_CNT) {
     c6c:	83 39       	cpi	r24, 0x93	; 147
     c6e:	30 f0       	brcs	.+12     	; 0xc7c <__vector_15+0x6e>
    motpid_left_timer_int();
     c70:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <motpid_left_timer_int>
    //schedule_irq();
    motpid_right_timer_int();
     c74:	0e 94 79 05 	call	0xaf2	; 0xaf2 <motpid_right_timer_int>
    //schedule_irq();
    //comdata_signal();
    motpid_cnt=0;
     c78:	10 92 5e 01 	sts	0x015E, r1
  }
  running = 0;
     c7c:	10 92 19 01 	sts	0x0119, r1
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0b be       	out	0x3b, r0	; 59
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <motpid_init>:


void motpid_init() {
  if (!(nibobee_initialization&NIBOBEE_MOTPWM_INITIALIZED)) {
     ca6:	80 91 6f 01 	lds	r24, 0x016F
     caa:	81 fd       	sbrc	r24, 1
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <motpid_init+0xc>
    motpwm_init();
     cae:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <motpwm_init>
  }
  PWM_TIMER_IMSK |= PWM_TIMER_IMSK_OIE;
     cb2:	80 91 6f 00 	lds	r24, 0x006F
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	80 93 6f 00 	sts	0x006F, r24
  motpid_reset();
     cbc:	0e 94 bf 04 	call	0x97e	; 0x97e <motpid_reset>
  motpid_mode = MOTPID_MODE_OFF;
     cc0:	10 92 5d 01 	sts	0x015D, r1
}
     cc4:	08 95       	ret

00000cc6 <motpid_release>:


void motpid_release() {
  motpid_change_mode(MOTPID_MODE_OFF);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motpid_change_mode>
}
     ccc:	08 95       	ret

00000cce <motpid_setSpeed>:
    motpid_setSpeed(0, 0);
  }
}


void motpid_setSpeed(int16_t left, int16_t right) {
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
     cd8:	8b 01       	movw	r16, r22
    motpid_change_mode(MOTPID_MODE_SPEED);
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motpid_change_mode>
    motpid_left_value = left;
     ce0:	d0 93 60 01 	sts	0x0160, r29
     ce4:	c0 93 5f 01 	sts	0x015F, r28
    motpid_right_value = right;  
     ce8:	10 93 57 01 	sts	0x0157, r17
     cec:	00 93 56 01 	sts	0x0156, r16
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <motpid_stop>:
  motpid_change_mode(MOTPID_MODE_OFF);
}


void motpid_stop(uint8_t immediate) {
  if (immediate) {
     cfa:	88 23       	and	r24, r24
     cfc:	61 f0       	breq	.+24     	; 0xd16 <motpid_stop+0x1c>
    motpid_change_mode(MOTPID_MODE_OFF);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motpid_change_mode>
    motpwm_setRight(0);
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 40 07 	call	0xe80	; 0xe80 <motpwm_setRight>
    motpwm_setLeft(0);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 94 06 07 	call	0xe0c	; 0xe0c <motpwm_setLeft>
     d14:	08 95       	ret
  } else {
    motpid_setSpeed(0, 0);
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	0e 94 67 06 	call	0xcce	; 0xcce <motpid_setSpeed>
     d22:	08 95       	ret

00000d24 <motpid_setTarget>:
    motpid_left_value = left;
    motpid_right_value = right;  
}


void motpid_setTarget(int16_t left, int16_t right, uint16_t speed) {
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
     d32:	8b 01       	movw	r16, r22
     d34:	7a 01       	movw	r14, r20
    motpid_change_mode(MOTPID_MODE_POS);
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motpid_change_mode>
    motpid_position_speed = speed;
     d3c:	f0 92 12 01 	sts	0x0112, r15
     d40:	e0 92 11 01 	sts	0x0111, r14
    motpid_left_value = left;
     d44:	d0 93 60 01 	sts	0x0160, r29
     d48:	c0 93 5f 01 	sts	0x015F, r28
    motpid_right_value = right;
     d4c:	10 93 57 01 	sts	0x0157, r17
     d50:	00 93 56 01 	sts	0x0156, r16
}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	08 95       	ret

00000d62 <motpid_setTargetRel>:


void motpid_setTargetRel(int16_t left, int16_t right, uint16_t speed) {
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
     d70:	8b 01       	movw	r16, r22
     d72:	7a 01       	movw	r14, r20
    motpid_change_mode(MOTPID_MODE_POS);
     d74:	84 e0       	ldi	r24, 0x04	; 4
     d76:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <motpid_change_mode>
    motpid_position_speed = speed;
     d7a:	f0 92 12 01 	sts	0x0112, r15
     d7e:	e0 92 11 01 	sts	0x0111, r14
    motpid_left_value  = odometry_left  + left;
     d82:	80 91 6a 01 	lds	r24, 0x016A
     d86:	90 91 6b 01 	lds	r25, 0x016B
     d8a:	8c 0f       	add	r24, r28
     d8c:	9d 1f       	adc	r25, r29
     d8e:	90 93 60 01 	sts	0x0160, r25
     d92:	80 93 5f 01 	sts	0x015F, r24
    motpid_right_value = odometry_right + right;
     d96:	80 91 6c 01 	lds	r24, 0x016C
     d9a:	90 91 6d 01 	lds	r25, 0x016D
     d9e:	80 0f       	add	r24, r16
     da0:	91 1f       	adc	r25, r17
     da2:	90 93 57 01 	sts	0x0157, r25
     da6:	80 93 56 01 	sts	0x0156, r24
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	08 95       	ret

00000db8 <motpwm_init>:
int16_t motpwm_motor_l;
int16_t motpwm_motor_r;
uint8_t motpwm_flags;

void motpwm_init() {
  nibobee_initialization |= NIBOBEE_MOTPWM_INITIALIZED;
     db8:	80 91 6f 01 	lds	r24, 0x016F
     dbc:	82 60       	ori	r24, 0x02	; 2
     dbe:	80 93 6f 01 	sts	0x016F, r24
  set_output_group(IO_MOTOR);
     dc2:	8b b1       	in	r24, 0x0b	; 11
     dc4:	80 6f       	ori	r24, 0xF0	; 240
     dc6:	8b b9       	out	0x0b, r24	; 11
  activate_output_group(IO_MOTOR);
     dc8:	8a b1       	in	r24, 0x0a	; 10
     dca:	80 6f       	ori	r24, 0xF0	; 240
     dcc:	8a b9       	out	0x0a, r24	; 10
  PWM_TIMER_CCRA = PWM_TIMER_CCRA_INIT;
     dce:	82 ef       	ldi	r24, 0xF2	; 242
     dd0:	80 93 80 00 	sts	0x0080, r24
  PWM_TIMER_CCRB = PWM_TIMER_CCRB_INIT;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 81 00 	sts	0x0081, r24
  PWM_TIMER_IMSK |= PWM_TIMER_IMSK_INIT;
     dda:	ef e6       	ldi	r30, 0x6F	; 111
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 83       	st	Z, r24
}
     de2:	08 95       	ret

00000de4 <motpwm_stop>:


void motpwm_stop() {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     de4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     de6:	f8 94       	cli
    motpwm_motor_l = 0;
     de8:	10 92 66 01 	sts	0x0166, r1
     dec:	10 92 65 01 	sts	0x0165, r1
    motpwm_motor_r = 0;
     df0:	10 92 68 01 	sts	0x0168, r1
     df4:	10 92 67 01 	sts	0x0167, r1
    PWM_TIMER_OCRA = 0;
     df8:	10 92 89 00 	sts	0x0089, r1
     dfc:	10 92 88 00 	sts	0x0088, r1
    PWM_TIMER_OCRB = 0;
     e00:	10 92 8b 00 	sts	0x008B, r1
     e04:	10 92 8a 00 	sts	0x008A, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e08:	8f bf       	out	0x3f, r24	; 63
  }
}
     e0a:	08 95       	ret

00000e0c <motpwm_setLeft>:


void motpwm_setLeft(int16_t value) {
  value/=2;
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	60 30       	cpi	r22, 0x00	; 0
     e18:	78 07       	cpc	r23, r24
     e1a:	b4 f4       	brge	.+44     	; 0xe48 <motpwm_setLeft+0x3c>
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
     e1c:	8e ef       	ldi	r24, 0xFE	; 254
     e1e:	61 30       	cpi	r22, 0x01	; 1
     e20:	78 07       	cpc	r23, r24
     e22:	1c f0       	brlt	.+6      	; 0xe2a <motpwm_setLeft+0x1e>
  
  if (value<0) {
     e24:	77 fd       	sbrc	r23, 7
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <motpwm_setLeft+0x22>
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <motpwm_setLeft+0x40>


void motpwm_setLeft(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	7e ef       	ldi	r23, 0xFE	; 254
  
  if (value<0) {
    motpwm_motor_l = - value;
     e2e:	70 95       	com	r23
     e30:	61 95       	neg	r22
     e32:	7f 4f       	sbci	r23, 0xFF	; 255
     e34:	70 93 66 01 	sts	0x0166, r23
     e38:	60 93 65 01 	sts	0x0165, r22
    if (get_output_groupbit(IO_MOTOR, DIR_LEFT)) {
     e3c:	5e 9b       	sbis	0x0b, 6	; 11
     e3e:	0c c0       	rjmp	.+24     	; 0xe58 <motpwm_setLeft+0x4c>
      // direction has changed, stop first
      motpwm_flags&=0x02;
     e40:	80 91 64 01 	lds	r24, 0x0164
     e44:	82 70       	andi	r24, 0x02	; 2
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <motpwm_setLeft+0x5c>
}


void motpwm_setLeft(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	71 e0       	ldi	r23, 0x01	; 1
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPA;
    } else {
      PWM_TIMER_OCRA = motpwm_motor_l;
    }
  } else {
    motpwm_motor_l = value;
     e4c:	70 93 66 01 	sts	0x0166, r23
     e50:	60 93 65 01 	sts	0x0165, r22
    if (get_output_groupbit(IO_MOTOR, DIR_LEFT)) {
     e54:	5e 9b       	sbis	0x0b, 6	; 11
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <motpwm_setLeft+0x56>
      PWM_TIMER_OCRA = motpwm_motor_l;
     e58:	70 93 89 00 	sts	0x0089, r23
     e5c:	60 93 88 00 	sts	0x0088, r22
     e60:	08 95       	ret
    } else {
      // direction has changed, stop first
      motpwm_flags|=0x01;
     e62:	80 91 64 01 	lds	r24, 0x0164
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	80 93 64 01 	sts	0x0164, r24
      PWM_TIMER_OCRA = 0;
     e6c:	10 92 89 00 	sts	0x0089, r1
     e70:	10 92 88 00 	sts	0x0088, r1
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPA;
     e74:	80 91 6f 00 	lds	r24, 0x006F
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	80 93 6f 00 	sts	0x006F, r24
     e7e:	08 95       	ret

00000e80 <motpwm_setRight>:
  }
}


void motpwm_setRight(int16_t value) {
  value/=2;
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodhi4>
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	60 30       	cpi	r22, 0x00	; 0
     e8c:	78 07       	cpc	r23, r24
     e8e:	b4 f4       	brge	.+44     	; 0xebc <motpwm_setRight+0x3c>
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
     e90:	8e ef       	ldi	r24, 0xFE	; 254
     e92:	61 30       	cpi	r22, 0x01	; 1
     e94:	78 07       	cpc	r23, r24
     e96:	1c f0       	brlt	.+6      	; 0xe9e <motpwm_setRight+0x1e>
  
  if (value<0) {
     e98:	77 fd       	sbrc	r23, 7
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <motpwm_setRight+0x22>
     e9c:	11 c0       	rjmp	.+34     	; 0xec0 <motpwm_setRight+0x40>


void motpwm_setRight(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	7e ef       	ldi	r23, 0xFE	; 254
  
  if (value<0) {
    motpwm_motor_r =  - value;
     ea2:	70 95       	com	r23
     ea4:	61 95       	neg	r22
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	70 93 68 01 	sts	0x0168, r23
     eac:	60 93 67 01 	sts	0x0167, r22
    if (get_output_groupbit(IO_MOTOR, DIR_RIGHT)) {
     eb0:	5f 99       	sbic	0x0b, 7	; 11
     eb2:	1b c0       	rjmp	.+54     	; 0xeea <motpwm_setRight+0x6a>
      PWM_TIMER_OCRB = motpwm_motor_r;
    } else {
      // direction has changed, stop first
      motpwm_flags|=0x02;
     eb4:	80 91 64 01 	lds	r24, 0x0164
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <motpwm_setRight+0x52>
}


void motpwm_setRight(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
     ebc:	6f ef       	ldi	r22, 0xFF	; 255
     ebe:	71 e0       	ldi	r23, 0x01	; 1
      motpwm_flags|=0x02;
      PWM_TIMER_OCRB = 0;
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPB;
    }
  } else {
    motpwm_motor_r =  value;
     ec0:	70 93 68 01 	sts	0x0168, r23
     ec4:	60 93 67 01 	sts	0x0167, r22
    if (get_output_groupbit(IO_MOTOR, DIR_RIGHT)) {
     ec8:	5f 9b       	sbis	0x0b, 7	; 11
     eca:	0f c0       	rjmp	.+30     	; 0xeea <motpwm_setRight+0x6a>
      // direction has changed, stop first
      motpwm_flags&=0x01;
     ecc:	80 91 64 01 	lds	r24, 0x0164
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	80 93 64 01 	sts	0x0164, r24
      PWM_TIMER_OCRB = 0;
     ed6:	10 92 8b 00 	sts	0x008B, r1
     eda:	10 92 8a 00 	sts	0x008A, r1
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPB;
     ede:	80 91 6f 00 	lds	r24, 0x006F
     ee2:	84 60       	ori	r24, 0x04	; 4
     ee4:	80 93 6f 00 	sts	0x006F, r24
     ee8:	08 95       	ret
    } else {
      PWM_TIMER_OCRB = motpwm_motor_r;
     eea:	70 93 8b 00 	sts	0x008B, r23
     eee:	60 93 8a 00 	sts	0x008A, r22
     ef2:	08 95       	ret

00000ef4 <__vector_13>:
    }
  }
}


ISR(TIMER1_COMPA_vect) {
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
  if (get_input_groupbit(IO_MOTOR, PWM_LEFT)) {
     f02:	4d 9b       	sbis	0x09, 5	; 9
     f04:	18 c0       	rjmp	.+48     	; 0xf36 <__vector_13+0x42>
    set_output_groupbitval(IO_MOTOR, DIR_LEFT, motpwm_flags&0x01);
     f06:	8b b1       	in	r24, 0x0b	; 11
     f08:	8f 7b       	andi	r24, 0xBF	; 191
     f0a:	90 91 64 01 	lds	r25, 0x0164
     f0e:	90 ff       	sbrs	r25, 0
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <__vector_13+0x22>
     f12:	90 e4       	ldi	r25, 0x40	; 64
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <__vector_13+0x24>
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	89 2b       	or	r24, r25
     f1a:	8b b9       	out	0x0b, r24	; 11
    PWM_TIMER_OCRA = motpwm_motor_l;
     f1c:	80 91 65 01 	lds	r24, 0x0165
     f20:	90 91 66 01 	lds	r25, 0x0166
     f24:	90 93 89 00 	sts	0x0089, r25
     f28:	80 93 88 00 	sts	0x0088, r24
    PWM_TIMER_IMSK &= (uint8_t) (~PWM_TIMER_IMSK_CMPA);
     f2c:	80 91 6f 00 	lds	r24, 0x006F
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	80 93 6f 00 	sts	0x006F, r24
  }
}
     f36:	9f 91       	pop	r25
     f38:	8f 91       	pop	r24
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_14>:


ISR(TIMER1_COMPB_vect) {
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
  if (get_input_groupbit(IO_MOTOR, PWM_RIGHT)) {
     f52:	4c 9b       	sbis	0x09, 4	; 9
     f54:	18 c0       	rjmp	.+48     	; 0xf86 <__vector_14+0x42>
    set_output_groupbitval(IO_MOTOR, DIR_RIGHT, motpwm_flags&0x02);
     f56:	8b b1       	in	r24, 0x0b	; 11
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	90 91 64 01 	lds	r25, 0x0164
     f5e:	91 ff       	sbrs	r25, 1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <__vector_14+0x22>
     f62:	90 e8       	ldi	r25, 0x80	; 128
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <__vector_14+0x24>
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	89 2b       	or	r24, r25
     f6a:	8b b9       	out	0x0b, r24	; 11
    PWM_TIMER_OCRB = motpwm_motor_r;
     f6c:	80 91 67 01 	lds	r24, 0x0167
     f70:	90 91 68 01 	lds	r25, 0x0168
     f74:	90 93 8b 00 	sts	0x008B, r25
     f78:	80 93 8a 00 	sts	0x008A, r24
    PWM_TIMER_IMSK &= (uint8_t) (~PWM_TIMER_IMSK_CMPB);
     f7c:	80 91 6f 00 	lds	r24, 0x006F
     f80:	8b 7f       	andi	r24, 0xFB	; 251
     f82:	80 93 6f 00 	sts	0x006F, r24
  }
}
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <odometry_init>:

void odometry_init() {
  // enable int0 and int1 on rising edge
#ifndef GICR
  // ATmega644
  EICRA |= _BV(ISC11) | _BV(ISC10) | _BV(ISC01) | _BV(ISC00);
     f94:	e9 e6       	ldi	r30, 0x69	; 105
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 60       	ori	r24, 0x0F	; 15
     f9c:	80 83       	st	Z, r24
  EIMSK |= _BV(INT1) |  _BV(INT0);
     f9e:	8d b3       	in	r24, 0x1d	; 29
     fa0:	83 60       	ori	r24, 0x03	; 3
     fa2:	8d bb       	out	0x1d, r24	; 29
  // ATmega16
  MCUCR |= _BV(ISC11) | _BV(ISC10) | _BV(ISC01) | _BV(ISC00); 
  GICR |= _BV(INT1) |  _BV(INT0);
#endif

  set_output_groupbitval(IO_MOTOR, DIR_LEFT, 1);
     fa4:	5e 9a       	sbi	0x0b, 6	; 11
  set_output_groupbitval(IO_MOTOR, DIR_RIGHT, 0);
     fa6:	5f 98       	cbi	0x0b, 7	; 11
}
     fa8:	08 95       	ret

00000faa <odometry_reset>:


void odometry_reset() {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     faa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fac:	f8 94       	cli
    odometry_left = 0;
     fae:	10 92 6b 01 	sts	0x016B, r1
     fb2:	10 92 6a 01 	sts	0x016A, r1
    odometry_right = 0;
     fb6:	10 92 6d 01 	sts	0x016D, r1
     fba:	10 92 6c 01 	sts	0x016C, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fbe:	8f bf       	out	0x3f, r24	; 63
  }
}
     fc0:	08 95       	ret

00000fc2 <odometry_getLeft>:


int16_t odometry_getLeft(uint8_t reset) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     fc2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fc4:	f8 94       	cli
    int16_t res = odometry_left;
     fc6:	20 91 6a 01 	lds	r18, 0x016A
     fca:	30 91 6b 01 	lds	r19, 0x016B
    if (reset) {
     fce:	88 23       	and	r24, r24
     fd0:	21 f0       	breq	.+8      	; 0xfda <odometry_getLeft+0x18>
      odometry_left = 0;
     fd2:	10 92 6b 01 	sts	0x016B, r1
     fd6:	10 92 6a 01 	sts	0x016A, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fda:	9f bf       	out	0x3f, r25	; 63
    }
    return res;
  }
  return 0;
}
     fdc:	c9 01       	movw	r24, r18
     fde:	08 95       	ret

00000fe0 <odometry_getRight>:


int16_t odometry_getRight(uint8_t reset) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     fe0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fe2:	f8 94       	cli
    int16_t res = odometry_right;
     fe4:	20 91 6c 01 	lds	r18, 0x016C
     fe8:	30 91 6d 01 	lds	r19, 0x016D
    if (reset) {
     fec:	88 23       	and	r24, r24
     fee:	21 f0       	breq	.+8      	; 0xff8 <odometry_getRight+0x18>
      odometry_right = 0;
     ff0:	10 92 6d 01 	sts	0x016D, r1
     ff4:	10 92 6c 01 	sts	0x016C, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ff8:	9f bf       	out	0x3f, r25	; 63
    }
    return res;
  }
  return 0;
}
     ffa:	c9 01       	movw	r24, r18
     ffc:	08 95       	ret

00000ffe <__vector_1>:



ISR(INT0_vect) {
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
  if (get_output_groupbit(IO_MOTOR, DIR_LEFT)) odometry_pid_left++, odometry_left++; else odometry_pid_left--, odometry_left--;
    100c:	5e 9b       	sbis	0x0b, 6	; 11
    100e:	0b c0       	rjmp	.+22     	; 0x1026 <__vector_1+0x28>
    1010:	80 91 69 01 	lds	r24, 0x0169
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	80 93 69 01 	sts	0x0169, r24
    101a:	80 91 6a 01 	lds	r24, 0x016A
    101e:	90 91 6b 01 	lds	r25, 0x016B
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	0a c0       	rjmp	.+20     	; 0x103a <__vector_1+0x3c>
    1026:	80 91 69 01 	lds	r24, 0x0169
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	80 93 69 01 	sts	0x0169, r24
    1030:	80 91 6a 01 	lds	r24, 0x016A
    1034:	90 91 6b 01 	lds	r25, 0x016B
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	90 93 6b 01 	sts	0x016B, r25
    103e:	80 93 6a 01 	sts	0x016A, r24
}
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_2>:


ISR(INT1_vect) {
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
  if (get_output_groupbit(IO_MOTOR, DIR_RIGHT)) odometry_pid_right--, odometry_right--; else odometry_pid_right++, odometry_right++;
    105e:	5f 9b       	sbis	0x0b, 7	; 11
    1060:	0b c0       	rjmp	.+22     	; 0x1078 <__vector_2+0x28>
    1062:	80 91 6e 01 	lds	r24, 0x016E
    1066:	81 50       	subi	r24, 0x01	; 1
    1068:	80 93 6e 01 	sts	0x016E, r24
    106c:	80 91 6c 01 	lds	r24, 0x016C
    1070:	90 91 6d 01 	lds	r25, 0x016D
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	0a c0       	rjmp	.+20     	; 0x108c <__vector_2+0x3c>
    1078:	80 91 6e 01 	lds	r24, 0x016E
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	80 93 6e 01 	sts	0x016E, r24
    1082:	80 91 6c 01 	lds	r24, 0x016C
    1086:	90 91 6d 01 	lds	r25, 0x016D
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	90 93 6d 01 	sts	0x016D, r25
    1090:	80 93 6c 01 	sts	0x016C, r24
}
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <delay>:
  voltage *= 25;
  return voltage;
}

static void delay(uint8_t count) {
  while (count--) {
    10a2:	0a c0       	rjmp	.+20     	; 0x10b8 <delay+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a4:	2f e7       	ldi	r18, 0x7F	; 127
    10a6:	3a e1       	ldi	r19, 0x1A	; 26
    10a8:	46 e0       	ldi	r20, 0x06	; 6
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	30 40       	sbci	r19, 0x00	; 0
    10ae:	40 40       	sbci	r20, 0x00	; 0
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <delay+0x8>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <delay+0x12>
    10b4:	00 00       	nop
    10b6:	81 50       	subi	r24, 0x01	; 1
    10b8:	88 23       	and	r24, r24
    10ba:	a1 f7       	brne	.-24     	; 0x10a4 <delay+0x2>
    _delay_ms(100);
  }
}
    10bc:	08 95       	ret

000010be <blink_all>:

static void blink_all(uint8_t on, uint8_t off) {
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	08 2f       	mov	r16, r24
    10c4:	16 2f       	mov	r17, r22
  led_set(LED_L_RD, 1);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_RD, 1);
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_L_YE, 1);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_YE, 1);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  delay(on);
    10e6:	80 2f       	mov	r24, r16
    10e8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <delay>
  led_set(LED_L_RD, 0);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_RD, 0);
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_L_YE, 0);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_YE, 0);
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  delay(off);
    110c:	81 2f       	mov	r24, r17
    110e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <delay>
}
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	08 95       	ret

00001118 <nibobee_getMillivolt>:


uint8_t nibobee_initialization;

uint16_t nibobee_getMillivolt() {
  uint16_t voltage = analog_getValue(ANALOG_VOLT);
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <analog_getValue>
    111e:	bc 01       	movw	r22, r24
  voltage = (4*12480U)/voltage;
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	93 ec       	ldi	r25, 0xC3	; 195
    1124:	0e 94 39 0b 	call	0x1672	; 0x1672 <__udivmodhi4>
  voltage *= 25;
    1128:	89 e1       	ldi	r24, 0x19	; 25
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	68 9f       	mul	r22, r24
    112e:	90 01       	movw	r18, r0
    1130:	69 9f       	mul	r22, r25
    1132:	30 0d       	add	r19, r0
    1134:	78 9f       	mul	r23, r24
    1136:	30 0d       	add	r19, r0
    1138:	11 24       	eor	r1, r1
  return voltage;
}
    113a:	c9 01       	movw	r24, r18
    113c:	08 95       	ret

0000113e <nibobee_assertMinVoltage>:
  led_set(LED_L_YE, 0);
  led_set(LED_R_YE, 0);
  delay(off);
}

void nibobee_assertMinVoltage(uint16_t value) {
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
  uint16_t voltage = analog_getValue(ANALOG_VOLT);
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <analog_getValue>
  if (voltage>value) {
    114a:	c8 17       	cp	r28, r24
    114c:	d9 07       	cpc	r29, r25
    114e:	58 f5       	brcc	.+86     	; 0x11a6 <nibobee_assertMinVoltage+0x68>
    activate_output_group(IO_LEDS);  // LED bits als Output
    1150:	84 b1       	in	r24, 0x04	; 4
    1152:	8f 60       	ori	r24, 0x0F	; 15
    1154:	84 b9       	out	0x04, r24	; 4
    motpwm_stop();
    1156:	0e 94 f2 06 	call	0xde4	; 0xde4 <motpwm_stop>
    disable_interrupts();
    115a:	f8 94       	cli

    while (1) {
      blink_all(1,1); // S
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(1,1);
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(1,1);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(3,1); // O
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(3,1);
    117c:	83 e0       	ldi	r24, 0x03	; 3
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(3,1);
    1184:	83 e0       	ldi	r24, 0x03	; 3
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(1,1); // S
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(1,1);
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
      blink_all(1,3);
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	63 e0       	ldi	r22, 0x03	; 3
    11a0:	0e 94 5f 08 	call	0x10be	; 0x10be <blink_all>
    11a4:	db cf       	rjmp	.-74     	; 0x115c <nibobee_assertMinVoltage+0x1e>
    }
  }
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <clock_sec_irq_hook>:
volatile uint8_t clock_10ms;

void clock_sec_irq_hook() __attribute__((weak));

void clock_sec_irq_hook() {
}
    11ac:	08 95       	ret

000011ae <clock_hundredth_irq_hook>:

void clock_hundredth_irq_hook() __attribute__((weak));

void clock_hundredth_irq_hook() {
}
    11ae:	08 95       	ret

000011b0 <clock_inc_irq>:


void clock_inc_irq(uint8_t ms, uint16_t us) {
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
  clock_us += us;
    11ba:	20 91 73 01 	lds	r18, 0x0173
    11be:	30 91 74 01 	lds	r19, 0x0174
    11c2:	62 0f       	add	r22, r18
    11c4:	73 1f       	adc	r23, r19
    11c6:	70 93 74 01 	sts	0x0174, r23
    11ca:	60 93 73 01 	sts	0x0173, r22
  if (clock_us>=1000) {
    11ce:	23 e0       	ldi	r18, 0x03	; 3
    11d0:	68 3e       	cpi	r22, 0xE8	; 232
    11d2:	72 07       	cpc	r23, r18
    11d4:	30 f1       	brcs	.+76     	; 0x1222 <clock_inc_irq+0x72>
    clock_us-=1000;
    11d6:	68 5e       	subi	r22, 0xE8	; 232
    11d8:	73 40       	sbci	r23, 0x03	; 3
    11da:	70 93 74 01 	sts	0x0174, r23
    11de:	60 93 73 01 	sts	0x0173, r22
    clock_ms++;
    11e2:	20 91 70 01 	lds	r18, 0x0170
    11e6:	30 91 71 01 	lds	r19, 0x0171
    11ea:	2f 5f       	subi	r18, 0xFF	; 255
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	30 93 71 01 	sts	0x0171, r19
    11f2:	20 93 70 01 	sts	0x0170, r18
    clock_10ms++;
    11f6:	90 91 72 01 	lds	r25, 0x0172
    11fa:	9f 5f       	subi	r25, 0xFF	; 255
    11fc:	90 93 72 01 	sts	0x0172, r25
    if (clock_waitms) {
    1200:	20 91 79 01 	lds	r18, 0x0179
    1204:	30 91 7a 01 	lds	r19, 0x017A
    1208:	21 15       	cp	r18, r1
    120a:	31 05       	cpc	r19, r1
    120c:	51 f0       	breq	.+20     	; 0x1222 <clock_inc_irq+0x72>
      clock_waitms--;
    120e:	20 91 79 01 	lds	r18, 0x0179
    1212:	30 91 7a 01 	lds	r19, 0x017A
    1216:	21 50       	subi	r18, 0x01	; 1
    1218:	30 40       	sbci	r19, 0x00	; 0
    121a:	30 93 7a 01 	sts	0x017A, r19
    121e:	20 93 79 01 	sts	0x0179, r18
    }
  }
  
  clock_10ms+=ms;
    1222:	90 91 72 01 	lds	r25, 0x0172
    1226:	98 0f       	add	r25, r24
    1228:	90 93 72 01 	sts	0x0172, r25
  if (clock_10ms>=10) {
    122c:	90 91 72 01 	lds	r25, 0x0172
    1230:	9a 30       	cpi	r25, 0x0A	; 10
    1232:	48 f0       	brcs	.+18     	; 0x1246 <clock_inc_irq+0x96>
    clock_10ms-=10;
    1234:	90 91 72 01 	lds	r25, 0x0172
    1238:	9a 50       	subi	r25, 0x0A	; 10
    123a:	90 93 72 01 	sts	0x0172, r25
    clock_hundredth_irq_hook();
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	0e 94 d7 08 	call	0x11ae	; 0x11ae <clock_hundredth_irq_hook>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
  }
  
  clock_ms+=ms;
    1246:	20 91 70 01 	lds	r18, 0x0170
    124a:	30 91 71 01 	lds	r19, 0x0171
    124e:	28 0f       	add	r18, r24
    1250:	31 1d       	adc	r19, r1
    1252:	30 93 71 01 	sts	0x0171, r19
    1256:	20 93 70 01 	sts	0x0170, r18
  if (clock_ms>=1000) {
    125a:	80 91 70 01 	lds	r24, 0x0170
    125e:	90 91 71 01 	lds	r25, 0x0171
    1262:	e3 e0       	ldi	r30, 0x03	; 3
    1264:	88 3e       	cpi	r24, 0xE8	; 232
    1266:	9e 07       	cpc	r25, r30
    1268:	f8 f0       	brcs	.+62     	; 0x12a8 <clock_inc_irq+0xf8>
    clock_ms-=1000;
    126a:	80 91 70 01 	lds	r24, 0x0170
    126e:	90 91 71 01 	lds	r25, 0x0171
    1272:	88 5e       	subi	r24, 0xE8	; 232
    1274:	93 40       	sbci	r25, 0x03	; 3
    1276:	90 93 71 01 	sts	0x0171, r25
    127a:	80 93 70 01 	sts	0x0170, r24
    clock_sec++;
    127e:	80 91 75 01 	lds	r24, 0x0175
    1282:	90 91 76 01 	lds	r25, 0x0176
    1286:	a0 91 77 01 	lds	r26, 0x0177
    128a:	b0 91 78 01 	lds	r27, 0x0178
    128e:	01 96       	adiw	r24, 0x01	; 1
    1290:	a1 1d       	adc	r26, r1
    1292:	b1 1d       	adc	r27, r1
    1294:	80 93 75 01 	sts	0x0175, r24
    1298:	90 93 76 01 	sts	0x0176, r25
    129c:	a0 93 77 01 	sts	0x0177, r26
    12a0:	b0 93 78 01 	sts	0x0178, r27
    clock_sec_irq_hook();
    12a4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <clock_sec_irq_hook>
  }
}
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <clock_sleep>:

void clock_sleep(uint16_t ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12b0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12b2:	f8 94       	cli
    clock_waitms = ms;
    12b4:	90 93 7a 01 	sts	0x017A, r25
    12b8:	80 93 79 01 	sts	0x0179, r24
    while (clock_waitms) {
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <clock_sleep+0x20>
      sleep_enable();
    12be:	83 b7       	in	r24, 0x33	; 51
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	83 bf       	out	0x33, r24	; 51

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    12c4:	78 94       	sei
      NONATOMIC_BLOCK(NONATOMIC_FORCEOFF) {
        sleep_cpu();
    12c6:	88 95       	sleep
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    12c8:	f8 94       	cli
      }
      sleep_disable();
    12ca:	83 b7       	in	r24, 0x33	; 51
    12cc:	8e 7f       	andi	r24, 0xFE	; 254
    12ce:	83 bf       	out	0x33, r24	; 51
}

void clock_sleep(uint16_t ms) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    clock_waitms = ms;
    while (clock_waitms) {
    12d0:	80 91 79 01 	lds	r24, 0x0179
    12d4:	90 91 7a 01 	lds	r25, 0x017A
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	89 f7       	brne	.-30     	; 0x12be <clock_sleep+0xe>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12dc:	2f bf       	out	0x3f, r18	; 63
        sleep_cpu();
      }
      sleep_disable();
    }
  }
}
    12de:	08 95       	ret

000012e0 <analog_init>:
uint16_t analog_samples[11];
uint8_t analog_pos;


void analog_init() {
  nibobee_initialization |= NIBOBEE_ANALOG_INITIALIZED;
    12e0:	80 91 6f 01 	lds	r24, 0x016F
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	80 93 6f 01 	sts	0x016F, r24
  ADCSRA = _BV(ADPS2)  // prescale faktor = 128 ADC laeuft
    12ea:	8f ee       	ldi	r24, 0xEF	; 239
    12ec:	80 93 7a 00 	sts	0x007A, r24
         | _BV(ADPS0)
         | _BV(ADEN)   // ADC an
         | _BV(ADATE)  // auto trigger
         | _BV(ADIE)   // enable interrupt
         | _BV(ADSC);  // Beginne mit der Konvertierung
  activate_output_bit(IO_LINE_EN);
    12f0:	24 9a       	sbi	0x04, 4	; 4
}
    12f2:	08 95       	ret

000012f4 <analog_getValue>:


uint16_t analog_getValue(uint8_t idx) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12f4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12f6:	f8 94       	cli
    return analog_samples[idx];
    12f8:	e8 2f       	mov	r30, r24
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	ee 0f       	add	r30, r30
    12fe:	ff 1f       	adc	r31, r31
    1300:	e4 58       	subi	r30, 0x84	; 132
    1302:	fe 4f       	sbci	r31, 0xFE	; 254
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1308:	2f bf       	out	0x3f, r18	; 63
  }
  return 0;
}
    130a:	08 95       	ret

0000130c <analog_irq_hook>:
}

void analog_irq_hook() __attribute__((weak));

void analog_irq_hook() {
}
    130c:	08 95       	ret

0000130e <__vector_24>:

ISR(ADC_vect) {
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	0b b6       	in	r0, 0x3b	; 59
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
    131c:	2f 93       	push	r18
    131e:	3f 93       	push	r19
    1320:	4f 93       	push	r20
    1322:	5f 93       	push	r21
    1324:	6f 93       	push	r22
    1326:	7f 93       	push	r23
    1328:	8f 93       	push	r24
    132a:	9f 93       	push	r25
    132c:	af 93       	push	r26
    132e:	bf 93       	push	r27
    1330:	ef 93       	push	r30
    1332:	ff 93       	push	r31
  return 0;
}


static inline void analog_storeResult(uint8_t pos) {
  uint16_t value = ADC;
    1334:	80 91 78 00 	lds	r24, 0x0078
    1338:	90 91 79 00 	lds	r25, 0x0079
  switch (pos) {
    133c:	20 91 7b 01 	lds	r18, 0x017B
    1340:	25 30       	cpi	r18, 0x05	; 5
    1342:	c9 f1       	breq	.+114    	; 0x13b6 <__vector_24+0xa8>
    1344:	26 30       	cpi	r18, 0x06	; 6
    1346:	80 f4       	brcc	.+32     	; 0x1368 <__vector_24+0x5a>
    1348:	22 30       	cpi	r18, 0x02	; 2
    134a:	31 f1       	breq	.+76     	; 0x1398 <__vector_24+0x8a>
    134c:	23 30       	cpi	r18, 0x03	; 3
    134e:	30 f4       	brcc	.+12     	; 0x135c <__vector_24+0x4e>
    1350:	22 23       	and	r18, r18
    1352:	c1 f0       	breq	.+48     	; 0x1384 <__vector_24+0x76>
    1354:	21 30       	cpi	r18, 0x01	; 1
    1356:	09 f0       	breq	.+2      	; 0x135a <__vector_24+0x4c>
    1358:	4d c0       	rjmp	.+154    	; 0x13f4 <__vector_24+0xe6>
    135a:	19 c0       	rjmp	.+50     	; 0x138e <__vector_24+0x80>
    135c:	23 30       	cpi	r18, 0x03	; 3
    135e:	09 f1       	breq	.+66     	; 0x13a2 <__vector_24+0x94>
    1360:	24 30       	cpi	r18, 0x04	; 4
    1362:	09 f0       	breq	.+2      	; 0x1366 <__vector_24+0x58>
    1364:	47 c0       	rjmp	.+142    	; 0x13f4 <__vector_24+0xe6>
    1366:	22 c0       	rjmp	.+68     	; 0x13ac <__vector_24+0x9e>
    1368:	28 30       	cpi	r18, 0x08	; 8
    136a:	a9 f1       	breq	.+106    	; 0x13d6 <__vector_24+0xc8>
    136c:	29 30       	cpi	r18, 0x09	; 9
    136e:	28 f4       	brcc	.+10     	; 0x137a <__vector_24+0x6c>
    1370:	26 30       	cpi	r18, 0x06	; 6
    1372:	31 f1       	breq	.+76     	; 0x13c0 <__vector_24+0xb2>
    1374:	27 30       	cpi	r18, 0x07	; 7
    1376:	f1 f5       	brne	.+124    	; 0x13f4 <__vector_24+0xe6>
    1378:	29 c0       	rjmp	.+82     	; 0x13cc <__vector_24+0xbe>
    137a:	29 30       	cpi	r18, 0x09	; 9
    137c:	89 f1       	breq	.+98     	; 0x13e0 <__vector_24+0xd2>
    137e:	2a 30       	cpi	r18, 0x0A	; 10
    1380:	c9 f5       	brne	.+114    	; 0x13f4 <__vector_24+0xe6>
    1382:	33 c0       	rjmp	.+102    	; 0x13ea <__vector_24+0xdc>
    case  0: analog_samples[ANALOG_EXT0]=value; break;
    1384:	90 93 7d 01 	sts	0x017D, r25
    1388:	80 93 7c 01 	sts	0x017C, r24
    138c:	33 c0       	rjmp	.+102    	; 0x13f4 <__vector_24+0xe6>
    case  1: analog_samples[ANALOG_EXT1]=value; break;
    138e:	90 93 7f 01 	sts	0x017F, r25
    1392:	80 93 7e 01 	sts	0x017E, r24
    1396:	2e c0       	rjmp	.+92     	; 0x13f4 <__vector_24+0xe6>
    case  2: analog_samples[ANALOG_EXT2]=value; break;
    1398:	90 93 81 01 	sts	0x0181, r25
    139c:	80 93 80 01 	sts	0x0180, r24
    13a0:	29 c0       	rjmp	.+82     	; 0x13f4 <__vector_24+0xe6>
    case  3: analog_samples[ANALOG_EXT3]=value; break;
    13a2:	90 93 83 01 	sts	0x0183, r25
    13a6:	80 93 82 01 	sts	0x0182, r24
    13aa:	24 c0       	rjmp	.+72     	; 0x13f4 <__vector_24+0xe6>
    case  4: analog_samples[ANALOG_L0]=value; break;
    13ac:	90 93 87 01 	sts	0x0187, r25
    13b0:	80 93 86 01 	sts	0x0186, r24
    13b4:	1f c0       	rjmp	.+62     	; 0x13f4 <__vector_24+0xe6>
    case  5: analog_samples[ANALOG_C0]=value; break;
    13b6:	90 93 89 01 	sts	0x0189, r25
    13ba:	80 93 88 01 	sts	0x0188, r24
    13be:	1a c0       	rjmp	.+52     	; 0x13f4 <__vector_24+0xe6>
    case  6: analog_samples[ANALOG_R0]=value; clear_output_bit(IO_LINE_EN); break;
    13c0:	90 93 8b 01 	sts	0x018B, r25
    13c4:	80 93 8a 01 	sts	0x018A, r24
    13c8:	2c 98       	cbi	0x05, 4	; 5
    13ca:	14 c0       	rjmp	.+40     	; 0x13f4 <__vector_24+0xe6>
    case  7: analog_samples[ANALOG_VOLT]=value; break;
    13cc:	90 93 85 01 	sts	0x0185, r25
    13d0:	80 93 84 01 	sts	0x0184, r24
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <__vector_24+0xe6>
    case  8: analog_samples[ANALOG_L1]=value; break;
    13d6:	90 93 8d 01 	sts	0x018D, r25
    13da:	80 93 8c 01 	sts	0x018C, r24
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__vector_24+0xe6>
    case  9: analog_samples[ANALOG_C1]=value; break;
    13e0:	90 93 8f 01 	sts	0x018F, r25
    13e4:	80 93 8e 01 	sts	0x018E, r24
    13e8:	05 c0       	rjmp	.+10     	; 0x13f4 <__vector_24+0xe6>
    case 10: analog_samples[ANALOG_R1]=value; set_output_bit(IO_LINE_EN); break;
    13ea:	90 93 91 01 	sts	0x0191, r25
    13ee:	80 93 90 01 	sts	0x0190, r24
    13f2:	2c 9a       	sbi	0x05, 4	; 5
void analog_irq_hook() {
}

ISR(ADC_vect) {
  analog_storeResult(analog_pos);
  if (++analog_pos>10) {
    13f4:	80 91 7b 01 	lds	r24, 0x017B
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	80 93 7b 01 	sts	0x017B, r24
    13fe:	8b 30       	cpi	r24, 0x0B	; 11
    1400:	10 f0       	brcs	.+4      	; 0x1406 <__vector_24+0xf8>
    analog_pos=0;
    1402:	10 92 7b 01 	sts	0x017B, r1
  }
}


static inline void analog_setupNext(uint8_t pos) {
  switch (pos) {
    1406:	80 91 7b 01 	lds	r24, 0x017B
    140a:	85 30       	cpi	r24, 0x05	; 5
    140c:	51 f1       	breq	.+84     	; 0x1462 <__vector_24+0x154>
    140e:	86 30       	cpi	r24, 0x06	; 6
    1410:	70 f4       	brcc	.+28     	; 0x142e <__vector_24+0x120>
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	f1 f0       	breq	.+60     	; 0x1452 <__vector_24+0x144>
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	28 f4       	brcc	.+10     	; 0x1424 <__vector_24+0x116>
    141a:	88 23       	and	r24, r24
    141c:	b1 f0       	breq	.+44     	; 0x144a <__vector_24+0x13c>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	29 f5       	brne	.+74     	; 0x146c <__vector_24+0x15e>
    1422:	15 c0       	rjmp	.+42     	; 0x144e <__vector_24+0x140>
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	c9 f0       	breq	.+50     	; 0x145a <__vector_24+0x14c>
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	01 f5       	brne	.+64     	; 0x146c <__vector_24+0x15e>
    142c:	18 c0       	rjmp	.+48     	; 0x145e <__vector_24+0x150>
    142e:	88 30       	cpi	r24, 0x08	; 8
    1430:	b1 f0       	breq	.+44     	; 0x145e <__vector_24+0x150>
    1432:	89 30       	cpi	r24, 0x09	; 9
    1434:	28 f4       	brcc	.+10     	; 0x1440 <__vector_24+0x132>
    1436:	86 30       	cpi	r24, 0x06	; 6
    1438:	71 f0       	breq	.+28     	; 0x1456 <__vector_24+0x148>
    143a:	87 30       	cpi	r24, 0x07	; 7
    143c:	b9 f4       	brne	.+46     	; 0x146c <__vector_24+0x15e>
    143e:	0d c0       	rjmp	.+26     	; 0x145a <__vector_24+0x14c>
    1440:	89 30       	cpi	r24, 0x09	; 9
    1442:	79 f0       	breq	.+30     	; 0x1462 <__vector_24+0x154>
    1444:	8a 30       	cpi	r24, 0x0A	; 10
    1446:	91 f4       	brne	.+36     	; 0x146c <__vector_24+0x15e>
    1448:	0e c0       	rjmp	.+28     	; 0x1466 <__vector_24+0x158>
    case  0: ADMUX = _BV(REFS0) | 1; break;
    144a:	81 e4       	ldi	r24, 0x41	; 65
    144c:	0d c0       	rjmp	.+26     	; 0x1468 <__vector_24+0x15a>
    case  1: ADMUX = _BV(REFS0) | 2; break;
    144e:	82 e4       	ldi	r24, 0x42	; 66
    1450:	0b c0       	rjmp	.+22     	; 0x1468 <__vector_24+0x15a>
    case  2: ADMUX = _BV(REFS0) | 3; break;
    1452:	83 e4       	ldi	r24, 0x43	; 67
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <__vector_24+0x15a>
    case  3: ADMUX = _BV(REFS0) | 5; break;
    case  4: ADMUX = _BV(REFS0) | 6; break;
    case  5: ADMUX = _BV(REFS0) | 7; break;
    case  6: ADMUX = _BV(REFS0) | 30; break;
    1456:	8e e5       	ldi	r24, 0x5E	; 94
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <__vector_24+0x15a>
    case  7: ADMUX = _BV(REFS0) | 5; break;
    145a:	85 e4       	ldi	r24, 0x45	; 69
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <__vector_24+0x15a>
    case  8: ADMUX = _BV(REFS0) | 6; break;
    145e:	86 e4       	ldi	r24, 0x46	; 70
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <__vector_24+0x15a>
    case  9: ADMUX = _BV(REFS0) | 7; break;
    1462:	87 e4       	ldi	r24, 0x47	; 71
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <__vector_24+0x15a>
    case 10: ADMUX = _BV(REFS0) | 0; break;
    1466:	80 e4       	ldi	r24, 0x40	; 64
    1468:	80 93 7c 00 	sts	0x007C, r24
  analog_storeResult(analog_pos);
  if (++analog_pos>10) {
    analog_pos=0;
  }
  analog_setupNext(analog_pos);
  if (analog_pos==0) {
    146c:	80 91 7b 01 	lds	r24, 0x017B
    1470:	88 23       	and	r24, r24
    1472:	11 f4       	brne	.+4      	; 0x1478 <__vector_24+0x16a>
    analog_irq_hook();
    1474:	0e 94 86 09 	call	0x130c	; 0x130c <analog_irq_hook>
  }
}
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0b be       	out	0x3b, r0	; 59
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>

int main() {
    149e:	8f 92       	push	r8
    14a0:	9f 92       	push	r9
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	a0 97       	sbiw	r28, 0x20	; 32
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
  activate_output_group(IO_LEDS);  // LED bits als Output
    14c6:	84 b1       	in	r24, 0x04	; 4
    14c8:	8f 60       	ori	r24, 0x0F	; 15
    14ca:	84 b9       	out	0x04, r24	; 4
  i2c_init();
    14cc:	0e 94 a2 03 	call	0x744	; 0x744 <i2c_init>

  led_set(LED_L_YE, 0);    
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_YE, 0);
    14d8:	83 e0       	ldi	r24, 0x03	; 3
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_L_RD, 1);    
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_RD, 1);
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  while (!bgx1_init());
    14f0:	0e 94 a1 00 	call	0x142	; 0x142 <bgx1_init>
    14f4:	88 23       	and	r24, r24
    14f6:	e1 f3       	breq	.-8      	; 0x14f0 <main+0x52>
  led_set(LED_L_YE, 1);   
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_YE, 1);
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_L_RD, 0);   
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>
  led_set(LED_R_RD, 0);
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	0e 94 60 04 	call	0x8c0	; 0x8c0 <led_set>

  
  
  motpwm_init();
    1518:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <motpwm_init>
  motpid_init();
    151c:	0e 94 53 06 	call	0xca6	; 0xca6 <motpid_init>
    char text[32];
    
    bgx1_setIllumination(a0);
    
    bgx1_termGoto(7, 2);
    sprintf(text, "%4i", (int)a0);
    1520:	8e 01       	movw	r16, r28
    1522:	0f 5f       	subi	r16, 0xFF	; 255
    1524:	1f 4f       	sbci	r17, 0xFF	; 255
    1526:	8d e0       	ldi	r24, 0x0D	; 13
    1528:	e8 2e       	mov	r14, r24
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	f8 2e       	mov	r15, r24
  
  //bgx1_reset();
  //bgx1_termClear();
  // Hauptschleife:
  while(1) {
    sei();
    152e:	78 94       	sei
    delay(20);
    1530:	84 e1       	ldi	r24, 0x14	; 20
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 47 03 	call	0x68e	; 0x68e <delay>
    
    if (bgx1_getStatus()==0xff) {
    1538:	0e 94 b7 00 	call	0x16e	; 0x16e <bgx1_getStatus>
    153c:	8f 3f       	cpi	r24, 0xFF	; 255
    153e:	d1 f4       	brne	.+52     	; 0x1574 <main+0xd6>
      bgx1_reset();
    1540:	0e 94 84 00 	call	0x108	; 0x108 <bgx1_reset>
      
      bgx1_termGoto(2, 2);
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	0e 94 a0 02 	call	0x540	; 0x540 <bgx1_termGoto>
      bgx1_termPrint("AN0:");
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	0e 94 bc 02 	call	0x578	; 0x578 <bgx1_termPrint>

      bgx1_termGoto(2, 3);
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	63 e0       	ldi	r22, 0x03	; 3
    1558:	0e 94 a0 02 	call	0x540	; 0x540 <bgx1_termGoto>
      bgx1_termPrint("AN1:");
    155c:	85 e0       	ldi	r24, 0x05	; 5
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 bc 02 	call	0x578	; 0x578 <bgx1_termPrint>

      bgx1_termGoto(2, 4);
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	64 e0       	ldi	r22, 0x04	; 4
    1568:	0e 94 a0 02 	call	0x540	; 0x540 <bgx1_termGoto>
      bgx1_termPrint("T:");
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 bc 02 	call	0x578	; 0x578 <bgx1_termPrint>
    
    
    }
    
    bgx1_DDR = 0x00;
    1574:	10 92 14 01 	sts	0x0114, r1
    bgx1_PORT = 0x00;
    1578:	10 92 15 01 	sts	0x0115, r1
    
    bgx1_syncInterface();
    157c:	0e 94 25 03 	call	0x64a	; 0x64a <bgx1_syncInterface>
    bgx1_syncPort();
    1580:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <bgx1_syncPort>
    uint16_t a0 = bgx1_getAnalog(0x40);
    1584:	80 e4       	ldi	r24, 0x40	; 64
    1586:	0e 94 10 03 	call	0x620	; 0x620 <bgx1_getAnalog>
    158a:	6c 01       	movw	r12, r24
    uint16_t a1 = bgx1_getAnalog(0x41);
    158c:	81 e4       	ldi	r24, 0x41	; 65
    158e:	0e 94 10 03 	call	0x620	; 0x620 <bgx1_getAnalog>
    1592:	5c 01       	movw	r10, r24
    uint16_t temp = bgx1_getAnalog(0xc8);
    1594:	88 ec       	ldi	r24, 0xC8	; 200
    1596:	0e 94 10 03 	call	0x620	; 0x620 <bgx1_getAnalog>
    159a:	4c 01       	movw	r8, r24
    char text[32];
    
    bgx1_setIllumination(a0);
    159c:	c6 01       	movw	r24, r12
    159e:	0e 94 38 03 	call	0x670	; 0x670 <bgx1_setIllumination>
    
    bgx1_termGoto(7, 2);
    15a2:	87 e0       	ldi	r24, 0x07	; 7
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	0e 94 a0 02 	call	0x540	; 0x540 <bgx1_termGoto>
    sprintf(text, "%4i", (int)a0);
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <main+0x10e>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <main+0x110>
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <main+0x112>
    15b0:	ed b7       	in	r30, 0x3d	; 61
    15b2:	fe b7       	in	r31, 0x3e	; 62
    15b4:	31 96       	adiw	r30, 0x01	; 1
    15b6:	ad b7       	in	r26, 0x3d	; 61
    15b8:	be b7       	in	r27, 0x3e	; 62
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	1c 93       	st	X, r17
    15be:	0e 93       	st	-X, r16
    15c0:	11 97       	sbiw	r26, 0x01	; 1
    15c2:	f3 82       	std	Z+3, r15	; 0x03
    15c4:	e2 82       	std	Z+2, r14	; 0x02
    15c6:	d5 82       	std	Z+5, r13	; 0x05
    15c8:	c4 82       	std	Z+4, r12	; 0x04
    15ca:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <sprintf>
    bgx1_termPrint(text);
    15ce:	8d b7       	in	r24, 0x3d	; 61
    15d0:	9e b7       	in	r25, 0x3e	; 62
    15d2:	06 96       	adiw	r24, 0x06	; 6
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	9e bf       	out	0x3e, r25	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	8d bf       	out	0x3d, r24	; 61
    15de:	c8 01       	movw	r24, r16
    15e0:	0e 94 bc 02 	call	0x578	; 0x578 <bgx1_termPrint>

    bgx1_termGoto(7, 3);
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	63 e0       	ldi	r22, 0x03	; 3
    15e8:	0e 94 a0 02 	call	0x540	; 0x540 <bgx1_termGoto>
    sprintf(text, "%4i", (int)a1);
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <main+0x150>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <main+0x152>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <main+0x154>
    15f2:	ed b7       	in	r30, 0x3d	; 61
    15f4:	fe b7       	in	r31, 0x3e	; 62
    15f6:	31 96       	adiw	r30, 0x01	; 1
    15f8:	ad b7       	in	r26, 0x3d	; 61
    15fa:	be b7       	in	r27, 0x3e	; 62
    15fc:	12 96       	adiw	r26, 0x02	; 2
    15fe:	1c 93       	st	X, r17
    1600:	0e 93       	st	-X, r16
    1602:	11 97       	sbiw	r26, 0x01	; 1
    1604:	f3 82       	std	Z+3, r15	; 0x03
    1606:	e2 82       	std	Z+2, r14	; 0x02
    1608:	b5 82       	std	Z+5, r11	; 0x05
    160a:	a4 82       	std	Z+4, r10	; 0x04
    160c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <sprintf>
    bgx1_termPrint(text);
    1610:	8d b7       	in	r24, 0x3d	; 61
    1612:	9e b7       	in	r25, 0x3e	; 62
    1614:	06 96       	adiw	r24, 0x06	; 6
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	9e bf       	out	0x3e, r25	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	8d bf       	out	0x3d, r24	; 61
    1620:	c8 01       	movw	r24, r16
    1622:	0e 94 bc 02 	call	0x578	; 0x578 <bgx1_termPrint>

    bgx1_termGoto(7, 4);
    1626:	87 e0       	ldi	r24, 0x07	; 7
    1628:	64 e0       	ldi	r22, 0x04	; 4
    162a:	0e 94 a0 02 	call	0x540	; 0x540 <bgx1_termGoto>
    sprintf(text, "%4i", (int)temp);
    162e:	00 d0       	rcall	.+0      	; 0x1630 <main+0x192>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <main+0x194>
    1632:	00 d0       	rcall	.+0      	; 0x1634 <main+0x196>
    1634:	ed b7       	in	r30, 0x3d	; 61
    1636:	fe b7       	in	r31, 0x3e	; 62
    1638:	31 96       	adiw	r30, 0x01	; 1
    163a:	ad b7       	in	r26, 0x3d	; 61
    163c:	be b7       	in	r27, 0x3e	; 62
    163e:	12 96       	adiw	r26, 0x02	; 2
    1640:	1c 93       	st	X, r17
    1642:	0e 93       	st	-X, r16
    1644:	11 97       	sbiw	r26, 0x01	; 1
    1646:	f3 82       	std	Z+3, r15	; 0x03
    1648:	e2 82       	std	Z+2, r14	; 0x02
    164a:	95 82       	std	Z+5, r9	; 0x05
    164c:	84 82       	std	Z+4, r8	; 0x04
    164e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <sprintf>
    bgx1_termPrint(text);
    1652:	8d b7       	in	r24, 0x3d	; 61
    1654:	9e b7       	in	r25, 0x3e	; 62
    1656:	06 96       	adiw	r24, 0x06	; 6
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	9e bf       	out	0x3e, r25	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	8d bf       	out	0x3d, r24	; 61
    1662:	c8 01       	movw	r24, r16
    1664:	0e 94 bc 02 	call	0x578	; 0x578 <bgx1_termPrint>

    bgx1_Leds = bgx1_Keys;
    1668:	80 91 18 01 	lds	r24, 0x0118
    166c:	80 93 17 01 	sts	0x0117, r24
    
  }
    1670:	5e cf       	rjmp	.-324    	; 0x152e <main+0x90>

00001672 <__udivmodhi4>:
    1672:	aa 1b       	sub	r26, r26
    1674:	bb 1b       	sub	r27, r27
    1676:	51 e1       	ldi	r21, 0x11	; 17
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <__udivmodhi4_ep>

0000167a <__udivmodhi4_loop>:
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	a6 17       	cp	r26, r22
    1680:	b7 07       	cpc	r27, r23
    1682:	10 f0       	brcs	.+4      	; 0x1688 <__udivmodhi4_ep>
    1684:	a6 1b       	sub	r26, r22
    1686:	b7 0b       	sbc	r27, r23

00001688 <__udivmodhi4_ep>:
    1688:	88 1f       	adc	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	5a 95       	dec	r21
    168e:	a9 f7       	brne	.-22     	; 0x167a <__udivmodhi4_loop>
    1690:	80 95       	com	r24
    1692:	90 95       	com	r25
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	08 95       	ret

0000169a <__divmodhi4>:
    169a:	97 fb       	bst	r25, 7
    169c:	09 2e       	mov	r0, r25
    169e:	07 26       	eor	r0, r23
    16a0:	0a d0       	rcall	.+20     	; 0x16b6 <__divmodhi4_neg1>
    16a2:	77 fd       	sbrc	r23, 7
    16a4:	04 d0       	rcall	.+8      	; 0x16ae <__divmodhi4_neg2>
    16a6:	e5 df       	rcall	.-54     	; 0x1672 <__udivmodhi4>
    16a8:	06 d0       	rcall	.+12     	; 0x16b6 <__divmodhi4_neg1>
    16aa:	00 20       	and	r0, r0
    16ac:	1a f4       	brpl	.+6      	; 0x16b4 <__divmodhi4_exit>

000016ae <__divmodhi4_neg2>:
    16ae:	70 95       	com	r23
    16b0:	61 95       	neg	r22
    16b2:	7f 4f       	sbci	r23, 0xFF	; 255

000016b4 <__divmodhi4_exit>:
    16b4:	08 95       	ret

000016b6 <__divmodhi4_neg1>:
    16b6:	f6 f7       	brtc	.-4      	; 0x16b4 <__divmodhi4_exit>
    16b8:	90 95       	com	r25
    16ba:	81 95       	neg	r24
    16bc:	9f 4f       	sbci	r25, 0xFF	; 255
    16be:	08 95       	ret

000016c0 <memcpy_P>:
    16c0:	fb 01       	movw	r30, r22
    16c2:	dc 01       	movw	r26, r24
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <memcpy_P+0xa>
    16c6:	05 90       	lpm	r0, Z+
    16c8:	0d 92       	st	X+, r0
    16ca:	41 50       	subi	r20, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	d8 f7       	brcc	.-10     	; 0x16c6 <memcpy_P+0x6>
    16d0:	08 95       	ret

000016d2 <strlen_P>:
    16d2:	fc 01       	movw	r30, r24
    16d4:	05 90       	lpm	r0, Z+
    16d6:	00 20       	and	r0, r0
    16d8:	e9 f7       	brne	.-6      	; 0x16d4 <strlen_P+0x2>
    16da:	80 95       	com	r24
    16dc:	90 95       	com	r25
    16de:	8e 0f       	add	r24, r30
    16e0:	9f 1f       	adc	r25, r31
    16e2:	08 95       	ret

000016e4 <memcpy>:
    16e4:	fb 01       	movw	r30, r22
    16e6:	dc 01       	movw	r26, r24
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <memcpy+0xa>
    16ea:	01 90       	ld	r0, Z+
    16ec:	0d 92       	st	X+, r0
    16ee:	41 50       	subi	r20, 0x01	; 1
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	d8 f7       	brcc	.-10     	; 0x16ea <memcpy+0x6>
    16f4:	08 95       	ret

000016f6 <sprintf>:
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	2e 97       	sbiw	r28, 0x0e	; 14
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	0d 89       	ldd	r16, Y+21	; 0x15
    1710:	1e 89       	ldd	r17, Y+22	; 0x16
    1712:	86 e0       	ldi	r24, 0x06	; 6
    1714:	8c 83       	std	Y+4, r24	; 0x04
    1716:	1a 83       	std	Y+2, r17	; 0x02
    1718:	09 83       	std	Y+1, r16	; 0x01
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f e7       	ldi	r25, 0x7F	; 127
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	8d 83       	std	Y+5, r24	; 0x05
    1722:	9e 01       	movw	r18, r28
    1724:	27 5e       	subi	r18, 0xE7	; 231
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	ce 01       	movw	r24, r28
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	6f 89       	ldd	r22, Y+23	; 0x17
    172e:	78 8d       	ldd	r23, Y+24	; 0x18
    1730:	a9 01       	movw	r20, r18
    1732:	0e 94 ab 0b 	call	0x1756	; 0x1756 <vfprintf>
    1736:	ef 81       	ldd	r30, Y+7	; 0x07
    1738:	f8 85       	ldd	r31, Y+8	; 0x08
    173a:	e0 0f       	add	r30, r16
    173c:	f1 1f       	adc	r31, r17
    173e:	10 82       	st	Z, r1
    1740:	2e 96       	adiw	r28, 0x0e	; 14
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	de bf       	out	0x3e, r29	; 62
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <vfprintf>:
    1756:	2f 92       	push	r2
    1758:	3f 92       	push	r3
    175a:	4f 92       	push	r4
    175c:	5f 92       	push	r5
    175e:	6f 92       	push	r6
    1760:	7f 92       	push	r7
    1762:	8f 92       	push	r8
    1764:	9f 92       	push	r9
    1766:	af 92       	push	r10
    1768:	bf 92       	push	r11
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	2c 97       	sbiw	r28, 0x0c	; 12
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	6c 01       	movw	r12, r24
    178c:	1b 01       	movw	r2, r22
    178e:	8a 01       	movw	r16, r20
    1790:	fc 01       	movw	r30, r24
    1792:	17 82       	std	Z+7, r1	; 0x07
    1794:	16 82       	std	Z+6, r1	; 0x06
    1796:	83 81       	ldd	r24, Z+3	; 0x03
    1798:	81 ff       	sbrs	r24, 1
    179a:	d1 c1       	rjmp	.+930    	; 0x1b3e <vfprintf+0x3e8>
    179c:	2e 01       	movw	r4, r28
    179e:	08 94       	sec
    17a0:	41 1c       	adc	r4, r1
    17a2:	51 1c       	adc	r5, r1
    17a4:	f6 01       	movw	r30, r12
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	f1 01       	movw	r30, r2
    17aa:	93 fd       	sbrc	r25, 3
    17ac:	85 91       	lpm	r24, Z+
    17ae:	93 ff       	sbrs	r25, 3
    17b0:	81 91       	ld	r24, Z+
    17b2:	1f 01       	movw	r2, r30
    17b4:	88 23       	and	r24, r24
    17b6:	09 f4       	brne	.+2      	; 0x17ba <vfprintf+0x64>
    17b8:	be c1       	rjmp	.+892    	; 0x1b36 <vfprintf+0x3e0>
    17ba:	85 32       	cpi	r24, 0x25	; 37
    17bc:	39 f4       	brne	.+14     	; 0x17cc <vfprintf+0x76>
    17be:	93 fd       	sbrc	r25, 3
    17c0:	85 91       	lpm	r24, Z+
    17c2:	93 ff       	sbrs	r25, 3
    17c4:	81 91       	ld	r24, Z+
    17c6:	1f 01       	movw	r2, r30
    17c8:	85 32       	cpi	r24, 0x25	; 37
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <vfprintf+0x80>
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	b6 01       	movw	r22, r12
    17d0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    17d4:	e7 cf       	rjmp	.-50     	; 0x17a4 <vfprintf+0x4e>
    17d6:	ee 24       	eor	r14, r14
    17d8:	ff 24       	eor	r15, r15
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	20 32       	cpi	r18, 0x20	; 32
    17de:	b0 f4       	brcc	.+44     	; 0x180c <vfprintf+0xb6>
    17e0:	8b 32       	cpi	r24, 0x2B	; 43
    17e2:	69 f0       	breq	.+26     	; 0x17fe <vfprintf+0xa8>
    17e4:	8c 32       	cpi	r24, 0x2C	; 44
    17e6:	28 f4       	brcc	.+10     	; 0x17f2 <vfprintf+0x9c>
    17e8:	80 32       	cpi	r24, 0x20	; 32
    17ea:	51 f0       	breq	.+20     	; 0x1800 <vfprintf+0xaa>
    17ec:	83 32       	cpi	r24, 0x23	; 35
    17ee:	71 f4       	brne	.+28     	; 0x180c <vfprintf+0xb6>
    17f0:	0b c0       	rjmp	.+22     	; 0x1808 <vfprintf+0xb2>
    17f2:	8d 32       	cpi	r24, 0x2D	; 45
    17f4:	39 f0       	breq	.+14     	; 0x1804 <vfprintf+0xae>
    17f6:	80 33       	cpi	r24, 0x30	; 48
    17f8:	49 f4       	brne	.+18     	; 0x180c <vfprintf+0xb6>
    17fa:	21 60       	ori	r18, 0x01	; 1
    17fc:	2c c0       	rjmp	.+88     	; 0x1856 <vfprintf+0x100>
    17fe:	22 60       	ori	r18, 0x02	; 2
    1800:	24 60       	ori	r18, 0x04	; 4
    1802:	29 c0       	rjmp	.+82     	; 0x1856 <vfprintf+0x100>
    1804:	28 60       	ori	r18, 0x08	; 8
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <vfprintf+0x100>
    1808:	20 61       	ori	r18, 0x10	; 16
    180a:	25 c0       	rjmp	.+74     	; 0x1856 <vfprintf+0x100>
    180c:	27 fd       	sbrc	r18, 7
    180e:	2c c0       	rjmp	.+88     	; 0x1868 <vfprintf+0x112>
    1810:	38 2f       	mov	r19, r24
    1812:	30 53       	subi	r19, 0x30	; 48
    1814:	3a 30       	cpi	r19, 0x0A	; 10
    1816:	98 f4       	brcc	.+38     	; 0x183e <vfprintf+0xe8>
    1818:	26 ff       	sbrs	r18, 6
    181a:	08 c0       	rjmp	.+16     	; 0x182c <vfprintf+0xd6>
    181c:	8e 2d       	mov	r24, r14
    181e:	88 0f       	add	r24, r24
    1820:	e8 2e       	mov	r14, r24
    1822:	ee 0c       	add	r14, r14
    1824:	ee 0c       	add	r14, r14
    1826:	e8 0e       	add	r14, r24
    1828:	e3 0e       	add	r14, r19
    182a:	15 c0       	rjmp	.+42     	; 0x1856 <vfprintf+0x100>
    182c:	8f 2d       	mov	r24, r15
    182e:	88 0f       	add	r24, r24
    1830:	f8 2e       	mov	r15, r24
    1832:	ff 0c       	add	r15, r15
    1834:	ff 0c       	add	r15, r15
    1836:	f8 0e       	add	r15, r24
    1838:	f3 0e       	add	r15, r19
    183a:	20 62       	ori	r18, 0x20	; 32
    183c:	0c c0       	rjmp	.+24     	; 0x1856 <vfprintf+0x100>
    183e:	8e 32       	cpi	r24, 0x2E	; 46
    1840:	21 f4       	brne	.+8      	; 0x184a <vfprintf+0xf4>
    1842:	26 fd       	sbrc	r18, 6
    1844:	78 c1       	rjmp	.+752    	; 0x1b36 <vfprintf+0x3e0>
    1846:	20 64       	ori	r18, 0x40	; 64
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <vfprintf+0x100>
    184a:	8c 36       	cpi	r24, 0x6C	; 108
    184c:	11 f4       	brne	.+4      	; 0x1852 <vfprintf+0xfc>
    184e:	20 68       	ori	r18, 0x80	; 128
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x100>
    1852:	88 36       	cpi	r24, 0x68	; 104
    1854:	49 f4       	brne	.+18     	; 0x1868 <vfprintf+0x112>
    1856:	f1 01       	movw	r30, r2
    1858:	93 fd       	sbrc	r25, 3
    185a:	85 91       	lpm	r24, Z+
    185c:	93 ff       	sbrs	r25, 3
    185e:	81 91       	ld	r24, Z+
    1860:	1f 01       	movw	r2, r30
    1862:	88 23       	and	r24, r24
    1864:	09 f0       	breq	.+2      	; 0x1868 <vfprintf+0x112>
    1866:	ba cf       	rjmp	.-140    	; 0x17dc <vfprintf+0x86>
    1868:	98 2f       	mov	r25, r24
    186a:	95 54       	subi	r25, 0x45	; 69
    186c:	93 30       	cpi	r25, 0x03	; 3
    186e:	18 f0       	brcs	.+6      	; 0x1876 <vfprintf+0x120>
    1870:	90 52       	subi	r25, 0x20	; 32
    1872:	93 30       	cpi	r25, 0x03	; 3
    1874:	28 f4       	brcc	.+10     	; 0x1880 <vfprintf+0x12a>
    1876:	0c 5f       	subi	r16, 0xFC	; 252
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	ff e3       	ldi	r31, 0x3F	; 63
    187c:	f9 83       	std	Y+1, r31	; 0x01
    187e:	0d c0       	rjmp	.+26     	; 0x189a <vfprintf+0x144>
    1880:	83 36       	cpi	r24, 0x63	; 99
    1882:	31 f0       	breq	.+12     	; 0x1890 <vfprintf+0x13a>
    1884:	83 37       	cpi	r24, 0x73	; 115
    1886:	71 f0       	breq	.+28     	; 0x18a4 <vfprintf+0x14e>
    1888:	83 35       	cpi	r24, 0x53	; 83
    188a:	09 f0       	breq	.+2      	; 0x188e <vfprintf+0x138>
    188c:	60 c0       	rjmp	.+192    	; 0x194e <vfprintf+0x1f8>
    188e:	22 c0       	rjmp	.+68     	; 0x18d4 <vfprintf+0x17e>
    1890:	f8 01       	movw	r30, r16
    1892:	80 81       	ld	r24, Z
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	0e 5f       	subi	r16, 0xFE	; 254
    1898:	1f 4f       	sbci	r17, 0xFF	; 255
    189a:	42 01       	movw	r8, r4
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	a7 2e       	mov	r10, r23
    18a0:	b1 2c       	mov	r11, r1
    18a2:	16 c0       	rjmp	.+44     	; 0x18d0 <vfprintf+0x17a>
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	66 2e       	mov	r6, r22
    18a8:	71 2c       	mov	r7, r1
    18aa:	60 0e       	add	r6, r16
    18ac:	71 1e       	adc	r7, r17
    18ae:	f8 01       	movw	r30, r16
    18b0:	80 80       	ld	r8, Z
    18b2:	91 80       	ldd	r9, Z+1	; 0x01
    18b4:	26 ff       	sbrs	r18, 6
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <vfprintf+0x168>
    18b8:	6e 2d       	mov	r22, r14
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <vfprintf+0x16c>
    18be:	6f ef       	ldi	r22, 0xFF	; 255
    18c0:	7f ef       	ldi	r23, 0xFF	; 255
    18c2:	c4 01       	movw	r24, r8
    18c4:	2c 87       	std	Y+12, r18	; 0x0c
    18c6:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <strnlen>
    18ca:	5c 01       	movw	r10, r24
    18cc:	83 01       	movw	r16, r6
    18ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    18d0:	2f 77       	andi	r18, 0x7F	; 127
    18d2:	17 c0       	rjmp	.+46     	; 0x1902 <vfprintf+0x1ac>
    18d4:	52 e0       	ldi	r21, 0x02	; 2
    18d6:	65 2e       	mov	r6, r21
    18d8:	71 2c       	mov	r7, r1
    18da:	60 0e       	add	r6, r16
    18dc:	71 1e       	adc	r7, r17
    18de:	f8 01       	movw	r30, r16
    18e0:	80 80       	ld	r8, Z
    18e2:	91 80       	ldd	r9, Z+1	; 0x01
    18e4:	26 ff       	sbrs	r18, 6
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <vfprintf+0x198>
    18e8:	6e 2d       	mov	r22, r14
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x19c>
    18ee:	6f ef       	ldi	r22, 0xFF	; 255
    18f0:	7f ef       	ldi	r23, 0xFF	; 255
    18f2:	c4 01       	movw	r24, r8
    18f4:	2c 87       	std	Y+12, r18	; 0x0c
    18f6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <strnlen_P>
    18fa:	5c 01       	movw	r10, r24
    18fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18fe:	20 68       	ori	r18, 0x80	; 128
    1900:	83 01       	movw	r16, r6
    1902:	23 fd       	sbrc	r18, 3
    1904:	20 c0       	rjmp	.+64     	; 0x1946 <vfprintf+0x1f0>
    1906:	08 c0       	rjmp	.+16     	; 0x1918 <vfprintf+0x1c2>
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	b6 01       	movw	r22, r12
    190e:	2c 87       	std	Y+12, r18	; 0x0c
    1910:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1914:	fa 94       	dec	r15
    1916:	2c 85       	ldd	r18, Y+12	; 0x0c
    1918:	8f 2d       	mov	r24, r15
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a8 16       	cp	r10, r24
    191e:	b9 06       	cpc	r11, r25
    1920:	98 f3       	brcs	.-26     	; 0x1908 <vfprintf+0x1b2>
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <vfprintf+0x1f0>
    1924:	f4 01       	movw	r30, r8
    1926:	27 fd       	sbrc	r18, 7
    1928:	85 91       	lpm	r24, Z+
    192a:	27 ff       	sbrs	r18, 7
    192c:	81 91       	ld	r24, Z+
    192e:	4f 01       	movw	r8, r30
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	b6 01       	movw	r22, r12
    1934:	2c 87       	std	Y+12, r18	; 0x0c
    1936:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    193a:	2c 85       	ldd	r18, Y+12	; 0x0c
    193c:	f1 10       	cpse	r15, r1
    193e:	fa 94       	dec	r15
    1940:	08 94       	sec
    1942:	a1 08       	sbc	r10, r1
    1944:	b1 08       	sbc	r11, r1
    1946:	a1 14       	cp	r10, r1
    1948:	b1 04       	cpc	r11, r1
    194a:	61 f7       	brne	.-40     	; 0x1924 <vfprintf+0x1ce>
    194c:	f1 c0       	rjmp	.+482    	; 0x1b30 <vfprintf+0x3da>
    194e:	84 36       	cpi	r24, 0x64	; 100
    1950:	11 f0       	breq	.+4      	; 0x1956 <vfprintf+0x200>
    1952:	89 36       	cpi	r24, 0x69	; 105
    1954:	49 f5       	brne	.+82     	; 0x19a8 <vfprintf+0x252>
    1956:	27 ff       	sbrs	r18, 7
    1958:	08 c0       	rjmp	.+16     	; 0x196a <vfprintf+0x214>
    195a:	f8 01       	movw	r30, r16
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	82 81       	ldd	r24, Z+2	; 0x02
    1962:	93 81       	ldd	r25, Z+3	; 0x03
    1964:	0c 5f       	subi	r16, 0xFC	; 252
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	09 c0       	rjmp	.+18     	; 0x197c <vfprintf+0x226>
    196a:	f8 01       	movw	r30, r16
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	88 27       	eor	r24, r24
    1972:	77 fd       	sbrc	r23, 7
    1974:	80 95       	com	r24
    1976:	98 2f       	mov	r25, r24
    1978:	0e 5f       	subi	r16, 0xFE	; 254
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	4f e6       	ldi	r20, 0x6F	; 111
    197e:	b4 2e       	mov	r11, r20
    1980:	b2 22       	and	r11, r18
    1982:	97 ff       	sbrs	r25, 7
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <vfprintf+0x242>
    1986:	90 95       	com	r25
    1988:	80 95       	com	r24
    198a:	70 95       	com	r23
    198c:	61 95       	neg	r22
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	8f 4f       	sbci	r24, 0xFF	; 255
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	f0 e8       	ldi	r31, 0x80	; 128
    1996:	bf 2a       	or	r11, r31
    1998:	a2 01       	movw	r20, r4
    199a:	2a e0       	ldi	r18, 0x0A	; 10
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__ultoa_invert>
    19a2:	78 2e       	mov	r7, r24
    19a4:	74 18       	sub	r7, r4
    19a6:	45 c0       	rjmp	.+138    	; 0x1a32 <vfprintf+0x2dc>
    19a8:	85 37       	cpi	r24, 0x75	; 117
    19aa:	31 f4       	brne	.+12     	; 0x19b8 <vfprintf+0x262>
    19ac:	3f ee       	ldi	r19, 0xEF	; 239
    19ae:	b3 2e       	mov	r11, r19
    19b0:	b2 22       	and	r11, r18
    19b2:	2a e0       	ldi	r18, 0x0A	; 10
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	25 c0       	rjmp	.+74     	; 0x1a02 <vfprintf+0x2ac>
    19b8:	99 ef       	ldi	r25, 0xF9	; 249
    19ba:	b9 2e       	mov	r11, r25
    19bc:	b2 22       	and	r11, r18
    19be:	8f 36       	cpi	r24, 0x6F	; 111
    19c0:	c1 f0       	breq	.+48     	; 0x19f2 <vfprintf+0x29c>
    19c2:	80 37       	cpi	r24, 0x70	; 112
    19c4:	20 f4       	brcc	.+8      	; 0x19ce <vfprintf+0x278>
    19c6:	88 35       	cpi	r24, 0x58	; 88
    19c8:	09 f0       	breq	.+2      	; 0x19cc <vfprintf+0x276>
    19ca:	b5 c0       	rjmp	.+362    	; 0x1b36 <vfprintf+0x3e0>
    19cc:	0d c0       	rjmp	.+26     	; 0x19e8 <vfprintf+0x292>
    19ce:	80 37       	cpi	r24, 0x70	; 112
    19d0:	21 f0       	breq	.+8      	; 0x19da <vfprintf+0x284>
    19d2:	88 37       	cpi	r24, 0x78	; 120
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <vfprintf+0x282>
    19d6:	af c0       	rjmp	.+350    	; 0x1b36 <vfprintf+0x3e0>
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <vfprintf+0x288>
    19da:	20 e1       	ldi	r18, 0x10	; 16
    19dc:	b2 2a       	or	r11, r18
    19de:	b4 fe       	sbrs	r11, 4
    19e0:	0b c0       	rjmp	.+22     	; 0x19f8 <vfprintf+0x2a2>
    19e2:	84 e0       	ldi	r24, 0x04	; 4
    19e4:	b8 2a       	or	r11, r24
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <vfprintf+0x2a2>
    19e8:	b4 fe       	sbrs	r11, 4
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <vfprintf+0x2a8>
    19ec:	e6 e0       	ldi	r30, 0x06	; 6
    19ee:	be 2a       	or	r11, r30
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <vfprintf+0x2a8>
    19f2:	28 e0       	ldi	r18, 0x08	; 8
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <vfprintf+0x2ac>
    19f8:	20 e1       	ldi	r18, 0x10	; 16
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <vfprintf+0x2ac>
    19fe:	20 e1       	ldi	r18, 0x10	; 16
    1a00:	32 e0       	ldi	r19, 0x02	; 2
    1a02:	b7 fe       	sbrs	r11, 7
    1a04:	08 c0       	rjmp	.+16     	; 0x1a16 <vfprintf+0x2c0>
    1a06:	f8 01       	movw	r30, r16
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0c 5f       	subi	r16, 0xFC	; 252
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <vfprintf+0x2ce>
    1a16:	f8 01       	movw	r30, r16
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 5f       	subi	r16, 0xFE	; 254
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	a2 01       	movw	r20, r4
    1a26:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__ultoa_invert>
    1a2a:	78 2e       	mov	r7, r24
    1a2c:	74 18       	sub	r7, r4
    1a2e:	ff e7       	ldi	r31, 0x7F	; 127
    1a30:	bf 22       	and	r11, r31
    1a32:	b6 fe       	sbrs	r11, 6
    1a34:	0b c0       	rjmp	.+22     	; 0x1a4c <vfprintf+0x2f6>
    1a36:	2e ef       	ldi	r18, 0xFE	; 254
    1a38:	b2 22       	and	r11, r18
    1a3a:	7e 14       	cp	r7, r14
    1a3c:	38 f4       	brcc	.+14     	; 0x1a4c <vfprintf+0x2f6>
    1a3e:	b4 fe       	sbrs	r11, 4
    1a40:	07 c0       	rjmp	.+14     	; 0x1a50 <vfprintf+0x2fa>
    1a42:	b2 fc       	sbrc	r11, 2
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <vfprintf+0x2fa>
    1a46:	8f ee       	ldi	r24, 0xEF	; 239
    1a48:	b8 22       	and	r11, r24
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0x2fa>
    1a4c:	a7 2c       	mov	r10, r7
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <vfprintf+0x2fc>
    1a50:	ae 2c       	mov	r10, r14
    1a52:	8b 2d       	mov	r24, r11
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	b4 fe       	sbrs	r11, 4
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <vfprintf+0x31e>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e7 0d       	add	r30, r7
    1a5e:	f1 1d       	adc	r31, r1
    1a60:	20 81       	ld	r18, Z
    1a62:	20 33       	cpi	r18, 0x30	; 48
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <vfprintf+0x316>
    1a66:	e9 ee       	ldi	r30, 0xE9	; 233
    1a68:	be 22       	and	r11, r30
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <vfprintf+0x328>
    1a6c:	a3 94       	inc	r10
    1a6e:	b2 fe       	sbrs	r11, 2
    1a70:	06 c0       	rjmp	.+12     	; 0x1a7e <vfprintf+0x328>
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <vfprintf+0x326>
    1a74:	86 78       	andi	r24, 0x86	; 134
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <vfprintf+0x328>
    1a7c:	a3 94       	inc	r10
    1a7e:	8b 2c       	mov	r8, r11
    1a80:	99 24       	eor	r9, r9
    1a82:	b3 fc       	sbrc	r11, 3
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <vfprintf+0x358>
    1a86:	b0 fe       	sbrs	r11, 0
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <vfprintf+0x352>
    1a8a:	af 14       	cp	r10, r15
    1a8c:	28 f4       	brcc	.+10     	; 0x1a98 <vfprintf+0x342>
    1a8e:	e7 2c       	mov	r14, r7
    1a90:	ef 0c       	add	r14, r15
    1a92:	ea 18       	sub	r14, r10
    1a94:	af 2c       	mov	r10, r15
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <vfprintf+0x352>
    1a98:	e7 2c       	mov	r14, r7
    1a9a:	06 c0       	rjmp	.+12     	; 0x1aa8 <vfprintf+0x352>
    1a9c:	80 e2       	ldi	r24, 0x20	; 32
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	b6 01       	movw	r22, r12
    1aa2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1aa6:	a3 94       	inc	r10
    1aa8:	af 14       	cp	r10, r15
    1aaa:	c0 f3       	brcs	.-16     	; 0x1a9c <vfprintf+0x346>
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <vfprintf+0x360>
    1aae:	af 14       	cp	r10, r15
    1ab0:	10 f4       	brcc	.+4      	; 0x1ab6 <vfprintf+0x360>
    1ab2:	fa 18       	sub	r15, r10
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <vfprintf+0x362>
    1ab6:	ff 24       	eor	r15, r15
    1ab8:	84 fe       	sbrs	r8, 4
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <vfprintf+0x384>
    1abc:	80 e3       	ldi	r24, 0x30	; 48
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1ac6:	82 fe       	sbrs	r8, 2
    1ac8:	1f c0       	rjmp	.+62     	; 0x1b08 <vfprintf+0x3b2>
    1aca:	81 fe       	sbrs	r8, 1
    1acc:	03 c0       	rjmp	.+6      	; 0x1ad4 <vfprintf+0x37e>
    1ace:	88 e5       	ldi	r24, 0x58	; 88
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <vfprintf+0x39e>
    1ad4:	88 e7       	ldi	r24, 0x78	; 120
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <vfprintf+0x39e>
    1ada:	c4 01       	movw	r24, r8
    1adc:	86 78       	andi	r24, 0x86	; 134
    1ade:	90 70       	andi	r25, 0x00	; 0
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	91 f0       	breq	.+36     	; 0x1b08 <vfprintf+0x3b2>
    1ae4:	81 fc       	sbrc	r8, 1
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <vfprintf+0x396>
    1ae8:	80 e2       	ldi	r24, 0x20	; 32
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <vfprintf+0x398>
    1aec:	8b e2       	ldi	r24, 0x2B	; 43
    1aee:	b7 fc       	sbrc	r11, 7
    1af0:	8d e2       	ldi	r24, 0x2D	; 45
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	b6 01       	movw	r22, r12
    1af6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <vfprintf+0x3b2>
    1afc:	80 e3       	ldi	r24, 0x30	; 48
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	b6 01       	movw	r22, r12
    1b02:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1b06:	ea 94       	dec	r14
    1b08:	7e 14       	cp	r7, r14
    1b0a:	c0 f3       	brcs	.-16     	; 0x1afc <vfprintf+0x3a6>
    1b0c:	7a 94       	dec	r7
    1b0e:	f2 01       	movw	r30, r4
    1b10:	e7 0d       	add	r30, r7
    1b12:	f1 1d       	adc	r31, r1
    1b14:	80 81       	ld	r24, Z
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	b6 01       	movw	r22, r12
    1b1a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1b1e:	77 20       	and	r7, r7
    1b20:	a9 f7       	brne	.-22     	; 0x1b0c <vfprintf+0x3b6>
    1b22:	06 c0       	rjmp	.+12     	; 0x1b30 <vfprintf+0x3da>
    1b24:	80 e2       	ldi	r24, 0x20	; 32
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	b6 01       	movw	r22, r12
    1b2a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <fputc>
    1b2e:	fa 94       	dec	r15
    1b30:	ff 20       	and	r15, r15
    1b32:	c1 f7       	brne	.-16     	; 0x1b24 <vfprintf+0x3ce>
    1b34:	37 ce       	rjmp	.-914    	; 0x17a4 <vfprintf+0x4e>
    1b36:	f6 01       	movw	r30, r12
    1b38:	26 81       	ldd	r18, Z+6	; 0x06
    1b3a:	37 81       	ldd	r19, Z+7	; 0x07
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <vfprintf+0x3ec>
    1b3e:	2f ef       	ldi	r18, 0xFF	; 255
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	c9 01       	movw	r24, r18
    1b44:	2c 96       	adiw	r28, 0x0c	; 12
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	cd bf       	out	0x3d, r28	; 61
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	bf 90       	pop	r11
    1b62:	af 90       	pop	r10
    1b64:	9f 90       	pop	r9
    1b66:	8f 90       	pop	r8
    1b68:	7f 90       	pop	r7
    1b6a:	6f 90       	pop	r6
    1b6c:	5f 90       	pop	r5
    1b6e:	4f 90       	pop	r4
    1b70:	3f 90       	pop	r3
    1b72:	2f 90       	pop	r2
    1b74:	08 95       	ret

00001b76 <strnlen_P>:
    1b76:	fc 01       	movw	r30, r24
    1b78:	05 90       	lpm	r0, Z+
    1b7a:	61 50       	subi	r22, 0x01	; 1
    1b7c:	70 40       	sbci	r23, 0x00	; 0
    1b7e:	01 10       	cpse	r0, r1
    1b80:	d8 f7       	brcc	.-10     	; 0x1b78 <strnlen_P+0x2>
    1b82:	80 95       	com	r24
    1b84:	90 95       	com	r25
    1b86:	8e 0f       	add	r24, r30
    1b88:	9f 1f       	adc	r25, r31
    1b8a:	08 95       	ret

00001b8c <strnlen>:
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	61 50       	subi	r22, 0x01	; 1
    1b90:	70 40       	sbci	r23, 0x00	; 0
    1b92:	01 90       	ld	r0, Z+
    1b94:	01 10       	cpse	r0, r1
    1b96:	d8 f7       	brcc	.-10     	; 0x1b8e <strnlen+0x2>
    1b98:	80 95       	com	r24
    1b9a:	90 95       	com	r25
    1b9c:	8e 0f       	add	r24, r30
    1b9e:	9f 1f       	adc	r25, r31
    1ba0:	08 95       	ret

00001ba2 <fputc>:
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	8c 01       	movw	r16, r24
    1bac:	eb 01       	movw	r28, r22
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	81 ff       	sbrs	r24, 1
    1bb2:	1b c0       	rjmp	.+54     	; 0x1bea <fputc+0x48>
    1bb4:	82 ff       	sbrs	r24, 2
    1bb6:	0d c0       	rjmp	.+26     	; 0x1bd2 <fputc+0x30>
    1bb8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bba:	3f 81       	ldd	r19, Y+7	; 0x07
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc0:	28 17       	cp	r18, r24
    1bc2:	39 07       	cpc	r19, r25
    1bc4:	64 f4       	brge	.+24     	; 0x1bde <fputc+0x3c>
    1bc6:	e8 81       	ld	r30, Y
    1bc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bca:	01 93       	st	Z+, r16
    1bcc:	f9 83       	std	Y+1, r31	; 0x01
    1bce:	e8 83       	st	Y, r30
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <fputc+0x3c>
    1bd2:	e8 85       	ldd	r30, Y+8	; 0x08
    1bd4:	f9 85       	ldd	r31, Y+9	; 0x09
    1bd6:	80 2f       	mov	r24, r16
    1bd8:	09 95       	icall
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	31 f4       	brne	.+12     	; 0x1bea <fputc+0x48>
    1bde:	8e 81       	ldd	r24, Y+6	; 0x06
    1be0:	9f 81       	ldd	r25, Y+7	; 0x07
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	9f 83       	std	Y+7, r25	; 0x07
    1be6:	8e 83       	std	Y+6, r24	; 0x06
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <fputc+0x4c>
    1bea:	0f ef       	ldi	r16, 0xFF	; 255
    1bec:	1f ef       	ldi	r17, 0xFF	; 255
    1bee:	c8 01       	movw	r24, r16
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <__ultoa_invert>:
    1bfa:	fa 01       	movw	r30, r20
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	28 30       	cpi	r18, 0x08	; 8
    1c00:	51 f1       	breq	.+84     	; 0x1c56 <__ultoa_invert+0x5c>
    1c02:	20 31       	cpi	r18, 0x10	; 16
    1c04:	81 f1       	breq	.+96     	; 0x1c66 <__ultoa_invert+0x6c>
    1c06:	e8 94       	clt
    1c08:	6f 93       	push	r22
    1c0a:	6e 7f       	andi	r22, 0xFE	; 254
    1c0c:	6e 5f       	subi	r22, 0xFE	; 254
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	af 4f       	sbci	r26, 0xFF	; 255
    1c16:	b1 e0       	ldi	r27, 0x01	; 1
    1c18:	3e d0       	rcall	.+124    	; 0x1c96 <__ultoa_invert+0x9c>
    1c1a:	b4 e0       	ldi	r27, 0x04	; 4
    1c1c:	3c d0       	rcall	.+120    	; 0x1c96 <__ultoa_invert+0x9c>
    1c1e:	67 0f       	add	r22, r23
    1c20:	78 1f       	adc	r23, r24
    1c22:	89 1f       	adc	r24, r25
    1c24:	9a 1f       	adc	r25, r26
    1c26:	a1 1d       	adc	r26, r1
    1c28:	68 0f       	add	r22, r24
    1c2a:	79 1f       	adc	r23, r25
    1c2c:	8a 1f       	adc	r24, r26
    1c2e:	91 1d       	adc	r25, r1
    1c30:	a1 1d       	adc	r26, r1
    1c32:	6a 0f       	add	r22, r26
    1c34:	71 1d       	adc	r23, r1
    1c36:	81 1d       	adc	r24, r1
    1c38:	91 1d       	adc	r25, r1
    1c3a:	a1 1d       	adc	r26, r1
    1c3c:	20 d0       	rcall	.+64     	; 0x1c7e <__ultoa_invert+0x84>
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__ultoa_invert+0x48>
    1c40:	68 94       	set
    1c42:	3f 91       	pop	r19
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	26 9f       	mul	r18, r22
    1c48:	11 24       	eor	r1, r1
    1c4a:	30 19       	sub	r19, r0
    1c4c:	30 5d       	subi	r19, 0xD0	; 208
    1c4e:	31 93       	st	Z+, r19
    1c50:	de f6       	brtc	.-74     	; 0x1c08 <__ultoa_invert+0xe>
    1c52:	cf 01       	movw	r24, r30
    1c54:	08 95       	ret
    1c56:	46 2f       	mov	r20, r22
    1c58:	47 70       	andi	r20, 0x07	; 7
    1c5a:	40 5d       	subi	r20, 0xD0	; 208
    1c5c:	41 93       	st	Z+, r20
    1c5e:	b3 e0       	ldi	r27, 0x03	; 3
    1c60:	0f d0       	rcall	.+30     	; 0x1c80 <__ultoa_invert+0x86>
    1c62:	c9 f7       	brne	.-14     	; 0x1c56 <__ultoa_invert+0x5c>
    1c64:	f6 cf       	rjmp	.-20     	; 0x1c52 <__ultoa_invert+0x58>
    1c66:	46 2f       	mov	r20, r22
    1c68:	4f 70       	andi	r20, 0x0F	; 15
    1c6a:	40 5d       	subi	r20, 0xD0	; 208
    1c6c:	4a 33       	cpi	r20, 0x3A	; 58
    1c6e:	18 f0       	brcs	.+6      	; 0x1c76 <__ultoa_invert+0x7c>
    1c70:	49 5d       	subi	r20, 0xD9	; 217
    1c72:	31 fd       	sbrc	r19, 1
    1c74:	40 52       	subi	r20, 0x20	; 32
    1c76:	41 93       	st	Z+, r20
    1c78:	02 d0       	rcall	.+4      	; 0x1c7e <__ultoa_invert+0x84>
    1c7a:	a9 f7       	brne	.-22     	; 0x1c66 <__ultoa_invert+0x6c>
    1c7c:	ea cf       	rjmp	.-44     	; 0x1c52 <__ultoa_invert+0x58>
    1c7e:	b4 e0       	ldi	r27, 0x04	; 4
    1c80:	a6 95       	lsr	r26
    1c82:	97 95       	ror	r25
    1c84:	87 95       	ror	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	ba 95       	dec	r27
    1c8c:	c9 f7       	brne	.-14     	; 0x1c80 <__ultoa_invert+0x86>
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 05       	cpc	r22, r1
    1c92:	71 05       	cpc	r23, r1
    1c94:	08 95       	ret
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	0a 2e       	mov	r0, r26
    1c9c:	06 94       	lsr	r0
    1c9e:	57 95       	ror	r21
    1ca0:	47 95       	ror	r20
    1ca2:	37 95       	ror	r19
    1ca4:	27 95       	ror	r18
    1ca6:	ba 95       	dec	r27
    1ca8:	c9 f7       	brne	.-14     	; 0x1c9c <__ultoa_invert+0xa2>
    1caa:	62 0f       	add	r22, r18
    1cac:	73 1f       	adc	r23, r19
    1cae:	84 1f       	adc	r24, r20
    1cb0:	95 1f       	adc	r25, r21
    1cb2:	a0 1d       	adc	r26, r0
    1cb4:	08 95       	ret

00001cb6 <_exit>:
    1cb6:	f8 94       	cli

00001cb8 <__stop_program>:
    1cb8:	ff cf       	rjmp	.-2      	; 0x1cb8 <__stop_program>
