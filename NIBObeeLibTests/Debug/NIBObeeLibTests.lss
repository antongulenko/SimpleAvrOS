
NIBObeeLibTests.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000b32  00000bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  0080010c  0080010c  00000bd2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000f0  00000000  00000000  00001337  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003c4  00000000  00000000  00001427  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001385  00000000  00000000  000017eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a2c  00000000  00000000  00002b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002973  00000000  00000000  0000359c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  00005f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000973  00000000  00000000  00006180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000543  00000000  00000000  00006af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00057a21  00000000  00000000  00007036  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000174  00000000  00000000  0005ea57  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  0005ebcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_1>
   8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_13>
  38:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_20>
  54:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_21>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_24>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 4b 04 	call	0x896	; 0x896 <main>
  c6:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <analog_init>:
uint16_t analog_samples[11];
uint8_t analog_pos;


void analog_init() {
  nibobee_initialization |= NIBOBEE_ANALOG_INITIALIZED;
  ce:	80 91 23 01 	lds	r24, 0x0123
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	80 93 23 01 	sts	0x0123, r24
  ADCSRA = _BV(ADPS2)  // prescale faktor = 128 ADC laeuft
  d8:	8f ee       	ldi	r24, 0xEF	; 239
  da:	80 93 7a 00 	sts	0x007A, r24
         | _BV(ADPS0)
         | _BV(ADEN)   // ADC an
         | _BV(ADATE)  // auto trigger
         | _BV(ADIE)   // enable interrupt
         | _BV(ADSC);  // Beginne mit der Konvertierung
  activate_output_bit(IO_LINE_EN);
  de:	24 9a       	sbi	0x04, 4	; 4
}
  e0:	08 95       	ret

000000e2 <analog_getValue>:


uint16_t analog_getValue(uint8_t idx) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  e2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  e4:	f8 94       	cli
    return analog_samples[idx];
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e3 5f       	subi	r30, 0xF3	; 243
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  f6:	2f bf       	out	0x3f, r18	; 63
  }
  return 0;
}
  f8:	08 95       	ret

000000fa <analog_irq_hook>:
}

void analog_irq_hook() __attribute__((weak));

void analog_irq_hook() {
}
  fa:	08 95       	ret

000000fc <__vector_24>:

ISR(ADC_vect) {
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	0b b6       	in	r0, 0x3b	; 59
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
  return 0;
}


static inline void analog_storeResult(uint8_t pos) {
  uint16_t value = ADC;
 122:	80 91 78 00 	lds	r24, 0x0078
 126:	90 91 79 00 	lds	r25, 0x0079
  switch (pos) {
 12a:	20 91 0c 01 	lds	r18, 0x010C
 12e:	25 30       	cpi	r18, 0x05	; 5
 130:	c9 f1       	breq	.+114    	; 0x1a4 <__vector_24+0xa8>
 132:	26 30       	cpi	r18, 0x06	; 6
 134:	80 f4       	brcc	.+32     	; 0x156 <__vector_24+0x5a>
 136:	22 30       	cpi	r18, 0x02	; 2
 138:	31 f1       	breq	.+76     	; 0x186 <__vector_24+0x8a>
 13a:	23 30       	cpi	r18, 0x03	; 3
 13c:	30 f4       	brcc	.+12     	; 0x14a <__vector_24+0x4e>
 13e:	22 23       	and	r18, r18
 140:	c1 f0       	breq	.+48     	; 0x172 <__vector_24+0x76>
 142:	21 30       	cpi	r18, 0x01	; 1
 144:	09 f0       	breq	.+2      	; 0x148 <__vector_24+0x4c>
 146:	4d c0       	rjmp	.+154    	; 0x1e2 <__vector_24+0xe6>
 148:	19 c0       	rjmp	.+50     	; 0x17c <__vector_24+0x80>
 14a:	23 30       	cpi	r18, 0x03	; 3
 14c:	09 f1       	breq	.+66     	; 0x190 <__vector_24+0x94>
 14e:	24 30       	cpi	r18, 0x04	; 4
 150:	09 f0       	breq	.+2      	; 0x154 <__vector_24+0x58>
 152:	47 c0       	rjmp	.+142    	; 0x1e2 <__vector_24+0xe6>
 154:	22 c0       	rjmp	.+68     	; 0x19a <__vector_24+0x9e>
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	a9 f1       	breq	.+106    	; 0x1c4 <__vector_24+0xc8>
 15a:	29 30       	cpi	r18, 0x09	; 9
 15c:	28 f4       	brcc	.+10     	; 0x168 <__vector_24+0x6c>
 15e:	26 30       	cpi	r18, 0x06	; 6
 160:	31 f1       	breq	.+76     	; 0x1ae <__vector_24+0xb2>
 162:	27 30       	cpi	r18, 0x07	; 7
 164:	f1 f5       	brne	.+124    	; 0x1e2 <__vector_24+0xe6>
 166:	29 c0       	rjmp	.+82     	; 0x1ba <__vector_24+0xbe>
 168:	29 30       	cpi	r18, 0x09	; 9
 16a:	89 f1       	breq	.+98     	; 0x1ce <__vector_24+0xd2>
 16c:	2a 30       	cpi	r18, 0x0A	; 10
 16e:	c9 f5       	brne	.+114    	; 0x1e2 <__vector_24+0xe6>
 170:	33 c0       	rjmp	.+102    	; 0x1d8 <__vector_24+0xdc>
    case  0: analog_samples[ANALOG_EXT0]=value; break;
 172:	90 93 0e 01 	sts	0x010E, r25
 176:	80 93 0d 01 	sts	0x010D, r24
 17a:	33 c0       	rjmp	.+102    	; 0x1e2 <__vector_24+0xe6>
    case  1: analog_samples[ANALOG_EXT1]=value; break;
 17c:	90 93 10 01 	sts	0x0110, r25
 180:	80 93 0f 01 	sts	0x010F, r24
 184:	2e c0       	rjmp	.+92     	; 0x1e2 <__vector_24+0xe6>
    case  2: analog_samples[ANALOG_EXT2]=value; break;
 186:	90 93 12 01 	sts	0x0112, r25
 18a:	80 93 11 01 	sts	0x0111, r24
 18e:	29 c0       	rjmp	.+82     	; 0x1e2 <__vector_24+0xe6>
    case  3: analog_samples[ANALOG_EXT3]=value; break;
 190:	90 93 14 01 	sts	0x0114, r25
 194:	80 93 13 01 	sts	0x0113, r24
 198:	24 c0       	rjmp	.+72     	; 0x1e2 <__vector_24+0xe6>
    case  4: analog_samples[ANALOG_L0]=value; break;
 19a:	90 93 18 01 	sts	0x0118, r25
 19e:	80 93 17 01 	sts	0x0117, r24
 1a2:	1f c0       	rjmp	.+62     	; 0x1e2 <__vector_24+0xe6>
    case  5: analog_samples[ANALOG_C0]=value; break;
 1a4:	90 93 1a 01 	sts	0x011A, r25
 1a8:	80 93 19 01 	sts	0x0119, r24
 1ac:	1a c0       	rjmp	.+52     	; 0x1e2 <__vector_24+0xe6>
    case  6: analog_samples[ANALOG_R0]=value; clear_output_bit(IO_LINE_EN); break;
 1ae:	90 93 1c 01 	sts	0x011C, r25
 1b2:	80 93 1b 01 	sts	0x011B, r24
 1b6:	2c 98       	cbi	0x05, 4	; 5
 1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <__vector_24+0xe6>
    case  7: analog_samples[ANALOG_VOLT]=value; break;
 1ba:	90 93 16 01 	sts	0x0116, r25
 1be:	80 93 15 01 	sts	0x0115, r24
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <__vector_24+0xe6>
    case  8: analog_samples[ANALOG_L1]=value; break;
 1c4:	90 93 1e 01 	sts	0x011E, r25
 1c8:	80 93 1d 01 	sts	0x011D, r24
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <__vector_24+0xe6>
    case  9: analog_samples[ANALOG_C1]=value; break;
 1ce:	90 93 20 01 	sts	0x0120, r25
 1d2:	80 93 1f 01 	sts	0x011F, r24
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <__vector_24+0xe6>
    case 10: analog_samples[ANALOG_R1]=value; set_output_bit(IO_LINE_EN); break;
 1d8:	90 93 22 01 	sts	0x0122, r25
 1dc:	80 93 21 01 	sts	0x0121, r24
 1e0:	2c 9a       	sbi	0x05, 4	; 5
void analog_irq_hook() {
}

ISR(ADC_vect) {
  analog_storeResult(analog_pos);
  if (++analog_pos>10) {
 1e2:	80 91 0c 01 	lds	r24, 0x010C
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 0c 01 	sts	0x010C, r24
 1ec:	8b 30       	cpi	r24, 0x0B	; 11
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <__vector_24+0xf8>
    analog_pos=0;
 1f0:	10 92 0c 01 	sts	0x010C, r1
  }
}


static inline void analog_setupNext(uint8_t pos) {
  switch (pos) {
 1f4:	80 91 0c 01 	lds	r24, 0x010C
 1f8:	85 30       	cpi	r24, 0x05	; 5
 1fa:	51 f1       	breq	.+84     	; 0x250 <__vector_24+0x154>
 1fc:	86 30       	cpi	r24, 0x06	; 6
 1fe:	70 f4       	brcc	.+28     	; 0x21c <__vector_24+0x120>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	f1 f0       	breq	.+60     	; 0x240 <__vector_24+0x144>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	28 f4       	brcc	.+10     	; 0x212 <__vector_24+0x116>
 208:	88 23       	and	r24, r24
 20a:	b1 f0       	breq	.+44     	; 0x238 <__vector_24+0x13c>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	29 f5       	brne	.+74     	; 0x25a <__vector_24+0x15e>
 210:	15 c0       	rjmp	.+42     	; 0x23c <__vector_24+0x140>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	c9 f0       	breq	.+50     	; 0x248 <__vector_24+0x14c>
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	01 f5       	brne	.+64     	; 0x25a <__vector_24+0x15e>
 21a:	18 c0       	rjmp	.+48     	; 0x24c <__vector_24+0x150>
 21c:	88 30       	cpi	r24, 0x08	; 8
 21e:	b1 f0       	breq	.+44     	; 0x24c <__vector_24+0x150>
 220:	89 30       	cpi	r24, 0x09	; 9
 222:	28 f4       	brcc	.+10     	; 0x22e <__vector_24+0x132>
 224:	86 30       	cpi	r24, 0x06	; 6
 226:	71 f0       	breq	.+28     	; 0x244 <__vector_24+0x148>
 228:	87 30       	cpi	r24, 0x07	; 7
 22a:	b9 f4       	brne	.+46     	; 0x25a <__vector_24+0x15e>
 22c:	0d c0       	rjmp	.+26     	; 0x248 <__vector_24+0x14c>
 22e:	89 30       	cpi	r24, 0x09	; 9
 230:	79 f0       	breq	.+30     	; 0x250 <__vector_24+0x154>
 232:	8a 30       	cpi	r24, 0x0A	; 10
 234:	91 f4       	brne	.+36     	; 0x25a <__vector_24+0x15e>
 236:	0e c0       	rjmp	.+28     	; 0x254 <__vector_24+0x158>
    case  0: ADMUX = _BV(REFS0) | 1; break;
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0d c0       	rjmp	.+26     	; 0x256 <__vector_24+0x15a>
    case  1: ADMUX = _BV(REFS0) | 2; break;
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	0b c0       	rjmp	.+22     	; 0x256 <__vector_24+0x15a>
    case  2: ADMUX = _BV(REFS0) | 3; break;
 240:	83 e4       	ldi	r24, 0x43	; 67
 242:	09 c0       	rjmp	.+18     	; 0x256 <__vector_24+0x15a>
    case  3: ADMUX = _BV(REFS0) | 5; break;
    case  4: ADMUX = _BV(REFS0) | 6; break;
    case  5: ADMUX = _BV(REFS0) | 7; break;
    case  6: ADMUX = _BV(REFS0) | 30; break;
 244:	8e e5       	ldi	r24, 0x5E	; 94
 246:	07 c0       	rjmp	.+14     	; 0x256 <__vector_24+0x15a>
    case  7: ADMUX = _BV(REFS0) | 5; break;
 248:	85 e4       	ldi	r24, 0x45	; 69
 24a:	05 c0       	rjmp	.+10     	; 0x256 <__vector_24+0x15a>
    case  8: ADMUX = _BV(REFS0) | 6; break;
 24c:	86 e4       	ldi	r24, 0x46	; 70
 24e:	03 c0       	rjmp	.+6      	; 0x256 <__vector_24+0x15a>
    case  9: ADMUX = _BV(REFS0) | 7; break;
 250:	87 e4       	ldi	r24, 0x47	; 71
 252:	01 c0       	rjmp	.+2      	; 0x256 <__vector_24+0x15a>
    case 10: ADMUX = _BV(REFS0) | 0; break;
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	80 93 7c 00 	sts	0x007C, r24
  analog_storeResult(analog_pos);
  if (++analog_pos>10) {
    analog_pos=0;
  }
  analog_setupNext(analog_pos);
  if (analog_pos==0) {
 25a:	80 91 0c 01 	lds	r24, 0x010C
 25e:	88 23       	and	r24, r24
 260:	11 f4       	brne	.+4      	; 0x266 <__vector_24+0x16a>
    analog_irq_hook();
 262:	0e 94 7d 00 	call	0xfa	; 0xfa <analog_irq_hook>
  }
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0b be       	out	0x3b, r0	; 59
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <delay>:
  voltage *= 25;
  return voltage;
}

static void delay(uint8_t count) {
  while (count--) {
 28c:	0a c0       	rjmp	.+20     	; 0x2a2 <delay+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2f e7       	ldi	r18, 0x7F	; 127
 290:	3a e1       	ldi	r19, 0x1A	; 26
 292:	46 e0       	ldi	r20, 0x06	; 6
 294:	21 50       	subi	r18, 0x01	; 1
 296:	30 40       	sbci	r19, 0x00	; 0
 298:	40 40       	sbci	r20, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <delay+0x8>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <delay+0x12>
 29e:	00 00       	nop
 2a0:	81 50       	subi	r24, 0x01	; 1
 2a2:	88 23       	and	r24, r24
 2a4:	a1 f7       	brne	.-24     	; 0x28e <delay+0x2>
    _delay_ms(100);
  }
}
 2a6:	08 95       	ret

000002a8 <blink_all>:

static void blink_all(uint8_t on, uint8_t off) {
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	08 2f       	mov	r16, r24
 2ae:	16 2f       	mov	r17, r22
  led_set(LED_L_RD, 1);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  led_set(LED_R_RD, 1);
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  led_set(LED_L_YE, 1);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  led_set(LED_R_YE, 1);
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  delay(on);
 2d0:	80 2f       	mov	r24, r16
 2d2:	0e 94 46 01 	call	0x28c	; 0x28c <delay>
  led_set(LED_L_RD, 0);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  led_set(LED_R_RD, 0);
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  led_set(LED_L_YE, 0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  led_set(LED_R_YE, 0);
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
  delay(off);
 2f6:	81 2f       	mov	r24, r17
 2f8:	0e 94 46 01 	call	0x28c	; 0x28c <delay>
}
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <nibobee_getMillivolt>:


uint8_t nibobee_initialization;

uint16_t nibobee_getMillivolt() {
  uint16_t voltage = analog_getValue(ANALOG_VOLT);
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 308:	bc 01       	movw	r22, r24
  voltage = (4*12480U)/voltage;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	93 ec       	ldi	r25, 0xC3	; 195
 30e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__udivmodhi4>
  voltage *= 25;
 312:	89 e1       	ldi	r24, 0x19	; 25
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	68 9f       	mul	r22, r24
 318:	90 01       	movw	r18, r0
 31a:	69 9f       	mul	r22, r25
 31c:	30 0d       	add	r19, r0
 31e:	78 9f       	mul	r23, r24
 320:	30 0d       	add	r19, r0
 322:	11 24       	eor	r1, r1
  return voltage;
}
 324:	c9 01       	movw	r24, r18
 326:	08 95       	ret

00000328 <nibobee_assertMinVoltage>:
  led_set(LED_L_YE, 0);
  led_set(LED_R_YE, 0);
  delay(off);
}

void nibobee_assertMinVoltage(uint16_t value) {
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24
  uint16_t voltage = analog_getValue(ANALOG_VOLT);
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
  if (voltage>value) {
 334:	c8 17       	cp	r28, r24
 336:	d9 07       	cpc	r29, r25
 338:	58 f5       	brcc	.+86     	; 0x390 <nibobee_assertMinVoltage+0x68>
    activate_output_group(IO_LEDS);  // LED bits als Output
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	8f 60       	ori	r24, 0x0F	; 15
 33e:	84 b9       	out	0x04, r24	; 4
    motpwm_stop();
 340:	0e 94 09 02 	call	0x412	; 0x412 <motpwm_stop>
    disable_interrupts();
 344:	f8 94       	cli

    while (1) {
      blink_all(1,1); // S
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(1,1);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(1,1);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(3,1); // O
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(3,1);
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(3,1);
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(1,1); // S
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(1,1);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
      blink_all(1,3);
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <blink_all>
 38e:	db cf       	rjmp	.-74     	; 0x346 <nibobee_assertMinVoltage+0x1e>
    }
  }
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <led_init>:
extern "C" {
#endif


void led_init() {
  activate_output_group(IO_LEDS);  // LED bits als Output
 396:	84 b1       	in	r24, 0x04	; 4
 398:	8f 60       	ori	r24, 0x0F	; 15
 39a:	84 b9       	out	0x04, r24	; 4
}
 39c:	08 95       	ret

0000039e <led_set>:

void led_set(uint8_t led, uint8_t status) {
  if (status) {
 39e:	66 23       	and	r22, r22
 3a0:	89 f0       	breq	.+34     	; 0x3c4 <led_set+0x26>
    switch (led) {
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <led_set+0x1a>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <led_set+0x16>
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	39 f0       	breq	.+14     	; 0x3bc <led_set+0x1e>
 3ae:	83 30       	cpi	r24, 0x03	; 3
 3b0:	c9 f4       	brne	.+50     	; 0x3e4 <led_set+0x46>
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <led_set+0x22>
      case 0: set_output_groupbit(IO_LEDS, L_YE); break;
 3b4:	28 9a       	sbi	0x05, 0	; 5
 3b6:	08 95       	ret
      case 1: set_output_groupbit(IO_LEDS, L_RD); break;
 3b8:	29 9a       	sbi	0x05, 1	; 5
 3ba:	08 95       	ret
      case 2: set_output_groupbit(IO_LEDS, R_RD); break;
 3bc:	2a 9a       	sbi	0x05, 2	; 5
 3be:	08 95       	ret
      case 3: set_output_groupbit(IO_LEDS, R_YE); break;
 3c0:	2b 9a       	sbi	0x05, 3	; 5
 3c2:	08 95       	ret
    }
  } else {
    switch (led) {
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	49 f0       	breq	.+18     	; 0x3da <led_set+0x3c>
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	28 f0       	brcs	.+10     	; 0x3d6 <led_set+0x38>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	39 f0       	breq	.+14     	; 0x3de <led_set+0x40>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	41 f4       	brne	.+16     	; 0x3e4 <led_set+0x46>
 3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <led_set+0x44>
      case 0: clear_output_groupbit(IO_LEDS, L_YE); break;
 3d6:	28 98       	cbi	0x05, 0	; 5
 3d8:	08 95       	ret
      case 1: clear_output_groupbit(IO_LEDS, L_RD); break;
 3da:	29 98       	cbi	0x05, 1	; 5
 3dc:	08 95       	ret
      case 2: clear_output_groupbit(IO_LEDS, R_RD); break;
 3de:	2a 98       	cbi	0x05, 2	; 5
 3e0:	08 95       	ret
      case 3: clear_output_groupbit(IO_LEDS, R_YE); break;
 3e2:	2b 98       	cbi	0x05, 3	; 5
 3e4:	08 95       	ret

000003e6 <motpwm_init>:
int16_t motpwm_motor_l;
int16_t motpwm_motor_r;
uint8_t motpwm_flags;

void motpwm_init() {
  nibobee_initialization |= NIBOBEE_MOTPWM_INITIALIZED;
 3e6:	80 91 23 01 	lds	r24, 0x0123
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	80 93 23 01 	sts	0x0123, r24
  set_output_group(IO_MOTOR);
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	80 6f       	ori	r24, 0xF0	; 240
 3f4:	8b b9       	out	0x0b, r24	; 11
  activate_output_group(IO_MOTOR);
 3f6:	8a b1       	in	r24, 0x0a	; 10
 3f8:	80 6f       	ori	r24, 0xF0	; 240
 3fa:	8a b9       	out	0x0a, r24	; 10
  PWM_TIMER_CCRA = PWM_TIMER_CCRA_INIT;
 3fc:	82 ef       	ldi	r24, 0xF2	; 242
 3fe:	80 93 80 00 	sts	0x0080, r24
  PWM_TIMER_CCRB = PWM_TIMER_CCRB_INIT;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 81 00 	sts	0x0081, r24
  PWM_TIMER_IMSK |= PWM_TIMER_IMSK_INIT;
 408:	ef e6       	ldi	r30, 0x6F	; 111
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	80 83       	st	Z, r24
}
 410:	08 95       	ret

00000412 <motpwm_stop>:


void motpwm_stop() {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 412:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 414:	f8 94       	cli
    motpwm_motor_l = 0;
 416:	10 92 26 01 	sts	0x0126, r1
 41a:	10 92 25 01 	sts	0x0125, r1
    motpwm_motor_r = 0;
 41e:	10 92 28 01 	sts	0x0128, r1
 422:	10 92 27 01 	sts	0x0127, r1
    PWM_TIMER_OCRA = 0;
 426:	10 92 89 00 	sts	0x0089, r1
 42a:	10 92 88 00 	sts	0x0088, r1
    PWM_TIMER_OCRB = 0;
 42e:	10 92 8b 00 	sts	0x008B, r1
 432:	10 92 8a 00 	sts	0x008A, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 436:	8f bf       	out	0x3f, r24	; 63
  }
}
 438:	08 95       	ret

0000043a <motpwm_setLeft>:


void motpwm_setLeft(int16_t value) {
  value/=2;
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0e 94 62 05 	call	0xac4	; 0xac4 <__divmodhi4>
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	60 30       	cpi	r22, 0x00	; 0
 446:	78 07       	cpc	r23, r24
 448:	b4 f4       	brge	.+44     	; 0x476 <motpwm_setLeft+0x3c>
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
 44a:	8e ef       	ldi	r24, 0xFE	; 254
 44c:	61 30       	cpi	r22, 0x01	; 1
 44e:	78 07       	cpc	r23, r24
 450:	1c f0       	brlt	.+6      	; 0x458 <motpwm_setLeft+0x1e>
  
  if (value<0) {
 452:	77 fd       	sbrc	r23, 7
 454:	03 c0       	rjmp	.+6      	; 0x45c <motpwm_setLeft+0x22>
 456:	11 c0       	rjmp	.+34     	; 0x47a <motpwm_setLeft+0x40>


void motpwm_setLeft(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	7e ef       	ldi	r23, 0xFE	; 254
  
  if (value<0) {
    motpwm_motor_l = - value;
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	70 93 26 01 	sts	0x0126, r23
 466:	60 93 25 01 	sts	0x0125, r22
    if (get_output_groupbit(IO_MOTOR, DIR_LEFT)) {
 46a:	5e 9b       	sbis	0x0b, 6	; 11
 46c:	0c c0       	rjmp	.+24     	; 0x486 <motpwm_setLeft+0x4c>
      // direction has changed, stop first
      motpwm_flags&=0x02;
 46e:	80 91 24 01 	lds	r24, 0x0124
 472:	82 70       	andi	r24, 0x02	; 2
 474:	10 c0       	rjmp	.+32     	; 0x496 <motpwm_setLeft+0x5c>
}


void motpwm_setLeft(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
 476:	6f ef       	ldi	r22, 0xFF	; 255
 478:	71 e0       	ldi	r23, 0x01	; 1
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPA;
    } else {
      PWM_TIMER_OCRA = motpwm_motor_l;
    }
  } else {
    motpwm_motor_l = value;
 47a:	70 93 26 01 	sts	0x0126, r23
 47e:	60 93 25 01 	sts	0x0125, r22
    if (get_output_groupbit(IO_MOTOR, DIR_LEFT)) {
 482:	5e 9b       	sbis	0x0b, 6	; 11
 484:	05 c0       	rjmp	.+10     	; 0x490 <motpwm_setLeft+0x56>
      PWM_TIMER_OCRA = motpwm_motor_l;
 486:	70 93 89 00 	sts	0x0089, r23
 48a:	60 93 88 00 	sts	0x0088, r22
 48e:	08 95       	ret
    } else {
      // direction has changed, stop first
      motpwm_flags|=0x01;
 490:	80 91 24 01 	lds	r24, 0x0124
 494:	81 60       	ori	r24, 0x01	; 1
 496:	80 93 24 01 	sts	0x0124, r24
      PWM_TIMER_OCRA = 0;
 49a:	10 92 89 00 	sts	0x0089, r1
 49e:	10 92 88 00 	sts	0x0088, r1
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPA;
 4a2:	80 91 6f 00 	lds	r24, 0x006F
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	80 93 6f 00 	sts	0x006F, r24
 4ac:	08 95       	ret

000004ae <motpwm_setRight>:
  }
}


void motpwm_setRight(int16_t value) {
  value/=2;
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	0e 94 62 05 	call	0xac4	; 0xac4 <__divmodhi4>
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	60 30       	cpi	r22, 0x00	; 0
 4ba:	78 07       	cpc	r23, r24
 4bc:	b4 f4       	brge	.+44     	; 0x4ea <motpwm_setRight+0x3c>
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
 4be:	8e ef       	ldi	r24, 0xFE	; 254
 4c0:	61 30       	cpi	r22, 0x01	; 1
 4c2:	78 07       	cpc	r23, r24
 4c4:	1c f0       	brlt	.+6      	; 0x4cc <motpwm_setRight+0x1e>
  
  if (value<0) {
 4c6:	77 fd       	sbrc	r23, 7
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <motpwm_setRight+0x22>
 4ca:	11 c0       	rjmp	.+34     	; 0x4ee <motpwm_setRight+0x40>


void motpwm_setRight(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
  if (value<-PWM_TIMER_MAX) value=-PWM_TIMER_MAX;
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	7e ef       	ldi	r23, 0xFE	; 254
  
  if (value<0) {
    motpwm_motor_r =  - value;
 4d0:	70 95       	com	r23
 4d2:	61 95       	neg	r22
 4d4:	7f 4f       	sbci	r23, 0xFF	; 255
 4d6:	70 93 28 01 	sts	0x0128, r23
 4da:	60 93 27 01 	sts	0x0127, r22
    if (get_output_groupbit(IO_MOTOR, DIR_RIGHT)) {
 4de:	5f 99       	sbic	0x0b, 7	; 11
 4e0:	1b c0       	rjmp	.+54     	; 0x518 <motpwm_setRight+0x6a>
      PWM_TIMER_OCRB = motpwm_motor_r;
    } else {
      // direction has changed, stop first
      motpwm_flags|=0x02;
 4e2:	80 91 24 01 	lds	r24, 0x0124
 4e6:	82 60       	ori	r24, 0x02	; 2
 4e8:	0b c0       	rjmp	.+22     	; 0x500 <motpwm_setRight+0x52>
}


void motpwm_setRight(int16_t value) {
  value/=2;
  if (value>PWM_TIMER_MAX) value=PWM_TIMER_MAX;
 4ea:	6f ef       	ldi	r22, 0xFF	; 255
 4ec:	71 e0       	ldi	r23, 0x01	; 1
      motpwm_flags|=0x02;
      PWM_TIMER_OCRB = 0;
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPB;
    }
  } else {
    motpwm_motor_r =  value;
 4ee:	70 93 28 01 	sts	0x0128, r23
 4f2:	60 93 27 01 	sts	0x0127, r22
    if (get_output_groupbit(IO_MOTOR, DIR_RIGHT)) {
 4f6:	5f 9b       	sbis	0x0b, 7	; 11
 4f8:	0f c0       	rjmp	.+30     	; 0x518 <motpwm_setRight+0x6a>
      // direction has changed, stop first
      motpwm_flags&=0x01;
 4fa:	80 91 24 01 	lds	r24, 0x0124
 4fe:	81 70       	andi	r24, 0x01	; 1
 500:	80 93 24 01 	sts	0x0124, r24
      PWM_TIMER_OCRB = 0;
 504:	10 92 8b 00 	sts	0x008B, r1
 508:	10 92 8a 00 	sts	0x008A, r1
      PWM_TIMER_IMSK |= PWM_TIMER_IMSK_CMPB;
 50c:	80 91 6f 00 	lds	r24, 0x006F
 510:	84 60       	ori	r24, 0x04	; 4
 512:	80 93 6f 00 	sts	0x006F, r24
 516:	08 95       	ret
    } else {
      PWM_TIMER_OCRB = motpwm_motor_r;
 518:	70 93 8b 00 	sts	0x008B, r23
 51c:	60 93 8a 00 	sts	0x008A, r22
 520:	08 95       	ret

00000522 <__vector_13>:
    }
  }
}


ISR(TIMER1_COMPA_vect) {
 522:	1f 92       	push	r1
 524:	0f 92       	push	r0
 526:	0f b6       	in	r0, 0x3f	; 63
 528:	0f 92       	push	r0
 52a:	11 24       	eor	r1, r1
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
  if (get_input_groupbit(IO_MOTOR, PWM_LEFT)) {
 530:	4d 9b       	sbis	0x09, 5	; 9
 532:	18 c0       	rjmp	.+48     	; 0x564 <__vector_13+0x42>
    set_output_groupbitval(IO_MOTOR, DIR_LEFT, motpwm_flags&0x01);
 534:	8b b1       	in	r24, 0x0b	; 11
 536:	8f 7b       	andi	r24, 0xBF	; 191
 538:	90 91 24 01 	lds	r25, 0x0124
 53c:	90 ff       	sbrs	r25, 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <__vector_13+0x22>
 540:	90 e4       	ldi	r25, 0x40	; 64
 542:	01 c0       	rjmp	.+2      	; 0x546 <__vector_13+0x24>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	89 2b       	or	r24, r25
 548:	8b b9       	out	0x0b, r24	; 11
    PWM_TIMER_OCRA = motpwm_motor_l;
 54a:	80 91 25 01 	lds	r24, 0x0125
 54e:	90 91 26 01 	lds	r25, 0x0126
 552:	90 93 89 00 	sts	0x0089, r25
 556:	80 93 88 00 	sts	0x0088, r24
    PWM_TIMER_IMSK &= (uint8_t) (~PWM_TIMER_IMSK_CMPA);
 55a:	80 91 6f 00 	lds	r24, 0x006F
 55e:	8d 7f       	andi	r24, 0xFD	; 253
 560:	80 93 6f 00 	sts	0x006F, r24
  }
}
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_14>:


ISR(TIMER1_COMPB_vect) {
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
  if (get_input_groupbit(IO_MOTOR, PWM_RIGHT)) {
 580:	4c 9b       	sbis	0x09, 4	; 9
 582:	18 c0       	rjmp	.+48     	; 0x5b4 <__vector_14+0x42>
    set_output_groupbitval(IO_MOTOR, DIR_RIGHT, motpwm_flags&0x02);
 584:	8b b1       	in	r24, 0x0b	; 11
 586:	8f 77       	andi	r24, 0x7F	; 127
 588:	90 91 24 01 	lds	r25, 0x0124
 58c:	91 ff       	sbrs	r25, 1
 58e:	02 c0       	rjmp	.+4      	; 0x594 <__vector_14+0x22>
 590:	90 e8       	ldi	r25, 0x80	; 128
 592:	01 c0       	rjmp	.+2      	; 0x596 <__vector_14+0x24>
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	89 2b       	or	r24, r25
 598:	8b b9       	out	0x0b, r24	; 11
    PWM_TIMER_OCRB = motpwm_motor_r;
 59a:	80 91 27 01 	lds	r24, 0x0127
 59e:	90 91 28 01 	lds	r25, 0x0128
 5a2:	90 93 8b 00 	sts	0x008B, r25
 5a6:	80 93 8a 00 	sts	0x008A, r24
    PWM_TIMER_IMSK &= (uint8_t) (~PWM_TIMER_IMSK_CMPB);
 5aa:	80 91 6f 00 	lds	r24, 0x006F
 5ae:	8b 7f       	andi	r24, 0xFB	; 251
 5b0:	80 93 6f 00 	sts	0x006F, r24
  }
}
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <odometry_init>:

void odometry_init() {
  // enable int0 and int1 on rising edge
#ifndef GICR
  // ATmega644
  EICRA |= _BV(ISC11) | _BV(ISC10) | _BV(ISC01) | _BV(ISC00);
 5c2:	e9 e6       	ldi	r30, 0x69	; 105
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	8f 60       	ori	r24, 0x0F	; 15
 5ca:	80 83       	st	Z, r24
  EIMSK |= _BV(INT1) |  _BV(INT0);
 5cc:	8d b3       	in	r24, 0x1d	; 29
 5ce:	83 60       	ori	r24, 0x03	; 3
 5d0:	8d bb       	out	0x1d, r24	; 29
  // ATmega16
  MCUCR |= _BV(ISC11) | _BV(ISC10) | _BV(ISC01) | _BV(ISC00); 
  GICR |= _BV(INT1) |  _BV(INT0);
#endif

  set_output_groupbitval(IO_MOTOR, DIR_LEFT, 1);
 5d2:	5e 9a       	sbi	0x0b, 6	; 11
  set_output_groupbitval(IO_MOTOR, DIR_RIGHT, 0);
 5d4:	5f 98       	cbi	0x0b, 7	; 11
}
 5d6:	08 95       	ret

000005d8 <odometry_reset>:


void odometry_reset() {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 5d8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5da:	f8 94       	cli
    odometry_left = 0;
 5dc:	10 92 2b 01 	sts	0x012B, r1
 5e0:	10 92 2a 01 	sts	0x012A, r1
    odometry_right = 0;
 5e4:	10 92 2d 01 	sts	0x012D, r1
 5e8:	10 92 2c 01 	sts	0x012C, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5ec:	8f bf       	out	0x3f, r24	; 63
  }
}
 5ee:	08 95       	ret

000005f0 <odometry_getLeft>:


int16_t odometry_getLeft(uint8_t reset) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 5f0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5f2:	f8 94       	cli
    int16_t res = odometry_left;
 5f4:	20 91 2a 01 	lds	r18, 0x012A
 5f8:	30 91 2b 01 	lds	r19, 0x012B
    if (reset) {
 5fc:	88 23       	and	r24, r24
 5fe:	21 f0       	breq	.+8      	; 0x608 <odometry_getLeft+0x18>
      odometry_left = 0;
 600:	10 92 2b 01 	sts	0x012B, r1
 604:	10 92 2a 01 	sts	0x012A, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 608:	9f bf       	out	0x3f, r25	; 63
    }
    return res;
  }
  return 0;
}
 60a:	c9 01       	movw	r24, r18
 60c:	08 95       	ret

0000060e <odometry_getRight>:


int16_t odometry_getRight(uint8_t reset) {
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 60e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 610:	f8 94       	cli
    int16_t res = odometry_right;
 612:	20 91 2c 01 	lds	r18, 0x012C
 616:	30 91 2d 01 	lds	r19, 0x012D
    if (reset) {
 61a:	88 23       	and	r24, r24
 61c:	21 f0       	breq	.+8      	; 0x626 <odometry_getRight+0x18>
      odometry_right = 0;
 61e:	10 92 2d 01 	sts	0x012D, r1
 622:	10 92 2c 01 	sts	0x012C, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 626:	9f bf       	out	0x3f, r25	; 63
    }
    return res;
  }
  return 0;
}
 628:	c9 01       	movw	r24, r18
 62a:	08 95       	ret

0000062c <__vector_1>:



ISR(INT0_vect) {
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
  if (get_output_groupbit(IO_MOTOR, DIR_LEFT)) odometry_pid_left++, odometry_left++; else odometry_pid_left--, odometry_left--;
 63a:	5e 9b       	sbis	0x0b, 6	; 11
 63c:	0b c0       	rjmp	.+22     	; 0x654 <__vector_1+0x28>
 63e:	80 91 29 01 	lds	r24, 0x0129
 642:	8f 5f       	subi	r24, 0xFF	; 255
 644:	80 93 29 01 	sts	0x0129, r24
 648:	80 91 2a 01 	lds	r24, 0x012A
 64c:	90 91 2b 01 	lds	r25, 0x012B
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	0a c0       	rjmp	.+20     	; 0x668 <__vector_1+0x3c>
 654:	80 91 29 01 	lds	r24, 0x0129
 658:	81 50       	subi	r24, 0x01	; 1
 65a:	80 93 29 01 	sts	0x0129, r24
 65e:	80 91 2a 01 	lds	r24, 0x012A
 662:	90 91 2b 01 	lds	r25, 0x012B
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	90 93 2b 01 	sts	0x012B, r25
 66c:	80 93 2a 01 	sts	0x012A, r24
}
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_2>:


ISR(INT1_vect) {
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
  if (get_output_groupbit(IO_MOTOR, DIR_RIGHT)) odometry_pid_right--, odometry_right--; else odometry_pid_right++, odometry_right++;
 68c:	5f 9b       	sbis	0x0b, 7	; 11
 68e:	0b c0       	rjmp	.+22     	; 0x6a6 <__vector_2+0x28>
 690:	80 91 2e 01 	lds	r24, 0x012E
 694:	81 50       	subi	r24, 0x01	; 1
 696:	80 93 2e 01 	sts	0x012E, r24
 69a:	80 91 2c 01 	lds	r24, 0x012C
 69e:	90 91 2d 01 	lds	r25, 0x012D
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	0a c0       	rjmp	.+20     	; 0x6ba <__vector_2+0x3c>
 6a6:	80 91 2e 01 	lds	r24, 0x012E
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 2e 01 	sts	0x012E, r24
 6b0:	80 91 2c 01 	lds	r24, 0x012C
 6b4:	90 91 2d 01 	lds	r25, 0x012D
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	90 93 2d 01 	sts	0x012D, r25
 6be:	80 93 2c 01 	sts	0x012C, r24
}
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <usart_setbaudrate>:
volatile uint8_t usart_rxbuf_end;



void usart_setbaudrate(uint16_t baud) {
  baud = ((uint32_t)(F_CPU))/((uint32_t)baud*16) - 1;
 6d0:	9c 01       	movw	r18, r24
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	50 e0       	ldi	r21, 0x00	; 0
 6d6:	84 e0       	ldi	r24, 0x04	; 4
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	44 1f       	adc	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	8a 95       	dec	r24
 6e2:	d1 f7       	brne	.-12     	; 0x6d8 <usart_setbaudrate+0x8>
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	7d e2       	ldi	r23, 0x2D	; 45
 6e8:	81 e3       	ldi	r24, 0x31	; 49
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 75 05 	call	0xaea	; 0xaea <__udivmodsi4>
 6f0:	21 50       	subi	r18, 0x01	; 1
 6f2:	30 40       	sbci	r19, 0x00	; 0
  UBRRH = (uint8_t)(baud>>8);
 6f4:	30 93 c5 00 	sts	0x00C5, r19
  UBRRL = (uint8_t)(baud&0xff);
 6f8:	20 93 c4 00 	sts	0x00C4, r18
}
 6fc:	08 95       	ret

000006fe <usart_getchar>:


char usart_getchar() {
  cli();
 6fe:	f8 94       	cli
  uint8_t result = usart_rxbuf[usart_rxbuf_begin];
 700:	e0 91 31 01 	lds	r30, 0x0131
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	ee 5b       	subi	r30, 0xBE	; 190
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	80 81       	ld	r24, Z
  if (usart_rxbuf_end==USART_RXBUF_SIZE) {
 70c:	90 91 30 01 	lds	r25, 0x0130
 710:	98 30       	cpi	r25, 0x08	; 8
 712:	21 f4       	brne	.+8      	; 0x71c <usart_getchar+0x1e>
    usart_rxbuf_end=usart_rxbuf_begin;
 714:	90 91 31 01 	lds	r25, 0x0131
 718:	90 93 30 01 	sts	0x0130, r25
  }
  
  if (++usart_rxbuf_begin>=USART_RXBUF_SIZE) {
 71c:	90 91 31 01 	lds	r25, 0x0131
 720:	9f 5f       	subi	r25, 0xFF	; 255
 722:	90 93 31 01 	sts	0x0131, r25
 726:	90 91 31 01 	lds	r25, 0x0131
 72a:	98 30       	cpi	r25, 0x08	; 8
 72c:	10 f0       	brcs	.+4      	; 0x732 <usart_getchar+0x34>
    usart_rxbuf_begin=0;
 72e:	10 92 31 01 	sts	0x0131, r1
  }
  sei();
 732:	78 94       	sei
  return result;
}
 734:	08 95       	ret

00000736 <usart_putchar>:


char usart_putchar(char c) {
  cli();
 736:	f8 94       	cli
  usart_txbuf[usart_txbuf_end] = c;
 738:	e0 91 4a 01 	lds	r30, 0x014A
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	ee 5c       	subi	r30, 0xCE	; 206
 740:	fe 4f       	sbci	r31, 0xFE	; 254
 742:	80 83       	st	Z, r24
  if (++usart_txbuf_end>=USART_TXBUF_SIZE) {
 744:	90 91 4a 01 	lds	r25, 0x014A
 748:	9f 5f       	subi	r25, 0xFF	; 255
 74a:	90 93 4a 01 	sts	0x014A, r25
 74e:	90 91 4a 01 	lds	r25, 0x014A
 752:	90 31       	cpi	r25, 0x10	; 16
 754:	10 f0       	brcs	.+4      	; 0x75a <usart_putchar+0x24>
    usart_txbuf_end=0;
 756:	10 92 4a 01 	sts	0x014A, r1
  }
  if (usart_txbuf_end==usart_txbuf_begin) {
 75a:	20 91 4a 01 	lds	r18, 0x014A
 75e:	90 91 2f 01 	lds	r25, 0x012F
 762:	29 17       	cp	r18, r25
 764:	19 f4       	brne	.+6      	; 0x76c <usart_putchar+0x36>
    usart_txbuf_end=USART_TXBUF_SIZE;
 766:	90 e1       	ldi	r25, 0x10	; 16
 768:	90 93 4a 01 	sts	0x014A, r25
  }
  // reenable transmit register empty interrupt
  UCSRB |= _BV(UDRIE);
 76c:	90 91 c1 00 	lds	r25, 0x00C1
 770:	90 62       	ori	r25, 0x20	; 32
 772:	90 93 c1 00 	sts	0x00C1, r25
  sei();
 776:	78 94       	sei
  return c;
}
 778:	08 95       	ret

0000077a <usart_enable>:
  return c;
}


void usart_enable() {
  UCSRB = _BV(RXCIE) + _BV(UDRIE) + _BV(RXEN) + _BV(TXEN);
 77a:	88 eb       	ldi	r24, 0xB8	; 184
 77c:	80 93 c1 00 	sts	0x00C1, r24
}
 780:	08 95       	ret

00000782 <usart_disable>:


void usart_disable() {
  UCSRB = 0;
 782:	10 92 c1 00 	sts	0x00C1, r1
}
 786:	08 95       	ret

00000788 <__vector_20>:


ISR(USART_RXC_vect) {
 788:	1f 92       	push	r1
 78a:	0f 92       	push	r0
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	0f 92       	push	r0
 790:	0b b6       	in	r0, 0x3b	; 59
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	8f 93       	push	r24
 798:	9f 93       	push	r25
 79a:	ef 93       	push	r30
 79c:	ff 93       	push	r31
  uint8_t c = UDR;
 79e:	80 91 c6 00 	lds	r24, 0x00C6

/*!
 * Liefert true wenn der Empfangspuffer voll ist.
 */
static inline char usart_rxfull() {
  return usart_rxbuf_end==USART_RXBUF_SIZE;
 7a2:	90 91 30 01 	lds	r25, 0x0130
  if (!usart_rxfull()) {
 7a6:	98 30       	cpi	r25, 0x08	; 8
 7a8:	d1 f0       	breq	.+52     	; 0x7de <__vector_20+0x56>
  return result;
}


static char usart_rx_putchar(char c) {
  usart_rxbuf[usart_rxbuf_end] = c;
 7aa:	e0 91 30 01 	lds	r30, 0x0130
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	ee 5b       	subi	r30, 0xBE	; 190
 7b2:	fe 4f       	sbci	r31, 0xFE	; 254
 7b4:	80 83       	st	Z, r24
  if (++usart_rxbuf_end>=USART_RXBUF_SIZE) {
 7b6:	80 91 30 01 	lds	r24, 0x0130
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	80 93 30 01 	sts	0x0130, r24
 7c0:	80 91 30 01 	lds	r24, 0x0130
 7c4:	88 30       	cpi	r24, 0x08	; 8
 7c6:	10 f0       	brcs	.+4      	; 0x7cc <__vector_20+0x44>
    usart_rxbuf_end=0;
 7c8:	10 92 30 01 	sts	0x0130, r1
  }
  if (usart_rxbuf_end==usart_rxbuf_begin) {
 7cc:	90 91 30 01 	lds	r25, 0x0130
 7d0:	80 91 31 01 	lds	r24, 0x0131
 7d4:	98 17       	cp	r25, r24
 7d6:	19 f4       	brne	.+6      	; 0x7de <__vector_20+0x56>
    usart_rxbuf_end=USART_RXBUF_SIZE;
 7d8:	88 e0       	ldi	r24, 0x08	; 8
 7da:	80 93 30 01 	sts	0x0130, r24
ISR(USART_RXC_vect) {
  uint8_t c = UDR;
  if (!usart_rxfull()) {
    usart_rx_putchar(c);
  }
}
 7de:	ff 91       	pop	r31
 7e0:	ef 91       	pop	r30
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	0f 90       	pop	r0
 7e8:	0b be       	out	0x3b, r0	; 59
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <__vector_21>:


ISR(USART_UDRE_vect) {
 7f4:	1f 92       	push	r1
 7f6:	0f 92       	push	r0
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	0f 92       	push	r0
 7fc:	0b b6       	in	r0, 0x3b	; 59
 7fe:	0f 92       	push	r0
 800:	11 24       	eor	r1, r1
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	ef 93       	push	r30
 808:	ff 93       	push	r31

/*!
 * Liefert true wenn der Sendepuffer leer ist.
 */
static inline char usart_txempty() {
  return usart_txbuf_begin==usart_txbuf_end;
 80a:	90 91 2f 01 	lds	r25, 0x012F
 80e:	80 91 4a 01 	lds	r24, 0x014A
  if (!usart_txempty()) {
 812:	98 17       	cp	r25, r24
 814:	e1 f0       	breq	.+56     	; 0x84e <__vector_21+0x5a>
  return c;
}


static char usart_tx_getchar() {
  uint8_t result = usart_txbuf[usart_txbuf_begin];
 816:	e0 91 2f 01 	lds	r30, 0x012F
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	ee 5c       	subi	r30, 0xCE	; 206
 81e:	fe 4f       	sbci	r31, 0xFE	; 254
 820:	90 81       	ld	r25, Z
  if (usart_txbuf_end==USART_TXBUF_SIZE) {
 822:	80 91 4a 01 	lds	r24, 0x014A
 826:	80 31       	cpi	r24, 0x10	; 16
 828:	21 f4       	brne	.+8      	; 0x832 <__vector_21+0x3e>
    usart_txbuf_end=usart_txbuf_begin;
 82a:	80 91 2f 01 	lds	r24, 0x012F
 82e:	80 93 4a 01 	sts	0x014A, r24
  }
  
  if (++usart_txbuf_begin>=USART_TXBUF_SIZE) {
 832:	80 91 2f 01 	lds	r24, 0x012F
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 2f 01 	sts	0x012F, r24
 83c:	80 91 2f 01 	lds	r24, 0x012F
 840:	80 31       	cpi	r24, 0x10	; 16
 842:	10 f0       	brcs	.+4      	; 0x848 <__vector_21+0x54>
    usart_txbuf_begin=0;
 844:	10 92 2f 01 	sts	0x012F, r1
}


ISR(USART_UDRE_vect) {
  if (!usart_txempty()) {
    UDR = usart_tx_getchar();
 848:	90 93 c6 00 	sts	0x00C6, r25
 84c:	05 c0       	rjmp	.+10     	; 0x858 <__vector_21+0x64>
  } else {
    UCSRB &= ~_BV(UDRIE);
 84e:	80 91 c1 00 	lds	r24, 0x00C1
 852:	8f 7d       	andi	r24, 0xDF	; 223
 854:	80 93 c1 00 	sts	0x00C1, r24
  }
}
 858:	ff 91       	pop	r31
 85a:	ef 91       	pop	r30
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	0f 90       	pop	r0
 862:	0b be       	out	0x3b, r0	; 59
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <decode_l>:
#define SPEED 800
//#define SPEED 1023

// #define PRINT_STATE

int8_t decode_l (uint8_t val) {
 86e:	98 2f       	mov	r25, r24
  if (val==0x01) return -1;
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	29 f0       	breq	.+10     	; 0x87e <decode_l+0x10>
 874:	81 e0       	ldi	r24, 0x01	; 1
 876:	92 30       	cpi	r25, 0x02	; 2
 878:	19 f0       	breq	.+6      	; 0x880 <decode_l+0x12>
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	08 95       	ret
 87e:	8f ef       	ldi	r24, 0xFF	; 255
  if (val==0x02) return 1;
  return 0;
}
 880:	08 95       	ret

00000882 <decode_r>:

int8_t decode_r (uint8_t val) {
 882:	98 2f       	mov	r25, r24
  if (val==0x01) return -1;
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	29 f0       	breq	.+10     	; 0x892 <decode_r+0x10>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	92 30       	cpi	r25, 0x02	; 2
 88c:	19 f0       	breq	.+6      	; 0x894 <decode_r+0x12>
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	08 95       	ret
 892:	8f ef       	ldi	r24, 0xFF	; 255
  if (val==0x02) return 1;
  return 0;
}
 894:	08 95       	ret

00000896 <main>:
  usart_putchar(c2);
}

#endif // ifdef PRINT_STATE

int main() {
 896:	cf 92       	push	r12
 898:	df 92       	push	r13
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	df 93       	push	r29
 8a4:	cf 93       	push	r28
 8a6:	0f 92       	push	r0
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
  activate_output_group(IO_LEDS);  // LED bits als Output
 8ac:	84 b1       	in	r24, 0x04	; 4
 8ae:	8f 60       	ori	r24, 0x0F	; 15
 8b0:	84 b9       	out	0x04, r24	; 4
  
  //#ifdef PRINT_STATE
  usart_setbaudrate(9600);
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	95 e2       	ldi	r25, 0x25	; 37
 8b6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <usart_setbaudrate>
  usart_enable();
 8ba:	0e 94 bd 03 	call	0x77a	; 0x77a <usart_enable>
  //#endif
  
  motpwm_init();
 8be:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <motpwm_init>
  odometry_init();
 8c2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <odometry_init>
  motpwm_stop();
 8c6:	0e 94 09 02 	call	0x412	; 0x412 <motpwm_stop>
  analog_init();
 8ca:	0e 94 67 00 	call	0xce	; 0xce <analog_init>
  set_output_group(IO_SENS);       // Pull-ups aktivieren
 8ce:	88 b1       	in	r24, 0x08	; 8
 8d0:	80 6f       	ori	r24, 0xF0	; 240
 8d2:	88 b9       	out	0x08, r24	; 8
  activate_output_bit(IO_LINE_EN);
 8d4:	24 9a       	sbi	0x04, 4	; 4
  

  while(1) {
    sei();
 8d6:	78 94       	sei
    int8_t left = decode_l((PINC & 0x30)>>4);
 8d8:	86 b1       	in	r24, 0x06	; 6
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	80 73       	andi	r24, 0x30	; 48
 8de:	90 70       	andi	r25, 0x00	; 0
 8e0:	04 e0       	ldi	r16, 0x04	; 4
 8e2:	95 95       	asr	r25
 8e4:	87 95       	ror	r24
 8e6:	0a 95       	dec	r16
 8e8:	e1 f7       	brne	.-8      	; 0x8e2 <main+0x4c>
 8ea:	0e 94 37 04 	call	0x86e	; 0x86e <decode_l>
 8ee:	08 2f       	mov	r16, r24
    int8_t right = decode_r((PINC & 0xc0)>>6);
 8f0:	86 b1       	in	r24, 0x06	; 6
 8f2:	82 95       	swap	r24
 8f4:	86 95       	lsr	r24
 8f6:	86 95       	lsr	r24
 8f8:	83 70       	andi	r24, 0x03	; 3
 8fa:	0e 94 41 04 	call	0x882	; 0x882 <decode_r>
 8fe:	0f 5f       	subi	r16, 0xFF	; 255
 900:	03 30       	cpi	r16, 0x03	; 3
 902:	60 f4       	brcc	.+24     	; 0x91c <main+0x86>
 904:	a0 2f       	mov	r26, r16
 906:	bb 27       	eor	r27, r27
 908:	a7 fd       	sbrc	r26, 7
 90a:	b0 95       	com	r27
 90c:	aa 0f       	add	r26, r26
 90e:	bb 1f       	adc	r27, r27
 910:	a0 50       	subi	r26, 0x00	; 0
 912:	bf 4f       	sbci	r27, 0xFF	; 255
 914:	0d 91       	ld	r16, X+
 916:	1c 91       	ld	r17, X
 918:	11 97       	sbiw	r26, 0x01	; 1
 91a:	02 c0       	rjmp	.+4      	; 0x920 <main+0x8a>
 91c:	00 e0       	ldi	r16, 0x00	; 0
 91e:	10 e0       	ldi	r17, 0x00	; 0
 920:	8f 5f       	subi	r24, 0xFF	; 255
 922:	83 30       	cpi	r24, 0x03	; 3
 924:	58 f4       	brcc	.+22     	; 0x93c <main+0xa6>
 926:	e8 2f       	mov	r30, r24
 928:	ff 27       	eor	r31, r31
 92a:	e7 fd       	sbrc	r30, 7
 92c:	f0 95       	com	r31
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	ea 5f       	subi	r30, 0xFA	; 250
 934:	fe 4f       	sbci	r31, 0xFE	; 254
 936:	c0 80       	ld	r12, Z
 938:	d1 80       	ldd	r13, Z+1	; 0x01
 93a:	02 c0       	rjmp	.+4      	; 0x940 <main+0xaa>
 93c:	cc 24       	eor	r12, r12
 93e:	dd 24       	eor	r13, r13
      case -1: speed_r = -SPEED; break;
      case +1: speed_r = +SPEED; break;
      case  0: speed_r =      0; break;
    }
    
    motpwm_setLeft(speed_l);
 940:	c8 01       	movw	r24, r16
 942:	0e 94 1d 02 	call	0x43a	; 0x43a <motpwm_setLeft>
    motpwm_setRight(speed_r);
 946:	c6 01       	movw	r24, r12
 948:	0e 94 57 02 	call	0x4ae	; 0x4ae <motpwm_setRight>

    if ((speed_l==0) && (speed_r==0)) {
 94c:	01 15       	cp	r16, r1
 94e:	11 05       	cpc	r17, r1
 950:	09 f0       	breq	.+2      	; 0x954 <main+0xbe>
 952:	85 c0       	rjmp	.+266    	; 0xa5e <main+0x1c8>
 954:	c1 14       	cp	r12, r1
 956:	d1 04       	cpc	r13, r1
 958:	09 f0       	breq	.+2      	; 0x95c <main+0xc6>
 95a:	81 c0       	rjmp	.+258    	; 0xa5e <main+0x1c8>
 95c:	87 e8       	ldi	r24, 0x87	; 135
 95e:	93 e1       	ldi	r25, 0x13	; 19
 960:	01 97       	sbiw	r24, 0x01	; 1
 962:	f1 f7       	brne	.-4      	; 0x960 <main+0xca>
 964:	00 c0       	rjmp	.+0      	; 0x966 <main+0xd0>
 966:	00 00       	nop
      _delay_ms(1);
      int16_t lval = analog_getValue(ANALOG_L1)-(int16_t)analog_getValue(ANALOG_L0) - 40;
 968:	88 e0       	ldi	r24, 0x08	; 8
 96a:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 96e:	8c 01       	movw	r16, r24
 970:	85 e0       	ldi	r24, 0x05	; 5
 972:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 976:	08 52       	subi	r16, 0x28	; 40
 978:	10 40       	sbci	r17, 0x00	; 0
 97a:	08 1b       	sub	r16, r24
 97c:	19 0b       	sbc	r17, r25
      int16_t cval = (3*(analog_getValue(ANALOG_C1)-(int16_t)analog_getValue(ANALOG_C0)))/4 - 60;
 97e:	89 e0       	ldi	r24, 0x09	; 9
 980:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 984:	7c 01       	movw	r14, r24
 986:	86 e0       	ldi	r24, 0x06	; 6
 988:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 98c:	f7 01       	movw	r30, r14
 98e:	e8 1b       	sub	r30, r24
 990:	f9 0b       	sbc	r31, r25
 992:	cf 01       	movw	r24, r30
 994:	6f 01       	movw	r12, r30
 996:	cc 0c       	add	r12, r12
 998:	dd 1c       	adc	r13, r13
 99a:	c8 0e       	add	r12, r24
 99c:	d9 1e       	adc	r13, r25
 99e:	d6 94       	lsr	r13
 9a0:	c7 94       	ror	r12
 9a2:	d6 94       	lsr	r13
 9a4:	c7 94       	ror	r12
 9a6:	74 ec       	ldi	r23, 0xC4	; 196
 9a8:	e7 2e       	mov	r14, r23
 9aa:	7f ef       	ldi	r23, 0xFF	; 255
 9ac:	f7 2e       	mov	r15, r23
 9ae:	ce 0c       	add	r12, r14
 9b0:	df 1c       	adc	r13, r15
      int16_t rval = analog_getValue(ANALOG_R1)-(int16_t)analog_getValue(ANALOG_R0) - 40;
 9b2:	8a e0       	ldi	r24, 0x0A	; 10
 9b4:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 9b8:	7c 01       	movw	r14, r24
 9ba:	87 e0       	ldi	r24, 0x07	; 7
 9bc:	0e 94 71 00 	call	0xe2	; 0xe2 <analog_getValue>
 9c0:	28 ed       	ldi	r18, 0xD8	; 216
 9c2:	3f ef       	ldi	r19, 0xFF	; 255
 9c4:	e2 0e       	add	r14, r18
 9c6:	f3 1e       	adc	r15, r19
 9c8:	e8 1a       	sub	r14, r24
 9ca:	f9 0a       	sbc	r15, r25
 9cc:	17 ff       	sbrs	r17, 7
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <main+0x13e>
 9d0:	00 e0       	ldi	r16, 0x00	; 0
 9d2:	10 e0       	ldi	r17, 0x00	; 0
 9d4:	a6 01       	movw	r20, r12
 9d6:	d7 fe       	sbrs	r13, 7
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <main+0x148>
 9da:	40 e0       	ldi	r20, 0x00	; 0
 9dc:	50 e0       	ldi	r21, 0x00	; 0
 9de:	f7 fe       	sbrs	r15, 7
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <main+0x150>
 9e2:	ee 24       	eor	r14, r14
 9e4:	ff 24       	eor	r15, r15

      if (lval+lval > rval+cval) rule_l=1;
      if (cval+cval > lval+rval) rule_c=1;
      if (rval+rval > lval+cval) rule_r=1;

      if (lval > 300) rule_l=1;
 9e6:	31 e0       	ldi	r19, 0x01	; 1
 9e8:	0d 32       	cpi	r16, 0x2D	; 45
 9ea:	13 07       	cpc	r17, r19
 9ec:	64 f4       	brge	.+24     	; 0xa06 <main+0x170>

      uint8_t rule_l = 0;
      uint8_t rule_c = 0;
      uint8_t rule_r = 0;

      if (lval+lval > rval+cval) rule_l=1;
 9ee:	98 01       	movw	r18, r16
 9f0:	22 0f       	add	r18, r18
 9f2:	33 1f       	adc	r19, r19
 9f4:	ca 01       	movw	r24, r20
 9f6:	8e 0d       	add	r24, r14
 9f8:	9f 1d       	adc	r25, r15
        usart_putchar(10);
        usart_putchar(13);
      }
	#endif

      uint8_t rule_l = 0;
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	82 17       	cp	r24, r18
 9fe:	93 07       	cpc	r25, r19
 a00:	1c f0       	brlt	.+6      	; 0xa08 <main+0x172>
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	01 c0       	rjmp	.+2      	; 0xa08 <main+0x172>

      if (lval+lval > rval+cval) rule_l=1;
      if (cval+cval > lval+rval) rule_c=1;
      if (rval+rval > lval+cval) rule_r=1;

      if (lval > 300) rule_l=1;
 a06:	61 e0       	ldi	r22, 0x01	; 1
      if (cval > 300) rule_c=1;
      if (rval > 300) rule_r=1;
 a08:	8d e2       	ldi	r24, 0x2D	; 45
 a0a:	e8 16       	cp	r14, r24
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	f8 06       	cpc	r15, r24
 a10:	5c f4       	brge	.+22     	; 0xa28 <main+0x192>
      uint8_t rule_c = 0;
      uint8_t rule_r = 0;

      if (lval+lval > rval+cval) rule_l=1;
      if (cval+cval > lval+rval) rule_c=1;
      if (rval+rval > lval+cval) rule_r=1;
 a12:	c7 01       	movw	r24, r14
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	40 0f       	add	r20, r16
 a1a:	51 1f       	adc	r21, r17
      }
	#endif

      uint8_t rule_l = 0;
      uint8_t rule_c = 0;
      uint8_t rule_r = 0;
 a1c:	21 e0       	ldi	r18, 0x01	; 1
 a1e:	48 17       	cp	r20, r24
 a20:	59 07       	cpc	r21, r25
 a22:	1c f0       	brlt	.+6      	; 0xa2a <main+0x194>
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	01 c0       	rjmp	.+2      	; 0xa2a <main+0x194>
      if (cval+cval > lval+rval) rule_c=1;
      if (rval+rval > lval+cval) rule_r=1;

      if (lval > 300) rule_l=1;
      if (cval > 300) rule_c=1;
      if (rval > 300) rule_r=1;
 a28:	21 e0       	ldi	r18, 0x01	; 1

      if (lval < 100) rule_l=0;
 a2a:	04 36       	cpi	r16, 0x64	; 100
 a2c:	11 05       	cpc	r17, r1
 a2e:	0c f4       	brge	.+2      	; 0xa32 <main+0x19c>
 a30:	60 e0       	ldi	r22, 0x00	; 0
      if (cval < 100) rule_c=0;
      if (rval < 100) rule_r=0;
 a32:	94 e6       	ldi	r25, 0x64	; 100
 a34:	e9 16       	cp	r14, r25
 a36:	f1 04       	cpc	r15, r1
 a38:	0c f4       	brge	.+2      	; 0xa3c <main+0x1a6>
 a3a:	20 e0       	ldi	r18, 0x00	; 0

      led_set(LED_L_RD, rule_l);
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	29 83       	std	Y+1, r18	; 0x01
 a40:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
      led_set(LED_R_RD, rule_r);
 a44:	82 e0       	ldi	r24, 0x02	; 2
 a46:	29 81       	ldd	r18, Y+1	; 0x01
 a48:	62 2f       	mov	r22, r18
 a4a:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>

      led_set(LED_L_YE, (PIND & 0x04));
 a4e:	69 b1       	in	r22, 0x09	; 9
 a50:	64 70       	andi	r22, 0x04	; 4
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
      led_set(LED_R_YE, (PIND & 0x08));
 a58:	69 b1       	in	r22, 0x09	; 9
 a5a:	68 70       	andi	r22, 0x08	; 8
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <main+0x1fe>

    } else {
      led_set(LED_L_RD, (speed_l>0));
 a5e:	61 e0       	ldi	r22, 0x01	; 1
 a60:	10 16       	cp	r1, r16
 a62:	11 06       	cpc	r1, r17
 a64:	0c f0       	brlt	.+2      	; 0xa68 <main+0x1d2>
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
      led_set(LED_R_RD, (speed_r>0));
 a6e:	61 e0       	ldi	r22, 0x01	; 1
 a70:	1c 14       	cp	r1, r12
 a72:	1d 04       	cpc	r1, r13
 a74:	0c f0       	brlt	.+2      	; 0xa78 <main+0x1e2>
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	82 e0       	ldi	r24, 0x02	; 2
 a7a:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
      led_set(LED_L_YE, (speed_l<0));
 a7e:	61 2f       	mov	r22, r17
 a80:	66 1f       	adc	r22, r22
 a82:	66 27       	eor	r22, r22
 a84:	66 1f       	adc	r22, r22
 a86:	80 e0       	ldi	r24, 0x00	; 0
 a88:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
      led_set(LED_R_YE, (speed_r<0));
 a8c:	6d 2d       	mov	r22, r13
 a8e:	66 1f       	adc	r22, r22
 a90:	66 27       	eor	r22, r22
 a92:	66 1f       	adc	r22, r22
 a94:	83 e0       	ldi	r24, 0x03	; 3
 a96:	0e 94 cf 01 	call	0x39e	; 0x39e <led_set>
 a9a:	1d cf       	rjmp	.-454    	; 0x8d6 <main+0x40>

00000a9c <__udivmodhi4>:
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	51 e1       	ldi	r21, 0x11	; 17
 aa2:	07 c0       	rjmp	.+14     	; 0xab2 <__udivmodhi4_ep>

00000aa4 <__udivmodhi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	a6 17       	cp	r26, r22
 aaa:	b7 07       	cpc	r27, r23
 aac:	10 f0       	brcs	.+4      	; 0xab2 <__udivmodhi4_ep>
 aae:	a6 1b       	sub	r26, r22
 ab0:	b7 0b       	sbc	r27, r23

00000ab2 <__udivmodhi4_ep>:
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	5a 95       	dec	r21
 ab8:	a9 f7       	brne	.-22     	; 0xaa4 <__udivmodhi4_loop>
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	bc 01       	movw	r22, r24
 ac0:	cd 01       	movw	r24, r26
 ac2:	08 95       	ret

00000ac4 <__divmodhi4>:
 ac4:	97 fb       	bst	r25, 7
 ac6:	09 2e       	mov	r0, r25
 ac8:	07 26       	eor	r0, r23
 aca:	0a d0       	rcall	.+20     	; 0xae0 <__divmodhi4_neg1>
 acc:	77 fd       	sbrc	r23, 7
 ace:	04 d0       	rcall	.+8      	; 0xad8 <__divmodhi4_neg2>
 ad0:	e5 df       	rcall	.-54     	; 0xa9c <__udivmodhi4>
 ad2:	06 d0       	rcall	.+12     	; 0xae0 <__divmodhi4_neg1>
 ad4:	00 20       	and	r0, r0
 ad6:	1a f4       	brpl	.+6      	; 0xade <__divmodhi4_exit>

00000ad8 <__divmodhi4_neg2>:
 ad8:	70 95       	com	r23
 ada:	61 95       	neg	r22
 adc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ade <__divmodhi4_exit>:
 ade:	08 95       	ret

00000ae0 <__divmodhi4_neg1>:
 ae0:	f6 f7       	brtc	.-4      	; 0xade <__divmodhi4_exit>
 ae2:	90 95       	com	r25
 ae4:	81 95       	neg	r24
 ae6:	9f 4f       	sbci	r25, 0xFF	; 255
 ae8:	08 95       	ret

00000aea <__udivmodsi4>:
 aea:	a1 e2       	ldi	r26, 0x21	; 33
 aec:	1a 2e       	mov	r1, r26
 aee:	aa 1b       	sub	r26, r26
 af0:	bb 1b       	sub	r27, r27
 af2:	fd 01       	movw	r30, r26
 af4:	0d c0       	rjmp	.+26     	; 0xb10 <__udivmodsi4_ep>

00000af6 <__udivmodsi4_loop>:
 af6:	aa 1f       	adc	r26, r26
 af8:	bb 1f       	adc	r27, r27
 afa:	ee 1f       	adc	r30, r30
 afc:	ff 1f       	adc	r31, r31
 afe:	a2 17       	cp	r26, r18
 b00:	b3 07       	cpc	r27, r19
 b02:	e4 07       	cpc	r30, r20
 b04:	f5 07       	cpc	r31, r21
 b06:	20 f0       	brcs	.+8      	; 0xb10 <__udivmodsi4_ep>
 b08:	a2 1b       	sub	r26, r18
 b0a:	b3 0b       	sbc	r27, r19
 b0c:	e4 0b       	sbc	r30, r20
 b0e:	f5 0b       	sbc	r31, r21

00000b10 <__udivmodsi4_ep>:
 b10:	66 1f       	adc	r22, r22
 b12:	77 1f       	adc	r23, r23
 b14:	88 1f       	adc	r24, r24
 b16:	99 1f       	adc	r25, r25
 b18:	1a 94       	dec	r1
 b1a:	69 f7       	brne	.-38     	; 0xaf6 <__udivmodsi4_loop>
 b1c:	60 95       	com	r22
 b1e:	70 95       	com	r23
 b20:	80 95       	com	r24
 b22:	90 95       	com	r25
 b24:	9b 01       	movw	r18, r22
 b26:	ac 01       	movw	r20, r24
 b28:	bd 01       	movw	r22, r26
 b2a:	cf 01       	movw	r24, r30
 b2c:	08 95       	ret

00000b2e <_exit>:
 b2e:	f8 94       	cli

00000b30 <__stop_program>:
 b30:	ff cf       	rjmp	.-2      	; 0xb30 <__stop_program>
