
Main-NIBObee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  000013ce  00001462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000168  00800226  00800226  00001588  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  00001ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ad2  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002a26  00000000  00000000  00002a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009c4  00000000  00000000  0000544b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b1e  00000000  00000000  00005e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  00009930  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f4f  00000000  00000000  00009ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001078  00000000  00000000  0000adef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000481fb  00000000  00000000  0000be67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000459  00000000  00000000  00054062  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000208  00000000  00000000  000544bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 07 04 	jmp	0x80e	; 0x80e <__vector_26>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_32>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	c0 e0       	ldi	r28, 0x00	; 0
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ec       	ldi	r30, 0xCE	; 206
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 38       	cpi	r26, 0x8E	; 142
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ports_m1284P>

000000ca <init_nibobee_leds_kernel_init>:
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
}
KERNEL_INIT(init_nibobee_leds)
      ca:	0e 94 2b 02 	call	0x456	; 0x456 <init_nibobee_leds>

000000ce <init_nibobee_buttons_kernel_init>:
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
}
KERNEL_INIT(init_nibobee_buttons)
      ce:	0e 94 97 02 	call	0x52e	; 0x52e <init_nibobee_buttons>

000000d2 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      d2:	0e 94 cc 02 	call	0x598	; 0x598 <init_timer_m1284P>

000000d6 <init_nibobee_motors_kernel_init>:

void init_nibobee_motors() {
	INIT_MOTOR(LeftMotor, MOTOR_NORMAL, PinD6, Timer1A)
	INIT_MOTOR(RightMotor, MOTOR_NORMAL, PinD7, Timer1B)
}
KERNEL_INIT(init_nibobee_motors)
      d6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <init_nibobee_motors>

000000da <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      da:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <init_twi>

000000de <init_timer_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 2500);
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_timer)
      de:	0e 94 48 05 	call	0xa90	; 0xa90 <init_timer>

000000e2 <init_kernel_kernel_init>:
	// __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
	start_timer();
}
KERNEL_INIT(init_kernel)
      e2:	0e 94 a2 05 	call	0xb44	; 0xb44 <init_kernel>
      e6:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
      ea:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <twi_stop>:
#define twi_send(data) TWDR = data; twi_continue()
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
      f2:	85 ed       	ldi	r24, 0xD5	; 213
      f4:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
      f8:	80 91 18 01 	lds	r24, 0x0118
      fc:	90 91 19 01 	lds	r25, 0x0119
     100:	a0 91 1a 01 	lds	r26, 0x011A
     104:	b0 91 1b 01 	lds	r27, 0x011B
     108:	80 93 1d 03 	sts	0x031D, r24
     10c:	90 93 1e 03 	sts	0x031E, r25
     110:	a0 93 1f 03 	sts	0x031F, r26
     114:	b0 93 20 03 	sts	0x0320, r27
	#else
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
     118:	10 92 22 03 	sts	0x0322, r1
     11c:	10 92 21 03 	sts	0x0321, r1
}
     120:	08 95       	ret

00000122 <twi_end>:
	}
}

static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
     122:	85 ec       	ldi	r24, 0xC5	; 197
     124:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     128:	80 91 18 01 	lds	r24, 0x0118
     12c:	90 91 19 01 	lds	r25, 0x0119
     130:	a0 91 1a 01 	lds	r26, 0x011A
     134:	b0 91 1b 01 	lds	r27, 0x011B
     138:	80 93 1d 03 	sts	0x031D, r24
     13c:	90 93 1e 03 	sts	0x031E, r25
     140:	a0 93 1f 03 	sts	0x031F, r26
     144:	b0 93 20 03 	sts	0x0320, r27
	#else
		twi_base;
	#endif
	twi_running = FALSE;
     148:	10 92 22 03 	sts	0x0322, r1
     14c:	10 92 21 03 	sts	0x0321, r1
}
     150:	08 95       	ret

00000152 <twi_receive_byte>:
	next_twi_operation();
}

static inline void twi_receive_byte() {
	// received data-byte. Read into receive-twi_buffer, acknowledge, if more bytes expected.
	twi_buffer.data[alreadyHandled++] = TWDR;
     152:	20 91 ea 02 	lds	r18, 0x02EA
     156:	30 91 eb 02 	lds	r19, 0x02EB
     15a:	80 91 bb 00 	lds	r24, 0x00BB
     15e:	e0 91 1d 03 	lds	r30, 0x031D
     162:	f0 91 1e 03 	lds	r31, 0x031E
     166:	e2 0f       	add	r30, r18
     168:	f3 1f       	adc	r31, r19
     16a:	80 83       	st	Z, r24
     16c:	2f 5f       	subi	r18, 0xFF	; 255
     16e:	3f 4f       	sbci	r19, 0xFF	; 255
     170:	30 93 eb 02 	sts	0x02EB, r19
     174:	20 93 ea 02 	sts	0x02EA, r18
	if (alreadyHandled < twi_buffer.size - 1) {
     178:	80 91 1f 03 	lds	r24, 0x031F
     17c:	90 91 20 03 	lds	r25, 0x0320
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	28 17       	cp	r18, r24
     184:	39 07       	cpc	r19, r25
     186:	10 f4       	brcc	.+4      	; 0x18c <twi_receive_byte+0x3a>
		twi_ack(); // Still more than one byte to go.
     188:	85 ec       	ldi	r24, 0xC5	; 197
     18a:	01 c0       	rjmp	.+2      	; 0x18e <twi_receive_byte+0x3c>
	} else {
		twi_continue(); // Want to receive one more byte. Next byte will get NOT ACK.
     18c:	85 e8       	ldi	r24, 0x85	; 133
     18e:	80 93 bc 00 	sts	0x00BC, r24
     192:	08 95       	ret

00000194 <twi_init_receive>:
	}
}

static inline void twi_init_receive() {
	if (twi_buffer.size > 0) {
     194:	80 91 1f 03 	lds	r24, 0x031F
     198:	90 91 20 03 	lds	r25, 0x0320
     19c:	00 97       	sbiw	r24, 0x00	; 0
     19e:	11 f0       	breq	.+4      	; 0x1a4 <twi_init_receive+0x10>
		twi_ack(); // Acknowledge, if want to receive at least one byte
     1a0:	85 ec       	ldi	r24, 0xC5	; 197
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <twi_init_receive+0x12>
	} else {
		twi_continue();
     1a4:	85 e8       	ldi	r24, 0x85	; 133
     1a6:	80 93 bc 00 	sts	0x00BC, r24
     1aa:	08 95       	ret

000001ac <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     1ac:	84 b7       	in	r24, 0x34	; 52
     1ae:	80 93 26 02 	sts	0x0226, r24
	MCUSR = 0;
     1b2:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     1b4:	88 e1       	ldi	r24, 0x18	; 24
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	80 93 60 00 	sts	0x0060, r24
     1be:	10 92 60 00 	sts	0x0060, r1
     1c2:	0f be       	out	0x3f, r0	; 63
	#endif
}
     1c4:	08 95       	ret

000001c6 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     1c6:	80 91 26 02 	lds	r24, 0x0226
     1ca:	08 95       	ret

000001cc <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1cc:	af e0       	ldi	r26, 0x0F	; 15
     1ce:	b3 e0       	ldi	r27, 0x03	; 3
     1d0:	ef e0       	ldi	r30, 0x0F	; 15
     1d2:	f2 e0       	ldi	r31, 0x02	; 2
     1d4:	86 e0       	ldi	r24, 0x06	; 6
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <init_ports_m1284P+0xa>
     1de:	ac e0       	ldi	r26, 0x0C	; 12
     1e0:	b3 e0       	ldi	r27, 0x03	; 3
     1e2:	ec e0       	ldi	r30, 0x0C	; 12
     1e4:	f2 e0       	ldi	r31, 0x02	; 2
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	01 90       	ld	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	81 50       	subi	r24, 0x01	; 1
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <init_ports_m1284P+0x1c>
     1f0:	a2 e8       	ldi	r26, 0x82	; 130
     1f2:	b3 e0       	ldi	r27, 0x03	; 3
     1f4:	e9 e0       	ldi	r30, 0x09	; 9
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	83 e0       	ldi	r24, 0x03	; 3
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	81 50       	subi	r24, 0x01	; 1
     200:	e1 f7       	brne	.-8      	; 0x1fa <init_ports_m1284P+0x2e>
     202:	a1 ee       	ldi	r26, 0xE1	; 225
     204:	b2 e0       	ldi	r27, 0x02	; 2
     206:	e6 e0       	ldi	r30, 0x06	; 6
     208:	f2 e0       	ldi	r31, 0x02	; 2
     20a:	83 e0       	ldi	r24, 0x03	; 3
     20c:	01 90       	ld	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	81 50       	subi	r24, 0x01	; 1
     212:	e1 f7       	brne	.-8      	; 0x20c <init_ports_m1284P+0x40>
     214:	a7 ef       	ldi	r26, 0xF7	; 247
     216:	b2 e0       	ldi	r27, 0x02	; 2
     218:	e3 e0       	ldi	r30, 0x03	; 3
     21a:	f2 e0       	ldi	r31, 0x02	; 2
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	01 90       	ld	r0, Z+
     220:	0d 92       	st	X+, r0
     222:	81 50       	subi	r24, 0x01	; 1
     224:	e1 f7       	brne	.-8      	; 0x21e <init_ports_m1284P+0x52>
     226:	a8 e6       	ldi	r26, 0x68	; 104
     228:	b2 e0       	ldi	r27, 0x02	; 2
     22a:	e0 e0       	ldi	r30, 0x00	; 0
     22c:	f2 e0       	ldi	r31, 0x02	; 2
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	01 90       	ld	r0, Z+
     232:	0d 92       	st	X+, r0
     234:	81 50       	subi	r24, 0x01	; 1
     236:	e1 f7       	brne	.-8      	; 0x230 <init_ports_m1284P+0x64>
     238:	a9 ed       	ldi	r26, 0xD9	; 217
     23a:	b2 e0       	ldi	r27, 0x02	; 2
     23c:	ed ef       	ldi	r30, 0xFD	; 253
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	01 90       	ld	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	81 50       	subi	r24, 0x01	; 1
     248:	e1 f7       	brne	.-8      	; 0x242 <init_ports_m1284P+0x76>
     24a:	a0 e6       	ldi	r26, 0x60	; 96
     24c:	b3 e0       	ldi	r27, 0x03	; 3
     24e:	ea ef       	ldi	r30, 0xFA	; 250
     250:	f1 e0       	ldi	r31, 0x01	; 1
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	81 50       	subi	r24, 0x01	; 1
     25a:	e1 f7       	brne	.-8      	; 0x254 <init_ports_m1284P+0x88>
     25c:	aa e1       	ldi	r26, 0x1A	; 26
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	e7 ef       	ldi	r30, 0xF7	; 247
     262:	f1 e0       	ldi	r31, 0x01	; 1
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	01 90       	ld	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	81 50       	subi	r24, 0x01	; 1
     26c:	e1 f7       	brne	.-8      	; 0x266 <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     26e:	a8 e8       	ldi	r26, 0x88	; 136
     270:	b3 e0       	ldi	r27, 0x03	; 3
     272:	e1 ef       	ldi	r30, 0xF1	; 241
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	86 e0       	ldi	r24, 0x06	; 6
     278:	01 90       	ld	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	81 50       	subi	r24, 0x01	; 1
     27e:	e1 f7       	brne	.-8      	; 0x278 <init_ports_m1284P+0xac>
     280:	a0 e0       	ldi	r26, 0x00	; 0
     282:	b3 e0       	ldi	r27, 0x03	; 3
     284:	ee ee       	ldi	r30, 0xEE	; 238
     286:	f1 e0       	ldi	r31, 0x01	; 1
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	01 90       	ld	r0, Z+
     28c:	0d 92       	st	X+, r0
     28e:	81 50       	subi	r24, 0x01	; 1
     290:	e1 f7       	brne	.-8      	; 0x28a <init_ports_m1284P+0xbe>
     292:	a5 e8       	ldi	r26, 0x85	; 133
     294:	b3 e0       	ldi	r27, 0x03	; 3
     296:	eb ee       	ldi	r30, 0xEB	; 235
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	01 90       	ld	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	81 50       	subi	r24, 0x01	; 1
     2a2:	e1 f7       	brne	.-8      	; 0x29c <init_ports_m1284P+0xd0>
     2a4:	a2 e4       	ldi	r26, 0x42	; 66
     2a6:	b2 e0       	ldi	r27, 0x02	; 2
     2a8:	e8 ee       	ldi	r30, 0xE8	; 232
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	01 90       	ld	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <init_ports_m1284P+0xe2>
     2b6:	a5 e1       	ldi	r26, 0x15	; 21
     2b8:	b3 e0       	ldi	r27, 0x03	; 3
     2ba:	e5 ee       	ldi	r30, 0xE5	; 229
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	83 e0       	ldi	r24, 0x03	; 3
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <init_ports_m1284P+0xf4>
     2c8:	af e2       	ldi	r26, 0x2F	; 47
     2ca:	b3 e0       	ldi	r27, 0x03	; 3
     2cc:	e2 ee       	ldi	r30, 0xE2	; 226
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	01 90       	ld	r0, Z+
     2d4:	0d 92       	st	X+, r0
     2d6:	81 50       	subi	r24, 0x01	; 1
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <init_ports_m1284P+0x106>
     2da:	a6 ec       	ldi	r26, 0xC6	; 198
     2dc:	b2 e0       	ldi	r27, 0x02	; 2
     2de:	ef ed       	ldi	r30, 0xDF	; 223
     2e0:	f1 e0       	ldi	r31, 0x01	; 1
     2e2:	83 e0       	ldi	r24, 0x03	; 3
     2e4:	01 90       	ld	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <init_ports_m1284P+0x118>
     2ec:	a5 e4       	ldi	r26, 0x45	; 69
     2ee:	b2 e0       	ldi	r27, 0x02	; 2
     2f0:	ec ed       	ldi	r30, 0xDC	; 220
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	01 90       	ld	r0, Z+
     2f8:	0d 92       	st	X+, r0
     2fa:	81 50       	subi	r24, 0x01	; 1
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <init_ports_m1284P+0x12a>
     2fe:	a3 ec       	ldi	r26, 0xC3	; 195
     300:	b2 e0       	ldi	r27, 0x02	; 2
     302:	e9 ed       	ldi	r30, 0xD9	; 217
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	01 90       	ld	r0, Z+
     30a:	0d 92       	st	X+, r0
     30c:	81 50       	subi	r24, 0x01	; 1
     30e:	e1 f7       	brne	.-8      	; 0x308 <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     310:	a3 e0       	ldi	r26, 0x03	; 3
     312:	b3 e0       	ldi	r27, 0x03	; 3
     314:	e3 ed       	ldi	r30, 0xD3	; 211
     316:	f1 e0       	ldi	r31, 0x01	; 1
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	01 90       	ld	r0, Z+
     31c:	0d 92       	st	X+, r0
     31e:	81 50       	subi	r24, 0x01	; 1
     320:	e1 f7       	brne	.-8      	; 0x31a <init_ports_m1284P+0x14e>
     322:	ad e3       	ldi	r26, 0x3D	; 61
     324:	b3 e0       	ldi	r27, 0x03	; 3
     326:	e0 ed       	ldi	r30, 0xD0	; 208
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	01 90       	ld	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	81 50       	subi	r24, 0x01	; 1
     332:	e1 f7       	brne	.-8      	; 0x32c <init_ports_m1284P+0x160>
     334:	ad ef       	ldi	r26, 0xFD	; 253
     336:	b2 e0       	ldi	r27, 0x02	; 2
     338:	ed ec       	ldi	r30, 0xCD	; 205
     33a:	f1 e0       	ldi	r31, 0x01	; 1
     33c:	83 e0       	ldi	r24, 0x03	; 3
     33e:	01 90       	ld	r0, Z+
     340:	0d 92       	st	X+, r0
     342:	81 50       	subi	r24, 0x01	; 1
     344:	e1 f7       	brne	.-8      	; 0x33e <init_ports_m1284P+0x172>
     346:	a7 e3       	ldi	r26, 0x37	; 55
     348:	b3 e0       	ldi	r27, 0x03	; 3
     34a:	ea ec       	ldi	r30, 0xCA	; 202
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	01 90       	ld	r0, Z+
     352:	0d 92       	st	X+, r0
     354:	81 50       	subi	r24, 0x01	; 1
     356:	e1 f7       	brne	.-8      	; 0x350 <init_ports_m1284P+0x184>
     358:	a9 eb       	ldi	r26, 0xB9	; 185
     35a:	b2 e0       	ldi	r27, 0x02	; 2
     35c:	e7 ec       	ldi	r30, 0xC7	; 199
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	01 90       	ld	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	81 50       	subi	r24, 0x01	; 1
     368:	e1 f7       	brne	.-8      	; 0x362 <init_ports_m1284P+0x196>
     36a:	a5 e6       	ldi	r26, 0x65	; 101
     36c:	b2 e0       	ldi	r27, 0x02	; 2
     36e:	e4 ec       	ldi	r30, 0xC4	; 196
     370:	f1 e0       	ldi	r31, 0x01	; 1
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	01 90       	ld	r0, Z+
     376:	0d 92       	st	X+, r0
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	e1 f7       	brne	.-8      	; 0x374 <init_ports_m1284P+0x1a8>
     37c:	aa ef       	ldi	r26, 0xFA	; 250
     37e:	b2 e0       	ldi	r27, 0x02	; 2
     380:	e1 ec       	ldi	r30, 0xC1	; 193
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	81 50       	subi	r24, 0x01	; 1
     38c:	e1 f7       	brne	.-8      	; 0x386 <init_ports_m1284P+0x1ba>
     38e:	ac ee       	ldi	r26, 0xEC	; 236
     390:	b2 e0       	ldi	r27, 0x02	; 2
     392:	ee eb       	ldi	r30, 0xBE	; 190
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	83 e0       	ldi	r24, 0x03	; 3
     398:	01 90       	ld	r0, Z+
     39a:	0d 92       	st	X+, r0
     39c:	81 50       	subi	r24, 0x01	; 1
     39e:	e1 f7       	brne	.-8      	; 0x398 <init_ports_m1284P+0x1cc>
     3a0:	a8 e3       	ldi	r26, 0x38	; 56
     3a2:	b2 e0       	ldi	r27, 0x02	; 2
     3a4:	eb eb       	ldi	r30, 0xBB	; 187
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	83 e0       	ldi	r24, 0x03	; 3
     3aa:	01 90       	ld	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     3b2:	a1 ed       	ldi	r26, 0xD1	; 209
     3b4:	b2 e0       	ldi	r27, 0x02	; 2
     3b6:	e5 eb       	ldi	r30, 0xB5	; 181
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	86 e0       	ldi	r24, 0x06	; 6
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	81 50       	subi	r24, 0x01	; 1
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <init_ports_m1284P+0x1f0>
     3c4:	a6 e5       	ldi	r26, 0x56	; 86
     3c6:	b2 e0       	ldi	r27, 0x02	; 2
     3c8:	e2 eb       	ldi	r30, 0xB2	; 178
     3ca:	f1 e0       	ldi	r31, 0x01	; 1
     3cc:	83 e0       	ldi	r24, 0x03	; 3
     3ce:	01 90       	ld	r0, Z+
     3d0:	0d 92       	st	X+, r0
     3d2:	81 50       	subi	r24, 0x01	; 1
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <init_ports_m1284P+0x202>
     3d6:	ae e6       	ldi	r26, 0x6E	; 110
     3d8:	b2 e0       	ldi	r27, 0x02	; 2
     3da:	ef ea       	ldi	r30, 0xAF	; 175
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	01 90       	ld	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	81 50       	subi	r24, 0x01	; 1
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <init_ports_m1284P+0x214>
     3e8:	a3 e5       	ldi	r26, 0x53	; 83
     3ea:	b2 e0       	ldi	r27, 0x02	; 2
     3ec:	ec ea       	ldi	r30, 0xAC	; 172
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	01 90       	ld	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	81 50       	subi	r24, 0x01	; 1
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <init_ports_m1284P+0x226>
     3fa:	a4 ee       	ldi	r26, 0xE4	; 228
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	e9 ea       	ldi	r30, 0xA9	; 169
     400:	f1 e0       	ldi	r31, 0x01	; 1
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	81 50       	subi	r24, 0x01	; 1
     40a:	e1 f7       	brne	.-8      	; 0x404 <init_ports_m1284P+0x238>
     40c:	a5 e5       	ldi	r26, 0x55	; 85
     40e:	b3 e0       	ldi	r27, 0x03	; 3
     410:	e6 ea       	ldi	r30, 0xA6	; 166
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	81 50       	subi	r24, 0x01	; 1
     41c:	e1 f7       	brne	.-8      	; 0x416 <init_ports_m1284P+0x24a>
     41e:	aa e3       	ldi	r26, 0x3A	; 58
     420:	b3 e0       	ldi	r27, 0x03	; 3
     422:	e3 ea       	ldi	r30, 0xA3	; 163
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	01 90       	ld	r0, Z+
     42a:	0d 92       	st	X+, r0
     42c:	81 50       	subi	r24, 0x01	; 1
     42e:	e1 f7       	brne	.-8      	; 0x428 <init_ports_m1284P+0x25c>
     430:	af e7       	ldi	r26, 0x7F	; 127
     432:	b3 e0       	ldi	r27, 0x03	; 3
     434:	e0 ea       	ldi	r30, 0xA0	; 160
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	01 90       	ld	r0, Z+
     43c:	0d 92       	st	X+, r0
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	e1 f7       	brne	.-8      	; 0x43a <init_ports_m1284P+0x26e>
     442:	a0 e4       	ldi	r26, 0x40	; 64
     444:	b3 e0       	ldi	r27, 0x03	; 3
     446:	ed e9       	ldi	r30, 0x9D	; 157
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	01 90       	ld	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	81 50       	subi	r24, 0x01	; 1
     452:	e1 f7       	brne	.-8      	; 0x44c <init_ports_m1284P+0x280>
}
     454:	08 95       	ret

00000456 <init_nibobee_leds>:
PLed rightLedsArray[] = { &RightYellow, &RightRed };
PLed leftLedsArray[] = { &LeftYellow, &LeftRed };
PLed allLedsArray[] = { &LeftYellow, &LeftRed, &RightRed, &RightYellow };

void init_nibobee_leds() {
	INIT_LED(LeftYellow, PinB0)
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	90 93 2e 02 	sts	0x022E, r25
     45e:	80 93 2d 02 	sts	0x022D, r24

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     462:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
	INIT_LED(LeftRed, PinB1)
     466:	85 e8       	ldi	r24, 0x85	; 133
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	90 93 2c 02 	sts	0x022C, r25
     46e:	80 93 2b 02 	sts	0x022B, r24
     472:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
	INIT_LED(RightRed, PinB2)
     476:	82 e4       	ldi	r24, 0x42	; 66
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	90 93 d8 02 	sts	0x02D8, r25
     47e:	80 93 d7 02 	sts	0x02D7, r24
     482:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
	INIT_LED(RightYellow, PinB3)
     486:	85 e1       	ldi	r24, 0x15	; 21
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	90 93 44 03 	sts	0x0344, r25
     48e:	80 93 43 03 	sts	0x0343, r24
     492:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 2)
     496:	ab e6       	ldi	r26, 0x6B	; 107
     498:	b2 e0       	ldi	r27, 0x02	; 2
     49a:	ea e9       	ldi	r30, 0x9A	; 154
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <init_nibobee_leds+0x4a>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     4a8:	a0 e5       	ldi	r26, 0x50	; 80
     4aa:	b2 e0       	ldi	r27, 0x02	; 2
     4ac:	e7 e9       	ldi	r30, 0x97	; 151
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	01 90       	ld	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <init_nibobee_leds+0x5c>
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
     4ba:	a2 e6       	ldi	r26, 0x62	; 98
     4bc:	b2 e0       	ldi	r27, 0x02	; 2
     4be:	e4 e9       	ldi	r30, 0x94	; 148
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <init_nibobee_leds+0x6e>
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
     4cc:	ac e2       	ldi	r26, 0x2C	; 44
     4ce:	b3 e0       	ldi	r27, 0x03	; 3
     4d0:	e1 e9       	ldi	r30, 0x91	; 145
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	01 90       	ld	r0, Z+
     4d8:	0d 92       	st	X+, r0
     4da:	81 50       	subi	r24, 0x01	; 1
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <init_nibobee_leds+0x80>
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
     4de:	a9 e0       	ldi	r26, 0x09	; 9
     4e0:	b3 e0       	ldi	r27, 0x03	; 3
     4e2:	ee e8       	ldi	r30, 0x8E	; 142
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	01 90       	ld	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	81 50       	subi	r24, 0x01	; 1
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <init_nibobee_leds+0x92>
}
     4f0:	08 95       	ret

000004f2 <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	0e 94 ee 06 	call	0xddc	; 0xddc <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     500:	88 81       	ld	r24, Y
     502:	82 ff       	sbrs	r24, 2
     504:	04 c0       	rjmp	.+8      	; 0x50e <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	9a 81       	ldd	r25, Y+2	; 0x02
     50a:	0e 94 0a 07 	call	0xe14	; 0xe14 <setPinOne>
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	08 95       	ret

00000514 <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
	initButton(button->button);
     51a:	88 81       	ld	r24, Y
     51c:	99 81       	ldd	r25, Y+1	; 0x01
     51e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <initButton>
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	0e 94 b8 05 	call	0xb70	; 0xb70 <enablePinChangeInterrupt>
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <init_nibobee_buttons>:
#include <kernel/kernel_init.h>
#include <kernel/devices/button.kernel.h>
#include "nibobee_button.h"

void init_nibobee_buttons() {
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     52e:	ac e5       	ldi	r26, 0x5C	; 92
     530:	b2 e0       	ldi	r27, 0x02	; 2
     532:	eb e8       	ldi	r30, 0x8B	; 139
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	e1 f7       	brne	.-8      	; 0x538 <init_nibobee_buttons+0xa>
     540:	8c e5       	ldi	r24, 0x5C	; 92
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 79 02 	call	0x4f2	; 0x4f2 <initButton>
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     548:	a9 e5       	ldi	r26, 0x59	; 89
     54a:	b2 e0       	ldi	r27, 0x02	; 2
     54c:	e8 e8       	ldi	r30, 0x88	; 136
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	01 90       	ld	r0, Z+
     554:	0d 92       	st	X+, r0
     556:	81 50       	subi	r24, 0x01	; 1
     558:	e1 f7       	brne	.-8      	; 0x552 <init_nibobee_buttons+0x24>
     55a:	89 e5       	ldi	r24, 0x59	; 89
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <initButton>
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     562:	af e5       	ldi	r26, 0x5F	; 95
     564:	b2 e0       	ldi	r27, 0x02	; 2
     566:	e5 e8       	ldi	r30, 0x85	; 133
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	81 50       	subi	r24, 0x01	; 1
     572:	e1 f7       	brne	.-8      	; 0x56c <init_nibobee_buttons+0x3e>
     574:	8f e5       	ldi	r24, 0x5F	; 95
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	0e 94 79 02 	call	0x4f2	; 0x4f2 <initButton>
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     57c:	a7 ee       	ldi	r26, 0xE7	; 231
     57e:	b2 e0       	ldi	r27, 0x02	; 2
     580:	e2 e8       	ldi	r30, 0x82	; 130
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	01 90       	ld	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	e1 f7       	brne	.-8      	; 0x586 <init_nibobee_buttons+0x58>
     58e:	87 ee       	ldi	r24, 0xE7	; 231
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	0e 94 79 02 	call	0x4f2	; 0x4f2 <initButton>
}
     596:	08 95       	ret

00000598 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     598:	ac eb       	ldi	r26, 0xBC	; 188
     59a:	b2 e0       	ldi	r27, 0x02	; 2
     59c:	eb e7       	ldi	r30, 0x7B	; 123
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	87 e0       	ldi	r24, 0x07	; 7
     5a2:	01 90       	ld	r0, Z+
     5a4:	0d 92       	st	X+, r0
     5a6:	81 50       	subi	r24, 0x01	; 1
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     5aa:	a3 e6       	ldi	r26, 0x63	; 99
     5ac:	b3 e0       	ldi	r27, 0x03	; 3
     5ae:	e4 e7       	ldi	r30, 0x74	; 116
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	87 e0       	ldi	r24, 0x07	; 7
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	81 50       	subi	r24, 0x01	; 1
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     5bc:	a3 e2       	ldi	r26, 0x23	; 35
     5be:	b3 e0       	ldi	r27, 0x03	; 3
     5c0:	ed e6       	ldi	r30, 0x6D	; 109
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	87 e0       	ldi	r24, 0x07	; 7
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	81 50       	subi	r24, 0x01	; 1
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     5ce:	ab e3       	ldi	r26, 0x3B	; 59
     5d0:	b2 e0       	ldi	r27, 0x02	; 2
     5d2:	e6 e6       	ldi	r30, 0x66	; 102
     5d4:	f1 e0       	ldi	r31, 0x01	; 1
     5d6:	87 e0       	ldi	r24, 0x07	; 7
     5d8:	01 90       	ld	r0, Z+
     5da:	0d 92       	st	X+, r0
     5dc:	81 50       	subi	r24, 0x01	; 1
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     5e0:	af ee       	ldi	r26, 0xEF	; 239
     5e2:	b2 e0       	ldi	r27, 0x02	; 2
     5e4:	ee e5       	ldi	r30, 0x5E	; 94
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	88 e0       	ldi	r24, 0x08	; 8
     5ea:	01 90       	ld	r0, Z+
     5ec:	0d 92       	st	X+, r0
     5ee:	81 50       	subi	r24, 0x01	; 1
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     5f2:	a8 e5       	ldi	r26, 0x58	; 88
     5f4:	b3 e0       	ldi	r27, 0x03	; 3
     5f6:	e6 e5       	ldi	r30, 0x56	; 86
     5f8:	f1 e0       	ldi	r31, 0x01	; 1
     5fa:	88 e0       	ldi	r24, 0x08	; 8
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	81 50       	subi	r24, 0x01	; 1
     602:	e1 f7       	brne	.-8      	; 0x5fc <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     604:	a8 e4       	ldi	r26, 0x48	; 72
     606:	b2 e0       	ldi	r27, 0x02	; 2
     608:	ee e4       	ldi	r30, 0x4E	; 78
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	88 e0       	ldi	r24, 0x08	; 8
     60e:	01 90       	ld	r0, Z+
     610:	0d 92       	st	X+, r0
     612:	81 50       	subi	r24, 0x01	; 1
     614:	e1 f7       	brne	.-8      	; 0x60e <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     616:	ad e4       	ldi	r26, 0x4D	; 77
     618:	b3 e0       	ldi	r27, 0x03	; 3
     61a:	e6 e4       	ldi	r30, 0x46	; 70
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	81 50       	subi	r24, 0x01	; 1
     626:	e1 f7       	brne	.-8      	; 0x620 <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     628:	a9 ec       	ldi	r26, 0xC9	; 201
     62a:	b2 e0       	ldi	r27, 0x02	; 2
     62c:	ee e3       	ldi	r30, 0x3E	; 62
     62e:	f1 e0       	ldi	r31, 0x01	; 1
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	01 90       	ld	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	81 50       	subi	r24, 0x01	; 1
     638:	e1 f7       	brne	.-8      	; 0x632 <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     63a:	a5 e4       	ldi	r26, 0x45	; 69
     63c:	b3 e0       	ldi	r27, 0x03	; 3
     63e:	e6 e3       	ldi	r30, 0x36	; 54
     640:	f1 e0       	ldi	r31, 0x01	; 1
     642:	88 e0       	ldi	r24, 0x08	; 8
     644:	01 90       	ld	r0, Z+
     646:	0d 92       	st	X+, r0
     648:	81 50       	subi	r24, 0x01	; 1
     64a:	e1 f7       	brne	.-8      	; 0x644 <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     64c:	a1 e7       	ldi	r26, 0x71	; 113
     64e:	b2 e0       	ldi	r27, 0x02	; 2
     650:	ee e2       	ldi	r30, 0x2E	; 46
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	88 e0       	ldi	r24, 0x08	; 8
     656:	01 90       	ld	r0, Z+
     658:	0d 92       	st	X+, r0
     65a:	81 50       	subi	r24, 0x01	; 1
     65c:	e1 f7       	brne	.-8      	; 0x656 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     65e:	af e2       	ldi	r26, 0x2F	; 47
     660:	b2 e0       	ldi	r27, 0x02	; 2
     662:	e6 e2       	ldi	r30, 0x26	; 38
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	88 e0       	ldi	r24, 0x08	; 8
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	81 50       	subi	r24, 0x01	; 1
     66e:	e1 f7       	brne	.-8      	; 0x668 <init_timer_m1284P+0xd0>
}
     670:	08 95       	ret

00000672 <initMotor>:

#include "../kernel_init.h"
#include "motor.h"

// This must be called from another init-routine, after the motors have been initialized.
void initMotor(PMotor motor) {
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
	setTimerCompareValue(motor->pwmTimer, 0);
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	9c 81       	ldd	r25, Y+4	; 0x04
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	0e 94 a0 08 	call	0x1140	; 0x1140 <setTimerCompareValue>
	setPinOutput(motor->direction);
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     69c:	7e 01       	movw	r14, r28
     69e:	9f 2d       	mov	r25, r15
     6a0:	0e 94 39 03 	call	0x672	; 0x672 <initMotor>
	setPinOutput(motor->direction2);
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	9e 81       	ldd	r25, Y+6	; 0x06
     6a8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
	stopMotor((PMotor) motor); // For the sake of setting both direction pins to zero. Not necessary for 1-pin-motors.
     6ac:	ce 01       	movw	r24, r28
     6ae:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <stopMotor>
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <init_nibobee_motors>:
#include <kernel/devices/timer_m1284P.kernel.h>
#include <kernel/devices/motor.kernel.h>
#include "nibobee_motor.h"

void init_nibobee_motors() {
	INIT_MOTOR(LeftMotor, MOTOR_NORMAL, PinD6, Timer1A)
     6bc:	ac ed       	ldi	r26, 0xDC	; 220
     6be:	b2 e0       	ldi	r27, 0x02	; 2
     6c0:	e1 e2       	ldi	r30, 0x21	; 33
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	81 50       	subi	r24, 0x01	; 1
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <init_nibobee_motors+0xa>
     6ce:	8c ed       	ldi	r24, 0xDC	; 220
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	0e 94 39 03 	call	0x672	; 0x672 <initMotor>
	INIT_MOTOR(RightMotor, MOTOR_NORMAL, PinD7, Timer1B)
     6d6:	a2 e3       	ldi	r26, 0x32	; 50
     6d8:	b3 e0       	ldi	r27, 0x03	; 3
     6da:	ec e1       	ldi	r30, 0x1C	; 28
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <init_nibobee_motors+0x24>
     6e8:	82 e3       	ldi	r24, 0x32	; 50
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	0e 94 39 03 	call	0x672	; 0x672 <initMotor>
}
     6f0:	08 95       	ret

000006f2 <twi_unexpectedCondition>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() { }
     6f2:	08 95       	ret

000006f4 <init_twi>:
TWIError error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     6f4:	85 e0       	ldi	r24, 0x05	; 5
     6f6:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     700:	81 e1       	ldi	r24, 0x11	; 17
     702:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     706:	10 92 b9 00 	sts	0x00B9, r1
	// TODO uncovered: TWAMR (slave address mask register)
	#ifdef TWI_Slave
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	80 93 ba 00 	sts	0x00BA, r24
	#endif
}
     710:	08 95       	ret

00000712 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	27 97       	sbiw	r28, 0x07	; 7
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
     726:	ae 01       	movw	r20, r28
     728:	4f 5f       	subi	r20, 0xFF	; 255
     72a:	5f 4f       	sbci	r21, 0xFF	; 255
     72c:	80 91 18 03 	lds	r24, 0x0318
     730:	90 91 19 03 	lds	r25, 0x0319
     734:	fc 01       	movw	r30, r24
     736:	33 e0       	ldi	r19, 0x03	; 3
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	3a 95       	dec	r19
     73e:	e1 f7       	brne	.-8      	; 0x738 <next_twi_operation+0x26>
     740:	e8 1b       	sub	r30, r24
     742:	f9 0b       	sbc	r31, r25
     744:	da 01       	movw	r26, r20
     746:	e6 59       	subi	r30, 0x96	; 150
     748:	fc 4f       	sbci	r31, 0xFC	; 252
     74a:	27 e0       	ldi	r18, 0x07	; 7
     74c:	01 90       	ld	r0, Z+
     74e:	0d 92       	st	X+, r0
     750:	21 50       	subi	r18, 0x01	; 1
     752:	e1 f7       	brne	.-8      	; 0x74c <next_twi_operation+0x3a>
     754:	fc 01       	movw	r30, r24
     756:	23 e0       	ldi	r18, 0x03	; 3
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	2a 95       	dec	r18
     75e:	e1 f7       	brne	.-8      	; 0x758 <next_twi_operation+0x46>
     760:	e8 1b       	sub	r30, r24
     762:	f9 0b       	sbc	r31, r25
     764:	e6 59       	subi	r30, 0x96	; 150
     766:	fc 4f       	sbci	r31, 0xFC	; 252
     768:	64 81       	ldd	r22, Z+4	; 0x04
     76a:	25 81       	ldd	r18, Z+5	; 0x05
     76c:	36 81       	ldd	r19, Z+6	; 0x06
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 19 03 	sts	0x0319, r25
     774:	80 93 18 03 	sts	0x0318, r24
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
     778:	83 30       	cpi	r24, 0x03	; 3
     77a:	91 05       	cpc	r25, r1
     77c:	ec f4       	brge	.+58     	; 0x7b8 <next_twi_operation+0xa6>
     77e:	21 15       	cp	r18, r1
     780:	31 05       	cpc	r19, r1
     782:	a1 f2       	breq	.-88     	; 0x72c <next_twi_operation+0x1a>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	if (current.operationMode == TWI_Send) {
     784:	22 30       	cpi	r18, 0x02	; 2
     786:	31 05       	cpc	r19, r1
     788:	21 f4       	brne	.+8      	; 0x792 <next_twi_operation+0x80>
		twi_address.address = current.device.address & ~_BV(TW_READ);
     78a:	86 2f       	mov	r24, r22
     78c:	8d 7f       	andi	r24, 0xFD	; 253
     78e:	80 93 37 02 	sts	0x0237, r24
	} else if (current.operationMode == TWI_Send) {
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
     792:	10 92 eb 02 	sts	0x02EB, r1
     796:	10 92 ea 02 	sts	0x02EA, r1
	twi_buffer = current.buffer;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	ab 81       	ldd	r26, Y+3	; 0x03
     7a0:	bc 81       	ldd	r27, Y+4	; 0x04
     7a2:	80 93 1d 03 	sts	0x031D, r24
     7a6:	90 93 1e 03 	sts	0x031E, r25
     7aa:	a0 93 1f 03 	sts	0x031F, r26
     7ae:	b0 93 20 03 	sts	0x0320, r27
	return TRUE;
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <next_twi_operation+0xaa>
BOOL next_twi_operation() {
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     7bc:	c9 01       	movw	r24, r18
     7be:	27 96       	adiw	r28, 0x07	; 7
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (nextTwiOperation >= NUM_TWI_OPERATIONS || !next_twi_operation()) {
     7d0:	80 91 18 03 	lds	r24, 0x0318
     7d4:	90 91 19 03 	lds	r25, 0x0319
     7d8:	83 30       	cpi	r24, 0x03	; 3
     7da:	91 05       	cpc	r25, r1
     7dc:	24 f4       	brge	.+8      	; 0x7e6 <twi_stop_or_next+0x16>
     7de:	0e 94 89 03 	call	0x712	; 0x712 <next_twi_operation>
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	11 f4       	brne	.+4      	; 0x7ea <twi_stop_or_next+0x1a>
		twi_stop();
     7e6:	0e 94 79 00 	call	0xf2	; 0xf2 <twi_stop>
     7ea:	08 95       	ret

000007ec <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	error = TWI_No_Error;
     7ec:	10 92 2b 03 	sts	0x032B, r1
     7f0:	10 92 2a 03 	sts	0x032A, r1
	twi_running = TRUE;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	90 93 22 03 	sts	0x0322, r25
     7fc:	80 93 21 03 	sts	0x0321, r24
	nextTwiOperation = 0;
     800:	10 92 19 03 	sts	0x0319, r1
     804:	10 92 18 03 	sts	0x0318, r1
	next_twi_operation();
     808:	0e 94 89 03 	call	0x712	; 0x712 <next_twi_operation>
}
     80c:	08 95       	ret

0000080e <__vector_26>:
	} else {
		twi_continue();
	}
}

ISR(TWI_vect) {
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	0b b6       	in	r0, 0x3b	; 59
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	2f 93       	push	r18
     81e:	3f 93       	push	r19
     820:	4f 93       	push	r20
     822:	5f 93       	push	r21
     824:	6f 93       	push	r22
     826:	7f 93       	push	r23
     828:	8f 93       	push	r24
     82a:	9f 93       	push	r25
     82c:	af 93       	push	r26
     82e:	bf 93       	push	r27
     830:	ef 93       	push	r30
     832:	ff 93       	push	r31
	switch(TW_STATUS) {
     834:	80 91 b9 00 	lds	r24, 0x00B9
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	88 7f       	andi	r24, 0xF8	; 248
     83c:	90 70       	andi	r25, 0x00	; 0
     83e:	88 36       	cpi	r24, 0x68	; 104
     840:	91 05       	cpc	r25, r1
     842:	09 f4       	brne	.+2      	; 0x846 <__vector_26+0x38>
     844:	f5 c0       	rjmp	.+490    	; 0xa30 <__vector_26+0x222>
     846:	89 36       	cpi	r24, 0x69	; 105
     848:	91 05       	cpc	r25, r1
     84a:	ec f5       	brge	.+122    	; 0x8c6 <__vector_26+0xb8>
     84c:	80 33       	cpi	r24, 0x30	; 48
     84e:	91 05       	cpc	r25, r1
     850:	09 f4       	brne	.+2      	; 0x854 <__vector_26+0x46>
     852:	9b c0       	rjmp	.+310    	; 0x98a <__vector_26+0x17c>
     854:	81 33       	cpi	r24, 0x31	; 49
     856:	91 05       	cpc	r25, r1
     858:	cc f4       	brge	.+50     	; 0x88c <__vector_26+0x7e>
     85a:	88 31       	cpi	r24, 0x18	; 24
     85c:	91 05       	cpc	r25, r1
     85e:	09 f4       	brne	.+2      	; 0x862 <__vector_26+0x54>
     860:	77 c0       	rjmp	.+238    	; 0x950 <__vector_26+0x142>
     862:	89 31       	cpi	r24, 0x19	; 25
     864:	91 05       	cpc	r25, r1
     866:	4c f4       	brge	.+18     	; 0x87a <__vector_26+0x6c>
     868:	88 30       	cpi	r24, 0x08	; 8
     86a:	91 05       	cpc	r25, r1
     86c:	09 f4       	brne	.+2      	; 0x870 <__vector_26+0x62>
     86e:	68 c0       	rjmp	.+208    	; 0x940 <__vector_26+0x132>
     870:	80 31       	cpi	r24, 0x10	; 16
     872:	91 05       	cpc	r25, r1
     874:	09 f0       	breq	.+2      	; 0x878 <__vector_26+0x6a>
     876:	eb c0       	rjmp	.+470    	; 0xa4e <__vector_26+0x240>
     878:	63 c0       	rjmp	.+198    	; 0x940 <__vector_26+0x132>
     87a:	80 32       	cpi	r24, 0x20	; 32
     87c:	91 05       	cpc	r25, r1
     87e:	09 f4       	brne	.+2      	; 0x882 <__vector_26+0x74>
     880:	8d c0       	rjmp	.+282    	; 0x99c <__vector_26+0x18e>
     882:	88 32       	cpi	r24, 0x28	; 40
     884:	91 05       	cpc	r25, r1
     886:	09 f0       	breq	.+2      	; 0x88a <__vector_26+0x7c>
     888:	e2 c0       	rjmp	.+452    	; 0xa4e <__vector_26+0x240>
     88a:	62 c0       	rjmp	.+196    	; 0x950 <__vector_26+0x142>
     88c:	88 34       	cpi	r24, 0x48	; 72
     88e:	91 05       	cpc	r25, r1
     890:	09 f4       	brne	.+2      	; 0x894 <__vector_26+0x86>
     892:	84 c0       	rjmp	.+264    	; 0x99c <__vector_26+0x18e>
     894:	89 34       	cpi	r24, 0x49	; 73
     896:	91 05       	cpc	r25, r1
     898:	4c f4       	brge	.+18     	; 0x8ac <__vector_26+0x9e>
     89a:	88 33       	cpi	r24, 0x38	; 56
     89c:	91 05       	cpc	r25, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__vector_26+0x94>
     8a0:	54 c0       	rjmp	.+168    	; 0x94a <__vector_26+0x13c>
     8a2:	80 34       	cpi	r24, 0x40	; 64
     8a4:	91 05       	cpc	r25, r1
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__vector_26+0x9c>
     8a8:	d2 c0       	rjmp	.+420    	; 0xa4e <__vector_26+0x240>
     8aa:	c2 c0       	rjmp	.+388    	; 0xa30 <__vector_26+0x222>
     8ac:	88 35       	cpi	r24, 0x58	; 88
     8ae:	91 05       	cpc	r25, r1
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <__vector_26+0xa6>
     8b2:	77 c0       	rjmp	.+238    	; 0x9a2 <__vector_26+0x194>
     8b4:	80 36       	cpi	r24, 0x60	; 96
     8b6:	91 05       	cpc	r25, r1
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__vector_26+0xae>
     8ba:	ba c0       	rjmp	.+372    	; 0xa30 <__vector_26+0x222>
     8bc:	80 35       	cpi	r24, 0x50	; 80
     8be:	91 05       	cpc	r25, r1
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_26+0xb6>
     8c2:	c5 c0       	rjmp	.+394    	; 0xa4e <__vector_26+0x240>
     8c4:	b8 c0       	rjmp	.+368    	; 0xa36 <__vector_26+0x228>
     8c6:	88 39       	cpi	r24, 0x98	; 152
     8c8:	91 05       	cpc	r25, r1
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__vector_26+0xc0>
     8cc:	bd c0       	rjmp	.+378    	; 0xa48 <__vector_26+0x23a>
     8ce:	89 39       	cpi	r24, 0x99	; 153
     8d0:	91 05       	cpc	r25, r1
     8d2:	cc f4       	brge	.+50     	; 0x906 <__vector_26+0xf8>
     8d4:	80 38       	cpi	r24, 0x80	; 128
     8d6:	91 05       	cpc	r25, r1
     8d8:	09 f4       	brne	.+2      	; 0x8dc <__vector_26+0xce>
     8da:	ad c0       	rjmp	.+346    	; 0xa36 <__vector_26+0x228>
     8dc:	81 38       	cpi	r24, 0x81	; 129
     8de:	91 05       	cpc	r25, r1
     8e0:	4c f4       	brge	.+18     	; 0x8f4 <__vector_26+0xe6>
     8e2:	80 37       	cpi	r24, 0x70	; 112
     8e4:	91 05       	cpc	r25, r1
     8e6:	09 f4       	brne	.+2      	; 0x8ea <__vector_26+0xdc>
     8e8:	a3 c0       	rjmp	.+326    	; 0xa30 <__vector_26+0x222>
     8ea:	88 37       	cpi	r24, 0x78	; 120
     8ec:	91 05       	cpc	r25, r1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <__vector_26+0xe4>
     8f0:	ae c0       	rjmp	.+348    	; 0xa4e <__vector_26+0x240>
     8f2:	9e c0       	rjmp	.+316    	; 0xa30 <__vector_26+0x222>
     8f4:	88 38       	cpi	r24, 0x88	; 136
     8f6:	91 05       	cpc	r25, r1
     8f8:	09 f4       	brne	.+2      	; 0x8fc <__vector_26+0xee>
     8fa:	a6 c0       	rjmp	.+332    	; 0xa48 <__vector_26+0x23a>
     8fc:	80 39       	cpi	r24, 0x90	; 144
     8fe:	91 05       	cpc	r25, r1
     900:	09 f0       	breq	.+2      	; 0x904 <__vector_26+0xf6>
     902:	a5 c0       	rjmp	.+330    	; 0xa4e <__vector_26+0x240>
     904:	98 c0       	rjmp	.+304    	; 0xa36 <__vector_26+0x228>
     906:	80 3b       	cpi	r24, 0xB0	; 176
     908:	91 05       	cpc	r25, r1
     90a:	09 f4       	brne	.+2      	; 0x90e <__vector_26+0x100>
     90c:	4d c0       	rjmp	.+154    	; 0x9a8 <__vector_26+0x19a>
     90e:	81 3b       	cpi	r24, 0xB1	; 177
     910:	91 05       	cpc	r25, r1
     912:	4c f4       	brge	.+18     	; 0x926 <__vector_26+0x118>
     914:	80 3a       	cpi	r24, 0xA0	; 160
     916:	91 05       	cpc	r25, r1
     918:	09 f4       	brne	.+2      	; 0x91c <__vector_26+0x10e>
     91a:	90 c0       	rjmp	.+288    	; 0xa3c <__vector_26+0x22e>
     91c:	88 3a       	cpi	r24, 0xA8	; 168
     91e:	91 05       	cpc	r25, r1
     920:	09 f0       	breq	.+2      	; 0x924 <__vector_26+0x116>
     922:	95 c0       	rjmp	.+298    	; 0xa4e <__vector_26+0x240>
     924:	41 c0       	rjmp	.+130    	; 0x9a8 <__vector_26+0x19a>
     926:	80 3c       	cpi	r24, 0xC0	; 192
     928:	91 05       	cpc	r25, r1
     92a:	09 f4       	brne	.+2      	; 0x92e <__vector_26+0x120>
     92c:	73 c0       	rjmp	.+230    	; 0xa14 <__vector_26+0x206>
     92e:	88 3c       	cpi	r24, 0xC8	; 200
     930:	91 05       	cpc	r25, r1
     932:	09 f4       	brne	.+2      	; 0x936 <__vector_26+0x128>
     934:	6c c0       	rjmp	.+216    	; 0xa0e <__vector_26+0x200>
     936:	88 3b       	cpi	r24, 0xB8	; 184
     938:	91 05       	cpc	r25, r1
     93a:	09 f0       	breq	.+2      	; 0x93e <__vector_26+0x130>
     93c:	88 c0       	rjmp	.+272    	; 0xa4e <__vector_26+0x240>
     93e:	3c c0       	rjmp	.+120    	; 0x9b8 <__vector_26+0x1aa>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     940:	80 91 37 02 	lds	r24, 0x0237
     944:	80 93 bb 00 	sts	0x00BB, r24
     948:	1c c0       	rjmp	.+56     	; 0x982 <__vector_26+0x174>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			error = TWI_Arbitration_Lost;
     94a:	85 e0       	ldi	r24, 0x05	; 5
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	78 c0       	rjmp	.+240    	; 0xa40 <__vector_26+0x232>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     950:	80 91 ea 02 	lds	r24, 0x02EA
     954:	90 91 eb 02 	lds	r25, 0x02EB
     958:	20 91 1f 03 	lds	r18, 0x031F
     95c:	30 91 20 03 	lds	r19, 0x0320
     960:	82 17       	cp	r24, r18
     962:	93 07       	cpc	r25, r19
     964:	f0 f4       	brcc	.+60     	; 0x9a2 <__vector_26+0x194>
				twi_send(twi_buffer.data[alreadyHandled++]);
     966:	e0 91 1d 03 	lds	r30, 0x031D
     96a:	f0 91 1e 03 	lds	r31, 0x031E
     96e:	e8 0f       	add	r30, r24
     970:	f9 1f       	adc	r31, r25
     972:	20 81       	ld	r18, Z
     974:	20 93 bb 00 	sts	0x00BB, r18
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	90 93 eb 02 	sts	0x02EB, r25
     97e:	80 93 ea 02 	sts	0x02EA, r24
     982:	85 e8       	ldi	r24, 0x85	; 133
     984:	80 93 bc 00 	sts	0x00BC, r24
     988:	6a c0       	rjmp	.+212    	; 0xa5e <__vector_26+0x250>
		case TW_MT_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			error = TWI_Master_TooMuchDataTransmitted;
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 2b 03 	sts	0x032B, r25
     992:	80 93 2a 03 	sts	0x032A, r24
			twi_stop();
     996:	0e 94 79 00 	call	0xf2	; 0xf2 <twi_stop>
			break;
     99a:	61 c0       	rjmp	.+194    	; 0xa5e <__vector_26+0x250>
			break;
		case TW_MR_DATA_ACK:
			twi_receive_byte();
			break;
		case TW_MR_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	f6 cf       	rjmp	.-20     	; 0x98e <__vector_26+0x180>
			twi_stop();
			break;
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_stop_or_next();
     9a2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <twi_stop_or_next>
			break;
     9a6:	5b c0       	rjmp	.+182    	; 0xa5e <__vector_26+0x250>
#ifdef TWI_Slave
// Slave Transmitter
		case TW_ST_SLA_ACK:
		case TW_ST_ARB_LOST_SLA_ACK:
			twi_buffer = twi_handleMasterRequest();
     9a8:	10 92 1d 03 	sts	0x031D, r1
     9ac:	10 92 1e 03 	sts	0x031E, r1
     9b0:	10 92 1f 03 	sts	0x031F, r1
     9b4:	10 92 20 03 	sts	0x0320, r1
		case TW_ST_DATA_ACK:
			if (alreadyHandled < twi_buffer.size - 1) {
     9b8:	80 91 ea 02 	lds	r24, 0x02EA
     9bc:	90 91 eb 02 	lds	r25, 0x02EB
     9c0:	20 91 1f 03 	lds	r18, 0x031F
     9c4:	30 91 20 03 	lds	r19, 0x0320
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	30 40       	sbci	r19, 0x00	; 0
     9cc:	60 91 1d 03 	lds	r22, 0x031D
     9d0:	70 91 1e 03 	lds	r23, 0x031E
     9d4:	ac 01       	movw	r20, r24
     9d6:	4f 5f       	subi	r20, 0xFF	; 255
     9d8:	5f 4f       	sbci	r21, 0xFF	; 255
     9da:	82 17       	cp	r24, r18
     9dc:	93 07       	cpc	r25, r19
     9de:	60 f4       	brcc	.+24     	; 0x9f8 <__vector_26+0x1ea>
				// At least one more byte after this one.
				twi_send_ack(twi_buffer.data[alreadyHandled++]);
     9e0:	86 0f       	add	r24, r22
     9e2:	97 1f       	adc	r25, r23
     9e4:	fc 01       	movw	r30, r24
     9e6:	80 81       	ld	r24, Z
     9e8:	80 93 bb 00 	sts	0x00BB, r24
     9ec:	50 93 eb 02 	sts	0x02EB, r21
     9f0:	40 93 ea 02 	sts	0x02EA, r20
     9f4:	85 ec       	ldi	r24, 0xC5	; 197
     9f6:	c6 cf       	rjmp	.-116    	; 0x984 <__vector_26+0x176>
			} else {
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
     9f8:	86 0f       	add	r24, r22
     9fa:	97 1f       	adc	r25, r23
     9fc:	fc 01       	movw	r30, r24
     9fe:	80 81       	ld	r24, Z
     a00:	80 93 bb 00 	sts	0x00BB, r24
     a04:	50 93 eb 02 	sts	0x02EB, r21
     a08:	40 93 ea 02 	sts	0x02EA, r20
     a0c:	ba cf       	rjmp	.-140    	; 0x982 <__vector_26+0x174>
			}				
			break;
		case TW_ST_LAST_DATA:
			error = TWI_Slave_NotEnoughDataTransmitted;
     a0e:	87 e0       	ldi	r24, 0x07	; 7
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	16 c0       	rjmp	.+44     	; 0xa40 <__vector_26+0x232>
			twi_end();
			break;
		case TW_ST_DATA_NACK:
			if (alreadyHandled < twi_buffer.size) {
     a14:	20 91 ea 02 	lds	r18, 0x02EA
     a18:	30 91 eb 02 	lds	r19, 0x02EB
     a1c:	80 91 1f 03 	lds	r24, 0x031F
     a20:	90 91 20 03 	lds	r25, 0x0320
     a24:	28 17       	cp	r18, r24
     a26:	39 07       	cpc	r19, r25
     a28:	78 f4       	brcc	.+30     	; 0xa48 <__vector_26+0x23a>
				error = TWI_Slave_TooMuchDataTransmitted;
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	08 c0       	rjmp	.+16     	; 0xa40 <__vector_26+0x232>
// Slave Receiver
		case TW_SR_SLA_ACK:
		case TW_SR_ARB_LOST_SLA_ACK:
		case TW_SR_GCALL_ACK:
		case TW_SR_ARB_LOST_GCALL_ACK:
			twi_init_receive();
     a30:	0e 94 ca 00 	call	0x194	; 0x194 <twi_init_receive>
			break;
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <__vector_26+0x250>
		case TW_SR_DATA_ACK:
		case TW_SR_GCALL_DATA_ACK:
			twi_receive_byte();
     a36:	0e 94 a9 00 	call	0x152	; 0x152 <twi_receive_byte>
			break;
     a3a:	11 c0       	rjmp	.+34     	; 0xa5e <__vector_26+0x250>
		case TW_SR_STOP:
			// Transmission ended early.
			error = TWI_Slave_NotEnoughDataReceived;	
     a3c:	89 e0       	ldi	r24, 0x09	; 9
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 2b 03 	sts	0x032B, r25
     a44:	80 93 2a 03 	sts	0x032A, r24
		case TW_SR_DATA_NACK:
		case TW_SR_GCALL_DATA_NACK:
			// Invoke application-code before releasing the bus. The twi_buffer should be copied quickly.
			twi_handleMasterTransmission((TWIBuffer) { twi_buffer.data, alreadyHandled } );
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
     a48:	0e 94 91 00 	call	0x122	; 0x122 <twi_end>
			break;
     a4c:	08 c0       	rjmp	.+16     	; 0xa5e <__vector_26+0x250>
		case TW_NO_INFO:
			error = TWI_No_Info_Interrupt;
		case TW_BUS_ERROR:
			error = TWI_Bus_Error;
		default:
			error = TWI_Illegal_Status;
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	90 93 2b 03 	sts	0x032B, r25
     a56:	80 93 2a 03 	sts	0x032A, r24
			twi_unexpectedCondition();
     a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <twi_unexpectedCondition>
	}
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0b be       	out	0x3b, r0	; 59
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <twi_handleMasterRequest>:
#include <kernel/TWI/twi_raw.kernel.h>

TWIBuffer twi_handleMasterRequest() {
	TWIBuffer buf;
	return buf;
}
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	08 95       	ret

00000a8e <twi_handleMasterTransmission>:

void twi_handleMasterTransmission(TWIBuffer twi_buffer) {
	
}
     a8e:	08 95       	ret

00000a90 <init_timer>:

#include <kernel/devices/timer_m1284P.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect

void init_timer() {
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     a94:	cb e3       	ldi	r28, 0x3B	; 59
     a96:	d2 e0       	ldi	r29, 0x02	; 2
     a98:	ce 01       	movw	r24, r28
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <setWaveformGenerationMode>
	setTimerCompareValue(timer, 2500);
     aa2:	81 e7       	ldi	r24, 0x71	; 113
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	64 ec       	ldi	r22, 0xC4	; 196
     aa8:	79 e0       	ldi	r23, 0x09	; 9
     aaa:	0e 94 a0 08 	call	0x1140	; 0x1140 <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     aae:	ce 01       	movw	r24, r28
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	0e 94 6d 07 	call	0xeda	; 0xeda <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <start_timer>:
KERNEL_INIT(init_timer)

void start_timer() {
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
     abe:	81 e7       	ldi	r24, 0x71	; 113
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <enableTimerInterrupt>
	sei();
     ac6:	78 94       	sei
}
     ac8:	08 95       	ret

00000aca <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     aca:	08 95       	ret

00000acc <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increasethe milliseconds_running value.

TIMER_TICK_ISR {
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	TIMER_TICK_ACTION
     af2:	80 91 27 02 	lds	r24, 0x0227
     af6:	90 91 28 02 	lds	r25, 0x0228
     afa:	a0 91 29 02 	lds	r26, 0x0229
     afe:	b0 91 2a 02 	lds	r27, 0x022A
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	a1 1d       	adc	r26, r1
     b06:	b1 1d       	adc	r27, r1
     b08:	80 93 27 02 	sts	0x0227, r24
     b0c:	90 93 28 02 	sts	0x0228, r25
     b10:	a0 93 29 02 	sts	0x0229, r26
     b14:	b0 93 2a 02 	sts	0x022A, r27
     b18:	0e 94 65 05 	call	0xaca	; 0xaca <in_timer_tick>
}
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <before_timer>:
#endif

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
     b42:	08 95       	ret

00000b44 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
     b44:	80 b7       	in	r24, 0x30	; 48
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
     b4a:	e4 e6       	ldi	r30, 0x64	; 100
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	80 66       	ori	r24, 0x60	; 96
     b52:	80 83       	st	Z, r24
	
	// Final initialization-sequence
	// AFTER other modules modified __default_stack_size and 
	// __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
     b54:	0e 94 a1 05 	call	0xb42	; 0xb42 <before_timer>
	start_timer();
     b58:	0e 94 5f 05 	call	0xabe	; 0xabe <start_timer>
}
     b5c:	08 95       	ret

00000b5e <main>:

#include <kernel/hardware_reset.h>

int main() {
	// Just do this once and idle...
	blink_reset_condition(&AllLeds);
     b5e:	89 e0       	ldi	r24, 0x09	; 9
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <blink_reset_condition>
	HARDWARE_RESET();
     b66:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <HARDWARE_RESET>
}
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	08 95       	ret

00000b70 <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
     b70:	80 32       	cpi	r24, 0x20	; 32
     b72:	18 f5       	brcc	.+70     	; 0xbba <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
     b74:	58 2f       	mov	r21, r24
     b76:	56 95       	lsr	r21
     b78:	56 95       	lsr	r21
     b7a:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
     b7c:	e5 2f       	mov	r30, r21
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	eb 5e       	subi	r30, 0xEB	; 235
     b86:	fd 4f       	sbci	r31, 0xFD	; 253
     b88:	01 90       	ld	r0, Z+
     b8a:	f0 81       	ld	r31, Z
     b8c:	e0 2d       	mov	r30, r0
     b8e:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
     b90:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
     b92:	21 e0       	ldi	r18, 0x01	; 1
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	b9 01       	movw	r22, r18
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <enablePinChangeInterrupt+0x2e>
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	8a 95       	dec	r24
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <enablePinChangeInterrupt+0x2a>
     ba2:	46 2b       	or	r20, r22
     ba4:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
     ba6:	80 91 68 00 	lds	r24, 0x0068
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <enablePinChangeInterrupt+0x40>
     bac:	22 0f       	add	r18, r18
     bae:	33 1f       	adc	r19, r19
     bb0:	5a 95       	dec	r21
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <enablePinChangeInterrupt+0x3c>
     bb4:	82 2b       	or	r24, r18
     bb6:	80 93 68 00 	sts	0x0068, r24
     bba:	08 95       	ret

00000bbc <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
     bbc:	80 32       	cpi	r24, 0x20	; 32
     bbe:	c0 f4       	brcc	.+48     	; 0xbf0 <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
     bc0:	e8 2f       	mov	r30, r24
     bc2:	e6 95       	lsr	r30
     bc4:	e6 95       	lsr	r30
     bc6:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	ee 0f       	add	r30, r30
     bcc:	ff 1f       	adc	r31, r31
     bce:	eb 5e       	subi	r30, 0xEB	; 235
     bd0:	fd 4f       	sbci	r31, 0xFD	; 253
     bd2:	01 90       	ld	r0, Z+
     bd4:	f0 81       	ld	r31, Z
     bd6:	e0 2d       	mov	r30, r0
     bd8:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
     bda:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <disblePinChangeInterrupt+0x2a>
     be2:	22 0f       	add	r18, r18
     be4:	33 1f       	adc	r19, r19
     be6:	8a 95       	dec	r24
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <disblePinChangeInterrupt+0x26>
     bea:	20 95       	com	r18
     bec:	29 23       	and	r18, r25
     bee:	20 83       	st	Z, r18
     bf0:	08 95       	ret

00000bf2 <stopMotor>:
#include "motor.h"
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

void stopMotor(PMotor motor) {
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ec 01       	movw	r28, r24
	disableOutputCompare(motor->pwmTimer);
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	0e 94 9b 08 	call	0x1136	; 0x1136 <disableOutputCompare>
	// This is mainly to still read the speed as zero.
	setTimerCompareValue(motor->pwmTimer, 0);
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	0e 94 a0 08 	call	0x1140	; 0x1140 <setTimerCompareValue>
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
     c0c:	88 81       	ld	r24, Y
     c0e:	83 ff       	sbrs	r24, 3
     c10:	08 c0       	rjmp	.+16     	; 0xc22 <stopMotor+0x30>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	0e 94 18 07 	call	0xe30	; 0xe30 <setPinZero>
		setPinZero(Dir2(motor));
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	0e 94 18 07 	call	0xe30	; 0xe30 <setPinZero>
	}
}
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
     c28:	fc 01       	movw	r30, r24
     c2a:	83 81       	ldd	r24, Z+3	; 0x03
     c2c:	94 81       	ldd	r25, Z+4	; 0x04
     c2e:	0e 94 b8 08 	call	0x1170	; 0x1170 <getTimerCompareValue>
}
     c32:	08 95       	ret

00000c34 <getDirection>:

MotorDirection getDirection(PMotor motor) {
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
     c3e:	28 81       	ld	r18, Y
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	23 ff       	sbrs	r18, 3
     c46:	12 c0       	rjmp	.+36     	; 0xc6c <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
     c48:	0e 94 30 07 	call	0xe60	; 0xe60 <readPin>
     c4c:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	0e 94 30 07 	call	0xe60	; 0xe60 <readPin>
		if (dir1 && !dir2) val = FORWARD;
     c56:	01 15       	cp	r16, r1
     c58:	11 05       	cpc	r17, r1
     c5a:	19 f0       	breq	.+6      	; 0xc62 <getDirection+0x2e>
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	e9 f0       	breq	.+58     	; 0xc9a <getDirection+0x66>
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	e9 f4       	brne	.+58     	; 0xca0 <getDirection+0x6c>
     c66:	22 e0       	ldi	r18, 0x02	; 2
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	11 c0       	rjmp	.+34     	; 0xc8e <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
     c6c:	0e 94 30 07 	call	0xe60	; 0xe60 <readPin>
     c70:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	91 05       	cpc	r25, r1
     c76:	59 f0       	breq	.+22     	; 0xc8e <getDirection+0x5a>
     c78:	88 81       	ld	r24, Y
     c7a:	82 ff       	sbrs	r24, 2
     c7c:	08 c0       	rjmp	.+16     	; 0xc8e <getDirection+0x5a>
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	21 15       	cp	r18, r1
     c84:	31 05       	cpc	r19, r1
     c86:	11 f0       	breq	.+4      	; 0xc8c <getDirection+0x58>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9c 01       	movw	r18, r24
	return val;
}
     c8e:	c9 01       	movw	r24, r18
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	ec cf       	rjmp	.-40     	; 0xc78 <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	e9 cf       	rjmp	.-46     	; 0xc78 <getDirection+0x44>

00000ca6 <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
     cb0:	8b 01       	movw	r16, r22
     cb2:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
     cb4:	42 30       	cpi	r20, 0x02	; 2
     cb6:	51 05       	cpc	r21, r1
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <setSpeed+0x1a>
     cba:	01 15       	cp	r16, r1
     cbc:	11 05       	cpc	r17, r1
     cbe:	21 f4       	brne	.+8      	; 0xcc8 <setSpeed+0x22>
		stopMotor(motor);
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <stopMotor>
		return;
     cc6:	2d c0       	rjmp	.+90     	; 0xd22 <setSpeed+0x7c>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
     cc8:	28 81       	ld	r18, Y
     cca:	22 ff       	sbrs	r18, 2
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <setSpeed+0x38>
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	41 15       	cp	r20, r1
     cd4:	51 05       	cpc	r21, r1
     cd6:	11 f0       	breq	.+4      	; 0xcdc <setSpeed+0x36>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
     cde:	23 ff       	sbrs	r18, 3
     ce0:	13 c0       	rjmp	.+38     	; 0xd08 <setSpeed+0x62>
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
     ce6:	61 15       	cp	r22, r1
     ce8:	71 05       	cpc	r23, r1
     cea:	39 f4       	brne	.+14     	; 0xcfa <setSpeed+0x54>
			setPinOne(motor->direction);
     cec:	0e 94 0a 07 	call	0xe14	; 0xe14 <setPinOne>
			setPinZero(Dir2(motor));
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	9e 81       	ldd	r25, Y+6	; 0x06
     cf4:	0e 94 18 07 	call	0xe30	; 0xe30 <setPinZero>
     cf8:	0b c0       	rjmp	.+22     	; 0xd10 <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
     cfa:	0e 94 18 07 	call	0xe30	; 0xe30 <setPinZero>
			setPinOne(Dir2(motor));
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	0e 94 0a 07 	call	0xe14	; 0xe14 <setPinOne>
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	0e 94 27 07 	call	0xe4e	; 0xe4e <writePin>
	}
	setTimerCompareValue(motor->pwmTimer, speed);
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	b8 01       	movw	r22, r16
     d16:	0e 94 a0 08 	call	0x1140	; 0x1140 <setTimerCompareValue>
	enableOutputCompare(motor->pwmTimer);
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	0e 94 8c 08 	call	0x1118	; 0x1118 <enableOutputCompare>
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	1f 91       	pop	r17
     d28:	0f 91       	pop	r16
     d2a:	08 95       	ret

00000d2c <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	0e 94 53 06 	call	0xca6	; 0xca6 <setSpeed>
}
     d34:	08 95       	ret

00000d36 <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 53 06 	call	0xca6	; 0xca6 <setSpeed>
}
     d3e:	08 95       	ret

00000d40 <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
     d4a:	0e 94 1a 06 	call	0xc34	; 0xc34 <getDirection>
     d4e:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	91 05       	cpc	r25, r1
     d54:	79 f0       	breq	.+30     	; 0xd74 <getDirSpeed+0x34>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
     d56:	f8 01       	movw	r30, r16
     d58:	83 81       	ldd	r24, Z+3	; 0x03
     d5a:	94 81       	ldd	r25, Z+4	; 0x04
     d5c:	0e 94 b8 08 	call	0x1170	; 0x1170 <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
     d60:	9c 01       	movw	r18, r24
     d62:	36 95       	lsr	r19
     d64:	27 95       	ror	r18
	if (dir == BACKWARD)
     d66:	c1 30       	cpi	r28, 0x01	; 1
     d68:	d1 05       	cpc	r29, r1
     d6a:	31 f4       	brne	.+12     	; 0xd78 <getDirSpeed+0x38>
		val *= -1; // Should be optimized away by compiler.
     d6c:	30 95       	com	r19
     d6e:	21 95       	neg	r18
     d70:	3f 4f       	sbci	r19, 0xFF	; 255
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <getDirSpeed+0x38>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
     d78:	c9 01       	movw	r24, r18
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
     d84:	47 2f       	mov	r20, r23
	uint16_t absv = abs(speed);
     d86:	77 ff       	sbrs	r23, 7
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <setDirSpeed+0xc>
     d8a:	70 95       	com	r23
     d8c:	61 95       	neg	r22
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
     d90:	66 0f       	add	r22, r22
     d92:	77 1f       	adc	r23, r23
	setSpeed(motor, absv, speed < 0 ? BACKWARD : FORWARD);
     d94:	44 1f       	adc	r20, r20
     d96:	44 27       	eor	r20, r20
     d98:	44 1f       	adc	r20, r20
     d9a:	50 e0       	ldi	r21, 0x00	; 0
     d9c:	0e 94 53 06 	call	0xca6	; 0xca6 <setSpeed>
}
     da0:	08 95       	ret

00000da2 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
     da2:	dc 01       	movw	r26, r24
     da4:	14 96       	adiw	r26, 0x04	; 4
     da6:	ed 91       	ld	r30, X+
     da8:	fc 91       	ld	r31, X
     daa:	15 97       	sbiw	r26, 0x05	; 5
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	80 83       	st	Z, r24
}
     db0:	08 95       	ret

00000db2 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
     db2:	dc 01       	movw	r26, r24
     db4:	14 96       	adiw	r26, 0x04	; 4
     db6:	ed 91       	ld	r30, X+
     db8:	fc 91       	ld	r31, X
     dba:	15 97       	sbiw	r26, 0x05	; 5
     dbc:	10 82       	st	Z, r1
}
     dbe:	08 95       	ret

00000dc0 <setPinOutput>:

void setPinOutput(PPin pin) {
     dc0:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
     dc2:	ed 91       	ld	r30, X+
     dc4:	fc 91       	ld	r31, X
     dc6:	11 97       	sbiw	r26, 0x01	; 1
     dc8:	04 80       	ldd	r0, Z+4	; 0x04
     dca:	f5 81       	ldd	r31, Z+5	; 0x05
     dcc:	e0 2d       	mov	r30, r0
     dce:	80 81       	ld	r24, Z
     dd0:	12 96       	adiw	r26, 0x02	; 2
     dd2:	9c 91       	ld	r25, X
     dd4:	12 97       	sbiw	r26, 0x02	; 2
     dd6:	89 2b       	or	r24, r25
     dd8:	80 83       	st	Z, r24
}
     dda:	08 95       	ret

00000ddc <setPinInput>:

void setPinInput(PPin pin) {
     ddc:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
     dde:	ed 91       	ld	r30, X+
     de0:	fc 91       	ld	r31, X
     de2:	11 97       	sbiw	r26, 0x01	; 1
     de4:	04 80       	ldd	r0, Z+4	; 0x04
     de6:	f5 81       	ldd	r31, Z+5	; 0x05
     de8:	e0 2d       	mov	r30, r0
     dea:	90 81       	ld	r25, Z
     dec:	12 96       	adiw	r26, 0x02	; 2
     dee:	8c 91       	ld	r24, X
     df0:	12 97       	sbiw	r26, 0x02	; 2
     df2:	80 95       	com	r24
     df4:	89 23       	and	r24, r25
     df6:	80 83       	st	Z, r24
}
     df8:	08 95       	ret

00000dfa <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
     dfa:	dc 01       	movw	r26, r24
     dfc:	ed 91       	ld	r30, X+
     dfe:	fc 91       	ld	r31, X
     e00:	11 97       	sbiw	r26, 0x01	; 1
     e02:	60 83       	st	Z, r22
}
     e04:	08 95       	ret

00000e06 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
     e06:	dc 01       	movw	r26, r24
     e08:	12 96       	adiw	r26, 0x02	; 2
     e0a:	ed 91       	ld	r30, X+
     e0c:	fc 91       	ld	r31, X
     e0e:	13 97       	sbiw	r26, 0x03	; 3
     e10:	80 81       	ld	r24, Z
}
     e12:	08 95       	ret

00000e14 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
     e14:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	11 97       	sbiw	r26, 0x01	; 1
     e1c:	01 90       	ld	r0, Z+
     e1e:	f0 81       	ld	r31, Z
     e20:	e0 2d       	mov	r30, r0
     e22:	80 81       	ld	r24, Z
     e24:	12 96       	adiw	r26, 0x02	; 2
     e26:	9c 91       	ld	r25, X
     e28:	12 97       	sbiw	r26, 0x02	; 2
     e2a:	89 2b       	or	r24, r25
     e2c:	80 83       	st	Z, r24
}
     e2e:	08 95       	ret

00000e30 <setPinZero>:

void setPinZero(PPin pin) {
     e30:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	11 97       	sbiw	r26, 0x01	; 1
     e38:	01 90       	ld	r0, Z+
     e3a:	f0 81       	ld	r31, Z
     e3c:	e0 2d       	mov	r30, r0
     e3e:	90 81       	ld	r25, Z
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 91       	ld	r24, X
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	80 95       	com	r24
     e48:	89 23       	and	r24, r25
     e4a:	80 83       	st	Z, r24
}
     e4c:	08 95       	ret

00000e4e <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
     e4e:	61 15       	cp	r22, r1
     e50:	71 05       	cpc	r23, r1
     e52:	19 f0       	breq	.+6      	; 0xe5a <writePin+0xc>
     e54:	0e 94 0a 07 	call	0xe14	; 0xe14 <setPinOne>
     e58:	08 95       	ret
	else setPinZero(pin);
     e5a:	0e 94 18 07 	call	0xe30	; 0xe30 <setPinZero>
     e5e:	08 95       	ret

00000e60 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
     e60:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
     e62:	a0 81       	ld	r26, Z
     e64:	b1 81       	ldd	r27, Z+1	; 0x01
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	0d 90       	ld	r0, X+
     e6a:	bc 91       	ld	r27, X
     e6c:	a0 2d       	mov	r26, r0
     e6e:	8c 91       	ld	r24, X
     e70:	92 81       	ldd	r25, Z+2	; 0x02
     e72:	89 23       	and	r24, r25
		return TRUE;
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	11 f4       	brne	.+4      	; 0xe7e <readPin+0x1e>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
     e7e:	c9 01       	movw	r24, r18
     e80:	08 95       	ret

00000e82 <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
     e82:	fc 01       	movw	r30, r24
     e84:	64 30       	cpi	r22, 0x04	; 4
     e86:	71 05       	cpc	r23, r1
     e88:	48 f4       	brcc	.+18     	; 0xe9c <setCompareMatchOutputMode+0x1a>
     e8a:	db 01       	movw	r26, r22
     e8c:	a3 5e       	subi	r26, 0xE3	; 227
     e8e:	bd 4f       	sbci	r27, 0xFD	; 253
     e90:	2c 91       	ld	r18, X
     e92:	6f 5d       	subi	r22, 0xDF	; 223
     e94:	7d 4f       	sbci	r23, 0xFD	; 253
     e96:	db 01       	movw	r26, r22
     e98:	3c 91       	ld	r19, X
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <setCompareMatchOutputMode+0x1e>
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
     ea0:	84 81       	ldd	r24, Z+4	; 0x04
     ea2:	95 81       	ldd	r25, Z+5	; 0x05
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	21 f4       	brne	.+8      	; 0xeb2 <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
     eaa:	36 95       	lsr	r19
     eac:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
     eae:	26 95       	lsr	r18
     eb0:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
     eb2:	a0 81       	ld	r26, Z
     eb4:	b1 81       	ldd	r27, Z+1	; 0x01
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	0d 90       	ld	r0, X+
     eba:	bc 91       	ld	r27, X
     ebc:	a0 2d       	mov	r26, r0
     ebe:	8c 91       	ld	r24, X
     ec0:	83 2b       	or	r24, r19
     ec2:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
     ec4:	01 90       	ld	r0, Z+
     ec6:	f0 81       	ld	r31, Z
     ec8:	e0 2d       	mov	r30, r0
     eca:	01 80       	ldd	r0, Z+1	; 0x01
     ecc:	f2 81       	ldd	r31, Z+2	; 0x02
     ece:	e0 2d       	mov	r30, r0
     ed0:	80 81       	ld	r24, Z
     ed2:	20 95       	com	r18
     ed4:	28 23       	and	r18, r24
     ed6:	20 83       	st	Z, r18
}
     ed8:	08 95       	ret

00000eda <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
     eda:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
     edc:	80 81       	ld	r24, Z
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	82 70       	andi	r24, 0x02	; 2
     ee2:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
     ee4:	64 30       	cpi	r22, 0x04	; 4
     ee6:	71 05       	cpc	r23, r1
     ee8:	71 f1       	breq	.+92     	; 0xf46 <setTimerClockSelect+0x6c>
     eea:	65 30       	cpi	r22, 0x05	; 5
     eec:	71 05       	cpc	r23, r1
     eee:	68 f4       	brcc	.+26     	; 0xf0a <setTimerClockSelect+0x30>
     ef0:	61 30       	cpi	r22, 0x01	; 1
     ef2:	71 05       	cpc	r23, r1
     ef4:	f9 f0       	breq	.+62     	; 0xf34 <setTimerClockSelect+0x5a>
     ef6:	61 30       	cpi	r22, 0x01	; 1
     ef8:	71 05       	cpc	r23, r1
     efa:	d8 f1       	brcs	.+118    	; 0xf72 <setTimerClockSelect+0x98>
     efc:	62 30       	cpi	r22, 0x02	; 2
     efe:	71 05       	cpc	r23, r1
     f00:	e1 f0       	breq	.+56     	; 0xf3a <setTimerClockSelect+0x60>
     f02:	63 30       	cpi	r22, 0x03	; 3
     f04:	71 05       	cpc	r23, r1
     f06:	a1 f4       	brne	.+40     	; 0xf30 <setTimerClockSelect+0x56>
     f08:	1b c0       	rjmp	.+54     	; 0xf40 <setTimerClockSelect+0x66>
     f0a:	67 30       	cpi	r22, 0x07	; 7
     f0c:	71 05       	cpc	r23, r1
     f0e:	21 f1       	breq	.+72     	; 0xf58 <setTimerClockSelect+0x7e>
     f10:	68 30       	cpi	r22, 0x08	; 8
     f12:	71 05       	cpc	r23, r1
     f14:	38 f4       	brcc	.+14     	; 0xf24 <setTimerClockSelect+0x4a>
     f16:	65 30       	cpi	r22, 0x05	; 5
     f18:	71 05       	cpc	r23, r1
     f1a:	c1 f0       	breq	.+48     	; 0xf4c <setTimerClockSelect+0x72>
     f1c:	66 30       	cpi	r22, 0x06	; 6
     f1e:	71 05       	cpc	r23, r1
     f20:	39 f4       	brne	.+14     	; 0xf30 <setTimerClockSelect+0x56>
     f22:	17 c0       	rjmp	.+46     	; 0xf52 <setTimerClockSelect+0x78>
     f24:	68 30       	cpi	r22, 0x08	; 8
     f26:	71 05       	cpc	r23, r1
     f28:	d1 f0       	breq	.+52     	; 0xf5e <setTimerClockSelect+0x84>
     f2a:	69 30       	cpi	r22, 0x09	; 9
     f2c:	71 05       	cpc	r23, r1
     f2e:	e1 f0       	breq	.+56     	; 0xf68 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	1d c0       	rjmp	.+58     	; 0xf6e <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
     f34:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
     f36:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
     f38:	27 c0       	rjmp	.+78     	; 0xf88 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
     f3a:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
     f3c:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
     f3e:	24 c0       	rjmp	.+72     	; 0xf88 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	e9 f4       	brne	.+58     	; 0xf7e <setTimerClockSelect+0xa4>
     f44:	2d c0       	rjmp	.+90     	; 0xfa0 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	b9 f0       	breq	.+46     	; 0xf78 <setTimerClockSelect+0x9e>
     f4a:	19 c0       	rjmp	.+50     	; 0xf7e <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	d1 f4       	brne	.+52     	; 0xf84 <setTimerClockSelect+0xaa>
     f50:	27 c0       	rjmp	.+78     	; 0xfa0 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	a1 f0       	breq	.+40     	; 0xf7e <setTimerClockSelect+0xa4>
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	a1 f0       	breq	.+40     	; 0xf84 <setTimerClockSelect+0xaa>
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	f9 f4       	brne	.+62     	; 0xfa0 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
     f62:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	10 c0       	rjmp	.+32     	; 0xf88 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	d1 f4       	brne	.+52     	; 0xfa0 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
     f6c:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0b c0       	rjmp	.+22     	; 0xf88 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
     f72:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
     f74:	87 e0       	ldi	r24, 0x07	; 7
     f76:	08 c0       	rjmp	.+16     	; 0xf88 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
     f78:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
     f7e:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
     f84:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
     f86:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
     f88:	a3 81       	ldd	r26, Z+3	; 0x03
     f8a:	b4 81       	ldd	r27, Z+4	; 0x04
     f8c:	2c 91       	ld	r18, X
     f8e:	29 2b       	or	r18, r25
     f90:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
     f92:	03 80       	ldd	r0, Z+3	; 0x03
     f94:	f4 81       	ldd	r31, Z+4	; 0x04
     f96:	e0 2d       	mov	r30, r0
     f98:	90 81       	ld	r25, Z
     f9a:	80 95       	com	r24
     f9c:	89 23       	and	r24, r25
     f9e:	80 83       	st	Z, r24
     fa0:	08 95       	ret

00000fa2 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
     fa2:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
     fa4:	80 81       	ld	r24, Z
     fa6:	82 ff       	sbrs	r24, 2
     fa8:	54 c0       	rjmp	.+168    	; 0x1052 <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
     faa:	65 30       	cpi	r22, 0x05	; 5
     fac:	71 05       	cpc	r23, r1
     fae:	b9 f1       	breq	.+110    	; 0x101e <setWaveformGenerationMode+0x7c>
     fb0:	66 30       	cpi	r22, 0x06	; 6
     fb2:	71 05       	cpc	r23, r1
     fb4:	b0 f4       	brcc	.+44     	; 0xfe2 <setWaveformGenerationMode+0x40>
     fb6:	62 30       	cpi	r22, 0x02	; 2
     fb8:	71 05       	cpc	r23, r1
     fba:	69 f1       	breq	.+90     	; 0x1016 <setWaveformGenerationMode+0x74>
     fbc:	63 30       	cpi	r22, 0x03	; 3
     fbe:	71 05       	cpc	r23, r1
     fc0:	40 f4       	brcc	.+16     	; 0xfd2 <setWaveformGenerationMode+0x30>
     fc2:	61 15       	cp	r22, r1
     fc4:	71 05       	cpc	r23, r1
     fc6:	19 f1       	breq	.+70     	; 0x100e <setWaveformGenerationMode+0x6c>
     fc8:	61 30       	cpi	r22, 0x01	; 1
     fca:	71 05       	cpc	r23, r1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <setWaveformGenerationMode+0x2e>
     fce:	8f c0       	rjmp	.+286    	; 0x10ee <setWaveformGenerationMode+0x14c>
     fd0:	6e c0       	rjmp	.+220    	; 0x10ae <setWaveformGenerationMode+0x10c>
     fd2:	63 30       	cpi	r22, 0x03	; 3
     fd4:	71 05       	cpc	r23, r1
     fd6:	29 f1       	breq	.+74     	; 0x1022 <setWaveformGenerationMode+0x80>
     fd8:	64 30       	cpi	r22, 0x04	; 4
     fda:	71 05       	cpc	r23, r1
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <setWaveformGenerationMode+0x3e>
     fde:	87 c0       	rjmp	.+270    	; 0x10ee <setWaveformGenerationMode+0x14c>
     fe0:	24 c0       	rjmp	.+72     	; 0x102a <setWaveformGenerationMode+0x88>
     fe2:	68 30       	cpi	r22, 0x08	; 8
     fe4:	71 05       	cpc	r23, r1
     fe6:	29 f1       	breq	.+74     	; 0x1032 <setWaveformGenerationMode+0x90>
     fe8:	69 30       	cpi	r22, 0x09	; 9
     fea:	71 05       	cpc	r23, r1
     fec:	40 f4       	brcc	.+16     	; 0xffe <setWaveformGenerationMode+0x5c>
     fee:	66 30       	cpi	r22, 0x06	; 6
     ff0:	71 05       	cpc	r23, r1
     ff2:	39 f1       	breq	.+78     	; 0x1042 <setWaveformGenerationMode+0xa0>
     ff4:	67 30       	cpi	r22, 0x07	; 7
     ff6:	71 05       	cpc	r23, r1
     ff8:	09 f0       	breq	.+2      	; 0xffc <setWaveformGenerationMode+0x5a>
     ffa:	79 c0       	rjmp	.+242    	; 0x10ee <setWaveformGenerationMode+0x14c>
     ffc:	26 c0       	rjmp	.+76     	; 0x104a <setWaveformGenerationMode+0xa8>
     ffe:	69 30       	cpi	r22, 0x09	; 9
    1000:	71 05       	cpc	r23, r1
    1002:	d9 f0       	breq	.+54     	; 0x103a <setWaveformGenerationMode+0x98>
    1004:	6a 30       	cpi	r22, 0x0A	; 10
    1006:	71 05       	cpc	r23, r1
    1008:	09 f0       	breq	.+2      	; 0x100c <setWaveformGenerationMode+0x6a>
    100a:	71 c0       	rjmp	.+226    	; 0x10ee <setWaveformGenerationMode+0x14c>
    100c:	10 c0       	rjmp	.+32     	; 0x102e <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    100e:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1010:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1012:	88 e1       	ldi	r24, 0x18	; 24
    1014:	4f c0       	rjmp	.+158    	; 0x10b4 <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1016:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1018:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    101a:	80 e1       	ldi	r24, 0x10	; 16
    101c:	46 c0       	rjmp	.+140    	; 0x10aa <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
    101e:	98 e1       	ldi	r25, 0x18	; 24
    1020:	3a c0       	rjmp	.+116    	; 0x1096 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1022:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1024:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1026:	88 e1       	ldi	r24, 0x18	; 24
    1028:	40 c0       	rjmp	.+128    	; 0x10aa <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
    102a:	90 e1       	ldi	r25, 0x10	; 16
    102c:	2f c0       	rjmp	.+94     	; 0x108c <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    102e:	90 e1       	ldi	r25, 0x10	; 16
    1030:	36 c0       	rjmp	.+108    	; 0x109e <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
    1032:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
    1034:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    1036:	80 e1       	ldi	r24, 0x10	; 16
    1038:	42 c0       	rjmp	.+132    	; 0x10be <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
    103a:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
    103c:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    103e:	80 e1       	ldi	r24, 0x10	; 16
    1040:	27 c0       	rjmp	.+78     	; 0x1090 <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1042:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
    1044:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1046:	88 e1       	ldi	r24, 0x18	; 24
    1048:	3a c0       	rjmp	.+116    	; 0x10be <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    104a:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
    104c:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    104e:	88 e1       	ldi	r24, 0x18	; 24
    1050:	1f c0       	rjmp	.+62     	; 0x1090 <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    1052:	62 30       	cpi	r22, 0x02	; 2
    1054:	71 05       	cpc	r23, r1
    1056:	c9 f0       	breq	.+50     	; 0x108a <setWaveformGenerationMode+0xe8>
    1058:	63 30       	cpi	r22, 0x03	; 3
    105a:	71 05       	cpc	r23, r1
    105c:	40 f4       	brcc	.+16     	; 0x106e <setWaveformGenerationMode+0xcc>
    105e:	61 15       	cp	r22, r1
    1060:	71 05       	cpc	r23, r1
    1062:	79 f0       	breq	.+30     	; 0x1082 <setWaveformGenerationMode+0xe0>
    1064:	61 30       	cpi	r22, 0x01	; 1
    1066:	71 05       	cpc	r23, r1
    1068:	09 f0       	breq	.+2      	; 0x106c <setWaveformGenerationMode+0xca>
    106a:	41 c0       	rjmp	.+130    	; 0x10ee <setWaveformGenerationMode+0x14c>
    106c:	25 c0       	rjmp	.+74     	; 0x10b8 <setWaveformGenerationMode+0x116>
    106e:	64 30       	cpi	r22, 0x04	; 4
    1070:	71 05       	cpc	r23, r1
    1072:	c1 f0       	breq	.+48     	; 0x10a4 <setWaveformGenerationMode+0x102>
    1074:	64 30       	cpi	r22, 0x04	; 4
    1076:	71 05       	cpc	r23, r1
    1078:	88 f0       	brcs	.+34     	; 0x109c <setWaveformGenerationMode+0xfa>
    107a:	65 30       	cpi	r22, 0x05	; 5
    107c:	71 05       	cpc	r23, r1
    107e:	b9 f5       	brne	.+110    	; 0x10ee <setWaveformGenerationMode+0x14c>
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1082:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1084:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1086:	88 e0       	ldi	r24, 0x08	; 8
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    108a:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
    108c:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
    108e:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    1090:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
    1092:	16 c0       	rjmp	.+44     	; 0x10c0 <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    1094:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
    1096:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	fa cf       	rjmp	.-12     	; 0x1090 <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    109c:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    109e:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    10a0:	88 e0       	ldi	r24, 0x08	; 8
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    10a4:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    10a6:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    10aa:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    10ae:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    10b0:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    10b2:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    10b4:	23 e0       	ldi	r18, 0x03	; 3
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    10b8:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    10ba:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    10bc:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    10be:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    10c0:	a1 81       	ldd	r26, Z+1	; 0x01
    10c2:	b2 81       	ldd	r27, Z+2	; 0x02
    10c4:	4c 91       	ld	r20, X
    10c6:	43 2b       	or	r20, r19
    10c8:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    10ca:	a1 81       	ldd	r26, Z+1	; 0x01
    10cc:	b2 81       	ldd	r27, Z+2	; 0x02
    10ce:	3c 91       	ld	r19, X
    10d0:	20 95       	com	r18
    10d2:	23 23       	and	r18, r19
    10d4:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    10d6:	a3 81       	ldd	r26, Z+3	; 0x03
    10d8:	b4 81       	ldd	r27, Z+4	; 0x04
    10da:	2c 91       	ld	r18, X
    10dc:	29 2b       	or	r18, r25
    10de:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    10e0:	03 80       	ldd	r0, Z+3	; 0x03
    10e2:	f4 81       	ldd	r31, Z+4	; 0x04
    10e4:	e0 2d       	mov	r30, r0
    10e6:	90 81       	ld	r25, Z
    10e8:	80 95       	com	r24
    10ea:	89 23       	and	r24, r25
    10ec:	80 83       	st	Z, r24
    10ee:	08 95       	ret

000010f0 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    10f0:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    10f2:	ed 91       	ld	r30, X+
    10f4:	fc 91       	ld	r31, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	05 80       	ldd	r0, Z+5	; 0x05
    10fa:	f6 81       	ldd	r31, Z+6	; 0x06
    10fc:	e0 2d       	mov	r30, r0
    10fe:	20 81       	ld	r18, Z
    1100:	14 96       	adiw	r26, 0x04	; 4
    1102:	8d 91       	ld	r24, X+
    1104:	9c 91       	ld	r25, X
    1106:	15 97       	sbiw	r26, 0x05	; 5
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	11 f4       	brne	.+4      	; 0x1110 <enableTimerInterrupt+0x20>
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <enableTimerInterrupt+0x22>
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	82 2b       	or	r24, r18
    1114:	80 83       	st	Z, r24
}
    1116:	08 95       	ret

00001118 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	9f 81       	ldd	r25, Y+7	; 0x07
    1122:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
    1126:	ce 01       	movw	r24, r28
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	0e 94 41 07 	call	0xe82	; 0xe82 <setCompareMatchOutputMode>
}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	0e 94 41 07 	call	0xe82	; 0xe82 <setCompareMatchOutputMode>
}
    113e:	08 95       	ret

00001140 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    1140:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    1142:	a0 81       	ld	r26, Z
    1144:	b1 81       	ldd	r27, Z+1	; 0x01
    1146:	8c 91       	ld	r24, X
    1148:	82 ff       	sbrs	r24, 2
    114a:	0d c0       	rjmp	.+26     	; 0x1166 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    114c:	8f b7       	in	r24, 0x3f	; 63
		cli();
    114e:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    1150:	a2 81       	ldd	r26, Z+2	; 0x02
    1152:	b3 81       	ldd	r27, Z+3	; 0x03
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	7c 93       	st	X, r23
    1158:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    115a:	02 80       	ldd	r0, Z+2	; 0x02
    115c:	f3 81       	ldd	r31, Z+3	; 0x03
    115e:	e0 2d       	mov	r30, r0
    1160:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    1162:	8f bf       	out	0x3f, r24	; 63
    1164:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    1166:	02 80       	ldd	r0, Z+2	; 0x02
    1168:	f3 81       	ldd	r31, Z+3	; 0x03
    116a:	e0 2d       	mov	r30, r0
    116c:	70 83       	st	Z, r23
    116e:	08 95       	ret

00001170 <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    1170:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    1172:	a0 81       	ld	r26, Z
    1174:	b1 81       	ldd	r27, Z+1	; 0x01
    1176:	8c 91       	ld	r24, X
    1178:	82 ff       	sbrs	r24, 2
    117a:	09 c0       	rjmp	.+18     	; 0x118e <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    117c:	2f b7       	in	r18, 0x3f	; 63
		cli();
    117e:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
    1180:	02 80       	ldd	r0, Z+2	; 0x02
    1182:	f3 81       	ldd	r31, Z+3	; 0x03
    1184:	e0 2d       	mov	r30, r0
    1186:	80 81       	ld	r24, Z
    1188:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
    118a:	2f bf       	out	0x3f, r18	; 63
    118c:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    118e:	02 80       	ldd	r0, Z+2	; 0x02
    1190:	f3 81       	ldd	r31, Z+3	; 0x03
    1192:	e0 2d       	mov	r30, r0
    1194:	90 81       	ld	r25, Z
    1196:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
    1198:	08 95       	ret

0000119a <resetStatusBitmask>:

#include "reset_condition.h"

uint16_t resetStatusBitmask() {
	uint16_t mask = 0;
	uint8_t status = getResetStatus();
    119a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <getResetStatus>
	if (status & _BV(PORF)) {
    119e:	80 ff       	sbrs	r24, 0
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <resetStatusBitmask+0xe>
		// Power-On-Reset-Flag
		mask |= _BV(15);
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e8       	ldi	r19, 0x80	; 128
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <resetStatusBitmask+0x12>
 */ 

#include "reset_condition.h"

uint16_t resetStatusBitmask() {
	uint16_t mask = 0;
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t status = getResetStatus();
	if (status & _BV(PORF)) {
		// Power-On-Reset-Flag
		mask |= _BV(15);
	}
	if (status & _BV(WDRF)) {
    11ac:	83 fd       	sbrc	r24, 3
		// Watch-Dog-Reset-Flag
		mask |= _BV(14);
    11ae:	30 64       	ori	r19, 0x40	; 64
	}
	if (status & _BV(BORF)) {
    11b0:	82 fd       	sbrc	r24, 2
		// Brown-Out-Reset-Flag
		mask |= _BV(13);
    11b2:	30 62       	ori	r19, 0x20	; 32
	}
	if (!mask) mask = _BV(12);
    11b4:	21 15       	cp	r18, r1
    11b6:	31 05       	cpc	r19, r1
    11b8:	11 f4       	brne	.+4      	; 0x11be <resetStatusBitmask+0x24>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e1       	ldi	r19, 0x10	; 16
	return mask;
}
    11be:	c9 01       	movw	r24, r18
    11c0:	08 95       	ret

000011c2 <blink_reset_condition>:

void blink_reset_condition(PLedGroup leds) {
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
	disableLeds(leds);
    11c8:	0e 94 84 09 	call	0x1308	; 0x1308 <disableLeds>
	blinkLeds(leds, resetStatusBitmask(), 4);
    11cc:	0e 94 cd 08 	call	0x119a	; 0x119a <resetStatusBitmask>
    11d0:	bc 01       	movw	r22, r24
    11d2:	ce 01       	movw	r24, r28
    11d4:	44 e0       	ldi	r20, 0x04	; 4
    11d6:	0e 94 aa 09 	call	0x1354	; 0x1354 <blinkLeds>
}
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <HARDWARE_RESET>:
#include "../anton_std.h"
#include "hardware_reset.h"
#include <avr/wdt.h>

void HARDWARE_RESET() {
	cli();
    11e0:	f8 94       	cli
	// Clear this bit to enable WDE. Should already be 0, but make sure.
	MCUSR &= ~_BV(WDRF);
    11e2:	84 b7       	in	r24, 0x34	; 52
    11e4:	87 7f       	andi	r24, 0xF7	; 247
    11e6:	84 bf       	out	0x34, r24	; 52
	wdt_enable(WDTO_15MS); // Shortest possilbe value.
    11e8:	28 e0       	ldi	r18, 0x08	; 8
    11ea:	88 e1       	ldi	r24, 0x18	; 24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	a8 95       	wdr
    11f4:	80 93 60 00 	sts	0x0060, r24
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	20 93 60 00 	sts	0x0060, r18
    11fe:	ff cf       	rjmp	.-2      	; 0x11fe <HARDWARE_RESET+0x1e>

00001200 <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
    1200:	fc 01       	movw	r30, r24
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	0e 94 27 07 	call	0xe4e	; 0xe4e <writePin>
}
    120e:	08 95       	ret

00001210 <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
    1210:	fc 01       	movw	r30, r24
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	0e 94 27 07 	call	0xe4e	; 0xe4e <writePin>
}
    121e:	08 95       	ret

00001220 <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1220:	fc 01       	movw	r30, r24
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	0e 94 27 07 	call	0xe4e	; 0xe4e <writePin>
}
    122a:	08 95       	ret

0000122c <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
    122c:	af 92       	push	r10
    122e:	bf 92       	push	r11
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	6c 01       	movw	r12, r24
    1242:	5b 01       	movw	r10, r22
	uint16_t iMask = 1 << (16 - leds->count);
    1244:	dc 01       	movw	r26, r24
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	0c 91       	ld	r16, X
    124a:	12 97       	sbiw	r26, 0x02	; 2
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	80 e1       	ldi	r24, 0x10	; 16
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	80 1b       	sub	r24, r16
    1254:	91 0b       	sbc	r25, r17
    1256:	c1 e0       	ldi	r28, 0x01	; 1
    1258:	d0 e0       	ldi	r29, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <setLeds+0x34>
    125c:	cc 0f       	add	r28, r28
    125e:	dd 1f       	adc	r29, r29
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <setLeds+0x30>
	for (int i = leds->count - 1; i >= 0; i--) {
    1264:	01 50       	subi	r16, 0x01	; 1
    1266:	10 40       	sbci	r17, 0x00	; 0
    1268:	78 01       	movw	r14, r16
    126a:	ee 0c       	add	r14, r14
    126c:	ff 1c       	adc	r15, r15
    126e:	17 c0       	rjmp	.+46     	; 0x129e <setLeds+0x72>
		setLed(leds->leds[i], iMask & mask);
    1270:	d6 01       	movw	r26, r12
    1272:	ed 91       	ld	r30, X+
    1274:	fc 91       	ld	r31, X
    1276:	ee 0d       	add	r30, r14
    1278:	ff 1d       	adc	r31, r15
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    127a:	01 90       	ld	r0, Z+
    127c:	f0 81       	ld	r31, Z
    127e:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
    1280:	be 01       	movw	r22, r28
    1282:	6a 21       	and	r22, r10
    1284:	7b 21       	and	r23, r11
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	0e 94 27 07 	call	0xe4e	; 0xe4e <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    128e:	cc 0f       	add	r28, r28
    1290:	dd 1f       	adc	r29, r29
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
    1292:	01 50       	subi	r16, 0x01	; 1
    1294:	10 40       	sbci	r17, 0x00	; 0
    1296:	ee ef       	ldi	r30, 0xFE	; 254
    1298:	ff ef       	ldi	r31, 0xFF	; 255
    129a:	ee 0e       	add	r14, r30
    129c:	ff 1e       	adc	r15, r31
    129e:	ff ef       	ldi	r31, 0xFF	; 255
    12a0:	0f 3f       	cpi	r16, 0xFF	; 255
    12a2:	1f 07       	cpc	r17, r31
    12a4:	29 f7       	brne	.-54     	; 0x1270 <setLeds+0x44>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	08 95       	ret

000012bc <enableLeds>:

void enableLeds(PLedGroup leds) {
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    12ca:	dc 01       	movw	r26, r24
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	ec 90       	ld	r14, X
    12d0:	12 97       	sbiw	r26, 0x02	; 2
    12d2:	ff 24       	eor	r15, r15
    12d4:	c0 e0       	ldi	r28, 0x00	; 0
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	0d c0       	rjmp	.+26     	; 0x12f4 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    12da:	ce 01       	movw	r24, r28
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	d8 01       	movw	r26, r16
    12e2:	ed 91       	ld	r30, X+
    12e4:	fc 91       	ld	r31, X
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	0e 94 00 09 	call	0x1200	; 0x1200 <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    12f2:	21 96       	adiw	r28, 0x01	; 1
    12f4:	ce 15       	cp	r28, r14
    12f6:	df 05       	cpc	r29, r15
    12f8:	84 f3       	brlt	.-32     	; 0x12da <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	08 95       	ret

00001308 <disableLeds>:

void disableLeds(PLedGroup leds) {
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    1316:	dc 01       	movw	r26, r24
    1318:	12 96       	adiw	r26, 0x02	; 2
    131a:	ec 90       	ld	r14, X
    131c:	12 97       	sbiw	r26, 0x02	; 2
    131e:	ff 24       	eor	r15, r15
    1320:	c0 e0       	ldi	r28, 0x00	; 0
    1322:	d0 e0       	ldi	r29, 0x00	; 0
    1324:	0d c0       	rjmp	.+26     	; 0x1340 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    1326:	ce 01       	movw	r24, r28
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	d8 01       	movw	r26, r16
    132e:	ed 91       	ld	r30, X+
    1330:	fc 91       	ld	r31, X
    1332:	e8 0f       	add	r30, r24
    1334:	f9 1f       	adc	r31, r25
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	0e 94 08 09 	call	0x1210	; 0x1210 <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    133e:	21 96       	adiw	r28, 0x01	; 1
    1340:	ce 15       	cp	r28, r14
    1342:	df 05       	cpc	r29, r15
    1344:	84 f3       	brlt	.-32     	; 0x1326 <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	08 95       	ret

00001354 <blinkLeds>:

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	0f 92       	push	r0
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	6c 01       	movw	r12, r24
    136a:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    136c:	ff 24       	eor	r15, r15
    136e:	1c c0       	rjmp	.+56     	; 0x13a8 <blinkLeds+0x54>
		setLeds(leds, ledMask);
    1370:	c6 01       	movw	r24, r12
    1372:	b8 01       	movw	r22, r16
    1374:	49 83       	std	Y+1, r20	; 0x01
    1376:	0e 94 16 09 	call	0x122c	; 0x122c <setLeds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	94 e3       	ldi	r25, 0x34	; 52
    137e:	ac e0       	ldi	r26, 0x0C	; 12
    1380:	81 50       	subi	r24, 0x01	; 1
    1382:	90 40       	sbci	r25, 0x00	; 0
    1384:	a0 40       	sbci	r26, 0x00	; 0
    1386:	e1 f7       	brne	.-8      	; 0x1380 <blinkLeds+0x2c>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <blinkLeds+0x36>
    138a:	00 00       	nop
		_delay_ms(200);
		disableLeds(leds);
    138c:	c6 01       	movw	r24, r12
    138e:	0e 94 84 09 	call	0x1308	; 0x1308 <disableLeds>
    1392:	8f ef       	ldi	r24, 0xFF	; 255
    1394:	94 e3       	ldi	r25, 0x34	; 52
    1396:	ac e0       	ldi	r26, 0x0C	; 12
    1398:	81 50       	subi	r24, 0x01	; 1
    139a:	90 40       	sbci	r25, 0x00	; 0
    139c:	a0 40       	sbci	r26, 0x00	; 0
    139e:	e1 f7       	brne	.-8      	; 0x1398 <blinkLeds+0x44>
    13a0:	00 c0       	rjmp	.+0      	; 0x13a2 <blinkLeds+0x4e>
    13a2:	00 00       	nop
		disableLed(leds->leds[i]);
	}
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    13a4:	f3 94       	inc	r15
    13a6:	49 81       	ldd	r20, Y+1	; 0x01
    13a8:	f4 16       	cp	r15, r20
    13aa:	10 f3       	brcs	.-60     	; 0x1370 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		_delay_ms(200);
		disableLeds(leds);
		_delay_ms(200);
	}
}
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	08 95       	ret

000013be <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, const uint8_t times) {
    13be:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	7f ef       	ldi	r23, 0xFF	; 255
    13c4:	0e 94 aa 09 	call	0x1354	; 0x1354 <blinkLeds>
}
    13c8:	08 95       	ret

000013ca <_exit>:
    13ca:	f8 94       	cli

000013cc <__stop_program>:
    13cc:	ff cf       	rjmp	.-2      	; 0x13cc <__stop_program>
