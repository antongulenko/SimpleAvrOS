
Main-NIBObee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000029c2  00002a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025a  00800202  00800202  00002b58  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000026f  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000370  00000000  00000000  0000368b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000014f0  00000000  00000000  000039fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000052b2  00000000  00000000  00004eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001081  00000000  00000000  0000a19d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005808  00000000  00000000  0000b21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a70  00000000  00000000  00010a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001b33  00000000  00000000  00011498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000025ad  00000000  00000000  00012fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00060da6  00000000  00000000  00015578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000006e4  00000000  00000000  0007631e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002c0  00000000  00000000  00076a02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__vector_26>
      6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      7c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      80:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_32>
      84:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_33>
      88:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	c0 e0       	ldi	r28, 0x00	; 0
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ec       	ldi	r30, 0xC2	; 194
      a0:	f9 e2       	ldi	r31, 0x29	; 41
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 30       	cpi	r26, 0x02	; 2
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	14 e0       	ldi	r17, 0x04	; 4
      b4:	a2 e0       	ldi	r26, 0x02	; 2
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 35       	cpi	r26, 0x5C	; 92
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 bf 00 	call	0x17e	; 0x17e <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 cf 00 	call	0x19e	; 0x19e <init_ports_m1284P>

000000ca <init_nibobee_leds_kernel_init>:
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
}
KERNEL_INIT(init_nibobee_leds)
      ca:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <init_nibobee_leds>

000000ce <init_nibobee_buttons_kernel_init>:
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
}
KERNEL_INIT(init_nibobee_buttons)
      ce:	0e 94 48 02 	call	0x490	; 0x490 <init_nibobee_buttons>

000000d2 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      d2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <init_timer_m1284P>

000000d6 <init_nibobee_motors_kernel_init>:
	// Don't know why, but the lib does this... Seems to enable internal PullUp.
	// Pins will be controlled by the timer anyways.
	setPinOne(RightMotorBase->pwmTimer->outputComparePin);
	setPinOne(LeftMotorBase->pwmTimer->outputComparePin);
}
KERNEL_INIT(init_nibobee_motors)
      d6:	0e 94 84 03 	call	0x708	; 0x708 <init_nibobee_motors>

000000da <init_timer_kernel_init>:
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	setTimerCompareValue(Timer3A, 2500);
	setTimerCompareValue(Timer3B, 2500);
}
KERNEL_INIT(init_timer)
      da:	0e 94 bf 03 	call	0x77e	; 0x77e <init_timer>

000000de <init_smooth_motors_kernel_init>:

void init_smooth_motors() {
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, 40, 3000)
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, 40, 3000)
}
KERNEL_INIT(init_smooth_motors)
      de:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <init_smooth_motors>

000000e2 <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      e2:	0e 94 44 05 	call	0xa88	; 0xa88 <init_twi>

000000e6 <init_kernel_kernel_init>:
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
	enableTimerInterrupt(CLOCKTIMER_A);
	sei();
}
KERNEL_INIT(init_kernel)
      e6:	0e 94 48 0a 	call	0x1490	; 0x1490 <init_kernel>
      ea:	0e 94 94 0c 	call	0x1928	; 0x1928 <main>
      ee:	0c 94 df 14 	jmp	0x29be	; 0x29be <_exit>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <twi_stop>:
static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base | _BV(TWSTO);
      f6:	85 e9       	ldi	r24, 0x95	; 149
      f8:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
      fc:	10 92 ea 03 	sts	0x03EA, r1
     100:	10 92 e9 03 	sts	0x03E9, r1
}
     104:	08 95       	ret

00000106 <twi_ack_receive>:
		twi_start();
	}	
}

static inline void twi_ack_receive() {
	if (alreadyHandled < twi_buffer.size - 1) {
     106:	80 91 e4 03 	lds	r24, 0x03E4
     10a:	90 91 e5 03 	lds	r25, 0x03E5
     10e:	01 97       	sbiw	r24, 0x01	; 1
     110:	20 91 8a 03 	lds	r18, 0x038A
     114:	30 91 8b 03 	lds	r19, 0x038B
     118:	28 17       	cp	r18, r24
     11a:	39 07       	cpc	r19, r25
     11c:	10 f4       	brcc	.+4      	; 0x122 <twi_ack_receive+0x1c>
		twi_ack(); // Still more than one byte to go.
     11e:	85 ec       	ldi	r24, 0xC5	; 197
     120:	01 c0       	rjmp	.+2      	; 0x124 <twi_ack_receive+0x1e>
	} else {
		twi_continue();  // Want to receive one more byte. Next byte will get NOT ACK.
     122:	85 e8       	ldi	r24, 0x85	; 133
     124:	80 93 bc 00 	sts	0x00BC, r24
     128:	08 95       	ret

0000012a <twi_read_byte>:
	}
}

static inline void twi_read_byte() {
	twi_buffer.data[alreadyHandled++] = TWDR;
     12a:	80 91 8a 03 	lds	r24, 0x038A
     12e:	90 91 8b 03 	lds	r25, 0x038B
     132:	20 91 bb 00 	lds	r18, 0x00BB
     136:	e0 91 e2 03 	lds	r30, 0x03E2
     13a:	f0 91 e3 03 	lds	r31, 0x03E3
     13e:	e8 0f       	add	r30, r24
     140:	f9 1f       	adc	r31, r25
     142:	20 83       	st	Z, r18
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	90 93 8b 03 	sts	0x038B, r25
     14a:	80 93 8a 03 	sts	0x038A, r24
}
     14e:	08 95       	ret

00000150 <fillSendBuffer>:
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
	}
#endif

static inline void fillSendBuffer(byte operation, TWIBuffer parameters) {
     150:	9b 01       	movw	r18, r22
	sendBuffer.data[0] = operation;
     152:	e0 91 a5 01 	lds	r30, 0x01A5
     156:	f0 91 a6 01 	lds	r31, 0x01A6
     15a:	80 83       	st	Z, r24
	sendBuffer.size = parameters.size + 1;
     15c:	cb 01       	movw	r24, r22
     15e:	01 96       	adiw	r24, 0x01	; 1
     160:	90 93 a8 01 	sts	0x01A8, r25
     164:	80 93 a7 01 	sts	0x01A7, r24
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
     168:	e0 91 a5 01 	lds	r30, 0x01A5
     16c:	f0 91 a6 01 	lds	r31, 0x01A6
     170:	31 96       	adiw	r30, 0x01	; 1
     172:	cf 01       	movw	r24, r30
     174:	ba 01       	movw	r22, r20
     176:	a9 01       	movw	r20, r18
     178:	0e 94 cf 14 	call	0x299e	; 0x299e <memcpy>
}
     17c:	08 95       	ret

0000017e <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	80 93 02 02 	sts	0x0202, r24
	MCUSR = 0;
     184:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     186:	88 e1       	ldi	r24, 0x18	; 24
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	80 93 60 00 	sts	0x0060, r24
     190:	10 92 60 00 	sts	0x0060, r1
     194:	0f be       	out	0x3f, r0	; 63
	#endif
}
     196:	08 95       	ret

00000198 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     198:	80 91 02 02 	lds	r24, 0x0202
     19c:	08 95       	ret

0000019e <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     19e:	ac e0       	ldi	r26, 0x0C	; 12
     1a0:	b4 e0       	ldi	r27, 0x04	; 4
     1a2:	e6 ee       	ldi	r30, 0xE6	; 230
     1a4:	f1 e0       	ldi	r31, 0x01	; 1
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	01 90       	ld	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	81 50       	subi	r24, 0x01	; 1
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <init_ports_m1284P+0xa>
     1b0:	8c e0       	ldi	r24, 0x0C	; 12
     1b2:	94 e0       	ldi	r25, 0x04	; 4
     1b4:	90 93 c0 03 	sts	0x03C0, r25
     1b8:	80 93 bf 03 	sts	0x03BF, r24
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	20 93 c1 03 	sts	0x03C1, r18
     1c2:	90 93 40 03 	sts	0x0340, r25
     1c6:	80 93 3f 03 	sts	0x033F, r24
     1ca:	22 e0       	ldi	r18, 0x02	; 2
     1cc:	20 93 41 03 	sts	0x0341, r18
     1d0:	90 93 0a 04 	sts	0x040A, r25
     1d4:	80 93 09 04 	sts	0x0409, r24
     1d8:	24 e0       	ldi	r18, 0x04	; 4
     1da:	20 93 0b 04 	sts	0x040B, r18
     1de:	90 93 e7 03 	sts	0x03E7, r25
     1e2:	80 93 e6 03 	sts	0x03E6, r24
     1e6:	28 e0       	ldi	r18, 0x08	; 8
     1e8:	20 93 e8 03 	sts	0x03E8, r18
     1ec:	90 93 7c 03 	sts	0x037C, r25
     1f0:	80 93 7b 03 	sts	0x037B, r24
     1f4:	20 e1       	ldi	r18, 0x10	; 16
     1f6:	20 93 7d 03 	sts	0x037D, r18
     1fa:	90 93 14 02 	sts	0x0214, r25
     1fe:	80 93 13 02 	sts	0x0213, r24
     202:	20 e2       	ldi	r18, 0x20	; 32
     204:	20 93 15 02 	sts	0x0215, r18
     208:	90 93 31 02 	sts	0x0231, r25
     20c:	80 93 30 02 	sts	0x0230, r24
     210:	20 e4       	ldi	r18, 0x40	; 64
     212:	20 93 32 02 	sts	0x0232, r18
     216:	90 93 92 03 	sts	0x0392, r25
     21a:	80 93 91 03 	sts	0x0391, r24
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	80 93 93 03 	sts	0x0393, r24
	INIT_PORT_AND_PINS(B);
     224:	a1 e8       	ldi	r26, 0x81	; 129
     226:	b3 e0       	ldi	r27, 0x03	; 3
     228:	e0 ee       	ldi	r30, 0xE0	; 224
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	86 e0       	ldi	r24, 0x06	; 6
     22e:	01 90       	ld	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	81 50       	subi	r24, 0x01	; 1
     234:	e1 f7       	brne	.-8      	; 0x22e <init_ports_m1284P+0x90>
     236:	81 e8       	ldi	r24, 0x81	; 129
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	90 93 ff 03 	sts	0x03FF, r25
     23e:	80 93 fe 03 	sts	0x03FE, r24
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	20 93 00 04 	sts	0x0400, r18
     248:	90 93 8f 03 	sts	0x038F, r25
     24c:	80 93 8e 03 	sts	0x038E, r24
     250:	22 e0       	ldi	r18, 0x02	; 2
     252:	20 93 90 03 	sts	0x0390, r18
     256:	90 93 38 02 	sts	0x0238, r25
     25a:	80 93 37 02 	sts	0x0237, r24
     25e:	24 e0       	ldi	r18, 0x04	; 4
     260:	20 93 39 02 	sts	0x0239, r18
     264:	90 93 25 04 	sts	0x0425, r25
     268:	80 93 24 04 	sts	0x0424, r24
     26c:	28 e0       	ldi	r18, 0x08	; 8
     26e:	20 93 26 04 	sts	0x0426, r18
     272:	90 93 02 04 	sts	0x0402, r25
     276:	80 93 01 04 	sts	0x0401, r24
     27a:	20 e1       	ldi	r18, 0x10	; 16
     27c:	20 93 03 04 	sts	0x0403, r18
     280:	90 93 e0 03 	sts	0x03E0, r25
     284:	80 93 df 03 	sts	0x03DF, r24
     288:	20 e2       	ldi	r18, 0x20	; 32
     28a:	20 93 e1 03 	sts	0x03E1, r18
     28e:	90 93 4b 04 	sts	0x044B, r25
     292:	80 93 4a 04 	sts	0x044A, r24
     296:	20 e4       	ldi	r18, 0x40	; 64
     298:	20 93 4c 04 	sts	0x044C, r18
     29c:	90 93 95 03 	sts	0x0395, r25
     2a0:	80 93 94 03 	sts	0x0394, r24
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	80 93 96 03 	sts	0x0396, r24
	INIT_PORT_AND_PINS(C);
     2aa:	a9 ea       	ldi	r26, 0xA9	; 169
     2ac:	b3 e0       	ldi	r27, 0x03	; 3
     2ae:	ea ed       	ldi	r30, 0xDA	; 218
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	86 e0       	ldi	r24, 0x06	; 6
     2b4:	01 90       	ld	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	81 50       	subi	r24, 0x01	; 1
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <init_ports_m1284P+0x116>
     2bc:	89 ea       	ldi	r24, 0xA9	; 169
     2be:	93 e0       	ldi	r25, 0x03	; 3
     2c0:	90 93 88 03 	sts	0x0388, r25
     2c4:	80 93 87 03 	sts	0x0387, r24
     2c8:	21 e0       	ldi	r18, 0x01	; 1
     2ca:	20 93 89 03 	sts	0x0389, r18
     2ce:	90 93 1d 02 	sts	0x021D, r25
     2d2:	80 93 1c 02 	sts	0x021C, r24
     2d6:	22 e0       	ldi	r18, 0x02	; 2
     2d8:	20 93 1e 02 	sts	0x021E, r18
     2dc:	90 93 5a 03 	sts	0x035A, r25
     2e0:	80 93 59 03 	sts	0x0359, r24
     2e4:	24 e0       	ldi	r18, 0x04	; 4
     2e6:	20 93 5b 03 	sts	0x035B, r18
     2ea:	90 93 79 03 	sts	0x0379, r25
     2ee:	80 93 78 03 	sts	0x0378, r24
     2f2:	28 e0       	ldi	r18, 0x08	; 8
     2f4:	20 93 7a 03 	sts	0x037A, r18
     2f8:	90 93 20 02 	sts	0x0220, r25
     2fc:	80 93 1f 02 	sts	0x021F, r24
     300:	20 e1       	ldi	r18, 0x10	; 16
     302:	20 93 21 02 	sts	0x0221, r18
     306:	90 93 7f 03 	sts	0x037F, r25
     30a:	80 93 7e 03 	sts	0x037E, r24
     30e:	20 e2       	ldi	r18, 0x20	; 32
     310:	20 93 80 03 	sts	0x0380, r18
     314:	90 93 ce 03 	sts	0x03CE, r25
     318:	80 93 cd 03 	sts	0x03CD, r24
     31c:	20 e4       	ldi	r18, 0x40	; 64
     31e:	20 93 cf 03 	sts	0x03CF, r18
     322:	90 93 2b 02 	sts	0x022B, r25
     326:	80 93 2a 02 	sts	0x022A, r24
     32a:	80 e8       	ldi	r24, 0x80	; 128
     32c:	80 93 2c 02 	sts	0x022C, r24
	INIT_PORT_AND_PINS(D);
     330:	ac e5       	ldi	r26, 0x5C	; 92
     332:	b3 e0       	ldi	r27, 0x03	; 3
     334:	e4 ed       	ldi	r30, 0xD4	; 212
     336:	f1 e0       	ldi	r31, 0x01	; 1
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	e1 f7       	brne	.-8      	; 0x33a <init_ports_m1284P+0x19c>
     342:	8c e5       	ldi	r24, 0x5C	; 92
     344:	93 e0       	ldi	r25, 0x03	; 3
     346:	90 93 3e 02 	sts	0x023E, r25
     34a:	80 93 3d 02 	sts	0x023D, r24
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	20 93 3f 02 	sts	0x023F, r18
     354:	90 93 3d 04 	sts	0x043D, r25
     358:	80 93 3c 04 	sts	0x043C, r24
     35c:	22 e0       	ldi	r18, 0x02	; 2
     35e:	20 93 3e 04 	sts	0x043E, r18
     362:	90 93 c3 03 	sts	0x03C3, r25
     366:	80 93 c2 03 	sts	0x03C2, r24
     36a:	24 e0       	ldi	r18, 0x04	; 4
     36c:	20 93 c4 03 	sts	0x03C4, r18
     370:	90 93 ec 03 	sts	0x03EC, r25
     374:	80 93 eb 03 	sts	0x03EB, r24
     378:	28 e0       	ldi	r18, 0x08	; 8
     37a:	20 93 ed 03 	sts	0x03ED, r18
     37e:	90 93 d9 03 	sts	0x03D9, r25
     382:	80 93 d8 03 	sts	0x03D8, r24
     386:	20 e1       	ldi	r18, 0x10	; 16
     388:	20 93 da 03 	sts	0x03DA, r18
     38c:	90 93 bd 03 	sts	0x03BD, r25
     390:	80 93 bc 03 	sts	0x03BC, r24
     394:	20 e2       	ldi	r18, 0x20	; 32
     396:	20 93 be 03 	sts	0x03BE, r18
     39a:	90 93 05 04 	sts	0x0405, r25
     39e:	80 93 04 04 	sts	0x0404, r24
     3a2:	20 e4       	ldi	r18, 0x40	; 64
     3a4:	20 93 06 04 	sts	0x0406, r18
     3a8:	90 93 1a 02 	sts	0x021A, r25
     3ac:	80 93 19 02 	sts	0x0219, r24
     3b0:	80 e8       	ldi	r24, 0x80	; 128
     3b2:	80 93 1b 02 	sts	0x021B, r24
}
     3b6:	08 95       	ret

000003b8 <init_nibobee_leds>:
PLed rightLedsArray[] = { &RightYellow_, &RightRed_ };
PLed leftLedsArray[] = { &LeftYellow_, &LeftRed_ };
PLed allLedsArray[] = { &LeftYellow_, &LeftRed_, &RightRed_, &RightYellow_ };

void init_nibobee_leds() {
	INIT_LED(LeftYellow, PinB0)
     3b8:	8e ef       	ldi	r24, 0xFE	; 254
     3ba:	93 e0       	ldi	r25, 0x03	; 3
     3bc:	90 93 34 02 	sts	0x0234, r25
     3c0:	80 93 33 02 	sts	0x0233, r24

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     3c4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	INIT_LED(LeftRed, PinB1)
     3c8:	8e e8       	ldi	r24, 0x8E	; 142
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	90 93 36 02 	sts	0x0236, r25
     3d0:	80 93 35 02 	sts	0x0235, r24
     3d4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	INIT_LED(RightRed, PinB2)
     3d8:	87 e3       	ldi	r24, 0x37	; 55
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	90 93 08 04 	sts	0x0408, r25
     3e0:	80 93 07 04 	sts	0x0407, r24
     3e4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	INIT_LED(RightYellow, PinB3)
     3e8:	84 e2       	ldi	r24, 0x24	; 36
     3ea:	94 e0       	ldi	r25, 0x04	; 4
     3ec:	90 93 de 03 	sts	0x03DE, r25
     3f0:	80 93 dd 03 	sts	0x03DD, r24
     3f4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 2)
     3f8:	a7 e4       	ldi	r26, 0x47	; 71
     3fa:	b4 e0       	ldi	r27, 0x04	; 4
     3fc:	e1 ed       	ldi	r30, 0xD1	; 209
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	01 90       	ld	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	81 50       	subi	r24, 0x01	; 1
     408:	e1 f7       	brne	.-8      	; 0x402 <init_nibobee_leds+0x4a>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     40a:	ad e2       	ldi	r26, 0x2D	; 45
     40c:	b2 e0       	ldi	r27, 0x02	; 2
     40e:	ee ec       	ldi	r30, 0xCE	; 206
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	83 e0       	ldi	r24, 0x03	; 3
     414:	01 90       	ld	r0, Z+
     416:	0d 92       	st	X+, r0
     418:	81 50       	subi	r24, 0x01	; 1
     41a:	e1 f7       	brne	.-8      	; 0x414 <init_nibobee_leds+0x5c>
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
     41c:	a1 ef       	ldi	r26, 0xF1	; 241
     41e:	b3 e0       	ldi	r27, 0x03	; 3
     420:	eb ec       	ldi	r30, 0xCB	; 203
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	01 90       	ld	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	81 50       	subi	r24, 0x01	; 1
     42c:	e1 f7       	brne	.-8      	; 0x426 <init_nibobee_leds+0x6e>
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
     42e:	ad e4       	ldi	r26, 0x4D	; 77
     430:	b4 e0       	ldi	r27, 0x04	; 4
     432:	e8 ec       	ldi	r30, 0xC8	; 200
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	01 90       	ld	r0, Z+
     43a:	0d 92       	st	X+, r0
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	e1 f7       	brne	.-8      	; 0x438 <init_nibobee_leds+0x80>
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
     440:	ae ee       	ldi	r26, 0xEE	; 238
     442:	b3 e0       	ldi	r27, 0x03	; 3
     444:	e5 ec       	ldi	r30, 0xC5	; 197
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	83 e0       	ldi	r24, 0x03	; 3
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	81 50       	subi	r24, 0x01	; 1
     450:	e1 f7       	brne	.-8      	; 0x44a <init_nibobee_leds+0x92>
}
     452:	08 95       	ret

00000454 <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     462:	88 81       	ld	r24, Y
     464:	82 ff       	sbrs	r24, 2
     466:	04 c0       	rjmp	.+8      	; 0x470 <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     468:	89 81       	ldd	r24, Y+1	; 0x01
     46a:	9a 81       	ldd	r25, Y+2	; 0x02
     46c:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
}
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ec 01       	movw	r28, r24
	initButton(button->button);
     47c:	88 81       	ld	r24, Y
     47e:	99 81       	ldd	r25, Y+1	; 0x01
     480:	0e 94 2a 02 	call	0x454	; 0x454 <initButton>
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     484:	8a 81       	ldd	r24, Y+2	; 0x02
     486:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <enablePinChangeInterrupt>
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <init_nibobee_buttons>:
#include <kernel/devices/port_m1284P.kernel.h>
#include <kernel/kernel_init.h>
#include <kernel/devices/button.kernel.h>
#include "nibobee_button.h"

void init_nibobee_buttons() {
     490:	1f 93       	push	r17
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     492:	16 e0       	ldi	r17, 0x06	; 6
     494:	10 93 fb 03 	sts	0x03FB, r17
     498:	8e e7       	ldi	r24, 0x7E	; 126
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	90 93 fd 03 	sts	0x03FD, r25
     4a0:	80 93 fc 03 	sts	0x03FC, r24
     4a4:	8b ef       	ldi	r24, 0xFB	; 251
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	0e 94 2a 02 	call	0x454	; 0x454 <initButton>
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4ac:	10 93 3a 02 	sts	0x023A, r17
     4b0:	8f e1       	ldi	r24, 0x1F	; 31
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	90 93 3c 02 	sts	0x023C, r25
     4b8:	80 93 3b 02 	sts	0x023B, r24
     4bc:	8a e3       	ldi	r24, 0x3A	; 58
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	0e 94 2a 02 	call	0x454	; 0x454 <initButton>
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4c4:	10 93 22 02 	sts	0x0222, r17
     4c8:	8a e2       	ldi	r24, 0x2A	; 42
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	90 93 24 02 	sts	0x0224, r25
     4d0:	80 93 23 02 	sts	0x0223, r24
     4d4:	82 e2       	ldi	r24, 0x22	; 34
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	0e 94 2a 02 	call	0x454	; 0x454 <initButton>
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4dc:	10 93 16 02 	sts	0x0216, r17
     4e0:	8d ec       	ldi	r24, 0xCD	; 205
     4e2:	93 e0       	ldi	r25, 0x03	; 3
     4e4:	90 93 18 02 	sts	0x0218, r25
     4e8:	80 93 17 02 	sts	0x0217, r24
     4ec:	86 e1       	ldi	r24, 0x16	; 22
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	0e 94 2a 02 	call	0x454	; 0x454 <initButton>
}
     4f4:	1f 91       	pop	r17
     4f6:	08 95       	ret

000004f8 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     4f8:	a4 ef       	ldi	r26, 0xF4	; 244
     4fa:	b3 e0       	ldi	r27, 0x03	; 3
     4fc:	ee eb       	ldi	r30, 0xBE	; 190
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	87 e0       	ldi	r24, 0x07	; 7
     502:	01 90       	ld	r0, Z+
     504:	0d 92       	st	X+, r0
     506:	81 50       	subi	r24, 0x01	; 1
     508:	e1 f7       	brne	.-8      	; 0x502 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     50a:	a2 e5       	ldi	r26, 0x52	; 82
     50c:	b3 e0       	ldi	r27, 0x03	; 3
     50e:	e7 eb       	ldi	r30, 0xB7	; 183
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	87 e0       	ldi	r24, 0x07	; 7
     514:	01 90       	ld	r0, Z+
     516:	0d 92       	st	X+, r0
     518:	81 50       	subi	r24, 0x01	; 1
     51a:	e1 f7       	brne	.-8      	; 0x514 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     51c:	a2 e6       	ldi	r26, 0x62	; 98
     51e:	b3 e0       	ldi	r27, 0x03	; 3
     520:	e0 eb       	ldi	r30, 0xB0	; 176
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	87 e0       	ldi	r24, 0x07	; 7
     526:	01 90       	ld	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	81 50       	subi	r24, 0x01	; 1
     52c:	e1 f7       	brne	.-8      	; 0x526 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     52e:	a9 e6       	ldi	r26, 0x69	; 105
     530:	b3 e0       	ldi	r27, 0x03	; 3
     532:	e9 ea       	ldi	r30, 0xA9	; 169
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	87 e0       	ldi	r24, 0x07	; 7
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	81 50       	subi	r24, 0x01	; 1
     53e:	e1 f7       	brne	.-8      	; 0x538 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     540:	84 ef       	ldi	r24, 0xF4	; 244
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	90 93 51 04 	sts	0x0451, r25
     548:	80 93 50 04 	sts	0x0450, r24
     54c:	27 e4       	ldi	r18, 0x47	; 71
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	30 93 53 04 	sts	0x0453, r19
     554:	20 93 52 04 	sts	0x0452, r18
     558:	10 92 55 04 	sts	0x0455, r1
     55c:	10 92 54 04 	sts	0x0454, r1
     560:	24 e2       	ldi	r18, 0x24	; 36
     562:	34 e0       	ldi	r19, 0x04	; 4
     564:	30 93 57 04 	sts	0x0457, r19
     568:	20 93 56 04 	sts	0x0456, r18
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     56c:	90 93 71 03 	sts	0x0371, r25
     570:	80 93 70 03 	sts	0x0370, r24
     574:	88 e4       	ldi	r24, 0x48	; 72
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 93 73 03 	sts	0x0373, r25
     57c:	80 93 72 03 	sts	0x0372, r24
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	90 93 75 03 	sts	0x0375, r25
     588:	80 93 74 03 	sts	0x0374, r24
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	34 e0       	ldi	r19, 0x04	; 4
     590:	30 93 77 03 	sts	0x0377, r19
     594:	20 93 76 03 	sts	0x0376, r18
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     598:	22 e5       	ldi	r18, 0x52	; 82
     59a:	33 e0       	ldi	r19, 0x03	; 3
     59c:	30 93 4b 03 	sts	0x034B, r19
     5a0:	20 93 4a 03 	sts	0x034A, r18
     5a4:	48 e8       	ldi	r20, 0x88	; 136
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	50 93 4d 03 	sts	0x034D, r21
     5ac:	40 93 4c 03 	sts	0x034C, r20
     5b0:	10 92 4f 03 	sts	0x034F, r1
     5b4:	10 92 4e 03 	sts	0x034E, r1
     5b8:	4c eb       	ldi	r20, 0xBC	; 188
     5ba:	53 e0       	ldi	r21, 0x03	; 3
     5bc:	50 93 51 03 	sts	0x0351, r21
     5c0:	40 93 50 03 	sts	0x0350, r20
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     5c4:	30 93 b0 03 	sts	0x03B0, r19
     5c8:	20 93 af 03 	sts	0x03AF, r18
     5cc:	2a e8       	ldi	r18, 0x8A	; 138
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	30 93 b2 03 	sts	0x03B2, r19
     5d4:	20 93 b1 03 	sts	0x03B1, r18
     5d8:	90 93 b4 03 	sts	0x03B4, r25
     5dc:	80 93 b3 03 	sts	0x03B3, r24
     5e0:	28 ed       	ldi	r18, 0xD8	; 216
     5e2:	33 e0       	ldi	r19, 0x03	; 3
     5e4:	30 93 b6 03 	sts	0x03B6, r19
     5e8:	20 93 b5 03 	sts	0x03B5, r18
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     5ec:	22 e6       	ldi	r18, 0x62	; 98
     5ee:	33 e0       	ldi	r19, 0x03	; 3
     5f0:	30 93 40 04 	sts	0x0440, r19
     5f4:	20 93 3f 04 	sts	0x043F, r18
     5f8:	43 eb       	ldi	r20, 0xB3	; 179
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	50 93 42 04 	sts	0x0442, r21
     600:	40 93 41 04 	sts	0x0441, r20
     604:	10 92 44 04 	sts	0x0444, r1
     608:	10 92 43 04 	sts	0x0443, r1
     60c:	49 e1       	ldi	r20, 0x19	; 25
     60e:	52 e0       	ldi	r21, 0x02	; 2
     610:	50 93 46 04 	sts	0x0446, r21
     614:	40 93 45 04 	sts	0x0445, r20
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     618:	30 93 c6 03 	sts	0x03C6, r19
     61c:	20 93 c5 03 	sts	0x03C5, r18
     620:	24 eb       	ldi	r18, 0xB4	; 180
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	30 93 c8 03 	sts	0x03C8, r19
     628:	20 93 c7 03 	sts	0x03C7, r18
     62c:	90 93 ca 03 	sts	0x03CA, r25
     630:	80 93 c9 03 	sts	0x03C9, r24
     634:	24 e0       	ldi	r18, 0x04	; 4
     636:	34 e0       	ldi	r19, 0x04	; 4
     638:	30 93 cc 03 	sts	0x03CC, r19
     63c:	20 93 cb 03 	sts	0x03CB, r18
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     640:	29 e6       	ldi	r18, 0x69	; 105
     642:	33 e0       	ldi	r19, 0x03	; 3
     644:	30 93 43 03 	sts	0x0343, r19
     648:	20 93 42 03 	sts	0x0342, r18
     64c:	48 e9       	ldi	r20, 0x98	; 152
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	50 93 45 03 	sts	0x0345, r21
     654:	40 93 44 03 	sts	0x0344, r20
     658:	10 92 47 03 	sts	0x0347, r1
     65c:	10 92 46 03 	sts	0x0346, r1
     660:	4a e4       	ldi	r20, 0x4A	; 74
     662:	54 e0       	ldi	r21, 0x04	; 4
     664:	50 93 49 03 	sts	0x0349, r21
     668:	40 93 48 03 	sts	0x0348, r20
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     66c:	30 93 d1 03 	sts	0x03D1, r19
     670:	20 93 d0 03 	sts	0x03D0, r18
     674:	2a e9       	ldi	r18, 0x9A	; 154
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	30 93 d3 03 	sts	0x03D3, r19
     67c:	20 93 d2 03 	sts	0x03D2, r18
     680:	90 93 d5 03 	sts	0x03D5, r25
     684:	80 93 d4 03 	sts	0x03D4, r24
     688:	84 e9       	ldi	r24, 0x94	; 148
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	90 93 d7 03 	sts	0x03D7, r25
     690:	80 93 d6 03 	sts	0x03D6, r24
}
     694:	08 95       	ret

00000696 <initMotor>:
#define _MOTOR_KERNEL_

#include "../kernel_init.h"
#include "motor.h"

void initMotor(PMotor motor) {
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
	// Configure the timer. These are configurations,
	// that should work fine for motors, but might also be changed elsewhere.
	setTimerClockSelect(Timer1, prescale_1);
     69c:	82 e5       	ldi	r24, 0x52	; 82
     69e:	93 e0       	ldi	r25, 0x03	; 3
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <setTimerClockSelect>
	setWaveformGenerationMode(motor->pwmTimer->timer, pwm_phase_correct);
     6a8:	eb 81       	ldd	r30, Y+3	; 0x03
     6aa:	fc 81       	ldd	r31, Y+4	; 0x04
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	64 e0       	ldi	r22, 0x04	; 4
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0e 94 1d 10 	call	0x203a	; 0x203a <setWaveformGenerationMode>
	
	setTimerCompareValue(motor->pwmTimer, 0);
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <setTimerCompareValue>
	setPinOutput(motor->direction);
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	if (!(motor->flags & MOTOR_TWO_DIR_PINS))
     6cc:	88 81       	ld	r24, Y
     6ce:	83 fd       	sbrc	r24, 3
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <initMotor+0x44>
		setPinOne(motor->direction);
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     6e6:	0e 94 4b 03 	call	0x696	; 0x696 <initMotor>
	setPinOutput(motor->direction2);
     6ea:	8d 81       	ldd	r24, Y+5	; 0x05
     6ec:	9e 81       	ldd	r25, Y+6	; 0x06
     6ee:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	setPinZero(motor->motor.direction);
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
	setPinZero(motor->direction2);
     6fa:	8d 81       	ldd	r24, Y+5	; 0x05
     6fc:	9e 81       	ldd	r25, Y+6	; 0x06
     6fe:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <init_nibobee_motors>:
#include <kernel/devices/timer_m1284P.kernel.h>
#include <kernel/devices/motor.kernel.h>
#include "nibobee_motor.h"

void init_nibobee_motors() {
	Timer1->flags |= TIMER_RESOLUTION_9bit;
     708:	80 91 52 03 	lds	r24, 0x0352
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	80 93 52 03 	sts	0x0352, r24
	
	INIT_MOTOR(LeftMotorBase, MOTOR_NORMAL, PinD6, Timer1A)
     712:	10 92 b7 03 	sts	0x03B7, r1
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	94 e0       	ldi	r25, 0x04	; 4
     71a:	90 93 b9 03 	sts	0x03B9, r25
     71e:	80 93 b8 03 	sts	0x03B8, r24
     722:	8a e4       	ldi	r24, 0x4A	; 74
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	90 93 bb 03 	sts	0x03BB, r25
     72a:	80 93 ba 03 	sts	0x03BA, r24
     72e:	87 eb       	ldi	r24, 0xB7	; 183
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 4b 03 	call	0x696	; 0x696 <initMotor>
	INIT_MOTOR(RightMotorBase, MOTOR_INVERSE_DIRECTION, PinD7, Timer1B)
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	80 93 25 02 	sts	0x0225, r24
     73c:	89 e1       	ldi	r24, 0x19	; 25
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	90 93 27 02 	sts	0x0227, r25
     744:	80 93 26 02 	sts	0x0226, r24
     748:	8f ea       	ldi	r24, 0xAF	; 175
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	90 93 29 02 	sts	0x0229, r25
     750:	80 93 28 02 	sts	0x0228, r24
     754:	85 e2       	ldi	r24, 0x25	; 37
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	0e 94 4b 03 	call	0x696	; 0x696 <initMotor>
	
	// Don't know why, but the lib does this... Seems to enable internal PullUp.
	// Pins will be controlled by the timer anyways.
	setPinOne(RightMotorBase->pwmTimer->outputComparePin);
     75c:	e0 91 28 02 	lds	r30, 0x0228
     760:	f0 91 29 02 	lds	r31, 0x0229
     764:	86 81       	ldd	r24, Z+6	; 0x06
     766:	97 81       	ldd	r25, Z+7	; 0x07
     768:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
	setPinOne(LeftMotorBase->pwmTimer->outputComparePin);
     76c:	e0 91 ba 03 	lds	r30, 0x03BA
     770:	f0 91 bb 03 	lds	r31, 0x03BB
     774:	86 81       	ldd	r24, Z+6	; 0x06
     776:	97 81       	ldd	r25, Z+7	; 0x07
     778:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
}
     77c:	08 95       	ret

0000077e <init_timer>:
#define CLOCKISR_A TIMER3_COMPA_vect
#define CLOCKISR_B TIMER3_COMPB_vect
#define CLOCKTIMER_A Timer3A
#define CLOCKTIMER_B Timer3B

void init_timer() {
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
	setWaveformGenerationMode(Timer3, clear_timer_on_match);
     782:	c9 e6       	ldi	r28, 0x69	; 105
     784:	d3 e0       	ldi	r29, 0x03	; 3
     786:	ce 01       	movw	r24, r28
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	0e 94 1d 10 	call	0x203a	; 0x203a <setWaveformGenerationMode>
	setTimerClockSelect(Timer3, prescale_8);
     790:	ce 01       	movw	r24, r28
     792:	62 e0       	ldi	r22, 0x02	; 2
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <setTimerClockSelect>
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	setTimerCompareValue(Timer3A, 2500);
     79a:	82 e4       	ldi	r24, 0x42	; 66
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	64 ec       	ldi	r22, 0xC4	; 196
     7a0:	79 e0       	ldi	r23, 0x09	; 9
     7a2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <setTimerCompareValue>
	setTimerCompareValue(Timer3B, 2500);
     7a6:	80 ed       	ldi	r24, 0xD0	; 208
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	64 ec       	ldi	r22, 0xC4	; 196
     7ac:	79 e0       	ldi	r23, 0x09	; 9
     7ae:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <setTimerCompareValue>
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     7b8:	08 95       	ret

000007ba <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increase the milliseconds_running value.

TIMER_TICK_ISR {
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	0b b6       	in	r0, 0x3b	; 59
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
	TIMER_TICK_ACTION
     7e0:	80 91 03 02 	lds	r24, 0x0203
     7e4:	90 91 04 02 	lds	r25, 0x0204
     7e8:	a0 91 05 02 	lds	r26, 0x0205
     7ec:	b0 91 06 02 	lds	r27, 0x0206
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	a1 1d       	adc	r26, r1
     7f4:	b1 1d       	adc	r27, r1
     7f6:	80 93 03 02 	sts	0x0203, r24
     7fa:	90 93 04 02 	sts	0x0204, r25
     7fe:	a0 93 05 02 	sts	0x0205, r26
     802:	b0 93 06 02 	sts	0x0206, r27
     806:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <in_timer_tick>
}
     80a:	ff 91       	pop	r31
     80c:	ef 91       	pop	r30
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0b be       	out	0x3b, r0	; 59
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <mutex_create>:
// This Mutex implementation simply disables interrupts to ensure
// mutual exclusion.

Mutex mutex_create() {
	return NULL;
}
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	08 95       	ret

00000836 <mutex_lock>:

void mutex_lock(Mutex mutex) {
	cli();
     836:	f8 94       	cli
}
     838:	08 95       	ret

0000083a <mutex_trylock>:

BOOL mutex_trylock(Mutex mutex) {
	cli();
     83a:	f8 94       	cli
	return TRUE;
}
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	08 95       	ret

00000842 <mutex_release>:

void mutex_release(Mutex mutex) {
	sei();
     842:	78 94       	sei
}
     844:	08 95       	ret

00000846 <initSmoothMotor>:

// This must be used when implementing above function. Implemented in motor_smooth.c
void motor_smooth_tick(PSmoothMotor motor);

void initSmoothMotor(PSmoothMotor motor) {
	motor->mutex = mutex_create();
     846:	fc 01       	movw	r30, r24
     848:	11 8a       	std	Z+17, r1	; 0x11
     84a:	10 8a       	std	Z+16, r1	; 0x10
}
     84c:	08 95       	ret

0000084e <smooth_millisecond_tick>:
	BOOL isRunning = motor_A_running || motor_B_running;
	if (wasRunning != isRunning) smooth_enable_millisecond_tick(isRunning);
}

void smooth_millisecond_tick() {
	if (motor_A_running && smooth_ticks % target_motor_A == 0)
     84e:	80 91 0d 02 	lds	r24, 0x020D
     852:	90 91 0e 02 	lds	r25, 0x020E
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	81 f0       	breq	.+32     	; 0x87a <smooth_millisecond_tick+0x2c>
     85a:	80 91 07 02 	lds	r24, 0x0207
     85e:	90 91 08 02 	lds	r25, 0x0208
     862:	60 91 09 02 	lds	r22, 0x0209
     866:	70 91 0a 02 	lds	r23, 0x020A
     86a:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodhi4>
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	21 f4       	brne	.+8      	; 0x87a <smooth_millisecond_tick+0x2c>
		motor_smooth_tick(SMOOTH_MOTOR_A);
     872:	87 e9       	ldi	r24, 0x97	; 151
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	0e 94 99 11 	call	0x2332	; 0x2332 <motor_smooth_tick>
	if (motor_B_running && smooth_ticks % target_motor_B == 0)
     87a:	80 91 0f 02 	lds	r24, 0x020F
     87e:	90 91 10 02 	lds	r25, 0x0210
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	81 f0       	breq	.+32     	; 0x8a6 <smooth_millisecond_tick+0x58>
     886:	80 91 07 02 	lds	r24, 0x0207
     88a:	90 91 08 02 	lds	r25, 0x0208
     88e:	60 91 0b 02 	lds	r22, 0x020B
     892:	70 91 0c 02 	lds	r23, 0x020C
     896:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodhi4>
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	21 f4       	brne	.+8      	; 0x8a6 <smooth_millisecond_tick+0x58>
		motor_smooth_tick(SMOOTH_MOTOR_B);
     89e:	82 e1       	ldi	r24, 0x12	; 18
     8a0:	94 e0       	ldi	r25, 0x04	; 4
     8a2:	0e 94 99 11 	call	0x2332	; 0x2332 <motor_smooth_tick>
     8a6:	08 95       	ret

000008a8 <smooth_enable_millisecond_tick>:

#include <kernel/kernel_init.h>
#include <kernel/devices/motor_smooth_pair.kernel.h>

void smooth_enable_millisecond_tick(BOOL enabled) {
	if (enabled) enableTimerInterrupt(CLOCKTIMER_B);
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	29 f0       	breq	.+10     	; 0x8b6 <smooth_enable_millisecond_tick+0xe>
     8ac:	80 ed       	ldi	r24, 0xD0	; 208
     8ae:	93 e0       	ldi	r25, 0x03	; 3
     8b0:	0e 94 b4 10 	call	0x2168	; 0x2168 <enableTimerInterrupt>
     8b4:	08 95       	ret
	else disableTimerInterrupt(CLOCKTIMER_B);
     8b6:	80 ed       	ldi	r24, 0xD0	; 208
     8b8:	93 e0       	ldi	r25, 0x03	; 3
     8ba:	0e 94 c8 10 	call	0x2190	; 0x2190 <disableTimerInterrupt>
     8be:	08 95       	ret

000008c0 <motor_smooth_set_call_frequency>:
uint16_t target_motor_B = 0;
BOOL motor_A_running = FALSE;
BOOL motor_B_running = FALSE;

extern void motor_smooth_set_call_frequency(PSmoothMotor motor, uint16_t timesPerSecond) {
	BOOL wasRunning = motor_A_running || motor_B_running;
     8c0:	20 91 0d 02 	lds	r18, 0x020D
     8c4:	30 91 0e 02 	lds	r19, 0x020E
     8c8:	21 15       	cp	r18, r1
     8ca:	31 05       	cpc	r19, r1
     8cc:	61 f4       	brne	.+24     	; 0x8e6 <motor_smooth_set_call_frequency+0x26>
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 91 0f 02 	lds	r20, 0x020F
     8d6:	50 91 10 02 	lds	r21, 0x0210
     8da:	41 15       	cp	r20, r1
     8dc:	51 05       	cpc	r21, r1
     8de:	29 f4       	brne	.+10     	; 0x8ea <motor_smooth_set_call_frequency+0x2a>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <motor_smooth_set_call_frequency+0x2a>
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
	if (motor == SMOOTH_MOTOR_A) {
     8ea:	43 e0       	ldi	r20, 0x03	; 3
     8ec:	87 39       	cpi	r24, 0x97	; 151
     8ee:	94 07       	cpc	r25, r20
     8f0:	b1 f4       	brne	.+44     	; 0x91e <motor_smooth_set_call_frequency+0x5e>
		motor_A_running = timesPerSecond != 0;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	61 15       	cp	r22, r1
     8f8:	71 05       	cpc	r23, r1
     8fa:	11 f4       	brne	.+4      	; 0x900 <motor_smooth_set_call_frequency+0x40>
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	90 93 0e 02 	sts	0x020E, r25
     904:	80 93 0d 02 	sts	0x020D, r24
		target_motor_A = motor_A_running ? timesPerSecond : SMOOTH_TICK_FREQ / timesPerSecond;
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	21 f4       	brne	.+8      	; 0x914 <motor_smooth_set_call_frequency+0x54>
     90c:	88 ee       	ldi	r24, 0xE8	; 232
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodhi4>
     914:	70 93 0a 02 	sts	0x020A, r23
     918:	60 93 09 02 	sts	0x0209, r22
     91c:	19 c0       	rjmp	.+50     	; 0x950 <motor_smooth_set_call_frequency+0x90>
	} else if (motor == SMOOTH_MOTOR_B) {
     91e:	44 e0       	ldi	r20, 0x04	; 4
     920:	82 31       	cpi	r24, 0x12	; 18
     922:	94 07       	cpc	r25, r20
     924:	71 f5       	brne	.+92     	; 0x982 <motor_smooth_set_call_frequency+0xc2>
		motor_B_running = timesPerSecond != 0;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	61 15       	cp	r22, r1
     92c:	71 05       	cpc	r23, r1
     92e:	11 f4       	brne	.+4      	; 0x934 <motor_smooth_set_call_frequency+0x74>
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	90 93 10 02 	sts	0x0210, r25
     938:	80 93 0f 02 	sts	0x020F, r24
		target_motor_B = motor_B_running ? timesPerSecond : SMOOTH_TICK_FREQ / timesPerSecond;
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	21 f4       	brne	.+8      	; 0x948 <motor_smooth_set_call_frequency+0x88>
     940:	88 ee       	ldi	r24, 0xE8	; 232
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodhi4>
     948:	70 93 0c 02 	sts	0x020C, r23
     94c:	60 93 0b 02 	sts	0x020B, r22
	} else {
		return;
	}
	BOOL isRunning = motor_A_running || motor_B_running;
     950:	80 91 0d 02 	lds	r24, 0x020D
     954:	90 91 0e 02 	lds	r25, 0x020E
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	61 f4       	brne	.+24     	; 0x974 <motor_smooth_set_call_frequency+0xb4>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	40 91 0f 02 	lds	r20, 0x020F
     964:	50 91 10 02 	lds	r21, 0x0210
     968:	41 15       	cp	r20, r1
     96a:	51 05       	cpc	r21, r1
     96c:	29 f4       	brne	.+10     	; 0x978 <motor_smooth_set_call_frequency+0xb8>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <motor_smooth_set_call_frequency+0xb8>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
	if (wasRunning != isRunning) smooth_enable_millisecond_tick(isRunning);
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	11 f0       	breq	.+4      	; 0x982 <motor_smooth_set_call_frequency+0xc2>
     97e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <smooth_enable_millisecond_tick>
     982:	08 95       	ret

00000984 <__vector_33>:
}

ISR(CLOCKISR_B) {
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	0b b6       	in	r0, 0x3b	; 59
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	4f 93       	push	r20
     998:	5f 93       	push	r21
     99a:	6f 93       	push	r22
     99c:	7f 93       	push	r23
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
	smooth_millisecond_tick();
     9aa:	0e 94 27 04 	call	0x84e	; 0x84e <smooth_millisecond_tick>
}
     9ae:	ff 91       	pop	r31
     9b0:	ef 91       	pop	r30
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0b be       	out	0x3b, r0	; 59
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0f 90       	pop	r0
     9d0:	1f 90       	pop	r1
     9d2:	18 95       	reti

000009d4 <init_smooth_motors>:

void init_smooth_motors() {
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, 40, 3000)
     9d4:	87 eb       	ldi	r24, 0xB7	; 183
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	90 93 98 03 	sts	0x0398, r25
     9dc:	80 93 97 03 	sts	0x0397, r24
     9e0:	10 92 9a 03 	sts	0x039A, r1
     9e4:	10 92 99 03 	sts	0x0399, r1
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 9c 03 	sts	0x039C, r25
     9f0:	80 93 9b 03 	sts	0x039B, r24
     9f4:	10 92 9e 03 	sts	0x039E, r1
     9f8:	10 92 9d 03 	sts	0x039D, r1
     9fc:	90 93 a0 03 	sts	0x03A0, r25
     a00:	80 93 9f 03 	sts	0x039F, r24
     a04:	10 92 a2 03 	sts	0x03A2, r1
     a08:	10 92 a1 03 	sts	0x03A1, r1
     a0c:	48 e2       	ldi	r20, 0x28	; 40
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	50 93 a4 03 	sts	0x03A4, r21
     a14:	40 93 a3 03 	sts	0x03A3, r20
     a18:	28 eb       	ldi	r18, 0xB8	; 184
     a1a:	3b e0       	ldi	r19, 0x0B	; 11
     a1c:	30 93 a6 03 	sts	0x03A6, r19
     a20:	20 93 a5 03 	sts	0x03A5, r18
     a24:	10 92 a8 03 	sts	0x03A8, r1
     a28:	10 92 a7 03 	sts	0x03A7, r1
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, 40, 3000)
     a2c:	65 e2       	ldi	r22, 0x25	; 37
     a2e:	72 e0       	ldi	r23, 0x02	; 2
     a30:	70 93 13 04 	sts	0x0413, r23
     a34:	60 93 12 04 	sts	0x0412, r22
     a38:	10 92 15 04 	sts	0x0415, r1
     a3c:	10 92 14 04 	sts	0x0414, r1
     a40:	90 93 17 04 	sts	0x0417, r25
     a44:	80 93 16 04 	sts	0x0416, r24
     a48:	10 92 19 04 	sts	0x0419, r1
     a4c:	10 92 18 04 	sts	0x0418, r1
     a50:	90 93 1b 04 	sts	0x041B, r25
     a54:	80 93 1a 04 	sts	0x041A, r24
     a58:	10 92 1d 04 	sts	0x041D, r1
     a5c:	10 92 1c 04 	sts	0x041C, r1
     a60:	50 93 1f 04 	sts	0x041F, r21
     a64:	40 93 1e 04 	sts	0x041E, r20
     a68:	30 93 21 04 	sts	0x0421, r19
     a6c:	20 93 20 04 	sts	0x0420, r18
     a70:	10 92 23 04 	sts	0x0423, r1
     a74:	10 92 22 04 	sts	0x0422, r1
}
     a78:	08 95       	ret

00000a7a <twi_handleMasterRequest>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer);
	byte twi_defaultSlaveBufferData[TWI_Buffer_Size];
	TWIBuffer twi_defaultSlaveBuffer = { twi_defaultSlaveBufferData, TWI_Buffer_Size };
#else
	// Define empty functions
	TWIBuffer twi_handleMasterRequest() { return (TWIBuffer) { 0 }; }
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	08 95       	ret

00000a84 <twi_handleMasterTransmission>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
     a84:	08 95       	ret

00000a86 <twi_unexpectedCondition>:
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() {}
     a86:	08 95       	ret

00000a88 <init_twi>:
TWIError twi_error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     a88:	85 e0       	ldi	r24, 0x05	; 5
     a8a:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     a94:	84 e6       	ldi	r24, 0x64	; 100
     a96:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     a9a:	10 92 b9 00 	sts	0x00B9, r1
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
     a9e:	08 95       	ret

00000aa0 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	27 97       	sbiw	r28, 0x07	; 7
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     ab4:	80 91 db 03 	lds	r24, 0x03DB
     ab8:	90 91 dc 03 	lds	r25, 0x03DC
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	91 05       	cpc	r25, r1
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <next_twi_operation+0x24>
     ac2:	52 c0       	rjmp	.+164    	; 0xb68 <next_twi_operation+0xc8>
	do {
		current = furtherOperations[nextTwiOperation++];
     ac4:	ae 01       	movw	r20, r28
     ac6:	4f 5f       	subi	r20, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	80 91 db 03 	lds	r24, 0x03DB
     ace:	90 91 dc 03 	lds	r25, 0x03DC
     ad2:	fc 01       	movw	r30, r24
     ad4:	33 e0       	ldi	r19, 0x03	; 3
     ad6:	ee 0f       	add	r30, r30
     ad8:	ff 1f       	adc	r31, r31
     ada:	3a 95       	dec	r19
     adc:	e1 f7       	brne	.-8      	; 0xad6 <next_twi_operation+0x36>
     ade:	e8 1b       	sub	r30, r24
     ae0:	f9 0b       	sbc	r31, r25
     ae2:	da 01       	movw	r26, r20
     ae4:	e9 5d       	subi	r30, 0xD9	; 217
     ae6:	fb 4f       	sbci	r31, 0xFB	; 251
     ae8:	27 e0       	ldi	r18, 0x07	; 7
     aea:	01 90       	ld	r0, Z+
     aec:	0d 92       	st	X+, r0
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	e1 f7       	brne	.-8      	; 0xaea <next_twi_operation+0x4a>
     af2:	fc 01       	movw	r30, r24
     af4:	23 e0       	ldi	r18, 0x03	; 3
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	2a 95       	dec	r18
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <next_twi_operation+0x56>
     afe:	e8 1b       	sub	r30, r24
     b00:	f9 0b       	sbc	r31, r25
     b02:	e9 5d       	subi	r30, 0xD9	; 217
     b04:	fb 4f       	sbci	r31, 0xFB	; 251
     b06:	64 81       	ldd	r22, Z+4	; 0x04
     b08:	25 81       	ldd	r18, Z+5	; 0x05
     b0a:	36 81       	ldd	r19, Z+6	; 0x06
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	90 93 dc 03 	sts	0x03DC, r25
     b12:	80 93 db 03 	sts	0x03DB, r24
		if (current.operationMode != TWI_IllegalOperation) break;
     b16:	21 15       	cp	r18, r1
     b18:	31 05       	cpc	r19, r1
     b1a:	21 f0       	breq	.+8      	; 0xb24 <next_twi_operation+0x84>
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     b1c:	83 30       	cpi	r24, 0x03	; 3
     b1e:	91 05       	cpc	r25, r1
     b20:	2c f0       	brlt	.+10     	; 0xb2c <next_twi_operation+0x8c>
     b22:	22 c0       	rjmp	.+68     	; 0xb68 <next_twi_operation+0xc8>
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
     b24:	83 30       	cpi	r24, 0x03	; 3
     b26:	91 05       	cpc	r25, r1
     b28:	84 f2       	brlt	.-96     	; 0xaca <next_twi_operation+0x2a>
     b2a:	1e c0       	rjmp	.+60     	; 0xb68 <next_twi_operation+0xc8>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	// Delete or set the LSB, which describes sla+w or sla+r (reading or writing
	// slave address)
	if (current.operationMode == TWI_Send) {
     b2c:	22 30       	cpi	r18, 0x02	; 2
     b2e:	31 05       	cpc	r19, r1
     b30:	11 f4       	brne	.+4      	; 0xb36 <next_twi_operation+0x96>
		twi_address.address = current.device.address & ~_BV(0);
     b32:	6e 7f       	andi	r22, 0xFE	; 254
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <next_twi_operation+0x9e>
	} else if (current.operationMode == TWI_Receive) {
     b36:	21 30       	cpi	r18, 0x01	; 1
     b38:	31 05       	cpc	r19, r1
     b3a:	19 f4       	brne	.+6      	; 0xb42 <next_twi_operation+0xa2>
		twi_address.address = current.device.address | _BV(0);
     b3c:	61 60       	ori	r22, 0x01	; 1
     b3e:	60 93 12 02 	sts	0x0212, r22
	}
	alreadyHandled = 0;
     b42:	10 92 8b 03 	sts	0x038B, r1
     b46:	10 92 8a 03 	sts	0x038A, r1
	twi_buffer = current.buffer;
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	ab 81       	ldd	r26, Y+3	; 0x03
     b50:	bc 81       	ldd	r27, Y+4	; 0x04
     b52:	80 93 e2 03 	sts	0x03E2, r24
     b56:	90 93 e3 03 	sts	0x03E3, r25
     b5a:	a0 93 e4 03 	sts	0x03E4, r26
     b5e:	b0 93 e5 03 	sts	0x03E5, r27
	return TRUE;
     b62:	21 e0       	ldi	r18, 0x01	; 1
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <next_twi_operation+0xcc>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     b6c:	c9 01       	movw	r24, r18
     b6e:	27 96       	adiw	r28, 0x07	; 7
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (!next_twi_operation()) {
     b80:	0e 94 50 05 	call	0xaa0	; 0xaa0 <next_twi_operation>
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	19 f4       	brne	.+6      	; 0xb8e <twi_stop_or_next+0xe>
		twi_stop();
     b88:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
     b8c:	08 95       	ret
	} else {
		// Next operation, without releasing the bus. Repeated START condition!
		twi_start();
     b8e:	85 ea       	ldi	r24, 0xA5	; 165
     b90:	80 93 bc 00 	sts	0x00BC, r24
     b94:	08 95       	ret

00000b96 <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	twi_error = TWI_No_Error;
     b96:	10 92 8d 03 	sts	0x038D, r1
     b9a:	10 92 8c 03 	sts	0x038C, r1
	twi_running = TRUE;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 ea 03 	sts	0x03EA, r25
     ba6:	80 93 e9 03 	sts	0x03E9, r24
	nextTwiOperation = 0;
     baa:	10 92 dc 03 	sts	0x03DC, r1
     bae:	10 92 db 03 	sts	0x03DB, r1
	if (next_twi_operation()) {
     bb2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <next_twi_operation>
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	19 f0       	breq	.+6      	; 0xbc0 <twi_start_master_operation+0x2a>
		twi_start();
     bba:	85 ea       	ldi	r24, 0xA5	; 165
     bbc:	80 93 bc 00 	sts	0x00BC, r24
     bc0:	08 95       	ret

00000bc2 <__vector_26>:

static inline void twi_read_byte() {
	twi_buffer.data[alreadyHandled++] = TWDR;
}

ISR(TWI_vect) {
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	0b b6       	in	r0, 0x3b	; 59
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
	switch(TW_STATUS) {
     be8:	80 91 b9 00 	lds	r24, 0x00B9
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	88 7f       	andi	r24, 0xF8	; 248
     bf0:	90 70       	andi	r25, 0x00	; 0
     bf2:	80 33       	cpi	r24, 0x30	; 48
     bf4:	91 05       	cpc	r25, r1
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__vector_26+0x38>
     bf8:	69 c0       	rjmp	.+210    	; 0xccc <__vector_26+0x10a>
     bfa:	81 33       	cpi	r24, 0x31	; 49
     bfc:	91 05       	cpc	r25, r1
     bfe:	d4 f4       	brge	.+52     	; 0xc34 <__vector_26+0x72>
     c00:	80 31       	cpi	r24, 0x10	; 16
     c02:	91 05       	cpc	r25, r1
     c04:	99 f1       	breq	.+102    	; 0xc6c <__vector_26+0xaa>
     c06:	81 31       	cpi	r24, 0x11	; 17
     c08:	91 05       	cpc	r25, r1
     c0a:	44 f4       	brge	.+16     	; 0xc1c <__vector_26+0x5a>
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	09 f4       	brne	.+2      	; 0xc12 <__vector_26+0x50>
     c10:	76 c0       	rjmp	.+236    	; 0xcfe <__vector_26+0x13c>
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <__vector_26+0x58>
     c18:	75 c0       	rjmp	.+234    	; 0xd04 <__vector_26+0x142>
     c1a:	28 c0       	rjmp	.+80     	; 0xc6c <__vector_26+0xaa>
     c1c:	80 32       	cpi	r24, 0x20	; 32
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f4       	brne	.+2      	; 0xc24 <__vector_26+0x62>
     c22:	5c c0       	rjmp	.+184    	; 0xcdc <__vector_26+0x11a>
     c24:	88 32       	cpi	r24, 0x28	; 40
     c26:	91 05       	cpc	r25, r1
     c28:	a1 f1       	breq	.+104    	; 0xc92 <__vector_26+0xd0>
     c2a:	88 31       	cpi	r24, 0x18	; 24
     c2c:	91 05       	cpc	r25, r1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <__vector_26+0x70>
     c30:	69 c0       	rjmp	.+210    	; 0xd04 <__vector_26+0x142>
     c32:	2f c0       	rjmp	.+94     	; 0xc92 <__vector_26+0xd0>
     c34:	88 34       	cpi	r24, 0x48	; 72
     c36:	91 05       	cpc	r25, r1
     c38:	09 f4       	brne	.+2      	; 0xc3c <__vector_26+0x7a>
     c3a:	50 c0       	rjmp	.+160    	; 0xcdc <__vector_26+0x11a>
     c3c:	89 34       	cpi	r24, 0x49	; 73
     c3e:	91 05       	cpc	r25, r1
     c40:	44 f4       	brge	.+16     	; 0xc52 <__vector_26+0x90>
     c42:	88 33       	cpi	r24, 0x38	; 56
     c44:	91 05       	cpc	r25, r1
     c46:	b9 f0       	breq	.+46     	; 0xc76 <__vector_26+0xb4>
     c48:	80 34       	cpi	r24, 0x40	; 64
     c4a:	91 05       	cpc	r25, r1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_26+0x8e>
     c4e:	5a c0       	rjmp	.+180    	; 0xd04 <__vector_26+0x142>
     c50:	42 c0       	rjmp	.+132    	; 0xcd6 <__vector_26+0x114>
     c52:	88 35       	cpi	r24, 0x58	; 88
     c54:	91 05       	cpc	r25, r1
     c56:	09 f4       	brne	.+2      	; 0xc5a <__vector_26+0x98>
     c58:	4a c0       	rjmp	.+148    	; 0xcee <__vector_26+0x12c>
     c5a:	88 3f       	cpi	r24, 0xF8	; 248
     c5c:	91 05       	cpc	r25, r1
     c5e:	09 f4       	brne	.+2      	; 0xc62 <__vector_26+0xa0>
     c60:	4b c0       	rjmp	.+150    	; 0xcf8 <__vector_26+0x136>
     c62:	80 35       	cpi	r24, 0x50	; 80
     c64:	91 05       	cpc	r25, r1
     c66:	09 f0       	breq	.+2      	; 0xc6a <__vector_26+0xa8>
     c68:	4d c0       	rjmp	.+154    	; 0xd04 <__vector_26+0x142>
     c6a:	33 c0       	rjmp	.+102    	; 0xcd2 <__vector_26+0x110>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     c6c:	80 91 12 02 	lds	r24, 0x0212
     c70:	80 93 bb 00 	sts	0x00BB, r24
     c74:	27 c0       	rjmp	.+78     	; 0xcc4 <__vector_26+0x102>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			twi_error = TWI_Arbitration_Lost;
     c76:	85 e0       	ldi	r24, 0x05	; 5
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	90 93 8d 03 	sts	0x038D, r25
     c7e:	80 93 8c 03 	sts	0x038C, r24
static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base;
     c82:	85 e8       	ldi	r24, 0x85	; 133
     c84:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
     c88:	10 92 ea 03 	sts	0x03EA, r1
     c8c:	10 92 e9 03 	sts	0x03E9, r1
     c90:	41 c0       	rjmp	.+130    	; 0xd14 <__vector_26+0x152>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     c92:	80 91 8a 03 	lds	r24, 0x038A
     c96:	90 91 8b 03 	lds	r25, 0x038B
     c9a:	20 91 e4 03 	lds	r18, 0x03E4
     c9e:	30 91 e5 03 	lds	r19, 0x03E5
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	28 f5       	brcc	.+74     	; 0xcf2 <__vector_26+0x130>
				twi_send(twi_buffer.data[alreadyHandled++]);
     ca8:	e0 91 e2 03 	lds	r30, 0x03E2
     cac:	f0 91 e3 03 	lds	r31, 0x03E3
     cb0:	e8 0f       	add	r30, r24
     cb2:	f9 1f       	adc	r31, r25
     cb4:	20 81       	ld	r18, Z
     cb6:	20 93 bb 00 	sts	0x00BB, r18
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	90 93 8b 03 	sts	0x038B, r25
     cc0:	80 93 8a 03 	sts	0x038A, r24
     cc4:	85 e8       	ldi	r24, 0x85	; 133
     cc6:	80 93 bc 00 	sts	0x00BC, r24
     cca:	24 c0       	rjmp	.+72     	; 0xd14 <__vector_26+0x152>
		case TW_MT_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			twi_error = TWI_Master_TooMuchDataTransmitted;
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <__vector_26+0x11e>
// Master Receiver
		case TW_MR_SLA_ACK:
			twi_ack_receive();
			break;
		case TW_MR_DATA_ACK:
			twi_read_byte();
     cd2:	0e 94 95 00 	call	0x12a	; 0x12a <twi_read_byte>
			twi_ack_receive();
     cd6:	0e 94 83 00 	call	0x106	; 0x106 <twi_ack_receive>
			break;
     cda:	1c c0       	rjmp	.+56     	; 0xd14 <__vector_26+0x152>
		case TW_MR_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	90 93 8d 03 	sts	0x038D, r25
     ce4:	80 93 8c 03 	sts	0x038C, r24
			twi_stop();
     ce8:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
			break;
     cec:	13 c0       	rjmp	.+38     	; 0xd14 <__vector_26+0x152>
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_read_byte();
     cee:	0e 94 95 00 	call	0x12a	; 0x12a <twi_read_byte>
			twi_stop_or_next();
     cf2:	0e 94 c0 05 	call	0xb80	; 0xb80 <twi_stop_or_next>
			break;
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <__vector_26+0x152>
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
			break;
#endif
// Misc
		case TW_NO_INFO:
			twi_error = TWI_No_Info_Interrupt;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		case TW_BUS_ERROR:
			twi_error = TWI_Bus_Error;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		default:
			twi_error = TWI_Illegal_Status;
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	90 93 8d 03 	sts	0x038D, r25
     d0c:	80 93 8c 03 	sts	0x038C, r24
			twi_unexpectedCondition();
     d10:	0e 94 43 05 	call	0xa86	; 0xa86 <twi_unexpectedCondition>
			break;
	}
}
     d14:	ff 91       	pop	r31
     d16:	ef 91       	pop	r30
     d18:	bf 91       	pop	r27
     d1a:	af 91       	pop	r26
     d1c:	9f 91       	pop	r25
     d1e:	8f 91       	pop	r24
     d20:	7f 91       	pop	r23
     d22:	6f 91       	pop	r22
     d24:	5f 91       	pop	r21
     d26:	4f 91       	pop	r20
     d28:	3f 91       	pop	r19
     d2a:	2f 91       	pop	r18
     d2c:	0f 90       	pop	r0
     d2e:	0b be       	out	0x3b, r0	; 59
     d30:	0f 90       	pop	r0
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	0f 90       	pop	r0
     d36:	1f 90       	pop	r1
     d38:	18 95       	reti

00000d3a <twiMultipleOperations>:
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     d3a:	1f 93       	push	r17
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <twiMultipleOperations+0x2a>
		furtherOperations[i] = operations[i];
     d46:	da 01       	movw	r26, r20
     d48:	a9 5d       	subi	r26, 0xD9	; 217
     d4a:	bb 4f       	sbci	r27, 0xFB	; 251
     d4c:	fb 01       	movw	r30, r22
     d4e:	e4 0f       	add	r30, r20
     d50:	f5 1f       	adc	r31, r21
     d52:	17 e0       	ldi	r17, 0x07	; 7
     d54:	01 90       	ld	r0, Z+
     d56:	0d 92       	st	X+, r0
     d58:	11 50       	subi	r17, 0x01	; 1
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <twiMultipleOperations+0x1a>
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d5c:	2f 5f       	subi	r18, 0xFF	; 255
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	49 5f       	subi	r20, 0xF9	; 249
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	28 17       	cp	r18, r24
     d66:	39 07       	cpc	r19, r25
     d68:	5c f0       	brlt	.+22     	; 0xd80 <twiMultipleOperations+0x46>
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     d6a:	f9 01       	movw	r30, r18
     d6c:	43 e0       	ldi	r20, 0x03	; 3
     d6e:	ee 0f       	add	r30, r30
     d70:	ff 1f       	adc	r31, r31
     d72:	4a 95       	dec	r20
     d74:	e1 f7       	brne	.-8      	; 0xd6e <twiMultipleOperations+0x34>
     d76:	e2 1b       	sub	r30, r18
     d78:	f3 0b       	sbc	r31, r19
     d7a:	e4 5d       	subi	r30, 0xD4	; 212
     d7c:	fb 4f       	sbci	r31, 0xFB	; 251
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <twiMultipleOperations+0x58>
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d80:	23 30       	cpi	r18, 0x03	; 3
     d82:	31 05       	cpc	r19, r1
     d84:	01 f7       	brne	.-64     	; 0xd46 <twiMultipleOperations+0xc>
     d86:	f1 cf       	rjmp	.-30     	; 0xd6a <twiMultipleOperations+0x30>
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i].operationMode = TWI_IllegalOperation;
     d88:	11 82       	std	Z+1, r1	; 0x01
     d8a:	10 82       	st	Z, r1
void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
     d8c:	2f 5f       	subi	r18, 0xFF	; 255
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	37 96       	adiw	r30, 0x07	; 7
     d92:	23 30       	cpi	r18, 0x03	; 3
     d94:	31 05       	cpc	r19, r1
     d96:	c4 f3       	brlt	.-16     	; 0xd88 <twiMultipleOperations+0x4e>
		furtherOperations[i].operationMode = TWI_IllegalOperation;
	}
	twi_start_master_operation();
     d98:	0e 94 cb 05 	call	0xb96	; 0xb96 <twi_start_master_operation>
}
     d9c:	1f 91       	pop	r17
     d9e:	08 95       	ret

00000da0 <twiSendReceive>:
void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
	twiMultipleOperations(1, op);
}

void twiSendReceive(TWIDevice targetDevice, TWIBuffer sendData, TWIBuffer receiveBuffer) {
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2e 97       	sbiw	r28, 0x0e	; 14
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
	TWIOperation ops[2] = {
     db8:	fe 01       	movw	r30, r28
     dba:	31 96       	adiw	r30, 0x01	; 1
     dbc:	9e e0       	ldi	r25, 0x0E	; 14
     dbe:	df 01       	movw	r26, r30
     dc0:	1d 92       	st	X+, r1
     dc2:	9a 95       	dec	r25
     dc4:	e9 f7       	brne	.-6      	; 0xdc0 <twiSendReceive+0x20>
     dc6:	49 83       	std	Y+1, r20	; 0x01
     dc8:	5a 83       	std	Y+2, r21	; 0x02
     dca:	6b 83       	std	Y+3, r22	; 0x03
     dcc:	7c 83       	std	Y+4, r23	; 0x04
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	42 e0       	ldi	r20, 0x02	; 2
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	5f 83       	std	Y+7, r21	; 0x07
     dd6:	4e 83       	std	Y+6, r20	; 0x06
     dd8:	08 87       	std	Y+8, r16	; 0x08
     dda:	19 87       	std	Y+9, r17	; 0x09
     ddc:	2a 87       	std	Y+10, r18	; 0x0a
     dde:	3b 87       	std	Y+11, r19	; 0x0b
     de0:	8c 87       	std	Y+12, r24	; 0x0c
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9e 87       	std	Y+14, r25	; 0x0e
     de8:	8d 87       	std	Y+13, r24	; 0x0d
		(TWIOperation) { sendData, targetDevice, TWI_Send },
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	bf 01       	movw	r22, r30
     df0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <twiMultipleOperations>
}
     df4:	2e 96       	adiw	r28, 0x0e	; 14
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <twiReceive>:
void twiSend(TWIDevice targetDevice, TWIBuffer data) {
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
	twiMultipleOperations(1, op);
}

void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	27 97       	sbiw	r28, 0x07	; 7
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	de bf       	out	0x3e, r29	; 62
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
     e1e:	fe 01       	movw	r30, r28
     e20:	31 96       	adiw	r30, 0x01	; 1
     e22:	97 e0       	ldi	r25, 0x07	; 7
     e24:	df 01       	movw	r26, r30
     e26:	1d 92       	st	X+, r1
     e28:	9a 95       	dec	r25
     e2a:	e9 f7       	brne	.-6      	; 0xe26 <twiReceive+0x1c>
     e2c:	49 83       	std	Y+1, r20	; 0x01
     e2e:	5a 83       	std	Y+2, r21	; 0x02
     e30:	6b 83       	std	Y+3, r22	; 0x03
     e32:	7c 83       	std	Y+4, r23	; 0x04
     e34:	8d 83       	std	Y+5, r24	; 0x05
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9f 83       	std	Y+7, r25	; 0x07
     e3c:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     e3e:	bf 01       	movw	r22, r30
     e40:	0e 94 9d 06 	call	0xd3a	; 0xd3a <twiMultipleOperations>
}
     e44:	27 96       	adiw	r28, 0x07	; 7
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <twiSend>:
			twi_unexpectedCondition();
			break;
	}
}

void twiSend(TWIDevice targetDevice, TWIBuffer data) {
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	27 97       	sbiw	r28, 0x07	; 7
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
     e6a:	fe 01       	movw	r30, r28
     e6c:	31 96       	adiw	r30, 0x01	; 1
     e6e:	97 e0       	ldi	r25, 0x07	; 7
     e70:	df 01       	movw	r26, r30
     e72:	1d 92       	st	X+, r1
     e74:	9a 95       	dec	r25
     e76:	e9 f7       	brne	.-6      	; 0xe72 <twiSend+0x1c>
     e78:	49 83       	std	Y+1, r20	; 0x01
     e7a:	5a 83       	std	Y+2, r21	; 0x02
     e7c:	6b 83       	std	Y+3, r22	; 0x03
     e7e:	7c 83       	std	Y+4, r23	; 0x04
     e80:	8d 83       	std	Y+5, r24	; 0x05
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9f 83       	std	Y+7, r25	; 0x07
     e88:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	bf 01       	movw	r22, r30
     e90:	0e 94 9d 06 	call	0xd3a	; 0xd3a <twiMultipleOperations>
}
     e94:	27 96       	adiw	r28, 0x07	; 7
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <WAIT_FOR_TWI>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ea6:	f8 94       	cli

void WAIT_FOR_TWI() {
	while (1) {
		uint8_t still_running;
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			still_running = twi_running;
     ea8:	80 91 e9 03 	lds	r24, 0x03E9
     eac:	90 91 ea 03 	lds	r25, 0x03EA
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     eb0:	78 94       	sei
		}
		if (!still_running) break;
     eb2:	88 23       	and	r24, r24
     eb4:	c1 f7       	brne	.-16     	; 0xea6 <WAIT_FOR_TWI>
	}
}
     eb6:	08 95       	ret

00000eb8 <twi_rpc_oneway>:

void twi_rpc_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     eb8:	1f 93       	push	r17
     eba:	18 2f       	mov	r17, r24
     ebc:	86 2f       	mov	r24, r22
     ebe:	ba 01       	movw	r22, r20
     ec0:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     ec2:	0e 94 a8 00 	call	0x150	; 0x150 <fillSendBuffer>
	twiSend(device, sendBuffer);
     ec6:	40 91 a5 01 	lds	r20, 0x01A5
     eca:	50 91 a6 01 	lds	r21, 0x01A6
     ece:	60 91 a7 01 	lds	r22, 0x01A7
     ed2:	70 91 a8 01 	lds	r23, 0x01A8
     ed6:	81 2f       	mov	r24, r17
     ed8:	0e 94 2b 07 	call	0xe56	; 0xe56 <twiSend>
}
     edc:	1f 91       	pop	r17
     ede:	08 95       	ret

00000ee0 <bgx1_setIllumination>:

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_setIllumination, CMD_SetIllumination, uint16_t)
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <bgx1_setIllumination+0x6>
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	9e 01       	movw	r18, r28
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	42 e0       	ldi	r20, 0x02	; 2
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	80 91 a4 01 	lds	r24, 0x01A4
     efc:	63 e4       	ldi	r22, 0x43	; 67
     efe:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     f02:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <bgx1_termPrint_base>:

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_VOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_termScroll, CMD_TermScroll, uint8_t)
TWI_RPC_FUNCTION_VOID_VAR(bgx1_termPrint_base, CMD_TermPrint, StringArg)
     f10:	9c 01       	movw	r18, r24
     f12:	ab 01       	movw	r20, r22
     f14:	80 91 a4 01 	lds	r24, 0x01A4
     f18:	63 e3       	ldi	r22, 0x33	; 51
     f1a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     f1e:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     f22:	08 95       	ret

00000f24 <bgx1_termScroll>:
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo_base, CMD_LineTo, Point)

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_VOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_termScroll, CMD_TermScroll, uint8_t)
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	9e 01       	movw	r18, r28
     f32:	2f 5f       	subi	r18, 0xFF	; 255
     f34:	3f 4f       	sbci	r19, 0xFF	; 255
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	80 91 a4 01 	lds	r24, 0x01A4
     f3e:	62 e3       	ldi	r22, 0x32	; 50
     f40:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     f44:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <bgx1_termGoto_base>:
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo_base, CMD_LineTo, Point)

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_VOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <bgx1_termGoto_base+0x6>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	9e 01       	movw	r18, r28
     f60:	2f 5f       	subi	r18, 0xFF	; 255
     f62:	3f 4f       	sbci	r19, 0xFF	; 255
     f64:	42 e0       	ldi	r20, 0x02	; 2
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	80 91 a4 01 	lds	r24, 0x01A4
     f6c:	61 e3       	ldi	r22, 0x31	; 49
     f6e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     f72:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <bgx1_termClear>:
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo_base, CMD_LineTo, Point)

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
     f80:	80 91 a4 01 	lds	r24, 0x01A4
     f84:	60 e3       	ldi	r22, 0x30	; 48
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     f90:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     f94:	08 95       	ret

00000f96 <bgx1_lineTo_base>:
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo_base, CMD_LineTo, Point)
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <bgx1_lineTo_base+0x6>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	9e 01       	movw	r18, r28
     fa6:	2f 5f       	subi	r18, 0xFF	; 255
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	42 e0       	ldi	r20, 0x02	; 2
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	80 91 a4 01 	lds	r24, 0x01A4
     fb2:	6b e1       	ldi	r22, 0x1B	; 27
     fb4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     fb8:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <bgx1_selectFont>:
TWI_RPC_FUNCTION_VOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	0f 92       	push	r0
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	9e 01       	movw	r18, r28
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	41 e0       	ldi	r20, 0x01	; 1
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	80 91 a4 01 	lds	r24, 0x01A4
     fe0:	65 e1       	ldi	r22, 0x15	; 21
     fe2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
     fe6:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <bgx1_fillAll>:
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	9e 01       	movw	r18, r28
    1000:	2f 5f       	subi	r18, 0xFF	; 255
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	80 91 a4 01 	lds	r24, 0x01A4
    100c:	62 e1       	ldi	r22, 0x12	; 18
    100e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
    1012:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <bgx1_mode>:
// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	9e 01       	movw	r18, r28
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	80 91 a4 01 	lds	r24, 0x01A4
    1038:	61 e1       	ldi	r22, 0x11	; 17
    103a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
    103e:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <bgx1_move_base>:

// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move_base, CMD_Move, Point)
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <bgx1_move_base+0x6>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	9a 83       	std	Y+2, r25	; 0x02
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9e 01       	movw	r18, r28
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	42 e0       	ldi	r20, 0x02	; 2
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	80 91 a4 01 	lds	r24, 0x01A4
    1066:	60 e1       	ldi	r22, 0x10	; 16
    1068:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
    106c:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <bgx1_setStatus>:

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_setStatus, CMD_SetStatus, uint8_t)
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	0f 92       	push	r0
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	9e 01       	movw	r18, r28
    1088:	2f 5f       	subi	r18, 0xFF	; 255
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	80 91 a4 01 	lds	r24, 0x01A4
    1094:	63 e0       	ldi	r22, 0x03	; 3
    1096:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
    109a:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <bgx1_reset>:
  
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
    10a6:	80 91 a4 01 	lds	r24, 0x01A4
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc_oneway>
    10b6:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    10ba:	08 95       	ret

000010bc <twi_rpc>:

void twi_rpc(TWIDevice device, byte operation, TWIBuffer parameters, TWIBuffer resultBuffer) {
    10bc:	df 92       	push	r13
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	d8 2e       	mov	r13, r24
    10c8:	86 2f       	mov	r24, r22
    10ca:	ba 01       	movw	r22, r20
    10cc:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
    10ce:	0e 94 a8 00 	call	0x150	; 0x150 <fillSendBuffer>
	twiSendReceive(device, sendBuffer, resultBuffer);
    10d2:	40 91 a5 01 	lds	r20, 0x01A5
    10d6:	50 91 a6 01 	lds	r21, 0x01A6
    10da:	60 91 a7 01 	lds	r22, 0x01A7
    10de:	70 91 a8 01 	lds	r23, 0x01A8
    10e2:	8d 2d       	mov	r24, r13
    10e4:	98 01       	movw	r18, r16
    10e6:	87 01       	movw	r16, r14
    10e8:	0e 94 d0 06 	call	0xda0	; 0xda0 <twiSendReceive>
}
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	08 95       	ret

000010f8 <bgx1_syncInterface>:
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	00 d0       	rcall	.+0      	; 0x1106 <bgx1_syncInterface+0xe>
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	8a 83       	std	Y+2, r24	; 0x02
    110c:	9e 01       	movw	r18, r28
    110e:	2e 5f       	subi	r18, 0xFE	; 254
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	7e 01       	movw	r14, r28
    1118:	08 94       	sec
    111a:	e1 1c       	adc	r14, r1
    111c:	f1 1c       	adc	r15, r1
    111e:	01 e0       	ldi	r16, 0x01	; 1
    1120:	10 e0       	ldi	r17, 0x00	; 0
    1122:	80 91 a4 01 	lds	r24, 0x01A4
    1126:	62 e4       	ldi	r22, 0x42	; 66
    1128:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    112c:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	08 95       	ret

00001144 <bgx1_getAnalog>:
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <bgx1_getAnalog+0xe>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	9e 01       	movw	r18, r28
    115c:	2d 5f       	subi	r18, 0xFD	; 253
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	7e 01       	movw	r14, r28
    1166:	08 94       	sec
    1168:	e1 1c       	adc	r14, r1
    116a:	f1 1c       	adc	r15, r1
    116c:	02 e0       	ldi	r16, 0x02	; 2
    116e:	10 e0       	ldi	r17, 0x00	; 0
    1170:	80 91 a4 01 	lds	r24, 0x01A4
    1174:	61 e4       	ldi	r22, 0x41	; 65
    1176:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    117a:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	08 95       	ret

00001196 <bgx1_syncPort_base>:
	uint8_t ddr;
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <bgx1_syncPort_base+0xe>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9b 83       	std	Y+3, r25	; 0x03
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	9e 01       	movw	r18, r28
    11b0:	2e 5f       	subi	r18, 0xFE	; 254
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	42 e0       	ldi	r20, 0x02	; 2
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	7e 01       	movw	r14, r28
    11ba:	08 94       	sec
    11bc:	e1 1c       	adc	r14, r1
    11be:	f1 1c       	adc	r15, r1
    11c0:	01 e0       	ldi	r16, 0x01	; 1
    11c2:	10 e0       	ldi	r17, 0x00	; 0
    11c4:	80 91 a4 01 	lds	r24, 0x01A4
    11c8:	60 e4       	ldi	r22, 0x40	; 64
    11ca:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    11ce:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	08 95       	ret

000011e8 <bgx1_embeddedImage>:
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <bgx1_embeddedImage+0xe>
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    11fe:	9e 01       	movw	r18, r28
    1200:	2d 5f       	subi	r18, 0xFD	; 253
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	7e 01       	movw	r14, r28
    120a:	08 94       	sec
    120c:	e1 1c       	adc	r14, r1
    120e:	f1 1c       	adc	r15, r1
    1210:	02 e0       	ldi	r16, 0x02	; 2
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	80 91 a4 01 	lds	r24, 0x01A4
    1218:	6a e1       	ldi	r22, 0x1A	; 26
    121a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    121e:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <bgx1_drawBitmap_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <bgx1_drawBitmap_base+0xe>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9c 01       	movw	r18, r24
    124e:	ab 01       	movw	r20, r22
    1250:	7e 01       	movw	r14, r28
    1252:	08 94       	sec
    1254:	e1 1c       	adc	r14, r1
    1256:	f1 1c       	adc	r15, r1
    1258:	02 e0       	ldi	r16, 0x02	; 2
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	80 91 a4 01 	lds	r24, 0x01A4
    1260:	69 e1       	ldi	r22, 0x19	; 25
    1262:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    1266:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
    127e:	08 95       	ret

00001280 <bgx1_box_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <bgx1_box_base+0xe>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <bgx1_box_base+0x10>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	9e 01       	movw	r18, r28
    129a:	2d 5f       	subi	r18, 0xFD	; 253
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	42 e0       	ldi	r20, 0x02	; 2
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	7e 01       	movw	r14, r28
    12a4:	08 94       	sec
    12a6:	e1 1c       	adc	r14, r1
    12a8:	f1 1c       	adc	r15, r1
    12aa:	02 e0       	ldi	r16, 0x02	; 2
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	80 91 a4 01 	lds	r24, 0x01A4
    12b2:	68 e1       	ldi	r22, 0x18	; 24
    12b4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    12b8:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	08 95       	ret

000012d6 <bgx1_vLine>:
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <bgx1_vLine+0xe>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	9e 01       	movw	r18, r28
    12ee:	2d 5f       	subi	r18, 0xFD	; 253
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	7e 01       	movw	r14, r28
    12f8:	08 94       	sec
    12fa:	e1 1c       	adc	r14, r1
    12fc:	f1 1c       	adc	r15, r1
    12fe:	02 e0       	ldi	r16, 0x02	; 2
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	80 91 a4 01 	lds	r24, 0x01A4
    1306:	67 e1       	ldi	r22, 0x17	; 23
    1308:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    130c:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	08 95       	ret

00001328 <bgx1_hLine>:
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <bgx1_hLine+0xe>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	9e 01       	movw	r18, r28
    1340:	2d 5f       	subi	r18, 0xFD	; 253
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	7e 01       	movw	r14, r28
    134a:	08 94       	sec
    134c:	e1 1c       	adc	r14, r1
    134e:	f1 1c       	adc	r15, r1
    1350:	02 e0       	ldi	r16, 0x02	; 2
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	80 91 a4 01 	lds	r24, 0x01A4
    1358:	66 e1       	ldi	r22, 0x16	; 22
    135a:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    135e:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	08 95       	ret

0000137a <bgx1_textWidth_base>:
// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9c 01       	movw	r18, r24
    138e:	ab 01       	movw	r20, r22
    1390:	7e 01       	movw	r14, r28
    1392:	08 94       	sec
    1394:	e1 1c       	adc	r14, r1
    1396:	f1 1c       	adc	r15, r1
    1398:	01 e0       	ldi	r16, 0x01	; 1
    139a:	10 e0       	ldi	r17, 0x00	; 0
    139c:	80 91 a4 01 	lds	r24, 0x01A4
    13a0:	64 e1       	ldi	r22, 0x14	; 20
    13a2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    13a6:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	08 95       	ret

000013bc <bgx1_print_base>:

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <bgx1_print_base+0xe>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	9c 01       	movw	r18, r24
    13d0:	ab 01       	movw	r20, r22
    13d2:	7e 01       	movw	r14, r28
    13d4:	08 94       	sec
    13d6:	e1 1c       	adc	r14, r1
    13d8:	f1 1c       	adc	r15, r1
    13da:	02 e0       	ldi	r16, 0x02	; 2
    13dc:	10 e0       	ldi	r17, 0x00	; 0
    13de:	80 91 a4 01 	lds	r24, 0x01A4
    13e2:	63 e1       	ldi	r22, 0x13	; 19
    13e4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    13e8:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	9a 81       	ldd	r25, Y+2	; 0x02
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	08 95       	ret

00001402 <bgx1_getStatus>:
};

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	7e 01       	movw	r14, r28
    1416:	08 94       	sec
    1418:	e1 1c       	adc	r14, r1
    141a:	f1 1c       	adc	r15, r1
    141c:	01 e0       	ldi	r16, 0x01	; 1
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	80 91 a4 01 	lds	r24, 0x01A4
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    1430:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	0f 90       	pop	r0
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	08 95       	ret

00001446 <bgx1_getVersion>:
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <bgx1_getVersion+0xe>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	7e 01       	movw	r14, r28
    145a:	08 94       	sec
    145c:	e1 1c       	adc	r14, r1
    145e:	f1 1c       	adc	r15, r1
    1460:	02 e0       	ldi	r16, 0x02	; 2
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	80 91 a4 01 	lds	r24, 0x01A4
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	a9 01       	movw	r20, r18
    1470:	0e 94 5e 08 	call	0x10bc	; 0x10bc <twi_rpc>
    1474:	0e 94 53 07 	call	0xea6	; 0xea6 <WAIT_FOR_TWI>
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	ff 90       	pop	r15
    148a:	ef 90       	pop	r14
    148c:	08 95       	ret

0000148e <before_timer>:
#define _BASE_AFTER_KERNEL_

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
    148e:	08 95       	ret

00001490 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
    1490:	80 b7       	in	r24, 0x30	; 48
    1492:	80 68       	ori	r24, 0x80	; 128
    1494:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
    1496:	e4 e6       	ldi	r30, 0x64	; 100
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 66       	ori	r24, 0x60	; 96
    149e:	80 83       	st	Z, r24
	// BOD - TODO configure?
	
	// Final initialization-sequence.
	// AFTER other modules modified __default_stack_size and __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
    14a0:	0e 94 47 0a 	call	0x148e	; 0x148e <before_timer>
	enableTimerInterrupt(CLOCKTIMER_A);
    14a4:	82 e4       	ldi	r24, 0x42	; 66
    14a6:	93 e0       	ldi	r25, 0x03	; 3
    14a8:	0e 94 b4 10 	call	0x2168	; 0x2168 <enableTimerInterrupt>
	sei();
    14ac:	78 94       	sei
}
    14ae:	08 95       	ret

000014b0 <bgx1_print>:
// ==
// Functions for normal RAM arguments
// ==

Point bgx1_print(char *argument) {
	return bgx1_print_base(argument, strlen(argument));
    14b0:	dc 01       	movw	r26, r24
    14b2:	0d 90       	ld	r0, X+
    14b4:	00 20       	and	r0, r0
    14b6:	e9 f7       	brne	.-6      	; 0x14b2 <bgx1_print+0x2>
    14b8:	bd 01       	movw	r22, r26
    14ba:	61 50       	subi	r22, 0x01	; 1
    14bc:	70 40       	sbci	r23, 0x00	; 0
    14be:	68 1b       	sub	r22, r24
    14c0:	79 0b       	sbc	r23, r25
    14c2:	0e 94 de 09 	call	0x13bc	; 0x13bc <bgx1_print_base>
}
    14c6:	08 95       	ret

000014c8 <bgx1_textWidth>:

uint8_t bgx1_textWidth(char *argument) {
	return bgx1_textWidth_base(argument, strlen(argument));
    14c8:	dc 01       	movw	r26, r24
    14ca:	0d 90       	ld	r0, X+
    14cc:	00 20       	and	r0, r0
    14ce:	e9 f7       	brne	.-6      	; 0x14ca <bgx1_textWidth+0x2>
    14d0:	bd 01       	movw	r22, r26
    14d2:	61 50       	subi	r22, 0x01	; 1
    14d4:	70 40       	sbci	r23, 0x00	; 0
    14d6:	68 1b       	sub	r22, r24
    14d8:	79 0b       	sbc	r23, r25
    14da:	0e 94 bd 09 	call	0x137a	; 0x137a <bgx1_textWidth_base>
}
    14de:	08 95       	ret

000014e0 <bgx1_termPrint>:

void bgx1_termPrint(char *argument) {
	bgx1_termPrint_base(argument, strlen(argument));
    14e0:	dc 01       	movw	r26, r24
    14e2:	0d 90       	ld	r0, X+
    14e4:	00 20       	and	r0, r0
    14e6:	e9 f7       	brne	.-6      	; 0x14e2 <bgx1_termPrint+0x2>
    14e8:	bd 01       	movw	r22, r26
    14ea:	61 50       	subi	r22, 0x01	; 1
    14ec:	70 40       	sbci	r23, 0x00	; 0
    14ee:	68 1b       	sub	r22, r24
    14f0:	79 0b       	sbc	r23, r25
    14f2:	0e 94 88 07 	call	0xf10	; 0xf10 <bgx1_termPrint_base>
}
    14f6:	08 95       	ret

000014f8 <bgx1_drawTile>:

Point bgx1_drawTile(uint8_t width, uint8_t height, const uint8_t *argument) {
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	f8 2f       	mov	r31, r24
    1510:	e6 2f       	mov	r30, r22
    1512:	b5 2e       	mov	r11, r21
	PREPARED_BITMAP_CALL(memcpy)
}
    1514:	cd b6       	in	r12, 0x3d	; 61
    1516:	de b6       	in	r13, 0x3e	; 62
void bgx1_termPrint(char *argument) {
	bgx1_termPrint_base(argument, strlen(argument));
}

Point bgx1_drawTile(uint8_t width, uint8_t height, const uint8_t *argument) {
	PREPARED_BITMAP_CALL(memcpy)
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	68 e0       	ldi	r22, 0x08	; 8
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divmodhi4>
    1524:	9b 01       	movw	r18, r22
    1526:	2f 5f       	subi	r18, 0xFF	; 255
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	e2 9f       	mul	r30, r18
    152c:	20 2d       	mov	r18, r0
    152e:	11 24       	eor	r1, r1
    1530:	82 2f       	mov	r24, r18
    1532:	8e 5f       	subi	r24, 0xFE	; 254
    1534:	e8 2e       	mov	r14, r24
    1536:	ff 24       	eor	r15, r15
    1538:	8d b7       	in	r24, 0x3d	; 61
    153a:	9e b7       	in	r25, 0x3e	; 62
    153c:	8e 19       	sub	r24, r14
    153e:	9f 09       	sbc	r25, r15
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	9e bf       	out	0x3e, r25	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	8d bf       	out	0x3d, r24	; 61
    154a:	0d b7       	in	r16, 0x3d	; 61
    154c:	1e b7       	in	r17, 0x3e	; 62
    154e:	0f 5f       	subi	r16, 0xFF	; 255
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	ad b7       	in	r26, 0x3d	; 61
    1554:	be b7       	in	r27, 0x3e	; 62
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	fc 93       	st	X, r31
    155a:	d8 01       	movw	r26, r16
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	ec 93       	st	X, r30
    1560:	ed b7       	in	r30, 0x3d	; 61
    1562:	fe b7       	in	r31, 0x3e	; 62
    1564:	33 96       	adiw	r30, 0x03	; 3
    1566:	cf 01       	movw	r24, r30
    1568:	64 2f       	mov	r22, r20
    156a:	7b 2d       	mov	r23, r11
    156c:	42 2f       	mov	r20, r18
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	0e 94 cf 14 	call	0x299e	; 0x299e <memcpy>
    1574:	c8 01       	movw	r24, r16
    1576:	b7 01       	movw	r22, r14
    1578:	0e 94 1d 09 	call	0x123a	; 0x123a <bgx1_drawBitmap_base>
}
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de be       	out	0x3e, r13	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd be       	out	0x3d, r12	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	08 95       	ret

0000159a <bgx1_print_P>:

// ==
// Functions for FLASH arguments
// ==

Point bgx1_print_P(PGM_P argument) {
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	7c 01       	movw	r14, r24
	FETCH_PROGRAM_STRING();
	return bgx1_print_base(ramString, argSize);
}
    15b4:	ad b6       	in	r10, 0x3d	; 61
    15b6:	be b6       	in	r11, 0x3e	; 62
// ==
// Functions for FLASH arguments
// ==

Point bgx1_print_P(PGM_P argument) {
	FETCH_PROGRAM_STRING();
    15b8:	0e 94 c6 14 	call	0x298c	; 0x298c <strlen_P>
    15bc:	c8 2e       	mov	r12, r24
    15be:	dd 24       	eor	r13, r13
    15c0:	8d b7       	in	r24, 0x3d	; 61
    15c2:	9e b7       	in	r25, 0x3e	; 62
    15c4:	8c 19       	sub	r24, r12
    15c6:	9d 09       	sbc	r25, r13
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	9e bf       	out	0x3e, r25	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	8d bf       	out	0x3d, r24	; 61
    15d2:	0d b7       	in	r16, 0x3d	; 61
    15d4:	1e b7       	in	r17, 0x3e	; 62
    15d6:	0f 5f       	subi	r16, 0xFF	; 255
    15d8:	1f 4f       	sbci	r17, 0xFF	; 255
    15da:	c8 01       	movw	r24, r16
    15dc:	b7 01       	movw	r22, r14
    15de:	a6 01       	movw	r20, r12
    15e0:	0e 94 bd 14 	call	0x297a	; 0x297a <memcpy_P>
	return bgx1_print_base(ramString, argSize);
    15e4:	c8 01       	movw	r24, r16
    15e6:	b6 01       	movw	r22, r12
    15e8:	0e 94 de 09 	call	0x13bc	; 0x13bc <bgx1_print_base>
}
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	be be       	out	0x3e, r11	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	ad be       	out	0x3d, r10	; 61
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	08 95       	ret

0000160c <bgx1_textWidth_P>:

uint8_t bgx1_textWidth_P(PGM_P argument) {
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	7c 01       	movw	r14, r24
	FETCH_PROGRAM_STRING();
	return bgx1_textWidth_base(ramString, argSize);
}
    1626:	ad b6       	in	r10, 0x3d	; 61
    1628:	be b6       	in	r11, 0x3e	; 62
	FETCH_PROGRAM_STRING();
	return bgx1_print_base(ramString, argSize);
}

uint8_t bgx1_textWidth_P(PGM_P argument) {
	FETCH_PROGRAM_STRING();
    162a:	0e 94 c6 14 	call	0x298c	; 0x298c <strlen_P>
    162e:	c8 2e       	mov	r12, r24
    1630:	dd 24       	eor	r13, r13
    1632:	8d b7       	in	r24, 0x3d	; 61
    1634:	9e b7       	in	r25, 0x3e	; 62
    1636:	8c 19       	sub	r24, r12
    1638:	9d 09       	sbc	r25, r13
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	9e bf       	out	0x3e, r25	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	8d bf       	out	0x3d, r24	; 61
    1644:	0d b7       	in	r16, 0x3d	; 61
    1646:	1e b7       	in	r17, 0x3e	; 62
    1648:	0f 5f       	subi	r16, 0xFF	; 255
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	c8 01       	movw	r24, r16
    164e:	b7 01       	movw	r22, r14
    1650:	a6 01       	movw	r20, r12
    1652:	0e 94 bd 14 	call	0x297a	; 0x297a <memcpy_P>
	return bgx1_textWidth_base(ramString, argSize);
    1656:	c8 01       	movw	r24, r16
    1658:	b6 01       	movw	r22, r12
    165a:	0e 94 bd 09 	call	0x137a	; 0x137a <bgx1_textWidth_base>
}
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	be be       	out	0x3e, r11	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	ad be       	out	0x3d, r10	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	1f 91       	pop	r17
    166e:	0f 91       	pop	r16
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	bf 90       	pop	r11
    167a:	af 90       	pop	r10
    167c:	08 95       	ret

0000167e <bgx1_termPrint_P>:

void bgx1_termPrint_P(PGM_P argument) {
    167e:	af 92       	push	r10
    1680:	bf 92       	push	r11
    1682:	cf 92       	push	r12
    1684:	df 92       	push	r13
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	7c 01       	movw	r14, r24
	FETCH_PROGRAM_STRING();
	bgx1_termPrint_base(ramString, argSize);
}
    1698:	ad b6       	in	r10, 0x3d	; 61
    169a:	be b6       	in	r11, 0x3e	; 62
	FETCH_PROGRAM_STRING();
	return bgx1_textWidth_base(ramString, argSize);
}

void bgx1_termPrint_P(PGM_P argument) {
	FETCH_PROGRAM_STRING();
    169c:	0e 94 c6 14 	call	0x298c	; 0x298c <strlen_P>
    16a0:	c8 2e       	mov	r12, r24
    16a2:	dd 24       	eor	r13, r13
    16a4:	8d b7       	in	r24, 0x3d	; 61
    16a6:	9e b7       	in	r25, 0x3e	; 62
    16a8:	8c 19       	sub	r24, r12
    16aa:	9d 09       	sbc	r25, r13
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	9e bf       	out	0x3e, r25	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	8d bf       	out	0x3d, r24	; 61
    16b6:	0d b7       	in	r16, 0x3d	; 61
    16b8:	1e b7       	in	r17, 0x3e	; 62
    16ba:	0f 5f       	subi	r16, 0xFF	; 255
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	c8 01       	movw	r24, r16
    16c0:	b7 01       	movw	r22, r14
    16c2:	a6 01       	movw	r20, r12
    16c4:	0e 94 bd 14 	call	0x297a	; 0x297a <memcpy_P>
	bgx1_termPrint_base(ramString, argSize);
    16c8:	c8 01       	movw	r24, r16
    16ca:	b6 01       	movw	r22, r12
    16cc:	0e 94 88 07 	call	0xf10	; 0xf10 <bgx1_termPrint_base>
}
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	be be       	out	0x3e, r11	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	ad be       	out	0x3d, r10	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	08 95       	ret

000016f0 <bgx1_drawTile_P>:

Point bgx1_drawTile_P(uint8_t width, uint8_t height, PGM_P argument) {
    16f0:	cf 92       	push	r12
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	f8 2f       	mov	r31, r24
    1706:	e6 2f       	mov	r30, r22
    1708:	9a 01       	movw	r18, r20
	PREPARED_BITMAP_CALL(memcpy_P)
}
    170a:	cd b6       	in	r12, 0x3d	; 61
    170c:	de b6       	in	r13, 0x3e	; 62
	FETCH_PROGRAM_STRING();
	bgx1_termPrint_base(ramString, argSize);
}

Point bgx1_drawTile_P(uint8_t width, uint8_t height, PGM_P argument) {
	PREPARED_BITMAP_CALL(memcpy_P)
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	68 e0       	ldi	r22, 0x08	; 8
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divmodhi4>
    171a:	ab 01       	movw	r20, r22
    171c:	4f 5f       	subi	r20, 0xFF	; 255
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	e4 9f       	mul	r30, r20
    1722:	40 2d       	mov	r20, r0
    1724:	11 24       	eor	r1, r1
    1726:	84 2f       	mov	r24, r20
    1728:	8e 5f       	subi	r24, 0xFE	; 254
    172a:	e8 2e       	mov	r14, r24
    172c:	ff 24       	eor	r15, r15
    172e:	8d b7       	in	r24, 0x3d	; 61
    1730:	9e b7       	in	r25, 0x3e	; 62
    1732:	8e 19       	sub	r24, r14
    1734:	9f 09       	sbc	r25, r15
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	9e bf       	out	0x3e, r25	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	8d bf       	out	0x3d, r24	; 61
    1740:	0d b7       	in	r16, 0x3d	; 61
    1742:	1e b7       	in	r17, 0x3e	; 62
    1744:	0f 5f       	subi	r16, 0xFF	; 255
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	ad b7       	in	r26, 0x3d	; 61
    174a:	be b7       	in	r27, 0x3e	; 62
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	fc 93       	st	X, r31
    1750:	d8 01       	movw	r26, r16
    1752:	11 96       	adiw	r26, 0x01	; 1
    1754:	ec 93       	st	X, r30
    1756:	03 96       	adiw	r24, 0x03	; 3
    1758:	b9 01       	movw	r22, r18
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	0e 94 bd 14 	call	0x297a	; 0x297a <memcpy_P>
    1760:	c8 01       	movw	r24, r16
    1762:	b7 01       	movw	r22, r14
    1764:	0e 94 1d 09 	call	0x123a	; 0x123a <bgx1_drawBitmap_base>
}
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de be       	out	0x3e, r13	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd be       	out	0x3d, r12	; 61
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	08 95       	ret

00001784 <bgx1_move>:

// ==
// Convenience functions for 2 parameters
// ==

void bgx1_move(uint8_t x, uint8_t y) {
    1784:	96 2f       	mov	r25, r22
	bgx1_move_base((Point) { x, y });
    1786:	0e 94 25 08 	call	0x104a	; 0x104a <bgx1_move_base>
}
    178a:	08 95       	ret

0000178c <bgx1_box>:

Point bgx1_box(uint8_t width, uint8_t height) {
    178c:	96 2f       	mov	r25, r22
	return bgx1_box_base((Rect) { width, height });
    178e:	0e 94 40 09 	call	0x1280	; 0x1280 <bgx1_box_base>
}
    1792:	08 95       	ret

00001794 <bgx1_lineTo>:

void bgx1_lineTo(uint8_t x, uint8_t y) {
    1794:	96 2f       	mov	r25, r22
	bgx1_lineTo_base((Point) { x, y });
    1796:	0e 94 cb 07 	call	0xf96	; 0xf96 <bgx1_lineTo_base>
}
    179a:	08 95       	ret

0000179c <bgx1_termGoto>:

void bgx1_termGoto(uint8_t x, uint8_t y) {
    179c:	96 2f       	mov	r25, r22
	bgx1_termGoto_base((Point) { x, y });
    179e:	0e 94 a8 07 	call	0xf50	; 0xf50 <bgx1_termGoto_base>
}
    17a2:	08 95       	ret

000017a4 <bgx1_syncPort>:

uint8_t bgx1_syncPort(uint8_t ddr, uint8_t port) {
    17a4:	96 2f       	mov	r25, r22
	return bgx1_syncPort_base((SyncPortArgs) { ddr, port });
    17a6:	0e 94 cb 08 	call	0x1196	; 0x1196 <bgx1_syncPort_base>
}
    17aa:	08 95       	ret

000017ac <check_bgx1_operational>:

BOOL check_bgx1_operational() {
	uint16_t version = bgx1_getVersion();
    17ac:	0e 94 23 0a 	call	0x1446	; 0x1446 <bgx1_getVersion>
	return (twi_error == TWI_No_Error) && (version == BGX1_VERSION);
    17b0:	20 91 8c 03 	lds	r18, 0x038C
    17b4:	30 91 8d 03 	lds	r19, 0x038D
    17b8:	21 15       	cp	r18, r1
    17ba:	31 05       	cpc	r19, r1
    17bc:	31 f4       	brne	.+12     	; 0x17ca <check_bgx1_operational+0x1e>

uint8_t bgx1_syncPort(uint8_t ddr, uint8_t port) {
	return bgx1_syncPort_base((SyncPortArgs) { ddr, port });
}

BOOL check_bgx1_operational() {
    17be:	21 e0       	ldi	r18, 0x01	; 1
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	94 07       	cpc	r25, r20
    17c8:	11 f0       	breq	.+4      	; 0x17ce <check_bgx1_operational+0x22>
	uint16_t version = bgx1_getVersion();
	return (twi_error == TWI_No_Error) && (version == BGX1_VERSION);
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
}
    17ce:	c9 01       	movw	r24, r18
    17d0:	08 95       	ret

000017d2 <bgx1_drawBitmap>:
		if (height)														\
			bgx1_move(newPos.x - row_size, newPos.y);					\
	}																	\
	return newPos;

Point bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bytes[]) {
    17d2:	8f 92       	push	r8
    17d4:	9f 92       	push	r9
    17d6:	af 92       	push	r10
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	d8 2e       	mov	r13, r24
    17f2:	f6 2e       	mov	r15, r22
    17f4:	25 2f       	mov	r18, r21
	const uint8_t *data = bytes;
	DRAW_BITMAP(bgx1_drawTile)
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	68 e0       	ldi	r22, 0x08	; 8
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divmodhi4>
    1802:	e6 2e       	mov	r14, r22
    1804:	e3 94       	inc	r14
    1806:	0e 2d       	mov	r16, r14
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	82 e1       	ldi	r24, 0x12	; 18
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	b8 01       	movw	r22, r16
    1810:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divmodhi4>
    1814:	c6 2e       	mov	r12, r22
			bgx1_move(newPos.x - row_size, newPos.y);					\
	}																	\
	return newPos;

Point bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bytes[]) {
	const uint8_t *data = bytes;
    1816:	52 2f       	mov	r21, r18
    1818:	4a 01       	movw	r8, r20
	DRAW_BITMAP(bgx1_drawTile)
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	1e c0       	rjmp	.+60     	; 0x185c <bgx1_drawBitmap+0x8a>
    1820:	bf 2c       	mov	r11, r15
    1822:	cf 14       	cp	r12, r15
    1824:	08 f4       	brcc	.+2      	; 0x1828 <bgx1_drawBitmap+0x56>
    1826:	bc 2c       	mov	r11, r12
    1828:	8d 2d       	mov	r24, r13
    182a:	6b 2d       	mov	r22, r11
    182c:	a4 01       	movw	r20, r8
    182e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <bgx1_drawTile>
    1832:	a8 2e       	mov	r10, r24
    1834:	4b 2d       	mov	r20, r11
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	40 9f       	mul	r20, r16
    183a:	90 01       	movw	r18, r0
    183c:	41 9f       	mul	r20, r17
    183e:	30 0d       	add	r19, r0
    1840:	50 9f       	mul	r21, r16
    1842:	30 0d       	add	r19, r0
    1844:	11 24       	eor	r1, r1
    1846:	82 0e       	add	r8, r18
    1848:	93 1e       	adc	r9, r19
    184a:	fb 18       	sub	r15, r11
    184c:	31 f0       	breq	.+12     	; 0x185a <bgx1_drawBitmap+0x88>
    184e:	8e 19       	sub	r24, r14
    1850:	69 2f       	mov	r22, r25
    1852:	99 83       	std	Y+1, r25	; 0x01
    1854:	0e 94 c2 0b 	call	0x1784	; 0x1784 <bgx1_move>
    1858:	99 81       	ldd	r25, Y+1	; 0x01
    185a:	8a 2d       	mov	r24, r10
    185c:	ff 20       	and	r15, r15
    185e:	01 f7       	brne	.-64     	; 0x1820 <bgx1_drawBitmap+0x4e>
}
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	9f 90       	pop	r9
    1878:	8f 90       	pop	r8
    187a:	08 95       	ret

0000187c <bgx1_drawBitmap_P>:

Point bgx1_drawBitmap_P(uint8_t width, uint8_t height, PGM_P data) {
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	e8 2e       	mov	r14, r24
    189c:	f6 2e       	mov	r15, r22
    189e:	4a 01       	movw	r8, r20
	DRAW_BITMAP(bgx1_drawTile_P)
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	21 50       	subi	r18, 0x01	; 1
    18a6:	30 40       	sbci	r19, 0x00	; 0
    18a8:	c9 01       	movw	r24, r18
    18aa:	68 e0       	ldi	r22, 0x08	; 8
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divmodhi4>
    18b2:	d6 2e       	mov	r13, r22
    18b4:	d3 94       	inc	r13
    18b6:	0d 2d       	mov	r16, r13
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	82 e1       	ldi	r24, 0x12	; 18
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	b8 01       	movw	r22, r16
    18c0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <__divmodhi4>
    18c4:	b6 2e       	mov	r11, r22
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	1e c0       	rjmp	.+60     	; 0x1908 <bgx1_drawBitmap_P+0x8c>
    18cc:	cf 2c       	mov	r12, r15
    18ce:	bf 14       	cp	r11, r15
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <bgx1_drawBitmap_P+0x58>
    18d2:	cb 2c       	mov	r12, r11
    18d4:	8e 2d       	mov	r24, r14
    18d6:	6c 2d       	mov	r22, r12
    18d8:	a4 01       	movw	r20, r8
    18da:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <bgx1_drawTile_P>
    18de:	a8 2e       	mov	r10, r24
    18e0:	4c 2d       	mov	r20, r12
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	40 9f       	mul	r20, r16
    18e6:	90 01       	movw	r18, r0
    18e8:	41 9f       	mul	r20, r17
    18ea:	30 0d       	add	r19, r0
    18ec:	50 9f       	mul	r21, r16
    18ee:	30 0d       	add	r19, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	82 0e       	add	r8, r18
    18f4:	93 1e       	adc	r9, r19
    18f6:	fc 18       	sub	r15, r12
    18f8:	31 f0       	breq	.+12     	; 0x1906 <bgx1_drawBitmap_P+0x8a>
    18fa:	8d 19       	sub	r24, r13
    18fc:	69 2f       	mov	r22, r25
    18fe:	99 83       	std	Y+1, r25	; 0x01
    1900:	0e 94 c2 0b 	call	0x1784	; 0x1784 <bgx1_move>
    1904:	99 81       	ldd	r25, Y+1	; 0x01
    1906:	8a 2d       	mov	r24, r10
    1908:	ff 20       	and	r15, r15
    190a:	01 f7       	brne	.-64     	; 0x18cc <bgx1_drawBitmap_P+0x50>
}
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	08 95       	ret

00001928 <main>:

#include <util/delay.h>
#include <misc/read_buttons_loop.h>
#include <util/twi.h>

int main() {
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	28 97       	sbiw	r28, 0x08	; 8
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
	PButton allButtons[] = { ButtonLeftBackward, ButtonLeftForward, ButtonRightBackward, ButtonRightForward };
    193c:	40 91 82 01 	lds	r20, 0x0182
    1940:	50 91 83 01 	lds	r21, 0x0183
    1944:	20 91 7c 01 	lds	r18, 0x017C
    1948:	30 91 7d 01 	lds	r19, 0x017D
    194c:	80 91 7e 01 	lds	r24, 0x017E
    1950:	90 91 7f 01 	lds	r25, 0x017F
    1954:	60 91 80 01 	lds	r22, 0x0180
    1958:	70 91 81 01 	lds	r23, 0x0181
    195c:	7a 83       	std	Y+2, r23	; 0x02
    195e:	69 83       	std	Y+1, r22	; 0x01
    1960:	5c 83       	std	Y+4, r21	; 0x04
    1962:	4b 83       	std	Y+3, r20	; 0x03
    1964:	3e 83       	std	Y+6, r19	; 0x06
    1966:	2d 83       	std	Y+5, r18	; 0x05
    1968:	98 87       	std	Y+8, r25	; 0x08
    196a:	8f 83       	std	Y+7, r24	; 0x07
	read_buttons_loop(4, allButtons);
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	be 01       	movw	r22, r28
    1970:	6f 5f       	subi	r22, 0xFF	; 255
    1972:	7f 4f       	sbci	r23, 0xFF	; 255
    1974:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <read_buttons_loop>
}
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	28 96       	adiw	r28, 0x08	; 8
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <button_pressed>:

void button_pressed(PButton button) {
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	ec 01       	movw	r28, r24
	blinkAllLeds(AllLeds, 2);
    19a2:	00 91 62 01 	lds	r16, 0x0162
    19a6:	10 91 63 01 	lds	r17, 0x0163
    19aa:	c8 01       	movw	r24, r16
    19ac:	62 e0       	ldi	r22, 0x02	; 2
    19ae:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <blinkAllLeds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19b2:	8f e7       	ldi	r24, 0x7F	; 127
    19b4:	94 e8       	ldi	r25, 0x84	; 132
    19b6:	ae e1       	ldi	r26, 0x1E	; 30
    19b8:	81 50       	subi	r24, 0x01	; 1
    19ba:	90 40       	sbci	r25, 0x00	; 0
    19bc:	a0 40       	sbci	r26, 0x00	; 0
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <button_pressed+0x2a>
    19c0:	00 c0       	rjmp	.+0      	; 0x19c2 <button_pressed+0x34>
    19c2:	00 00       	nop
	_delay_ms(500);
	
	if (button == ButtonLeftForward) {
    19c4:	80 91 82 01 	lds	r24, 0x0182
    19c8:	90 91 83 01 	lds	r25, 0x0183
    19cc:	c8 17       	cp	r28, r24
    19ce:	d9 07       	cpc	r29, r25
    19d0:	f1 f5       	brne	.+124    	; 0x1a4e <button_pressed+0xc0>
		uint16_t version = bgx1_getVersion();
    19d2:	0e 94 23 0a 	call	0x1446	; 0x1446 <bgx1_getVersion>
    19d6:	6c 01       	movw	r12, r24
		if (twi_error == TWI_No_Error) {
    19d8:	80 91 8c 03 	lds	r24, 0x038C
    19dc:	90 91 8d 03 	lds	r25, 0x038D
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <button_pressed+0x58>
    19e4:	7b c0       	rjmp	.+246    	; 0x1adc <button_pressed+0x14e>
			flashLed(RightYellow, 1000);
    19e6:	e0 90 58 01 	lds	r14, 0x0158
    19ea:	f0 90 59 01 	lds	r15, 0x0159
    19ee:	c7 01       	movw	r24, r14
    19f0:	68 ee       	ldi	r22, 0xE8	; 232
    19f2:	73 e0       	ldi	r23, 0x03	; 3
    19f4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <flashLed>
			blinkLeds(AllLeds, version, 4);
    19f8:	c8 01       	movw	r24, r16
    19fa:	b6 01       	movw	r22, r12
    19fc:	44 e0       	ldi	r20, 0x04	; 4
    19fe:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
			
			version = version << 4;
    1a02:	e6 01       	movw	r28, r12
    1a04:	94 e0       	ldi	r25, 0x04	; 4
    1a06:	cc 0f       	add	r28, r28
    1a08:	dd 1f       	adc	r29, r29
    1a0a:	9a 95       	dec	r25
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <button_pressed+0x78>
			flashLed(RightYellow, 1000);
    1a0e:	c7 01       	movw	r24, r14
    1a10:	68 ee       	ldi	r22, 0xE8	; 232
    1a12:	73 e0       	ldi	r23, 0x03	; 3
    1a14:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <flashLed>
			blinkLeds(AllLeds, version, 4);
    1a18:	c8 01       	movw	r24, r16
    1a1a:	be 01       	movw	r22, r28
    1a1c:	44 e0       	ldi	r20, 0x04	; 4
    1a1e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
			
			version = version << 4;
			flashLed(RightYellow, 1000);
    1a22:	c7 01       	movw	r24, r14
    1a24:	68 ee       	ldi	r22, 0xE8	; 232
    1a26:	73 e0       	ldi	r23, 0x03	; 3
    1a28:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <flashLed>
			blinkLeds(AllLeds, version, 4);
    1a2c:	c8 01       	movw	r24, r16
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	7c 2d       	mov	r23, r12
    1a32:	44 e0       	ldi	r20, 0x04	; 4
    1a34:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
			
			version = version << 4;
			flashLed(RightYellow, 1000);
    1a38:	c7 01       	movw	r24, r14
    1a3a:	68 ee       	ldi	r22, 0xE8	; 232
    1a3c:	73 e0       	ldi	r23, 0x03	; 3
    1a3e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <flashLed>
			
			version = version << 4;
			flashLed(RightYellow, 1000);
			blinkLeds(AllLeds, version, 4);
			
			version = version << 4;
    1a42:	7c 2d       	mov	r23, r12
    1a44:	72 95       	swap	r23
    1a46:	70 7f       	andi	r23, 0xF0	; 240
			flashLed(RightYellow, 1000);
			blinkLeds(AllLeds, version, 4);
    1a48:	c8 01       	movw	r24, r16
    1a4a:	60 e0       	ldi	r22, 0x00	; 0
    1a4c:	2d c0       	rjmp	.+90     	; 0x1aa8 <button_pressed+0x11a>
		}
	} else if (button == ButtonRightForward) {
    1a4e:	80 91 7e 01 	lds	r24, 0x017E
    1a52:	90 91 7f 01 	lds	r25, 0x017F
    1a56:	c8 17       	cp	r28, r24
    1a58:	d9 07       	cpc	r29, r25
    1a5a:	51 f5       	brne	.+84     	; 0x1ab0 <button_pressed+0x122>
		uint16_t status = AS_WORD(bgx1_syncInterface(0xA5));
    1a5c:	85 ea       	ldi	r24, 0xA5	; 165
    1a5e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <bgx1_syncInterface>
		if (twi_error == TWI_No_Error) {
    1a62:	20 91 8c 03 	lds	r18, 0x038C
    1a66:	30 91 8d 03 	lds	r19, 0x038D
    1a6a:	21 15       	cp	r18, r1
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	b1 f5       	brne	.+108    	; 0x1adc <button_pressed+0x14e>
			version = version << 4;
			flashLed(RightYellow, 1000);
			blinkLeds(AllLeds, version, 4);
		}
	} else if (button == ButtonRightForward) {
		uint16_t status = AS_WORD(bgx1_syncInterface(0xA5));
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	ed 01       	movw	r28, r26
		if (twi_error == TWI_No_Error) {
			flashLed(RightYellow, 1000);
    1a74:	e0 90 58 01 	lds	r14, 0x0158
    1a78:	f0 90 59 01 	lds	r15, 0x0159
    1a7c:	c7 01       	movw	r24, r14
    1a7e:	68 ee       	ldi	r22, 0xE8	; 232
    1a80:	73 e0       	ldi	r23, 0x03	; 3
    1a82:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <flashLed>
			blinkLeds(AllLeds, status, 4);
    1a86:	c8 01       	movw	r24, r16
    1a88:	be 01       	movw	r22, r28
    1a8a:	44 e0       	ldi	r20, 0x04	; 4
    1a8c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
			
			status = status << 4;
			flashLed(RightYellow, 1000);
    1a90:	c7 01       	movw	r24, r14
    1a92:	68 ee       	ldi	r22, 0xE8	; 232
    1a94:	73 e0       	ldi	r23, 0x03	; 3
    1a96:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <flashLed>
		uint16_t status = AS_WORD(bgx1_syncInterface(0xA5));
		if (twi_error == TWI_No_Error) {
			flashLed(RightYellow, 1000);
			blinkLeds(AllLeds, status, 4);
			
			status = status << 4;
    1a9a:	be 01       	movw	r22, r28
    1a9c:	84 e0       	ldi	r24, 0x04	; 4
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	8a 95       	dec	r24
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <button_pressed+0x110>
			flashLed(RightYellow, 1000);
			blinkLeds(AllLeds, status, 4);
    1aa6:	c8 01       	movw	r24, r16
    1aa8:	44 e0       	ldi	r20, 0x04	; 4
    1aaa:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
    1aae:	16 c0       	rjmp	.+44     	; 0x1adc <button_pressed+0x14e>
		}
	} else if (button == ButtonLeftBackward) {
    1ab0:	80 91 80 01 	lds	r24, 0x0180
    1ab4:	90 91 81 01 	lds	r25, 0x0181
    1ab8:	c8 17       	cp	r28, r24
    1aba:	d9 07       	cpc	r29, r25
    1abc:	29 f4       	brne	.+10     	; 0x1ac8 <button_pressed+0x13a>
		bgx1_print("Hi !! :) ");
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <bgx1_print>
    1ac6:	0a c0       	rjmp	.+20     	; 0x1adc <button_pressed+0x14e>
	} else if (button == ButtonRightBackward) {
    1ac8:	80 91 7c 01 	lds	r24, 0x017C
    1acc:	90 91 7d 01 	lds	r25, 0x017D
    1ad0:	c8 17       	cp	r28, r24
    1ad2:	d9 07       	cpc	r29, r25
    1ad4:	19 f4       	brne	.+6      	; 0x1adc <button_pressed+0x14e>
		bgx1_embeddedImage(1);
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <bgx1_embeddedImage>
	}
	
	if (twi_error != TWI_No_Error) {
    1adc:	80 91 8c 03 	lds	r24, 0x038C
    1ae0:	90 91 8d 03 	lds	r25, 0x038D
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	e9 f0       	breq	.+58     	; 0x1b22 <button_pressed+0x194>
		blinkAllLeds(RedLeds, 5);
    1ae8:	c0 91 5a 01 	lds	r28, 0x015A
    1aec:	d0 91 5b 01 	lds	r29, 0x015B
    1af0:	ce 01       	movw	r24, r28
    1af2:	65 e0       	ldi	r22, 0x05	; 5
    1af4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <blinkAllLeds>
		byte err = (byte) twi_error;
    1af8:	e0 90 8c 03 	lds	r14, 0x038C
		blinkLeds(AllLeds, err, 4);
    1afc:	c8 01       	movw	r24, r16
    1afe:	6e 2d       	mov	r22, r14
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	44 e0       	ldi	r20, 0x04	; 4
    1b04:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
		flashAllLeds(RedLeds, 2);
    1b08:	ce 01       	movw	r24, r28
    1b0a:	62 e0       	ldi	r22, 0x02	; 2
    1b0c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <blinkAllLeds>
		err = err << 4;
    1b10:	6e 2d       	mov	r22, r14
    1b12:	62 95       	swap	r22
    1b14:	60 7f       	andi	r22, 0xF0	; 240
		blinkLeds(AllLeds, err, 4);
    1b16:	c8 01       	movw	r24, r16
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	44 e0       	ldi	r20, 0x04	; 4
    1b1c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
    1b20:	09 c0       	rjmp	.+18     	; 0x1b34 <button_pressed+0x1a6>
	} else {
		disableLeds(AllLeds);
    1b22:	c8 01       	movw	r24, r16
    1b24:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <disableLeds>
		enableLeds(YellowLeds);
    1b28:	80 91 5c 01 	lds	r24, 0x015C
    1b2c:	90 91 5d 01 	lds	r25, 0x015D
    1b30:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <enableLeds>
	}
}
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	df 90       	pop	r13
    1b42:	cf 90       	pop	r12
    1b44:	bf 90       	pop	r11
    1b46:	08 95       	ret

00001b48 <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    1b48:	80 32       	cpi	r24, 0x20	; 32
    1b4a:	18 f5       	brcc	.+70     	; 0x1b92 <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    1b4c:	58 2f       	mov	r21, r24
    1b4e:	56 95       	lsr	r21
    1b50:	56 95       	lsr	r21
    1b52:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    1b54:	e5 2f       	mov	r30, r21
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	ee 0f       	add	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	e4 51       	subi	r30, 0x14	; 20
    1b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b60:	01 90       	ld	r0, Z+
    1b62:	f0 81       	ld	r31, Z
    1b64:	e0 2d       	mov	r30, r0
    1b66:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    1b68:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    1b6a:	21 e0       	ldi	r18, 0x01	; 1
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	b9 01       	movw	r22, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <enablePinChangeInterrupt+0x2e>
    1b72:	66 0f       	add	r22, r22
    1b74:	77 1f       	adc	r23, r23
    1b76:	8a 95       	dec	r24
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <enablePinChangeInterrupt+0x2a>
    1b7a:	46 2b       	or	r20, r22
    1b7c:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
    1b7e:	80 91 68 00 	lds	r24, 0x0068
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <enablePinChangeInterrupt+0x40>
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	5a 95       	dec	r21
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <enablePinChangeInterrupt+0x3c>
    1b8c:	82 2b       	or	r24, r18
    1b8e:	80 93 68 00 	sts	0x0068, r24
    1b92:	08 95       	ret

00001b94 <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    1b94:	80 32       	cpi	r24, 0x20	; 32
    1b96:	c0 f4       	brcc	.+48     	; 0x1bc8 <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    1b98:	e8 2f       	mov	r30, r24
    1b9a:	e6 95       	lsr	r30
    1b9c:	e6 95       	lsr	r30
    1b9e:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	e4 51       	subi	r30, 0x14	; 20
    1ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    1baa:	01 90       	ld	r0, Z+
    1bac:	f0 81       	ld	r31, Z
    1bae:	e0 2d       	mov	r30, r0
    1bb0:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    1bb2:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    1bb4:	21 e0       	ldi	r18, 0x01	; 1
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <disblePinChangeInterrupt+0x2a>
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	8a 95       	dec	r24
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <disblePinChangeInterrupt+0x26>
    1bc2:	20 95       	com	r18
    1bc4:	29 23       	and	r18, r25
    1bc6:	20 83       	st	Z, r18
    1bc8:	08 95       	ret

00001bca <DELAY_MS>:
	}
}

static inline void BLINK_DELAY() { _delay_ms(200); }
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
    1bca:	07 c0       	rjmp	.+14     	; 0x1bda <DELAY_MS+0x10>
    1bcc:	e7 e8       	ldi	r30, 0x87	; 135
    1bce:	f3 e1       	ldi	r31, 0x13	; 19
    1bd0:	31 97       	sbiw	r30, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <DELAY_MS+0x6>
    1bd4:	00 c0       	rjmp	.+0      	; 0x1bd6 <DELAY_MS+0xc>
    1bd6:	00 00       	nop
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	b9 f7       	brne	.-18     	; 0x1bcc <DELAY_MS+0x2>
}
    1bde:	08 95       	ret

00001be0 <BLINK_DELAY>:
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	94 e3       	ldi	r25, 0x34	; 52
    1be4:	ac e0       	ldi	r26, 0x0C	; 12
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	90 40       	sbci	r25, 0x00	; 0
    1bea:	a0 40       	sbci	r26, 0x00	; 0
    1bec:	e1 f7       	brne	.-8      	; 0x1be6 <BLINK_DELAY+0x6>
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <BLINK_DELAY+0x10>
    1bf0:	00 00       	nop
	for (int i = 0, max = leds->count; i < max; i++) {
		disableLed(leds->leds[i]);
	}
}

static inline void BLINK_DELAY() { _delay_ms(200); }
    1bf2:	08 95       	ret

00001bf4 <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	61 e0       	ldi	r22, 0x01	; 1
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <writePin>
}
    1c02:	08 95       	ret

00001c04 <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
    1c04:	fc 01       	movw	r30, r24
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <writePin>
}
    1c12:	08 95       	ret

00001c14 <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1c14:	fc 01       	movw	r30, r24
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <writePin>
}
    1c1e:	08 95       	ret

00001c20 <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	6c 01       	movw	r12, r24
    1c36:	5b 01       	movw	r10, r22
	uint16_t iMask = 1 << (16 - leds->count);
    1c38:	dc 01       	movw	r26, r24
    1c3a:	12 96       	adiw	r26, 0x02	; 2
    1c3c:	0c 91       	ld	r16, X
    1c3e:	12 97       	sbiw	r26, 0x02	; 2
    1c40:	10 e0       	ldi	r17, 0x00	; 0
    1c42:	80 e1       	ldi	r24, 0x10	; 16
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	80 1b       	sub	r24, r16
    1c48:	91 0b       	sbc	r25, r17
    1c4a:	c1 e0       	ldi	r28, 0x01	; 1
    1c4c:	d0 e0       	ldi	r29, 0x00	; 0
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <setLeds+0x34>
    1c50:	cc 0f       	add	r28, r28
    1c52:	dd 1f       	adc	r29, r29
    1c54:	8a 95       	dec	r24
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <setLeds+0x30>
	for (int i = leds->count - 1; i >= 0; i--) {
    1c58:	01 50       	subi	r16, 0x01	; 1
    1c5a:	10 40       	sbci	r17, 0x00	; 0
    1c5c:	78 01       	movw	r14, r16
    1c5e:	ee 0c       	add	r14, r14
    1c60:	ff 1c       	adc	r15, r15
    1c62:	17 c0       	rjmp	.+46     	; 0x1c92 <setLeds+0x72>
		setLed(leds->leds[i], iMask & mask);
    1c64:	d6 01       	movw	r26, r12
    1c66:	ed 91       	ld	r30, X+
    1c68:	fc 91       	ld	r31, X
    1c6a:	ee 0d       	add	r30, r14
    1c6c:	ff 1d       	adc	r31, r15
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1c6e:	01 90       	ld	r0, Z+
    1c70:	f0 81       	ld	r31, Z
    1c72:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
    1c74:	be 01       	movw	r22, r28
    1c76:	6a 21       	and	r22, r10
    1c78:	7b 21       	and	r23, r11
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1c7a:	80 81       	ld	r24, Z
    1c7c:	91 81       	ldd	r25, Z+1	; 0x01
    1c7e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    1c82:	cc 0f       	add	r28, r28
    1c84:	dd 1f       	adc	r29, r29
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
    1c86:	01 50       	subi	r16, 0x01	; 1
    1c88:	10 40       	sbci	r17, 0x00	; 0
    1c8a:	ee ef       	ldi	r30, 0xFE	; 254
    1c8c:	ff ef       	ldi	r31, 0xFF	; 255
    1c8e:	ee 0e       	add	r14, r30
    1c90:	ff 1e       	adc	r15, r31
    1c92:	ff ef       	ldi	r31, 0xFF	; 255
    1c94:	0f 3f       	cpi	r16, 0xFF	; 255
    1c96:	1f 07       	cpc	r17, r31
    1c98:	29 f7       	brne	.-54     	; 0x1c64 <setLeds+0x44>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	df 90       	pop	r13
    1ca8:	cf 90       	pop	r12
    1caa:	bf 90       	pop	r11
    1cac:	af 90       	pop	r10
    1cae:	08 95       	ret

00001cb0 <enableLeds>:

void enableLeds(PLedGroup leds) {
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	12 96       	adiw	r26, 0x02	; 2
    1cc2:	ec 90       	ld	r14, X
    1cc4:	12 97       	sbiw	r26, 0x02	; 2
    1cc6:	ff 24       	eor	r15, r15
    1cc8:	c0 e0       	ldi	r28, 0x00	; 0
    1cca:	d0 e0       	ldi	r29, 0x00	; 0
    1ccc:	0d c0       	rjmp	.+26     	; 0x1ce8 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    1cce:	ce 01       	movw	r24, r28
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	d8 01       	movw	r26, r16
    1cd6:	ed 91       	ld	r30, X+
    1cd8:	fc 91       	ld	r31, X
    1cda:	e8 0f       	add	r30, r24
    1cdc:	f9 1f       	adc	r31, r25
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1ce6:	21 96       	adiw	r28, 0x01	; 1
    1ce8:	ce 15       	cp	r28, r14
    1cea:	df 05       	cpc	r29, r15
    1cec:	84 f3       	brlt	.-32     	; 0x1cce <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	ff 90       	pop	r15
    1cf8:	ef 90       	pop	r14
    1cfa:	08 95       	ret

00001cfc <disableLeds>:

void disableLeds(PLedGroup leds) {
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	12 96       	adiw	r26, 0x02	; 2
    1d0e:	ec 90       	ld	r14, X
    1d10:	12 97       	sbiw	r26, 0x02	; 2
    1d12:	ff 24       	eor	r15, r15
    1d14:	c0 e0       	ldi	r28, 0x00	; 0
    1d16:	d0 e0       	ldi	r29, 0x00	; 0
    1d18:	0d c0       	rjmp	.+26     	; 0x1d34 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    1d1a:	ce 01       	movw	r24, r28
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	d8 01       	movw	r26, r16
    1d22:	ed 91       	ld	r30, X+
    1d24:	fc 91       	ld	r31, X
    1d26:	e8 0f       	add	r30, r24
    1d28:	f9 1f       	adc	r31, r25
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1d32:	21 96       	adiw	r28, 0x01	; 1
    1d34:	ce 15       	cp	r28, r14
    1d36:	df 05       	cpc	r29, r15
    1d38:	84 f3       	brlt	.-32     	; 0x1d1a <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	08 95       	ret

00001d48 <blinkLeds>:
static inline void BLINK_DELAY() { _delay_ms(200); }
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, uint8_t times) {
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	6c 01       	movw	r12, r24
    1d5e:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    1d60:	ff 24       	eor	r15, r15
    1d62:	0e c0       	rjmp	.+28     	; 0x1d80 <blinkLeds+0x38>
		setLeds(leds, ledMask);
    1d64:	c6 01       	movw	r24, r12
    1d66:	b8 01       	movw	r22, r16
    1d68:	49 83       	std	Y+1, r20	; 0x01
    1d6a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <setLeds>
		BLINK_DELAY();
    1d6e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <BLINK_DELAY>
		disableLeds(leds);
    1d72:	c6 01       	movw	r24, r12
    1d74:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <disableLeds>
		BLINK_DELAY();
    1d78:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <BLINK_DELAY>
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    1d7c:	f3 94       	inc	r15
    1d7e:	49 81       	ldd	r20, Y+1	; 0x01
    1d80:	f4 16       	cp	r15, r20
    1d82:	80 f3       	brcs	.-32     	; 0x1d64 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		BLINK_DELAY();
		disableLeds(leds);
		BLINK_DELAY();
	}
}
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	1f 91       	pop	r17
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, uint8_t times) {
    1d96:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    1d98:	6f ef       	ldi	r22, 0xFF	; 255
    1d9a:	7f ef       	ldi	r23, 0xFF	; 255
    1d9c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <blinkLeds>
}
    1da0:	08 95       	ret

00001da2 <blinkLed>:

void blinkLed(PLed led, uint8_t times) {
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	1f 93       	push	r17
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	0f 92       	push	r0
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    1db2:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < times; i++) {
    1db4:	10 e0       	ldi	r17, 0x00	; 0
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <blinkLed+0x30>
		enableLed(led);
    1db8:	c7 01       	movw	r24, r14
    1dba:	69 83       	std	Y+1, r22	; 0x01
    1dbc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <enableLed>
		BLINK_DELAY();
    1dc0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <BLINK_DELAY>
		disableLed(led);
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <disableLed>
		BLINK_DELAY();
    1dca:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <BLINK_DELAY>
void blinkAllLeds(PLedGroup leds, uint8_t times) {
	blinkLeds(leds, 0xFFFF, times);
}

void blinkLed(PLed led, uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    1dce:	1f 5f       	subi	r17, 0xFF	; 255
    1dd0:	69 81       	ldd	r22, Y+1	; 0x01
    1dd2:	16 17       	cp	r17, r22
    1dd4:	88 f3       	brcs	.-30     	; 0x1db8 <blinkLed+0x16>
		enableLed(led);
		BLINK_DELAY();
		disableLed(led);
		BLINK_DELAY();
	}
}
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	1f 91       	pop	r17
    1dde:	ff 90       	pop	r15
    1de0:	ef 90       	pop	r14
    1de2:	08 95       	ret

00001de4 <flashLed>:

void flashLed(PLed led, const uint16_t millis) {
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	ec 01       	movw	r28, r24
    1dee:	8b 01       	movw	r16, r22
	enableLed(led);
    1df0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <enableLed>
	DELAY_MS(millis);
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DELAY_MS>
	disableLed(led);
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <disableLed>
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <flashLeds>:

void flashLeds(PLedGroup leds, uint16_t ledMask, uint16_t millis) {
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	ec 01       	movw	r28, r24
    1e14:	8a 01       	movw	r16, r20
	setLeds(leds, ledMask);
    1e16:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <setLeds>
	DELAY_MS(millis);
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <DELAY_MS>
	disableLeds(leds);
    1e20:	ce 01       	movw	r24, r28
    1e22:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <disableLeds>
}
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <flashAllLeds>:

void flashAllLeds(PLedGroup leds, uint16_t millis) {
    1e30:	ab 01       	movw	r20, r22
	flashLeds(leds, 0xFFFF, millis);
    1e32:	6f ef       	ldi	r22, 0xFF	; 255
    1e34:	7f ef       	ldi	r23, 0xFF	; 255
    1e36:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <flashLeds>
}
    1e3a:	08 95       	ret

00001e3c <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	14 96       	adiw	r26, 0x04	; 4
    1e40:	ed 91       	ld	r30, X+
    1e42:	fc 91       	ld	r31, X
    1e44:	15 97       	sbiw	r26, 0x05	; 5
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	80 83       	st	Z, r24
}
    1e4a:	08 95       	ret

00001e4c <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	14 96       	adiw	r26, 0x04	; 4
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	15 97       	sbiw	r26, 0x05	; 5
    1e56:	10 82       	st	Z, r1
}
    1e58:	08 95       	ret

00001e5a <setPinOutput>:

void setPinOutput(PPin pin) {
    1e5a:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1e5c:	ed 91       	ld	r30, X+
    1e5e:	fc 91       	ld	r31, X
    1e60:	11 97       	sbiw	r26, 0x01	; 1
    1e62:	04 80       	ldd	r0, Z+4	; 0x04
    1e64:	f5 81       	ldd	r31, Z+5	; 0x05
    1e66:	e0 2d       	mov	r30, r0
    1e68:	80 81       	ld	r24, Z
    1e6a:	12 96       	adiw	r26, 0x02	; 2
    1e6c:	9c 91       	ld	r25, X
    1e6e:	12 97       	sbiw	r26, 0x02	; 2
    1e70:	89 2b       	or	r24, r25
    1e72:	80 83       	st	Z, r24
}
    1e74:	08 95       	ret

00001e76 <setPinInput>:

void setPinInput(PPin pin) {
    1e76:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1e78:	ed 91       	ld	r30, X+
    1e7a:	fc 91       	ld	r31, X
    1e7c:	11 97       	sbiw	r26, 0x01	; 1
    1e7e:	04 80       	ldd	r0, Z+4	; 0x04
    1e80:	f5 81       	ldd	r31, Z+5	; 0x05
    1e82:	e0 2d       	mov	r30, r0
    1e84:	90 81       	ld	r25, Z
    1e86:	12 96       	adiw	r26, 0x02	; 2
    1e88:	8c 91       	ld	r24, X
    1e8a:	12 97       	sbiw	r26, 0x02	; 2
    1e8c:	80 95       	com	r24
    1e8e:	89 23       	and	r24, r25
    1e90:	80 83       	st	Z, r24
}
    1e92:	08 95       	ret

00001e94 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    1e94:	dc 01       	movw	r26, r24
    1e96:	ed 91       	ld	r30, X+
    1e98:	fc 91       	ld	r31, X
    1e9a:	11 97       	sbiw	r26, 0x01	; 1
    1e9c:	60 83       	st	Z, r22
}
    1e9e:	08 95       	ret

00001ea0 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	12 96       	adiw	r26, 0x02	; 2
    1ea4:	ed 91       	ld	r30, X+
    1ea6:	fc 91       	ld	r31, X
    1ea8:	13 97       	sbiw	r26, 0x03	; 3
    1eaa:	80 81       	ld	r24, Z
}
    1eac:	08 95       	ret

00001eae <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1eae:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1eb0:	ed 91       	ld	r30, X+
    1eb2:	fc 91       	ld	r31, X
    1eb4:	11 97       	sbiw	r26, 0x01	; 1
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	f0 81       	ld	r31, Z
    1eba:	e0 2d       	mov	r30, r0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	12 96       	adiw	r26, 0x02	; 2
    1ec0:	9c 91       	ld	r25, X
    1ec2:	12 97       	sbiw	r26, 0x02	; 2
    1ec4:	89 2b       	or	r24, r25
    1ec6:	80 83       	st	Z, r24
}
    1ec8:	08 95       	ret

00001eca <setPinZero>:

void setPinZero(PPin pin) {
    1eca:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    1ecc:	ed 91       	ld	r30, X+
    1ece:	fc 91       	ld	r31, X
    1ed0:	11 97       	sbiw	r26, 0x01	; 1
    1ed2:	01 90       	ld	r0, Z+
    1ed4:	f0 81       	ld	r31, Z
    1ed6:	e0 2d       	mov	r30, r0
    1ed8:	90 81       	ld	r25, Z
    1eda:	12 96       	adiw	r26, 0x02	; 2
    1edc:	8c 91       	ld	r24, X
    1ede:	12 97       	sbiw	r26, 0x02	; 2
    1ee0:	80 95       	com	r24
    1ee2:	89 23       	and	r24, r25
    1ee4:	80 83       	st	Z, r24
}
    1ee6:	08 95       	ret

00001ee8 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1ee8:	61 15       	cp	r22, r1
    1eea:	71 05       	cpc	r23, r1
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <writePin+0xc>
    1eee:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
    1ef2:	08 95       	ret
	else setPinZero(pin);
    1ef4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
    1ef8:	08 95       	ret

00001efa <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1efa:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    1efc:	a0 81       	ld	r26, Z
    1efe:	b1 81       	ldd	r27, Z+1	; 0x01
    1f00:	12 96       	adiw	r26, 0x02	; 2
    1f02:	0d 90       	ld	r0, X+
    1f04:	bc 91       	ld	r27, X
    1f06:	a0 2d       	mov	r26, r0
    1f08:	8c 91       	ld	r24, X
    1f0a:	92 81       	ldd	r25, Z+2	; 0x02
    1f0c:	89 23       	and	r24, r25
		return TRUE;
    1f0e:	21 e0       	ldi	r18, 0x01	; 1
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <readPin+0x1e>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1f18:	c9 01       	movw	r24, r18
    1f1a:	08 95       	ret

00001f1c <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	64 30       	cpi	r22, 0x04	; 4
    1f20:	71 05       	cpc	r23, r1
    1f22:	48 f4       	brcc	.+18     	; 0x1f36 <setCompareMatchOutputMode+0x1a>
    1f24:	db 01       	movw	r26, r22
    1f26:	ac 50       	subi	r26, 0x0C	; 12
    1f28:	be 4f       	sbci	r27, 0xFE	; 254
    1f2a:	2c 91       	ld	r18, X
    1f2c:	68 50       	subi	r22, 0x08	; 8
    1f2e:	7e 4f       	sbci	r23, 0xFE	; 254
    1f30:	db 01       	movw	r26, r22
    1f32:	3c 91       	ld	r19, X
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <setCompareMatchOutputMode+0x1e>
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0B1) | _BV(COM0B0);
			break;
	}
	if (timer->type == TIMER_A) {
    1f3a:	84 81       	ldd	r24, Z+4	; 0x04
    1f3c:	95 81       	ldd	r25, Z+5	; 0x05
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	21 f4       	brne	.+8      	; 0x1f4a <setCompareMatchOutputMode+0x2e>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		// Use left shift to avoid the arithmetic shift.
		oneBits = oneBits << 2;
    1f42:	33 0f       	add	r19, r19
    1f44:	33 0f       	add	r19, r19
		zeroBits = zeroBits << 2;
    1f46:	22 0f       	add	r18, r18
    1f48:	22 0f       	add	r18, r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    1f4a:	a0 81       	ld	r26, Z
    1f4c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f4e:	11 96       	adiw	r26, 0x01	; 1
    1f50:	0d 90       	ld	r0, X+
    1f52:	bc 91       	ld	r27, X
    1f54:	a0 2d       	mov	r26, r0
    1f56:	8c 91       	ld	r24, X
    1f58:	83 2b       	or	r24, r19
    1f5a:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    1f5c:	01 90       	ld	r0, Z+
    1f5e:	f0 81       	ld	r31, Z
    1f60:	e0 2d       	mov	r30, r0
    1f62:	01 80       	ldd	r0, Z+1	; 0x01
    1f64:	f2 81       	ldd	r31, Z+2	; 0x02
    1f66:	e0 2d       	mov	r30, r0
    1f68:	80 81       	ld	r24, Z
    1f6a:	20 95       	com	r18
    1f6c:	28 23       	and	r18, r24
    1f6e:	20 83       	st	Z, r18
}
    1f70:	08 95       	ret

00001f72 <setTimerClockSelect>:

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
    1f72:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    1f74:	80 81       	ld	r24, Z
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	82 70       	andi	r24, 0x02	; 2
    1f7a:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    1f7c:	64 30       	cpi	r22, 0x04	; 4
    1f7e:	71 05       	cpc	r23, r1
    1f80:	71 f1       	breq	.+92     	; 0x1fde <setTimerClockSelect+0x6c>
    1f82:	65 30       	cpi	r22, 0x05	; 5
    1f84:	71 05       	cpc	r23, r1
    1f86:	68 f4       	brcc	.+26     	; 0x1fa2 <setTimerClockSelect+0x30>
    1f88:	61 30       	cpi	r22, 0x01	; 1
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	f9 f0       	breq	.+62     	; 0x1fcc <setTimerClockSelect+0x5a>
    1f8e:	61 30       	cpi	r22, 0x01	; 1
    1f90:	71 05       	cpc	r23, r1
    1f92:	d8 f1       	brcs	.+118    	; 0x200a <setTimerClockSelect+0x98>
    1f94:	62 30       	cpi	r22, 0x02	; 2
    1f96:	71 05       	cpc	r23, r1
    1f98:	e1 f0       	breq	.+56     	; 0x1fd2 <setTimerClockSelect+0x60>
    1f9a:	63 30       	cpi	r22, 0x03	; 3
    1f9c:	71 05       	cpc	r23, r1
    1f9e:	a1 f4       	brne	.+40     	; 0x1fc8 <setTimerClockSelect+0x56>
    1fa0:	1b c0       	rjmp	.+54     	; 0x1fd8 <setTimerClockSelect+0x66>
    1fa2:	67 30       	cpi	r22, 0x07	; 7
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	21 f1       	breq	.+72     	; 0x1ff0 <setTimerClockSelect+0x7e>
    1fa8:	68 30       	cpi	r22, 0x08	; 8
    1faa:	71 05       	cpc	r23, r1
    1fac:	38 f4       	brcc	.+14     	; 0x1fbc <setTimerClockSelect+0x4a>
    1fae:	65 30       	cpi	r22, 0x05	; 5
    1fb0:	71 05       	cpc	r23, r1
    1fb2:	c1 f0       	breq	.+48     	; 0x1fe4 <setTimerClockSelect+0x72>
    1fb4:	66 30       	cpi	r22, 0x06	; 6
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <setTimerClockSelect+0x56>
    1fba:	17 c0       	rjmp	.+46     	; 0x1fea <setTimerClockSelect+0x78>
    1fbc:	68 30       	cpi	r22, 0x08	; 8
    1fbe:	71 05       	cpc	r23, r1
    1fc0:	d1 f0       	breq	.+52     	; 0x1ff6 <setTimerClockSelect+0x84>
    1fc2:	69 30       	cpi	r22, 0x09	; 9
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	e1 f0       	breq	.+56     	; 0x2000 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	1d c0       	rjmp	.+58     	; 0x2006 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    1fcc:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    1fce:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    1fd0:	27 c0       	rjmp	.+78     	; 0x2020 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    1fd2:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    1fd4:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    1fd6:	24 c0       	rjmp	.+72     	; 0x2020 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	e9 f4       	brne	.+58     	; 0x2016 <setTimerClockSelect+0xa4>
    1fdc:	2d c0       	rjmp	.+90     	; 0x2038 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	b9 f0       	breq	.+46     	; 0x2010 <setTimerClockSelect+0x9e>
    1fe2:	19 c0       	rjmp	.+50     	; 0x2016 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	d1 f4       	brne	.+52     	; 0x201c <setTimerClockSelect+0xaa>
    1fe8:	27 c0       	rjmp	.+78     	; 0x2038 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	a1 f0       	breq	.+40     	; 0x2016 <setTimerClockSelect+0xa4>
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	a1 f0       	breq	.+40     	; 0x201c <setTimerClockSelect+0xaa>
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	f9 f4       	brne	.+62     	; 0x2038 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    1ffa:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	10 c0       	rjmp	.+32     	; 0x2020 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	d1 f4       	brne	.+52     	; 0x2038 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    2004:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	0b c0       	rjmp	.+22     	; 0x2020 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    200a:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    200c:	87 e0       	ldi	r24, 0x07	; 7
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    2010:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    2012:	84 e0       	ldi	r24, 0x04	; 4
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    2016:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    201c:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    201e:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    2020:	a3 81       	ldd	r26, Z+3	; 0x03
    2022:	b4 81       	ldd	r27, Z+4	; 0x04
    2024:	2c 91       	ld	r18, X
    2026:	29 2b       	or	r18, r25
    2028:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    202a:	03 80       	ldd	r0, Z+3	; 0x03
    202c:	f4 81       	ldd	r31, Z+4	; 0x04
    202e:	e0 2d       	mov	r30, r0
    2030:	90 81       	ld	r25, Z
    2032:	80 95       	com	r24
    2034:	89 23       	and	r24, r25
    2036:	80 83       	st	Z, r24
    2038:	08 95       	ret

0000203a <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
    203a:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    203c:	80 81       	ld	r24, Z
    203e:	82 ff       	sbrs	r24, 2
    2040:	37 c0       	rjmp	.+110    	; 0x20b0 <setWaveformGenerationMode+0x76>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    2042:	63 30       	cpi	r22, 0x03	; 3
    2044:	71 05       	cpc	r23, r1
    2046:	31 f1       	breq	.+76     	; 0x2094 <setWaveformGenerationMode+0x5a>
    2048:	64 30       	cpi	r22, 0x04	; 4
    204a:	71 05       	cpc	r23, r1
    204c:	40 f4       	brcc	.+16     	; 0x205e <setWaveformGenerationMode+0x24>
    204e:	61 30       	cpi	r22, 0x01	; 1
    2050:	71 05       	cpc	r23, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <setWaveformGenerationMode+0x1c>
    2054:	57 c0       	rjmp	.+174    	; 0x2104 <setWaveformGenerationMode+0xca>
    2056:	62 30       	cpi	r22, 0x02	; 2
    2058:	71 05       	cpc	r23, r1
    205a:	80 f4       	brcc	.+32     	; 0x207c <setWaveformGenerationMode+0x42>
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <setWaveformGenerationMode+0x3a>
    205e:	65 30       	cpi	r22, 0x05	; 5
    2060:	71 05       	cpc	r23, r1
    2062:	81 f0       	breq	.+32     	; 0x2084 <setWaveformGenerationMode+0x4a>
    2064:	65 30       	cpi	r22, 0x05	; 5
    2066:	71 05       	cpc	r23, r1
    2068:	c8 f0       	brcs	.+50     	; 0x209c <setWaveformGenerationMode+0x62>
    206a:	66 30       	cpi	r22, 0x06	; 6
    206c:	71 05       	cpc	r23, r1
    206e:	09 f0       	breq	.+2      	; 0x2072 <setWaveformGenerationMode+0x38>
    2070:	7a c0       	rjmp	.+244    	; 0x2166 <setWaveformGenerationMode+0x12c>
    2072:	1c c0       	rjmp	.+56     	; 0x20ac <setWaveformGenerationMode+0x72>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2074:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    2076:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2078:	88 e1       	ldi	r24, 0x18	; 24
    207a:	47 c0       	rjmp	.+142    	; 0x210a <setWaveformGenerationMode+0xd0>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    207c:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    207e:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    2080:	80 e1       	ldi	r24, 0x10	; 16
    2082:	3e c0       	rjmp	.+124    	; 0x2100 <setWaveformGenerationMode+0xc6>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
    2084:	84 fd       	sbrc	r24, 4
    2086:	43 c0       	rjmp	.+134    	; 0x210e <setWaveformGenerationMode+0xd4>
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
    2088:	85 ff       	sbrs	r24, 5
    208a:	45 c0       	rjmp	.+138    	; 0x2116 <setWaveformGenerationMode+0xdc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
    208c:	98 e0       	ldi	r25, 0x08	; 8
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    208e:	33 e0       	ldi	r19, 0x03	; 3
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    2090:	80 e1       	ldi	r24, 0x10	; 16
    2092:	4c c0       	rjmp	.+152    	; 0x212c <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2094:	90 e0       	ldi	r25, 0x00	; 0
					oneBitsB = _BV(WGM13) | _BV(WGM12);
				}
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    2096:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2098:	88 e1       	ldi	r24, 0x18	; 24
    209a:	32 c0       	rjmp	.+100    	; 0x2100 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
    209c:	84 fd       	sbrc	r24, 4
    209e:	3f c0       	rjmp	.+126    	; 0x211e <setWaveformGenerationMode+0xe4>
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
    20a0:	85 ff       	sbrs	r24, 5
    20a2:	41 c0       	rjmp	.+130    	; 0x2126 <setWaveformGenerationMode+0xec>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20a4:	90 e0       	ldi	r25, 0x00	; 0
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    20a6:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    20a8:	88 e1       	ldi	r24, 0x18	; 24
    20aa:	40 c0       	rjmp	.+128    	; 0x212c <setWaveformGenerationMode+0xf2>
				}
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    20ac:	90 e1       	ldi	r25, 0x10	; 16
    20ae:	22 c0       	rjmp	.+68     	; 0x20f4 <setWaveformGenerationMode+0xba>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    20b0:	62 30       	cpi	r22, 0x02	; 2
    20b2:	71 05       	cpc	r23, r1
    20b4:	d1 f0       	breq	.+52     	; 0x20ea <setWaveformGenerationMode+0xb0>
    20b6:	63 30       	cpi	r22, 0x03	; 3
    20b8:	71 05       	cpc	r23, r1
    20ba:	40 f4       	brcc	.+16     	; 0x20cc <setWaveformGenerationMode+0x92>
    20bc:	61 15       	cp	r22, r1
    20be:	71 05       	cpc	r23, r1
    20c0:	81 f0       	breq	.+32     	; 0x20e2 <setWaveformGenerationMode+0xa8>
    20c2:	61 30       	cpi	r22, 0x01	; 1
    20c4:	71 05       	cpc	r23, r1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <setWaveformGenerationMode+0x90>
    20c8:	4e c0       	rjmp	.+156    	; 0x2166 <setWaveformGenerationMode+0x12c>
    20ca:	32 c0       	rjmp	.+100    	; 0x2130 <setWaveformGenerationMode+0xf6>
    20cc:	64 30       	cpi	r22, 0x04	; 4
    20ce:	71 05       	cpc	r23, r1
    20d0:	a1 f0       	breq	.+40     	; 0x20fa <setWaveformGenerationMode+0xc0>
    20d2:	64 30       	cpi	r22, 0x04	; 4
    20d4:	71 05       	cpc	r23, r1
    20d6:	68 f0       	brcs	.+26     	; 0x20f2 <setWaveformGenerationMode+0xb8>
    20d8:	65 30       	cpi	r22, 0x05	; 5
    20da:	71 05       	cpc	r23, r1
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <setWaveformGenerationMode+0xa6>
    20de:	43 c0       	rjmp	.+134    	; 0x2166 <setWaveformGenerationMode+0x12c>
    20e0:	06 c0       	rjmp	.+12     	; 0x20ee <setWaveformGenerationMode+0xb4>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20e2:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    20e4:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    20e6:	88 e0       	ldi	r24, 0x08	; 8
    20e8:	10 c0       	rjmp	.+32     	; 0x210a <setWaveformGenerationMode+0xd0>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	1d c0       	rjmp	.+58     	; 0x2128 <setWaveformGenerationMode+0xee>
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    20ee:	98 e0       	ldi	r25, 0x08	; 8
    20f0:	13 c0       	rjmp	.+38     	; 0x2118 <setWaveformGenerationMode+0xde>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20f2:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    20f4:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    20f6:	88 e0       	ldi	r24, 0x08	; 8
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    20fa:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    20fc:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    20fe:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    2100:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    2102:	1a c0       	rjmp	.+52     	; 0x2138 <setWaveformGenerationMode+0xfe>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    2104:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    2106:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    2108:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    210a:	23 e0       	ldi	r18, 0x03	; 3
    210c:	15 c0       	rjmp	.+42     	; 0x2138 <setWaveformGenerationMode+0xfe>
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
    210e:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
    2110:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    2112:	80 e1       	ldi	r24, 0x10	; 16
    2114:	10 c0       	rjmp	.+32     	; 0x2136 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					oneBitsB = _BV(WGM13) | _BV(WGM12);
    2116:	98 e1       	ldi	r25, 0x18	; 24
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    2118:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	07 c0       	rjmp	.+14     	; 0x212c <setWaveformGenerationMode+0xf2>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    211e:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
    2120:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2122:	88 e1       	ldi	r24, 0x18	; 24
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					zeroBitsB = _BV(WGM12);
					oneBitsB = _BV(WGM13);
    2126:	90 e1       	ldi	r25, 0x10	; 16
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    2128:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM12);
    212a:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	04 c0       	rjmp	.+8      	; 0x2138 <setWaveformGenerationMode+0xfe>
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2130:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    2132:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    2134:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    2136:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    2138:	a1 81       	ldd	r26, Z+1	; 0x01
    213a:	b2 81       	ldd	r27, Z+2	; 0x02
    213c:	4c 91       	ld	r20, X
    213e:	43 2b       	or	r20, r19
    2140:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    2142:	a1 81       	ldd	r26, Z+1	; 0x01
    2144:	b2 81       	ldd	r27, Z+2	; 0x02
    2146:	3c 91       	ld	r19, X
    2148:	20 95       	com	r18
    214a:	23 23       	and	r18, r19
    214c:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    214e:	a3 81       	ldd	r26, Z+3	; 0x03
    2150:	b4 81       	ldd	r27, Z+4	; 0x04
    2152:	2c 91       	ld	r18, X
    2154:	29 2b       	or	r18, r25
    2156:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    2158:	03 80       	ldd	r0, Z+3	; 0x03
    215a:	f4 81       	ldd	r31, Z+4	; 0x04
    215c:	e0 2d       	mov	r30, r0
    215e:	90 81       	ld	r25, Z
    2160:	80 95       	com	r24
    2162:	89 23       	and	r24, r25
    2164:	80 83       	st	Z, r24
    2166:	08 95       	ret

00002168 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    2168:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative macro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	11 97       	sbiw	r26, 0x01	; 1
    2170:	05 80       	ldd	r0, Z+5	; 0x05
    2172:	f6 81       	ldd	r31, Z+6	; 0x06
    2174:	e0 2d       	mov	r30, r0
    2176:	20 81       	ld	r18, Z
    2178:	14 96       	adiw	r26, 0x04	; 4
    217a:	8d 91       	ld	r24, X+
    217c:	9c 91       	ld	r25, X
    217e:	15 97       	sbiw	r26, 0x05	; 5
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	11 f4       	brne	.+4      	; 0x2188 <enableTimerInterrupt+0x20>
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	01 c0       	rjmp	.+2      	; 0x218a <enableTimerInterrupt+0x22>
    2188:	84 e0       	ldi	r24, 0x04	; 4
    218a:	82 2b       	or	r24, r18
    218c:	80 83       	st	Z, r24
}
    218e:	08 95       	ret

00002190 <disableTimerInterrupt>:

void disableTimerInterrupt(PTimer timer) {
    2190:	dc 01       	movw	r26, r24
	*timer->timer->interruptMaskRegister &= ~_BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    2192:	ed 91       	ld	r30, X+
    2194:	fc 91       	ld	r31, X
    2196:	11 97       	sbiw	r26, 0x01	; 1
    2198:	05 80       	ldd	r0, Z+5	; 0x05
    219a:	f6 81       	ldd	r31, Z+6	; 0x06
    219c:	e0 2d       	mov	r30, r0
    219e:	20 81       	ld	r18, Z
    21a0:	14 96       	adiw	r26, 0x04	; 4
    21a2:	8d 91       	ld	r24, X+
    21a4:	9c 91       	ld	r25, X
    21a6:	15 97       	sbiw	r26, 0x05	; 5
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <disableTimerInterrupt+0x20>
    21ac:	8d ef       	ldi	r24, 0xFD	; 253
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <disableTimerInterrupt+0x22>
    21b0:	8b ef       	ldi	r24, 0xFB	; 251
    21b2:	82 23       	and	r24, r18
    21b4:	80 83       	st	Z, r24
}
    21b6:	08 95       	ret

000021b8 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	9f 81       	ldd	r25, Y+7	; 0x07
    21c2:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <setPinOutput>
	setCompareMatchOutputMode(timer, set_on_match);
    21c6:	ce 01       	movw	r24, r28
    21c8:	63 e0       	ldi	r22, 0x03	; 3
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <setCompareMatchOutputMode>
}
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	08 95       	ret

000021d6 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <setCompareMatchOutputMode>
}
    21de:	08 95       	ret

000021e0 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    21e0:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    21e2:	a0 81       	ld	r26, Z
    21e4:	b1 81       	ldd	r27, Z+1	; 0x01
    21e6:	8c 91       	ld	r24, X
    21e8:	82 ff       	sbrs	r24, 2
    21ea:	1c c0       	rjmp	.+56     	; 0x2224 <setTimerCompareValue+0x44>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    21ec:	9f b7       	in	r25, 0x3f	; 63
		// Use as many significant bits as possible.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    21ee:	84 ff       	sbrs	r24, 4
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <setTimerCompareValue+0x1e>
			value = value >> (16 - 9);
    21f2:	66 0f       	add	r22, r22
    21f4:	67 2f       	mov	r22, r23
    21f6:	66 1f       	adc	r22, r22
    21f8:	77 0b       	sbc	r23, r23
    21fa:	71 95       	neg	r23
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <setTimerCompareValue+0x2c>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    21fe:	85 ff       	sbrs	r24, 5
    2200:	05 c0       	rjmp	.+10     	; 0x220c <setTimerCompareValue+0x2c>
			value = value >> (16 - 10);
    2202:	86 e0       	ldi	r24, 0x06	; 6
    2204:	76 95       	lsr	r23
    2206:	67 95       	ror	r22
    2208:	8a 95       	dec	r24
    220a:	e1 f7       	brne	.-8      	; 0x2204 <setTimerCompareValue+0x24>
		}
		cli();
    220c:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    220e:	a2 81       	ldd	r26, Z+2	; 0x02
    2210:	b3 81       	ldd	r27, Z+3	; 0x03
    2212:	11 96       	adiw	r26, 0x01	; 1
    2214:	7c 93       	st	X, r23
    2216:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    2218:	02 80       	ldd	r0, Z+2	; 0x02
    221a:	f3 81       	ldd	r31, Z+3	; 0x03
    221c:	e0 2d       	mov	r30, r0
    221e:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    2220:	9f bf       	out	0x3f, r25	; 63
    2222:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    2224:	02 80       	ldd	r0, Z+2	; 0x02
    2226:	f3 81       	ldd	r31, Z+3	; 0x03
    2228:	e0 2d       	mov	r30, r0
    222a:	70 83       	st	Z, r23
    222c:	08 95       	ret

0000222e <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    222e:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    2230:	a0 81       	ld	r26, Z
    2232:	b1 81       	ldd	r27, Z+1	; 0x01
    2234:	8c 91       	ld	r24, X
    2236:	82 ff       	sbrs	r24, 2
    2238:	1c c0       	rjmp	.+56     	; 0x2272 <getTimerCompareValue+0x44>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    223a:	8f b7       	in	r24, 0x3f	; 63
		cli();
    223c:	f8 94       	cli
		// Reading OCR-register does not require any particular ordering of reading the bytes.
		result = *((uint16_t*) timer->outputCompareRegister);
    223e:	a2 81       	ldd	r26, Z+2	; 0x02
    2240:	b3 81       	ldd	r27, Z+3	; 0x03
    2242:	2d 91       	ld	r18, X+
    2244:	3c 91       	ld	r19, X
    2246:	11 97       	sbiw	r26, 0x01	; 1
		SREG = sreg; // re-enable interrupts
    2248:	8f bf       	out	0x3f, r24	; 63
		
		// Shift the value back. Non-significant bits are lost.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    224a:	01 90       	ld	r0, Z+
    224c:	f0 81       	ld	r31, Z
    224e:	e0 2d       	mov	r30, r0
    2250:	80 81       	ld	r24, Z
    2252:	84 ff       	sbrs	r24, 4
    2254:	06 c0       	rjmp	.+12     	; 0x2262 <getTimerCompareValue+0x34>
			result = result << (16 - 9);
    2256:	36 95       	lsr	r19
    2258:	32 2f       	mov	r19, r18
    225a:	22 27       	eor	r18, r18
    225c:	37 95       	ror	r19
    225e:	27 95       	ror	r18
    2260:	0e c0       	rjmp	.+28     	; 0x227e <getTimerCompareValue+0x50>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    2262:	85 ff       	sbrs	r24, 5
    2264:	0c c0       	rjmp	.+24     	; 0x227e <getTimerCompareValue+0x50>
			result = result << (16 - 10);
    2266:	46 e0       	ldi	r20, 0x06	; 6
    2268:	22 0f       	add	r18, r18
    226a:	33 1f       	adc	r19, r19
    226c:	4a 95       	dec	r20
    226e:	e1 f7       	brne	.-8      	; 0x2268 <getTimerCompareValue+0x3a>
    2270:	06 c0       	rjmp	.+12     	; 0x227e <getTimerCompareValue+0x50>
		}
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    2272:	02 80       	ldd	r0, Z+2	; 0x02
    2274:	f3 81       	ldd	r31, Z+3	; 0x03
    2276:	e0 2d       	mov	r30, r0
    2278:	80 81       	ld	r24, Z
    227a:	38 2f       	mov	r19, r24
    227c:	20 e0       	ldi	r18, 0x00	; 0
	}
	return result;
}
    227e:	c9 01       	movw	r24, r18
    2280:	08 95       	ret

00002282 <regulateSpeed>:

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
}

void regulateSpeed(PSmoothMotor motor, uint16_t speed, MotorDirection direction) {
    2282:	ef 92       	push	r14
    2284:	ff 92       	push	r15
    2286:	0f 93       	push	r16
    2288:	1f 93       	push	r17
    228a:	cf 93       	push	r28
    228c:	df 93       	push	r29
    228e:	ec 01       	movw	r28, r24
    2290:	8b 01       	movw	r16, r22
    2292:	7a 01       	movw	r14, r20
	mutex_lock(motor->mutex);
    2294:	88 89       	ldd	r24, Y+16	; 0x10
    2296:	99 89       	ldd	r25, Y+17	; 0x11
    2298:	0e 94 1b 04 	call	0x836	; 0x836 <mutex_lock>
	motor->targetSpeed = speed;
    229c:	1f 83       	std	Y+7, r17	; 0x07
    229e:	0e 83       	std	Y+6, r16	; 0x06
	motor->targetDirection = direction;
    22a0:	f9 86       	std	Y+9, r15	; 0x09
    22a2:	e8 86       	std	Y+8, r14	; 0x08
	if (!motor->tickRunning) {
    22a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	49 f4       	brne	.+18     	; 0x22be <regulateSpeed+0x3c>
		motor_smooth_set_call_frequency(motor, motor->adjustmentFrequency);
    22ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b0:	ce 01       	movw	r24, r28
    22b2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <motor_smooth_set_call_frequency>
		motor->tickRunning = TRUE;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9b 87       	std	Y+11, r25	; 0x0b
    22bc:	8a 87       	std	Y+10, r24	; 0x0a
	}
	mutex_release(motor->mutex);
    22be:	88 89       	ldd	r24, Y+16	; 0x10
    22c0:	99 89       	ldd	r25, Y+17	; 0x11
    22c2:	0e 94 21 04 	call	0x842	; 0x842 <mutex_release>
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	ff 90       	pop	r15
    22d0:	ef 90       	pop	r14
    22d2:	08 95       	ret

000022d4 <regulateStopMotor>:

// 'Imported' from motor.c. Avoided adding internal-header just for this function.
uint16_t motor_toUnsignedSpeed(int16_t speed);

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
    22d4:	60 e0       	ldi	r22, 0x00	; 0
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	42 e0       	ldi	r20, 0x02	; 2
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	0e 94 41 11 	call	0x2282	; 0x2282 <regulateSpeed>
}
    22e0:	08 95       	ret

000022e2 <regulateSpeedForward>:
	}
	mutex_release(motor->mutex);
}

void regulateSpeedForward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, FORWARD);
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	0e 94 41 11 	call	0x2282	; 0x2282 <regulateSpeed>
}
    22ea:	08 95       	ret

000022ec <regulateSpeedBackward>:

void regulateSpeedBackward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, BACKWARD);
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	0e 94 41 11 	call	0x2282	; 0x2282 <regulateSpeed>
}
    22f4:	08 95       	ret

000022f6 <regulateDirSpeed>:

void regulateDirSpeed(PSmoothMotor motor, int16_t speed) {
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	ec 01       	movw	r28, r24
    2300:	8b 01       	movw	r16, r22
	if (speed == 0) {
    2302:	61 15       	cp	r22, r1
    2304:	71 05       	cpc	r23, r1
    2306:	19 f4       	brne	.+6      	; 0x230e <regulateDirSpeed+0x18>
		regulateStopMotor(motor);
    2308:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <regulateStopMotor>
		return;
    230c:	0d c0       	rjmp	.+26     	; 0x2328 <regulateDirSpeed+0x32>
	}
	regulateSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    230e:	cb 01       	movw	r24, r22
    2310:	0e 94 15 13 	call	0x262a	; 0x262a <motor_toUnsignedSpeed>
    2314:	bc 01       	movw	r22, r24
    2316:	41 2f       	mov	r20, r17
    2318:	40 95       	com	r20
    231a:	44 1f       	adc	r20, r20
    231c:	44 27       	eor	r20, r20
    231e:	44 1f       	adc	r20, r20
    2320:	ce 01       	movw	r24, r28
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	0e 94 41 11 	call	0x2282	; 0x2282 <regulateSpeed>
}
    2328:	df 91       	pop	r29
    232a:	cf 91       	pop	r28
    232c:	1f 91       	pop	r17
    232e:	0f 91       	pop	r16
    2330:	08 95       	ret

00002332 <motor_smooth_tick>:

void motor_smooth_tick(PSmoothMotor motor) {
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	ec 01       	movw	r28, r24
	mutex_lock(motor->mutex);
    2338:	88 89       	ldd	r24, Y+16	; 0x10
    233a:	99 89       	ldd	r25, Y+17	; 0x11
    233c:	0e 94 1b 04 	call	0x836	; 0x836 <mutex_lock>
	
	// Load all values into registers.
	MotorDirection targetDir = motor->targetDirection;
    2340:	48 85       	ldd	r20, Y+8	; 0x08
    2342:	59 85       	ldd	r21, Y+9	; 0x09
	uint16_t currentSpeed = motor->currentSpeed;
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
	uint16_t targetSpeed = motor->targetSpeed;
    2348:	6e 81       	ldd	r22, Y+6	; 0x06
    234a:	7f 81       	ldd	r23, Y+7	; 0x07
	uint16_t adjustment = motor->adjustmentStep;
    234c:	2e 85       	ldd	r18, Y+14	; 0x0e
    234e:	3f 85       	ldd	r19, Y+15	; 0x0f
	
	if (motor->currentDirection != targetDir) {
    2350:	ec 81       	ldd	r30, Y+4	; 0x04
    2352:	fd 81       	ldd	r31, Y+5	; 0x05
    2354:	e4 17       	cp	r30, r20
    2356:	f5 07       	cpc	r31, r21
    2358:	41 f0       	breq	.+16     	; 0x236a <motor_smooth_tick+0x38>
		// Slowing down until we can change the direction.
		if (currentSpeed < adjustment) {
    235a:	82 17       	cp	r24, r18
    235c:	93 07       	cpc	r25, r19
    235e:	c0 f4       	brcc	.+48     	; 0x2390 <motor_smooth_tick+0x5e>
			// Reached zero. Now we either finished stopping,
			// or can continue in the other direction.
			currentSpeed = 0;
			motor->currentDirection = targetDir;
    2360:	5d 83       	std	Y+5, r21	; 0x05
    2362:	4c 83       	std	Y+4, r20	; 0x04
	if (motor->currentDirection != targetDir) {
		// Slowing down until we can change the direction.
		if (currentSpeed < adjustment) {
			// Reached zero. Now we either finished stopping,
			// or can continue in the other direction.
			currentSpeed = 0;
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	16 c0       	rjmp	.+44     	; 0x2396 <motor_smooth_tick+0x64>
		} else {
			currentSpeed -= adjustment;
		}
	} else {
		// Going in the correct direction already.
		if (currentSpeed < targetSpeed) { // Speeding up
    236a:	86 17       	cp	r24, r22
    236c:	97 07       	cpc	r25, r23
    236e:	50 f4       	brcc	.+20     	; 0x2384 <motor_smooth_tick+0x52>
			if (targetSpeed - currentSpeed < adjustment) {
    2370:	ab 01       	movw	r20, r22
    2372:	48 1b       	sub	r20, r24
    2374:	59 0b       	sbc	r21, r25
    2376:	42 17       	cp	r20, r18
    2378:	53 07       	cpc	r21, r19
    237a:	68 f0       	brcs	.+26     	; 0x2396 <motor_smooth_tick+0x64>
				currentSpeed = targetSpeed;
			} else {
				currentSpeed += adjustment;
    237c:	b9 01       	movw	r22, r18
    237e:	68 0f       	add	r22, r24
    2380:	79 1f       	adc	r23, r25
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <motor_smooth_tick+0x64>
			}
		} else { // Slowing down
			if (currentSpeed - targetSpeed < adjustment) {
    2384:	ac 01       	movw	r20, r24
    2386:	46 1b       	sub	r20, r22
    2388:	57 0b       	sbc	r21, r23
    238a:	42 17       	cp	r20, r18
    238c:	53 07       	cpc	r21, r19
    238e:	18 f0       	brcs	.+6      	; 0x2396 <motor_smooth_tick+0x64>
				currentSpeed = targetSpeed;
			} else {
				currentSpeed -= adjustment;
    2390:	bc 01       	movw	r22, r24
    2392:	62 1b       	sub	r22, r18
    2394:	73 0b       	sbc	r23, r19
			}
		}
	}
	
	// After the adjustments, update the actual value!
	motor->currentSpeed = currentSpeed;
    2396:	7b 83       	std	Y+3, r23	; 0x03
    2398:	6a 83       	std	Y+2, r22	; 0x02
	setSpeed(motor->motor, motor->currentSpeed, motor->currentDirection);
    239a:	4c 81       	ldd	r20, Y+4	; 0x04
    239c:	5d 81       	ldd	r21, Y+5	; 0x05
    239e:	88 81       	ld	r24, Y
    23a0:	99 81       	ldd	r25, Y+1	; 0x01
    23a2:	0e 94 a2 12 	call	0x2544	; 0x2544 <setSpeed>
	
	// If we are ready adjusting, stop ticking.
	if (motor->targetSpeed == motor->currentSpeed && motor->targetDirection == motor->currentDirection) {
    23a6:	2e 81       	ldd	r18, Y+6	; 0x06
    23a8:	3f 81       	ldd	r19, Y+7	; 0x07
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	28 17       	cp	r18, r24
    23b0:	39 07       	cpc	r19, r25
    23b2:	71 f4       	brne	.+28     	; 0x23d0 <motor_smooth_tick+0x9e>
    23b4:	28 85       	ldd	r18, Y+8	; 0x08
    23b6:	39 85       	ldd	r19, Y+9	; 0x09
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	28 17       	cp	r18, r24
    23be:	39 07       	cpc	r19, r25
    23c0:	39 f4       	brne	.+14     	; 0x23d0 <motor_smooth_tick+0x9e>
		motor_smooth_set_call_frequency(motor, 0);
    23c2:	ce 01       	movw	r24, r28
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	70 e0       	ldi	r23, 0x00	; 0
    23c8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <motor_smooth_set_call_frequency>
		motor->tickRunning = FALSE;
    23cc:	1b 86       	std	Y+11, r1	; 0x0b
    23ce:	1a 86       	std	Y+10, r1	; 0x0a
	}
	mutex_release(motor->mutex);
    23d0:	88 89       	ldd	r24, Y+16	; 0x10
    23d2:	99 89       	ldd	r25, Y+17	; 0x11
    23d4:	0e 94 21 04 	call	0x842	; 0x842 <mutex_release>
}
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	08 95       	ret

#include "read_buttons_loop.h"

void button_pressed(PButton button) __attribute__((weak));
void button_pressed(PButton button) {}
    23de:	08 95       	ret

000023e0 <button_released>:

void button_released(PButton button) __attribute__((weak));
void button_released(PButton button) {}
    23e0:	08 95       	ret

000023e2 <read_buttons_loop>:

void read_buttons_loop(uint8_t buttonCount, PButton *buttonArray) {
    23e2:	6f 92       	push	r6
    23e4:	7f 92       	push	r7
    23e6:	8f 92       	push	r8
    23e8:	9f 92       	push	r9
    23ea:	af 92       	push	r10
    23ec:	bf 92       	push	r11
    23ee:	cf 92       	push	r12
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	68 2e       	mov	r6, r24
    2400:	5b 01       	movw	r10, r22
	// Allocate space to memorize the status of all the buttons.
	BOOL *hasBeenPressed = calloc(buttonCount, sizeof(BOOL));
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	62 e0       	ldi	r22, 0x02	; 2
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	0e 94 65 13 	call	0x26ca	; 0x26ca <calloc>
    240c:	4c 01       	movw	r8, r24
	
	// Loop forever, reading the button events.
	while (1) {
		for (int i = 0; i < buttonCount; i++) {
    240e:	c0 e0       	ldi	r28, 0x00	; 0
    2410:	d0 e0       	ldi	r29, 0x00	; 0
    2412:	77 24       	eor	r7, r7
    2414:	24 c0       	rjmp	.+72     	; 0x245e <read_buttons_loop+0x7c>
			PButton button = buttonArray[i];
    2416:	6e 01       	movw	r12, r28
    2418:	cc 0c       	add	r12, r12
    241a:	dd 1c       	adc	r13, r13
    241c:	f5 01       	movw	r30, r10
    241e:	ec 0d       	add	r30, r12
    2420:	fd 1d       	adc	r31, r13
    2422:	e0 80       	ld	r14, Z
    2424:	f1 80       	ldd	r15, Z+1	; 0x01
			BOOL isPressed = buttonStatus(button);
    2426:	c7 01       	movw	r24, r14
    2428:	0e 94 35 12 	call	0x246a	; 0x246a <buttonStatus>
    242c:	8c 01       	movw	r16, r24
			if (!hasBeenPressed[i] && isPressed) button_pressed(button);
    242e:	c8 0c       	add	r12, r8
    2430:	d9 1c       	adc	r13, r9
    2432:	f6 01       	movw	r30, r12
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	39 f4       	brne	.+14     	; 0x244a <read_buttons_loop+0x68>
    243c:	01 15       	cp	r16, r1
    243e:	11 05       	cpc	r17, r1
    2440:	51 f0       	breq	.+20     	; 0x2456 <read_buttons_loop+0x74>
    2442:	c7 01       	movw	r24, r14
    2444:	0e 94 c7 0c 	call	0x198e	; 0x198e <button_pressed>
    2448:	06 c0       	rjmp	.+12     	; 0x2456 <read_buttons_loop+0x74>
			if (hasBeenPressed[i] && !isPressed) button_released(button);
    244a:	01 15       	cp	r16, r1
    244c:	11 05       	cpc	r17, r1
    244e:	19 f4       	brne	.+6      	; 0x2456 <read_buttons_loop+0x74>
    2450:	c7 01       	movw	r24, r14
    2452:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <button_released>
			hasBeenPressed[i] = isPressed;
    2456:	f6 01       	movw	r30, r12
    2458:	11 83       	std	Z+1, r17	; 0x01
    245a:	00 83       	st	Z, r16
	// Allocate space to memorize the status of all the buttons.
	BOOL *hasBeenPressed = calloc(buttonCount, sizeof(BOOL));
	
	// Loop forever, reading the button events.
	while (1) {
		for (int i = 0; i < buttonCount; i++) {
    245c:	21 96       	adiw	r28, 0x01	; 1
    245e:	c6 15       	cp	r28, r6
    2460:	d7 05       	cpc	r29, r7
    2462:	cc f2       	brlt	.-78     	; 0x2416 <read_buttons_loop+0x34>
    2464:	c0 e0       	ldi	r28, 0x00	; 0
    2466:	d0 e0       	ldi	r29, 0x00	; 0
    2468:	fa cf       	rjmp	.-12     	; 0x245e <read_buttons_loop+0x7c>

0000246a <buttonStatus>:
 */ 

#include "button.h"
#include "port.h"

BOOL buttonStatus(PButton button) {
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	ec 01       	movw	r28, r24
	BOOL val = readPin(button->pin);
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <readPin>
    2478:	9c 01       	movw	r18, r24
	if (button->flags & BUTTON_INVERTED) val = !val;
    247a:	88 81       	ld	r24, Y
    247c:	81 ff       	sbrs	r24, 1
    247e:	08 c0       	rjmp	.+16     	; 0x2490 <buttonStatus+0x26>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	21 15       	cp	r18, r1
    2486:	31 05       	cpc	r19, r1
    2488:	11 f0       	breq	.+4      	; 0x248e <buttonStatus+0x24>
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9c 01       	movw	r18, r24
	return val;
}
    2490:	c9 01       	movw	r24, r18
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <stopMotor>:
#include "motor.h"
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

void stopMotor(PMotor motor) {
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	ec 01       	movw	r28, r24
	// TODO -- unclear how to stop the motor.
	// TCCR1A &= ~(_BV(COM1A0) | _BV(COM1A1) | _BV(COM1B0) | _BV(COM1B1));
	// disableOutputCompare(motor->pwmTimer);
	// setPinZero(motor->pwmTimer->outputComparePin);
	setTimerCompareValue(motor->pwmTimer, 0);
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <setTimerCompareValue>
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    24aa:	88 81       	ld	r24, Y
    24ac:	83 ff       	sbrs	r24, 3
    24ae:	08 c0       	rjmp	.+16     	; 0x24c0 <stopMotor+0x28>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
		setPinZero(Dir2(motor));
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
	}
}
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	08 95       	ret

000024c6 <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    24c6:	fc 01       	movw	r30, r24
    24c8:	83 81       	ldd	r24, Z+3	; 0x03
    24ca:	94 81       	ldd	r25, Z+4	; 0x04
    24cc:	0e 94 17 11 	call	0x222e	; 0x222e <getTimerCompareValue>
}
    24d0:	08 95       	ret

000024d2 <getDirection>:

MotorDirection getDirection(PMotor motor) {
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    24dc:	28 81       	ld	r18, Y
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	23 ff       	sbrs	r18, 3
    24e4:	12 c0       	rjmp	.+36     	; 0x250a <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
    24e6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <readPin>
    24ea:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <readPin>
		if (dir1 && !dir2) val = FORWARD;
    24f4:	01 15       	cp	r16, r1
    24f6:	11 05       	cpc	r17, r1
    24f8:	19 f0       	breq	.+6      	; 0x2500 <getDirection+0x2e>
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	e9 f0       	breq	.+58     	; 0x2538 <getDirection+0x66>
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	e9 f4       	brne	.+58     	; 0x253e <getDirection+0x6c>
    2504:	22 e0       	ldi	r18, 0x02	; 2
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	11 c0       	rjmp	.+34     	; 0x252c <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
    250a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <readPin>
    250e:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
    2510:	82 30       	cpi	r24, 0x02	; 2
    2512:	91 05       	cpc	r25, r1
    2514:	59 f0       	breq	.+22     	; 0x252c <getDirection+0x5a>
    2516:	88 81       	ld	r24, Y
    2518:	82 ff       	sbrs	r24, 2
    251a:	08 c0       	rjmp	.+16     	; 0x252c <getDirection+0x5a>
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	21 15       	cp	r18, r1
    2522:	31 05       	cpc	r19, r1
    2524:	11 f0       	breq	.+4      	; 0x252a <getDirection+0x58>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 01       	movw	r18, r24
	return val;
}
    252c:	c9 01       	movw	r24, r18
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
    2538:	21 e0       	ldi	r18, 0x01	; 1
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	ec cf       	rjmp	.-40     	; 0x2516 <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	e9 cf       	rjmp	.-46     	; 0x2516 <getDirection+0x44>

00002544 <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	ec 01       	movw	r28, r24
    254e:	8b 01       	movw	r16, r22
    2550:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
    2552:	42 30       	cpi	r20, 0x02	; 2
    2554:	51 05       	cpc	r21, r1
    2556:	19 f0       	breq	.+6      	; 0x255e <setSpeed+0x1a>
    2558:	01 15       	cp	r16, r1
    255a:	11 05       	cpc	r17, r1
    255c:	21 f4       	brne	.+8      	; 0x2566 <setSpeed+0x22>
		stopMotor(motor);
    255e:	ce 01       	movw	r24, r28
    2560:	0e 94 4c 12 	call	0x2498	; 0x2498 <stopMotor>
		return;
    2564:	32 c0       	rjmp	.+100    	; 0x25ca <setSpeed+0x86>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
    2566:	28 81       	ld	r18, Y
    2568:	22 ff       	sbrs	r18, 2
    256a:	08 c0       	rjmp	.+16     	; 0x257c <setSpeed+0x38>
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	41 15       	cp	r20, r1
    2572:	51 05       	cpc	r21, r1
    2574:	11 f0       	breq	.+4      	; 0x257a <setSpeed+0x36>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    257c:	23 ff       	sbrs	r18, 3
    257e:	13 c0       	rjmp	.+38     	; 0x25a6 <setSpeed+0x62>
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
    2584:	61 30       	cpi	r22, 0x01	; 1
    2586:	71 05       	cpc	r23, r1
    2588:	39 f4       	brne	.+14     	; 0x2598 <setSpeed+0x54>
			setPinOne(motor->direction);
    258a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
			setPinZero(Dir2(motor));
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
    2596:	0b c0       	rjmp	.+22     	; 0x25ae <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
    2598:	0e 94 65 0f 	call	0x1eca	; 0x1eca <setPinZero>
			setPinOne(Dir2(motor));
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	0e 94 57 0f 	call	0x1eae	; 0x1eae <setPinOne>
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <writePin>
	}
	if (motor->flags & MOTOR_INVERSE_SPEED) speed = 0xFFFF - speed;
    25ae:	88 81       	ld	r24, Y
    25b0:	81 ff       	sbrs	r24, 1
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <setSpeed+0x74>
    25b4:	00 95       	com	r16
    25b6:	10 95       	com	r17
	setTimerCompareValue(motor->pwmTimer, speed);
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	b8 01       	movw	r22, r16
    25be:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <setTimerCompareValue>
	enableOutputCompare(motor->pwmTimer);
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <enableOutputCompare>
}
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	08 95       	ret

000025d4 <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	0e 94 a2 12 	call	0x2544	; 0x2544 <setSpeed>
}
    25dc:	08 95       	ret

000025de <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	0e 94 a2 12 	call	0x2544	; 0x2544 <setSpeed>
}
    25e6:	08 95       	ret

000025e8 <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
    25f2:	0e 94 69 12 	call	0x24d2	; 0x24d2 <getDirection>
    25f6:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	91 05       	cpc	r25, r1
    25fc:	71 f0       	breq	.+28     	; 0x261a <getDirSpeed+0x32>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    25fe:	f8 01       	movw	r30, r16
    2600:	83 81       	ldd	r24, Z+3	; 0x03
    2602:	94 81       	ldd	r25, Z+4	; 0x04
    2604:	0e 94 17 11 	call	0x222e	; 0x222e <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
    2608:	9c 01       	movw	r18, r24
    260a:	36 95       	lsr	r19
    260c:	27 95       	ror	r18
	if (dir == BACKWARD)
    260e:	20 97       	sbiw	r28, 0x00	; 0
    2610:	31 f4       	brne	.+12     	; 0x261e <getDirSpeed+0x36>
		val *= -1; // Should be optimized away by compiler.
    2612:	30 95       	com	r19
    2614:	21 95       	neg	r18
    2616:	3f 4f       	sbci	r19, 0xFF	; 255
    2618:	02 c0       	rjmp	.+4      	; 0x261e <getDirSpeed+0x36>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
    261e:	c9 01       	movw	r24, r18
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	1f 91       	pop	r17
    2626:	0f 91       	pop	r16
    2628:	08 95       	ret

0000262a <motor_toUnsignedSpeed>:

uint16_t motor_toUnsignedSpeed(int16_t speed) {
	uint16_t absv = abs(speed);
    262a:	28 2f       	mov	r18, r24
    262c:	39 2f       	mov	r19, r25
    262e:	37 ff       	sbrs	r19, 7
    2630:	03 c0       	rjmp	.+6      	; 0x2638 <motor_toUnsignedSpeed+0xe>
    2632:	30 95       	com	r19
    2634:	21 95       	neg	r18
    2636:	3f 4f       	sbci	r19, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
    2638:	22 0f       	add	r18, r18
    263a:	33 1f       	adc	r19, r19
	return absv;
}
    263c:	c9 01       	movw	r24, r18
    263e:	08 95       	ret

00002640 <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	ec 01       	movw	r28, r24
    264a:	8b 01       	movw	r16, r22
	if (speed == 0) {
    264c:	61 15       	cp	r22, r1
    264e:	71 05       	cpc	r23, r1
    2650:	19 f4       	brne	.+6      	; 0x2658 <setDirSpeed+0x18>
		stopMotor(motor);
    2652:	0e 94 4c 12 	call	0x2498	; 0x2498 <stopMotor>
		return;
    2656:	0d c0       	rjmp	.+26     	; 0x2672 <setDirSpeed+0x32>
	}
	setSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    2658:	cb 01       	movw	r24, r22
    265a:	0e 94 15 13 	call	0x262a	; 0x262a <motor_toUnsignedSpeed>
    265e:	bc 01       	movw	r22, r24
    2660:	41 2f       	mov	r20, r17
    2662:	40 95       	com	r20
    2664:	44 1f       	adc	r20, r20
    2666:	44 27       	eor	r20, r20
    2668:	44 1f       	adc	r20, r20
    266a:	ce 01       	movw	r24, r28
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	0e 94 a2 12 	call	0x2544	; 0x2544 <setSpeed>
}
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	08 95       	ret

0000267c <__udivmodhi4>:
    267c:	aa 1b       	sub	r26, r26
    267e:	bb 1b       	sub	r27, r27
    2680:	51 e1       	ldi	r21, 0x11	; 17
    2682:	07 c0       	rjmp	.+14     	; 0x2692 <__udivmodhi4_ep>

00002684 <__udivmodhi4_loop>:
    2684:	aa 1f       	adc	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	a6 17       	cp	r26, r22
    268a:	b7 07       	cpc	r27, r23
    268c:	10 f0       	brcs	.+4      	; 0x2692 <__udivmodhi4_ep>
    268e:	a6 1b       	sub	r26, r22
    2690:	b7 0b       	sbc	r27, r23

00002692 <__udivmodhi4_ep>:
    2692:	88 1f       	adc	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	5a 95       	dec	r21
    2698:	a9 f7       	brne	.-22     	; 0x2684 <__udivmodhi4_loop>
    269a:	80 95       	com	r24
    269c:	90 95       	com	r25
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	08 95       	ret

000026a4 <__divmodhi4>:
    26a4:	97 fb       	bst	r25, 7
    26a6:	09 2e       	mov	r0, r25
    26a8:	07 26       	eor	r0, r23
    26aa:	0a d0       	rcall	.+20     	; 0x26c0 <__divmodhi4_neg1>
    26ac:	77 fd       	sbrc	r23, 7
    26ae:	04 d0       	rcall	.+8      	; 0x26b8 <__divmodhi4_neg2>
    26b0:	e5 df       	rcall	.-54     	; 0x267c <__udivmodhi4>
    26b2:	06 d0       	rcall	.+12     	; 0x26c0 <__divmodhi4_neg1>
    26b4:	00 20       	and	r0, r0
    26b6:	1a f4       	brpl	.+6      	; 0x26be <__divmodhi4_exit>

000026b8 <__divmodhi4_neg2>:
    26b8:	70 95       	com	r23
    26ba:	61 95       	neg	r22
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255

000026be <__divmodhi4_exit>:
    26be:	08 95       	ret

000026c0 <__divmodhi4_neg1>:
    26c0:	f6 f7       	brtc	.-4      	; 0x26be <__divmodhi4_exit>
    26c2:	90 95       	com	r25
    26c4:	81 95       	neg	r24
    26c6:	9f 4f       	sbci	r25, 0xFF	; 255
    26c8:	08 95       	ret

000026ca <calloc>:
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	68 9f       	mul	r22, r24
    26d8:	80 01       	movw	r16, r0
    26da:	69 9f       	mul	r22, r25
    26dc:	10 0d       	add	r17, r0
    26de:	78 9f       	mul	r23, r24
    26e0:	10 0d       	add	r17, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	c8 01       	movw	r24, r16
    26e6:	0e 94 8a 13 	call	0x2714	; 0x2714 <malloc>
    26ea:	e8 2e       	mov	r14, r24
    26ec:	e7 01       	movw	r28, r14
    26ee:	7e 01       	movw	r14, r28
    26f0:	f9 2e       	mov	r15, r25
    26f2:	e7 01       	movw	r28, r14
    26f4:	20 97       	sbiw	r28, 0x00	; 0
    26f6:	31 f0       	breq	.+12     	; 0x2704 <calloc+0x3a>
    26f8:	8e 2d       	mov	r24, r14
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	a8 01       	movw	r20, r16
    2700:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <memset>
    2704:	ce 01       	movw	r24, r28
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	08 95       	ret

00002714 <malloc>:
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	91 05       	cpc	r25, r1
    271c:	10 f4       	brcc	.+4      	; 0x2722 <malloc+0xe>
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	e0 91 5a 04 	lds	r30, 0x045A
    2726:	f0 91 5b 04 	lds	r31, 0x045B
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	26 c0       	rjmp	.+76     	; 0x2780 <malloc+0x6c>
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	68 17       	cp	r22, r24
    273a:	79 07       	cpc	r23, r25
    273c:	e0 f0       	brcs	.+56     	; 0x2776 <malloc+0x62>
    273e:	68 17       	cp	r22, r24
    2740:	79 07       	cpc	r23, r25
    2742:	81 f4       	brne	.+32     	; 0x2764 <malloc+0x50>
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	21 15       	cp	r18, r1
    274a:	31 05       	cpc	r19, r1
    274c:	31 f0       	breq	.+12     	; 0x275a <malloc+0x46>
    274e:	d9 01       	movw	r26, r18
    2750:	13 96       	adiw	r26, 0x03	; 3
    2752:	9c 93       	st	X, r25
    2754:	8e 93       	st	-X, r24
    2756:	12 97       	sbiw	r26, 0x02	; 2
    2758:	2b c0       	rjmp	.+86     	; 0x27b0 <malloc+0x9c>
    275a:	90 93 5b 04 	sts	0x045B, r25
    275e:	80 93 5a 04 	sts	0x045A, r24
    2762:	26 c0       	rjmp	.+76     	; 0x27b0 <malloc+0x9c>
    2764:	41 15       	cp	r20, r1
    2766:	51 05       	cpc	r21, r1
    2768:	19 f0       	breq	.+6      	; 0x2770 <malloc+0x5c>
    276a:	64 17       	cp	r22, r20
    276c:	75 07       	cpc	r23, r21
    276e:	18 f4       	brcc	.+6      	; 0x2776 <malloc+0x62>
    2770:	ab 01       	movw	r20, r22
    2772:	e9 01       	movw	r28, r18
    2774:	df 01       	movw	r26, r30
    2776:	9f 01       	movw	r18, r30
    2778:	72 81       	ldd	r23, Z+2	; 0x02
    277a:	63 81       	ldd	r22, Z+3	; 0x03
    277c:	e7 2f       	mov	r30, r23
    277e:	f6 2f       	mov	r31, r22
    2780:	30 97       	sbiw	r30, 0x00	; 0
    2782:	c1 f6       	brne	.-80     	; 0x2734 <malloc+0x20>
    2784:	41 15       	cp	r20, r1
    2786:	51 05       	cpc	r21, r1
    2788:	01 f1       	breq	.+64     	; 0x27ca <malloc+0xb6>
    278a:	48 1b       	sub	r20, r24
    278c:	59 0b       	sbc	r21, r25
    278e:	44 30       	cpi	r20, 0x04	; 4
    2790:	51 05       	cpc	r21, r1
    2792:	80 f4       	brcc	.+32     	; 0x27b4 <malloc+0xa0>
    2794:	12 96       	adiw	r26, 0x02	; 2
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	13 97       	sbiw	r26, 0x03	; 3
    279c:	20 97       	sbiw	r28, 0x00	; 0
    279e:	19 f0       	breq	.+6      	; 0x27a6 <malloc+0x92>
    27a0:	9b 83       	std	Y+3, r25	; 0x03
    27a2:	8a 83       	std	Y+2, r24	; 0x02
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <malloc+0x9a>
    27a6:	90 93 5b 04 	sts	0x045B, r25
    27aa:	80 93 5a 04 	sts	0x045A, r24
    27ae:	fd 01       	movw	r30, r26
    27b0:	32 96       	adiw	r30, 0x02	; 2
    27b2:	46 c0       	rjmp	.+140    	; 0x2840 <malloc+0x12c>
    27b4:	fd 01       	movw	r30, r26
    27b6:	e4 0f       	add	r30, r20
    27b8:	f5 1f       	adc	r31, r21
    27ba:	81 93       	st	Z+, r24
    27bc:	91 93       	st	Z+, r25
    27be:	42 50       	subi	r20, 0x02	; 2
    27c0:	50 40       	sbci	r21, 0x00	; 0
    27c2:	11 96       	adiw	r26, 0x01	; 1
    27c4:	5c 93       	st	X, r21
    27c6:	4e 93       	st	-X, r20
    27c8:	3b c0       	rjmp	.+118    	; 0x2840 <malloc+0x12c>
    27ca:	20 91 58 04 	lds	r18, 0x0458
    27ce:	30 91 59 04 	lds	r19, 0x0459
    27d2:	21 15       	cp	r18, r1
    27d4:	31 05       	cpc	r19, r1
    27d6:	41 f4       	brne	.+16     	; 0x27e8 <malloc+0xd4>
    27d8:	20 91 fe 01 	lds	r18, 0x01FE
    27dc:	30 91 ff 01 	lds	r19, 0x01FF
    27e0:	30 93 59 04 	sts	0x0459, r19
    27e4:	20 93 58 04 	sts	0x0458, r18
    27e8:	20 91 00 02 	lds	r18, 0x0200
    27ec:	30 91 01 02 	lds	r19, 0x0201
    27f0:	21 15       	cp	r18, r1
    27f2:	31 05       	cpc	r19, r1
    27f4:	41 f4       	brne	.+16     	; 0x2806 <malloc+0xf2>
    27f6:	2d b7       	in	r18, 0x3d	; 61
    27f8:	3e b7       	in	r19, 0x3e	; 62
    27fa:	40 91 fc 01 	lds	r20, 0x01FC
    27fe:	50 91 fd 01 	lds	r21, 0x01FD
    2802:	24 1b       	sub	r18, r20
    2804:	35 0b       	sbc	r19, r21
    2806:	e0 91 58 04 	lds	r30, 0x0458
    280a:	f0 91 59 04 	lds	r31, 0x0459
    280e:	e2 17       	cp	r30, r18
    2810:	f3 07       	cpc	r31, r19
    2812:	a0 f4       	brcc	.+40     	; 0x283c <malloc+0x128>
    2814:	2e 1b       	sub	r18, r30
    2816:	3f 0b       	sbc	r19, r31
    2818:	28 17       	cp	r18, r24
    281a:	39 07       	cpc	r19, r25
    281c:	78 f0       	brcs	.+30     	; 0x283c <malloc+0x128>
    281e:	ac 01       	movw	r20, r24
    2820:	4e 5f       	subi	r20, 0xFE	; 254
    2822:	5f 4f       	sbci	r21, 0xFF	; 255
    2824:	24 17       	cp	r18, r20
    2826:	35 07       	cpc	r19, r21
    2828:	48 f0       	brcs	.+18     	; 0x283c <malloc+0x128>
    282a:	4e 0f       	add	r20, r30
    282c:	5f 1f       	adc	r21, r31
    282e:	50 93 59 04 	sts	0x0459, r21
    2832:	40 93 58 04 	sts	0x0458, r20
    2836:	81 93       	st	Z+, r24
    2838:	91 93       	st	Z+, r25
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <malloc+0x12c>
    283c:	e0 e0       	ldi	r30, 0x00	; 0
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	cf 01       	movw	r24, r30
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <free>:
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	09 f4       	brne	.+2      	; 0x2852 <free+0xa>
    2850:	91 c0       	rjmp	.+290    	; 0x2974 <free+0x12c>
    2852:	fc 01       	movw	r30, r24
    2854:	32 97       	sbiw	r30, 0x02	; 2
    2856:	13 82       	std	Z+3, r1	; 0x03
    2858:	12 82       	std	Z+2, r1	; 0x02
    285a:	60 91 5a 04 	lds	r22, 0x045A
    285e:	70 91 5b 04 	lds	r23, 0x045B
    2862:	61 15       	cp	r22, r1
    2864:	71 05       	cpc	r23, r1
    2866:	81 f4       	brne	.+32     	; 0x2888 <free+0x40>
    2868:	20 81       	ld	r18, Z
    286a:	31 81       	ldd	r19, Z+1	; 0x01
    286c:	28 0f       	add	r18, r24
    286e:	39 1f       	adc	r19, r25
    2870:	80 91 58 04 	lds	r24, 0x0458
    2874:	90 91 59 04 	lds	r25, 0x0459
    2878:	82 17       	cp	r24, r18
    287a:	93 07       	cpc	r25, r19
    287c:	99 f5       	brne	.+102    	; 0x28e4 <free+0x9c>
    287e:	f0 93 59 04 	sts	0x0459, r31
    2882:	e0 93 58 04 	sts	0x0458, r30
    2886:	76 c0       	rjmp	.+236    	; 0x2974 <free+0x12c>
    2888:	db 01       	movw	r26, r22
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <free+0x4c>
    2890:	cd 01       	movw	r24, r26
    2892:	d9 01       	movw	r26, r18
    2894:	ae 17       	cp	r26, r30
    2896:	bf 07       	cpc	r27, r31
    2898:	48 f4       	brcc	.+18     	; 0x28ac <free+0x64>
    289a:	12 96       	adiw	r26, 0x02	; 2
    289c:	2d 91       	ld	r18, X+
    289e:	3c 91       	ld	r19, X
    28a0:	13 97       	sbiw	r26, 0x03	; 3
    28a2:	21 15       	cp	r18, r1
    28a4:	31 05       	cpc	r19, r1
    28a6:	a1 f7       	brne	.-24     	; 0x2890 <free+0x48>
    28a8:	cd 01       	movw	r24, r26
    28aa:	21 c0       	rjmp	.+66     	; 0x28ee <free+0xa6>
    28ac:	b3 83       	std	Z+3, r27	; 0x03
    28ae:	a2 83       	std	Z+2, r26	; 0x02
    28b0:	ef 01       	movw	r28, r30
    28b2:	49 91       	ld	r20, Y+
    28b4:	59 91       	ld	r21, Y+
    28b6:	9e 01       	movw	r18, r28
    28b8:	24 0f       	add	r18, r20
    28ba:	35 1f       	adc	r19, r21
    28bc:	a2 17       	cp	r26, r18
    28be:	b3 07       	cpc	r27, r19
    28c0:	79 f4       	brne	.+30     	; 0x28e0 <free+0x98>
    28c2:	2d 91       	ld	r18, X+
    28c4:	3c 91       	ld	r19, X
    28c6:	11 97       	sbiw	r26, 0x01	; 1
    28c8:	24 0f       	add	r18, r20
    28ca:	35 1f       	adc	r19, r21
    28cc:	2e 5f       	subi	r18, 0xFE	; 254
    28ce:	3f 4f       	sbci	r19, 0xFF	; 255
    28d0:	31 83       	std	Z+1, r19	; 0x01
    28d2:	20 83       	st	Z, r18
    28d4:	12 96       	adiw	r26, 0x02	; 2
    28d6:	2d 91       	ld	r18, X+
    28d8:	3c 91       	ld	r19, X
    28da:	13 97       	sbiw	r26, 0x03	; 3
    28dc:	33 83       	std	Z+3, r19	; 0x03
    28de:	22 83       	std	Z+2, r18	; 0x02
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	29 f4       	brne	.+10     	; 0x28ee <free+0xa6>
    28e4:	f0 93 5b 04 	sts	0x045B, r31
    28e8:	e0 93 5a 04 	sts	0x045A, r30
    28ec:	43 c0       	rjmp	.+134    	; 0x2974 <free+0x12c>
    28ee:	dc 01       	movw	r26, r24
    28f0:	13 96       	adiw	r26, 0x03	; 3
    28f2:	fc 93       	st	X, r31
    28f4:	ee 93       	st	-X, r30
    28f6:	12 97       	sbiw	r26, 0x02	; 2
    28f8:	4d 91       	ld	r20, X+
    28fa:	5d 91       	ld	r21, X+
    28fc:	a4 0f       	add	r26, r20
    28fe:	b5 1f       	adc	r27, r21
    2900:	ea 17       	cp	r30, r26
    2902:	fb 07       	cpc	r31, r27
    2904:	69 f4       	brne	.+26     	; 0x2920 <free+0xd8>
    2906:	20 81       	ld	r18, Z
    2908:	31 81       	ldd	r19, Z+1	; 0x01
    290a:	24 0f       	add	r18, r20
    290c:	35 1f       	adc	r19, r21
    290e:	2e 5f       	subi	r18, 0xFE	; 254
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	ec 01       	movw	r28, r24
    2914:	39 83       	std	Y+1, r19	; 0x01
    2916:	28 83       	st	Y, r18
    2918:	22 81       	ldd	r18, Z+2	; 0x02
    291a:	33 81       	ldd	r19, Z+3	; 0x03
    291c:	3b 83       	std	Y+3, r19	; 0x03
    291e:	2a 83       	std	Y+2, r18	; 0x02
    2920:	e0 e0       	ldi	r30, 0x00	; 0
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	02 c0       	rjmp	.+4      	; 0x292a <free+0xe2>
    2926:	fb 01       	movw	r30, r22
    2928:	bc 01       	movw	r22, r24
    292a:	db 01       	movw	r26, r22
    292c:	12 96       	adiw	r26, 0x02	; 2
    292e:	8d 91       	ld	r24, X+
    2930:	9c 91       	ld	r25, X
    2932:	13 97       	sbiw	r26, 0x03	; 3
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	b9 f7       	brne	.-18     	; 0x2926 <free+0xde>
    2938:	9b 01       	movw	r18, r22
    293a:	2e 5f       	subi	r18, 0xFE	; 254
    293c:	3f 4f       	sbci	r19, 0xFF	; 255
    293e:	8d 91       	ld	r24, X+
    2940:	9c 91       	ld	r25, X
    2942:	11 97       	sbiw	r26, 0x01	; 1
    2944:	82 0f       	add	r24, r18
    2946:	93 1f       	adc	r25, r19
    2948:	40 91 58 04 	lds	r20, 0x0458
    294c:	50 91 59 04 	lds	r21, 0x0459
    2950:	48 17       	cp	r20, r24
    2952:	59 07       	cpc	r21, r25
    2954:	79 f4       	brne	.+30     	; 0x2974 <free+0x12c>
    2956:	30 97       	sbiw	r30, 0x00	; 0
    2958:	29 f4       	brne	.+10     	; 0x2964 <free+0x11c>
    295a:	10 92 5b 04 	sts	0x045B, r1
    295e:	10 92 5a 04 	sts	0x045A, r1
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <free+0x120>
    2964:	13 82       	std	Z+3, r1	; 0x03
    2966:	12 82       	std	Z+2, r1	; 0x02
    2968:	22 50       	subi	r18, 0x02	; 2
    296a:	30 40       	sbci	r19, 0x00	; 0
    296c:	30 93 59 04 	sts	0x0459, r19
    2970:	20 93 58 04 	sts	0x0458, r18
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	08 95       	ret

0000297a <memcpy_P>:
    297a:	fb 01       	movw	r30, r22
    297c:	dc 01       	movw	r26, r24
    297e:	02 c0       	rjmp	.+4      	; 0x2984 <memcpy_P+0xa>
    2980:	05 90       	lpm	r0, Z+
    2982:	0d 92       	st	X+, r0
    2984:	41 50       	subi	r20, 0x01	; 1
    2986:	50 40       	sbci	r21, 0x00	; 0
    2988:	d8 f7       	brcc	.-10     	; 0x2980 <memcpy_P+0x6>
    298a:	08 95       	ret

0000298c <strlen_P>:
    298c:	fc 01       	movw	r30, r24
    298e:	05 90       	lpm	r0, Z+
    2990:	00 20       	and	r0, r0
    2992:	e9 f7       	brne	.-6      	; 0x298e <strlen_P+0x2>
    2994:	80 95       	com	r24
    2996:	90 95       	com	r25
    2998:	8e 0f       	add	r24, r30
    299a:	9f 1f       	adc	r25, r31
    299c:	08 95       	ret

0000299e <memcpy>:
    299e:	fb 01       	movw	r30, r22
    29a0:	dc 01       	movw	r26, r24
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <memcpy+0xa>
    29a4:	01 90       	ld	r0, Z+
    29a6:	0d 92       	st	X+, r0
    29a8:	41 50       	subi	r20, 0x01	; 1
    29aa:	50 40       	sbci	r21, 0x00	; 0
    29ac:	d8 f7       	brcc	.-10     	; 0x29a4 <memcpy+0x6>
    29ae:	08 95       	ret

000029b0 <memset>:
    29b0:	dc 01       	movw	r26, r24
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <memset+0x6>
    29b4:	6d 93       	st	X+, r22
    29b6:	41 50       	subi	r20, 0x01	; 1
    29b8:	50 40       	sbci	r21, 0x00	; 0
    29ba:	e0 f7       	brcc	.-8      	; 0x29b4 <memset+0x4>
    29bc:	08 95       	ret

000029be <_exit>:
    29be:	f8 94       	cli

000029c0 <__stop_program>:
    29c0:	ff cf       	rjmp	.-2      	; 0x29c0 <__stop_program>
