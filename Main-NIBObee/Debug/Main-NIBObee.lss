
Main-NIBObee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00001ef2  00001f86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ef2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  00800230  00800230  000020b6  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000398  00000000  00000000  000028fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f88  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003f5f  00000000  00000000  00003c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fc3  00000000  00000000  00007b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000528b  00000000  00000000  00008b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000860  00000000  00000000  0000ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000172d  00000000  00000000  0000e628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002041  00000000  00000000  0000fd55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0006008c  00000000  00000000  00011d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000006c1  00000000  00000000  00071e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  000724e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_26>
      6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      7c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      80:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__vector_32>
      84:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      88:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	c0 e0       	ldi	r28, 0x00	; 0
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ef       	ldi	r30, 0xF2	; 242
      a0:	fe e1       	ldi	r31, 0x1E	; 30
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a0 e3       	ldi	r26, 0x30	; 48
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3c       	cpi	r26, 0xC8	; 200
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
	MCUSR = 0;
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init_ports_m1284P>

000000ca <init_nibobee_leds_kernel_init>:
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
}
KERNEL_INIT(init_nibobee_leds)
      ca:	0e 94 28 02 	call	0x450	; 0x450 <init_nibobee_leds>

000000ce <init_nibobee_buttons_kernel_init>:
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
}
KERNEL_INIT(init_nibobee_buttons)
      ce:	0e 94 94 02 	call	0x528	; 0x528 <init_nibobee_buttons>

000000d2 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      d2:	0e 94 c9 02 	call	0x592	; 0x592 <init_timer_m1284P>

000000d6 <init_nibobee_motors_kernel_init>:

void init_nibobee_motors() {
	INIT_MOTOR(LeftMotor, MOTOR_NORMAL, PinD6, Timer1A)
	INIT_MOTOR(RightMotor, MOTOR_NORMAL, PinD7, Timer1B)
}
KERNEL_INIT(init_nibobee_motors)
      d6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <init_nibobee_motors>

000000da <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      da:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_twi>

000000de <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      de:	0e 94 c4 06 	call	0xd88	; 0xd88 <init_idle_scheduler>

000000e2 <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 2500);
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      e2:	0e 94 d7 06 	call	0xdae	; 0xdae <init_scheduler>

000000e6 <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      e6:	0e 94 82 07 	call	0xf04	; 0xf04 <init_kernel>
      ea:	0e 94 9c 07 	call	0xf38	; 0xf38 <main>
      ee:	0c 94 74 0f 	jmp	0x1ee8	; 0x1ee8 <MainProcessEnd>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <twi_stop>:
#define twi_send(data) TWDR = data; twi_continue()
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
      f6:	85 ed       	ldi	r24, 0xD5	; 213
      f8:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
      fc:	80 91 18 01 	lds	r24, 0x0118
     100:	90 91 19 01 	lds	r25, 0x0119
     104:	a0 91 1a 01 	lds	r26, 0x011A
     108:	b0 91 1b 01 	lds	r27, 0x011B
     10c:	80 93 2c 03 	sts	0x032C, r24
     110:	90 93 2d 03 	sts	0x032D, r25
     114:	a0 93 2e 03 	sts	0x032E, r26
     118:	b0 93 2f 03 	sts	0x032F, r27
	#else
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
     11c:	10 92 31 03 	sts	0x0331, r1
     120:	10 92 30 03 	sts	0x0330, r1
}
     124:	08 95       	ret

00000126 <twi_end>:
	}
}

static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
     126:	85 ec       	ldi	r24, 0xC5	; 197
     128:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     12c:	80 91 18 01 	lds	r24, 0x0118
     130:	90 91 19 01 	lds	r25, 0x0119
     134:	a0 91 1a 01 	lds	r26, 0x011A
     138:	b0 91 1b 01 	lds	r27, 0x011B
     13c:	80 93 2c 03 	sts	0x032C, r24
     140:	90 93 2d 03 	sts	0x032D, r25
     144:	a0 93 2e 03 	sts	0x032E, r26
     148:	b0 93 2f 03 	sts	0x032F, r27
	#else
		twi_base;
	#endif
	twi_running = FALSE;
     14c:	10 92 31 03 	sts	0x0331, r1
     150:	10 92 30 03 	sts	0x0330, r1
}
     154:	08 95       	ret

00000156 <twi_receive_byte>:
	next_twi_operation();
}

static inline void twi_receive_byte() {
	// received data-byte. Read into receive-twi_buffer, acknowledge, if more bytes expected.
	twi_buffer.data[alreadyHandled++] = TWDR;
     156:	20 91 f6 02 	lds	r18, 0x02F6
     15a:	30 91 f7 02 	lds	r19, 0x02F7
     15e:	80 91 bb 00 	lds	r24, 0x00BB
     162:	e0 91 2c 03 	lds	r30, 0x032C
     166:	f0 91 2d 03 	lds	r31, 0x032D
     16a:	e2 0f       	add	r30, r18
     16c:	f3 1f       	adc	r31, r19
     16e:	80 83       	st	Z, r24
     170:	2f 5f       	subi	r18, 0xFF	; 255
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	30 93 f7 02 	sts	0x02F7, r19
     178:	20 93 f6 02 	sts	0x02F6, r18
	if (alreadyHandled < twi_buffer.size - 1) {
     17c:	80 91 2e 03 	lds	r24, 0x032E
     180:	90 91 2f 03 	lds	r25, 0x032F
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	28 17       	cp	r18, r24
     188:	39 07       	cpc	r19, r25
     18a:	10 f4       	brcc	.+4      	; 0x190 <twi_receive_byte+0x3a>
		twi_ack(); // Still more than one byte to go.
     18c:	85 ec       	ldi	r24, 0xC5	; 197
     18e:	01 c0       	rjmp	.+2      	; 0x192 <twi_receive_byte+0x3c>
	} else {
		twi_continue(); // Want to receive one more byte. Next byte will get NOT ACK.
     190:	85 e8       	ldi	r24, 0x85	; 133
     192:	80 93 bc 00 	sts	0x00BC, r24
     196:	08 95       	ret

00000198 <twi_init_receive>:
	}
}

static inline void twi_init_receive() {
	if (twi_buffer.size > 0) {
     198:	80 91 2e 03 	lds	r24, 0x032E
     19c:	90 91 2f 03 	lds	r25, 0x032F
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	11 f0       	breq	.+4      	; 0x1a8 <twi_init_receive+0x10>
		twi_ack(); // Acknowledge, if want to receive at least one byte
     1a4:	85 ec       	ldi	r24, 0xC5	; 197
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <twi_init_receive+0x12>
	} else {
		twi_continue();
     1a8:	85 e8       	ldi	r24, 0x85	; 133
     1aa:	80 93 bc 00 	sts	0x00BC, r24
     1ae:	08 95       	ret

000001b0 <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
     1b0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <processor_loop_idle>
}
     1b4:	08 95       	ret

000001b6 <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     1b6:	84 b7       	in	r24, 0x34	; 52
     1b8:	80 93 30 02 	sts	0x0230, r24
	MCUSR = 0;
     1bc:	14 be       	out	0x34, r1	; 52
}
     1be:	08 95       	ret

000001c0 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     1c0:	80 91 30 02 	lds	r24, 0x0230
     1c4:	08 95       	ret

000001c6 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1c6:	ae e1       	ldi	r26, 0x1E	; 30
     1c8:	b3 e0       	ldi	r27, 0x03	; 3
     1ca:	e3 e1       	ldi	r30, 0x13	; 19
     1cc:	f2 e0       	ldi	r31, 0x02	; 2
     1ce:	86 e0       	ldi	r24, 0x06	; 6
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <init_ports_m1284P+0xa>
     1d8:	ab e1       	ldi	r26, 0x1B	; 27
     1da:	b3 e0       	ldi	r27, 0x03	; 3
     1dc:	e0 e1       	ldi	r30, 0x10	; 16
     1de:	f2 e0       	ldi	r31, 0x02	; 2
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <init_ports_m1284P+0x1c>
     1ea:	a3 e9       	ldi	r26, 0x93	; 147
     1ec:	b3 e0       	ldi	r27, 0x03	; 3
     1ee:	ed e0       	ldi	r30, 0x0D	; 13
     1f0:	f2 e0       	ldi	r31, 0x02	; 2
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	01 90       	ld	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	81 50       	subi	r24, 0x01	; 1
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <init_ports_m1284P+0x2e>
     1fc:	a0 ef       	ldi	r26, 0xF0	; 240
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	ea e0       	ldi	r30, 0x0A	; 10
     202:	f2 e0       	ldi	r31, 0x02	; 2
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	01 90       	ld	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	81 50       	subi	r24, 0x01	; 1
     20c:	e1 f7       	brne	.-8      	; 0x206 <init_ports_m1284P+0x40>
     20e:	a6 e0       	ldi	r26, 0x06	; 6
     210:	b3 e0       	ldi	r27, 0x03	; 3
     212:	e7 e0       	ldi	r30, 0x07	; 7
     214:	f2 e0       	ldi	r31, 0x02	; 2
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	01 90       	ld	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	81 50       	subi	r24, 0x01	; 1
     21e:	e1 f7       	brne	.-8      	; 0x218 <init_ports_m1284P+0x52>
     220:	a7 e7       	ldi	r26, 0x77	; 119
     222:	b2 e0       	ldi	r27, 0x02	; 2
     224:	e4 e0       	ldi	r30, 0x04	; 4
     226:	f2 e0       	ldi	r31, 0x02	; 2
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	01 90       	ld	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	81 50       	subi	r24, 0x01	; 1
     230:	e1 f7       	brne	.-8      	; 0x22a <init_ports_m1284P+0x64>
     232:	a8 ee       	ldi	r26, 0xE8	; 232
     234:	b2 e0       	ldi	r27, 0x02	; 2
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	f2 e0       	ldi	r31, 0x02	; 2
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	01 90       	ld	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	81 50       	subi	r24, 0x01	; 1
     242:	e1 f7       	brne	.-8      	; 0x23c <init_ports_m1284P+0x76>
     244:	a1 e7       	ldi	r26, 0x71	; 113
     246:	b3 e0       	ldi	r27, 0x03	; 3
     248:	ee ef       	ldi	r30, 0xFE	; 254
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	81 50       	subi	r24, 0x01	; 1
     254:	e1 f7       	brne	.-8      	; 0x24e <init_ports_m1284P+0x88>
     256:	a9 e2       	ldi	r26, 0x29	; 41
     258:	b3 e0       	ldi	r27, 0x03	; 3
     25a:	eb ef       	ldi	r30, 0xFB	; 251
     25c:	f1 e0       	ldi	r31, 0x01	; 1
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	81 50       	subi	r24, 0x01	; 1
     266:	e1 f7       	brne	.-8      	; 0x260 <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     268:	a9 e9       	ldi	r26, 0x99	; 153
     26a:	b3 e0       	ldi	r27, 0x03	; 3
     26c:	e5 ef       	ldi	r30, 0xF5	; 245
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	86 e0       	ldi	r24, 0x06	; 6
     272:	01 90       	ld	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	81 50       	subi	r24, 0x01	; 1
     278:	e1 f7       	brne	.-8      	; 0x272 <init_ports_m1284P+0xac>
     27a:	af e0       	ldi	r26, 0x0F	; 15
     27c:	b3 e0       	ldi	r27, 0x03	; 3
     27e:	e2 ef       	ldi	r30, 0xF2	; 242
     280:	f1 e0       	ldi	r31, 0x01	; 1
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	01 90       	ld	r0, Z+
     286:	0d 92       	st	X+, r0
     288:	81 50       	subi	r24, 0x01	; 1
     28a:	e1 f7       	brne	.-8      	; 0x284 <init_ports_m1284P+0xbe>
     28c:	a6 e9       	ldi	r26, 0x96	; 150
     28e:	b3 e0       	ldi	r27, 0x03	; 3
     290:	ef ee       	ldi	r30, 0xEF	; 239
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	01 90       	ld	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	e1 f7       	brne	.-8      	; 0x296 <init_ports_m1284P+0xd0>
     29e:	a1 e5       	ldi	r26, 0x51	; 81
     2a0:	b2 e0       	ldi	r27, 0x02	; 2
     2a2:	ec ee       	ldi	r30, 0xEC	; 236
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	83 e0       	ldi	r24, 0x03	; 3
     2a8:	01 90       	ld	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	81 50       	subi	r24, 0x01	; 1
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <init_ports_m1284P+0xe2>
     2b0:	a4 e2       	ldi	r26, 0x24	; 36
     2b2:	b3 e0       	ldi	r27, 0x03	; 3
     2b4:	e9 ee       	ldi	r30, 0xE9	; 233
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <init_ports_m1284P+0xf4>
     2c2:	ae e3       	ldi	r26, 0x3E	; 62
     2c4:	b3 e0       	ldi	r27, 0x03	; 3
     2c6:	e6 ee       	ldi	r30, 0xE6	; 230
     2c8:	f1 e0       	ldi	r31, 0x01	; 1
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <init_ports_m1284P+0x106>
     2d4:	a5 ed       	ldi	r26, 0xD5	; 213
     2d6:	b2 e0       	ldi	r27, 0x02	; 2
     2d8:	e3 ee       	ldi	r30, 0xE3	; 227
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	01 90       	ld	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	81 50       	subi	r24, 0x01	; 1
     2e4:	e1 f7       	brne	.-8      	; 0x2de <init_ports_m1284P+0x118>
     2e6:	a4 e5       	ldi	r26, 0x54	; 84
     2e8:	b2 e0       	ldi	r27, 0x02	; 2
     2ea:	e0 ee       	ldi	r30, 0xE0	; 224
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	83 e0       	ldi	r24, 0x03	; 3
     2f0:	01 90       	ld	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	81 50       	subi	r24, 0x01	; 1
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <init_ports_m1284P+0x12a>
     2f8:	a2 ed       	ldi	r26, 0xD2	; 210
     2fa:	b2 e0       	ldi	r27, 0x02	; 2
     2fc:	ed ed       	ldi	r30, 0xDD	; 221
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	01 90       	ld	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	81 50       	subi	r24, 0x01	; 1
     308:	e1 f7       	brne	.-8      	; 0x302 <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     30a:	a2 e1       	ldi	r26, 0x12	; 18
     30c:	b3 e0       	ldi	r27, 0x03	; 3
     30e:	e7 ed       	ldi	r30, 0xD7	; 215
     310:	f1 e0       	ldi	r31, 0x01	; 1
     312:	86 e0       	ldi	r24, 0x06	; 6
     314:	01 90       	ld	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	81 50       	subi	r24, 0x01	; 1
     31a:	e1 f7       	brne	.-8      	; 0x314 <init_ports_m1284P+0x14e>
     31c:	ae e4       	ldi	r26, 0x4E	; 78
     31e:	b3 e0       	ldi	r27, 0x03	; 3
     320:	e4 ed       	ldi	r30, 0xD4	; 212
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	01 90       	ld	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	81 50       	subi	r24, 0x01	; 1
     32c:	e1 f7       	brne	.-8      	; 0x326 <init_ports_m1284P+0x160>
     32e:	ac e0       	ldi	r26, 0x0C	; 12
     330:	b3 e0       	ldi	r27, 0x03	; 3
     332:	e1 ed       	ldi	r30, 0xD1	; 209
     334:	f1 e0       	ldi	r31, 0x01	; 1
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	01 90       	ld	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	81 50       	subi	r24, 0x01	; 1
     33e:	e1 f7       	brne	.-8      	; 0x338 <init_ports_m1284P+0x172>
     340:	a6 e4       	ldi	r26, 0x46	; 70
     342:	b3 e0       	ldi	r27, 0x03	; 3
     344:	ee ec       	ldi	r30, 0xCE	; 206
     346:	f1 e0       	ldi	r31, 0x01	; 1
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	e1 f7       	brne	.-8      	; 0x34a <init_ports_m1284P+0x184>
     352:	a8 ec       	ldi	r26, 0xC8	; 200
     354:	b2 e0       	ldi	r27, 0x02	; 2
     356:	eb ec       	ldi	r30, 0xCB	; 203
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	01 90       	ld	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	81 50       	subi	r24, 0x01	; 1
     362:	e1 f7       	brne	.-8      	; 0x35c <init_ports_m1284P+0x196>
     364:	a4 e7       	ldi	r26, 0x74	; 116
     366:	b2 e0       	ldi	r27, 0x02	; 2
     368:	e8 ec       	ldi	r30, 0xC8	; 200
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	01 90       	ld	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	81 50       	subi	r24, 0x01	; 1
     374:	e1 f7       	brne	.-8      	; 0x36e <init_ports_m1284P+0x1a8>
     376:	a9 e0       	ldi	r26, 0x09	; 9
     378:	b3 e0       	ldi	r27, 0x03	; 3
     37a:	e5 ec       	ldi	r30, 0xC5	; 197
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	01 90       	ld	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	81 50       	subi	r24, 0x01	; 1
     386:	e1 f7       	brne	.-8      	; 0x380 <init_ports_m1284P+0x1ba>
     388:	ab ef       	ldi	r26, 0xFB	; 251
     38a:	b2 e0       	ldi	r27, 0x02	; 2
     38c:	e2 ec       	ldi	r30, 0xC2	; 194
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	01 90       	ld	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	81 50       	subi	r24, 0x01	; 1
     398:	e1 f7       	brne	.-8      	; 0x392 <init_ports_m1284P+0x1cc>
     39a:	a7 e4       	ldi	r26, 0x47	; 71
     39c:	b2 e0       	ldi	r27, 0x02	; 2
     39e:	ef eb       	ldi	r30, 0xBF	; 191
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	83 e0       	ldi	r24, 0x03	; 3
     3a4:	01 90       	ld	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	81 50       	subi	r24, 0x01	; 1
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     3ac:	a0 ee       	ldi	r26, 0xE0	; 224
     3ae:	b2 e0       	ldi	r27, 0x02	; 2
     3b0:	e9 eb       	ldi	r30, 0xB9	; 185
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	01 90       	ld	r0, Z+
     3b8:	0d 92       	st	X+, r0
     3ba:	81 50       	subi	r24, 0x01	; 1
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <init_ports_m1284P+0x1f0>
     3be:	a5 e6       	ldi	r26, 0x65	; 101
     3c0:	b2 e0       	ldi	r27, 0x02	; 2
     3c2:	e6 eb       	ldi	r30, 0xB6	; 182
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	83 e0       	ldi	r24, 0x03	; 3
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <init_ports_m1284P+0x202>
     3d0:	ad e7       	ldi	r26, 0x7D	; 125
     3d2:	b2 e0       	ldi	r27, 0x02	; 2
     3d4:	e3 eb       	ldi	r30, 0xB3	; 179
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	01 90       	ld	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	81 50       	subi	r24, 0x01	; 1
     3e0:	e1 f7       	brne	.-8      	; 0x3da <init_ports_m1284P+0x214>
     3e2:	a2 e6       	ldi	r26, 0x62	; 98
     3e4:	b2 e0       	ldi	r27, 0x02	; 2
     3e6:	e0 eb       	ldi	r30, 0xB0	; 176
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <init_ports_m1284P+0x226>
     3f4:	a3 ef       	ldi	r26, 0xF3	; 243
     3f6:	b2 e0       	ldi	r27, 0x02	; 2
     3f8:	ed ea       	ldi	r30, 0xAD	; 173
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	01 90       	ld	r0, Z+
     400:	0d 92       	st	X+, r0
     402:	81 50       	subi	r24, 0x01	; 1
     404:	e1 f7       	brne	.-8      	; 0x3fe <init_ports_m1284P+0x238>
     406:	a6 e6       	ldi	r26, 0x66	; 102
     408:	b3 e0       	ldi	r27, 0x03	; 3
     40a:	ea ea       	ldi	r30, 0xAA	; 170
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	01 90       	ld	r0, Z+
     412:	0d 92       	st	X+, r0
     414:	81 50       	subi	r24, 0x01	; 1
     416:	e1 f7       	brne	.-8      	; 0x410 <init_ports_m1284P+0x24a>
     418:	a9 e4       	ldi	r26, 0x49	; 73
     41a:	b3 e0       	ldi	r27, 0x03	; 3
     41c:	e7 ea       	ldi	r30, 0xA7	; 167
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	81 50       	subi	r24, 0x01	; 1
     428:	e1 f7       	brne	.-8      	; 0x422 <init_ports_m1284P+0x25c>
     42a:	a0 e9       	ldi	r26, 0x90	; 144
     42c:	b3 e0       	ldi	r27, 0x03	; 3
     42e:	e4 ea       	ldi	r30, 0xA4	; 164
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	e1 f7       	brne	.-8      	; 0x434 <init_ports_m1284P+0x26e>
     43c:	a1 e5       	ldi	r26, 0x51	; 81
     43e:	b3 e0       	ldi	r27, 0x03	; 3
     440:	e1 ea       	ldi	r30, 0xA1	; 161
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	01 90       	ld	r0, Z+
     448:	0d 92       	st	X+, r0
     44a:	81 50       	subi	r24, 0x01	; 1
     44c:	e1 f7       	brne	.-8      	; 0x446 <init_ports_m1284P+0x280>
}
     44e:	08 95       	ret

00000450 <init_nibobee_leds>:
PLed rightLedsArray[] = { &RightYellow, &RightRed };
PLed leftLedsArray[] = { &LeftYellow, &LeftRed };
PLed allLedsArray[] = { &LeftYellow, &LeftRed, &RightYellow, &RightRed };

void init_nibobee_leds() {
	INIT_LED(LeftYellow, PinB0)
     450:	8f e0       	ldi	r24, 0x0F	; 15
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	90 93 3d 02 	sts	0x023D, r25
     458:	80 93 3c 02 	sts	0x023C, r24

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     45c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
	INIT_LED(LeftRed, PinB1)
     460:	86 e9       	ldi	r24, 0x96	; 150
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	90 93 3b 02 	sts	0x023B, r25
     468:	80 93 3a 02 	sts	0x023A, r24
     46c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
	INIT_LED(RightRed, PinB2)
     470:	81 e5       	ldi	r24, 0x51	; 81
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	90 93 e7 02 	sts	0x02E7, r25
     478:	80 93 e6 02 	sts	0x02E6, r24
     47c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
	INIT_LED(RightYellow, PinB3)
     480:	84 e2       	ldi	r24, 0x24	; 36
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	90 93 55 03 	sts	0x0355, r25
     488:	80 93 54 03 	sts	0x0354, r24
     48c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 2)
     490:	aa e7       	ldi	r26, 0x7A	; 122
     492:	b2 e0       	ldi	r27, 0x02	; 2
     494:	ee e9       	ldi	r30, 0x9E	; 158
     496:	f1 e0       	ldi	r31, 0x01	; 1
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	01 90       	ld	r0, Z+
     49c:	0d 92       	st	X+, r0
     49e:	81 50       	subi	r24, 0x01	; 1
     4a0:	e1 f7       	brne	.-8      	; 0x49a <init_nibobee_leds+0x4a>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     4a2:	af e5       	ldi	r26, 0x5F	; 95
     4a4:	b2 e0       	ldi	r27, 0x02	; 2
     4a6:	eb e9       	ldi	r30, 0x9B	; 155
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	01 90       	ld	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <init_nibobee_leds+0x5c>
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
     4b4:	a1 e7       	ldi	r26, 0x71	; 113
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	e8 e9       	ldi	r30, 0x98	; 152
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	e1 f7       	brne	.-8      	; 0x4be <init_nibobee_leds+0x6e>
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
     4c6:	ab e3       	ldi	r26, 0x3B	; 59
     4c8:	b3 e0       	ldi	r27, 0x03	; 3
     4ca:	e5 e9       	ldi	r30, 0x95	; 149
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <init_nibobee_leds+0x80>
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
     4d8:	a8 e1       	ldi	r26, 0x18	; 24
     4da:	b3 e0       	ldi	r27, 0x03	; 3
     4dc:	e2 e9       	ldi	r30, 0x92	; 146
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	01 90       	ld	r0, Z+
     4e4:	0d 92       	st	X+, r0
     4e6:	81 50       	subi	r24, 0x01	; 1
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <init_nibobee_leds+0x92>
}
     4ea:	08 95       	ret

000004ec <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	9a 81       	ldd	r25, Y+2	; 0x02
     4f6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     4fa:	88 81       	ld	r24, Y
     4fc:	82 ff       	sbrs	r24, 2
     4fe:	04 c0       	rjmp	.+8      	; 0x508 <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	0e 94 00 0a 	call	0x1400	; 0x1400 <setPinOne>
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ec 01       	movw	r28, r24
	initButton(button->button);
     514:	88 81       	ld	r24, Y
     516:	99 81       	ldd	r25, Y+1	; 0x01
     518:	0e 94 76 02 	call	0x4ec	; 0x4ec <initButton>
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <enablePinChangeInterrupt>
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <init_nibobee_buttons>:
#include <kernel/kernel_init.h>
#include <kernel/devices/button.kernel.h>
#include "nibobee_button.h"

void init_nibobee_buttons() {
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     528:	ab e6       	ldi	r26, 0x6B	; 107
     52a:	b2 e0       	ldi	r27, 0x02	; 2
     52c:	ef e8       	ldi	r30, 0x8F	; 143
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	01 90       	ld	r0, Z+
     534:	0d 92       	st	X+, r0
     536:	81 50       	subi	r24, 0x01	; 1
     538:	e1 f7       	brne	.-8      	; 0x532 <init_nibobee_buttons+0xa>
     53a:	8b e6       	ldi	r24, 0x6B	; 107
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 76 02 	call	0x4ec	; 0x4ec <initButton>
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     542:	a8 e6       	ldi	r26, 0x68	; 104
     544:	b2 e0       	ldi	r27, 0x02	; 2
     546:	ec e8       	ldi	r30, 0x8C	; 140
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	01 90       	ld	r0, Z+
     54e:	0d 92       	st	X+, r0
     550:	81 50       	subi	r24, 0x01	; 1
     552:	e1 f7       	brne	.-8      	; 0x54c <init_nibobee_buttons+0x24>
     554:	88 e6       	ldi	r24, 0x68	; 104
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	0e 94 76 02 	call	0x4ec	; 0x4ec <initButton>
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     55c:	ae e6       	ldi	r26, 0x6E	; 110
     55e:	b2 e0       	ldi	r27, 0x02	; 2
     560:	e9 e8       	ldi	r30, 0x89	; 137
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	81 50       	subi	r24, 0x01	; 1
     56c:	e1 f7       	brne	.-8      	; 0x566 <init_nibobee_buttons+0x3e>
     56e:	8e e6       	ldi	r24, 0x6E	; 110
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	0e 94 76 02 	call	0x4ec	; 0x4ec <initButton>
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     576:	a8 ef       	ldi	r26, 0xF8	; 248
     578:	b2 e0       	ldi	r27, 0x02	; 2
     57a:	e6 e8       	ldi	r30, 0x86	; 134
     57c:	f1 e0       	ldi	r31, 0x01	; 1
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	01 90       	ld	r0, Z+
     582:	0d 92       	st	X+, r0
     584:	81 50       	subi	r24, 0x01	; 1
     586:	e1 f7       	brne	.-8      	; 0x580 <init_nibobee_buttons+0x58>
     588:	88 ef       	ldi	r24, 0xF8	; 248
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 76 02 	call	0x4ec	; 0x4ec <initButton>
}
     590:	08 95       	ret

00000592 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     592:	ab ec       	ldi	r26, 0xCB	; 203
     594:	b2 e0       	ldi	r27, 0x02	; 2
     596:	ef e7       	ldi	r30, 0x7F	; 127
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	87 e0       	ldi	r24, 0x07	; 7
     59c:	01 90       	ld	r0, Z+
     59e:	0d 92       	st	X+, r0
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	e1 f7       	brne	.-8      	; 0x59c <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     5a4:	a4 e7       	ldi	r26, 0x74	; 116
     5a6:	b3 e0       	ldi	r27, 0x03	; 3
     5a8:	e8 e7       	ldi	r30, 0x78	; 120
     5aa:	f1 e0       	ldi	r31, 0x01	; 1
     5ac:	87 e0       	ldi	r24, 0x07	; 7
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     5b6:	a2 e3       	ldi	r26, 0x32	; 50
     5b8:	b3 e0       	ldi	r27, 0x03	; 3
     5ba:	e1 e7       	ldi	r30, 0x71	; 113
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	87 e0       	ldi	r24, 0x07	; 7
     5c0:	01 90       	ld	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     5c8:	aa e4       	ldi	r26, 0x4A	; 74
     5ca:	b2 e0       	ldi	r27, 0x02	; 2
     5cc:	ea e6       	ldi	r30, 0x6A	; 106
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	01 90       	ld	r0, Z+
     5d4:	0d 92       	st	X+, r0
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     5da:	ae ef       	ldi	r26, 0xFE	; 254
     5dc:	b2 e0       	ldi	r27, 0x02	; 2
     5de:	e2 e6       	ldi	r30, 0x62	; 98
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	01 90       	ld	r0, Z+
     5e6:	0d 92       	st	X+, r0
     5e8:	81 50       	subi	r24, 0x01	; 1
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     5ec:	a9 e6       	ldi	r26, 0x69	; 105
     5ee:	b3 e0       	ldi	r27, 0x03	; 3
     5f0:	ea e5       	ldi	r30, 0x5A	; 90
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	88 e0       	ldi	r24, 0x08	; 8
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     5fe:	a7 e5       	ldi	r26, 0x57	; 87
     600:	b2 e0       	ldi	r27, 0x02	; 2
     602:	e2 e5       	ldi	r30, 0x52	; 82
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	e1 f7       	brne	.-8      	; 0x608 <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     610:	ae e5       	ldi	r26, 0x5E	; 94
     612:	b3 e0       	ldi	r27, 0x03	; 3
     614:	ea e4       	ldi	r30, 0x4A	; 74
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	88 e0       	ldi	r24, 0x08	; 8
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	81 50       	subi	r24, 0x01	; 1
     620:	e1 f7       	brne	.-8      	; 0x61a <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     622:	a8 ed       	ldi	r26, 0xD8	; 216
     624:	b2 e0       	ldi	r27, 0x02	; 2
     626:	e2 e4       	ldi	r30, 0x42	; 66
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	88 e0       	ldi	r24, 0x08	; 8
     62c:	01 90       	ld	r0, Z+
     62e:	0d 92       	st	X+, r0
     630:	81 50       	subi	r24, 0x01	; 1
     632:	e1 f7       	brne	.-8      	; 0x62c <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     634:	a6 e5       	ldi	r26, 0x56	; 86
     636:	b3 e0       	ldi	r27, 0x03	; 3
     638:	ea e3       	ldi	r30, 0x3A	; 58
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	88 e0       	ldi	r24, 0x08	; 8
     63e:	01 90       	ld	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	81 50       	subi	r24, 0x01	; 1
     644:	e1 f7       	brne	.-8      	; 0x63e <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     646:	a0 e8       	ldi	r26, 0x80	; 128
     648:	b2 e0       	ldi	r27, 0x02	; 2
     64a:	e2 e3       	ldi	r30, 0x32	; 50
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	81 50       	subi	r24, 0x01	; 1
     656:	e1 f7       	brne	.-8      	; 0x650 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     658:	ae e3       	ldi	r26, 0x3E	; 62
     65a:	b2 e0       	ldi	r27, 0x02	; 2
     65c:	ea e2       	ldi	r30, 0x2A	; 42
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	88 e0       	ldi	r24, 0x08	; 8
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	81 50       	subi	r24, 0x01	; 1
     668:	e1 f7       	brne	.-8      	; 0x662 <init_timer_m1284P+0xd0>
}
     66a:	08 95       	ret

0000066c <initMotor>:

#include "../kernel_init.h"
#include "motor.h"

// This must be called from another init-routine, after the motors have been initialized.
void initMotor(PMotor motor) {
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ec 01       	movw	r28, r24
	setTimerCompareValue(motor->pwmTimer, 0);
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	9c 81       	ldd	r25, Y+4	; 0x04
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	0e 94 96 0b 	call	0x172c	; 0x172c <setTimerCompareValue>
	setPinOutput(motor->direction);
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	9a 81       	ldd	r25, Y+2	; 0x02
     682:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
}
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     696:	7e 01       	movw	r14, r28
     698:	9f 2d       	mov	r25, r15
     69a:	0e 94 36 03 	call	0x66c	; 0x66c <initMotor>
	setPinOutput(motor->direction2);
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	9e 81       	ldd	r25, Y+6	; 0x06
     6a2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
	stopMotor((PMotor) motor); // For the sake of setting both direction pins to zero. Not necessary for 1-pin-motors.
     6a6:	ce 01       	movw	r24, r28
     6a8:	0e 94 ef 08 	call	0x11de	; 0x11de <stopMotor>
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <init_nibobee_motors>:
#include <kernel/devices/timer_m1284P.kernel.h>
#include <kernel/devices/motor.kernel.h>
#include "nibobee_motor.h"

void init_nibobee_motors() {
	INIT_MOTOR(LeftMotor, MOTOR_NORMAL, PinD6, Timer1A)
     6b6:	ab ee       	ldi	r26, 0xEB	; 235
     6b8:	b2 e0       	ldi	r27, 0x02	; 2
     6ba:	e5 e2       	ldi	r30, 0x25	; 37
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	85 e0       	ldi	r24, 0x05	; 5
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <init_nibobee_motors+0xa>
     6c8:	8b ee       	ldi	r24, 0xEB	; 235
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 36 03 	call	0x66c	; 0x66c <initMotor>
	INIT_MOTOR(RightMotor, MOTOR_NORMAL, PinD7, Timer1B)
     6d0:	a1 e4       	ldi	r26, 0x41	; 65
     6d2:	b3 e0       	ldi	r27, 0x03	; 3
     6d4:	e0 e2       	ldi	r30, 0x20	; 32
     6d6:	f1 e0       	ldi	r31, 0x01	; 1
     6d8:	85 e0       	ldi	r24, 0x05	; 5
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	81 50       	subi	r24, 0x01	; 1
     6e0:	e1 f7       	brne	.-8      	; 0x6da <init_nibobee_motors+0x24>
     6e2:	81 e4       	ldi	r24, 0x41	; 65
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	0e 94 36 03 	call	0x66c	; 0x66c <initMotor>
}
     6ea:	08 95       	ret

000006ec <twi_unexpectedCondition>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() { }
     6ec:	08 95       	ret

000006ee <init_twi>:
TWIError error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     6ee:	85 e0       	ldi	r24, 0x05	; 5
     6f0:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     6fa:	81 e1       	ldi	r24, 0x11	; 17
     6fc:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     700:	10 92 b9 00 	sts	0x00B9, r1
	// TODO uncovered: TWAMR (slave address mask register)
	#ifdef TWI_Slave
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	80 93 ba 00 	sts	0x00BA, r24
	#endif
}
     70a:	08 95       	ret

0000070c <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     70c:	df 93       	push	r29
     70e:	cf 93       	push	r28
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	27 97       	sbiw	r28, 0x07	; 7
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
     720:	ae 01       	movw	r20, r28
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	80 91 27 03 	lds	r24, 0x0327
     72a:	90 91 28 03 	lds	r25, 0x0328
     72e:	fc 01       	movw	r30, r24
     730:	33 e0       	ldi	r19, 0x03	; 3
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	3a 95       	dec	r19
     738:	e1 f7       	brne	.-8      	; 0x732 <next_twi_operation+0x26>
     73a:	e8 1b       	sub	r30, r24
     73c:	f9 0b       	sbc	r31, r25
     73e:	da 01       	movw	r26, r20
     740:	e5 58       	subi	r30, 0x85	; 133
     742:	fc 4f       	sbci	r31, 0xFC	; 252
     744:	27 e0       	ldi	r18, 0x07	; 7
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	e1 f7       	brne	.-8      	; 0x746 <next_twi_operation+0x3a>
     74e:	fc 01       	movw	r30, r24
     750:	23 e0       	ldi	r18, 0x03	; 3
     752:	ee 0f       	add	r30, r30
     754:	ff 1f       	adc	r31, r31
     756:	2a 95       	dec	r18
     758:	e1 f7       	brne	.-8      	; 0x752 <next_twi_operation+0x46>
     75a:	e8 1b       	sub	r30, r24
     75c:	f9 0b       	sbc	r31, r25
     75e:	e5 58       	subi	r30, 0x85	; 133
     760:	fc 4f       	sbci	r31, 0xFC	; 252
     762:	64 81       	ldd	r22, Z+4	; 0x04
     764:	25 81       	ldd	r18, Z+5	; 0x05
     766:	36 81       	ldd	r19, Z+6	; 0x06
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	90 93 28 03 	sts	0x0328, r25
     76e:	80 93 27 03 	sts	0x0327, r24
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
     772:	83 30       	cpi	r24, 0x03	; 3
     774:	91 05       	cpc	r25, r1
     776:	ec f4       	brge	.+58     	; 0x7b2 <next_twi_operation+0xa6>
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	a1 f2       	breq	.-88     	; 0x726 <next_twi_operation+0x1a>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	if (current.operationMode == TWI_Send) {
     77e:	22 30       	cpi	r18, 0x02	; 2
     780:	31 05       	cpc	r19, r1
     782:	21 f4       	brne	.+8      	; 0x78c <next_twi_operation+0x80>
		twi_address.address = current.device.address & ~_BV(TW_READ);
     784:	86 2f       	mov	r24, r22
     786:	8d 7f       	andi	r24, 0xFD	; 253
     788:	80 93 46 02 	sts	0x0246, r24
	} else if (current.operationMode == TWI_Send) {
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
     78c:	10 92 f7 02 	sts	0x02F7, r1
     790:	10 92 f6 02 	sts	0x02F6, r1
	twi_buffer = current.buffer;
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02
     798:	ab 81       	ldd	r26, Y+3	; 0x03
     79a:	bc 81       	ldd	r27, Y+4	; 0x04
     79c:	80 93 2c 03 	sts	0x032C, r24
     7a0:	90 93 2d 03 	sts	0x032D, r25
     7a4:	a0 93 2e 03 	sts	0x032E, r26
     7a8:	b0 93 2f 03 	sts	0x032F, r27
	return TRUE;
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <next_twi_operation+0xaa>
BOOL next_twi_operation() {
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     7b6:	c9 01       	movw	r24, r18
     7b8:	27 96       	adiw	r28, 0x07	; 7
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	cf 91       	pop	r28
     7c6:	df 91       	pop	r29
     7c8:	08 95       	ret

000007ca <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (nextTwiOperation >= NUM_TWI_OPERATIONS || !next_twi_operation()) {
     7ca:	80 91 27 03 	lds	r24, 0x0327
     7ce:	90 91 28 03 	lds	r25, 0x0328
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	91 05       	cpc	r25, r1
     7d6:	24 f4       	brge	.+8      	; 0x7e0 <twi_stop_or_next+0x16>
     7d8:	0e 94 86 03 	call	0x70c	; 0x70c <next_twi_operation>
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	11 f4       	brne	.+4      	; 0x7e4 <twi_stop_or_next+0x1a>
		twi_stop();
     7e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
     7e4:	08 95       	ret

000007e6 <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	error = TWI_No_Error;
     7e6:	10 92 3a 03 	sts	0x033A, r1
     7ea:	10 92 39 03 	sts	0x0339, r1
	twi_running = TRUE;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 31 03 	sts	0x0331, r25
     7f6:	80 93 30 03 	sts	0x0330, r24
	nextTwiOperation = 0;
     7fa:	10 92 28 03 	sts	0x0328, r1
     7fe:	10 92 27 03 	sts	0x0327, r1
	next_twi_operation();
     802:	0e 94 86 03 	call	0x70c	; 0x70c <next_twi_operation>
}
     806:	08 95       	ret

00000808 <__vector_26>:
	} else {
		twi_continue();
	}
}

ISR(TWI_vect) {
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	0b b6       	in	r0, 0x3b	; 59
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	2f 93       	push	r18
     818:	3f 93       	push	r19
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
	switch(TW_STATUS) {
     82e:	80 91 b9 00 	lds	r24, 0x00B9
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	88 7f       	andi	r24, 0xF8	; 248
     836:	90 70       	andi	r25, 0x00	; 0
     838:	88 36       	cpi	r24, 0x68	; 104
     83a:	91 05       	cpc	r25, r1
     83c:	09 f4       	brne	.+2      	; 0x840 <__vector_26+0x38>
     83e:	f5 c0       	rjmp	.+490    	; 0xa2a <__vector_26+0x222>
     840:	89 36       	cpi	r24, 0x69	; 105
     842:	91 05       	cpc	r25, r1
     844:	ec f5       	brge	.+122    	; 0x8c0 <__vector_26+0xb8>
     846:	80 33       	cpi	r24, 0x30	; 48
     848:	91 05       	cpc	r25, r1
     84a:	09 f4       	brne	.+2      	; 0x84e <__vector_26+0x46>
     84c:	9b c0       	rjmp	.+310    	; 0x984 <__vector_26+0x17c>
     84e:	81 33       	cpi	r24, 0x31	; 49
     850:	91 05       	cpc	r25, r1
     852:	cc f4       	brge	.+50     	; 0x886 <__vector_26+0x7e>
     854:	88 31       	cpi	r24, 0x18	; 24
     856:	91 05       	cpc	r25, r1
     858:	09 f4       	brne	.+2      	; 0x85c <__vector_26+0x54>
     85a:	77 c0       	rjmp	.+238    	; 0x94a <__vector_26+0x142>
     85c:	89 31       	cpi	r24, 0x19	; 25
     85e:	91 05       	cpc	r25, r1
     860:	4c f4       	brge	.+18     	; 0x874 <__vector_26+0x6c>
     862:	88 30       	cpi	r24, 0x08	; 8
     864:	91 05       	cpc	r25, r1
     866:	09 f4       	brne	.+2      	; 0x86a <__vector_26+0x62>
     868:	68 c0       	rjmp	.+208    	; 0x93a <__vector_26+0x132>
     86a:	80 31       	cpi	r24, 0x10	; 16
     86c:	91 05       	cpc	r25, r1
     86e:	09 f0       	breq	.+2      	; 0x872 <__vector_26+0x6a>
     870:	eb c0       	rjmp	.+470    	; 0xa48 <__vector_26+0x240>
     872:	63 c0       	rjmp	.+198    	; 0x93a <__vector_26+0x132>
     874:	80 32       	cpi	r24, 0x20	; 32
     876:	91 05       	cpc	r25, r1
     878:	09 f4       	brne	.+2      	; 0x87c <__vector_26+0x74>
     87a:	8d c0       	rjmp	.+282    	; 0x996 <__vector_26+0x18e>
     87c:	88 32       	cpi	r24, 0x28	; 40
     87e:	91 05       	cpc	r25, r1
     880:	09 f0       	breq	.+2      	; 0x884 <__vector_26+0x7c>
     882:	e2 c0       	rjmp	.+452    	; 0xa48 <__vector_26+0x240>
     884:	62 c0       	rjmp	.+196    	; 0x94a <__vector_26+0x142>
     886:	88 34       	cpi	r24, 0x48	; 72
     888:	91 05       	cpc	r25, r1
     88a:	09 f4       	brne	.+2      	; 0x88e <__vector_26+0x86>
     88c:	84 c0       	rjmp	.+264    	; 0x996 <__vector_26+0x18e>
     88e:	89 34       	cpi	r24, 0x49	; 73
     890:	91 05       	cpc	r25, r1
     892:	4c f4       	brge	.+18     	; 0x8a6 <__vector_26+0x9e>
     894:	88 33       	cpi	r24, 0x38	; 56
     896:	91 05       	cpc	r25, r1
     898:	09 f4       	brne	.+2      	; 0x89c <__vector_26+0x94>
     89a:	54 c0       	rjmp	.+168    	; 0x944 <__vector_26+0x13c>
     89c:	80 34       	cpi	r24, 0x40	; 64
     89e:	91 05       	cpc	r25, r1
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <__vector_26+0x9c>
     8a2:	d2 c0       	rjmp	.+420    	; 0xa48 <__vector_26+0x240>
     8a4:	c2 c0       	rjmp	.+388    	; 0xa2a <__vector_26+0x222>
     8a6:	88 35       	cpi	r24, 0x58	; 88
     8a8:	91 05       	cpc	r25, r1
     8aa:	09 f4       	brne	.+2      	; 0x8ae <__vector_26+0xa6>
     8ac:	77 c0       	rjmp	.+238    	; 0x99c <__vector_26+0x194>
     8ae:	80 36       	cpi	r24, 0x60	; 96
     8b0:	91 05       	cpc	r25, r1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__vector_26+0xae>
     8b4:	ba c0       	rjmp	.+372    	; 0xa2a <__vector_26+0x222>
     8b6:	80 35       	cpi	r24, 0x50	; 80
     8b8:	91 05       	cpc	r25, r1
     8ba:	09 f0       	breq	.+2      	; 0x8be <__vector_26+0xb6>
     8bc:	c5 c0       	rjmp	.+394    	; 0xa48 <__vector_26+0x240>
     8be:	b8 c0       	rjmp	.+368    	; 0xa30 <__vector_26+0x228>
     8c0:	88 39       	cpi	r24, 0x98	; 152
     8c2:	91 05       	cpc	r25, r1
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__vector_26+0xc0>
     8c6:	bd c0       	rjmp	.+378    	; 0xa42 <__vector_26+0x23a>
     8c8:	89 39       	cpi	r24, 0x99	; 153
     8ca:	91 05       	cpc	r25, r1
     8cc:	cc f4       	brge	.+50     	; 0x900 <__vector_26+0xf8>
     8ce:	80 38       	cpi	r24, 0x80	; 128
     8d0:	91 05       	cpc	r25, r1
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <__vector_26+0xce>
     8d4:	ad c0       	rjmp	.+346    	; 0xa30 <__vector_26+0x228>
     8d6:	81 38       	cpi	r24, 0x81	; 129
     8d8:	91 05       	cpc	r25, r1
     8da:	4c f4       	brge	.+18     	; 0x8ee <__vector_26+0xe6>
     8dc:	80 37       	cpi	r24, 0x70	; 112
     8de:	91 05       	cpc	r25, r1
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <__vector_26+0xdc>
     8e2:	a3 c0       	rjmp	.+326    	; 0xa2a <__vector_26+0x222>
     8e4:	88 37       	cpi	r24, 0x78	; 120
     8e6:	91 05       	cpc	r25, r1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__vector_26+0xe4>
     8ea:	ae c0       	rjmp	.+348    	; 0xa48 <__vector_26+0x240>
     8ec:	9e c0       	rjmp	.+316    	; 0xa2a <__vector_26+0x222>
     8ee:	88 38       	cpi	r24, 0x88	; 136
     8f0:	91 05       	cpc	r25, r1
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <__vector_26+0xee>
     8f4:	a6 c0       	rjmp	.+332    	; 0xa42 <__vector_26+0x23a>
     8f6:	80 39       	cpi	r24, 0x90	; 144
     8f8:	91 05       	cpc	r25, r1
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__vector_26+0xf6>
     8fc:	a5 c0       	rjmp	.+330    	; 0xa48 <__vector_26+0x240>
     8fe:	98 c0       	rjmp	.+304    	; 0xa30 <__vector_26+0x228>
     900:	80 3b       	cpi	r24, 0xB0	; 176
     902:	91 05       	cpc	r25, r1
     904:	09 f4       	brne	.+2      	; 0x908 <__vector_26+0x100>
     906:	4d c0       	rjmp	.+154    	; 0x9a2 <__vector_26+0x19a>
     908:	81 3b       	cpi	r24, 0xB1	; 177
     90a:	91 05       	cpc	r25, r1
     90c:	4c f4       	brge	.+18     	; 0x920 <__vector_26+0x118>
     90e:	80 3a       	cpi	r24, 0xA0	; 160
     910:	91 05       	cpc	r25, r1
     912:	09 f4       	brne	.+2      	; 0x916 <__vector_26+0x10e>
     914:	90 c0       	rjmp	.+288    	; 0xa36 <__vector_26+0x22e>
     916:	88 3a       	cpi	r24, 0xA8	; 168
     918:	91 05       	cpc	r25, r1
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_26+0x116>
     91c:	95 c0       	rjmp	.+298    	; 0xa48 <__vector_26+0x240>
     91e:	41 c0       	rjmp	.+130    	; 0x9a2 <__vector_26+0x19a>
     920:	80 3c       	cpi	r24, 0xC0	; 192
     922:	91 05       	cpc	r25, r1
     924:	09 f4       	brne	.+2      	; 0x928 <__vector_26+0x120>
     926:	73 c0       	rjmp	.+230    	; 0xa0e <__vector_26+0x206>
     928:	88 3c       	cpi	r24, 0xC8	; 200
     92a:	91 05       	cpc	r25, r1
     92c:	09 f4       	brne	.+2      	; 0x930 <__vector_26+0x128>
     92e:	6c c0       	rjmp	.+216    	; 0xa08 <__vector_26+0x200>
     930:	88 3b       	cpi	r24, 0xB8	; 184
     932:	91 05       	cpc	r25, r1
     934:	09 f0       	breq	.+2      	; 0x938 <__vector_26+0x130>
     936:	88 c0       	rjmp	.+272    	; 0xa48 <__vector_26+0x240>
     938:	3c c0       	rjmp	.+120    	; 0x9b2 <__vector_26+0x1aa>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     93a:	80 91 46 02 	lds	r24, 0x0246
     93e:	80 93 bb 00 	sts	0x00BB, r24
     942:	1c c0       	rjmp	.+56     	; 0x97c <__vector_26+0x174>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			error = TWI_Arbitration_Lost;
     944:	85 e0       	ldi	r24, 0x05	; 5
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	78 c0       	rjmp	.+240    	; 0xa3a <__vector_26+0x232>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     94a:	80 91 f6 02 	lds	r24, 0x02F6
     94e:	90 91 f7 02 	lds	r25, 0x02F7
     952:	20 91 2e 03 	lds	r18, 0x032E
     956:	30 91 2f 03 	lds	r19, 0x032F
     95a:	82 17       	cp	r24, r18
     95c:	93 07       	cpc	r25, r19
     95e:	f0 f4       	brcc	.+60     	; 0x99c <__vector_26+0x194>
				twi_send(twi_buffer.data[alreadyHandled++]);
     960:	e0 91 2c 03 	lds	r30, 0x032C
     964:	f0 91 2d 03 	lds	r31, 0x032D
     968:	e8 0f       	add	r30, r24
     96a:	f9 1f       	adc	r31, r25
     96c:	20 81       	ld	r18, Z
     96e:	20 93 bb 00 	sts	0x00BB, r18
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	90 93 f7 02 	sts	0x02F7, r25
     978:	80 93 f6 02 	sts	0x02F6, r24
     97c:	85 e8       	ldi	r24, 0x85	; 133
     97e:	80 93 bc 00 	sts	0x00BC, r24
     982:	6a c0       	rjmp	.+212    	; 0xa58 <__vector_26+0x250>
		case TW_MT_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			error = TWI_Master_TooMuchDataTransmitted;
     984:	86 e0       	ldi	r24, 0x06	; 6
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	90 93 3a 03 	sts	0x033A, r25
     98c:	80 93 39 03 	sts	0x0339, r24
			twi_stop();
     990:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
			break;
     994:	61 c0       	rjmp	.+194    	; 0xa58 <__vector_26+0x250>
			break;
		case TW_MR_DATA_ACK:
			twi_receive_byte();
			break;
		case TW_MR_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	f6 cf       	rjmp	.-20     	; 0x988 <__vector_26+0x180>
			twi_stop();
			break;
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_stop_or_next();
     99c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <twi_stop_or_next>
			break;
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__vector_26+0x250>
#ifdef TWI_Slave
// Slave Transmitter
		case TW_ST_SLA_ACK:
		case TW_ST_ARB_LOST_SLA_ACK:
			twi_buffer = twi_handleMasterRequest();
     9a2:	10 92 2c 03 	sts	0x032C, r1
     9a6:	10 92 2d 03 	sts	0x032D, r1
     9aa:	10 92 2e 03 	sts	0x032E, r1
     9ae:	10 92 2f 03 	sts	0x032F, r1
		case TW_ST_DATA_ACK:
			if (alreadyHandled < twi_buffer.size - 1) {
     9b2:	80 91 f6 02 	lds	r24, 0x02F6
     9b6:	90 91 f7 02 	lds	r25, 0x02F7
     9ba:	20 91 2e 03 	lds	r18, 0x032E
     9be:	30 91 2f 03 	lds	r19, 0x032F
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	30 40       	sbci	r19, 0x00	; 0
     9c6:	60 91 2c 03 	lds	r22, 0x032C
     9ca:	70 91 2d 03 	lds	r23, 0x032D
     9ce:	ac 01       	movw	r20, r24
     9d0:	4f 5f       	subi	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	82 17       	cp	r24, r18
     9d6:	93 07       	cpc	r25, r19
     9d8:	60 f4       	brcc	.+24     	; 0x9f2 <__vector_26+0x1ea>
				// At least one more byte after this one.
				twi_send_ack(twi_buffer.data[alreadyHandled++]);
     9da:	86 0f       	add	r24, r22
     9dc:	97 1f       	adc	r25, r23
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	80 93 bb 00 	sts	0x00BB, r24
     9e6:	50 93 f7 02 	sts	0x02F7, r21
     9ea:	40 93 f6 02 	sts	0x02F6, r20
     9ee:	85 ec       	ldi	r24, 0xC5	; 197
     9f0:	c6 cf       	rjmp	.-116    	; 0x97e <__vector_26+0x176>
			} else {
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
     9f2:	86 0f       	add	r24, r22
     9f4:	97 1f       	adc	r25, r23
     9f6:	fc 01       	movw	r30, r24
     9f8:	80 81       	ld	r24, Z
     9fa:	80 93 bb 00 	sts	0x00BB, r24
     9fe:	50 93 f7 02 	sts	0x02F7, r21
     a02:	40 93 f6 02 	sts	0x02F6, r20
     a06:	ba cf       	rjmp	.-140    	; 0x97c <__vector_26+0x174>
			}				
			break;
		case TW_ST_LAST_DATA:
			error = TWI_Slave_NotEnoughDataTransmitted;
     a08:	87 e0       	ldi	r24, 0x07	; 7
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	16 c0       	rjmp	.+44     	; 0xa3a <__vector_26+0x232>
			twi_end();
			break;
		case TW_ST_DATA_NACK:
			if (alreadyHandled < twi_buffer.size) {
     a0e:	20 91 f6 02 	lds	r18, 0x02F6
     a12:	30 91 f7 02 	lds	r19, 0x02F7
     a16:	80 91 2e 03 	lds	r24, 0x032E
     a1a:	90 91 2f 03 	lds	r25, 0x032F
     a1e:	28 17       	cp	r18, r24
     a20:	39 07       	cpc	r19, r25
     a22:	78 f4       	brcc	.+30     	; 0xa42 <__vector_26+0x23a>
				error = TWI_Slave_TooMuchDataTransmitted;
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <__vector_26+0x232>
// Slave Receiver
		case TW_SR_SLA_ACK:
		case TW_SR_ARB_LOST_SLA_ACK:
		case TW_SR_GCALL_ACK:
		case TW_SR_ARB_LOST_GCALL_ACK:
			twi_init_receive();
     a2a:	0e 94 cc 00 	call	0x198	; 0x198 <twi_init_receive>
			break;
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <__vector_26+0x250>
		case TW_SR_DATA_ACK:
		case TW_SR_GCALL_DATA_ACK:
			twi_receive_byte();
     a30:	0e 94 ab 00 	call	0x156	; 0x156 <twi_receive_byte>
			break;
     a34:	11 c0       	rjmp	.+34     	; 0xa58 <__vector_26+0x250>
		case TW_SR_STOP:
			// Transmission ended early.
			error = TWI_Slave_NotEnoughDataReceived;	
     a36:	89 e0       	ldi	r24, 0x09	; 9
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	90 93 3a 03 	sts	0x033A, r25
     a3e:	80 93 39 03 	sts	0x0339, r24
		case TW_SR_DATA_NACK:
		case TW_SR_GCALL_DATA_NACK:
			// Invoke application-code before releasing the bus. The twi_buffer should be copied quickly.
			twi_handleMasterTransmission((TWIBuffer) { twi_buffer.data, alreadyHandled } );
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
     a42:	0e 94 93 00 	call	0x126	; 0x126 <twi_end>
			break;
     a46:	08 c0       	rjmp	.+16     	; 0xa58 <__vector_26+0x250>
		case TW_NO_INFO:
			error = TWI_No_Info_Interrupt;
		case TW_BUS_ERROR:
			error = TWI_Bus_Error;
		default:
			error = TWI_Illegal_Status;
     a48:	83 e0       	ldi	r24, 0x03	; 3
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	90 93 3a 03 	sts	0x033A, r25
     a50:	80 93 39 03 	sts	0x0339, r24
			twi_unexpectedCondition();
     a54:	0e 94 76 03 	call	0x6ec	; 0x6ec <twi_unexpectedCondition>
	}
}
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0b be       	out	0x3b, r0	; 59
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <twi_handleMasterRequest>:
#include <kernel/TWI/twi_raw.kernel.h>

TWIBuffer twi_handleMasterRequest() {
	TWIBuffer buf;
	return buf;
}
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	08 95       	ret

00000a88 <twi_handleMasterTransmission>:

void twi_handleMasterTransmission(TWIBuffer twi_buffer) {
	
}
     a88:	08 95       	ret

00000a8a <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
     a8c:	90 e4       	ldi	r25, 0x40	; 64
     a8e:	20 91 1c 01 	lds	r18, 0x011C
     a92:	30 91 1d 01 	lds	r19, 0x011D
     a96:	82 1b       	sub	r24, r18
     a98:	93 0b       	sbc	r25, r19
     a9a:	90 93 2e 02 	sts	0x022E, r25
     a9e:	80 93 2d 02 	sts	0x022D, r24
	__malloc_margin = 0;
     aa2:	10 92 2a 02 	sts	0x022A, r1
     aa6:	10 92 29 02 	sts	0x0229, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     aaa:	60 91 31 02 	lds	r22, 0x0231
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	6e 5f       	subi	r22, 0xFE	; 254
     ab2:	7f 4f       	sbci	r23, 0xFF	; 255
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <calloc>
     abc:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	19 f0       	breq	.+6      	; 0xac8 <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     ac2:	11 82       	std	Z+1, r1	; 0x01
     ac4:	10 82       	st	Z, r1
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     acc:	f0 93 33 02 	sts	0x0233, r31
     ad0:	e0 93 32 02 	sts	0x0232, r30
}
     ad4:	08 95       	ret

00000ad6 <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	df 93       	push	r29
     ae8:	cf 93       	push	r28
     aea:	00 d0       	rcall	.+0      	; 0xaec <createProcessBase3+0x16>
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	d8 2e       	mov	r13, r24
     af2:	c9 2e       	mov	r12, r25
     af4:	7b 01       	movw	r14, r22
     af6:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     af8:	ca 01       	movw	r24, r20
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	29 83       	std	Y+1, r18	; 0x01
     b00:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <calloc>
     b04:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     b06:	29 81       	ldd	r18, Y+1	; 0x01
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	b1 f1       	breq	.+108    	; 0xb78 <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     b0c:	a5 01       	movw	r20, r10
     b0e:	41 50       	subi	r20, 0x01	; 1
     b10:	50 40       	sbci	r21, 0x00	; 0
     b12:	48 0f       	add	r20, r24
     b14:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     b16:	88 ed       	ldi	r24, 0xD8	; 216
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	fa 01       	movw	r30, r20
     b1c:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     b22:	fa 01       	movw	r30, r20
     b24:	32 97       	sbiw	r30, 0x02	; 2
     b26:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     b28:	fa 01       	movw	r30, r20
     b2a:	33 97       	sbiw	r30, 0x03	; 3
     b2c:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     b2e:	62 2f       	mov	r22, r18
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	6e 5f       	subi	r22, 0xFE	; 254
     b34:	7f 4f       	sbci	r23, 0xFF	; 255
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	49 83       	std	Y+1, r20	; 0x01
     b3c:	5a 83       	std	Y+2, r21	; 0x02
     b3e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <calloc>
     b42:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     b44:	49 81       	ldd	r20, Y+1	; 0x01
     b46:	5a 81       	ldd	r21, Y+2	; 0x02
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	49 f0       	breq	.+18     	; 0xb5e <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     b4c:	ca 01       	movw	r24, r20
     b4e:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     b50:	f9 01       	movw	r30, r18
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     b56:	e1 14       	cp	r14, r1
     b58:	f1 04       	cpc	r15, r1
     b5a:	31 f4       	brne	.+12     	; 0xb68 <createProcessBase3+0x92>
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     b5e:	c8 01       	movw	r24, r16
     b60:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <free>
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     b66:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     b68:	fa 01       	movw	r30, r20
     b6a:	7e 97       	sbiw	r30, 0x1e	; 30
     b6c:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     b6e:	4f 51       	subi	r20, 0x1F	; 31
     b70:	50 40       	sbci	r21, 0x00	; 0
     b72:	fa 01       	movw	r30, r20
     b74:	f0 82       	st	Z, r15
	return result;
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     b7c:	c9 01       	movw	r24, r18
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	bf 90       	pop	r11
     b94:	af 90       	pop	r10
     b96:	08 95       	ret

00000b98 <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
     b98:	40 91 1c 01 	lds	r20, 0x011C
     b9c:	50 91 1d 01 	lds	r21, 0x011D
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	0e 94 6b 05 	call	0xad6	; 0xad6 <createProcessBase3>
}
     ba6:	08 95       	ret

00000ba8 <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	0e 94 cc 05 	call	0xb98	; 0xb98 <createProcessBase2>
}
     bb0:	08 95       	ret

00000bb2 <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
	PushProcessContext()
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	0f 92       	push	r0
     bba:	0b b6       	in	r0, 0x3b	; 59
     bbc:	0f 92       	push	r0
     bbe:	1f 92       	push	r1
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 92       	push	r2
     bc4:	3f 92       	push	r3
     bc6:	4f 92       	push	r4
     bc8:	5f 92       	push	r5
     bca:	6f 92       	push	r6
     bcc:	7f 92       	push	r7
     bce:	8f 92       	push	r8
     bd0:	9f 92       	push	r9
     bd2:	af 92       	push	r10
     bd4:	bf 92       	push	r11
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	2f 93       	push	r18
     be4:	3f 93       	push	r19
     be6:	4f 93       	push	r20
     be8:	5f 93       	push	r21
     bea:	6f 93       	push	r22
     bec:	7f 93       	push	r23
     bee:	8f 93       	push	r24
     bf0:	9f 93       	push	r25
     bf2:	af 93       	push	r26
     bf4:	bf 93       	push	r27
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     bfe:	dc 01       	movw	r26, r24
	StoreContextStack()
     c00:	0d b6       	in	r0, 0x3d	; 61
     c02:	0d 92       	st	X+, r0
     c04:	0e b6       	in	r0, 0x3e	; 62
     c06:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     c08:	db 01       	movw	r26, r22
	RestoreContextStack()
     c0a:	0d 90       	ld	r0, X+
     c0c:	0d be       	out	0x3d, r0	; 61
     c0e:	0d 90       	ld	r0, X+
     c10:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     c12:	ff 91       	pop	r31
     c14:	ef 91       	pop	r30
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	5f 90       	pop	r5
     c48:	4f 90       	pop	r4
     c4a:	3f 90       	pop	r3
     c4c:	2f 90       	pop	r2
     c4e:	1f 90       	pop	r1
     c50:	0f 90       	pop	r0
     c52:	0b be       	out	0x3b, r0	; 59
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0

	sei();
     c5a:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     c5c:	08 95       	ret

00000c5e <getCurrentProcess>:

inline Process getCurrentProcess() {
	return (Process) __current_process;
}
     c5e:	80 91 32 02 	lds	r24, 0x0232
     c62:	90 91 33 02 	lds	r25, 0x0233
     c66:	08 95       	ret

00000c68 <switchProcess>:

void switchProcess(Process newProcess) {
     c68:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     c6a:	80 91 32 02 	lds	r24, 0x0232
     c6e:	90 91 33 02 	lds	r25, 0x0233
	__current_process = newProcess;
     c72:	70 93 33 02 	sts	0x0233, r23
     c76:	60 93 32 02 	sts	0x0232, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     c7a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <switchContext>
}
     c7e:	08 95       	ret

00000c80 <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     c86:	2a 5f       	subi	r18, 0xFA	; 250
     c88:	0e 94 6b 05 	call	0xad6	; 0xad6 <createProcessBase3>
     c8c:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	e9 f0       	breq	.+58     	; 0xccc <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     c92:	dc 01       	movw	r26, r24
     c94:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     c96:	80 91 1e 01 	lds	r24, 0x011E
     c9a:	90 91 1f 01 	lds	r25, 0x011F
     c9e:	95 83       	std	Z+5, r25	; 0x05
     ca0:	84 83       	std	Z+4, r24	; 0x04
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	90 93 1f 01 	sts	0x011F, r25
     ca8:	80 93 1e 01 	sts	0x011E, r24
	ext->stackSize = stackSize;
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	dc 93       	st	X, r29
     cb0:	ce 93       	st	-X, r28
     cb2:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     cb4:	27 e2       	ldi	r18, 0x27	; 39
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	2c 1b       	sub	r18, r28
     cba:	3d 0b       	sbc	r19, r29
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	15 96       	adiw	r26, 0x05	; 5
     cc6:	9c 93       	st	X, r25
     cc8:	8e 93       	st	-X, r24
     cca:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     ccc:	cf 01       	movw	r24, r30
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
     cd4:	40 91 1c 01 	lds	r20, 0x011C
     cd8:	50 91 1d 01 	lds	r21, 0x011D
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	0e 94 40 06 	call	0xc80	; 0xc80 <createProcess3>
}
     ce2:	08 95       	ret

00000ce4 <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <createProcess2>
}
     cec:	08 95       	ret

00000cee <freeProcess>:

void freeProcess(Process process) {
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     cf4:	80 91 32 02 	lds	r24, 0x0232
     cf8:	90 91 33 02 	lds	r25, 0x0233
     cfc:	c8 17       	cp	r28, r24
     cfe:	d9 07       	cpc	r29, r25
     d00:	69 f0       	breq	.+26     	; 0xd1c <freeProcess+0x2e>
     d02:	fe 01       	movw	r30, r28
     d04:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	21 f0       	breq	.+8      	; 0xd16 <freeProcess+0x28>
		free(pcb->stackTop);
     d0e:	84 81       	ldd	r24, Z+4	; 0x04
     d10:	95 81       	ldd	r25, Z+5	; 0x05
     d12:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <free>
	}
	free(process);
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <free>
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
	return ProcMem(process)->stackSize;
}
     d22:	fc 01       	movw	r30, r24
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	08 95       	ret

00000d28 <getFreeProcessStackSize>:

uint16_t getFreeProcessStackSize(Process process) {
     d28:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     d2a:	20 85       	ldd	r18, Z+8	; 0x08
     d2c:	31 85       	ldd	r19, Z+9	; 0x09
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	28 1b       	sub	r18, r24
     d34:	39 0b       	sbc	r19, r25
}
     d36:	c9 01       	movw	r24, r18
     d38:	08 95       	ret

00000d3a <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     d3a:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     d3c:	84 81       	ldd	r24, Z+4	; 0x04
     d3e:	95 81       	ldd	r25, Z+5	; 0x05
     d40:	08 95       	ret

00000d42 <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
	return ProcMem(proc) + ADDITIONAL_MEMORY;
     d42:	9c 01       	movw	r18, r24
     d44:	28 5d       	subi	r18, 0xD8	; 216
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
}
     d48:	c9 01       	movw	r24, r18
     d4a:	08 95       	ret

00000d4c <init_process>:
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
     d4c:	80 91 31 02 	lds	r24, 0x0231
     d50:	8a 5f       	subi	r24, 0xFA	; 250
     d52:	80 93 31 02 	sts	0x0231, r24
	init_process_base();
     d56:	0e 94 45 05 	call	0xa8a	; 0xa8a <init_process_base>
     d5a:	a0 91 32 02 	lds	r26, 0x0232
     d5e:	b0 91 33 02 	lds	r27, 0x0233
     d62:	fd 01       	movw	r30, r26
     d64:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     d66:	15 96       	adiw	r26, 0x05	; 5
     d68:	1c 92       	st	X, r1
     d6a:	1e 92       	st	-X, r1
     d6c:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     d6e:	80 91 1c 01 	lds	r24, 0x011C
     d72:	90 91 1d 01 	lds	r25, 0x011D
     d76:	93 83       	std	Z+3, r25	; 0x03
     d78:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     d7a:	80 91 2d 02 	lds	r24, 0x022D
     d7e:	90 91 2e 02 	lds	r25, 0x022E
     d82:	95 83       	std	Z+5, r25	; 0x05
     d84:	84 83       	std	Z+4, r24	; 0x04
}
     d86:	08 95       	ret

00000d88 <init_idle_scheduler>:

Process __idle_process;

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
     d88:	88 ed       	ldi	r24, 0xD8	; 216
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	40 e4       	ldi	r20, 0x40	; 64
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	0e 94 40 06 	call	0xc80	; 0xc80 <createProcess3>
     d9a:	90 93 4d 03 	sts	0x034D, r25
     d9e:	80 93 4c 03 	sts	0x034C, r24
}
     da2:	08 95       	ret

00000da4 <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
}
     da4:	80 91 4c 03 	lds	r24, 0x034C
     da8:	90 91 4d 03 	lds	r25, 0x034D
     dac:	08 95       	ret

00000dae <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     db2:	ca e4       	ldi	r28, 0x4A	; 74
     db4:	d2 e0       	ldi	r29, 0x02	; 2
     db6:	ce 01       	movw	r24, r28
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	0e 94 c7 0a 	call	0x158e	; 0x158e <setWaveformGenerationMode>
	setTimerCompareValue(timer, 2500);
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	64 ec       	ldi	r22, 0xC4	; 196
     dc6:	79 e0       	ldi	r23, 0x09	; 9
     dc8:	0e 94 96 0b 	call	0x172c	; 0x172c <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     dcc:	ce 01       	movw	r24, r28
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
     ddc:	80 e8       	ldi	r24, 0x80	; 128
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <enableTimerInterrupt>
	sei();
     de4:	78 94       	sei
}
     de6:	08 95       	ret

00000de8 <before_scheduler>:
#include "scheduler.kernel.h"

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     de8:	08 95       	ret

00000dea <schedule>:

// Regular header-files
#include "../kernel.h"

Process schedule(BOOL fromTimer) {
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     df0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <dms_schedule>
     df4:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	51 f4       	brne	.+20     	; 0xe0e <schedule+0x24>
     dfa:	ce 01       	movw	r24, r28
     dfc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <rr_schedule>
     e00:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	21 f4       	brne	.+8      	; 0xe0e <schedule+0x24>
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
     e06:	20 91 4c 03 	lds	r18, 0x034C
     e0a:	30 91 4d 03 	lds	r19, 0x034D
	return p;
}
     e0e:	c9 01       	movw	r24, r18
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	08 95       	ret

00000e16 <__vector_32>:
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
#endif
	// First push the current context, before any register may be modified.
	PushProcessContext()
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	0f 92       	push	r0
     e1e:	0b b6       	in	r0, 0x3b	; 59
     e20:	0f 92       	push	r0
     e22:	1f 92       	push	r1
     e24:	11 24       	eor	r1, r1
     e26:	2f 92       	push	r2
     e28:	3f 92       	push	r3
     e2a:	4f 92       	push	r4
     e2c:	5f 92       	push	r5
     e2e:	6f 92       	push	r6
     e30:	7f 92       	push	r7
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     e62:	80 91 34 02 	lds	r24, 0x0234
     e66:	90 91 35 02 	lds	r25, 0x0235
     e6a:	a0 91 36 02 	lds	r26, 0x0236
     e6e:	b0 91 37 02 	lds	r27, 0x0237
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	a1 1d       	adc	r26, r1
     e76:	b1 1d       	adc	r27, r1
     e78:	80 93 34 02 	sts	0x0234, r24
     e7c:	90 93 35 02 	sts	0x0235, r25
     e80:	a0 93 36 02 	sts	0x0236, r26
     e84:	b0 93 37 02 	sts	0x0237, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     e88:	a0 91 32 02 	lds	r26, 0x0232
	asm volatile("lds r27, __current_process + 1");
     e8c:	b0 91 33 02 	lds	r27, 0x0233
	StoreContextStack()
     e90:	0d b6       	in	r0, 0x3d	; 61
     e92:	0d 92       	st	X+, r0
     e94:	0e b6       	in	r0, 0x3e	; 62
     e96:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 f5 06 	call	0xdea	; 0xdea <schedule>
     ea0:	90 93 33 02 	sts	0x0233, r25
     ea4:	80 93 32 02 	sts	0x0232, r24
	if (__current_process == InvalidProcess) {
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     eac:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     eb0:	dc 01       	movw	r26, r24
	RestoreContextStack()
     eb2:	0d 90       	ld	r0, X+
     eb4:	0d be       	out	0x3d, r0	; 61
     eb6:	0d 90       	ld	r0, X+
     eb8:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	7f 90       	pop	r7
     eec:	6f 90       	pop	r6
     eee:	5f 90       	pop	r5
     ef0:	4f 90       	pop	r4
     ef2:	3f 90       	pop	r3
     ef4:	2f 90       	pop	r2
     ef6:	1f 90       	pop	r1
     ef8:	0f 90       	pop	r0
     efa:	0b be       	out	0x3b, r0	; 59
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     f02:	18 95       	reti

00000f04 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
     f04:	80 b7       	in	r24, 0x30	; 48
     f06:	80 68       	ori	r24, 0x80	; 128
     f08:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
     f0a:	e4 e6       	ldi	r30, 0x64	; 100
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 66       	ori	r24, 0x60	; 96
     f12:	80 83       	st	Z, r24
	
	// Watchdog-timer
	// Enabled through the WDTON-fuse-bit. Explicitely disable here.
	// Configure the prescaler -- WDT system-reset after 0,5 s without wdt-instruction.
	WDTCSR = _BV(WDCE);
     f14:	e0 e6       	ldi	r30, 0x60	; 96
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	80 83       	st	Z, r24
	// WDP3:0 = 0101 - 0,5s timeout
	WDTCSR |= // _BV(WDP3) |
     f1c:	80 81       	ld	r24, Z
     f1e:	85 60       	ori	r24, 0x05	; 5
     f20:	80 83       	st	Z, r24
			_BV(WDP0);
	
	// BOD - TODO configure?
	
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
     f22:	0e 94 a6 06 	call	0xd4c	; 0xd4c <init_process>
	rr_captureMainProcess(PrioNormal);
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <rr_captureMainProcess>
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     f2e:	0e 94 f4 06 	call	0xde8	; 0xde8 <before_scheduler>
	start_scheduler();
     f32:	0e 94 ee 06 	call	0xddc	; 0xddc <start_scheduler>
}
     f36:	08 95       	ret

00000f38 <main>:
#ifdef Main_test_NIBObee_Buttons

int main() {
	while (1) {
		setLed(&LeftYellow, buttonStatus(&ButtonLeftBackward));
     f38:	8b e6       	ldi	r24, 0x6B	; 107
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	0e 94 c1 07 	call	0xf82	; 0xf82 <buttonStatus>
     f40:	bc 01       	movw	r22, r24
     f42:	8c e3       	ldi	r24, 0x3C	; 60
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	0e 94 29 08 	call	0x1052	; 0x1052 <setLed>
		setLed(&LeftRed, buttonStatus(&ButtonLeftForward));
     f4a:	88 e6       	ldi	r24, 0x68	; 104
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	0e 94 c1 07 	call	0xf82	; 0xf82 <buttonStatus>
     f52:	bc 01       	movw	r22, r24
     f54:	8a e3       	ldi	r24, 0x3A	; 58
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	0e 94 29 08 	call	0x1052	; 0x1052 <setLed>
		setLed(&RightYellow, buttonStatus(&ButtonRightBackward));
     f5c:	8e e6       	ldi	r24, 0x6E	; 110
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	0e 94 c1 07 	call	0xf82	; 0xf82 <buttonStatus>
     f64:	bc 01       	movw	r22, r24
     f66:	84 e5       	ldi	r24, 0x54	; 84
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 29 08 	call	0x1052	; 0x1052 <setLed>
		setLed(&RightRed, buttonStatus(&ButtonRightForward));
     f6e:	88 ef       	ldi	r24, 0xF8	; 248
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 c1 07 	call	0xf82	; 0xf82 <buttonStatus>
     f76:	bc 01       	movw	r22, r24
     f78:	86 ee       	ldi	r24, 0xE6	; 230
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 29 08 	call	0x1052	; 0x1052 <setLed>
     f80:	db cf       	rjmp	.-74     	; 0xf38 <main>

00000f82 <buttonStatus>:
 */ 

#include "button.h"
#include "port.h"

BOOL buttonStatus(PButton button) {
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	ec 01       	movw	r28, r24
	BOOL val = readPin(button->pin);
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	0e 94 26 0a 	call	0x144c	; 0x144c <readPin>
     f90:	9c 01       	movw	r18, r24
	if (button->flags & BUTTON_INVERTED) val = !val;
     f92:	88 81       	ld	r24, Y
     f94:	81 ff       	sbrs	r24, 1
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <buttonStatus+0x26>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	21 15       	cp	r18, r1
     f9e:	31 05       	cpc	r19, r1
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <buttonStatus+0x24>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9c 01       	movw	r18, r24
	return val;
}
     fa8:	c9 01       	movw	r24, r18
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
     fb0:	80 32       	cpi	r24, 0x20	; 32
     fb2:	18 f5       	brcc	.+70     	; 0xffa <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
     fb4:	58 2f       	mov	r21, r24
     fb6:	56 95       	lsr	r21
     fb8:	56 95       	lsr	r21
     fba:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
     fbc:	e5 2f       	mov	r30, r21
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	ee 0f       	add	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	e7 5e       	subi	r30, 0xE7	; 231
     fc6:	fd 4f       	sbci	r31, 0xFD	; 253
     fc8:	01 90       	ld	r0, Z+
     fca:	f0 81       	ld	r31, Z
     fcc:	e0 2d       	mov	r30, r0
     fce:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
     fd0:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
     fd2:	21 e0       	ldi	r18, 0x01	; 1
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	b9 01       	movw	r22, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <enablePinChangeInterrupt+0x2e>
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	8a 95       	dec	r24
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <enablePinChangeInterrupt+0x2a>
     fe2:	46 2b       	or	r20, r22
     fe4:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
     fe6:	80 91 68 00 	lds	r24, 0x0068
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <enablePinChangeInterrupt+0x40>
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	5a 95       	dec	r21
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <enablePinChangeInterrupt+0x3c>
     ff4:	82 2b       	or	r24, r18
     ff6:	80 93 68 00 	sts	0x0068, r24
     ffa:	08 95       	ret

00000ffc <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
     ffc:	80 32       	cpi	r24, 0x20	; 32
     ffe:	c0 f4       	brcc	.+48     	; 0x1030 <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    1000:	e8 2f       	mov	r30, r24
    1002:	e6 95       	lsr	r30
    1004:	e6 95       	lsr	r30
    1006:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	e7 5e       	subi	r30, 0xE7	; 231
    1010:	fd 4f       	sbci	r31, 0xFD	; 253
    1012:	01 90       	ld	r0, Z+
    1014:	f0 81       	ld	r31, Z
    1016:	e0 2d       	mov	r30, r0
    1018:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    101a:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <disblePinChangeInterrupt+0x2a>
    1022:	22 0f       	add	r18, r18
    1024:	33 1f       	adc	r19, r19
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <disblePinChangeInterrupt+0x26>
    102a:	20 95       	com	r18
    102c:	29 23       	and	r18, r25
    102e:	20 83       	st	Z, r18
    1030:	08 95       	ret

00001032 <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
    1032:	fc 01       	movw	r30, r24
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	61 e0       	ldi	r22, 0x01	; 1
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	0e 94 1d 0a 	call	0x143a	; 0x143a <writePin>
}
    1040:	08 95       	ret

00001042 <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
    1042:	fc 01       	movw	r30, r24
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	0e 94 1d 0a 	call	0x143a	; 0x143a <writePin>
}
    1050:	08 95       	ret

00001052 <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	0e 94 1d 0a 	call	0x143a	; 0x143a <writePin>
}
    105c:	08 95       	ret

0000105e <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	7c 01       	movw	r14, r24
    1074:	6b 01       	movw	r12, r22
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
    1076:	dc 01       	movw	r26, r24
    1078:	12 96       	adiw	r26, 0x02	; 2
    107a:	ac 90       	ld	r10, X
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	bb 24       	eor	r11, r11
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	d0 e0       	ldi	r29, 0x00	; 0
void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
    1084:	01 e0       	ldi	r16, 0x01	; 1
    1086:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0, max = leds->count; i < max; i++) {
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <setLeds+0x56>
		setLed(leds->leds[i], iMask & mask);
    108a:	ce 01       	movw	r24, r28
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	d7 01       	movw	r26, r14
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    109a:	01 90       	ld	r0, Z+
    109c:	f0 81       	ld	r31, Z
    109e:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
		setLed(leds->leds[i], iMask & mask);
    10a0:	b8 01       	movw	r22, r16
    10a2:	6c 21       	and	r22, r12
    10a4:	7d 21       	and	r23, r13
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	0e 94 1d 0a 	call	0x143a	; 0x143a <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    10ae:	00 0f       	add	r16, r16
    10b0:	11 1f       	adc	r17, r17
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
    10b2:	21 96       	adiw	r28, 0x01	; 1
    10b4:	ca 15       	cp	r28, r10
    10b6:	db 05       	cpc	r29, r11
    10b8:	44 f3       	brlt	.-48     	; 0x108a <setLeds+0x2c>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	bf 90       	pop	r11
    10cc:	af 90       	pop	r10
    10ce:	08 95       	ret

000010d0 <enableLeds>:

void enableLeds(PLedGroup leds) {
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    10de:	dc 01       	movw	r26, r24
    10e0:	12 96       	adiw	r26, 0x02	; 2
    10e2:	ec 90       	ld	r14, X
    10e4:	12 97       	sbiw	r26, 0x02	; 2
    10e6:	ff 24       	eor	r15, r15
    10e8:	c0 e0       	ldi	r28, 0x00	; 0
    10ea:	d0 e0       	ldi	r29, 0x00	; 0
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    10ee:	ce 01       	movw	r24, r28
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	d8 01       	movw	r26, r16
    10f6:	ed 91       	ld	r30, X+
    10f8:	fc 91       	ld	r31, X
    10fa:	e8 0f       	add	r30, r24
    10fc:	f9 1f       	adc	r31, r25
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	0e 94 19 08 	call	0x1032	; 0x1032 <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1106:	21 96       	adiw	r28, 0x01	; 1
    1108:	ce 15       	cp	r28, r14
    110a:	df 05       	cpc	r29, r15
    110c:	84 f3       	brlt	.-32     	; 0x10ee <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	08 95       	ret

0000111c <disableLeds>:

void disableLeds(PLedGroup leds) {
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    112a:	dc 01       	movw	r26, r24
    112c:	12 96       	adiw	r26, 0x02	; 2
    112e:	ec 90       	ld	r14, X
    1130:	12 97       	sbiw	r26, 0x02	; 2
    1132:	ff 24       	eor	r15, r15
    1134:	c0 e0       	ldi	r28, 0x00	; 0
    1136:	d0 e0       	ldi	r29, 0x00	; 0
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    113a:	ce 01       	movw	r24, r28
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	d8 01       	movw	r26, r16
    1142:	ed 91       	ld	r30, X+
    1144:	fc 91       	ld	r31, X
    1146:	e8 0f       	add	r30, r24
    1148:	f9 1f       	adc	r31, r25
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	0e 94 21 08 	call	0x1042	; 0x1042 <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1152:	21 96       	adiw	r28, 0x01	; 1
    1154:	ce 15       	cp	r28, r14
    1156:	df 05       	cpc	r29, r15
    1158:	84 f3       	brlt	.-32     	; 0x113a <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	08 95       	ret

00001168 <blinkLeds>:

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	6c 01       	movw	r12, r24
    117e:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    1180:	ff 24       	eor	r15, r15
    1182:	1c c0       	rjmp	.+56     	; 0x11bc <blinkLeds+0x54>
		setLeds(leds, ledMask);
    1184:	c6 01       	movw	r24, r12
    1186:	b8 01       	movw	r22, r16
    1188:	49 83       	std	Y+1, r20	; 0x01
    118a:	0e 94 2f 08 	call	0x105e	; 0x105e <setLeds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	94 e3       	ldi	r25, 0x34	; 52
    1192:	ac e0       	ldi	r26, 0x0C	; 12
    1194:	81 50       	subi	r24, 0x01	; 1
    1196:	90 40       	sbci	r25, 0x00	; 0
    1198:	a0 40       	sbci	r26, 0x00	; 0
    119a:	e1 f7       	brne	.-8      	; 0x1194 <blinkLeds+0x2c>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <blinkLeds+0x36>
    119e:	00 00       	nop
		_delay_ms(200);
		disableLeds(leds);
    11a0:	c6 01       	movw	r24, r12
    11a2:	0e 94 8e 08 	call	0x111c	; 0x111c <disableLeds>
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	94 e3       	ldi	r25, 0x34	; 52
    11aa:	ac e0       	ldi	r26, 0x0C	; 12
    11ac:	81 50       	subi	r24, 0x01	; 1
    11ae:	90 40       	sbci	r25, 0x00	; 0
    11b0:	a0 40       	sbci	r26, 0x00	; 0
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <blinkLeds+0x44>
    11b4:	00 c0       	rjmp	.+0      	; 0x11b6 <blinkLeds+0x4e>
    11b6:	00 00       	nop
		disableLed(leds->leds[i]);
	}
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    11b8:	f3 94       	inc	r15
    11ba:	49 81       	ldd	r20, Y+1	; 0x01
    11bc:	f4 16       	cp	r15, r20
    11be:	10 f3       	brcs	.-60     	; 0x1184 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		_delay_ms(200);
		disableLeds(leds);
		_delay_ms(200);
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	08 95       	ret

000011d2 <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, const uint8_t times) {
    11d2:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    11d4:	6f ef       	ldi	r22, 0xFF	; 255
    11d6:	7f ef       	ldi	r23, 0xFF	; 255
    11d8:	0e 94 b4 08 	call	0x1168	; 0x1168 <blinkLeds>
}
    11dc:	08 95       	ret

000011de <stopMotor>:
#include "motor.h"
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

void stopMotor(PMotor motor) {
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
	disableOutputCompare(motor->pwmTimer);
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	0e 94 91 0b 	call	0x1722	; 0x1722 <disableOutputCompare>
	// This is mainly to still read the speed as zero.
	setTimerCompareValue(motor->pwmTimer, 0);
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	0e 94 96 0b 	call	0x172c	; 0x172c <setTimerCompareValue>
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    11f8:	88 81       	ld	r24, Y
    11fa:	83 ff       	sbrs	r24, 3
    11fc:	08 c0       	rjmp	.+16     	; 0x120e <stopMotor+0x30>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	0e 94 0e 0a 	call	0x141c	; 0x141c <setPinZero>
		setPinZero(Dir2(motor));
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	0e 94 0e 0a 	call	0x141c	; 0x141c <setPinZero>
	}
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    1214:	fc 01       	movw	r30, r24
    1216:	83 81       	ldd	r24, Z+3	; 0x03
    1218:	94 81       	ldd	r25, Z+4	; 0x04
    121a:	0e 94 ae 0b 	call	0x175c	; 0x175c <getTimerCompareValue>
}
    121e:	08 95       	ret

00001220 <getDirection>:

MotorDirection getDirection(PMotor motor) {
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    122a:	28 81       	ld	r18, Y
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	9a 81       	ldd	r25, Y+2	; 0x02
    1230:	23 ff       	sbrs	r18, 3
    1232:	12 c0       	rjmp	.+36     	; 0x1258 <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
    1234:	0e 94 26 0a 	call	0x144c	; 0x144c <readPin>
    1238:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	0e 94 26 0a 	call	0x144c	; 0x144c <readPin>
		if (dir1 && !dir2) val = FORWARD;
    1242:	01 15       	cp	r16, r1
    1244:	11 05       	cpc	r17, r1
    1246:	19 f0       	breq	.+6      	; 0x124e <getDirection+0x2e>
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	e9 f0       	breq	.+58     	; 0x1286 <getDirection+0x66>
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	e9 f4       	brne	.+58     	; 0x128c <getDirection+0x6c>
    1252:	22 e0       	ldi	r18, 0x02	; 2
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	11 c0       	rjmp	.+34     	; 0x127a <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
    1258:	0e 94 26 0a 	call	0x144c	; 0x144c <readPin>
    125c:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	91 05       	cpc	r25, r1
    1262:	59 f0       	breq	.+22     	; 0x127a <getDirection+0x5a>
    1264:	88 81       	ld	r24, Y
    1266:	82 ff       	sbrs	r24, 2
    1268:	08 c0       	rjmp	.+16     	; 0x127a <getDirection+0x5a>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	21 15       	cp	r18, r1
    1270:	31 05       	cpc	r19, r1
    1272:	11 f0       	breq	.+4      	; 0x1278 <getDirection+0x58>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 01       	movw	r18, r24
	return val;
}
    127a:	c9 01       	movw	r24, r18
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	ec cf       	rjmp	.-40     	; 0x1264 <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	e9 cf       	rjmp	.-46     	; 0x1264 <getDirection+0x44>

00001292 <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	ec 01       	movw	r28, r24
    129c:	8b 01       	movw	r16, r22
    129e:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
    12a0:	42 30       	cpi	r20, 0x02	; 2
    12a2:	51 05       	cpc	r21, r1
    12a4:	19 f0       	breq	.+6      	; 0x12ac <setSpeed+0x1a>
    12a6:	01 15       	cp	r16, r1
    12a8:	11 05       	cpc	r17, r1
    12aa:	21 f4       	brne	.+8      	; 0x12b4 <setSpeed+0x22>
		stopMotor(motor);
    12ac:	ce 01       	movw	r24, r28
    12ae:	0e 94 ef 08 	call	0x11de	; 0x11de <stopMotor>
		return;
    12b2:	2d c0       	rjmp	.+90     	; 0x130e <setSpeed+0x7c>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
    12b4:	28 81       	ld	r18, Y
    12b6:	22 ff       	sbrs	r18, 2
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <setSpeed+0x38>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	41 15       	cp	r20, r1
    12c0:	51 05       	cpc	r21, r1
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <setSpeed+0x36>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    12ca:	23 ff       	sbrs	r18, 3
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <setSpeed+0x62>
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
    12d2:	61 15       	cp	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	39 f4       	brne	.+14     	; 0x12e6 <setSpeed+0x54>
			setPinOne(motor->direction);
    12d8:	0e 94 00 0a 	call	0x1400	; 0x1400 <setPinOne>
			setPinZero(Dir2(motor));
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	0e 94 0e 0a 	call	0x141c	; 0x141c <setPinZero>
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
    12e6:	0e 94 0e 0a 	call	0x141c	; 0x141c <setPinZero>
			setPinOne(Dir2(motor));
    12ea:	8d 81       	ldd	r24, Y+5	; 0x05
    12ec:	9e 81       	ldd	r25, Y+6	; 0x06
    12ee:	0e 94 00 0a 	call	0x1400	; 0x1400 <setPinOne>
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	0e 94 1d 0a 	call	0x143a	; 0x143a <writePin>
	}
	setTimerCompareValue(motor->pwmTimer, speed);
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1300:	b8 01       	movw	r22, r16
    1302:	0e 94 96 0b 	call	0x172c	; 0x172c <setTimerCompareValue>
	enableOutputCompare(motor->pwmTimer);
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	0e 94 82 0b 	call	0x1704	; 0x1704 <enableOutputCompare>
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	08 95       	ret

00001318 <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	0e 94 49 09 	call	0x1292	; 0x1292 <setSpeed>
}
    1320:	08 95       	ret

00001322 <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	0e 94 49 09 	call	0x1292	; 0x1292 <setSpeed>
}
    132a:	08 95       	ret

0000132c <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
    1336:	0e 94 10 09 	call	0x1220	; 0x1220 <getDirection>
    133a:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	91 05       	cpc	r25, r1
    1340:	79 f0       	breq	.+30     	; 0x1360 <getDirSpeed+0x34>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    1342:	f8 01       	movw	r30, r16
    1344:	83 81       	ldd	r24, Z+3	; 0x03
    1346:	94 81       	ldd	r25, Z+4	; 0x04
    1348:	0e 94 ae 0b 	call	0x175c	; 0x175c <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
    134c:	9c 01       	movw	r18, r24
    134e:	36 95       	lsr	r19
    1350:	27 95       	ror	r18
	if (dir == BACKWARD)
    1352:	c1 30       	cpi	r28, 0x01	; 1
    1354:	d1 05       	cpc	r29, r1
    1356:	31 f4       	brne	.+12     	; 0x1364 <getDirSpeed+0x38>
		val *= -1; // Should be optimized away by compiler.
    1358:	30 95       	com	r19
    135a:	21 95       	neg	r18
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <getDirSpeed+0x38>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
    1364:	c9 01       	movw	r24, r18
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
    1370:	47 2f       	mov	r20, r23
	uint16_t absv = abs(speed);
    1372:	77 ff       	sbrs	r23, 7
    1374:	03 c0       	rjmp	.+6      	; 0x137c <setDirSpeed+0xc>
    1376:	70 95       	com	r23
    1378:	61 95       	neg	r22
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
	setSpeed(motor, absv, speed < 0 ? BACKWARD : FORWARD);
    1380:	44 1f       	adc	r20, r20
    1382:	44 27       	eor	r20, r20
    1384:	44 1f       	adc	r20, r20
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	0e 94 49 09 	call	0x1292	; 0x1292 <setSpeed>
}
    138c:	08 95       	ret

0000138e <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    138e:	dc 01       	movw	r26, r24
    1390:	14 96       	adiw	r26, 0x04	; 4
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	15 97       	sbiw	r26, 0x05	; 5
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	80 83       	st	Z, r24
}
    139c:	08 95       	ret

0000139e <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    139e:	dc 01       	movw	r26, r24
    13a0:	14 96       	adiw	r26, 0x04	; 4
    13a2:	ed 91       	ld	r30, X+
    13a4:	fc 91       	ld	r31, X
    13a6:	15 97       	sbiw	r26, 0x05	; 5
    13a8:	10 82       	st	Z, r1
}
    13aa:	08 95       	ret

000013ac <setPinOutput>:

void setPinOutput(PPin pin) {
    13ac:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	11 97       	sbiw	r26, 0x01	; 1
    13b4:	04 80       	ldd	r0, Z+4	; 0x04
    13b6:	f5 81       	ldd	r31, Z+5	; 0x05
    13b8:	e0 2d       	mov	r30, r0
    13ba:	80 81       	ld	r24, Z
    13bc:	12 96       	adiw	r26, 0x02	; 2
    13be:	9c 91       	ld	r25, X
    13c0:	12 97       	sbiw	r26, 0x02	; 2
    13c2:	89 2b       	or	r24, r25
    13c4:	80 83       	st	Z, r24
}
    13c6:	08 95       	ret

000013c8 <setPinInput>:

void setPinInput(PPin pin) {
    13c8:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    13ca:	ed 91       	ld	r30, X+
    13cc:	fc 91       	ld	r31, X
    13ce:	11 97       	sbiw	r26, 0x01	; 1
    13d0:	04 80       	ldd	r0, Z+4	; 0x04
    13d2:	f5 81       	ldd	r31, Z+5	; 0x05
    13d4:	e0 2d       	mov	r30, r0
    13d6:	90 81       	ld	r25, Z
    13d8:	12 96       	adiw	r26, 0x02	; 2
    13da:	8c 91       	ld	r24, X
    13dc:	12 97       	sbiw	r26, 0x02	; 2
    13de:	80 95       	com	r24
    13e0:	89 23       	and	r24, r25
    13e2:	80 83       	st	Z, r24
}
    13e4:	08 95       	ret

000013e6 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    13e6:	dc 01       	movw	r26, r24
    13e8:	ed 91       	ld	r30, X+
    13ea:	fc 91       	ld	r31, X
    13ec:	11 97       	sbiw	r26, 0x01	; 1
    13ee:	60 83       	st	Z, r22
}
    13f0:	08 95       	ret

000013f2 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    13f2:	dc 01       	movw	r26, r24
    13f4:	12 96       	adiw	r26, 0x02	; 2
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	13 97       	sbiw	r26, 0x03	; 3
    13fc:	80 81       	ld	r24, Z
}
    13fe:	08 95       	ret

00001400 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1400:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1402:	ed 91       	ld	r30, X+
    1404:	fc 91       	ld	r31, X
    1406:	11 97       	sbiw	r26, 0x01	; 1
    1408:	01 90       	ld	r0, Z+
    140a:	f0 81       	ld	r31, Z
    140c:	e0 2d       	mov	r30, r0
    140e:	80 81       	ld	r24, Z
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	9c 91       	ld	r25, X
    1414:	12 97       	sbiw	r26, 0x02	; 2
    1416:	89 2b       	or	r24, r25
    1418:	80 83       	st	Z, r24
}
    141a:	08 95       	ret

0000141c <setPinZero>:

void setPinZero(PPin pin) {
    141c:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	11 97       	sbiw	r26, 0x01	; 1
    1424:	01 90       	ld	r0, Z+
    1426:	f0 81       	ld	r31, Z
    1428:	e0 2d       	mov	r30, r0
    142a:	90 81       	ld	r25, Z
    142c:	12 96       	adiw	r26, 0x02	; 2
    142e:	8c 91       	ld	r24, X
    1430:	12 97       	sbiw	r26, 0x02	; 2
    1432:	80 95       	com	r24
    1434:	89 23       	and	r24, r25
    1436:	80 83       	st	Z, r24
}
    1438:	08 95       	ret

0000143a <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    143a:	61 15       	cp	r22, r1
    143c:	71 05       	cpc	r23, r1
    143e:	19 f0       	breq	.+6      	; 0x1446 <writePin+0xc>
    1440:	0e 94 00 0a 	call	0x1400	; 0x1400 <setPinOne>
    1444:	08 95       	ret
	else setPinZero(pin);
    1446:	0e 94 0e 0a 	call	0x141c	; 0x141c <setPinZero>
    144a:	08 95       	ret

0000144c <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    144c:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    144e:	a0 81       	ld	r26, Z
    1450:	b1 81       	ldd	r27, Z+1	; 0x01
    1452:	12 96       	adiw	r26, 0x02	; 2
    1454:	0d 90       	ld	r0, X+
    1456:	bc 91       	ld	r27, X
    1458:	a0 2d       	mov	r26, r0
    145a:	8c 91       	ld	r24, X
    145c:	92 81       	ldd	r25, Z+2	; 0x02
    145e:	89 23       	and	r24, r25
		return TRUE;
    1460:	21 e0       	ldi	r18, 0x01	; 1
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	11 f4       	brne	.+4      	; 0x146a <readPin+0x1e>
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    146a:	c9 01       	movw	r24, r18
    146c:	08 95       	ret

0000146e <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    146e:	fc 01       	movw	r30, r24
    1470:	64 30       	cpi	r22, 0x04	; 4
    1472:	71 05       	cpc	r23, r1
    1474:	48 f4       	brcc	.+18     	; 0x1488 <setCompareMatchOutputMode+0x1a>
    1476:	db 01       	movw	r26, r22
    1478:	af 5d       	subi	r26, 0xDF	; 223
    147a:	bd 4f       	sbci	r27, 0xFD	; 253
    147c:	2c 91       	ld	r18, X
    147e:	6b 5d       	subi	r22, 0xDB	; 219
    1480:	7d 4f       	sbci	r23, 0xFD	; 253
    1482:	db 01       	movw	r26, r22
    1484:	3c 91       	ld	r19, X
    1486:	02 c0       	rjmp	.+4      	; 0x148c <setCompareMatchOutputMode+0x1e>
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
    148c:	84 81       	ldd	r24, Z+4	; 0x04
    148e:	95 81       	ldd	r25, Z+5	; 0x05
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	91 05       	cpc	r25, r1
    1494:	21 f4       	brne	.+8      	; 0x149e <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
    1496:	36 95       	lsr	r19
    1498:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
    149a:	26 95       	lsr	r18
    149c:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    149e:	a0 81       	ld	r26, Z
    14a0:	b1 81       	ldd	r27, Z+1	; 0x01
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	0d 90       	ld	r0, X+
    14a6:	bc 91       	ld	r27, X
    14a8:	a0 2d       	mov	r26, r0
    14aa:	8c 91       	ld	r24, X
    14ac:	83 2b       	or	r24, r19
    14ae:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    14b0:	01 90       	ld	r0, Z+
    14b2:	f0 81       	ld	r31, Z
    14b4:	e0 2d       	mov	r30, r0
    14b6:	01 80       	ldd	r0, Z+1	; 0x01
    14b8:	f2 81       	ldd	r31, Z+2	; 0x02
    14ba:	e0 2d       	mov	r30, r0
    14bc:	80 81       	ld	r24, Z
    14be:	20 95       	com	r18
    14c0:	28 23       	and	r18, r24
    14c2:	20 83       	st	Z, r18
}
    14c4:	08 95       	ret

000014c6 <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
    14c6:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    14c8:	80 81       	ld	r24, Z
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	82 70       	andi	r24, 0x02	; 2
    14ce:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    14d0:	64 30       	cpi	r22, 0x04	; 4
    14d2:	71 05       	cpc	r23, r1
    14d4:	71 f1       	breq	.+92     	; 0x1532 <setTimerClockSelect+0x6c>
    14d6:	65 30       	cpi	r22, 0x05	; 5
    14d8:	71 05       	cpc	r23, r1
    14da:	68 f4       	brcc	.+26     	; 0x14f6 <setTimerClockSelect+0x30>
    14dc:	61 30       	cpi	r22, 0x01	; 1
    14de:	71 05       	cpc	r23, r1
    14e0:	f9 f0       	breq	.+62     	; 0x1520 <setTimerClockSelect+0x5a>
    14e2:	61 30       	cpi	r22, 0x01	; 1
    14e4:	71 05       	cpc	r23, r1
    14e6:	d8 f1       	brcs	.+118    	; 0x155e <setTimerClockSelect+0x98>
    14e8:	62 30       	cpi	r22, 0x02	; 2
    14ea:	71 05       	cpc	r23, r1
    14ec:	e1 f0       	breq	.+56     	; 0x1526 <setTimerClockSelect+0x60>
    14ee:	63 30       	cpi	r22, 0x03	; 3
    14f0:	71 05       	cpc	r23, r1
    14f2:	a1 f4       	brne	.+40     	; 0x151c <setTimerClockSelect+0x56>
    14f4:	1b c0       	rjmp	.+54     	; 0x152c <setTimerClockSelect+0x66>
    14f6:	67 30       	cpi	r22, 0x07	; 7
    14f8:	71 05       	cpc	r23, r1
    14fa:	21 f1       	breq	.+72     	; 0x1544 <setTimerClockSelect+0x7e>
    14fc:	68 30       	cpi	r22, 0x08	; 8
    14fe:	71 05       	cpc	r23, r1
    1500:	38 f4       	brcc	.+14     	; 0x1510 <setTimerClockSelect+0x4a>
    1502:	65 30       	cpi	r22, 0x05	; 5
    1504:	71 05       	cpc	r23, r1
    1506:	c1 f0       	breq	.+48     	; 0x1538 <setTimerClockSelect+0x72>
    1508:	66 30       	cpi	r22, 0x06	; 6
    150a:	71 05       	cpc	r23, r1
    150c:	39 f4       	brne	.+14     	; 0x151c <setTimerClockSelect+0x56>
    150e:	17 c0       	rjmp	.+46     	; 0x153e <setTimerClockSelect+0x78>
    1510:	68 30       	cpi	r22, 0x08	; 8
    1512:	71 05       	cpc	r23, r1
    1514:	d1 f0       	breq	.+52     	; 0x154a <setTimerClockSelect+0x84>
    1516:	69 30       	cpi	r22, 0x09	; 9
    1518:	71 05       	cpc	r23, r1
    151a:	e1 f0       	breq	.+56     	; 0x1554 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	1d c0       	rjmp	.+58     	; 0x155a <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    1520:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    1522:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    1524:	27 c0       	rjmp	.+78     	; 0x1574 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    1526:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    1528:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    152a:	24 c0       	rjmp	.+72     	; 0x1574 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	e9 f4       	brne	.+58     	; 0x156a <setTimerClockSelect+0xa4>
    1530:	2d c0       	rjmp	.+90     	; 0x158c <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	b9 f0       	breq	.+46     	; 0x1564 <setTimerClockSelect+0x9e>
    1536:	19 c0       	rjmp	.+50     	; 0x156a <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	d1 f4       	brne	.+52     	; 0x1570 <setTimerClockSelect+0xaa>
    153c:	27 c0       	rjmp	.+78     	; 0x158c <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	a1 f0       	breq	.+40     	; 0x156a <setTimerClockSelect+0xa4>
    1542:	05 c0       	rjmp	.+10     	; 0x154e <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	a1 f0       	breq	.+40     	; 0x1570 <setTimerClockSelect+0xaa>
    1548:	07 c0       	rjmp	.+14     	; 0x1558 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	f9 f4       	brne	.+62     	; 0x158c <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    154e:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	10 c0       	rjmp	.+32     	; 0x1574 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	d1 f4       	brne	.+52     	; 0x158c <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1558:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	0b c0       	rjmp	.+22     	; 0x1574 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    155e:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1560:	87 e0       	ldi	r24, 0x07	; 7
    1562:	08 c0       	rjmp	.+16     	; 0x1574 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    1564:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    1566:	84 e0       	ldi	r24, 0x04	; 4
    1568:	05 c0       	rjmp	.+10     	; 0x1574 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    156a:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    1570:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    1572:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    1574:	a3 81       	ldd	r26, Z+3	; 0x03
    1576:	b4 81       	ldd	r27, Z+4	; 0x04
    1578:	2c 91       	ld	r18, X
    157a:	29 2b       	or	r18, r25
    157c:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    157e:	03 80       	ldd	r0, Z+3	; 0x03
    1580:	f4 81       	ldd	r31, Z+4	; 0x04
    1582:	e0 2d       	mov	r30, r0
    1584:	90 81       	ld	r25, Z
    1586:	80 95       	com	r24
    1588:	89 23       	and	r24, r25
    158a:	80 83       	st	Z, r24
    158c:	08 95       	ret

0000158e <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
    158e:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    1590:	80 81       	ld	r24, Z
    1592:	82 ff       	sbrs	r24, 2
    1594:	54 c0       	rjmp	.+168    	; 0x163e <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    1596:	65 30       	cpi	r22, 0x05	; 5
    1598:	71 05       	cpc	r23, r1
    159a:	b9 f1       	breq	.+110    	; 0x160a <setWaveformGenerationMode+0x7c>
    159c:	66 30       	cpi	r22, 0x06	; 6
    159e:	71 05       	cpc	r23, r1
    15a0:	b0 f4       	brcc	.+44     	; 0x15ce <setWaveformGenerationMode+0x40>
    15a2:	62 30       	cpi	r22, 0x02	; 2
    15a4:	71 05       	cpc	r23, r1
    15a6:	69 f1       	breq	.+90     	; 0x1602 <setWaveformGenerationMode+0x74>
    15a8:	63 30       	cpi	r22, 0x03	; 3
    15aa:	71 05       	cpc	r23, r1
    15ac:	40 f4       	brcc	.+16     	; 0x15be <setWaveformGenerationMode+0x30>
    15ae:	61 15       	cp	r22, r1
    15b0:	71 05       	cpc	r23, r1
    15b2:	19 f1       	breq	.+70     	; 0x15fa <setWaveformGenerationMode+0x6c>
    15b4:	61 30       	cpi	r22, 0x01	; 1
    15b6:	71 05       	cpc	r23, r1
    15b8:	09 f0       	breq	.+2      	; 0x15bc <setWaveformGenerationMode+0x2e>
    15ba:	8f c0       	rjmp	.+286    	; 0x16da <setWaveformGenerationMode+0x14c>
    15bc:	6e c0       	rjmp	.+220    	; 0x169a <setWaveformGenerationMode+0x10c>
    15be:	63 30       	cpi	r22, 0x03	; 3
    15c0:	71 05       	cpc	r23, r1
    15c2:	29 f1       	breq	.+74     	; 0x160e <setWaveformGenerationMode+0x80>
    15c4:	64 30       	cpi	r22, 0x04	; 4
    15c6:	71 05       	cpc	r23, r1
    15c8:	09 f0       	breq	.+2      	; 0x15cc <setWaveformGenerationMode+0x3e>
    15ca:	87 c0       	rjmp	.+270    	; 0x16da <setWaveformGenerationMode+0x14c>
    15cc:	24 c0       	rjmp	.+72     	; 0x1616 <setWaveformGenerationMode+0x88>
    15ce:	68 30       	cpi	r22, 0x08	; 8
    15d0:	71 05       	cpc	r23, r1
    15d2:	29 f1       	breq	.+74     	; 0x161e <setWaveformGenerationMode+0x90>
    15d4:	69 30       	cpi	r22, 0x09	; 9
    15d6:	71 05       	cpc	r23, r1
    15d8:	40 f4       	brcc	.+16     	; 0x15ea <setWaveformGenerationMode+0x5c>
    15da:	66 30       	cpi	r22, 0x06	; 6
    15dc:	71 05       	cpc	r23, r1
    15de:	39 f1       	breq	.+78     	; 0x162e <setWaveformGenerationMode+0xa0>
    15e0:	67 30       	cpi	r22, 0x07	; 7
    15e2:	71 05       	cpc	r23, r1
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <setWaveformGenerationMode+0x5a>
    15e6:	79 c0       	rjmp	.+242    	; 0x16da <setWaveformGenerationMode+0x14c>
    15e8:	26 c0       	rjmp	.+76     	; 0x1636 <setWaveformGenerationMode+0xa8>
    15ea:	69 30       	cpi	r22, 0x09	; 9
    15ec:	71 05       	cpc	r23, r1
    15ee:	d9 f0       	breq	.+54     	; 0x1626 <setWaveformGenerationMode+0x98>
    15f0:	6a 30       	cpi	r22, 0x0A	; 10
    15f2:	71 05       	cpc	r23, r1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <setWaveformGenerationMode+0x6a>
    15f6:	71 c0       	rjmp	.+226    	; 0x16da <setWaveformGenerationMode+0x14c>
    15f8:	10 c0       	rjmp	.+32     	; 0x161a <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    15fa:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    15fc:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    15fe:	88 e1       	ldi	r24, 0x18	; 24
    1600:	4f c0       	rjmp	.+158    	; 0x16a0 <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1602:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1604:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	46 c0       	rjmp	.+140    	; 0x1696 <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
    160a:	98 e1       	ldi	r25, 0x18	; 24
    160c:	3a c0       	rjmp	.+116    	; 0x1682 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    160e:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1610:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1612:	88 e1       	ldi	r24, 0x18	; 24
    1614:	40 c0       	rjmp	.+128    	; 0x1696 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
    1616:	90 e1       	ldi	r25, 0x10	; 16
    1618:	2f c0       	rjmp	.+94     	; 0x1678 <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    161a:	90 e1       	ldi	r25, 0x10	; 16
    161c:	36 c0       	rjmp	.+108    	; 0x168a <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
    161e:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
    1620:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    1622:	80 e1       	ldi	r24, 0x10	; 16
    1624:	42 c0       	rjmp	.+132    	; 0x16aa <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
    1626:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
    1628:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    162a:	80 e1       	ldi	r24, 0x10	; 16
    162c:	27 c0       	rjmp	.+78     	; 0x167c <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    162e:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
    1630:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1632:	88 e1       	ldi	r24, 0x18	; 24
    1634:	3a c0       	rjmp	.+116    	; 0x16aa <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1636:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
    1638:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    163a:	88 e1       	ldi	r24, 0x18	; 24
    163c:	1f c0       	rjmp	.+62     	; 0x167c <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    163e:	62 30       	cpi	r22, 0x02	; 2
    1640:	71 05       	cpc	r23, r1
    1642:	c9 f0       	breq	.+50     	; 0x1676 <setWaveformGenerationMode+0xe8>
    1644:	63 30       	cpi	r22, 0x03	; 3
    1646:	71 05       	cpc	r23, r1
    1648:	40 f4       	brcc	.+16     	; 0x165a <setWaveformGenerationMode+0xcc>
    164a:	61 15       	cp	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	79 f0       	breq	.+30     	; 0x166e <setWaveformGenerationMode+0xe0>
    1650:	61 30       	cpi	r22, 0x01	; 1
    1652:	71 05       	cpc	r23, r1
    1654:	09 f0       	breq	.+2      	; 0x1658 <setWaveformGenerationMode+0xca>
    1656:	41 c0       	rjmp	.+130    	; 0x16da <setWaveformGenerationMode+0x14c>
    1658:	25 c0       	rjmp	.+74     	; 0x16a4 <setWaveformGenerationMode+0x116>
    165a:	64 30       	cpi	r22, 0x04	; 4
    165c:	71 05       	cpc	r23, r1
    165e:	c1 f0       	breq	.+48     	; 0x1690 <setWaveformGenerationMode+0x102>
    1660:	64 30       	cpi	r22, 0x04	; 4
    1662:	71 05       	cpc	r23, r1
    1664:	88 f0       	brcs	.+34     	; 0x1688 <setWaveformGenerationMode+0xfa>
    1666:	65 30       	cpi	r22, 0x05	; 5
    1668:	71 05       	cpc	r23, r1
    166a:	b9 f5       	brne	.+110    	; 0x16da <setWaveformGenerationMode+0x14c>
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    166e:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1670:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1672:	88 e0       	ldi	r24, 0x08	; 8
    1674:	15 c0       	rjmp	.+42     	; 0x16a0 <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1676:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
    1678:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
    167a:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    167c:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
    167e:	16 c0       	rjmp	.+44     	; 0x16ac <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    1680:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
    1682:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	fa cf       	rjmp	.-12     	; 0x167c <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1688:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    168a:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    168c:	88 e0       	ldi	r24, 0x08	; 8
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    1690:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    1692:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1694:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    1696:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    169a:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    169c:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    169e:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    16a0:	23 e0       	ldi	r18, 0x03	; 3
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    16a4:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    16a6:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    16a8:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    16aa:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    16ac:	a1 81       	ldd	r26, Z+1	; 0x01
    16ae:	b2 81       	ldd	r27, Z+2	; 0x02
    16b0:	4c 91       	ld	r20, X
    16b2:	43 2b       	or	r20, r19
    16b4:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    16b6:	a1 81       	ldd	r26, Z+1	; 0x01
    16b8:	b2 81       	ldd	r27, Z+2	; 0x02
    16ba:	3c 91       	ld	r19, X
    16bc:	20 95       	com	r18
    16be:	23 23       	and	r18, r19
    16c0:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    16c2:	a3 81       	ldd	r26, Z+3	; 0x03
    16c4:	b4 81       	ldd	r27, Z+4	; 0x04
    16c6:	2c 91       	ld	r18, X
    16c8:	29 2b       	or	r18, r25
    16ca:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    16cc:	03 80       	ldd	r0, Z+3	; 0x03
    16ce:	f4 81       	ldd	r31, Z+4	; 0x04
    16d0:	e0 2d       	mov	r30, r0
    16d2:	90 81       	ld	r25, Z
    16d4:	80 95       	com	r24
    16d6:	89 23       	and	r24, r25
    16d8:	80 83       	st	Z, r24
    16da:	08 95       	ret

000016dc <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    16dc:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	11 97       	sbiw	r26, 0x01	; 1
    16e4:	05 80       	ldd	r0, Z+5	; 0x05
    16e6:	f6 81       	ldd	r31, Z+6	; 0x06
    16e8:	e0 2d       	mov	r30, r0
    16ea:	20 81       	ld	r18, Z
    16ec:	14 96       	adiw	r26, 0x04	; 4
    16ee:	8d 91       	ld	r24, X+
    16f0:	9c 91       	ld	r25, X
    16f2:	15 97       	sbiw	r26, 0x05	; 5
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	11 f4       	brne	.+4      	; 0x16fc <enableTimerInterrupt+0x20>
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <enableTimerInterrupt+0x22>
    16fc:	84 e0       	ldi	r24, 0x04	; 4
    16fe:	82 2b       	or	r24, r18
    1700:	80 83       	st	Z, r24
}
    1702:	08 95       	ret

00001704 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    170a:	8e 81       	ldd	r24, Y+6	; 0x06
    170c:	9f 81       	ldd	r25, Y+7	; 0x07
    170e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
    1712:	ce 01       	movw	r24, r28
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	0e 94 37 0a 	call	0x146e	; 0x146e <setCompareMatchOutputMode>
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	0e 94 37 0a 	call	0x146e	; 0x146e <setCompareMatchOutputMode>
}
    172a:	08 95       	ret

0000172c <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    172c:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    172e:	a0 81       	ld	r26, Z
    1730:	b1 81       	ldd	r27, Z+1	; 0x01
    1732:	8c 91       	ld	r24, X
    1734:	82 ff       	sbrs	r24, 2
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    1738:	8f b7       	in	r24, 0x3f	; 63
		cli();
    173a:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    173c:	a2 81       	ldd	r26, Z+2	; 0x02
    173e:	b3 81       	ldd	r27, Z+3	; 0x03
    1740:	11 96       	adiw	r26, 0x01	; 1
    1742:	7c 93       	st	X, r23
    1744:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    1746:	02 80       	ldd	r0, Z+2	; 0x02
    1748:	f3 81       	ldd	r31, Z+3	; 0x03
    174a:	e0 2d       	mov	r30, r0
    174c:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    174e:	8f bf       	out	0x3f, r24	; 63
    1750:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    1752:	02 80       	ldd	r0, Z+2	; 0x02
    1754:	f3 81       	ldd	r31, Z+3	; 0x03
    1756:	e0 2d       	mov	r30, r0
    1758:	70 83       	st	Z, r23
    175a:	08 95       	ret

0000175c <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    175c:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    175e:	a0 81       	ld	r26, Z
    1760:	b1 81       	ldd	r27, Z+1	; 0x01
    1762:	8c 91       	ld	r24, X
    1764:	82 ff       	sbrs	r24, 2
    1766:	09 c0       	rjmp	.+18     	; 0x177a <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    1768:	2f b7       	in	r18, 0x3f	; 63
		cli();
    176a:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
    176c:	02 80       	ldd	r0, Z+2	; 0x02
    176e:	f3 81       	ldd	r31, Z+3	; 0x03
    1770:	e0 2d       	mov	r30, r0
    1772:	80 81       	ld	r24, Z
    1774:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
    1776:	2f bf       	out	0x3f, r18	; 63
    1778:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    177a:	02 80       	ldd	r0, Z+2	; 0x02
    177c:	f3 81       	ldd	r31, Z+3	; 0x03
    177e:	e0 2d       	mov	r30, r0
    1780:	90 81       	ld	r25, Z
    1782:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
    1784:	08 95       	ret

00001786 <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
	PJob job = JobMem(process);
    178e:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    1792:	e8 2e       	mov	r14, r24
    1794:	e7 01       	movw	r28, r14
    1796:	7e 01       	movw	r14, r28
    1798:	f9 2e       	mov	r15, r25
    179a:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
    17a2:	1c 86       	std	Y+12, r1	; 0x0c
    17a4:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
    17a6:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <schedule_next>
    17aa:	f8 cf       	rjmp	.-16     	; 0x179c <AperiodicJobWrapper+0x16>

000017ac <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
    17ac:	ef 92       	push	r14
    17ae:	ff 92       	push	r15
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
	PJob job = JobMem(process);
    17b4:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    17b8:	e8 2e       	mov	r14, r24
    17ba:	e7 01       	movw	r28, r14
    17bc:	7e 01       	movw	r14, r28
    17be:	f9 2e       	mov	r15, r25
    17c0:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	09 95       	icall
		periodicJob->nextPeriod += job->period;
    17c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    17cc:	ad 85       	ldd	r26, Y+13	; 0x0d
    17ce:	be 85       	ldd	r27, Y+14	; 0x0e
    17d0:	2d 81       	ldd	r18, Y+5	; 0x05
    17d2:	3e 81       	ldd	r19, Y+6	; 0x06
    17d4:	4f 81       	ldd	r20, Y+7	; 0x07
    17d6:	58 85       	ldd	r21, Y+8	; 0x08
    17d8:	82 0f       	add	r24, r18
    17da:	93 1f       	adc	r25, r19
    17dc:	a4 1f       	adc	r26, r20
    17de:	b5 1f       	adc	r27, r21
    17e0:	8b 87       	std	Y+11, r24	; 0x0b
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	ad 87       	std	Y+13, r26	; 0x0d
    17e6:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
    17e8:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <schedule_next>
    17ec:	ea cf       	rjmp	.-44     	; 0x17c2 <PeriodicJobWrapper+0x16>

000017ee <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
    17f6:	c0 91 9f 03 	lds	r28, 0x039F
    17fa:	d0 91 a0 03 	lds	r29, 0x03A0
	while (current) {
    17fe:	25 c0       	rjmp	.+74     	; 0x184a <dms_schedule+0x5c>
		PJob job = JobMem(current);
    1800:	ce 01       	movw	r24, r28
    1802:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    1806:	fc 01       	movw	r30, r24
		switch(job->jobType) {
    1808:	81 85       	ldd	r24, Z+9	; 0x09
    180a:	92 85       	ldd	r25, Z+10	; 0x0a
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	21 f0       	breq	.+8      	; 0x1818 <dms_schedule+0x2a>
    1810:	81 30       	cpi	r24, 0x01	; 1
    1812:	91 05       	cpc	r25, r1
    1814:	c1 f4       	brne	.+48     	; 0x1846 <dms_schedule+0x58>
    1816:	12 c0       	rjmp	.+36     	; 0x183c <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
    1818:	63 85       	ldd	r22, Z+11	; 0x0b
    181a:	74 85       	ldd	r23, Z+12	; 0x0c
    181c:	85 85       	ldd	r24, Z+13	; 0x0d
    181e:	96 85       	ldd	r25, Z+14	; 0x0e
    1820:	20 91 34 02 	lds	r18, 0x0234
    1824:	30 91 35 02 	lds	r19, 0x0235
    1828:	40 91 36 02 	lds	r20, 0x0236
    182c:	50 91 37 02 	lds	r21, 0x0237
    1830:	26 17       	cp	r18, r22
    1832:	37 07       	cpc	r19, r23
    1834:	48 07       	cpc	r20, r24
    1836:	59 07       	cpc	r21, r25
    1838:	30 f0       	brcs	.+12     	; 0x1846 <dms_schedule+0x58>
    183a:	09 c0       	rjmp	.+18     	; 0x184e <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
    183c:	83 85       	ldd	r24, Z+11	; 0x0b
    183e:	94 85       	ldd	r25, Z+12	; 0x0c
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	21 f0       	breq	.+8      	; 0x184e <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
    1846:	c3 81       	ldd	r28, Z+3	; 0x03
    1848:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
    184a:	20 97       	sbiw	r28, 0x00	; 0
    184c:	c9 f6       	brne	.-78     	; 0x1800 <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
    184e:	ce 01       	movw	r24, r28
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	08 95       	ret

0000185a <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
    1862:	8c 01       	movw	r16, r24
    1864:	eb 01       	movw	r28, r22
	if (!processListHead) {
    1866:	80 91 9f 03 	lds	r24, 0x039F
    186a:	90 91 a0 03 	lds	r25, 0x03A0
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	39 f4       	brne	.+14     	; 0x1880 <insertJobIntoList+0x26>
		processListHead = process;
    1872:	10 93 a0 03 	sts	0x03A0, r17
    1876:	00 93 9f 03 	sts	0x039F, r16
		job->nextJob = NULL;
    187a:	1c 82       	std	Y+4, r1	; 0x04
    187c:	1b 82       	std	Y+3, r1	; 0x03
    187e:	2d c0       	rjmp	.+90     	; 0x18da <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
    1880:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    1884:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
    1886:	65 81       	ldd	r22, Z+5	; 0x05
    1888:	76 81       	ldd	r23, Z+6	; 0x06
    188a:	87 81       	ldd	r24, Z+7	; 0x07
    188c:	90 85       	ldd	r25, Z+8	; 0x08
    188e:	2d 81       	ldd	r18, Y+5	; 0x05
    1890:	3e 81       	ldd	r19, Y+6	; 0x06
    1892:	4f 81       	ldd	r20, Y+7	; 0x07
    1894:	58 85       	ldd	r21, Y+8	; 0x08
    1896:	26 17       	cp	r18, r22
    1898:	37 07       	cpc	r19, r23
    189a:	48 07       	cpc	r20, r24
    189c:	59 07       	cpc	r21, r25
    189e:	68 f0       	brcs	.+26     	; 0x18ba <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
    18a0:	62 17       	cp	r22, r18
    18a2:	73 07       	cpc	r23, r19
    18a4:	84 07       	cpc	r24, r20
    18a6:	95 07       	cpc	r25, r21
    18a8:	21 f4       	brne	.+8      	; 0x18b2 <insertJobIntoList+0x58>
    18aa:	90 81       	ld	r25, Z
    18ac:	88 81       	ld	r24, Y
    18ae:	98 17       	cp	r25, r24
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
    18b2:	83 81       	ldd	r24, Z+3	; 0x03
    18b4:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	19 f7       	brne	.-58     	; 0x1880 <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    18c2:	fc 01       	movw	r30, r24
    18c4:	83 81       	ldd	r24, Z+3	; 0x03
    18c6:	94 81       	ldd	r25, Z+4	; 0x04
    18c8:	9c 83       	std	Y+4, r25	; 0x04
    18ca:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    18d4:	fc 01       	movw	r30, r24
    18d6:	14 83       	std	Z+4, r17	; 0x04
    18d8:	03 83       	std	Z+3, r16	; 0x03
	}
}
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	08 95       	ret

000018e4 <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
    18e4:	6f 92       	push	r6
    18e6:	7f 92       	push	r7
    18e8:	8f 92       	push	r8
    18ea:	9f 92       	push	r9
    18ec:	af 92       	push	r10
    18ee:	bf 92       	push	r11
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	5c 01       	movw	r10, r24
    1902:	4b 01       	movw	r8, r22
    1904:	69 01       	movw	r12, r18
    1906:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
    1908:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    190c:	19 2f       	mov	r17, r25
    190e:	68 2e       	mov	r6, r24
    1910:	e3 01       	movw	r28, r6
    1912:	3e 01       	movw	r6, r28
    1914:	79 2e       	mov	r7, r25
    1916:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
    1918:	9a 82       	std	Y+2, r9	; 0x02
    191a:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
    191c:	08 83       	st	Y, r16
	job->period = period;
    191e:	cd 82       	std	Y+5, r12	; 0x05
    1920:	de 82       	std	Y+6, r13	; 0x06
    1922:	ef 82       	std	Y+7, r14	; 0x07
    1924:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
    1926:	c5 01       	movw	r24, r10
    1928:	b3 01       	movw	r22, r6
    192a:	0e 94 2d 0c 	call	0x185a	; 0x185a <insertJobIntoList>
	return job;
}
    192e:	86 2d       	mov	r24, r6
    1930:	91 2f       	mov	r25, r17
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	9f 90       	pop	r9
    1948:	8f 90       	pop	r8
    194a:	7f 90       	pop	r7
    194c:	6f 90       	pop	r6
    194e:	08 95       	ret

00001950 <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
    1964:	5a 01       	movw	r10, r20
    1966:	6b 01       	movw	r12, r22
    1968:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
    196a:	40 91 1c 01 	lds	r20, 0x011C
    196e:	50 91 1d 01 	lds	r21, 0x011D
    1972:	86 ed       	ldi	r24, 0xD6	; 214
    1974:	9b e0       	ldi	r25, 0x0B	; 11
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	2f e0       	ldi	r18, 0x0F	; 15
    197c:	0e 94 40 06 	call	0xc80	; 0xc80 <createProcess3>
    1980:	f8 2e       	mov	r15, r24
    1982:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
    1984:	be 01       	movw	r22, r28
    1986:	a6 01       	movw	r20, r12
    1988:	95 01       	movw	r18, r10
    198a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <initializeJob>
    198e:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
    1990:	12 86       	std	Z+10, r1	; 0x0a
    1992:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
    1994:	20 91 34 02 	lds	r18, 0x0234
    1998:	30 91 35 02 	lds	r19, 0x0235
    199c:	40 91 36 02 	lds	r20, 0x0236
    19a0:	50 91 37 02 	lds	r21, 0x0237
    19a4:	2a 0d       	add	r18, r10
    19a6:	3b 1d       	adc	r19, r11
    19a8:	4c 1d       	adc	r20, r12
    19aa:	5d 1d       	adc	r21, r13
    19ac:	23 87       	std	Z+11, r18	; 0x0b
    19ae:	34 87       	std	Z+12, r19	; 0x0c
    19b0:	45 87       	std	Z+13, r20	; 0x0d
    19b2:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
    19b4:	8f 2d       	mov	r24, r15
    19b6:	91 2f       	mov	r25, r17
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	bf 90       	pop	r11
    19c8:	af 90       	pop	r10
    19ca:	08 95       	ret

000019cc <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ff 92       	push	r15
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
    19e0:	5a 01       	movw	r10, r20
    19e2:	6b 01       	movw	r12, r22
    19e4:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
    19e6:	40 91 1c 01 	lds	r20, 0x011C
    19ea:	50 91 1d 01 	lds	r21, 0x011D
    19ee:	83 ec       	ldi	r24, 0xC3	; 195
    19f0:	9b e0       	ldi	r25, 0x0B	; 11
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	2d e0       	ldi	r18, 0x0D	; 13
    19f8:	0e 94 40 06 	call	0xc80	; 0xc80 <createProcess3>
    19fc:	f8 2e       	mov	r15, r24
    19fe:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
    1a00:	be 01       	movw	r22, r28
    1a02:	a6 01       	movw	r20, r12
    1a04:	95 01       	movw	r18, r10
    1a06:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <initializeJob>
    1a0a:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	92 87       	std	Z+10, r25	; 0x0a
    1a12:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
    1a14:	14 86       	std	Z+12, r1	; 0x0c
    1a16:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
    1a18:	8f 2d       	mov	r24, r15
    1a1a:	91 2f       	mov	r25, r17
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	bf 90       	pop	r11
    1a2c:	af 90       	pop	r10
    1a2e:	08 95       	ret

00001a30 <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
    1a30:	0e 94 a1 06 	call	0xd42	; 0xd42 <getProcessMemory>
    1a34:	21 e0       	ldi	r18, 0x01	; 1
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	fc 01       	movw	r30, r24
    1a3a:	34 87       	std	Z+12, r19	; 0x0c
    1a3c:	23 87       	std	Z+11, r18	; 0x0b
}
    1a3e:	08 95       	ret

00001a40 <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	8c 01       	movw	r16, r24
    1a4a:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	64 e0       	ldi	r22, 0x04	; 4
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <calloc>
    1a58:	fc 01       	movw	r30, r24
	elem->thread = thread;
    1a5a:	11 83       	std	Z+1, r17	; 0x01
    1a5c:	00 83       	st	Z, r16
	elem->next = queue->first;
    1a5e:	de 01       	movw	r26, r28
    1a60:	aa 0f       	add	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	aa 0f       	add	r26, r26
    1a66:	bb 1f       	adc	r27, r27
    1a68:	ac 0f       	add	r26, r28
    1a6a:	bd 1f       	adc	r27, r29
    1a6c:	af 55       	subi	r26, 0x5F	; 95
    1a6e:	bc 4f       	sbci	r27, 0xFC	; 252
    1a70:	8d 91       	ld	r24, X+
    1a72:	9c 91       	ld	r25, X
    1a74:	11 97       	sbiw	r26, 0x01	; 1
    1a76:	93 83       	std	Z+3, r25	; 0x03
    1a78:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
    1a7a:	11 96       	adiw	r26, 0x01	; 1
    1a7c:	fc 93       	st	X, r31
    1a7e:	ee 93       	st	-X, r30
	if (queue->count == 0)
    1a80:	14 96       	adiw	r26, 0x04	; 4
    1a82:	8c 91       	ld	r24, X
    1a84:	14 97       	sbiw	r26, 0x04	; 4
    1a86:	88 23       	and	r24, r24
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <insertThreadIntoQueue+0x52>
		queue->current = elem;
    1a8a:	13 96       	adiw	r26, 0x03	; 3
    1a8c:	fc 93       	st	X, r31
    1a8e:	ee 93       	st	-X, r30
    1a90:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
    1a92:	fe 01       	movw	r30, r28
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	ec 0f       	add	r30, r28
    1a9e:	fd 1f       	adc	r31, r29
    1aa0:	ef 55       	subi	r30, 0x5F	; 95
    1aa2:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa4:	84 81       	ldd	r24, Z+4	; 0x04
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
    1aaa:	80 91 38 02 	lds	r24, 0x0238
    1aae:	90 91 39 02 	lds	r25, 0x0239
    1ab2:	8c 17       	cp	r24, r28
    1ab4:	9d 07       	cpc	r25, r29
    1ab6:	20 f4       	brcc	.+8      	; 0x1ac0 <insertThreadIntoQueue+0x80>
    1ab8:	d0 93 39 02 	sts	0x0239, r29
    1abc:	c0 93 38 02 	sts	0x0238, r28
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	1f 91       	pop	r17
    1ac6:	0f 91       	pop	r16
    1ac8:	08 95       	ret

00001aca <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
    1ad4:	0e 94 72 06 	call	0xce4	; 0xce4 <createProcess>
    1ad8:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1ada:	be 01       	movw	r22, r28
    1adc:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <insertThreadIntoQueue>
	return thread;
}
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
    1aec:	63 e0       	ldi	r22, 0x03	; 3
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <createThread2>
}
    1af4:	08 95       	ret

00001af6 <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	eb 01       	movw	r28, r22
    1b00:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
    1b02:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <createProcess2>
    1b06:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1b08:	be 01       	movw	r22, r28
    1b0a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <insertThreadIntoQueue>
	return thread;
}
    1b0e:	c8 01       	movw	r24, r16
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	eb 01       	movw	r28, r22
    1b24:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
    1b26:	a9 01       	movw	r20, r18
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	0e 94 40 06 	call	0xc80	; 0xc80 <createProcess3>
    1b2e:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1b30:	be 01       	movw	r22, r28
    1b32:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <insertThreadIntoQueue>
	return thread;
}
    1b36:	c8 01       	movw	r24, r16
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    1b42:	80 91 38 02 	lds	r24, 0x0238
    1b46:	90 91 39 02 	lds	r25, 0x0239
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <rr_schedule+0xc>
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	29 f4       	brne	.+10     	; 0x1b5c <rr_schedule+0x1a>
    1b52:	10 92 38 02 	sts	0x0238, r1
    1b56:	10 92 39 02 	sts	0x0239, r1
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <rr_schedule+0x3a>
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	ee 0f       	add	r30, r30
    1b60:	ff 1f       	adc	r31, r31
    1b62:	ee 0f       	add	r30, r30
    1b64:	ff 1f       	adc	r31, r31
    1b66:	e8 0f       	add	r30, r24
    1b68:	f9 1f       	adc	r31, r25
    1b6a:	ef 55       	subi	r30, 0x5F	; 95
    1b6c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b6e:	24 81       	ldd	r18, Z+4	; 0x04
    1b70:	22 23       	and	r18, r18
    1b72:	61 f3       	breq	.-40     	; 0x1b4c <rr_schedule+0xa>
    1b74:	80 93 38 02 	sts	0x0238, r24
    1b78:	90 93 39 02 	sts	0x0239, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	ee 0f       	add	r30, r30
    1b84:	ff 1f       	adc	r31, r31
    1b86:	e8 0f       	add	r30, r24
    1b88:	f9 1f       	adc	r31, r25
    1b8a:	ef 55       	subi	r30, 0x5F	; 95
    1b8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b8e:	24 81       	ldd	r18, Z+4	; 0x04
    1b90:	22 23       	and	r18, r18
    1b92:	c9 f0       	breq	.+50     	; 0x1bc6 <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    1b94:	a2 81       	ldd	r26, Z+2	; 0x02
    1b96:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    1b98:	12 96       	adiw	r26, 0x02	; 2
    1b9a:	0d 90       	ld	r0, X+
    1b9c:	bc 91       	ld	r27, X
    1b9e:	a0 2d       	mov	r26, r0
    1ba0:	10 97       	sbiw	r26, 0x00	; 0
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <rr_schedule+0x66>
    1ba4:	a0 81       	ld	r26, Z
    1ba6:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ee 0f       	add	r30, r30
    1bac:	ff 1f       	adc	r31, r31
    1bae:	ee 0f       	add	r30, r30
    1bb0:	ff 1f       	adc	r31, r31
    1bb2:	e8 0f       	add	r30, r24
    1bb4:	f9 1f       	adc	r31, r25
    1bb6:	ef 55       	subi	r30, 0x5F	; 95
    1bb8:	fc 4f       	sbci	r31, 0xFC	; 252
    1bba:	b3 83       	std	Z+3, r27	; 0x03
    1bbc:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    1bbe:	2d 91       	ld	r18, X+
    1bc0:	3c 91       	ld	r19, X
    1bc2:	11 97       	sbiw	r26, 0x01	; 1
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    1bca:	c9 01       	movw	r24, r18
    1bcc:	08 95       	ret

00001bce <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    1bd4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <getCurrentProcess>
    1bd8:	be 01       	movw	r22, r28
    1bda:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <insertThreadIntoQueue>
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    1be4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <getCurrentProcess>
}
    1be8:	08 95       	ret

00001bea <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 f5 06 	call	0xdea	; 0xdea <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	11 f0       	breq	.+4      	; 0x1bfa <schedule_next+0x10>
	switchProcess(next); // Will not return here.
    1bf6:	0e 94 34 06 	call	0xc68	; 0xc68 <switchProcess>
    1bfa:	08 95       	ret

00001bfc <processor_idle>:
}

void processor_idle() {
	sleep_enable();
    1bfc:	83 b7       	in	r24, 0x33	; 51
    1bfe:	81 60       	ori	r24, 0x01	; 1
    1c00:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
    1c02:	83 b7       	in	r24, 0x33	; 51
    1c04:	81 7f       	andi	r24, 0xF1	; 241
    1c06:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
    1c08:	78 94       	sei
	sleep_cpu();
    1c0a:	88 95       	sleep
}
    1c0c:	08 95       	ret

00001c0e <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
    1c0e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <processor_idle>
    1c12:	fd cf       	rjmp	.-6      	; 0x1c0e <processor_loop_idle>

00001c14 <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    1c14:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    1c16:	84 b7       	in	r24, 0x34	; 52
    1c18:	88 70       	andi	r24, 0x08	; 8
    1c1a:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    1c1c:	80 e1       	ldi	r24, 0x10	; 16
    1c1e:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    1c22:	88 e0       	ldi	r24, 0x08	; 8
    1c24:	80 93 60 00 	sts	0x0060, r24
    1c28:	ff cf       	rjmp	.-2      	; 0x1c28 <HARDWARE_RESET+0x14>

00001c2a <calloc>:
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	68 9f       	mul	r22, r24
    1c38:	80 01       	movw	r16, r0
    1c3a:	69 9f       	mul	r22, r25
    1c3c:	10 0d       	add	r17, r0
    1c3e:	78 9f       	mul	r23, r24
    1c40:	10 0d       	add	r17, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	c8 01       	movw	r24, r16
    1c46:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <malloc>
    1c4a:	e8 2e       	mov	r14, r24
    1c4c:	e7 01       	movw	r28, r14
    1c4e:	7e 01       	movw	r14, r28
    1c50:	f9 2e       	mov	r15, r25
    1c52:	e7 01       	movw	r28, r14
    1c54:	20 97       	sbiw	r28, 0x00	; 0
    1c56:	31 f0       	breq	.+12     	; 0x1c64 <calloc+0x3a>
    1c58:	8e 2d       	mov	r24, r14
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	70 e0       	ldi	r23, 0x00	; 0
    1c5e:	a8 01       	movw	r20, r16
    1c60:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <memset>
    1c64:	ce 01       	movw	r24, r28
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	08 95       	ret

00001c74 <malloc>:
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	10 f4       	brcc	.+4      	; 0x1c82 <malloc+0xe>
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	e0 91 c6 03 	lds	r30, 0x03C6
    1c86:	f0 91 c7 03 	lds	r31, 0x03C7
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	26 c0       	rjmp	.+76     	; 0x1ce0 <malloc+0x6c>
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	68 17       	cp	r22, r24
    1c9a:	79 07       	cpc	r23, r25
    1c9c:	e0 f0       	brcs	.+56     	; 0x1cd6 <malloc+0x62>
    1c9e:	68 17       	cp	r22, r24
    1ca0:	79 07       	cpc	r23, r25
    1ca2:	81 f4       	brne	.+32     	; 0x1cc4 <malloc+0x50>
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	21 15       	cp	r18, r1
    1caa:	31 05       	cpc	r19, r1
    1cac:	31 f0       	breq	.+12     	; 0x1cba <malloc+0x46>
    1cae:	d9 01       	movw	r26, r18
    1cb0:	13 96       	adiw	r26, 0x03	; 3
    1cb2:	9c 93       	st	X, r25
    1cb4:	8e 93       	st	-X, r24
    1cb6:	12 97       	sbiw	r26, 0x02	; 2
    1cb8:	2b c0       	rjmp	.+86     	; 0x1d10 <malloc+0x9c>
    1cba:	90 93 c7 03 	sts	0x03C7, r25
    1cbe:	80 93 c6 03 	sts	0x03C6, r24
    1cc2:	26 c0       	rjmp	.+76     	; 0x1d10 <malloc+0x9c>
    1cc4:	41 15       	cp	r20, r1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <malloc+0x5c>
    1cca:	64 17       	cp	r22, r20
    1ccc:	75 07       	cpc	r23, r21
    1cce:	18 f4       	brcc	.+6      	; 0x1cd6 <malloc+0x62>
    1cd0:	ab 01       	movw	r20, r22
    1cd2:	e9 01       	movw	r28, r18
    1cd4:	df 01       	movw	r26, r30
    1cd6:	9f 01       	movw	r18, r30
    1cd8:	72 81       	ldd	r23, Z+2	; 0x02
    1cda:	63 81       	ldd	r22, Z+3	; 0x03
    1cdc:	e7 2f       	mov	r30, r23
    1cde:	f6 2f       	mov	r31, r22
    1ce0:	30 97       	sbiw	r30, 0x00	; 0
    1ce2:	c1 f6       	brne	.-80     	; 0x1c94 <malloc+0x20>
    1ce4:	41 15       	cp	r20, r1
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	01 f1       	breq	.+64     	; 0x1d2a <malloc+0xb6>
    1cea:	48 1b       	sub	r20, r24
    1cec:	59 0b       	sbc	r21, r25
    1cee:	44 30       	cpi	r20, 0x04	; 4
    1cf0:	51 05       	cpc	r21, r1
    1cf2:	80 f4       	brcc	.+32     	; 0x1d14 <malloc+0xa0>
    1cf4:	12 96       	adiw	r26, 0x02	; 2
    1cf6:	8d 91       	ld	r24, X+
    1cf8:	9c 91       	ld	r25, X
    1cfa:	13 97       	sbiw	r26, 0x03	; 3
    1cfc:	20 97       	sbiw	r28, 0x00	; 0
    1cfe:	19 f0       	breq	.+6      	; 0x1d06 <malloc+0x92>
    1d00:	9b 83       	std	Y+3, r25	; 0x03
    1d02:	8a 83       	std	Y+2, r24	; 0x02
    1d04:	04 c0       	rjmp	.+8      	; 0x1d0e <malloc+0x9a>
    1d06:	90 93 c7 03 	sts	0x03C7, r25
    1d0a:	80 93 c6 03 	sts	0x03C6, r24
    1d0e:	fd 01       	movw	r30, r26
    1d10:	32 96       	adiw	r30, 0x02	; 2
    1d12:	46 c0       	rjmp	.+140    	; 0x1da0 <malloc+0x12c>
    1d14:	fd 01       	movw	r30, r26
    1d16:	e4 0f       	add	r30, r20
    1d18:	f5 1f       	adc	r31, r21
    1d1a:	81 93       	st	Z+, r24
    1d1c:	91 93       	st	Z+, r25
    1d1e:	42 50       	subi	r20, 0x02	; 2
    1d20:	50 40       	sbci	r21, 0x00	; 0
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	5c 93       	st	X, r21
    1d26:	4e 93       	st	-X, r20
    1d28:	3b c0       	rjmp	.+118    	; 0x1da0 <malloc+0x12c>
    1d2a:	20 91 c4 03 	lds	r18, 0x03C4
    1d2e:	30 91 c5 03 	lds	r19, 0x03C5
    1d32:	21 15       	cp	r18, r1
    1d34:	31 05       	cpc	r19, r1
    1d36:	41 f4       	brne	.+16     	; 0x1d48 <malloc+0xd4>
    1d38:	20 91 2b 02 	lds	r18, 0x022B
    1d3c:	30 91 2c 02 	lds	r19, 0x022C
    1d40:	30 93 c5 03 	sts	0x03C5, r19
    1d44:	20 93 c4 03 	sts	0x03C4, r18
    1d48:	20 91 2d 02 	lds	r18, 0x022D
    1d4c:	30 91 2e 02 	lds	r19, 0x022E
    1d50:	21 15       	cp	r18, r1
    1d52:	31 05       	cpc	r19, r1
    1d54:	41 f4       	brne	.+16     	; 0x1d66 <malloc+0xf2>
    1d56:	2d b7       	in	r18, 0x3d	; 61
    1d58:	3e b7       	in	r19, 0x3e	; 62
    1d5a:	40 91 29 02 	lds	r20, 0x0229
    1d5e:	50 91 2a 02 	lds	r21, 0x022A
    1d62:	24 1b       	sub	r18, r20
    1d64:	35 0b       	sbc	r19, r21
    1d66:	e0 91 c4 03 	lds	r30, 0x03C4
    1d6a:	f0 91 c5 03 	lds	r31, 0x03C5
    1d6e:	e2 17       	cp	r30, r18
    1d70:	f3 07       	cpc	r31, r19
    1d72:	a0 f4       	brcc	.+40     	; 0x1d9c <malloc+0x128>
    1d74:	2e 1b       	sub	r18, r30
    1d76:	3f 0b       	sbc	r19, r31
    1d78:	28 17       	cp	r18, r24
    1d7a:	39 07       	cpc	r19, r25
    1d7c:	78 f0       	brcs	.+30     	; 0x1d9c <malloc+0x128>
    1d7e:	ac 01       	movw	r20, r24
    1d80:	4e 5f       	subi	r20, 0xFE	; 254
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255
    1d84:	24 17       	cp	r18, r20
    1d86:	35 07       	cpc	r19, r21
    1d88:	48 f0       	brcs	.+18     	; 0x1d9c <malloc+0x128>
    1d8a:	4e 0f       	add	r20, r30
    1d8c:	5f 1f       	adc	r21, r31
    1d8e:	50 93 c5 03 	sts	0x03C5, r21
    1d92:	40 93 c4 03 	sts	0x03C4, r20
    1d96:	81 93       	st	Z+, r24
    1d98:	91 93       	st	Z+, r25
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <malloc+0x12c>
    1d9c:	e0 e0       	ldi	r30, 0x00	; 0
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	cf 01       	movw	r24, r30
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <free>:
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <free+0xa>
    1db0:	91 c0       	rjmp	.+290    	; 0x1ed4 <free+0x12c>
    1db2:	fc 01       	movw	r30, r24
    1db4:	32 97       	sbiw	r30, 0x02	; 2
    1db6:	13 82       	std	Z+3, r1	; 0x03
    1db8:	12 82       	std	Z+2, r1	; 0x02
    1dba:	60 91 c6 03 	lds	r22, 0x03C6
    1dbe:	70 91 c7 03 	lds	r23, 0x03C7
    1dc2:	61 15       	cp	r22, r1
    1dc4:	71 05       	cpc	r23, r1
    1dc6:	81 f4       	brne	.+32     	; 0x1de8 <free+0x40>
    1dc8:	20 81       	ld	r18, Z
    1dca:	31 81       	ldd	r19, Z+1	; 0x01
    1dcc:	28 0f       	add	r18, r24
    1dce:	39 1f       	adc	r19, r25
    1dd0:	80 91 c4 03 	lds	r24, 0x03C4
    1dd4:	90 91 c5 03 	lds	r25, 0x03C5
    1dd8:	82 17       	cp	r24, r18
    1dda:	93 07       	cpc	r25, r19
    1ddc:	99 f5       	brne	.+102    	; 0x1e44 <free+0x9c>
    1dde:	f0 93 c5 03 	sts	0x03C5, r31
    1de2:	e0 93 c4 03 	sts	0x03C4, r30
    1de6:	76 c0       	rjmp	.+236    	; 0x1ed4 <free+0x12c>
    1de8:	db 01       	movw	r26, r22
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <free+0x4c>
    1df0:	cd 01       	movw	r24, r26
    1df2:	d9 01       	movw	r26, r18
    1df4:	ae 17       	cp	r26, r30
    1df6:	bf 07       	cpc	r27, r31
    1df8:	48 f4       	brcc	.+18     	; 0x1e0c <free+0x64>
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	2d 91       	ld	r18, X+
    1dfe:	3c 91       	ld	r19, X
    1e00:	13 97       	sbiw	r26, 0x03	; 3
    1e02:	21 15       	cp	r18, r1
    1e04:	31 05       	cpc	r19, r1
    1e06:	a1 f7       	brne	.-24     	; 0x1df0 <free+0x48>
    1e08:	cd 01       	movw	r24, r26
    1e0a:	21 c0       	rjmp	.+66     	; 0x1e4e <free+0xa6>
    1e0c:	b3 83       	std	Z+3, r27	; 0x03
    1e0e:	a2 83       	std	Z+2, r26	; 0x02
    1e10:	ef 01       	movw	r28, r30
    1e12:	49 91       	ld	r20, Y+
    1e14:	59 91       	ld	r21, Y+
    1e16:	9e 01       	movw	r18, r28
    1e18:	24 0f       	add	r18, r20
    1e1a:	35 1f       	adc	r19, r21
    1e1c:	a2 17       	cp	r26, r18
    1e1e:	b3 07       	cpc	r27, r19
    1e20:	79 f4       	brne	.+30     	; 0x1e40 <free+0x98>
    1e22:	2d 91       	ld	r18, X+
    1e24:	3c 91       	ld	r19, X
    1e26:	11 97       	sbiw	r26, 0x01	; 1
    1e28:	24 0f       	add	r18, r20
    1e2a:	35 1f       	adc	r19, r21
    1e2c:	2e 5f       	subi	r18, 0xFE	; 254
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	31 83       	std	Z+1, r19	; 0x01
    1e32:	20 83       	st	Z, r18
    1e34:	12 96       	adiw	r26, 0x02	; 2
    1e36:	2d 91       	ld	r18, X+
    1e38:	3c 91       	ld	r19, X
    1e3a:	13 97       	sbiw	r26, 0x03	; 3
    1e3c:	33 83       	std	Z+3, r19	; 0x03
    1e3e:	22 83       	std	Z+2, r18	; 0x02
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	29 f4       	brne	.+10     	; 0x1e4e <free+0xa6>
    1e44:	f0 93 c7 03 	sts	0x03C7, r31
    1e48:	e0 93 c6 03 	sts	0x03C6, r30
    1e4c:	43 c0       	rjmp	.+134    	; 0x1ed4 <free+0x12c>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	13 96       	adiw	r26, 0x03	; 3
    1e52:	fc 93       	st	X, r31
    1e54:	ee 93       	st	-X, r30
    1e56:	12 97       	sbiw	r26, 0x02	; 2
    1e58:	4d 91       	ld	r20, X+
    1e5a:	5d 91       	ld	r21, X+
    1e5c:	a4 0f       	add	r26, r20
    1e5e:	b5 1f       	adc	r27, r21
    1e60:	ea 17       	cp	r30, r26
    1e62:	fb 07       	cpc	r31, r27
    1e64:	69 f4       	brne	.+26     	; 0x1e80 <free+0xd8>
    1e66:	20 81       	ld	r18, Z
    1e68:	31 81       	ldd	r19, Z+1	; 0x01
    1e6a:	24 0f       	add	r18, r20
    1e6c:	35 1f       	adc	r19, r21
    1e6e:	2e 5f       	subi	r18, 0xFE	; 254
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	ec 01       	movw	r28, r24
    1e74:	39 83       	std	Y+1, r19	; 0x01
    1e76:	28 83       	st	Y, r18
    1e78:	22 81       	ldd	r18, Z+2	; 0x02
    1e7a:	33 81       	ldd	r19, Z+3	; 0x03
    1e7c:	3b 83       	std	Y+3, r19	; 0x03
    1e7e:	2a 83       	std	Y+2, r18	; 0x02
    1e80:	e0 e0       	ldi	r30, 0x00	; 0
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <free+0xe2>
    1e86:	fb 01       	movw	r30, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	db 01       	movw	r26, r22
    1e8c:	12 96       	adiw	r26, 0x02	; 2
    1e8e:	8d 91       	ld	r24, X+
    1e90:	9c 91       	ld	r25, X
    1e92:	13 97       	sbiw	r26, 0x03	; 3
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	b9 f7       	brne	.-18     	; 0x1e86 <free+0xde>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	2e 5f       	subi	r18, 0xFE	; 254
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	8d 91       	ld	r24, X+
    1ea0:	9c 91       	ld	r25, X
    1ea2:	11 97       	sbiw	r26, 0x01	; 1
    1ea4:	82 0f       	add	r24, r18
    1ea6:	93 1f       	adc	r25, r19
    1ea8:	40 91 c4 03 	lds	r20, 0x03C4
    1eac:	50 91 c5 03 	lds	r21, 0x03C5
    1eb0:	48 17       	cp	r20, r24
    1eb2:	59 07       	cpc	r21, r25
    1eb4:	79 f4       	brne	.+30     	; 0x1ed4 <free+0x12c>
    1eb6:	30 97       	sbiw	r30, 0x00	; 0
    1eb8:	29 f4       	brne	.+10     	; 0x1ec4 <free+0x11c>
    1eba:	10 92 c7 03 	sts	0x03C7, r1
    1ebe:	10 92 c6 03 	sts	0x03C6, r1
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <free+0x120>
    1ec4:	13 82       	std	Z+3, r1	; 0x03
    1ec6:	12 82       	std	Z+2, r1	; 0x02
    1ec8:	22 50       	subi	r18, 0x02	; 2
    1eca:	30 40       	sbci	r19, 0x00	; 0
    1ecc:	30 93 c5 03 	sts	0x03C5, r19
    1ed0:	20 93 c4 03 	sts	0x03C4, r18
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	08 95       	ret

00001eda <memset>:
    1eda:	dc 01       	movw	r26, r24
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <memset+0x6>
    1ede:	6d 93       	st	X+, r22
    1ee0:	41 50       	subi	r20, 0x01	; 1
    1ee2:	50 40       	sbci	r21, 0x00	; 0
    1ee4:	e0 f7       	brcc	.-8      	; 0x1ede <memset+0x4>
    1ee6:	08 95       	ret

00001ee8 <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    1ee8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    1eec:	08 95       	ret
    1eee:	f8 94       	cli

00001ef0 <__stop_program>:
    1ef0:	ff cf       	rjmp	.-2      	; 0x1ef0 <__stop_program>
