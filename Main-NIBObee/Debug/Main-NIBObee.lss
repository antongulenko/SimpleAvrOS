
Main-NIBObee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  0000240e  000024a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000240e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  008001f8  008001f8  0000259a  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000259c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000318  00000000  00000000  00002df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001367  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004c86  00000000  00000000  00004476  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ddf  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004c19  00000000  00000000  00009edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000960  00000000  00000000  0000eaf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000192c  00000000  00000000  0000f454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f9b  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004ea19  00000000  00000000  00012d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000626  00000000  00000000  00061734  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a8  00000000  00000000  00061d5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_26>
      6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      7c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      80:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_32>
      84:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_33>
      88:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	c0 e0       	ldi	r28, 0x00	; 0
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e0       	ldi	r30, 0x0E	; 14
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3f       	cpi	r26, 0xF8	; 248
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	14 e0       	ldi	r17, 0x04	; 4
      b4:	a8 ef       	ldi	r26, 0xF8	; 248
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 35       	cpi	r26, 0x54	; 84
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 c6 00 	call	0x18c	; 0x18c <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <init_ports_m1284P>

000000ca <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <init_timer_m1284P>

000000ce <init_timer_kernel_init>:
	#define MILLISECOND_TIMER_VALUE ((uint16_t) 2500)
	
	setTimerCompareValue(Timer3A, MILLISECOND_TIMER_VALUE);
	setTimerCompareValue(Timer3B, MILLISECOND_TIMER_VALUE * 20);
}
KERNEL_INIT(init_timer)
      ce:	0e 94 b2 02 	call	0x564	; 0x564 <init_timer>

000000d2 <init_nibobee_leds_kernel_init>:
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
}
KERNEL_INIT(init_nibobee_leds)
      d2:	0e 94 20 03 	call	0x640	; 0x640 <init_nibobee_leds>

000000d6 <init_nibobee_buttons_kernel_init>:
	INIT_BUTTON(ButtonLeftBackward, PinC5, NIBOBEE_BUTTON, 21)
	INIT_BUTTON(ButtonLeftForward, PinC4, NIBOBEE_BUTTON, 20)
	INIT_BUTTON(ButtonRightBackward, PinC7, NIBOBEE_BUTTON, 22)
	INIT_BUTTON(ButtonRightForward, PinC6, NIBOBEE_BUTTON, 23)
}
KERNEL_INIT(init_nibobee_buttons)
      d6:	0e 94 85 03 	call	0x70a	; 0x70a <init_nibobee_buttons>

000000da <init_nibobee_motors_kernel_init>:
	// Don't know why, but the lib does this... Seems to enable internal PullUp.
	// Pins will be controlled by the timer anyways.
	setPinOne(RightMotorBase->pwmTimer->outputComparePin);
	setPinOne(LeftMotorBase->pwmTimer->outputComparePin);
}
KERNEL_INIT(init_nibobee_motors)
      da:	0e 94 fe 03 	call	0x7fc	; 0x7fc <init_nibobee_motors>

000000de <init_smooth_motors_kernel_init>:
	#define MOTOR_ADJUSTMENT_STEP 300
	
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, MOTOR_ADJUSTMENT_STEP)
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, MOTOR_ADJUSTMENT_STEP)
}
KERNEL_INIT(init_smooth_motors)
      de:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init_smooth_motors>

000000e2 <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      e2:	0e 94 38 05 	call	0xa70	; 0xa70 <init_twi>

000000e6 <init_kernel_kernel_init>:
	#ifdef TIMER_INTERRUPT_B
	enableTimerInterrupt(CLOCKTIMER_B);
	#endif
	sei();
}
KERNEL_INIT(init_kernel)
      e6:	0e 94 8b 0a 	call	0x1516	; 0x1516 <init_kernel>
      ea:	0e 94 9f 0a 	call	0x153e	; 0x153e <main>
      ee:	0c 94 02 12 	jmp	0x2404	; 0x2404 <MainProcessEnd>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <twi_stop>:
static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base | _BV(TWSTO);
      f6:	85 e9       	ldi	r24, 0x95	; 149
      f8:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
      fc:	10 92 e3 03 	sts	0x03E3, r1
     100:	10 92 e2 03 	sts	0x03E2, r1
}
     104:	08 95       	ret

00000106 <twi_ack_receive>:

static inline void twi_ack_receive() {
	// Directly after a (repeated) start condition, in MR mode,
	// buffer size 0 and 1 both lead to a NACK of the first received byte.
	// In case of buffer size 0, this byte will be 'useless'.
	if (alreadyHandled + 1 < twi_buffer.size) {
     106:	80 91 81 03 	lds	r24, 0x0381
     10a:	90 91 82 03 	lds	r25, 0x0382
     10e:	01 96       	adiw	r24, 0x01	; 1
     110:	20 91 dd 03 	lds	r18, 0x03DD
     114:	30 91 de 03 	lds	r19, 0x03DE
     118:	82 17       	cp	r24, r18
     11a:	93 07       	cpc	r25, r19
     11c:	10 f4       	brcc	.+4      	; 0x122 <twi_ack_receive+0x1c>
		twi_ack(); // Still more than one byte to go.
     11e:	85 ec       	ldi	r24, 0xC5	; 197
     120:	01 c0       	rjmp	.+2      	; 0x124 <twi_ack_receive+0x1e>
	} else {
		twi_continue();  // Want to receive one more byte. Next byte will get NOT ACK.
     122:	85 e8       	ldi	r24, 0x85	; 133
     124:	80 93 bc 00 	sts	0x00BC, r24
     128:	08 95       	ret

0000012a <twi_read_byte>:
	
	// Additional if-guard necessary, e.g. if the receive-buffer size
	// is zero (because in Master-Receiver mode, we have to receive
	// AT LEAST one byte, so we will end up here, even if the receive-
	// buffer has no space at all reserved. Fix by skipping this byte).
	if (alreadyHandled < twi_buffer.size)
     12a:	80 91 81 03 	lds	r24, 0x0381
     12e:	90 91 82 03 	lds	r25, 0x0382
     132:	20 91 dd 03 	lds	r18, 0x03DD
     136:	30 91 de 03 	lds	r19, 0x03DE
     13a:	82 17       	cp	r24, r18
     13c:	93 07       	cpc	r25, r19
     13e:	70 f4       	brcc	.+28     	; 0x15c <twi_read_byte+0x32>
		twi_buffer.data[alreadyHandled++] = TWDR;
     140:	20 91 bb 00 	lds	r18, 0x00BB
     144:	e0 91 db 03 	lds	r30, 0x03DB
     148:	f0 91 dc 03 	lds	r31, 0x03DC
     14c:	e8 0f       	add	r30, r24
     14e:	f9 1f       	adc	r31, r25
     150:	20 83       	st	Z, r18
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	90 93 82 03 	sts	0x0382, r25
     158:	80 93 81 03 	sts	0x0381, r24
     15c:	08 95       	ret

0000015e <fillSendBuffer>:
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
	}
#endif

static inline void fillSendBuffer(byte operation, TWIBuffer parameters) {
     15e:	9b 01       	movw	r18, r22
	sendBuffer.data[0] = operation;
     160:	e0 91 9b 01 	lds	r30, 0x019B
     164:	f0 91 9c 01 	lds	r31, 0x019C
     168:	80 83       	st	Z, r24
	sendBuffer.size = parameters.size + 1;
     16a:	cb 01       	movw	r24, r22
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	90 93 9e 01 	sts	0x019E, r25
     172:	80 93 9d 01 	sts	0x019D, r24
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
     176:	e0 91 9b 01 	lds	r30, 0x019B
     17a:	f0 91 9c 01 	lds	r31, 0x019C
     17e:	31 96       	adiw	r30, 0x01	; 1
     180:	cf 01       	movw	r24, r30
     182:	ba 01       	movw	r22, r20
     184:	a9 01       	movw	r20, r18
     186:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <memcpy>
}
     18a:	08 95       	ret

0000018c <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     18c:	84 b7       	in	r24, 0x34	; 52
     18e:	80 93 f8 01 	sts	0x01F8, r24
	MCUSR = 0;
     192:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     194:	88 e1       	ldi	r24, 0x18	; 24
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	80 93 60 00 	sts	0x0060, r24
     19e:	10 92 60 00 	sts	0x0060, r1
     1a2:	0f be       	out	0x3f, r0	; 63
	#endif
}
     1a4:	08 95       	ret

000001a6 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     1a6:	80 91 f8 01 	lds	r24, 0x01F8
     1aa:	08 95       	ret

000001ac <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1ac:	a6 e0       	ldi	r26, 0x06	; 6
     1ae:	b4 e0       	ldi	r27, 0x04	; 4
     1b0:	ec ed       	ldi	r30, 0xDC	; 220
     1b2:	f1 e0       	ldi	r31, 0x01	; 1
     1b4:	86 e0       	ldi	r24, 0x06	; 6
     1b6:	01 90       	ld	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	81 50       	subi	r24, 0x01	; 1
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <init_ports_m1284P+0xa>
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	94 e0       	ldi	r25, 0x04	; 4
     1c2:	90 93 b9 03 	sts	0x03B9, r25
     1c6:	80 93 b8 03 	sts	0x03B8, r24
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	20 93 ba 03 	sts	0x03BA, r18
     1d0:	90 93 37 03 	sts	0x0337, r25
     1d4:	80 93 36 03 	sts	0x0336, r24
     1d8:	22 e0       	ldi	r18, 0x02	; 2
     1da:	20 93 38 03 	sts	0x0338, r18
     1de:	90 93 04 04 	sts	0x0404, r25
     1e2:	80 93 03 04 	sts	0x0403, r24
     1e6:	24 e0       	ldi	r18, 0x04	; 4
     1e8:	20 93 05 04 	sts	0x0405, r18
     1ec:	90 93 e0 03 	sts	0x03E0, r25
     1f0:	80 93 df 03 	sts	0x03DF, r24
     1f4:	28 e0       	ldi	r18, 0x08	; 8
     1f6:	20 93 e1 03 	sts	0x03E1, r18
     1fa:	90 93 73 03 	sts	0x0373, r25
     1fe:	80 93 72 03 	sts	0x0372, r24
     202:	20 e1       	ldi	r18, 0x10	; 16
     204:	20 93 74 03 	sts	0x0374, r18
     208:	90 93 04 02 	sts	0x0204, r25
     20c:	80 93 03 02 	sts	0x0203, r24
     210:	20 e2       	ldi	r18, 0x20	; 32
     212:	20 93 05 02 	sts	0x0205, r18
     216:	90 93 27 02 	sts	0x0227, r25
     21a:	80 93 26 02 	sts	0x0226, r24
     21e:	20 e4       	ldi	r18, 0x40	; 64
     220:	20 93 28 02 	sts	0x0228, r18
     224:	90 93 89 03 	sts	0x0389, r25
     228:	80 93 88 03 	sts	0x0388, r24
     22c:	80 e8       	ldi	r24, 0x80	; 128
     22e:	80 93 8a 03 	sts	0x038A, r24
	INIT_PORT_AND_PINS(B);
     232:	a8 e7       	ldi	r26, 0x78	; 120
     234:	b3 e0       	ldi	r27, 0x03	; 3
     236:	e6 ed       	ldi	r30, 0xD6	; 214
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	86 e0       	ldi	r24, 0x06	; 6
     23c:	01 90       	ld	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	81 50       	subi	r24, 0x01	; 1
     242:	e1 f7       	brne	.-8      	; 0x23c <init_ports_m1284P+0x90>
     244:	88 e7       	ldi	r24, 0x78	; 120
     246:	93 e0       	ldi	r25, 0x03	; 3
     248:	90 93 f9 03 	sts	0x03F9, r25
     24c:	80 93 f8 03 	sts	0x03F8, r24
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	20 93 fa 03 	sts	0x03FA, r18
     256:	90 93 86 03 	sts	0x0386, r25
     25a:	80 93 85 03 	sts	0x0385, r24
     25e:	22 e0       	ldi	r18, 0x02	; 2
     260:	20 93 87 03 	sts	0x0387, r18
     264:	90 93 2e 02 	sts	0x022E, r25
     268:	80 93 2d 02 	sts	0x022D, r24
     26c:	24 e0       	ldi	r18, 0x04	; 4
     26e:	20 93 2f 02 	sts	0x022F, r18
     272:	90 93 1d 04 	sts	0x041D, r25
     276:	80 93 1c 04 	sts	0x041C, r24
     27a:	28 e0       	ldi	r18, 0x08	; 8
     27c:	20 93 1e 04 	sts	0x041E, r18
     280:	90 93 fc 03 	sts	0x03FC, r25
     284:	80 93 fb 03 	sts	0x03FB, r24
     288:	20 e1       	ldi	r18, 0x10	; 16
     28a:	20 93 fd 03 	sts	0x03FD, r18
     28e:	90 93 d9 03 	sts	0x03D9, r25
     292:	80 93 d8 03 	sts	0x03D8, r24
     296:	20 e2       	ldi	r18, 0x20	; 32
     298:	20 93 da 03 	sts	0x03DA, r18
     29c:	90 93 43 04 	sts	0x0443, r25
     2a0:	80 93 42 04 	sts	0x0442, r24
     2a4:	20 e4       	ldi	r18, 0x40	; 64
     2a6:	20 93 44 04 	sts	0x0444, r18
     2aa:	90 93 8c 03 	sts	0x038C, r25
     2ae:	80 93 8b 03 	sts	0x038B, r24
     2b2:	80 e8       	ldi	r24, 0x80	; 128
     2b4:	80 93 8d 03 	sts	0x038D, r24
	INIT_PORT_AND_PINS(C);
     2b8:	ae e9       	ldi	r26, 0x9E	; 158
     2ba:	b3 e0       	ldi	r27, 0x03	; 3
     2bc:	e0 ed       	ldi	r30, 0xD0	; 208
     2be:	f1 e0       	ldi	r31, 0x01	; 1
     2c0:	86 e0       	ldi	r24, 0x06	; 6
     2c2:	01 90       	ld	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <init_ports_m1284P+0x116>
     2ca:	8e e9       	ldi	r24, 0x9E	; 158
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	90 93 7f 03 	sts	0x037F, r25
     2d2:	80 93 7e 03 	sts	0x037E, r24
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	20 93 80 03 	sts	0x0380, r18
     2dc:	90 93 0e 02 	sts	0x020E, r25
     2e0:	80 93 0d 02 	sts	0x020D, r24
     2e4:	22 e0       	ldi	r18, 0x02	; 2
     2e6:	20 93 0f 02 	sts	0x020F, r18
     2ea:	90 93 51 03 	sts	0x0351, r25
     2ee:	80 93 50 03 	sts	0x0350, r24
     2f2:	24 e0       	ldi	r18, 0x04	; 4
     2f4:	20 93 52 03 	sts	0x0352, r18
     2f8:	90 93 70 03 	sts	0x0370, r25
     2fc:	80 93 6f 03 	sts	0x036F, r24
     300:	28 e0       	ldi	r18, 0x08	; 8
     302:	20 93 71 03 	sts	0x0371, r18
     306:	90 93 11 02 	sts	0x0211, r25
     30a:	80 93 10 02 	sts	0x0210, r24
     30e:	20 e1       	ldi	r18, 0x10	; 16
     310:	20 93 12 02 	sts	0x0212, r18
     314:	90 93 76 03 	sts	0x0376, r25
     318:	80 93 75 03 	sts	0x0375, r24
     31c:	20 e2       	ldi	r18, 0x20	; 32
     31e:	20 93 77 03 	sts	0x0377, r18
     322:	90 93 c7 03 	sts	0x03C7, r25
     326:	80 93 c6 03 	sts	0x03C6, r24
     32a:	20 e4       	ldi	r18, 0x40	; 64
     32c:	20 93 c8 03 	sts	0x03C8, r18
     330:	90 93 21 02 	sts	0x0221, r25
     334:	80 93 20 02 	sts	0x0220, r24
     338:	80 e8       	ldi	r24, 0x80	; 128
     33a:	80 93 22 02 	sts	0x0222, r24
	INIT_PORT_AND_PINS(D);
     33e:	a3 e5       	ldi	r26, 0x53	; 83
     340:	b3 e0       	ldi	r27, 0x03	; 3
     342:	ea ec       	ldi	r30, 0xCA	; 202
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	01 90       	ld	r0, Z+
     34a:	0d 92       	st	X+, r0
     34c:	81 50       	subi	r24, 0x01	; 1
     34e:	e1 f7       	brne	.-8      	; 0x348 <init_ports_m1284P+0x19c>
     350:	83 e5       	ldi	r24, 0x53	; 83
     352:	93 e0       	ldi	r25, 0x03	; 3
     354:	90 93 35 02 	sts	0x0235, r25
     358:	80 93 34 02 	sts	0x0234, r24
     35c:	21 e0       	ldi	r18, 0x01	; 1
     35e:	20 93 36 02 	sts	0x0236, r18
     362:	90 93 35 04 	sts	0x0435, r25
     366:	80 93 34 04 	sts	0x0434, r24
     36a:	22 e0       	ldi	r18, 0x02	; 2
     36c:	20 93 36 04 	sts	0x0436, r18
     370:	90 93 bc 03 	sts	0x03BC, r25
     374:	80 93 bb 03 	sts	0x03BB, r24
     378:	24 e0       	ldi	r18, 0x04	; 4
     37a:	20 93 bd 03 	sts	0x03BD, r18
     37e:	90 93 e5 03 	sts	0x03E5, r25
     382:	80 93 e4 03 	sts	0x03E4, r24
     386:	28 e0       	ldi	r18, 0x08	; 8
     388:	20 93 e6 03 	sts	0x03E6, r18
     38c:	90 93 d2 03 	sts	0x03D2, r25
     390:	80 93 d1 03 	sts	0x03D1, r24
     394:	20 e1       	ldi	r18, 0x10	; 16
     396:	20 93 d3 03 	sts	0x03D3, r18
     39a:	90 93 b6 03 	sts	0x03B6, r25
     39e:	80 93 b5 03 	sts	0x03B5, r24
     3a2:	20 e2       	ldi	r18, 0x20	; 32
     3a4:	20 93 b7 03 	sts	0x03B7, r18
     3a8:	90 93 ff 03 	sts	0x03FF, r25
     3ac:	80 93 fe 03 	sts	0x03FE, r24
     3b0:	20 e4       	ldi	r18, 0x40	; 64
     3b2:	20 93 00 04 	sts	0x0400, r18
     3b6:	90 93 0b 02 	sts	0x020B, r25
     3ba:	80 93 0a 02 	sts	0x020A, r24
     3be:	80 e8       	ldi	r24, 0x80	; 128
     3c0:	80 93 0c 02 	sts	0x020C, r24
}
     3c4:	08 95       	ret

000003c6 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     3c6:	ad ee       	ldi	r26, 0xED	; 237
     3c8:	b3 e0       	ldi	r27, 0x03	; 3
     3ca:	e3 ec       	ldi	r30, 0xC3	; 195
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	87 e0       	ldi	r24, 0x07	; 7
     3d0:	01 90       	ld	r0, Z+
     3d2:	0d 92       	st	X+, r0
     3d4:	81 50       	subi	r24, 0x01	; 1
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     3d8:	a9 e4       	ldi	r26, 0x49	; 73
     3da:	b3 e0       	ldi	r27, 0x03	; 3
     3dc:	ec eb       	ldi	r30, 0xBC	; 188
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	87 e0       	ldi	r24, 0x07	; 7
     3e2:	01 90       	ld	r0, Z+
     3e4:	0d 92       	st	X+, r0
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     3ea:	a9 e5       	ldi	r26, 0x59	; 89
     3ec:	b3 e0       	ldi	r27, 0x03	; 3
     3ee:	e5 eb       	ldi	r30, 0xB5	; 181
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	87 e0       	ldi	r24, 0x07	; 7
     3f4:	01 90       	ld	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	81 50       	subi	r24, 0x01	; 1
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     3fc:	a0 e6       	ldi	r26, 0x60	; 96
     3fe:	b3 e0       	ldi	r27, 0x03	; 3
     400:	ee ea       	ldi	r30, 0xAE	; 174
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	87 e0       	ldi	r24, 0x07	; 7
     406:	01 90       	ld	r0, Z+
     408:	0d 92       	st	X+, r0
     40a:	81 50       	subi	r24, 0x01	; 1
     40c:	e1 f7       	brne	.-8      	; 0x406 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     40e:	8d ee       	ldi	r24, 0xED	; 237
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	90 93 49 04 	sts	0x0449, r25
     416:	80 93 48 04 	sts	0x0448, r24
     41a:	27 e4       	ldi	r18, 0x47	; 71
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	30 93 4b 04 	sts	0x044B, r19
     422:	20 93 4a 04 	sts	0x044A, r18
     426:	10 92 4d 04 	sts	0x044D, r1
     42a:	10 92 4c 04 	sts	0x044C, r1
     42e:	2c e1       	ldi	r18, 0x1C	; 28
     430:	34 e0       	ldi	r19, 0x04	; 4
     432:	30 93 4f 04 	sts	0x044F, r19
     436:	20 93 4e 04 	sts	0x044E, r18
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     43a:	90 93 68 03 	sts	0x0368, r25
     43e:	80 93 67 03 	sts	0x0367, r24
     442:	88 e4       	ldi	r24, 0x48	; 72
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 6a 03 	sts	0x036A, r25
     44a:	80 93 69 03 	sts	0x0369, r24
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 6c 03 	sts	0x036C, r25
     456:	80 93 6b 03 	sts	0x036B, r24
     45a:	2b ef       	ldi	r18, 0xFB	; 251
     45c:	33 e0       	ldi	r19, 0x03	; 3
     45e:	30 93 6e 03 	sts	0x036E, r19
     462:	20 93 6d 03 	sts	0x036D, r18
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     466:	29 e4       	ldi	r18, 0x49	; 73
     468:	33 e0       	ldi	r19, 0x03	; 3
     46a:	30 93 42 03 	sts	0x0342, r19
     46e:	20 93 41 03 	sts	0x0341, r18
     472:	48 e8       	ldi	r20, 0x88	; 136
     474:	50 e0       	ldi	r21, 0x00	; 0
     476:	50 93 44 03 	sts	0x0344, r21
     47a:	40 93 43 03 	sts	0x0343, r20
     47e:	10 92 46 03 	sts	0x0346, r1
     482:	10 92 45 03 	sts	0x0345, r1
     486:	45 eb       	ldi	r20, 0xB5	; 181
     488:	53 e0       	ldi	r21, 0x03	; 3
     48a:	50 93 48 03 	sts	0x0348, r21
     48e:	40 93 47 03 	sts	0x0347, r20
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     492:	30 93 a5 03 	sts	0x03A5, r19
     496:	20 93 a4 03 	sts	0x03A4, r18
     49a:	2a e8       	ldi	r18, 0x8A	; 138
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	30 93 a7 03 	sts	0x03A7, r19
     4a2:	20 93 a6 03 	sts	0x03A6, r18
     4a6:	90 93 a9 03 	sts	0x03A9, r25
     4aa:	80 93 a8 03 	sts	0x03A8, r24
     4ae:	21 ed       	ldi	r18, 0xD1	; 209
     4b0:	33 e0       	ldi	r19, 0x03	; 3
     4b2:	30 93 ab 03 	sts	0x03AB, r19
     4b6:	20 93 aa 03 	sts	0x03AA, r18
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     4ba:	29 e5       	ldi	r18, 0x59	; 89
     4bc:	33 e0       	ldi	r19, 0x03	; 3
     4be:	30 93 38 04 	sts	0x0438, r19
     4c2:	20 93 37 04 	sts	0x0437, r18
     4c6:	43 eb       	ldi	r20, 0xB3	; 179
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	50 93 3a 04 	sts	0x043A, r21
     4ce:	40 93 39 04 	sts	0x0439, r20
     4d2:	10 92 3c 04 	sts	0x043C, r1
     4d6:	10 92 3b 04 	sts	0x043B, r1
     4da:	4a e0       	ldi	r20, 0x0A	; 10
     4dc:	52 e0       	ldi	r21, 0x02	; 2
     4de:	50 93 3e 04 	sts	0x043E, r21
     4e2:	40 93 3d 04 	sts	0x043D, r20
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     4e6:	30 93 bf 03 	sts	0x03BF, r19
     4ea:	20 93 be 03 	sts	0x03BE, r18
     4ee:	24 eb       	ldi	r18, 0xB4	; 180
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	30 93 c1 03 	sts	0x03C1, r19
     4f6:	20 93 c0 03 	sts	0x03C0, r18
     4fa:	90 93 c3 03 	sts	0x03C3, r25
     4fe:	80 93 c2 03 	sts	0x03C2, r24
     502:	2e ef       	ldi	r18, 0xFE	; 254
     504:	33 e0       	ldi	r19, 0x03	; 3
     506:	30 93 c5 03 	sts	0x03C5, r19
     50a:	20 93 c4 03 	sts	0x03C4, r18
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     50e:	20 e6       	ldi	r18, 0x60	; 96
     510:	33 e0       	ldi	r19, 0x03	; 3
     512:	30 93 3a 03 	sts	0x033A, r19
     516:	20 93 39 03 	sts	0x0339, r18
     51a:	48 e9       	ldi	r20, 0x98	; 152
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	50 93 3c 03 	sts	0x033C, r21
     522:	40 93 3b 03 	sts	0x033B, r20
     526:	10 92 3e 03 	sts	0x033E, r1
     52a:	10 92 3d 03 	sts	0x033D, r1
     52e:	42 e4       	ldi	r20, 0x42	; 66
     530:	54 e0       	ldi	r21, 0x04	; 4
     532:	50 93 40 03 	sts	0x0340, r21
     536:	40 93 3f 03 	sts	0x033F, r20
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     53a:	30 93 ca 03 	sts	0x03CA, r19
     53e:	20 93 c9 03 	sts	0x03C9, r18
     542:	2a e9       	ldi	r18, 0x9A	; 154
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	30 93 cc 03 	sts	0x03CC, r19
     54a:	20 93 cb 03 	sts	0x03CB, r18
     54e:	90 93 ce 03 	sts	0x03CE, r25
     552:	80 93 cd 03 	sts	0x03CD, r24
     556:	8b e8       	ldi	r24, 0x8B	; 139
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	90 93 d0 03 	sts	0x03D0, r25
     55e:	80 93 cf 03 	sts	0x03CF, r24
}
     562:	08 95       	ret

00000564 <init_timer>:
#define CLOCKISR_A TIMER3_COMPA_vect
#define CLOCKISR_B TIMER3_COMPB_vect
#define CLOCKTIMER_A Timer3A
#define CLOCKTIMER_B Timer3B

void init_timer() {
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
	setWaveformGenerationMode(Timer3, clear_timer_on_match);
     568:	c0 e6       	ldi	r28, 0x60	; 96
     56a:	d3 e0       	ldi	r29, 0x03	; 3
     56c:	ce 01       	movw	r24, r28
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <setWaveformGenerationMode>
	setTimerClockSelect(Timer3, prescale_8);
     576:	ce 01       	movw	r24, r28
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <setTimerClockSelect>
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	#define MILLISECOND_TIMER_VALUE ((uint16_t) 2500)
	
	setTimerCompareValue(Timer3A, MILLISECOND_TIMER_VALUE);
     580:	89 e3       	ldi	r24, 0x39	; 57
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	64 ec       	ldi	r22, 0xC4	; 196
     586:	79 e0       	ldi	r23, 0x09	; 9
     588:	0e 94 69 10 	call	0x20d2	; 0x20d2 <setTimerCompareValue>
	setTimerCompareValue(Timer3B, MILLISECOND_TIMER_VALUE * 20);
     58c:	89 ec       	ldi	r24, 0xC9	; 201
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	60 e5       	ldi	r22, 0x50	; 80
     592:	73 ec       	ldi	r23, 0xC3	; 195
     594:	0e 94 69 10 	call	0x20d2	; 0x20d2 <setTimerCompareValue>
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     59e:	08 95       	ret

000005a0 <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increase the milliseconds_running value.

TIMER_TICK_ISR {
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	0b b6       	in	r0, 0x3b	; 59
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	2f 93       	push	r18
     5b0:	3f 93       	push	r19
     5b2:	4f 93       	push	r20
     5b4:	5f 93       	push	r21
     5b6:	6f 93       	push	r22
     5b8:	7f 93       	push	r23
     5ba:	8f 93       	push	r24
     5bc:	9f 93       	push	r25
     5be:	af 93       	push	r26
     5c0:	bf 93       	push	r27
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
	TIMER_TICK_ACTION
     5c6:	80 91 f9 01 	lds	r24, 0x01F9
     5ca:	90 91 fa 01 	lds	r25, 0x01FA
     5ce:	a0 91 fb 01 	lds	r26, 0x01FB
     5d2:	b0 91 fc 01 	lds	r27, 0x01FC
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	a1 1d       	adc	r26, r1
     5da:	b1 1d       	adc	r27, r1
     5dc:	80 93 f9 01 	sts	0x01F9, r24
     5e0:	90 93 fa 01 	sts	0x01FA, r25
     5e4:	a0 93 fb 01 	sts	0x01FB, r26
     5e8:	b0 93 fc 01 	sts	0x01FC, r27
     5ec:	0e 94 cf 02 	call	0x59e	; 0x59e <in_timer_tick>
}
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	0b be       	out	0x3b, r0	; 59
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <mutex_create>:
typedef struct {
	BOOL interruptsWereEnabled;
} AtomicMutex;

Mutex mutex_create() {
	return (Mutex) malloc(sizeof(AtomicMutex));
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 c6 10 	call	0x218c	; 0x218c <malloc>
}
     61e:	08 95       	ret

00000620 <mutex_lock>:

void mutex_lock(Mutex mutex) {
	((AtomicMutex *) mutex)->interruptsWereEnabled = SREG & _BV(7);
     620:	2f b7       	in	r18, 0x3f	; 63
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	20 78       	andi	r18, 0x80	; 128
     626:	30 70       	andi	r19, 0x00	; 0
     628:	fc 01       	movw	r30, r24
     62a:	31 83       	std	Z+1, r19	; 0x01
     62c:	20 83       	st	Z, r18
	cli();
     62e:	f8 94       	cli
}
     630:	08 95       	ret

00000632 <mutex_trylock>:

BOOL mutex_trylock(Mutex mutex) {
	mutex_lock(mutex);
     632:	0e 94 10 03 	call	0x620	; 0x620 <mutex_lock>
	return TRUE;
}
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret

0000063c <mutex_release>:

void mutex_release(Mutex mutex) {
	// if (((AtomicMutex *) mutex)->interruptsWereEnabled)
		sei();
     63c:	78 94       	sei
}
     63e:	08 95       	ret

00000640 <init_nibobee_leds>:
PLed rightLedsArray[] = { &RightYellow_, &RightRed_ };
PLed leftLedsArray[] = { &LeftYellow_, &LeftRed_ };
PLed allLedsArray[] = { &LeftYellow_, &LeftRed_, &RightRed_, &RightYellow_ };

void init_nibobee_leds() {
	INIT_LED(LeftYellow, PinB0)
     640:	88 ef       	ldi	r24, 0xF8	; 248
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	90 93 2a 02 	sts	0x022A, r25
     648:	80 93 29 02 	sts	0x0229, r24

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     64c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	INIT_LED(LeftRed, PinB1)
     650:	85 e8       	ldi	r24, 0x85	; 133
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	90 93 2c 02 	sts	0x022C, r25
     658:	80 93 2b 02 	sts	0x022B, r24
     65c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	INIT_LED(RightRed, PinB2)
     660:	8d e2       	ldi	r24, 0x2D	; 45
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	90 93 02 04 	sts	0x0402, r25
     668:	80 93 01 04 	sts	0x0401, r24
     66c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	INIT_LED(RightYellow, PinB3)
     670:	8c e1       	ldi	r24, 0x1C	; 28
     672:	94 e0       	ldi	r25, 0x04	; 4
     674:	90 93 d7 03 	sts	0x03D7, r25
     678:	80 93 d6 03 	sts	0x03D6, r24
     67c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 2)
     680:	af e3       	ldi	r26, 0x3F	; 63
     682:	b4 e0       	ldi	r27, 0x04	; 4
     684:	eb ea       	ldi	r30, 0xAB	; 171
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	01 90       	ld	r0, Z+
     68c:	0d 92       	st	X+, r0
     68e:	81 50       	subi	r24, 0x01	; 1
     690:	e1 f7       	brne	.-8      	; 0x68a <init_nibobee_leds+0x4a>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     692:	a3 e2       	ldi	r26, 0x23	; 35
     694:	b2 e0       	ldi	r27, 0x02	; 2
     696:	e8 ea       	ldi	r30, 0xA8	; 168
     698:	f1 e0       	ldi	r31, 0x01	; 1
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	01 90       	ld	r0, Z+
     69e:	0d 92       	st	X+, r0
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	e1 f7       	brne	.-8      	; 0x69c <init_nibobee_leds+0x5c>
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
     6a4:	aa ee       	ldi	r26, 0xEA	; 234
     6a6:	b3 e0       	ldi	r27, 0x03	; 3
     6a8:	e5 ea       	ldi	r30, 0xA5	; 165
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	01 90       	ld	r0, Z+
     6b0:	0d 92       	st	X+, r0
     6b2:	81 50       	subi	r24, 0x01	; 1
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <init_nibobee_leds+0x6e>
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
     6b6:	a5 e4       	ldi	r26, 0x45	; 69
     6b8:	b4 e0       	ldi	r27, 0x04	; 4
     6ba:	e2 ea       	ldi	r30, 0xA2	; 162
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <init_nibobee_leds+0x80>
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
     6c8:	a7 ee       	ldi	r26, 0xE7	; 231
     6ca:	b3 e0       	ldi	r27, 0x03	; 3
     6cc:	ef e9       	ldi	r30, 0x9F	; 159
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	01 90       	ld	r0, Z+
     6d4:	0d 92       	st	X+, r0
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <init_nibobee_leds+0x92>
}
     6da:	08 95       	ret

000006dc <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     6ea:	88 81       	ld	r24, Y
     6ec:	81 ff       	sbrs	r24, 1
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	9a 81       	ldd	r25, Y+2	; 0x02
     6f4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
	
	#ifndef FORCE_BUTTON_PIN_CHANGE_INTERRUPTS
	if (button->flags & BUTTON_USE_PIN_CHANGE_INTERRUPT)
     6f8:	88 81       	ld	r24, Y
     6fa:	82 ff       	sbrs	r24, 2
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <initButton+0x28>
	#endif
		enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	0e 94 cc 0b 	call	0x1798	; 0x1798 <enablePinChangeInterrupt>
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <init_nibobee_buttons>:
#include <kernel/devices/port_m1284P.kernel.h>
#include <kernel/kernel_init.h>
#include <kernel/devices/button.kernel.h>
#include "nibobee_button.h"

void init_nibobee_buttons() {
     70a:	1f 93       	push	r17
	#define NIBOBEE_BUTTON (BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonLeftBackward, PinC5, NIBOBEE_BUTTON, 21)
     70c:	13 e0       	ldi	r17, 0x03	; 3
     70e:	10 93 f4 03 	sts	0x03F4, r17
     712:	85 e7       	ldi	r24, 0x75	; 117
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	90 93 f6 03 	sts	0x03F6, r25
     71a:	80 93 f5 03 	sts	0x03F5, r24
     71e:	85 e1       	ldi	r24, 0x15	; 21
     720:	80 93 f7 03 	sts	0x03F7, r24
     724:	84 ef       	ldi	r24, 0xF4	; 244
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	0e 94 6e 03 	call	0x6dc	; 0x6dc <initButton>
	INIT_BUTTON(ButtonLeftForward, PinC4, NIBOBEE_BUTTON, 20)
     72c:	10 93 30 02 	sts	0x0230, r17
     730:	80 e1       	ldi	r24, 0x10	; 16
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	90 93 32 02 	sts	0x0232, r25
     738:	80 93 31 02 	sts	0x0231, r24
     73c:	84 e1       	ldi	r24, 0x14	; 20
     73e:	80 93 33 02 	sts	0x0233, r24
     742:	80 e3       	ldi	r24, 0x30	; 48
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	0e 94 6e 03 	call	0x6dc	; 0x6dc <initButton>
	INIT_BUTTON(ButtonRightBackward, PinC7, NIBOBEE_BUTTON, 22)
     74a:	10 93 13 02 	sts	0x0213, r17
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	90 93 15 02 	sts	0x0215, r25
     756:	80 93 14 02 	sts	0x0214, r24
     75a:	86 e1       	ldi	r24, 0x16	; 22
     75c:	80 93 16 02 	sts	0x0216, r24
     760:	83 e1       	ldi	r24, 0x13	; 19
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 6e 03 	call	0x6dc	; 0x6dc <initButton>
	INIT_BUTTON(ButtonRightForward, PinC6, NIBOBEE_BUTTON, 23)
     768:	10 93 06 02 	sts	0x0206, r17
     76c:	86 ec       	ldi	r24, 0xC6	; 198
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	90 93 08 02 	sts	0x0208, r25
     774:	80 93 07 02 	sts	0x0207, r24
     778:	87 e1       	ldi	r24, 0x17	; 23
     77a:	80 93 09 02 	sts	0x0209, r24
     77e:	86 e0       	ldi	r24, 0x06	; 6
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	0e 94 6e 03 	call	0x6dc	; 0x6dc <initButton>
}
     786:	1f 91       	pop	r17
     788:	08 95       	ret

0000078a <initMotor>:
#define _MOTOR_KERNEL_

#include "../kernel_init.h"
#include "motor.h"

void initMotor(PMotor motor) {
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	ec 01       	movw	r28, r24
	// Configure the timer. These are configurations,
	// that should work fine for motors, but might also be changed elsewhere.
	setTimerClockSelect(Timer1, prescale_1);
     790:	89 e4       	ldi	r24, 0x49	; 73
     792:	93 e0       	ldi	r25, 0x03	; 3
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <setTimerClockSelect>
	setWaveformGenerationMode(motor->pwmTimer->timer, pwm_phase_correct);
     79c:	eb 81       	ldd	r30, Y+3	; 0x03
     79e:	fc 81       	ldd	r31, Y+4	; 0x04
     7a0:	80 81       	ld	r24, Z
     7a2:	91 81       	ldd	r25, Z+1	; 0x01
     7a4:	64 e0       	ldi	r22, 0x04	; 4
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <setWaveformGenerationMode>
	
	setTimerCompareValue(motor->pwmTimer, 0);
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <setTimerCompareValue>
	setPinOutput(motor->direction);
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	if (!(motor->flags & MOTOR_TWO_DIR_PINS))
     7c0:	88 81       	ld	r24, Y
     7c2:	83 fd       	sbrc	r24, 3
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <initMotor+0x44>
		setPinOne(motor->direction);
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     7da:	0e 94 c5 03 	call	0x78a	; 0x78a <initMotor>
	setPinOutput(motor->direction2);
     7de:	89 85       	ldd	r24, Y+9	; 0x09
     7e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	setPinZero(motor->motor.direction);
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
	setPinZero(motor->direction2);
     7ee:	89 85       	ldd	r24, Y+9	; 0x09
     7f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <init_nibobee_motors>:
#include <kernel/kernel_init.h>
#include <kernel/devices/timer_m1284P.kernel.h>
#include <kernel/devices/motor.kernel.h>
#include "nibobee_motor.h"

void init_nibobee_motors() {
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
	Timer1->flags |= TIMER_RESOLUTION_9bit;
     800:	80 91 49 03 	lds	r24, 0x0349
     804:	80 61       	ori	r24, 0x10	; 16
     806:	80 93 49 03 	sts	0x0349, r24
	
	INIT_MOTOR(LeftMotorBase, MOTOR_NORMAL, PinD6, Timer1A)
     80a:	10 92 ac 03 	sts	0x03AC, r1
     80e:	8e ef       	ldi	r24, 0xFE	; 254
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	90 93 ae 03 	sts	0x03AE, r25
     816:	80 93 ad 03 	sts	0x03AD, r24
     81a:	81 e4       	ldi	r24, 0x41	; 65
     81c:	93 e0       	ldi	r25, 0x03	; 3
     81e:	90 93 b0 03 	sts	0x03B0, r25
     822:	80 93 af 03 	sts	0x03AF, r24
     826:	10 92 b2 03 	sts	0x03B2, r1
     82a:	10 92 b1 03 	sts	0x03B1, r1
     82e:	cf ef       	ldi	r28, 0xFF	; 255
     830:	df ef       	ldi	r29, 0xFF	; 255
     832:	d0 93 b4 03 	sts	0x03B4, r29
     836:	c0 93 b3 03 	sts	0x03B3, r28
     83a:	8c ea       	ldi	r24, 0xAC	; 172
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 c5 03 	call	0x78a	; 0x78a <initMotor>
	INIT_MOTOR(RightMotorBase, MOTOR_INVERSE_DIRECTION, PinD7, Timer1B)
     842:	84 e0       	ldi	r24, 0x04	; 4
     844:	80 93 17 02 	sts	0x0217, r24
     848:	8a e0       	ldi	r24, 0x0A	; 10
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	90 93 19 02 	sts	0x0219, r25
     850:	80 93 18 02 	sts	0x0218, r24
     854:	84 ea       	ldi	r24, 0xA4	; 164
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	90 93 1b 02 	sts	0x021B, r25
     85c:	80 93 1a 02 	sts	0x021A, r24
     860:	10 92 1d 02 	sts	0x021D, r1
     864:	10 92 1c 02 	sts	0x021C, r1
     868:	d0 93 1f 02 	sts	0x021F, r29
     86c:	c0 93 1e 02 	sts	0x021E, r28
     870:	87 e1       	ldi	r24, 0x17	; 23
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 c5 03 	call	0x78a	; 0x78a <initMotor>
	
	// LeftMotorBase->maxValue = 0x0FFF;
	
	// Don't know why, but the lib does this... Seems to enable internal PullUp.
	// Pins will be controlled by the timer anyways.
	setPinOne(RightMotorBase->pwmTimer->outputComparePin);
     878:	e0 91 1a 02 	lds	r30, 0x021A
     87c:	f0 91 1b 02 	lds	r31, 0x021B
     880:	86 81       	ldd	r24, Z+6	; 0x06
     882:	97 81       	ldd	r25, Z+7	; 0x07
     884:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
	setPinOne(LeftMotorBase->pwmTimer->outputComparePin);
     888:	e0 91 af 03 	lds	r30, 0x03AF
     88c:	f0 91 b0 03 	lds	r31, 0x03B0
     890:	86 81       	ldd	r24, Z+6	; 0x06
     892:	97 81       	ldd	r25, Z+7	; 0x07
     894:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <initSmoothMotor>:
void motor_smooth_stop_tick(PSmoothMotor motor);

// This must be used when implementing above function. Implemented in motor_smooth.c
void motor_smooth_tick(PSmoothMotor motor);

void initSmoothMotor(PSmoothMotor motor) {
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	ec 01       	movw	r28, r24
	motor->mutex = mutex_create();
     8a4:	0e 94 0b 03 	call	0x616	; 0x616 <mutex_create>
     8a8:	9f 87       	std	Y+15, r25	; 0x0f
     8aa:	8e 87       	std	Y+14, r24	; 0x0e
}
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <smooth_motor_tick>:
void motor_smooth_stop_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, FALSE);
}

void smooth_motor_tick() {
	if (motor_A_running) motor_smooth_tick(SMOOTH_MOTOR_A);
     8b2:	80 91 fd 01 	lds	r24, 0x01FD
     8b6:	90 91 fe 01 	lds	r25, 0x01FE
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	21 f0       	breq	.+8      	; 0x8c6 <smooth_motor_tick+0x14>
     8be:	8e e8       	ldi	r24, 0x8E	; 142
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <motor_smooth_tick>
	if (motor_B_running) motor_smooth_tick(SMOOTH_MOTOR_B);
     8c6:	80 91 ff 01 	lds	r24, 0x01FF
     8ca:	90 91 00 02 	lds	r25, 0x0200
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	21 f0       	breq	.+8      	; 0x8da <smooth_motor_tick+0x28>
     8d2:	8c e0       	ldi	r24, 0x0C	; 12
     8d4:	94 e0       	ldi	r25, 0x04	; 4
     8d6:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <motor_smooth_tick>
     8da:	08 95       	ret

000008dc <smooth_enable_tick>:

#include <kernel/kernel_init.h>
#include <kernel/devices/motor_smooth_pair.kernel.h>

void smooth_enable_tick(BOOL enabled) {
	if (enabled) enableTimerInterrupt(CLOCKTIMER_B);
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	29 f0       	breq	.+10     	; 0x8ea <smooth_enable_tick+0xe>
     8e0:	89 ec       	ldi	r24, 0xC9	; 201
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 2d 10 	call	0x205a	; 0x205a <enableTimerInterrupt>
     8e8:	08 95       	ret
	else disableTimerInterrupt(CLOCKTIMER_B);
     8ea:	89 ec       	ldi	r24, 0xC9	; 201
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	0e 94 41 10 	call	0x2082	; 0x2082 <disableTimerInterrupt>
     8f2:	08 95       	ret

000008f4 <control_smooth_motor>:

BOOL motor_A_running = FALSE;
BOOL motor_B_running = FALSE;

static void control_smooth_motor(PSmoothMotor motor, BOOL running) {
	if (motor == SMOOTH_MOTOR_A) {
     8f4:	23 e0       	ldi	r18, 0x03	; 3
     8f6:	8e 38       	cpi	r24, 0x8E	; 142
     8f8:	92 07       	cpc	r25, r18
     8fa:	29 f4       	brne	.+10     	; 0x906 <control_smooth_motor+0x12>
		motor_A_running = running;
     8fc:	70 93 fe 01 	sts	0x01FE, r23
     900:	60 93 fd 01 	sts	0x01FD, r22
     904:	08 c0       	rjmp	.+16     	; 0x916 <control_smooth_motor+0x22>
	} else if (motor == SMOOTH_MOTOR_B) {
     906:	24 e0       	ldi	r18, 0x04	; 4
     908:	8c 30       	cpi	r24, 0x0C	; 12
     90a:	92 07       	cpc	r25, r18
     90c:	d1 f4       	brne	.+52     	; 0x942 <control_smooth_motor+0x4e>
		motor_B_running = running;
     90e:	70 93 00 02 	sts	0x0200, r23
     912:	60 93 ff 01 	sts	0x01FF, r22
	} else {
		return;
	}
	smooth_enable_tick(motor_A_running || motor_B_running);
     916:	80 91 fd 01 	lds	r24, 0x01FD
     91a:	90 91 fe 01 	lds	r25, 0x01FE
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	61 f4       	brne	.+24     	; 0x93a <control_smooth_motor+0x46>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	20 91 ff 01 	lds	r18, 0x01FF
     92a:	30 91 00 02 	lds	r19, 0x0200
     92e:	21 15       	cp	r18, r1
     930:	31 05       	cpc	r19, r1
     932:	29 f4       	brne	.+10     	; 0x93e <control_smooth_motor+0x4a>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	02 c0       	rjmp	.+4      	; 0x93e <control_smooth_motor+0x4a>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 6e 04 	call	0x8dc	; 0x8dc <smooth_enable_tick>
     942:	08 95       	ret

00000944 <motor_smooth_stop_tick>:
void motor_smooth_start_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, TRUE);
}

void motor_smooth_stop_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, FALSE);
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <control_smooth_motor>
}
     94c:	08 95       	ret

0000094e <motor_smooth_start_tick>:
	}
	smooth_enable_tick(motor_A_running || motor_B_running);
}

void motor_smooth_start_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, TRUE);
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <control_smooth_motor>
}
     956:	08 95       	ret

00000958 <__vector_33>:

// Enable the timer
#define TIMER_INTERRUPT_B

#include <kernel/devices/led.h>
ISR(CLOCKISR_B) {
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	0b b6       	in	r0, 0x3b	; 59
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
	// flashLed(LeftRed, 100);
	smooth_motor_tick();
     97e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <smooth_motor_tick>
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0b be       	out	0x3b, r0	; 59
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <init_smooth_motors>:

void init_smooth_motors() {
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
	#define MOTOR_ADJUSTMENT_STEP 300
	
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, MOTOR_ADJUSTMENT_STEP)
     9b0:	8c ea       	ldi	r24, 0xAC	; 172
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	90 93 8f 03 	sts	0x038F, r25
     9b8:	80 93 8e 03 	sts	0x038E, r24
     9bc:	10 92 91 03 	sts	0x0391, r1
     9c0:	10 92 90 03 	sts	0x0390, r1
     9c4:	c1 e0       	ldi	r28, 0x01	; 1
     9c6:	d0 e0       	ldi	r29, 0x00	; 0
     9c8:	d0 93 93 03 	sts	0x0393, r29
     9cc:	c0 93 92 03 	sts	0x0392, r28
     9d0:	10 92 95 03 	sts	0x0395, r1
     9d4:	10 92 94 03 	sts	0x0394, r1
     9d8:	d0 93 97 03 	sts	0x0397, r29
     9dc:	c0 93 96 03 	sts	0x0396, r28
     9e0:	10 92 99 03 	sts	0x0399, r1
     9e4:	10 92 98 03 	sts	0x0398, r1
     9e8:	0c e2       	ldi	r16, 0x2C	; 44
     9ea:	11 e0       	ldi	r17, 0x01	; 1
     9ec:	10 93 9b 03 	sts	0x039B, r17
     9f0:	00 93 9a 03 	sts	0x039A, r16
     9f4:	10 92 9d 03 	sts	0x039D, r1
     9f8:	10 92 9c 03 	sts	0x039C, r1

// This must be used when implementing above function. Implemented in motor_smooth.c
void motor_smooth_tick(PSmoothMotor motor);

void initSmoothMotor(PSmoothMotor motor) {
	motor->mutex = mutex_create();
     9fc:	0e 94 0b 03 	call	0x616	; 0x616 <mutex_create>
     a00:	90 93 9d 03 	sts	0x039D, r25
     a04:	80 93 9c 03 	sts	0x039C, r24
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, MOTOR_ADJUSTMENT_STEP)
     a08:	87 e1       	ldi	r24, 0x17	; 23
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	90 93 0d 04 	sts	0x040D, r25
     a10:	80 93 0c 04 	sts	0x040C, r24
     a14:	10 92 0f 04 	sts	0x040F, r1
     a18:	10 92 0e 04 	sts	0x040E, r1
     a1c:	d0 93 11 04 	sts	0x0411, r29
     a20:	c0 93 10 04 	sts	0x0410, r28
     a24:	10 92 13 04 	sts	0x0413, r1
     a28:	10 92 12 04 	sts	0x0412, r1
     a2c:	d0 93 15 04 	sts	0x0415, r29
     a30:	c0 93 14 04 	sts	0x0414, r28
     a34:	10 92 17 04 	sts	0x0417, r1
     a38:	10 92 16 04 	sts	0x0416, r1
     a3c:	10 93 19 04 	sts	0x0419, r17
     a40:	00 93 18 04 	sts	0x0418, r16
     a44:	10 92 1b 04 	sts	0x041B, r1
     a48:	10 92 1a 04 	sts	0x041A, r1
     a4c:	0e 94 0b 03 	call	0x616	; 0x616 <mutex_create>
     a50:	90 93 1b 04 	sts	0x041B, r25
     a54:	80 93 1a 04 	sts	0x041A, r24
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <twi_handleMasterRequest>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer);
	byte twi_defaultSlaveBufferData[TWI_Buffer_Size];
	TWIBuffer twi_defaultSlaveBuffer = { twi_defaultSlaveBufferData, TWI_Buffer_Size };
#else
	// Define empty functions
	TWIBuffer twi_handleMasterRequest() { return (TWIBuffer) { 0 }; }
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	08 95       	ret

00000a6c <twi_handleMasterTransmission>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
     a6c:	08 95       	ret

00000a6e <twi_unexpectedCondition>:
// This can be implemented by the application code to handle
// unexpected conditions in TWI traffic. Or define this macro.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() {
	TWI_DEBUG_ERROR(twi_error)
}
     a6e:	08 95       	ret

00000a70 <init_twi>:
TWIError twi_error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     a7c:	81 e1       	ldi	r24, 0x11	; 17
     a7e:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     a82:	10 92 b9 00 	sts	0x00B9, r1
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
     a86:	08 95       	ret

00000a88 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     a88:	df 93       	push	r29
     a8a:	cf 93       	push	r28
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
     a90:	27 97       	sbiw	r28, 0x07	; 7
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     a9c:	80 91 d4 03 	lds	r24, 0x03D4
     aa0:	90 91 d5 03 	lds	r25, 0x03D5
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	91 05       	cpc	r25, r1
     aa8:	0c f0       	brlt	.+2      	; 0xaac <next_twi_operation+0x24>
     aaa:	52 c0       	rjmp	.+164    	; 0xb50 <next_twi_operation+0xc8>
	do {
		current = furtherOperations[nextTwiOperation++];
     aac:	ae 01       	movw	r20, r28
     aae:	4f 5f       	subi	r20, 0xFF	; 255
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	80 91 d4 03 	lds	r24, 0x03D4
     ab6:	90 91 d5 03 	lds	r25, 0x03D5
     aba:	fc 01       	movw	r30, r24
     abc:	33 e0       	ldi	r19, 0x03	; 3
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	3a 95       	dec	r19
     ac4:	e1 f7       	brne	.-8      	; 0xabe <next_twi_operation+0x36>
     ac6:	e8 1b       	sub	r30, r24
     ac8:	f9 0b       	sbc	r31, r25
     aca:	da 01       	movw	r26, r20
     acc:	e1 5e       	subi	r30, 0xE1	; 225
     ace:	fb 4f       	sbci	r31, 0xFB	; 251
     ad0:	27 e0       	ldi	r18, 0x07	; 7
     ad2:	01 90       	ld	r0, Z+
     ad4:	0d 92       	st	X+, r0
     ad6:	21 50       	subi	r18, 0x01	; 1
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <next_twi_operation+0x4a>
     ada:	fc 01       	movw	r30, r24
     adc:	23 e0       	ldi	r18, 0x03	; 3
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	2a 95       	dec	r18
     ae4:	e1 f7       	brne	.-8      	; 0xade <next_twi_operation+0x56>
     ae6:	e8 1b       	sub	r30, r24
     ae8:	f9 0b       	sbc	r31, r25
     aea:	e1 5e       	subi	r30, 0xE1	; 225
     aec:	fb 4f       	sbci	r31, 0xFB	; 251
     aee:	64 81       	ldd	r22, Z+4	; 0x04
     af0:	25 81       	ldd	r18, Z+5	; 0x05
     af2:	36 81       	ldd	r19, Z+6	; 0x06
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	90 93 d5 03 	sts	0x03D5, r25
     afa:	80 93 d4 03 	sts	0x03D4, r24
		if (current.operationMode != TWI_IllegalOperation) break;
     afe:	21 15       	cp	r18, r1
     b00:	31 05       	cpc	r19, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <next_twi_operation+0x84>
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	91 05       	cpc	r25, r1
     b08:	2c f0       	brlt	.+10     	; 0xb14 <next_twi_operation+0x8c>
     b0a:	22 c0       	rjmp	.+68     	; 0xb50 <next_twi_operation+0xc8>
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
     b0c:	83 30       	cpi	r24, 0x03	; 3
     b0e:	91 05       	cpc	r25, r1
     b10:	84 f2       	brlt	.-96     	; 0xab2 <next_twi_operation+0x2a>
     b12:	1e c0       	rjmp	.+60     	; 0xb50 <next_twi_operation+0xc8>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	// Delete or set the LSB, which describes sla+w or sla+r (reading or writing
	// slave address)
	if (current.operationMode == TWI_Send) {
     b14:	22 30       	cpi	r18, 0x02	; 2
     b16:	31 05       	cpc	r19, r1
     b18:	11 f4       	brne	.+4      	; 0xb1e <next_twi_operation+0x96>
		twi_address.address = current.device.address & ~_BV(0);
     b1a:	6e 7f       	andi	r22, 0xFE	; 254
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <next_twi_operation+0x9e>
	} else if (current.operationMode == TWI_Receive) {
     b1e:	21 30       	cpi	r18, 0x01	; 1
     b20:	31 05       	cpc	r19, r1
     b22:	19 f4       	brne	.+6      	; 0xb2a <next_twi_operation+0xa2>
		twi_address.address = current.device.address | _BV(0);
     b24:	61 60       	ori	r22, 0x01	; 1
     b26:	60 93 02 02 	sts	0x0202, r22
	}
	alreadyHandled = 0;
     b2a:	10 92 82 03 	sts	0x0382, r1
     b2e:	10 92 81 03 	sts	0x0381, r1
	twi_buffer = current.buffer;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	ab 81       	ldd	r26, Y+3	; 0x03
     b38:	bc 81       	ldd	r27, Y+4	; 0x04
     b3a:	80 93 db 03 	sts	0x03DB, r24
     b3e:	90 93 dc 03 	sts	0x03DC, r25
     b42:	a0 93 dd 03 	sts	0x03DD, r26
     b46:	b0 93 de 03 	sts	0x03DE, r27
	return TRUE;
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <next_twi_operation+0xcc>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     b54:	c9 01       	movw	r24, r18
     b56:	27 96       	adiw	r28, 0x07	; 7
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (!next_twi_operation()) {
     b68:	0e 94 44 05 	call	0xa88	; 0xa88 <next_twi_operation>
     b6c:	00 97       	sbiw	r24, 0x00	; 0
     b6e:	19 f4       	brne	.+6      	; 0xb76 <twi_stop_or_next+0xe>
		twi_stop();
     b70:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
     b74:	08 95       	ret
	} else {
		// Next operation, without releasing the bus. Repeated START condition!
		twi_start();
     b76:	85 ea       	ldi	r24, 0xA5	; 165
     b78:	80 93 bc 00 	sts	0x00BC, r24
     b7c:	08 95       	ret

00000b7e <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	twi_error = TWI_No_Error;
     b7e:	10 92 84 03 	sts	0x0384, r1
     b82:	10 92 83 03 	sts	0x0383, r1
	twi_running = TRUE;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	90 93 e3 03 	sts	0x03E3, r25
     b8e:	80 93 e2 03 	sts	0x03E2, r24
	nextTwiOperation = 0;
     b92:	10 92 d5 03 	sts	0x03D5, r1
     b96:	10 92 d4 03 	sts	0x03D4, r1
	if (next_twi_operation()) {
     b9a:	0e 94 44 05 	call	0xa88	; 0xa88 <next_twi_operation>
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	19 f0       	breq	.+6      	; 0xba8 <twi_start_master_operation+0x2a>
		twi_start();
     ba2:	85 ea       	ldi	r24, 0xA5	; 165
     ba4:	80 93 bc 00 	sts	0x00BC, r24
     ba8:	08 95       	ret

00000baa <__vector_26>:
	// buffer has no space at all reserved. Fix by skipping this byte).
	if (alreadyHandled < twi_buffer.size)
		twi_buffer.data[alreadyHandled++] = TWDR;
}

ISR(TWI_vect) {
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	0b b6       	in	r0, 0x3b	; 59
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
	TWI_DEBUG_INTERRUPT(TW_STATUS)
	
	switch(TW_STATUS) {
     bd0:	80 91 b9 00 	lds	r24, 0x00B9
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	88 7f       	andi	r24, 0xF8	; 248
     bd8:	90 70       	andi	r25, 0x00	; 0
     bda:	80 33       	cpi	r24, 0x30	; 48
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <__vector_26+0x38>
     be0:	69 c0       	rjmp	.+210    	; 0xcb4 <__vector_26+0x10a>
     be2:	81 33       	cpi	r24, 0x31	; 49
     be4:	91 05       	cpc	r25, r1
     be6:	d4 f4       	brge	.+52     	; 0xc1c <__vector_26+0x72>
     be8:	80 31       	cpi	r24, 0x10	; 16
     bea:	91 05       	cpc	r25, r1
     bec:	99 f1       	breq	.+102    	; 0xc54 <__vector_26+0xaa>
     bee:	81 31       	cpi	r24, 0x11	; 17
     bf0:	91 05       	cpc	r25, r1
     bf2:	44 f4       	brge	.+16     	; 0xc04 <__vector_26+0x5a>
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__vector_26+0x50>
     bf8:	76 c0       	rjmp	.+236    	; 0xce6 <__vector_26+0x13c>
     bfa:	88 30       	cpi	r24, 0x08	; 8
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f0       	breq	.+2      	; 0xc02 <__vector_26+0x58>
     c00:	75 c0       	rjmp	.+234    	; 0xcec <__vector_26+0x142>
     c02:	28 c0       	rjmp	.+80     	; 0xc54 <__vector_26+0xaa>
     c04:	80 32       	cpi	r24, 0x20	; 32
     c06:	91 05       	cpc	r25, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <__vector_26+0x62>
     c0a:	5c c0       	rjmp	.+184    	; 0xcc4 <__vector_26+0x11a>
     c0c:	88 32       	cpi	r24, 0x28	; 40
     c0e:	91 05       	cpc	r25, r1
     c10:	a1 f1       	breq	.+104    	; 0xc7a <__vector_26+0xd0>
     c12:	88 31       	cpi	r24, 0x18	; 24
     c14:	91 05       	cpc	r25, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <__vector_26+0x70>
     c18:	69 c0       	rjmp	.+210    	; 0xcec <__vector_26+0x142>
     c1a:	2f c0       	rjmp	.+94     	; 0xc7a <__vector_26+0xd0>
     c1c:	88 34       	cpi	r24, 0x48	; 72
     c1e:	91 05       	cpc	r25, r1
     c20:	09 f4       	brne	.+2      	; 0xc24 <__vector_26+0x7a>
     c22:	50 c0       	rjmp	.+160    	; 0xcc4 <__vector_26+0x11a>
     c24:	89 34       	cpi	r24, 0x49	; 73
     c26:	91 05       	cpc	r25, r1
     c28:	44 f4       	brge	.+16     	; 0xc3a <__vector_26+0x90>
     c2a:	88 33       	cpi	r24, 0x38	; 56
     c2c:	91 05       	cpc	r25, r1
     c2e:	b9 f0       	breq	.+46     	; 0xc5e <__vector_26+0xb4>
     c30:	80 34       	cpi	r24, 0x40	; 64
     c32:	91 05       	cpc	r25, r1
     c34:	09 f0       	breq	.+2      	; 0xc38 <__vector_26+0x8e>
     c36:	5a c0       	rjmp	.+180    	; 0xcec <__vector_26+0x142>
     c38:	42 c0       	rjmp	.+132    	; 0xcbe <__vector_26+0x114>
     c3a:	88 35       	cpi	r24, 0x58	; 88
     c3c:	91 05       	cpc	r25, r1
     c3e:	09 f4       	brne	.+2      	; 0xc42 <__vector_26+0x98>
     c40:	4a c0       	rjmp	.+148    	; 0xcd6 <__vector_26+0x12c>
     c42:	88 3f       	cpi	r24, 0xF8	; 248
     c44:	91 05       	cpc	r25, r1
     c46:	09 f4       	brne	.+2      	; 0xc4a <__vector_26+0xa0>
     c48:	4b c0       	rjmp	.+150    	; 0xce0 <__vector_26+0x136>
     c4a:	80 35       	cpi	r24, 0x50	; 80
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__vector_26+0xa8>
     c50:	4d c0       	rjmp	.+154    	; 0xcec <__vector_26+0x142>
     c52:	33 c0       	rjmp	.+102    	; 0xcba <__vector_26+0x110>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     c54:	80 91 02 02 	lds	r24, 0x0202
#define twi_continue() twi_base
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_send(uint8_t data) {
	TWI_DEBUG_BYTE_SENT(data)
	TWDR = data;
     c58:	80 93 bb 00 	sts	0x00BB, r24
     c5c:	27 c0       	rjmp	.+78     	; 0xcac <__vector_26+0x102>
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			twi_error = TWI_Arbitration_Lost;
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	90 93 84 03 	sts	0x0384, r25
     c66:	80 93 83 03 	sts	0x0383, r24
static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base;
     c6a:	85 e8       	ldi	r24, 0x85	; 133
     c6c:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
     c70:	10 92 e3 03 	sts	0x03E3, r1
     c74:	10 92 e2 03 	sts	0x03E2, r1
     c78:	41 c0       	rjmp	.+130    	; 0xcfc <__vector_26+0x152>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     c7a:	80 91 81 03 	lds	r24, 0x0381
     c7e:	90 91 82 03 	lds	r25, 0x0382
     c82:	20 91 dd 03 	lds	r18, 0x03DD
     c86:	30 91 de 03 	lds	r19, 0x03DE
     c8a:	82 17       	cp	r24, r18
     c8c:	93 07       	cpc	r25, r19
     c8e:	28 f5       	brcc	.+74     	; 0xcda <__vector_26+0x130>
				twi_send(twi_buffer.data[alreadyHandled++]);
     c90:	e0 91 db 03 	lds	r30, 0x03DB
     c94:	f0 91 dc 03 	lds	r31, 0x03DC
     c98:	e8 0f       	add	r30, r24
     c9a:	f9 1f       	adc	r31, r25
     c9c:	20 81       	ld	r18, Z
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	90 93 82 03 	sts	0x0382, r25
     ca4:	80 93 81 03 	sts	0x0381, r24
#define twi_continue() twi_base
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_send(uint8_t data) {
	TWI_DEBUG_BYTE_SENT(data)
	TWDR = data;
     ca8:	20 93 bb 00 	sts	0x00BB, r18
	twi_continue();
     cac:	85 e8       	ldi	r24, 0x85	; 133
     cae:	80 93 bc 00 	sts	0x00BC, r24
     cb2:	24 c0       	rjmp	.+72     	; 0xcfc <__vector_26+0x152>
		case TW_MT_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			twi_error = TWI_Master_TooMuchDataTransmitted;
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <__vector_26+0x11e>
// Master Receiver
		case TW_MR_SLA_ACK:
			twi_ack_receive();
			break;
		case TW_MR_DATA_ACK:
			twi_read_byte();
     cba:	0e 94 95 00 	call	0x12a	; 0x12a <twi_read_byte>
			twi_ack_receive();
     cbe:	0e 94 83 00 	call	0x106	; 0x106 <twi_ack_receive>
			break;
     cc2:	1c c0       	rjmp	.+56     	; 0xcfc <__vector_26+0x152>
		case TW_MR_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 84 03 	sts	0x0384, r25
     ccc:	80 93 83 03 	sts	0x0383, r24
			twi_stop();
     cd0:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
			break;
     cd4:	13 c0       	rjmp	.+38     	; 0xcfc <__vector_26+0x152>
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_read_byte();
     cd6:	0e 94 95 00 	call	0x12a	; 0x12a <twi_read_byte>
			twi_stop_or_next();
     cda:	0e 94 b4 05 	call	0xb68	; 0xb68 <twi_stop_or_next>
			break;
     cde:	0e c0       	rjmp	.+28     	; 0xcfc <__vector_26+0x152>
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
			break;
#endif
// Misc
		case TW_NO_INFO:
			twi_error = TWI_No_Info_Interrupt;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		case TW_BUS_ERROR:
			twi_error = TWI_Bus_Error;
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		default:
			twi_error = TWI_Illegal_Status;
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	90 93 84 03 	sts	0x0384, r25
     cf4:	80 93 83 03 	sts	0x0383, r24
			twi_unexpectedCondition();
     cf8:	0e 94 37 05 	call	0xa6e	; 0xa6e <twi_unexpectedCondition>
			break;
	}
}
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <twiMultipleOperations>:
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     d22:	1f 93       	push	r17
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <twiMultipleOperations+0x2a>
		furtherOperations[i] = operations[i];
     d2e:	da 01       	movw	r26, r20
     d30:	a1 5e       	subi	r26, 0xE1	; 225
     d32:	bb 4f       	sbci	r27, 0xFB	; 251
     d34:	fb 01       	movw	r30, r22
     d36:	e4 0f       	add	r30, r20
     d38:	f5 1f       	adc	r31, r21
     d3a:	17 e0       	ldi	r17, 0x07	; 7
     d3c:	01 90       	ld	r0, Z+
     d3e:	0d 92       	st	X+, r0
     d40:	11 50       	subi	r17, 0x01	; 1
     d42:	e1 f7       	brne	.-8      	; 0xd3c <twiMultipleOperations+0x1a>
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d44:	2f 5f       	subi	r18, 0xFF	; 255
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	49 5f       	subi	r20, 0xF9	; 249
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	28 17       	cp	r18, r24
     d4e:	39 07       	cpc	r19, r25
     d50:	5c f0       	brlt	.+22     	; 0xd68 <twiMultipleOperations+0x46>
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     d52:	f9 01       	movw	r30, r18
     d54:	43 e0       	ldi	r20, 0x03	; 3
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	4a 95       	dec	r20
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <twiMultipleOperations+0x34>
     d5e:	e2 1b       	sub	r30, r18
     d60:	f3 0b       	sbc	r31, r19
     d62:	ec 5d       	subi	r30, 0xDC	; 220
     d64:	fb 4f       	sbci	r31, 0xFB	; 251
     d66:	09 c0       	rjmp	.+18     	; 0xd7a <twiMultipleOperations+0x58>
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d68:	23 30       	cpi	r18, 0x03	; 3
     d6a:	31 05       	cpc	r19, r1
     d6c:	01 f7       	brne	.-64     	; 0xd2e <twiMultipleOperations+0xc>
     d6e:	f1 cf       	rjmp	.-30     	; 0xd52 <twiMultipleOperations+0x30>
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i].operationMode = TWI_IllegalOperation;
     d70:	11 82       	std	Z+1, r1	; 0x01
     d72:	10 82       	st	Z, r1
void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
     d74:	2f 5f       	subi	r18, 0xFF	; 255
     d76:	3f 4f       	sbci	r19, 0xFF	; 255
     d78:	37 96       	adiw	r30, 0x07	; 7
     d7a:	23 30       	cpi	r18, 0x03	; 3
     d7c:	31 05       	cpc	r19, r1
     d7e:	c4 f3       	brlt	.-16     	; 0xd70 <twiMultipleOperations+0x4e>
		furtherOperations[i].operationMode = TWI_IllegalOperation;
	}
	twi_start_master_operation();
     d80:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_start_master_operation>
}
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <twiSendReceive>:
void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
	twiMultipleOperations(1, op);
}

void twiSendReceive(TWIDevice targetDevice, TWIBuffer sendData, TWIBuffer receiveBuffer) {
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	df 93       	push	r29
     d8e:	cf 93       	push	r28
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	2e 97       	sbiw	r28, 0x0e	; 14
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
	TWIOperation ops[2] = {
     da0:	fe 01       	movw	r30, r28
     da2:	31 96       	adiw	r30, 0x01	; 1
     da4:	9e e0       	ldi	r25, 0x0E	; 14
     da6:	df 01       	movw	r26, r30
     da8:	1d 92       	st	X+, r1
     daa:	9a 95       	dec	r25
     dac:	e9 f7       	brne	.-6      	; 0xda8 <twiSendReceive+0x20>
     dae:	49 83       	std	Y+1, r20	; 0x01
     db0:	5a 83       	std	Y+2, r21	; 0x02
     db2:	6b 83       	std	Y+3, r22	; 0x03
     db4:	7c 83       	std	Y+4, r23	; 0x04
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	42 e0       	ldi	r20, 0x02	; 2
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	5f 83       	std	Y+7, r21	; 0x07
     dbe:	4e 83       	std	Y+6, r20	; 0x06
     dc0:	08 87       	std	Y+8, r16	; 0x08
     dc2:	19 87       	std	Y+9, r17	; 0x09
     dc4:	2a 87       	std	Y+10, r18	; 0x0a
     dc6:	3b 87       	std	Y+11, r19	; 0x0b
     dc8:	8c 87       	std	Y+12, r24	; 0x0c
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	9e 87       	std	Y+14, r25	; 0x0e
     dd0:	8d 87       	std	Y+13, r24	; 0x0d
		(TWIOperation) { sendData, targetDevice, TWI_Send },
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	bf 01       	movw	r22, r30
     dd8:	0e 94 91 06 	call	0xd22	; 0xd22 <twiMultipleOperations>
}
     ddc:	2e 96       	adiw	r28, 0x0e	; 14
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <twiReceive>:
void twiSend(TWIDevice targetDevice, TWIBuffer data) {
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
	twiMultipleOperations(1, op);
}

void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	27 97       	sbiw	r28, 0x07	; 7
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
     e06:	fe 01       	movw	r30, r28
     e08:	31 96       	adiw	r30, 0x01	; 1
     e0a:	97 e0       	ldi	r25, 0x07	; 7
     e0c:	df 01       	movw	r26, r30
     e0e:	1d 92       	st	X+, r1
     e10:	9a 95       	dec	r25
     e12:	e9 f7       	brne	.-6      	; 0xe0e <twiReceive+0x1c>
     e14:	49 83       	std	Y+1, r20	; 0x01
     e16:	5a 83       	std	Y+2, r21	; 0x02
     e18:	6b 83       	std	Y+3, r22	; 0x03
     e1a:	7c 83       	std	Y+4, r23	; 0x04
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9f 83       	std	Y+7, r25	; 0x07
     e24:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     e26:	bf 01       	movw	r22, r30
     e28:	0e 94 91 06 	call	0xd22	; 0xd22 <twiMultipleOperations>
}
     e2c:	27 96       	adiw	r28, 0x07	; 7
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <twiSend>:
			twi_unexpectedCondition();
			break;
	}
}

void twiSend(TWIDevice targetDevice, TWIBuffer data) {
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	27 97       	sbiw	r28, 0x07	; 7
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
     e52:	fe 01       	movw	r30, r28
     e54:	31 96       	adiw	r30, 0x01	; 1
     e56:	97 e0       	ldi	r25, 0x07	; 7
     e58:	df 01       	movw	r26, r30
     e5a:	1d 92       	st	X+, r1
     e5c:	9a 95       	dec	r25
     e5e:	e9 f7       	brne	.-6      	; 0xe5a <twiSend+0x1c>
     e60:	49 83       	std	Y+1, r20	; 0x01
     e62:	5a 83       	std	Y+2, r21	; 0x02
     e64:	6b 83       	std	Y+3, r22	; 0x03
     e66:	7c 83       	std	Y+4, r23	; 0x04
     e68:	8d 83       	std	Y+5, r24	; 0x05
     e6a:	82 e0       	ldi	r24, 0x02	; 2
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9f 83       	std	Y+7, r25	; 0x07
     e70:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	bf 01       	movw	r22, r30
     e78:	0e 94 91 06 	call	0xd22	; 0xd22 <twiMultipleOperations>
}
     e7c:	27 96       	adiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <WAIT_FOR_TWI>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e8e:	f8 94       	cli

void WAIT_FOR_TWI() {
	while (1) {
		uint8_t still_running;
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			still_running = twi_running;
     e90:	80 91 e2 03 	lds	r24, 0x03E2
     e94:	90 91 e3 03 	lds	r25, 0x03E3
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     e98:	78 94       	sei
		}
		if (!still_running) {
     e9a:	88 23       	and	r24, r24
     e9c:	c1 f7       	brne	.-16     	; 0xe8e <WAIT_FOR_TWI>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e9e:	87 e8       	ldi	r24, 0x87	; 135
     ea0:	93 e1       	ldi	r25, 0x13	; 19
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <WAIT_FOR_TWI+0x14>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <WAIT_FOR_TWI+0x1a>
     ea8:	00 00       	nop
			_delay_ms(TWI_DELAY);
			#endif
			break;
		}
	}
}
     eaa:	08 95       	ret

00000eac <turn_word>:

void turn_word(uint16_t *word) {
	uint8_t temp = ((uint8_t*) word)[0];
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
	((uint8_t*) word)[0] = ((uint8_t*) word)[1];
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	90 83       	st	Z, r25
	((uint8_t*) word)[1] = temp;
     eb4:	81 83       	std	Z+1, r24	; 0x01
}
     eb6:	08 95       	ret

00000eb8 <twi_rpc_oneway>:

void twi_rpc_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     eb8:	1f 93       	push	r17
     eba:	18 2f       	mov	r17, r24
     ebc:	86 2f       	mov	r24, r22
     ebe:	ba 01       	movw	r22, r20
     ec0:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     ec2:	0e 94 af 00 	call	0x15e	; 0x15e <fillSendBuffer>
	twiSend(device, sendBuffer);
     ec6:	40 91 9b 01 	lds	r20, 0x019B
     eca:	50 91 9c 01 	lds	r21, 0x019C
     ece:	60 91 9d 01 	lds	r22, 0x019D
     ed2:	70 91 9e 01 	lds	r23, 0x019E
     ed6:	81 2f       	mov	r24, r17
     ed8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <twiSend>
}
     edc:	1f 91       	pop	r17
     ede:	08 95       	ret

00000ee0 <twi_rpc_pseudo_oneway>:

void twi_rpc_pseudo_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	18 2f       	mov	r17, r24
     ee6:	86 2f       	mov	r24, r22
     ee8:	ba 01       	movw	r22, r20
     eea:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     eec:	0e 94 af 00 	call	0x15e	; 0x15e <fillSendBuffer>
	twiSendReceive(device, sendBuffer, (TWIBuffer) { 0, 0 });
     ef0:	40 91 9b 01 	lds	r20, 0x019B
     ef4:	50 91 9c 01 	lds	r21, 0x019C
     ef8:	60 91 9d 01 	lds	r22, 0x019D
     efc:	70 91 9e 01 	lds	r23, 0x019E
     f00:	81 2f       	mov	r24, r17
     f02:	00 e0       	ldi	r16, 0x00	; 0
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	98 01       	movw	r18, r16
     f08:	0e 94 c4 06 	call	0xd88	; 0xd88 <twiSendReceive>
}
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <bgx1_setIllumination>:

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setIllumination, CMD_SetIllumination, uint16_t)
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <bgx1_setIllumination+0x6>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	9e 01       	movw	r18, r28
     f22:	2f 5f       	subi	r18, 0xFF	; 255
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	42 e0       	ldi	r20, 0x02	; 2
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	80 91 82 01 	lds	r24, 0x0182
     f2e:	63 e4       	ldi	r22, 0x43	; 67
     f30:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
     f34:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <bgx1_termScroll>:
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	0f 92       	push	r0
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	9e 01       	movw	r18, r28
     f50:	2f 5f       	subi	r18, 0xFF	; 255
     f52:	3f 4f       	sbci	r19, 0xFF	; 255
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	80 91 82 01 	lds	r24, 0x0182
     f5c:	62 e3       	ldi	r22, 0x32	; 50
     f5e:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
     f62:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <bgx1_termGoto_base>:
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <bgx1_termGoto_base+0x6>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	9e 01       	movw	r18, r28
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	42 e0       	ldi	r20, 0x02	; 2
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	80 91 82 01 	lds	r24, 0x0182
     f8a:	61 e3       	ldi	r22, 0x31	; 49
     f8c:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
     f90:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <bgx1_termClear>:
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
     f9e:	80 91 82 01 	lds	r24, 0x0182
     fa2:	60 e3       	ldi	r22, 0x30	; 48
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	a9 01       	movw	r20, r18
     faa:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
     fae:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
     fb2:	08 95       	ret

00000fb4 <bgx1_selectFont>:
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	9e 01       	movw	r18, r28
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	80 91 82 01 	lds	r24, 0x0182
     fce:	65 e1       	ldi	r22, 0x15	; 21
     fd0:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
     fd4:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <bgx1_fillAll>:
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	9e 01       	movw	r18, r28
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	41 e0       	ldi	r20, 0x01	; 1
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	80 91 82 01 	lds	r24, 0x0182
     ffa:	62 e1       	ldi	r22, 0x12	; 18
     ffc:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
    1000:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <bgx1_mode>:
// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	9e 01       	movw	r18, r28
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	80 91 82 01 	lds	r24, 0x0182
    1026:	61 e1       	ldi	r22, 0x11	; 17
    1028:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
    102c:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <bgx1_move_base>:

// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <bgx1_move_base+0x6>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	9e 01       	movw	r18, r28
    1048:	2f 5f       	subi	r18, 0xFF	; 255
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	42 e0       	ldi	r20, 0x02	; 2
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	80 91 82 01 	lds	r24, 0x0182
    1054:	60 e1       	ldi	r22, 0x10	; 16
    1056:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
    105a:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <bgx1_setStatus>:

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setStatus, CMD_SetStatus, uint8_t)
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	9e 01       	movw	r18, r28
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	80 91 82 01 	lds	r24, 0x0182
    1082:	63 e0       	ldi	r22, 0x03	; 3
    1084:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
    1088:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <bgx1_reset>:
  
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
    1094:	80 91 82 01 	lds	r24, 0x0182
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	a9 01       	movw	r20, r18
    10a0:	0e 94 70 07 	call	0xee0	; 0xee0 <twi_rpc_pseudo_oneway>
    10a4:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    10a8:	08 95       	ret

000010aa <twi_rpc>:

void twi_rpc(TWIDevice device, byte operation, TWIBuffer parameters, TWIBuffer resultBuffer) {
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	d8 2e       	mov	r13, r24
    10b6:	86 2f       	mov	r24, r22
    10b8:	ba 01       	movw	r22, r20
    10ba:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
    10bc:	0e 94 af 00 	call	0x15e	; 0x15e <fillSendBuffer>
	twiSendReceive(device, sendBuffer, resultBuffer);
    10c0:	40 91 9b 01 	lds	r20, 0x019B
    10c4:	50 91 9c 01 	lds	r21, 0x019C
    10c8:	60 91 9d 01 	lds	r22, 0x019D
    10cc:	70 91 9e 01 	lds	r23, 0x019E
    10d0:	8d 2d       	mov	r24, r13
    10d2:	98 01       	movw	r18, r16
    10d4:	87 01       	movw	r16, r14
    10d6:	0e 94 c4 06 	call	0xd88	; 0xd88 <twiSendReceive>
}
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	08 95       	ret

000010e6 <bgx1_syncInterface>:
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <bgx1_syncInterface+0xe>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	8a 83       	std	Y+2, r24	; 0x02
    10fa:	9e 01       	movw	r18, r28
    10fc:	2e 5f       	subi	r18, 0xFE	; 254
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	7e 01       	movw	r14, r28
    1106:	08 94       	sec
    1108:	e1 1c       	adc	r14, r1
    110a:	f1 1c       	adc	r15, r1
    110c:	01 e0       	ldi	r16, 0x01	; 1
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	80 91 82 01 	lds	r24, 0x0182
    1114:	62 e4       	ldi	r22, 0x42	; 66
    1116:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    111a:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <bgx1_getAnalog_base>:
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <bgx1_getAnalog_base+0xe>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	9e 01       	movw	r18, r28
    114a:	2d 5f       	subi	r18, 0xFD	; 253
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	7e 01       	movw	r14, r28
    1154:	08 94       	sec
    1156:	e1 1c       	adc	r14, r1
    1158:	f1 1c       	adc	r15, r1
    115a:	02 e0       	ldi	r16, 0x02	; 2
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	80 91 82 01 	lds	r24, 0x0182
    1162:	61 e4       	ldi	r22, 0x41	; 65
    1164:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    1168:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	08 95       	ret

00001184 <bgx1_syncPort_base>:
	uint8_t ddr;
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <bgx1_syncPort_base+0xe>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9b 83       	std	Y+3, r25	; 0x03
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	9e 01       	movw	r18, r28
    119e:	2e 5f       	subi	r18, 0xFE	; 254
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	42 e0       	ldi	r20, 0x02	; 2
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	7e 01       	movw	r14, r28
    11a8:	08 94       	sec
    11aa:	e1 1c       	adc	r14, r1
    11ac:	f1 1c       	adc	r15, r1
    11ae:	01 e0       	ldi	r16, 0x01	; 1
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	80 91 82 01 	lds	r24, 0x0182
    11b6:	60 e4       	ldi	r22, 0x40	; 64
    11b8:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    11bc:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	08 95       	ret

000011d6 <bgx1_termPrint_base>:
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)

// The NIBObee lib receives an extra byte when executing this, don't know why
TWI_RPC_FUNCTION_VARARGS(bgx1_termPrint_base, CMD_TermPrint, StringArg, byte)
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9c 01       	movw	r18, r24
    11ea:	ab 01       	movw	r20, r22
    11ec:	7e 01       	movw	r14, r28
    11ee:	08 94       	sec
    11f0:	e1 1c       	adc	r14, r1
    11f2:	f1 1c       	adc	r15, r1
    11f4:	01 e0       	ldi	r16, 0x01	; 1
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	80 91 82 01 	lds	r24, 0x0182
    11fc:	63 e3       	ldi	r22, 0x33	; 51
    11fe:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    1202:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	08 95       	ret

00001218 <bgx1_lineTo_base>:
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <bgx1_lineTo_base+0xe>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <bgx1_lineTo_base+0x10>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9c 83       	std	Y+4, r25	; 0x04
    122e:	8b 83       	std	Y+3, r24	; 0x03
    1230:	9e 01       	movw	r18, r28
    1232:	2d 5f       	subi	r18, 0xFD	; 253
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	42 e0       	ldi	r20, 0x02	; 2
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	7e 01       	movw	r14, r28
    123c:	08 94       	sec
    123e:	e1 1c       	adc	r14, r1
    1240:	f1 1c       	adc	r15, r1
    1242:	02 e0       	ldi	r16, 0x02	; 2
    1244:	10 e0       	ldi	r17, 0x00	; 0
    1246:	80 91 82 01 	lds	r24, 0x0182
    124a:	6b e1       	ldi	r22, 0x1B	; 27
    124c:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    1250:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	08 95       	ret

0000126e <bgx1_embeddedImage>:
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <bgx1_embeddedImage+0xe>
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	9e 01       	movw	r18, r28
    1286:	2d 5f       	subi	r18, 0xFD	; 253
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	7e 01       	movw	r14, r28
    1290:	08 94       	sec
    1292:	e1 1c       	adc	r14, r1
    1294:	f1 1c       	adc	r15, r1
    1296:	02 e0       	ldi	r16, 0x02	; 2
    1298:	10 e0       	ldi	r17, 0x00	; 0
    129a:	80 91 82 01 	lds	r24, 0x0182
    129e:	6a e1       	ldi	r22, 0x1A	; 26
    12a0:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    12a4:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	08 95       	ret

000012c0 <bgx1_drawBitmap_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <bgx1_drawBitmap_base+0xe>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9c 01       	movw	r18, r24
    12d4:	ab 01       	movw	r20, r22
    12d6:	7e 01       	movw	r14, r28
    12d8:	08 94       	sec
    12da:	e1 1c       	adc	r14, r1
    12dc:	f1 1c       	adc	r15, r1
    12de:	02 e0       	ldi	r16, 0x02	; 2
    12e0:	10 e0       	ldi	r17, 0x00	; 0
    12e2:	80 91 82 01 	lds	r24, 0x0182
    12e6:	69 e1       	ldi	r22, 0x19	; 25
    12e8:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    12ec:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	ff 90       	pop	r15
    1302:	ef 90       	pop	r14
    1304:	08 95       	ret

00001306 <bgx1_box_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <bgx1_box_base+0xe>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <bgx1_box_base+0x10>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
    131e:	9e 01       	movw	r18, r28
    1320:	2d 5f       	subi	r18, 0xFD	; 253
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	42 e0       	ldi	r20, 0x02	; 2
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	7e 01       	movw	r14, r28
    132a:	08 94       	sec
    132c:	e1 1c       	adc	r14, r1
    132e:	f1 1c       	adc	r15, r1
    1330:	02 e0       	ldi	r16, 0x02	; 2
    1332:	10 e0       	ldi	r17, 0x00	; 0
    1334:	80 91 82 01 	lds	r24, 0x0182
    1338:	68 e1       	ldi	r22, 0x18	; 24
    133a:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    133e:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	08 95       	ret

0000135c <bgx1_vLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <bgx1_vLine+0xe>
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	9e 01       	movw	r18, r28
    1374:	2d 5f       	subi	r18, 0xFD	; 253
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	7e 01       	movw	r14, r28
    137e:	08 94       	sec
    1380:	e1 1c       	adc	r14, r1
    1382:	f1 1c       	adc	r15, r1
    1384:	02 e0       	ldi	r16, 0x02	; 2
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	80 91 82 01 	lds	r24, 0x0182
    138c:	67 e1       	ldi	r22, 0x17	; 23
    138e:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    1392:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	08 95       	ret

000013ae <bgx1_hLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <bgx1_hLine+0xe>
    13bc:	0f 92       	push	r0
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8b 83       	std	Y+3, r24	; 0x03
    13c4:	9e 01       	movw	r18, r28
    13c6:	2d 5f       	subi	r18, 0xFD	; 253
    13c8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	7e 01       	movw	r14, r28
    13d0:	08 94       	sec
    13d2:	e1 1c       	adc	r14, r1
    13d4:	f1 1c       	adc	r15, r1
    13d6:	02 e0       	ldi	r16, 0x02	; 2
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	80 91 82 01 	lds	r24, 0x0182
    13de:	66 e1       	ldi	r22, 0x16	; 22
    13e0:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    13e4:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	08 95       	ret

00001400 <bgx1_textWidth_base>:
// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	9c 01       	movw	r18, r24
    1414:	ab 01       	movw	r20, r22
    1416:	7e 01       	movw	r14, r28
    1418:	08 94       	sec
    141a:	e1 1c       	adc	r14, r1
    141c:	f1 1c       	adc	r15, r1
    141e:	01 e0       	ldi	r16, 0x01	; 1
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	80 91 82 01 	lds	r24, 0x0182
    1426:	64 e1       	ldi	r22, 0x14	; 20
    1428:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    142c:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	08 95       	ret

00001442 <bgx1_print_base>:

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <bgx1_print_base+0xe>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	9c 01       	movw	r18, r24
    1456:	ab 01       	movw	r20, r22
    1458:	7e 01       	movw	r14, r28
    145a:	08 94       	sec
    145c:	e1 1c       	adc	r14, r1
    145e:	f1 1c       	adc	r15, r1
    1460:	02 e0       	ldi	r16, 0x02	; 2
    1462:	10 e0       	ldi	r17, 0x00	; 0
    1464:	80 91 82 01 	lds	r24, 0x0182
    1468:	63 e1       	ldi	r22, 0x13	; 19
    146a:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    146e:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	08 95       	ret

00001488 <bgx1_getStatus>:
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	7e 01       	movw	r14, r28
    149c:	08 94       	sec
    149e:	e1 1c       	adc	r14, r1
    14a0:	f1 1c       	adc	r15, r1
    14a2:	01 e0       	ldi	r16, 0x01	; 1
    14a4:	10 e0       	ldi	r17, 0x00	; 0
    14a6:	80 91 82 01 	lds	r24, 0x0182
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    14b6:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	08 95       	ret

000014cc <bgx1_getVersion_base>:
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <bgx1_getVersion_base+0xe>
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	7e 01       	movw	r14, r28
    14e0:	08 94       	sec
    14e2:	e1 1c       	adc	r14, r1
    14e4:	f1 1c       	adc	r15, r1
    14e6:	02 e0       	ldi	r16, 0x02	; 2
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	80 91 82 01 	lds	r24, 0x0182
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	0e 94 55 08 	call	0x10aa	; 0x10aa <twi_rpc>
    14fa:	0e 94 47 07 	call	0xe8e	; 0xe8e <WAIT_FOR_TWI>
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	08 95       	ret

00001514 <before_timer>:
#define _BASE_AFTER_KERNEL_

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
    1514:	08 95       	ret

00001516 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
    1516:	80 b7       	in	r24, 0x30	; 48
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
    151c:	e4 e6       	ldi	r30, 0x64	; 100
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 66       	ori	r24, 0x60	; 96
    1524:	80 83       	st	Z, r24
	// BOD - TODO configure?
	
	// Final initialization-sequence.
	// AFTER other modules modified __default_stack_size and __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
    1526:	0e 94 8a 0a 	call	0x1514	; 0x1514 <before_timer>
	#ifdef TIMER_INTERRUPT_A
	enableTimerInterrupt(CLOCKTIMER_A);
    152a:	89 e3       	ldi	r24, 0x39	; 57
    152c:	93 e0       	ldi	r25, 0x03	; 3
    152e:	0e 94 2d 10 	call	0x205a	; 0x205a <enableTimerInterrupt>
	#endif
	#ifdef TIMER_INTERRUPT_B
	enableTimerInterrupt(CLOCKTIMER_B);
    1532:	89 ec       	ldi	r24, 0xC9	; 201
    1534:	93 e0       	ldi	r25, 0x03	; 3
    1536:	0e 94 2d 10 	call	0x205a	; 0x205a <enableTimerInterrupt>
	#endif
	sei();
    153a:	78 94       	sei
}
    153c:	08 95       	ret

0000153e <main>:
	
	// blink_reset_condition_byte(AllLeds, YellowLeds);
	
	
	
	regulateSpeedBackward(LeftMotor, SPEED);
    153e:	80 91 7e 01 	lds	r24, 0x017E
    1542:	90 91 7f 01 	lds	r25, 0x017F
    1546:	6f ef       	ldi	r22, 0xFF	; 255
    1548:	7f e0       	ldi	r23, 0x0F	; 15
    154a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <regulateSpeedBackward>
    154e:	8f ef       	ldi	r24, 0xFF	; 255
    1550:	91 e1       	ldi	r25, 0x11	; 17
    1552:	aa e7       	ldi	r26, 0x7A	; 122
    1554:	81 50       	subi	r24, 0x01	; 1
    1556:	90 40       	sbci	r25, 0x00	; 0
    1558:	a0 40       	sbci	r26, 0x00	; 0
    155a:	e1 f7       	brne	.-8      	; 0x1554 <main+0x16>
    155c:	00 c0       	rjmp	.+0      	; 0x155e <main+0x20>
    155e:	00 00       	nop
	_delay_ms(2000);
	regulateSpeedForward(LeftMotor, SPEED);
    1560:	80 91 7e 01 	lds	r24, 0x017E
    1564:	90 91 7f 01 	lds	r25, 0x017F
    1568:	6f ef       	ldi	r22, 0xFF	; 255
    156a:	7f e0       	ldi	r23, 0x0F	; 15
    156c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <regulateSpeedForward>
	
	
	blinkLed(RightRed, 5);
    1570:	80 91 0c 01 	lds	r24, 0x010C
    1574:	90 91 0d 01 	lds	r25, 0x010D
    1578:	65 e0       	ldi	r22, 0x05	; 5
    157a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <blinkLed>
    157e:	ff cf       	rjmp	.-2      	; 0x157e <main+0x40>

00001580 <button_pressed>:
	while (1) ;
}

void button_pressed(PButton button) {
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ec 01       	movw	r28, r24
	if (button == ButtonLeftBackward) {
    1586:	80 91 04 01 	lds	r24, 0x0104
    158a:	90 91 05 01 	lds	r25, 0x0105
    158e:	c8 17       	cp	r28, r24
    1590:	d9 07       	cpc	r29, r25
    1592:	81 f4       	brne	.+32     	; 0x15b4 <button_pressed+0x34>
		flashLed(LeftYellow, 300);
    1594:	80 91 08 01 	lds	r24, 0x0108
    1598:	90 91 09 01 	lds	r25, 0x0109
    159c:	6c e2       	ldi	r22, 0x2C	; 44
    159e:	71 e0       	ldi	r23, 0x01	; 1
    15a0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <flashLed>
		regulateSpeedBackward(LeftMotor, SPEED);
    15a4:	80 91 7e 01 	lds	r24, 0x017E
    15a8:	90 91 7f 01 	lds	r25, 0x017F
    15ac:	6f ef       	ldi	r22, 0xFF	; 255
    15ae:	7f e0       	ldi	r23, 0x0F	; 15
    15b0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <regulateSpeedBackward>
	}	
	if (button == ButtonLeftForward) {
    15b4:	80 91 06 01 	lds	r24, 0x0106
    15b8:	90 91 07 01 	lds	r25, 0x0107
    15bc:	c8 17       	cp	r28, r24
    15be:	d9 07       	cpc	r29, r25
    15c0:	81 f4       	brne	.+32     	; 0x15e2 <button_pressed+0x62>
		flashLed(LeftRed, 300);
    15c2:	80 91 0a 01 	lds	r24, 0x010A
    15c6:	90 91 0b 01 	lds	r25, 0x010B
    15ca:	6c e2       	ldi	r22, 0x2C	; 44
    15cc:	71 e0       	ldi	r23, 0x01	; 1
    15ce:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <flashLed>
		regulateSpeedForward(LeftMotor, SPEED);
    15d2:	80 91 7e 01 	lds	r24, 0x017E
    15d6:	90 91 7f 01 	lds	r25, 0x017F
    15da:	6f ef       	ldi	r22, 0xFF	; 255
    15dc:	7f e0       	ldi	r23, 0x0F	; 15
    15de:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <regulateSpeedForward>
	}	
	if (button == ButtonRightBackward) {
    15e2:	80 91 00 01 	lds	r24, 0x0100
    15e6:	90 91 01 01 	lds	r25, 0x0101
    15ea:	c8 17       	cp	r28, r24
    15ec:	d9 07       	cpc	r29, r25
    15ee:	81 f4       	brne	.+32     	; 0x1610 <button_pressed+0x90>
		flashLed(RightYellow, 300);
    15f0:	80 91 0e 01 	lds	r24, 0x010E
    15f4:	90 91 0f 01 	lds	r25, 0x010F
    15f8:	6c e2       	ldi	r22, 0x2C	; 44
    15fa:	71 e0       	ldi	r23, 0x01	; 1
    15fc:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <flashLed>
		regulateSpeedBackward(RightMotor, SPEED);
    1600:	80 91 80 01 	lds	r24, 0x0180
    1604:	90 91 81 01 	lds	r25, 0x0181
    1608:	6f ef       	ldi	r22, 0xFF	; 255
    160a:	7f e0       	ldi	r23, 0x0F	; 15
    160c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <regulateSpeedBackward>
	}	
	if (button == ButtonRightForward) {
    1610:	80 91 02 01 	lds	r24, 0x0102
    1614:	90 91 03 01 	lds	r25, 0x0103
    1618:	c8 17       	cp	r28, r24
    161a:	d9 07       	cpc	r29, r25
    161c:	81 f4       	brne	.+32     	; 0x163e <button_pressed+0xbe>
		flashLed(RightRed, 300);
    161e:	80 91 0c 01 	lds	r24, 0x010C
    1622:	90 91 0d 01 	lds	r25, 0x010D
    1626:	6c e2       	ldi	r22, 0x2C	; 44
    1628:	71 e0       	ldi	r23, 0x01	; 1
    162a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <flashLed>
		regulateSpeedForward(RightMotor, SPEED);
    162e:	80 91 80 01 	lds	r24, 0x0180
    1632:	90 91 81 01 	lds	r25, 0x0181
    1636:	6f ef       	ldi	r22, 0xFF	; 255
    1638:	7f e0       	ldi	r23, 0x0F	; 15
    163a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <regulateSpeedForward>
	}
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <regulateSpeed>:

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
}

void regulateSpeed(PSmoothMotor motor, uint16_t speed, MotorDirection direction) {
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	ec 01       	movw	r28, r24
    1652:	8b 01       	movw	r16, r22
    1654:	7a 01       	movw	r14, r20
	mutex_lock(motor->mutex);
    1656:	8e 85       	ldd	r24, Y+14	; 0x0e
    1658:	9f 85       	ldd	r25, Y+15	; 0x0f
    165a:	0e 94 10 03 	call	0x620	; 0x620 <mutex_lock>
	motor->targetSpeed = speed;
    165e:	1f 83       	std	Y+7, r17	; 0x07
    1660:	0e 83       	std	Y+6, r16	; 0x06
	motor->targetDirection = direction;
    1662:	f9 86       	std	Y+9, r15	; 0x09
    1664:	e8 86       	std	Y+8, r14	; 0x08
	if (!motor->tickRunning) {
    1666:	8a 85       	ldd	r24, Y+10	; 0x0a
    1668:	9b 85       	ldd	r25, Y+11	; 0x0b
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	39 f4       	brne	.+14     	; 0x167c <regulateSpeed+0x38>
		motor_smooth_start_tick(motor);
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 a7 04 	call	0x94e	; 0x94e <motor_smooth_start_tick>
		motor->tickRunning = TRUE;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9b 87       	std	Y+11, r25	; 0x0b
    167a:	8a 87       	std	Y+10, r24	; 0x0a
	}
	mutex_release(motor->mutex);
    167c:	8e 85       	ldd	r24, Y+14	; 0x0e
    167e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1680:	0e 94 1e 03 	call	0x63c	; 0x63c <mutex_release>
}
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	08 95       	ret

00001692 <regulateStopMotor>:

// 'Imported' from motor.c. Avoided adding internal-header just for this function.
uint16_t motor_toUnsignedSpeed(int16_t speed);

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	42 e0       	ldi	r20, 0x02	; 2
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	0e 94 22 0b 	call	0x1644	; 0x1644 <regulateSpeed>
}
    169e:	08 95       	ret

000016a0 <regulateSpeedForward>:
	}
	mutex_release(motor->mutex);
}

void regulateSpeedForward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, FORWARD);
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	0e 94 22 0b 	call	0x1644	; 0x1644 <regulateSpeed>
}
    16a8:	08 95       	ret

000016aa <regulateSpeedBackward>:

void regulateSpeedBackward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, BACKWARD);
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	0e 94 22 0b 	call	0x1644	; 0x1644 <regulateSpeed>
}
    16b2:	08 95       	ret

000016b4 <regulateDirSpeed>:

void regulateDirSpeed(PSmoothMotor motor, int16_t speed) {
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	ec 01       	movw	r28, r24
    16be:	8b 01       	movw	r16, r22
	if (speed == 0) {
    16c0:	61 15       	cp	r22, r1
    16c2:	71 05       	cpc	r23, r1
    16c4:	19 f4       	brne	.+6      	; 0x16cc <regulateDirSpeed+0x18>
		regulateStopMotor(motor);
    16c6:	0e 94 49 0b 	call	0x1692	; 0x1692 <regulateStopMotor>
		return;
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <regulateDirSpeed+0x32>
	}
	regulateSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    16cc:	cb 01       	movw	r24, r22
    16ce:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <motor_toUnsignedSpeed>
    16d2:	bc 01       	movw	r22, r24
    16d4:	41 2f       	mov	r20, r17
    16d6:	40 95       	com	r20
    16d8:	44 1f       	adc	r20, r20
    16da:	44 27       	eor	r20, r20
    16dc:	44 1f       	adc	r20, r20
    16de:	ce 01       	movw	r24, r28
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 22 0b 	call	0x1644	; 0x1644 <regulateSpeed>
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <motor_smooth_tick>:

void motor_smooth_tick(PSmoothMotor motor) {
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ec 01       	movw	r28, r24
	mutex_lock(motor->mutex);
    16f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    16f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    16fa:	0e 94 10 03 	call	0x620	; 0x620 <mutex_lock>
	
	// Load all values into registers.
	MotorDirection targetDir = motor->targetDirection;
    16fe:	48 85       	ldd	r20, Y+8	; 0x08
    1700:	59 85       	ldd	r21, Y+9	; 0x09
	uint16_t currentSpeed = motor->currentSpeed;
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	9b 81       	ldd	r25, Y+3	; 0x03
	uint16_t targetSpeed = motor->targetSpeed;
    1706:	6e 81       	ldd	r22, Y+6	; 0x06
    1708:	7f 81       	ldd	r23, Y+7	; 0x07
	uint16_t adjustment = motor->adjustmentStep;
    170a:	2c 85       	ldd	r18, Y+12	; 0x0c
    170c:	3d 85       	ldd	r19, Y+13	; 0x0d
	
	if (motor->currentDirection != targetDir) {
    170e:	ec 81       	ldd	r30, Y+4	; 0x04
    1710:	fd 81       	ldd	r31, Y+5	; 0x05
    1712:	e4 17       	cp	r30, r20
    1714:	f5 07       	cpc	r31, r21
    1716:	41 f0       	breq	.+16     	; 0x1728 <motor_smooth_tick+0x38>
		// Slowing down until we can change the direction.
		if (currentSpeed < adjustment) {
    1718:	82 17       	cp	r24, r18
    171a:	93 07       	cpc	r25, r19
    171c:	c0 f4       	brcc	.+48     	; 0x174e <motor_smooth_tick+0x5e>
			// Reached zero. Now we either finished stopping,
			// or can continue in the other direction.
			currentSpeed = 0;
			motor->currentDirection = targetDir;
    171e:	5d 83       	std	Y+5, r21	; 0x05
    1720:	4c 83       	std	Y+4, r20	; 0x04
	if (motor->currentDirection != targetDir) {
		// Slowing down until we can change the direction.
		if (currentSpeed < adjustment) {
			// Reached zero. Now we either finished stopping,
			// or can continue in the other direction.
			currentSpeed = 0;
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <motor_smooth_tick+0x64>
		} else {
			currentSpeed -= adjustment;
		}
	} else {
		// Going in the correct direction already.
		if (currentSpeed < targetSpeed) { // Speeding up
    1728:	86 17       	cp	r24, r22
    172a:	97 07       	cpc	r25, r23
    172c:	50 f4       	brcc	.+20     	; 0x1742 <motor_smooth_tick+0x52>
			if (targetSpeed - currentSpeed < adjustment) {
    172e:	ab 01       	movw	r20, r22
    1730:	48 1b       	sub	r20, r24
    1732:	59 0b       	sbc	r21, r25
    1734:	42 17       	cp	r20, r18
    1736:	53 07       	cpc	r21, r19
    1738:	68 f0       	brcs	.+26     	; 0x1754 <motor_smooth_tick+0x64>
				currentSpeed = targetSpeed;
			} else {
				currentSpeed += adjustment;
    173a:	b9 01       	movw	r22, r18
    173c:	68 0f       	add	r22, r24
    173e:	79 1f       	adc	r23, r25
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <motor_smooth_tick+0x64>
			}
		} else { // Slowing down
			if (currentSpeed - targetSpeed < adjustment) {
    1742:	ac 01       	movw	r20, r24
    1744:	46 1b       	sub	r20, r22
    1746:	57 0b       	sbc	r21, r23
    1748:	42 17       	cp	r20, r18
    174a:	53 07       	cpc	r21, r19
    174c:	18 f0       	brcs	.+6      	; 0x1754 <motor_smooth_tick+0x64>
				currentSpeed = targetSpeed;
			} else {
				currentSpeed -= adjustment;
    174e:	bc 01       	movw	r22, r24
    1750:	62 1b       	sub	r22, r18
    1752:	73 0b       	sbc	r23, r19
			}
		}
	}
	
	// After the adjustments, update the actual value!
	motor->currentSpeed = currentSpeed;
    1754:	7b 83       	std	Y+3, r23	; 0x03
    1756:	6a 83       	std	Y+2, r22	; 0x02
	setSpeed(motor->motor, motor->currentSpeed, motor->currentDirection);
    1758:	4c 81       	ldd	r20, Y+4	; 0x04
    175a:	5d 81       	ldd	r21, Y+5	; 0x05
    175c:	88 81       	ld	r24, Y
    175e:	99 81       	ldd	r25, Y+1	; 0x01
    1760:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <setSpeed>
	
	// If we are ready adjusting, stop ticking.
	if (motor->targetSpeed == motor->currentSpeed && motor->targetDirection == motor->currentDirection) {
    1764:	2e 81       	ldd	r18, Y+6	; 0x06
    1766:	3f 81       	ldd	r19, Y+7	; 0x07
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	9b 81       	ldd	r25, Y+3	; 0x03
    176c:	28 17       	cp	r18, r24
    176e:	39 07       	cpc	r19, r25
    1770:	61 f4       	brne	.+24     	; 0x178a <motor_smooth_tick+0x9a>
    1772:	28 85       	ldd	r18, Y+8	; 0x08
    1774:	39 85       	ldd	r19, Y+9	; 0x09
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	9d 81       	ldd	r25, Y+5	; 0x05
    177a:	28 17       	cp	r18, r24
    177c:	39 07       	cpc	r19, r25
    177e:	29 f4       	brne	.+10     	; 0x178a <motor_smooth_tick+0x9a>
		motor_smooth_stop_tick(motor);
    1780:	ce 01       	movw	r24, r28
    1782:	0e 94 a2 04 	call	0x944	; 0x944 <motor_smooth_stop_tick>
		motor->tickRunning = FALSE;
    1786:	1b 86       	std	Y+11, r1	; 0x0b
    1788:	1a 86       	std	Y+10, r1	; 0x0a
	}
	mutex_release(motor->mutex);
    178a:	8e 85       	ldd	r24, Y+14	; 0x0e
    178c:	9f 85       	ldd	r25, Y+15	; 0x0f
    178e:	0e 94 1e 03 	call	0x63c	; 0x63c <mutex_release>
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    1798:	80 32       	cpi	r24, 0x20	; 32
    179a:	18 f5       	brcc	.+70     	; 0x17e2 <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    179c:	58 2f       	mov	r21, r24
    179e:	56 95       	lsr	r21
    17a0:	56 95       	lsr	r21
    17a2:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    17a4:	e5 2f       	mov	r30, r21
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	ee 51       	subi	r30, 0x1E	; 30
    17ae:	fe 4f       	sbci	r31, 0xFE	; 254
    17b0:	01 90       	ld	r0, Z+
    17b2:	f0 81       	ld	r31, Z
    17b4:	e0 2d       	mov	r30, r0
    17b6:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    17b8:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	b9 01       	movw	r22, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <enablePinChangeInterrupt+0x2e>
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <enablePinChangeInterrupt+0x2a>
    17ca:	46 2b       	or	r20, r22
    17cc:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
    17ce:	80 91 68 00 	lds	r24, 0x0068
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <enablePinChangeInterrupt+0x40>
    17d4:	22 0f       	add	r18, r18
    17d6:	33 1f       	adc	r19, r19
    17d8:	5a 95       	dec	r21
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <enablePinChangeInterrupt+0x3c>
    17dc:	82 2b       	or	r24, r18
    17de:	80 93 68 00 	sts	0x0068, r24
    17e2:	08 95       	ret

000017e4 <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    17e4:	80 32       	cpi	r24, 0x20	; 32
    17e6:	c0 f4       	brcc	.+48     	; 0x1818 <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    17e8:	e8 2f       	mov	r30, r24
    17ea:	e6 95       	lsr	r30
    17ec:	e6 95       	lsr	r30
    17ee:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	ee 51       	subi	r30, 0x1E	; 30
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	01 90       	ld	r0, Z+
    17fc:	f0 81       	ld	r31, Z
    17fe:	e0 2d       	mov	r30, r0
    1800:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    1802:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    1804:	21 e0       	ldi	r18, 0x01	; 1
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	02 c0       	rjmp	.+4      	; 0x180e <disblePinChangeInterrupt+0x2a>
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <disblePinChangeInterrupt+0x26>
    1812:	20 95       	com	r18
    1814:	29 23       	and	r18, r25
    1816:	20 83       	st	Z, r18
    1818:	08 95       	ret

0000181a <DELAY_MS>:
	}
}

static inline void BLINK_DELAY() { _delay_ms(200); }
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
    181a:	07 c0       	rjmp	.+14     	; 0x182a <DELAY_MS+0x10>
    181c:	e7 e8       	ldi	r30, 0x87	; 135
    181e:	f3 e1       	ldi	r31, 0x13	; 19
    1820:	31 97       	sbiw	r30, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <DELAY_MS+0x6>
    1824:	00 c0       	rjmp	.+0      	; 0x1826 <DELAY_MS+0xc>
    1826:	00 00       	nop
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	b9 f7       	brne	.-18     	; 0x181c <DELAY_MS+0x2>
}
    182e:	08 95       	ret

00001830 <BLINK_DELAY>:
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	94 e3       	ldi	r25, 0x34	; 52
    1834:	ac e0       	ldi	r26, 0x0C	; 12
    1836:	81 50       	subi	r24, 0x01	; 1
    1838:	90 40       	sbci	r25, 0x00	; 0
    183a:	a0 40       	sbci	r26, 0x00	; 0
    183c:	e1 f7       	brne	.-8      	; 0x1836 <BLINK_DELAY+0x6>
    183e:	00 c0       	rjmp	.+0      	; 0x1840 <BLINK_DELAY+0x10>
    1840:	00 00       	nop
	for (int i = 0, max = leds->count; i < max; i++) {
		disableLed(leds->leds[i]);
	}
}

static inline void BLINK_DELAY() { _delay_ms(200); }
    1842:	08 95       	ret

00001844 <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	91 81       	ldd	r25, Z+1	; 0x01
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <writePin>
}
    1852:	08 95       	ret

00001854 <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
    1854:	fc 01       	movw	r30, r24
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <writePin>
}
    1862:	08 95       	ret

00001864 <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <writePin>
}
    186e:	08 95       	ret

00001870 <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	6c 01       	movw	r12, r24
    1886:	5b 01       	movw	r10, r22
	uint16_t iMask = 1 << (16 - leds->count);
    1888:	dc 01       	movw	r26, r24
    188a:	12 96       	adiw	r26, 0x02	; 2
    188c:	0c 91       	ld	r16, X
    188e:	12 97       	sbiw	r26, 0x02	; 2
    1890:	10 e0       	ldi	r17, 0x00	; 0
    1892:	80 e1       	ldi	r24, 0x10	; 16
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	80 1b       	sub	r24, r16
    1898:	91 0b       	sbc	r25, r17
    189a:	c1 e0       	ldi	r28, 0x01	; 1
    189c:	d0 e0       	ldi	r29, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <setLeds+0x34>
    18a0:	cc 0f       	add	r28, r28
    18a2:	dd 1f       	adc	r29, r29
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <setLeds+0x30>
	for (int i = leds->count - 1; i >= 0; i--) {
    18a8:	01 50       	subi	r16, 0x01	; 1
    18aa:	10 40       	sbci	r17, 0x00	; 0
    18ac:	78 01       	movw	r14, r16
    18ae:	ee 0c       	add	r14, r14
    18b0:	ff 1c       	adc	r15, r15
    18b2:	17 c0       	rjmp	.+46     	; 0x18e2 <setLeds+0x72>
		setLed(leds->leds[i], iMask & mask);
    18b4:	d6 01       	movw	r26, r12
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	ee 0d       	add	r30, r14
    18bc:	ff 1d       	adc	r31, r15
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    18be:	01 90       	ld	r0, Z+
    18c0:	f0 81       	ld	r31, Z
    18c2:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
    18c4:	be 01       	movw	r22, r28
    18c6:	6a 21       	and	r22, r10
    18c8:	7b 21       	and	r23, r11
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    18d2:	cc 0f       	add	r28, r28
    18d4:	dd 1f       	adc	r29, r29
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
    18d6:	01 50       	subi	r16, 0x01	; 1
    18d8:	10 40       	sbci	r17, 0x00	; 0
    18da:	ee ef       	ldi	r30, 0xFE	; 254
    18dc:	ff ef       	ldi	r31, 0xFF	; 255
    18de:	ee 0e       	add	r14, r30
    18e0:	ff 1e       	adc	r15, r31
    18e2:	ff ef       	ldi	r31, 0xFF	; 255
    18e4:	0f 3f       	cpi	r16, 0xFF	; 255
    18e6:	1f 07       	cpc	r17, r31
    18e8:	29 f7       	brne	.-54     	; 0x18b4 <setLeds+0x44>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	bf 90       	pop	r11
    18fc:	af 90       	pop	r10
    18fe:	08 95       	ret

00001900 <enableLeds>:

void enableLeds(PLedGroup leds) {
    1900:	ef 92       	push	r14
    1902:	ff 92       	push	r15
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    190e:	dc 01       	movw	r26, r24
    1910:	12 96       	adiw	r26, 0x02	; 2
    1912:	ec 90       	ld	r14, X
    1914:	12 97       	sbiw	r26, 0x02	; 2
    1916:	ff 24       	eor	r15, r15
    1918:	c0 e0       	ldi	r28, 0x00	; 0
    191a:	d0 e0       	ldi	r29, 0x00	; 0
    191c:	0d c0       	rjmp	.+26     	; 0x1938 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    191e:	ce 01       	movw	r24, r28
    1920:	88 0f       	add	r24, r24
    1922:	99 1f       	adc	r25, r25
    1924:	d8 01       	movw	r26, r16
    1926:	ed 91       	ld	r30, X+
    1928:	fc 91       	ld	r31, X
    192a:	e8 0f       	add	r30, r24
    192c:	f9 1f       	adc	r31, r25
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	0e 94 22 0c 	call	0x1844	; 0x1844 <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1936:	21 96       	adiw	r28, 0x01	; 1
    1938:	ce 15       	cp	r28, r14
    193a:	df 05       	cpc	r29, r15
    193c:	84 f3       	brlt	.-32     	; 0x191e <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	08 95       	ret

0000194c <disableLeds>:

void disableLeds(PLedGroup leds) {
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    195a:	dc 01       	movw	r26, r24
    195c:	12 96       	adiw	r26, 0x02	; 2
    195e:	ec 90       	ld	r14, X
    1960:	12 97       	sbiw	r26, 0x02	; 2
    1962:	ff 24       	eor	r15, r15
    1964:	c0 e0       	ldi	r28, 0x00	; 0
    1966:	d0 e0       	ldi	r29, 0x00	; 0
    1968:	0d c0       	rjmp	.+26     	; 0x1984 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    196a:	ce 01       	movw	r24, r28
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	d8 01       	movw	r26, r16
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	e8 0f       	add	r30, r24
    1978:	f9 1f       	adc	r31, r25
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1982:	21 96       	adiw	r28, 0x01	; 1
    1984:	ce 15       	cp	r28, r14
    1986:	df 05       	cpc	r29, r15
    1988:	84 f3       	brlt	.-32     	; 0x196a <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	08 95       	ret

00001998 <blinkLeds>:
static inline void BLINK_DELAY() { _delay_ms(200); }
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, uint8_t times) {
    1998:	cf 92       	push	r12
    199a:	df 92       	push	r13
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	0f 92       	push	r0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	6c 01       	movw	r12, r24
    19ae:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    19b0:	ff 24       	eor	r15, r15
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <blinkLeds+0x38>
		setLeds(leds, ledMask);
    19b4:	c6 01       	movw	r24, r12
    19b6:	b8 01       	movw	r22, r16
    19b8:	49 83       	std	Y+1, r20	; 0x01
    19ba:	0e 94 38 0c 	call	0x1870	; 0x1870 <setLeds>
		BLINK_DELAY();
    19be:	0e 94 18 0c 	call	0x1830	; 0x1830 <BLINK_DELAY>
		disableLeds(leds);
    19c2:	c6 01       	movw	r24, r12
    19c4:	0e 94 a6 0c 	call	0x194c	; 0x194c <disableLeds>
		BLINK_DELAY();
    19c8:	0e 94 18 0c 	call	0x1830	; 0x1830 <BLINK_DELAY>
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    19cc:	f3 94       	inc	r15
    19ce:	49 81       	ldd	r20, Y+1	; 0x01
    19d0:	f4 16       	cp	r15, r20
    19d2:	80 f3       	brcs	.-32     	; 0x19b4 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		BLINK_DELAY();
		disableLeds(leds);
		BLINK_DELAY();
	}
}
    19d4:	0f 90       	pop	r0
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	df 90       	pop	r13
    19e2:	cf 90       	pop	r12
    19e4:	08 95       	ret

000019e6 <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, uint8_t times) {
    19e6:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    19e8:	6f ef       	ldi	r22, 0xFF	; 255
    19ea:	7f ef       	ldi	r23, 0xFF	; 255
    19ec:	0e 94 cc 0c 	call	0x1998	; 0x1998 <blinkLeds>
}
    19f0:	08 95       	ret

000019f2 <blinkLed>:

void blinkLed(PLed led, uint8_t times) {
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	1f 93       	push	r17
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	0f 92       	push	r0
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < times; i++) {
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	0d c0       	rjmp	.+26     	; 0x1a22 <blinkLed+0x30>
		enableLed(led);
    1a08:	c7 01       	movw	r24, r14
    1a0a:	69 83       	std	Y+1, r22	; 0x01
    1a0c:	0e 94 22 0c 	call	0x1844	; 0x1844 <enableLed>
		BLINK_DELAY();
    1a10:	0e 94 18 0c 	call	0x1830	; 0x1830 <BLINK_DELAY>
		disableLed(led);
    1a14:	c7 01       	movw	r24, r14
    1a16:	0e 94 2a 0c 	call	0x1854	; 0x1854 <disableLed>
		BLINK_DELAY();
    1a1a:	0e 94 18 0c 	call	0x1830	; 0x1830 <BLINK_DELAY>
void blinkAllLeds(PLedGroup leds, uint8_t times) {
	blinkLeds(leds, 0xFFFF, times);
}

void blinkLed(PLed led, uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    1a1e:	1f 5f       	subi	r17, 0xFF	; 255
    1a20:	69 81       	ldd	r22, Y+1	; 0x01
    1a22:	16 17       	cp	r17, r22
    1a24:	88 f3       	brcs	.-30     	; 0x1a08 <blinkLed+0x16>
		enableLed(led);
		BLINK_DELAY();
		disableLed(led);
		BLINK_DELAY();
	}
}
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	1f 91       	pop	r17
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	08 95       	ret

00001a34 <flashLed>:

void flashLed(PLed led, const uint16_t millis) {
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	8b 01       	movw	r16, r22
	enableLed(led);
    1a40:	0e 94 22 0c 	call	0x1844	; 0x1844 <enableLed>
	DELAY_MS(millis);
    1a44:	c8 01       	movw	r24, r16
    1a46:	0e 94 0d 0c 	call	0x181a	; 0x181a <DELAY_MS>
	disableLed(led);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <disableLed>
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	08 95       	ret

00001a5a <flashLeds>:

void flashLeds(PLedGroup leds, uint16_t ledMask, uint16_t millis) {
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	ec 01       	movw	r28, r24
    1a64:	8a 01       	movw	r16, r20
	setLeds(leds, ledMask);
    1a66:	0e 94 38 0c 	call	0x1870	; 0x1870 <setLeds>
	DELAY_MS(millis);
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	0e 94 0d 0c 	call	0x181a	; 0x181a <DELAY_MS>
	disableLeds(leds);
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 a6 0c 	call	0x194c	; 0x194c <disableLeds>
}
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <flashAllLeds>:

void flashAllLeds(PLedGroup leds, uint16_t millis) {
    1a80:	ab 01       	movw	r20, r22
	flashLeds(leds, 0xFFFF, millis);
    1a82:	6f ef       	ldi	r22, 0xFF	; 255
    1a84:	7f ef       	ldi	r23, 0xFF	; 255
    1a86:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <flashLeds>
}
    1a8a:	08 95       	ret

00001a8c <blinkByte>:

void blinkByte(PLedGroup display, PLedGroup notifier, byte data) {
    1a8c:	af 92       	push	r10
    1a8e:	bf 92       	push	r11
    1a90:	cf 92       	push	r12
    1a92:	df 92       	push	r13
    1a94:	ef 92       	push	r14
    1a96:	ff 92       	push	r15
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	8c 01       	movw	r16, r24
    1aa8:	7b 01       	movw	r14, r22
	flashAllLeds(notifier, 1500);
    1aaa:	cb 01       	movw	r24, r22
    1aac:	6c ed       	ldi	r22, 0xDC	; 220
    1aae:	75 e0       	ldi	r23, 0x05	; 5
    1ab0:	49 83       	std	Y+1, r20	; 0x01
    1ab2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <flashAllLeds>
	uint16_t word = AS_WORD(data);
    1ab6:	49 81       	ldd	r20, Y+1	; 0x01
    1ab8:	b4 2e       	mov	r11, r20
    1aba:	aa 24       	eor	r10, r10
	blinkLeds(display, word, 3);
    1abc:	c8 01       	movw	r24, r16
    1abe:	b5 01       	movw	r22, r10
    1ac0:	43 e0       	ldi	r20, 0x03	; 3
    1ac2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <blinkLeds>
	if (display->count < 8) {
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	d2 80       	ldd	r13, Z+2	; 0x02
    1aca:	fd 2d       	mov	r31, r13
    1acc:	f8 30       	cpi	r31, 0x08	; 8
    1ace:	78 f4       	brcc	.+30     	; 0x1aee <blinkByte+0x62>
		// max one shift
		word = word << display->count;
		flashAllLeds(notifier, 700);
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	6c eb       	ldi	r22, 0xBC	; 188
    1ad4:	72 e0       	ldi	r23, 0x02	; 2
    1ad6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <flashAllLeds>
	flashAllLeds(notifier, 1500);
	uint16_t word = AS_WORD(data);
	blinkLeds(display, word, 3);
	if (display->count < 8) {
		// max one shift
		word = word << display->count;
    1ada:	b5 01       	movw	r22, r10
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <blinkByte+0x56>
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	da 94       	dec	r13
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <blinkByte+0x52>
		flashAllLeds(notifier, 700);
		blinkLeds(display, word, 3);
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	43 e0       	ldi	r20, 0x03	; 3
    1aea:	0e 94 cc 0c 	call	0x1998	; 0x1998 <blinkLeds>
	}
}
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	bf 90       	pop	r11
    1b02:	af 90       	pop	r10
    1b04:	08 95       	ret

00001b06 <stopMotor>:
		speed = motor->maxValue;
	}
	setTimerCompareValue(motor->pwmTimer, speed);
}

void stopMotor(PMotor motor) {
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	ec 01       	movw	r28, r24
	// TODO -- unclear how to stop the motor.
	
	disableOutputCompare(motor->pwmTimer);
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	0e 94 64 10 	call	0x20c8	; 0x20c8 <disableOutputCompare>
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

static void setMotorCompareValue(PMotor motor, uint16_t speed) {
	if (motor->flags & MOTOR_INVERSE_SPEED) speed = 0xFFFF - speed;
    1b14:	88 81       	ld	r24, Y
    1b16:	81 fd       	sbrc	r24, 1
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <stopMotor+0x1a>
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <stopMotor+0x1e>
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	7f ef       	ldi	r23, 0xFF	; 255
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	68 17       	cp	r22, r24
    1b2a:	79 07       	cpc	r23, r25
    1b2c:	08 f4       	brcc	.+2      	; 0x1b30 <stopMotor+0x2a>
    1b2e:	bc 01       	movw	r22, r24
		speed = motor->minValue;
	}
	if (speed > motor->maxValue) {
		speed = motor->maxValue;
	}
	setTimerCompareValue(motor->pwmTimer, speed);
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	2f 81       	ldd	r18, Y+7	; 0x07
    1b36:	38 85       	ldd	r19, Y+8	; 0x08
    1b38:	26 17       	cp	r18, r22
    1b3a:	37 07       	cpc	r19, r23
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <stopMotor+0x3a>
    1b3e:	b9 01       	movw	r22, r18
    1b40:	0e 94 69 10 	call	0x20d2	; 0x20d2 <setTimerCompareValue>
void stopMotor(PMotor motor) {
	// TODO -- unclear how to stop the motor.
	
	disableOutputCompare(motor->pwmTimer);
	setMotorCompareValue(motor, 0);
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1b44:	88 81       	ld	r24, Y
    1b46:	83 ff       	sbrs	r24, 3
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <stopMotor+0x54>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
		setPinZero(Dir2(motor));
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b56:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
	}
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    1b60:	fc 01       	movw	r30, r24
    1b62:	83 81       	ldd	r24, Z+3	; 0x03
    1b64:	94 81       	ldd	r25, Z+4	; 0x04
    1b66:	0e 94 90 10 	call	0x2120	; 0x2120 <getTimerCompareValue>
}
    1b6a:	08 95       	ret

00001b6c <getDirection>:

MotorDirection getDirection(PMotor motor) {
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1b76:	28 81       	ld	r18, Y
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	23 ff       	sbrs	r18, 3
    1b7e:	12 c0       	rjmp	.+36     	; 0x1ba4 <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
    1b80:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <readPin>
    1b84:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <readPin>
		if (dir1 && !dir2) val = FORWARD;
    1b8e:	01 15       	cp	r16, r1
    1b90:	11 05       	cpc	r17, r1
    1b92:	19 f0       	breq	.+6      	; 0x1b9a <getDirection+0x2e>
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	e9 f0       	breq	.+58     	; 0x1bd2 <getDirection+0x66>
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	e9 f4       	brne	.+58     	; 0x1bd8 <getDirection+0x6c>
    1b9e:	22 e0       	ldi	r18, 0x02	; 2
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	11 c0       	rjmp	.+34     	; 0x1bc6 <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
    1ba4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <readPin>
    1ba8:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	91 05       	cpc	r25, r1
    1bae:	59 f0       	breq	.+22     	; 0x1bc6 <getDirection+0x5a>
    1bb0:	88 81       	ld	r24, Y
    1bb2:	82 ff       	sbrs	r24, 2
    1bb4:	08 c0       	rjmp	.+16     	; 0x1bc6 <getDirection+0x5a>
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	21 15       	cp	r18, r1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <getDirection+0x58>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 01       	movw	r18, r24
	return val;
}
    1bc6:	c9 01       	movw	r24, r18
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
    1bd2:	21 e0       	ldi	r18, 0x01	; 1
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	ec cf       	rjmp	.-40     	; 0x1bb0 <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	e9 cf       	rjmp	.-46     	; 0x1bb0 <getDirection+0x44>

00001bde <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	ec 01       	movw	r28, r24
    1be8:	8b 01       	movw	r16, r22
    1bea:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
    1bec:	42 30       	cpi	r20, 0x02	; 2
    1bee:	51 05       	cpc	r21, r1
    1bf0:	19 f0       	breq	.+6      	; 0x1bf8 <setSpeed+0x1a>
    1bf2:	01 15       	cp	r16, r1
    1bf4:	11 05       	cpc	r17, r1
    1bf6:	21 f4       	brne	.+8      	; 0x1c00 <setSpeed+0x22>
		stopMotor(motor);
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <stopMotor>
		return;
    1bfe:	3e c0       	rjmp	.+124    	; 0x1c7c <setSpeed+0x9e>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
    1c00:	28 81       	ld	r18, Y
    1c02:	22 ff       	sbrs	r18, 2
    1c04:	08 c0       	rjmp	.+16     	; 0x1c16 <setSpeed+0x38>
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	41 15       	cp	r20, r1
    1c0c:	51 05       	cpc	r21, r1
    1c0e:	11 f0       	breq	.+4      	; 0x1c14 <setSpeed+0x36>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1c16:	23 ff       	sbrs	r18, 3
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <setSpeed+0x62>
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
    1c1e:	61 30       	cpi	r22, 0x01	; 1
    1c20:	71 05       	cpc	r23, r1
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <setSpeed+0x54>
			setPinOne(motor->direction);
    1c24:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
			setPinZero(Dir2(motor));
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
    1c30:	0b c0       	rjmp	.+22     	; 0x1c48 <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
    1c32:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
			setPinOne(Dir2(motor));
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <writePin>
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

static void setMotorCompareValue(PMotor motor, uint16_t speed) {
	if (motor->flags & MOTOR_INVERSE_SPEED) speed = 0xFFFF - speed;
    1c48:	88 81       	ld	r24, Y
    1c4a:	81 ff       	sbrs	r24, 1
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <setSpeed+0x74>
    1c4e:	00 95       	com	r16
    1c50:	10 95       	com	r17
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	08 17       	cp	r16, r24
    1c58:	19 07       	cpc	r17, r25
    1c5a:	08 f4       	brcc	.+2      	; 0x1c5e <setSpeed+0x80>
    1c5c:	8c 01       	movw	r16, r24
		speed = motor->minValue;
	}
	if (speed > motor->maxValue) {
		speed = motor->maxValue;
	}
	setTimerCompareValue(motor->pwmTimer, speed);
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	2f 81       	ldd	r18, Y+7	; 0x07
    1c64:	38 85       	ldd	r19, Y+8	; 0x08
    1c66:	b8 01       	movw	r22, r16
    1c68:	20 17       	cp	r18, r16
    1c6a:	31 07       	cpc	r19, r17
    1c6c:	08 f4       	brcc	.+2      	; 0x1c70 <setSpeed+0x92>
    1c6e:	b9 01       	movw	r22, r18
    1c70:	0e 94 69 10 	call	0x20d2	; 0x20d2 <setTimerCompareValue>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
	}
	setMotorCompareValue(motor, speed);
	enableOutputCompare(motor->pwmTimer);
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	0e 94 55 10 	call	0x20aa	; 0x20aa <enableOutputCompare>
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <setSpeed>
}
    1c8e:	08 95       	ret

00001c90 <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	50 e0       	ldi	r21, 0x00	; 0
    1c94:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <setSpeed>
}
    1c98:	08 95       	ret

00001c9a <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
    1ca4:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <getDirection>
    1ca8:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	91 05       	cpc	r25, r1
    1cae:	71 f0       	breq	.+28     	; 0x1ccc <getDirSpeed+0x32>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	83 81       	ldd	r24, Z+3	; 0x03
    1cb4:	94 81       	ldd	r25, Z+4	; 0x04
    1cb6:	0e 94 90 10 	call	0x2120	; 0x2120 <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
    1cba:	9c 01       	movw	r18, r24
    1cbc:	36 95       	lsr	r19
    1cbe:	27 95       	ror	r18
	if (dir == BACKWARD)
    1cc0:	20 97       	sbiw	r28, 0x00	; 0
    1cc2:	31 f4       	brne	.+12     	; 0x1cd0 <getDirSpeed+0x36>
		val *= -1; // Should be optimized away by compiler.
    1cc4:	30 95       	com	r19
    1cc6:	21 95       	neg	r18
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <getDirSpeed+0x36>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
    1cd0:	c9 01       	movw	r24, r18
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <motor_toUnsignedSpeed>:

uint16_t motor_toUnsignedSpeed(int16_t speed) {
	uint16_t absv = abs(speed);
    1cdc:	28 2f       	mov	r18, r24
    1cde:	39 2f       	mov	r19, r25
    1ce0:	37 ff       	sbrs	r19, 7
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <motor_toUnsignedSpeed+0xe>
    1ce4:	30 95       	com	r19
    1ce6:	21 95       	neg	r18
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
	return absv;
}
    1cee:	c9 01       	movw	r24, r18
    1cf0:	08 95       	ret

00001cf2 <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	8b 01       	movw	r16, r22
	if (speed == 0) {
    1cfe:	61 15       	cp	r22, r1
    1d00:	71 05       	cpc	r23, r1
    1d02:	19 f4       	brne	.+6      	; 0x1d0a <setDirSpeed+0x18>
		stopMotor(motor);
    1d04:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <stopMotor>
		return;
    1d08:	0d c0       	rjmp	.+26     	; 0x1d24 <setDirSpeed+0x32>
	}
	setSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <motor_toUnsignedSpeed>
    1d10:	bc 01       	movw	r22, r24
    1d12:	41 2f       	mov	r20, r17
    1d14:	40 95       	com	r20
    1d16:	44 1f       	adc	r20, r20
    1d18:	44 27       	eor	r20, r20
    1d1a:	44 1f       	adc	r20, r20
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <setSpeed>
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1d2e:	dc 01       	movw	r26, r24
    1d30:	14 96       	adiw	r26, 0x04	; 4
    1d32:	ed 91       	ld	r30, X+
    1d34:	fc 91       	ld	r31, X
    1d36:	15 97       	sbiw	r26, 0x05	; 5
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	80 83       	st	Z, r24
}
    1d3c:	08 95       	ret

00001d3e <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1d3e:	dc 01       	movw	r26, r24
    1d40:	14 96       	adiw	r26, 0x04	; 4
    1d42:	ed 91       	ld	r30, X+
    1d44:	fc 91       	ld	r31, X
    1d46:	15 97       	sbiw	r26, 0x05	; 5
    1d48:	10 82       	st	Z, r1
}
    1d4a:	08 95       	ret

00001d4c <setPinOutput>:

void setPinOutput(PPin pin) {
    1d4c:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1d4e:	ed 91       	ld	r30, X+
    1d50:	fc 91       	ld	r31, X
    1d52:	11 97       	sbiw	r26, 0x01	; 1
    1d54:	04 80       	ldd	r0, Z+4	; 0x04
    1d56:	f5 81       	ldd	r31, Z+5	; 0x05
    1d58:	e0 2d       	mov	r30, r0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	12 96       	adiw	r26, 0x02	; 2
    1d5e:	9c 91       	ld	r25, X
    1d60:	12 97       	sbiw	r26, 0x02	; 2
    1d62:	89 2b       	or	r24, r25
    1d64:	80 83       	st	Z, r24
}
    1d66:	08 95       	ret

00001d68 <setPinInput>:

void setPinInput(PPin pin) {
    1d68:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1d6a:	ed 91       	ld	r30, X+
    1d6c:	fc 91       	ld	r31, X
    1d6e:	11 97       	sbiw	r26, 0x01	; 1
    1d70:	04 80       	ldd	r0, Z+4	; 0x04
    1d72:	f5 81       	ldd	r31, Z+5	; 0x05
    1d74:	e0 2d       	mov	r30, r0
    1d76:	90 81       	ld	r25, Z
    1d78:	12 96       	adiw	r26, 0x02	; 2
    1d7a:	8c 91       	ld	r24, X
    1d7c:	12 97       	sbiw	r26, 0x02	; 2
    1d7e:	80 95       	com	r24
    1d80:	89 23       	and	r24, r25
    1d82:	80 83       	st	Z, r24
}
    1d84:	08 95       	ret

00001d86 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    1d86:	dc 01       	movw	r26, r24
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	11 97       	sbiw	r26, 0x01	; 1
    1d8e:	60 83       	st	Z, r22
}
    1d90:	08 95       	ret

00001d92 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    1d92:	dc 01       	movw	r26, r24
    1d94:	12 96       	adiw	r26, 0x02	; 2
    1d96:	ed 91       	ld	r30, X+
    1d98:	fc 91       	ld	r31, X
    1d9a:	13 97       	sbiw	r26, 0x03	; 3
    1d9c:	80 81       	ld	r24, Z
}
    1d9e:	08 95       	ret

00001da0 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1da0:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	11 97       	sbiw	r26, 0x01	; 1
    1da8:	01 90       	ld	r0, Z+
    1daa:	f0 81       	ld	r31, Z
    1dac:	e0 2d       	mov	r30, r0
    1dae:	80 81       	ld	r24, Z
    1db0:	12 96       	adiw	r26, 0x02	; 2
    1db2:	9c 91       	ld	r25, X
    1db4:	12 97       	sbiw	r26, 0x02	; 2
    1db6:	89 2b       	or	r24, r25
    1db8:	80 83       	st	Z, r24
}
    1dba:	08 95       	ret

00001dbc <setPinZero>:

void setPinZero(PPin pin) {
    1dbc:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	11 97       	sbiw	r26, 0x01	; 1
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	f0 81       	ld	r31, Z
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	90 81       	ld	r25, Z
    1dcc:	12 96       	adiw	r26, 0x02	; 2
    1dce:	8c 91       	ld	r24, X
    1dd0:	12 97       	sbiw	r26, 0x02	; 2
    1dd2:	80 95       	com	r24
    1dd4:	89 23       	and	r24, r25
    1dd6:	80 83       	st	Z, r24
}
    1dd8:	08 95       	ret

00001dda <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1dda:	61 15       	cp	r22, r1
    1ddc:	71 05       	cpc	r23, r1
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <writePin+0xc>
    1de0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <setPinOne>
    1de4:	08 95       	ret
	else setPinZero(pin);
    1de6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <setPinZero>
    1dea:	08 95       	ret

00001dec <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1dec:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    1dee:	a0 81       	ld	r26, Z
    1df0:	b1 81       	ldd	r27, Z+1	; 0x01
    1df2:	12 96       	adiw	r26, 0x02	; 2
    1df4:	0d 90       	ld	r0, X+
    1df6:	bc 91       	ld	r27, X
    1df8:	a0 2d       	mov	r26, r0
    1dfa:	8c 91       	ld	r24, X
    1dfc:	92 81       	ldd	r25, Z+2	; 0x02
    1dfe:	89 23       	and	r24, r25
		return TRUE;
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	11 f4       	brne	.+4      	; 0x1e0a <readPin+0x1e>
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1e0a:	c9 01       	movw	r24, r18
    1e0c:	08 95       	ret

00001e0e <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    1e0e:	fc 01       	movw	r30, r24
    1e10:	64 30       	cpi	r22, 0x04	; 4
    1e12:	71 05       	cpc	r23, r1
    1e14:	48 f4       	brcc	.+18     	; 0x1e28 <setCompareMatchOutputMode+0x1a>
    1e16:	db 01       	movw	r26, r22
    1e18:	a6 51       	subi	r26, 0x16	; 22
    1e1a:	be 4f       	sbci	r27, 0xFE	; 254
    1e1c:	2c 91       	ld	r18, X
    1e1e:	62 51       	subi	r22, 0x12	; 18
    1e20:	7e 4f       	sbci	r23, 0xFE	; 254
    1e22:	db 01       	movw	r26, r22
    1e24:	3c 91       	ld	r19, X
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <setCompareMatchOutputMode+0x1e>
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0B1) | _BV(COM0B0);
			break;
	}
	if (timer->type == TIMER_A) {
    1e2c:	84 81       	ldd	r24, Z+4	; 0x04
    1e2e:	95 81       	ldd	r25, Z+5	; 0x05
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	21 f4       	brne	.+8      	; 0x1e3c <setCompareMatchOutputMode+0x2e>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		// Use left shift to avoid the arithmetic shift.
		oneBits = oneBits << 2;
    1e34:	33 0f       	add	r19, r19
    1e36:	33 0f       	add	r19, r19
		zeroBits = zeroBits << 2;
    1e38:	22 0f       	add	r18, r18
    1e3a:	22 0f       	add	r18, r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    1e3c:	a0 81       	ld	r26, Z
    1e3e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e40:	11 96       	adiw	r26, 0x01	; 1
    1e42:	0d 90       	ld	r0, X+
    1e44:	bc 91       	ld	r27, X
    1e46:	a0 2d       	mov	r26, r0
    1e48:	8c 91       	ld	r24, X
    1e4a:	83 2b       	or	r24, r19
    1e4c:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    1e4e:	01 90       	ld	r0, Z+
    1e50:	f0 81       	ld	r31, Z
    1e52:	e0 2d       	mov	r30, r0
    1e54:	01 80       	ldd	r0, Z+1	; 0x01
    1e56:	f2 81       	ldd	r31, Z+2	; 0x02
    1e58:	e0 2d       	mov	r30, r0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	20 95       	com	r18
    1e5e:	28 23       	and	r18, r24
    1e60:	20 83       	st	Z, r18
}
    1e62:	08 95       	ret

00001e64 <setTimerClockSelect>:

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
    1e64:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    1e66:	80 81       	ld	r24, Z
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	82 70       	andi	r24, 0x02	; 2
    1e6c:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    1e6e:	64 30       	cpi	r22, 0x04	; 4
    1e70:	71 05       	cpc	r23, r1
    1e72:	71 f1       	breq	.+92     	; 0x1ed0 <setTimerClockSelect+0x6c>
    1e74:	65 30       	cpi	r22, 0x05	; 5
    1e76:	71 05       	cpc	r23, r1
    1e78:	68 f4       	brcc	.+26     	; 0x1e94 <setTimerClockSelect+0x30>
    1e7a:	61 30       	cpi	r22, 0x01	; 1
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	f9 f0       	breq	.+62     	; 0x1ebe <setTimerClockSelect+0x5a>
    1e80:	61 30       	cpi	r22, 0x01	; 1
    1e82:	71 05       	cpc	r23, r1
    1e84:	d8 f1       	brcs	.+118    	; 0x1efc <setTimerClockSelect+0x98>
    1e86:	62 30       	cpi	r22, 0x02	; 2
    1e88:	71 05       	cpc	r23, r1
    1e8a:	e1 f0       	breq	.+56     	; 0x1ec4 <setTimerClockSelect+0x60>
    1e8c:	63 30       	cpi	r22, 0x03	; 3
    1e8e:	71 05       	cpc	r23, r1
    1e90:	a1 f4       	brne	.+40     	; 0x1eba <setTimerClockSelect+0x56>
    1e92:	1b c0       	rjmp	.+54     	; 0x1eca <setTimerClockSelect+0x66>
    1e94:	67 30       	cpi	r22, 0x07	; 7
    1e96:	71 05       	cpc	r23, r1
    1e98:	21 f1       	breq	.+72     	; 0x1ee2 <setTimerClockSelect+0x7e>
    1e9a:	68 30       	cpi	r22, 0x08	; 8
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	38 f4       	brcc	.+14     	; 0x1eae <setTimerClockSelect+0x4a>
    1ea0:	65 30       	cpi	r22, 0x05	; 5
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	c1 f0       	breq	.+48     	; 0x1ed6 <setTimerClockSelect+0x72>
    1ea6:	66 30       	cpi	r22, 0x06	; 6
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	39 f4       	brne	.+14     	; 0x1eba <setTimerClockSelect+0x56>
    1eac:	17 c0       	rjmp	.+46     	; 0x1edc <setTimerClockSelect+0x78>
    1eae:	68 30       	cpi	r22, 0x08	; 8
    1eb0:	71 05       	cpc	r23, r1
    1eb2:	d1 f0       	breq	.+52     	; 0x1ee8 <setTimerClockSelect+0x84>
    1eb4:	69 30       	cpi	r22, 0x09	; 9
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	e1 f0       	breq	.+56     	; 0x1ef2 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	1d c0       	rjmp	.+58     	; 0x1ef8 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    1ec2:	27 c0       	rjmp	.+78     	; 0x1f12 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    1ec4:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    1ec6:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    1ec8:	24 c0       	rjmp	.+72     	; 0x1f12 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	e9 f4       	brne	.+58     	; 0x1f08 <setTimerClockSelect+0xa4>
    1ece:	2d c0       	rjmp	.+90     	; 0x1f2a <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	b9 f0       	breq	.+46     	; 0x1f02 <setTimerClockSelect+0x9e>
    1ed4:	19 c0       	rjmp	.+50     	; 0x1f08 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	d1 f4       	brne	.+52     	; 0x1f0e <setTimerClockSelect+0xaa>
    1eda:	27 c0       	rjmp	.+78     	; 0x1f2a <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	a1 f0       	breq	.+40     	; 0x1f08 <setTimerClockSelect+0xa4>
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	a1 f0       	breq	.+40     	; 0x1f0e <setTimerClockSelect+0xaa>
    1ee6:	07 c0       	rjmp	.+14     	; 0x1ef6 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	f9 f4       	brne	.+62     	; 0x1f2a <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    1eec:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	10 c0       	rjmp	.+32     	; 0x1f12 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	d1 f4       	brne	.+52     	; 0x1f2a <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1ef6:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    1efc:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1efe:	87 e0       	ldi	r24, 0x07	; 7
    1f00:	08 c0       	rjmp	.+16     	; 0x1f12 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    1f02:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    1f04:	84 e0       	ldi	r24, 0x04	; 4
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    1f08:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    1f0e:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    1f10:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    1f12:	a3 81       	ldd	r26, Z+3	; 0x03
    1f14:	b4 81       	ldd	r27, Z+4	; 0x04
    1f16:	2c 91       	ld	r18, X
    1f18:	29 2b       	or	r18, r25
    1f1a:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    1f1c:	03 80       	ldd	r0, Z+3	; 0x03
    1f1e:	f4 81       	ldd	r31, Z+4	; 0x04
    1f20:	e0 2d       	mov	r30, r0
    1f22:	90 81       	ld	r25, Z
    1f24:	80 95       	com	r24
    1f26:	89 23       	and	r24, r25
    1f28:	80 83       	st	Z, r24
    1f2a:	08 95       	ret

00001f2c <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
    1f2c:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    1f2e:	80 81       	ld	r24, Z
    1f30:	82 ff       	sbrs	r24, 2
    1f32:	37 c0       	rjmp	.+110    	; 0x1fa2 <setWaveformGenerationMode+0x76>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    1f34:	63 30       	cpi	r22, 0x03	; 3
    1f36:	71 05       	cpc	r23, r1
    1f38:	31 f1       	breq	.+76     	; 0x1f86 <setWaveformGenerationMode+0x5a>
    1f3a:	64 30       	cpi	r22, 0x04	; 4
    1f3c:	71 05       	cpc	r23, r1
    1f3e:	40 f4       	brcc	.+16     	; 0x1f50 <setWaveformGenerationMode+0x24>
    1f40:	61 30       	cpi	r22, 0x01	; 1
    1f42:	71 05       	cpc	r23, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <setWaveformGenerationMode+0x1c>
    1f46:	57 c0       	rjmp	.+174    	; 0x1ff6 <setWaveformGenerationMode+0xca>
    1f48:	62 30       	cpi	r22, 0x02	; 2
    1f4a:	71 05       	cpc	r23, r1
    1f4c:	80 f4       	brcc	.+32     	; 0x1f6e <setWaveformGenerationMode+0x42>
    1f4e:	0b c0       	rjmp	.+22     	; 0x1f66 <setWaveformGenerationMode+0x3a>
    1f50:	65 30       	cpi	r22, 0x05	; 5
    1f52:	71 05       	cpc	r23, r1
    1f54:	81 f0       	breq	.+32     	; 0x1f76 <setWaveformGenerationMode+0x4a>
    1f56:	65 30       	cpi	r22, 0x05	; 5
    1f58:	71 05       	cpc	r23, r1
    1f5a:	c8 f0       	brcs	.+50     	; 0x1f8e <setWaveformGenerationMode+0x62>
    1f5c:	66 30       	cpi	r22, 0x06	; 6
    1f5e:	71 05       	cpc	r23, r1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <setWaveformGenerationMode+0x38>
    1f62:	7a c0       	rjmp	.+244    	; 0x2058 <setWaveformGenerationMode+0x12c>
    1f64:	1c c0       	rjmp	.+56     	; 0x1f9e <setWaveformGenerationMode+0x72>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f66:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1f68:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1f6a:	88 e1       	ldi	r24, 0x18	; 24
    1f6c:	47 c0       	rjmp	.+142    	; 0x1ffc <setWaveformGenerationMode+0xd0>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1f6e:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1f70:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    1f72:	80 e1       	ldi	r24, 0x10	; 16
    1f74:	3e c0       	rjmp	.+124    	; 0x1ff2 <setWaveformGenerationMode+0xc6>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
    1f76:	84 fd       	sbrc	r24, 4
    1f78:	43 c0       	rjmp	.+134    	; 0x2000 <setWaveformGenerationMode+0xd4>
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
    1f7a:	85 ff       	sbrs	r24, 5
    1f7c:	45 c0       	rjmp	.+138    	; 0x2008 <setWaveformGenerationMode+0xdc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
    1f7e:	98 e0       	ldi	r25, 0x08	; 8
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    1f80:	33 e0       	ldi	r19, 0x03	; 3
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    1f82:	80 e1       	ldi	r24, 0x10	; 16
    1f84:	4c c0       	rjmp	.+152    	; 0x201e <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f86:	90 e0       	ldi	r25, 0x00	; 0
					oneBitsB = _BV(WGM13) | _BV(WGM12);
				}
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1f88:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1f8a:	88 e1       	ldi	r24, 0x18	; 24
    1f8c:	32 c0       	rjmp	.+100    	; 0x1ff2 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
    1f8e:	84 fd       	sbrc	r24, 4
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <setWaveformGenerationMode+0xe4>
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
    1f92:	85 ff       	sbrs	r24, 5
    1f94:	41 c0       	rjmp	.+130    	; 0x2018 <setWaveformGenerationMode+0xec>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f96:	90 e0       	ldi	r25, 0x00	; 0
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    1f98:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1f9a:	88 e1       	ldi	r24, 0x18	; 24
    1f9c:	40 c0       	rjmp	.+128    	; 0x201e <setWaveformGenerationMode+0xf2>
				}
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    1f9e:	90 e1       	ldi	r25, 0x10	; 16
    1fa0:	22 c0       	rjmp	.+68     	; 0x1fe6 <setWaveformGenerationMode+0xba>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    1fa2:	62 30       	cpi	r22, 0x02	; 2
    1fa4:	71 05       	cpc	r23, r1
    1fa6:	d1 f0       	breq	.+52     	; 0x1fdc <setWaveformGenerationMode+0xb0>
    1fa8:	63 30       	cpi	r22, 0x03	; 3
    1faa:	71 05       	cpc	r23, r1
    1fac:	40 f4       	brcc	.+16     	; 0x1fbe <setWaveformGenerationMode+0x92>
    1fae:	61 15       	cp	r22, r1
    1fb0:	71 05       	cpc	r23, r1
    1fb2:	81 f0       	breq	.+32     	; 0x1fd4 <setWaveformGenerationMode+0xa8>
    1fb4:	61 30       	cpi	r22, 0x01	; 1
    1fb6:	71 05       	cpc	r23, r1
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <setWaveformGenerationMode+0x90>
    1fba:	4e c0       	rjmp	.+156    	; 0x2058 <setWaveformGenerationMode+0x12c>
    1fbc:	32 c0       	rjmp	.+100    	; 0x2022 <setWaveformGenerationMode+0xf6>
    1fbe:	64 30       	cpi	r22, 0x04	; 4
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	a1 f0       	breq	.+40     	; 0x1fec <setWaveformGenerationMode+0xc0>
    1fc4:	64 30       	cpi	r22, 0x04	; 4
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	68 f0       	brcs	.+26     	; 0x1fe4 <setWaveformGenerationMode+0xb8>
    1fca:	65 30       	cpi	r22, 0x05	; 5
    1fcc:	71 05       	cpc	r23, r1
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <setWaveformGenerationMode+0xa6>
    1fd0:	43 c0       	rjmp	.+134    	; 0x2058 <setWaveformGenerationMode+0x12c>
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <setWaveformGenerationMode+0xb4>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1fd8:	88 e0       	ldi	r24, 0x08	; 8
    1fda:	10 c0       	rjmp	.+32     	; 0x1ffc <setWaveformGenerationMode+0xd0>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	1d c0       	rjmp	.+58     	; 0x201a <setWaveformGenerationMode+0xee>
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    1fe0:	98 e0       	ldi	r25, 0x08	; 8
    1fe2:	13 c0       	rjmp	.+38     	; 0x200a <setWaveformGenerationMode+0xde>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    1fe6:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    1fe8:	88 e0       	ldi	r24, 0x08	; 8
    1fea:	03 c0       	rjmp	.+6      	; 0x1ff2 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    1fec:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    1fee:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    1ff2:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    1ff4:	1a c0       	rjmp	.+52     	; 0x202a <setWaveformGenerationMode+0xfe>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1ff6:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    1ffa:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    1ffc:	23 e0       	ldi	r18, 0x03	; 3
    1ffe:	15 c0       	rjmp	.+42     	; 0x202a <setWaveformGenerationMode+0xfe>
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
    2000:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
    2002:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    2004:	80 e1       	ldi	r24, 0x10	; 16
    2006:	10 c0       	rjmp	.+32     	; 0x2028 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					oneBitsB = _BV(WGM13) | _BV(WGM12);
    2008:	98 e1       	ldi	r25, 0x18	; 24
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    200a:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	07 c0       	rjmp	.+14     	; 0x201e <setWaveformGenerationMode+0xf2>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2010:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
    2012:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2014:	88 e1       	ldi	r24, 0x18	; 24
    2016:	08 c0       	rjmp	.+16     	; 0x2028 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					zeroBitsB = _BV(WGM12);
					oneBitsB = _BV(WGM13);
    2018:	90 e1       	ldi	r25, 0x10	; 16
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    201a:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM12);
    201c:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	04 c0       	rjmp	.+8      	; 0x202a <setWaveformGenerationMode+0xfe>
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2022:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    2024:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    2026:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    2028:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    202a:	a1 81       	ldd	r26, Z+1	; 0x01
    202c:	b2 81       	ldd	r27, Z+2	; 0x02
    202e:	4c 91       	ld	r20, X
    2030:	43 2b       	or	r20, r19
    2032:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    2034:	a1 81       	ldd	r26, Z+1	; 0x01
    2036:	b2 81       	ldd	r27, Z+2	; 0x02
    2038:	3c 91       	ld	r19, X
    203a:	20 95       	com	r18
    203c:	23 23       	and	r18, r19
    203e:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    2040:	a3 81       	ldd	r26, Z+3	; 0x03
    2042:	b4 81       	ldd	r27, Z+4	; 0x04
    2044:	2c 91       	ld	r18, X
    2046:	29 2b       	or	r18, r25
    2048:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    204a:	03 80       	ldd	r0, Z+3	; 0x03
    204c:	f4 81       	ldd	r31, Z+4	; 0x04
    204e:	e0 2d       	mov	r30, r0
    2050:	90 81       	ld	r25, Z
    2052:	80 95       	com	r24
    2054:	89 23       	and	r24, r25
    2056:	80 83       	st	Z, r24
    2058:	08 95       	ret

0000205a <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    205a:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative macro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    205c:	ed 91       	ld	r30, X+
    205e:	fc 91       	ld	r31, X
    2060:	11 97       	sbiw	r26, 0x01	; 1
    2062:	05 80       	ldd	r0, Z+5	; 0x05
    2064:	f6 81       	ldd	r31, Z+6	; 0x06
    2066:	e0 2d       	mov	r30, r0
    2068:	20 81       	ld	r18, Z
    206a:	14 96       	adiw	r26, 0x04	; 4
    206c:	8d 91       	ld	r24, X+
    206e:	9c 91       	ld	r25, X
    2070:	15 97       	sbiw	r26, 0x05	; 5
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	11 f4       	brne	.+4      	; 0x207a <enableTimerInterrupt+0x20>
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	01 c0       	rjmp	.+2      	; 0x207c <enableTimerInterrupt+0x22>
    207a:	84 e0       	ldi	r24, 0x04	; 4
    207c:	82 2b       	or	r24, r18
    207e:	80 83       	st	Z, r24
}
    2080:	08 95       	ret

00002082 <disableTimerInterrupt>:

void disableTimerInterrupt(PTimer timer) {
    2082:	dc 01       	movw	r26, r24
	*timer->timer->interruptMaskRegister &= ~_BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    2084:	ed 91       	ld	r30, X+
    2086:	fc 91       	ld	r31, X
    2088:	11 97       	sbiw	r26, 0x01	; 1
    208a:	05 80       	ldd	r0, Z+5	; 0x05
    208c:	f6 81       	ldd	r31, Z+6	; 0x06
    208e:	e0 2d       	mov	r30, r0
    2090:	20 81       	ld	r18, Z
    2092:	14 96       	adiw	r26, 0x04	; 4
    2094:	8d 91       	ld	r24, X+
    2096:	9c 91       	ld	r25, X
    2098:	15 97       	sbiw	r26, 0x05	; 5
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	11 f4       	brne	.+4      	; 0x20a2 <disableTimerInterrupt+0x20>
    209e:	8d ef       	ldi	r24, 0xFD	; 253
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <disableTimerInterrupt+0x22>
    20a2:	8b ef       	ldi	r24, 0xFB	; 251
    20a4:	82 23       	and	r24, r18
    20a6:	80 83       	st	Z, r24
}
    20a8:	08 95       	ret

000020aa <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    20b0:	8e 81       	ldd	r24, Y+6	; 0x06
    20b2:	9f 81       	ldd	r25, Y+7	; 0x07
    20b4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <setPinOutput>
	// TODO set_on_match is used, because its used for motors, and we want
	// the timer-compare-value to reflect the voltage.
	// Should be configured somewhere else.
	setCompareMatchOutputMode(timer, set_on_match);
    20b8:	ce 01       	movw	r24, r28
    20ba:	63 e0       	ldi	r22, 0x03	; 3
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <setCompareMatchOutputMode>
}
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	08 95       	ret

000020c8 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <setCompareMatchOutputMode>
}
    20d0:	08 95       	ret

000020d2 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    20d2:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    20d4:	a0 81       	ld	r26, Z
    20d6:	b1 81       	ldd	r27, Z+1	; 0x01
    20d8:	8c 91       	ld	r24, X
    20da:	82 ff       	sbrs	r24, 2
    20dc:	1c c0       	rjmp	.+56     	; 0x2116 <setTimerCompareValue+0x44>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    20de:	9f b7       	in	r25, 0x3f	; 63
		// Use as many significant bits as possible.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    20e0:	84 ff       	sbrs	r24, 4
    20e2:	06 c0       	rjmp	.+12     	; 0x20f0 <setTimerCompareValue+0x1e>
			value = value >> (16 - 9);
    20e4:	66 0f       	add	r22, r22
    20e6:	67 2f       	mov	r22, r23
    20e8:	66 1f       	adc	r22, r22
    20ea:	77 0b       	sbc	r23, r23
    20ec:	71 95       	neg	r23
    20ee:	07 c0       	rjmp	.+14     	; 0x20fe <setTimerCompareValue+0x2c>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    20f0:	85 ff       	sbrs	r24, 5
    20f2:	05 c0       	rjmp	.+10     	; 0x20fe <setTimerCompareValue+0x2c>
			value = value >> (16 - 10);
    20f4:	86 e0       	ldi	r24, 0x06	; 6
    20f6:	76 95       	lsr	r23
    20f8:	67 95       	ror	r22
    20fa:	8a 95       	dec	r24
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <setTimerCompareValue+0x24>
		}
		cli();
    20fe:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    2100:	a2 81       	ldd	r26, Z+2	; 0x02
    2102:	b3 81       	ldd	r27, Z+3	; 0x03
    2104:	11 96       	adiw	r26, 0x01	; 1
    2106:	7c 93       	st	X, r23
    2108:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    210a:	02 80       	ldd	r0, Z+2	; 0x02
    210c:	f3 81       	ldd	r31, Z+3	; 0x03
    210e:	e0 2d       	mov	r30, r0
    2110:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    2112:	9f bf       	out	0x3f, r25	; 63
    2114:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    2116:	02 80       	ldd	r0, Z+2	; 0x02
    2118:	f3 81       	ldd	r31, Z+3	; 0x03
    211a:	e0 2d       	mov	r30, r0
    211c:	70 83       	st	Z, r23
    211e:	08 95       	ret

00002120 <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    2120:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    2122:	a0 81       	ld	r26, Z
    2124:	b1 81       	ldd	r27, Z+1	; 0x01
    2126:	8c 91       	ld	r24, X
    2128:	82 ff       	sbrs	r24, 2
    212a:	1c c0       	rjmp	.+56     	; 0x2164 <getTimerCompareValue+0x44>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    212c:	8f b7       	in	r24, 0x3f	; 63
		cli();
    212e:	f8 94       	cli
		// Reading OCR-register does not require any particular ordering of reading the bytes.
		result = *((uint16_t*) timer->outputCompareRegister);
    2130:	a2 81       	ldd	r26, Z+2	; 0x02
    2132:	b3 81       	ldd	r27, Z+3	; 0x03
    2134:	2d 91       	ld	r18, X+
    2136:	3c 91       	ld	r19, X
    2138:	11 97       	sbiw	r26, 0x01	; 1
		SREG = sreg; // re-enable interrupts
    213a:	8f bf       	out	0x3f, r24	; 63
		
		// Shift the value back. Non-significant bits are lost.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    213c:	01 90       	ld	r0, Z+
    213e:	f0 81       	ld	r31, Z
    2140:	e0 2d       	mov	r30, r0
    2142:	80 81       	ld	r24, Z
    2144:	84 ff       	sbrs	r24, 4
    2146:	06 c0       	rjmp	.+12     	; 0x2154 <getTimerCompareValue+0x34>
			result = result << (16 - 9);
    2148:	36 95       	lsr	r19
    214a:	32 2f       	mov	r19, r18
    214c:	22 27       	eor	r18, r18
    214e:	37 95       	ror	r19
    2150:	27 95       	ror	r18
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <getTimerCompareValue+0x50>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    2154:	85 ff       	sbrs	r24, 5
    2156:	0c c0       	rjmp	.+24     	; 0x2170 <getTimerCompareValue+0x50>
			result = result << (16 - 10);
    2158:	46 e0       	ldi	r20, 0x06	; 6
    215a:	22 0f       	add	r18, r18
    215c:	33 1f       	adc	r19, r19
    215e:	4a 95       	dec	r20
    2160:	e1 f7       	brne	.-8      	; 0x215a <getTimerCompareValue+0x3a>
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <getTimerCompareValue+0x50>
		}
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    2164:	02 80       	ldd	r0, Z+2	; 0x02
    2166:	f3 81       	ldd	r31, Z+3	; 0x03
    2168:	e0 2d       	mov	r30, r0
    216a:	80 81       	ld	r24, Z
    216c:	38 2f       	mov	r19, r24
    216e:	20 e0       	ldi	r18, 0x00	; 0
	}
	return result;
}
    2170:	c9 01       	movw	r24, r18
    2172:	08 95       	ret

00002174 <processor_idle>:
#include "idle.h"
#include <avr/sleep.h>
#include "../anton_std.h"

void processor_idle() {
	sleep_enable();
    2174:	83 b7       	in	r24, 0x33	; 51
    2176:	81 60       	ori	r24, 0x01	; 1
    2178:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
    217a:	83 b7       	in	r24, 0x33	; 51
    217c:	81 7f       	andi	r24, 0xF1	; 241
    217e:	83 bf       	out	0x33, r24	; 51
	sei(); // Just in case, if this is called form an ISR
    2180:	78 94       	sei
	sleep_cpu();
    2182:	88 95       	sleep
}
    2184:	08 95       	ret

00002186 <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
    2186:	0e 94 ba 10 	call	0x2174	; 0x2174 <processor_idle>
    218a:	fd cf       	rjmp	.-6      	; 0x2186 <processor_loop_idle>

0000218c <malloc>:
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	82 30       	cpi	r24, 0x02	; 2
    2192:	91 05       	cpc	r25, r1
    2194:	10 f4       	brcc	.+4      	; 0x219a <malloc+0xe>
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	e0 91 52 04 	lds	r30, 0x0452
    219e:	f0 91 53 04 	lds	r31, 0x0453
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	26 c0       	rjmp	.+76     	; 0x21f8 <malloc+0x6c>
    21ac:	60 81       	ld	r22, Z
    21ae:	71 81       	ldd	r23, Z+1	; 0x01
    21b0:	68 17       	cp	r22, r24
    21b2:	79 07       	cpc	r23, r25
    21b4:	e0 f0       	brcs	.+56     	; 0x21ee <malloc+0x62>
    21b6:	68 17       	cp	r22, r24
    21b8:	79 07       	cpc	r23, r25
    21ba:	81 f4       	brne	.+32     	; 0x21dc <malloc+0x50>
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	93 81       	ldd	r25, Z+3	; 0x03
    21c0:	21 15       	cp	r18, r1
    21c2:	31 05       	cpc	r19, r1
    21c4:	31 f0       	breq	.+12     	; 0x21d2 <malloc+0x46>
    21c6:	d9 01       	movw	r26, r18
    21c8:	13 96       	adiw	r26, 0x03	; 3
    21ca:	9c 93       	st	X, r25
    21cc:	8e 93       	st	-X, r24
    21ce:	12 97       	sbiw	r26, 0x02	; 2
    21d0:	2b c0       	rjmp	.+86     	; 0x2228 <malloc+0x9c>
    21d2:	90 93 53 04 	sts	0x0453, r25
    21d6:	80 93 52 04 	sts	0x0452, r24
    21da:	26 c0       	rjmp	.+76     	; 0x2228 <malloc+0x9c>
    21dc:	41 15       	cp	r20, r1
    21de:	51 05       	cpc	r21, r1
    21e0:	19 f0       	breq	.+6      	; 0x21e8 <malloc+0x5c>
    21e2:	64 17       	cp	r22, r20
    21e4:	75 07       	cpc	r23, r21
    21e6:	18 f4       	brcc	.+6      	; 0x21ee <malloc+0x62>
    21e8:	ab 01       	movw	r20, r22
    21ea:	e9 01       	movw	r28, r18
    21ec:	df 01       	movw	r26, r30
    21ee:	9f 01       	movw	r18, r30
    21f0:	72 81       	ldd	r23, Z+2	; 0x02
    21f2:	63 81       	ldd	r22, Z+3	; 0x03
    21f4:	e7 2f       	mov	r30, r23
    21f6:	f6 2f       	mov	r31, r22
    21f8:	30 97       	sbiw	r30, 0x00	; 0
    21fa:	c1 f6       	brne	.-80     	; 0x21ac <malloc+0x20>
    21fc:	41 15       	cp	r20, r1
    21fe:	51 05       	cpc	r21, r1
    2200:	01 f1       	breq	.+64     	; 0x2242 <malloc+0xb6>
    2202:	48 1b       	sub	r20, r24
    2204:	59 0b       	sbc	r21, r25
    2206:	44 30       	cpi	r20, 0x04	; 4
    2208:	51 05       	cpc	r21, r1
    220a:	80 f4       	brcc	.+32     	; 0x222c <malloc+0xa0>
    220c:	12 96       	adiw	r26, 0x02	; 2
    220e:	8d 91       	ld	r24, X+
    2210:	9c 91       	ld	r25, X
    2212:	13 97       	sbiw	r26, 0x03	; 3
    2214:	20 97       	sbiw	r28, 0x00	; 0
    2216:	19 f0       	breq	.+6      	; 0x221e <malloc+0x92>
    2218:	9b 83       	std	Y+3, r25	; 0x03
    221a:	8a 83       	std	Y+2, r24	; 0x02
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <malloc+0x9a>
    221e:	90 93 53 04 	sts	0x0453, r25
    2222:	80 93 52 04 	sts	0x0452, r24
    2226:	fd 01       	movw	r30, r26
    2228:	32 96       	adiw	r30, 0x02	; 2
    222a:	46 c0       	rjmp	.+140    	; 0x22b8 <malloc+0x12c>
    222c:	fd 01       	movw	r30, r26
    222e:	e4 0f       	add	r30, r20
    2230:	f5 1f       	adc	r31, r21
    2232:	81 93       	st	Z+, r24
    2234:	91 93       	st	Z+, r25
    2236:	42 50       	subi	r20, 0x02	; 2
    2238:	50 40       	sbci	r21, 0x00	; 0
    223a:	11 96       	adiw	r26, 0x01	; 1
    223c:	5c 93       	st	X, r21
    223e:	4e 93       	st	-X, r20
    2240:	3b c0       	rjmp	.+118    	; 0x22b8 <malloc+0x12c>
    2242:	20 91 50 04 	lds	r18, 0x0450
    2246:	30 91 51 04 	lds	r19, 0x0451
    224a:	21 15       	cp	r18, r1
    224c:	31 05       	cpc	r19, r1
    224e:	41 f4       	brne	.+16     	; 0x2260 <malloc+0xd4>
    2250:	20 91 f4 01 	lds	r18, 0x01F4
    2254:	30 91 f5 01 	lds	r19, 0x01F5
    2258:	30 93 51 04 	sts	0x0451, r19
    225c:	20 93 50 04 	sts	0x0450, r18
    2260:	20 91 f6 01 	lds	r18, 0x01F6
    2264:	30 91 f7 01 	lds	r19, 0x01F7
    2268:	21 15       	cp	r18, r1
    226a:	31 05       	cpc	r19, r1
    226c:	41 f4       	brne	.+16     	; 0x227e <malloc+0xf2>
    226e:	2d b7       	in	r18, 0x3d	; 61
    2270:	3e b7       	in	r19, 0x3e	; 62
    2272:	40 91 f2 01 	lds	r20, 0x01F2
    2276:	50 91 f3 01 	lds	r21, 0x01F3
    227a:	24 1b       	sub	r18, r20
    227c:	35 0b       	sbc	r19, r21
    227e:	e0 91 50 04 	lds	r30, 0x0450
    2282:	f0 91 51 04 	lds	r31, 0x0451
    2286:	e2 17       	cp	r30, r18
    2288:	f3 07       	cpc	r31, r19
    228a:	a0 f4       	brcc	.+40     	; 0x22b4 <malloc+0x128>
    228c:	2e 1b       	sub	r18, r30
    228e:	3f 0b       	sbc	r19, r31
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	78 f0       	brcs	.+30     	; 0x22b4 <malloc+0x128>
    2296:	ac 01       	movw	r20, r24
    2298:	4e 5f       	subi	r20, 0xFE	; 254
    229a:	5f 4f       	sbci	r21, 0xFF	; 255
    229c:	24 17       	cp	r18, r20
    229e:	35 07       	cpc	r19, r21
    22a0:	48 f0       	brcs	.+18     	; 0x22b4 <malloc+0x128>
    22a2:	4e 0f       	add	r20, r30
    22a4:	5f 1f       	adc	r21, r31
    22a6:	50 93 51 04 	sts	0x0451, r21
    22aa:	40 93 50 04 	sts	0x0450, r20
    22ae:	81 93       	st	Z+, r24
    22b0:	91 93       	st	Z+, r25
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <malloc+0x12c>
    22b4:	e0 e0       	ldi	r30, 0x00	; 0
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	cf 01       	movw	r24, r30
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	08 95       	ret

000022c0 <free>:
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	09 f4       	brne	.+2      	; 0x22ca <free+0xa>
    22c8:	91 c0       	rjmp	.+290    	; 0x23ec <free+0x12c>
    22ca:	fc 01       	movw	r30, r24
    22cc:	32 97       	sbiw	r30, 0x02	; 2
    22ce:	13 82       	std	Z+3, r1	; 0x03
    22d0:	12 82       	std	Z+2, r1	; 0x02
    22d2:	60 91 52 04 	lds	r22, 0x0452
    22d6:	70 91 53 04 	lds	r23, 0x0453
    22da:	61 15       	cp	r22, r1
    22dc:	71 05       	cpc	r23, r1
    22de:	81 f4       	brne	.+32     	; 0x2300 <free+0x40>
    22e0:	20 81       	ld	r18, Z
    22e2:	31 81       	ldd	r19, Z+1	; 0x01
    22e4:	28 0f       	add	r18, r24
    22e6:	39 1f       	adc	r19, r25
    22e8:	80 91 50 04 	lds	r24, 0x0450
    22ec:	90 91 51 04 	lds	r25, 0x0451
    22f0:	82 17       	cp	r24, r18
    22f2:	93 07       	cpc	r25, r19
    22f4:	99 f5       	brne	.+102    	; 0x235c <free+0x9c>
    22f6:	f0 93 51 04 	sts	0x0451, r31
    22fa:	e0 93 50 04 	sts	0x0450, r30
    22fe:	76 c0       	rjmp	.+236    	; 0x23ec <free+0x12c>
    2300:	db 01       	movw	r26, r22
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 c0       	rjmp	.+4      	; 0x230c <free+0x4c>
    2308:	cd 01       	movw	r24, r26
    230a:	d9 01       	movw	r26, r18
    230c:	ae 17       	cp	r26, r30
    230e:	bf 07       	cpc	r27, r31
    2310:	48 f4       	brcc	.+18     	; 0x2324 <free+0x64>
    2312:	12 96       	adiw	r26, 0x02	; 2
    2314:	2d 91       	ld	r18, X+
    2316:	3c 91       	ld	r19, X
    2318:	13 97       	sbiw	r26, 0x03	; 3
    231a:	21 15       	cp	r18, r1
    231c:	31 05       	cpc	r19, r1
    231e:	a1 f7       	brne	.-24     	; 0x2308 <free+0x48>
    2320:	cd 01       	movw	r24, r26
    2322:	21 c0       	rjmp	.+66     	; 0x2366 <free+0xa6>
    2324:	b3 83       	std	Z+3, r27	; 0x03
    2326:	a2 83       	std	Z+2, r26	; 0x02
    2328:	ef 01       	movw	r28, r30
    232a:	49 91       	ld	r20, Y+
    232c:	59 91       	ld	r21, Y+
    232e:	9e 01       	movw	r18, r28
    2330:	24 0f       	add	r18, r20
    2332:	35 1f       	adc	r19, r21
    2334:	a2 17       	cp	r26, r18
    2336:	b3 07       	cpc	r27, r19
    2338:	79 f4       	brne	.+30     	; 0x2358 <free+0x98>
    233a:	2d 91       	ld	r18, X+
    233c:	3c 91       	ld	r19, X
    233e:	11 97       	sbiw	r26, 0x01	; 1
    2340:	24 0f       	add	r18, r20
    2342:	35 1f       	adc	r19, r21
    2344:	2e 5f       	subi	r18, 0xFE	; 254
    2346:	3f 4f       	sbci	r19, 0xFF	; 255
    2348:	31 83       	std	Z+1, r19	; 0x01
    234a:	20 83       	st	Z, r18
    234c:	12 96       	adiw	r26, 0x02	; 2
    234e:	2d 91       	ld	r18, X+
    2350:	3c 91       	ld	r19, X
    2352:	13 97       	sbiw	r26, 0x03	; 3
    2354:	33 83       	std	Z+3, r19	; 0x03
    2356:	22 83       	std	Z+2, r18	; 0x02
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	29 f4       	brne	.+10     	; 0x2366 <free+0xa6>
    235c:	f0 93 53 04 	sts	0x0453, r31
    2360:	e0 93 52 04 	sts	0x0452, r30
    2364:	43 c0       	rjmp	.+134    	; 0x23ec <free+0x12c>
    2366:	dc 01       	movw	r26, r24
    2368:	13 96       	adiw	r26, 0x03	; 3
    236a:	fc 93       	st	X, r31
    236c:	ee 93       	st	-X, r30
    236e:	12 97       	sbiw	r26, 0x02	; 2
    2370:	4d 91       	ld	r20, X+
    2372:	5d 91       	ld	r21, X+
    2374:	a4 0f       	add	r26, r20
    2376:	b5 1f       	adc	r27, r21
    2378:	ea 17       	cp	r30, r26
    237a:	fb 07       	cpc	r31, r27
    237c:	69 f4       	brne	.+26     	; 0x2398 <free+0xd8>
    237e:	20 81       	ld	r18, Z
    2380:	31 81       	ldd	r19, Z+1	; 0x01
    2382:	24 0f       	add	r18, r20
    2384:	35 1f       	adc	r19, r21
    2386:	2e 5f       	subi	r18, 0xFE	; 254
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	ec 01       	movw	r28, r24
    238c:	39 83       	std	Y+1, r19	; 0x01
    238e:	28 83       	st	Y, r18
    2390:	22 81       	ldd	r18, Z+2	; 0x02
    2392:	33 81       	ldd	r19, Z+3	; 0x03
    2394:	3b 83       	std	Y+3, r19	; 0x03
    2396:	2a 83       	std	Y+2, r18	; 0x02
    2398:	e0 e0       	ldi	r30, 0x00	; 0
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <free+0xe2>
    239e:	fb 01       	movw	r30, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	db 01       	movw	r26, r22
    23a4:	12 96       	adiw	r26, 0x02	; 2
    23a6:	8d 91       	ld	r24, X+
    23a8:	9c 91       	ld	r25, X
    23aa:	13 97       	sbiw	r26, 0x03	; 3
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	b9 f7       	brne	.-18     	; 0x239e <free+0xde>
    23b0:	9b 01       	movw	r18, r22
    23b2:	2e 5f       	subi	r18, 0xFE	; 254
    23b4:	3f 4f       	sbci	r19, 0xFF	; 255
    23b6:	8d 91       	ld	r24, X+
    23b8:	9c 91       	ld	r25, X
    23ba:	11 97       	sbiw	r26, 0x01	; 1
    23bc:	82 0f       	add	r24, r18
    23be:	93 1f       	adc	r25, r19
    23c0:	40 91 50 04 	lds	r20, 0x0450
    23c4:	50 91 51 04 	lds	r21, 0x0451
    23c8:	48 17       	cp	r20, r24
    23ca:	59 07       	cpc	r21, r25
    23cc:	79 f4       	brne	.+30     	; 0x23ec <free+0x12c>
    23ce:	30 97       	sbiw	r30, 0x00	; 0
    23d0:	29 f4       	brne	.+10     	; 0x23dc <free+0x11c>
    23d2:	10 92 53 04 	sts	0x0453, r1
    23d6:	10 92 52 04 	sts	0x0452, r1
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <free+0x120>
    23dc:	13 82       	std	Z+3, r1	; 0x03
    23de:	12 82       	std	Z+2, r1	; 0x02
    23e0:	22 50       	subi	r18, 0x02	; 2
    23e2:	30 40       	sbci	r19, 0x00	; 0
    23e4:	30 93 51 04 	sts	0x0451, r19
    23e8:	20 93 50 04 	sts	0x0450, r18
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <memcpy>:
    23f2:	fb 01       	movw	r30, r22
    23f4:	dc 01       	movw	r26, r24
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <memcpy+0xa>
    23f8:	01 90       	ld	r0, Z+
    23fa:	0d 92       	st	X+, r0
    23fc:	41 50       	subi	r20, 0x01	; 1
    23fe:	50 40       	sbci	r21, 0x00	; 0
    2400:	d8 f7       	brcc	.-10     	; 0x23f8 <memcpy+0x6>
    2402:	08 95       	ret

00002404 <MainProcessEnd>:
#include "../misc/idle.h"

// This makes the initial main()-process idle when finishing (like all other processes).
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	processor_loop_idle();
    2404:	0e 94 c3 10 	call	0x2186	; 0x2186 <processor_loop_idle>
}
    2408:	08 95       	ret
    240a:	f8 94       	cli

0000240c <__stop_program>:
    240c:	ff cf       	rjmp	.-2      	; 0x240c <__stop_program>
