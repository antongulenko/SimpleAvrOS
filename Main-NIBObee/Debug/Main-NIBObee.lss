
Main-NIBObee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  0000269a  0000272e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000269a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000256  008001fa  008001fa  00002828  2**0
                  ALLOC
  3 .stab         00000858  00000000  00000000  00002828  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fb  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  0000327b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000136a  00000000  00000000  000034e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000048cc  00000000  00000000  0000484d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ae7  00000000  00000000  00009119  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004565  00000000  00000000  00009c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000910  00000000  00000000  0000e168  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018ab  00000000  00000000  0000ea78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c47  00000000  00000000  00010323  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00049b46  00000000  00000000  00011f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000055f  00000000  00000000  0005bab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f0  00000000  00000000  0005c00f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
       8:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
       c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      10:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      14:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      18:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      1c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      20:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      24:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      28:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      30:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      34:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      38:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      3c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      40:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      44:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      48:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      4c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      50:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      54:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      58:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      5c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      60:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      64:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      68:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_26>
      6c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      70:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      74:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      78:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      7c:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>
      80:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_32>
      84:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_33>
      88:	0c 94 89 00 	jmp	0x112	; 0x112 <__bad_interrupt>

0000008c <smily_bits>:
      8c:	e0 07 18 18 04 20 02 40 32 4c 49 92 31 8c 31 8c     ..... .@2LI.1.1.
      9c:	81 81 81 81 09 90 32 4c c2 43 04 20 18 18 e0 07     ......2L.C. ....

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	c0 e0       	ldi	r28, 0x00	; 0
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ea e9       	ldi	r30, 0x9A	; 154
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	aa 3f       	cpi	r26, 0xFA	; 250
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	14 e0       	ldi	r17, 0x04	; 4
      d4:	aa ef       	ldi	r26, 0xFA	; 250
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a0 35       	cpi	r26, 0x50	; 80
      de:	b1 07       	cpc	r27, r17
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>

000000e2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      e2:	0e 94 cf 00 	call	0x19e	; 0x19e <init_reset_condition>

000000e6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      e6:	0e 94 df 00 	call	0x1be	; 0x1be <init_ports_m1284P>

000000ea <init_nibobee_leds_kernel_init>:
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
}
KERNEL_INIT(init_nibobee_leds)
      ea:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <init_nibobee_leds>

000000ee <init_nibobee_buttons_kernel_init>:
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
}
KERNEL_INIT(init_nibobee_buttons)
      ee:	0e 94 58 02 	call	0x4b0	; 0x4b0 <init_nibobee_buttons>

000000f2 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      f2:	0e 94 8c 02 	call	0x518	; 0x518 <init_timer_m1284P>

000000f6 <init_nibobee_motors_kernel_init>:
	// Don't know why, but the lib does this... Seems to enable internal PullUp.
	// Pins will be controlled by the timer anyways.
	setPinOne(RightMotorBase->pwmTimer->outputComparePin);
	setPinOne(LeftMotorBase->pwmTimer->outputComparePin);
}
KERNEL_INIT(init_nibobee_motors)
      f6:	0e 94 94 03 	call	0x728	; 0x728 <init_nibobee_motors>

000000fa <init_timer_kernel_init>:
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	setTimerCompareValue(Timer3A, 2500);
	setTimerCompareValue(Timer3B, 2500);
}
KERNEL_INIT(init_timer)
      fa:	0e 94 cf 03 	call	0x79e	; 0x79e <init_timer>

000000fe <init_smooth_motors_kernel_init>:

void init_smooth_motors() {
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, 40, 3000)
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, 40, 3000)
}
KERNEL_INIT(init_smooth_motors)
      fe:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <init_smooth_motors>

00000102 <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
     102:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init_twi>

00000106 <init_kernel_kernel_init>:
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
	enableTimerInterrupt(CLOCKTIMER_A);
	sei();
}
KERNEL_INIT(init_kernel)
     106:	0e 94 9b 0a 	call	0x1536	; 0x1536 <init_kernel>
     10a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <main>
     10e:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <_exit>

00000112 <__bad_interrupt>:
     112:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000116 <twi_stop>:
static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base | _BV(TWSTO);
     116:	85 e9       	ldi	r24, 0x95	; 149
     118:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
     11c:	10 92 e2 03 	sts	0x03E2, r1
     120:	10 92 e1 03 	sts	0x03E1, r1
}
     124:	08 95       	ret

00000126 <twi_ack_receive>:
		twi_start();
	}	
}

static inline void twi_ack_receive() {
	if (alreadyHandled < twi_buffer.size - 1) {
     126:	80 91 dc 03 	lds	r24, 0x03DC
     12a:	90 91 dd 03 	lds	r25, 0x03DD
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	20 91 82 03 	lds	r18, 0x0382
     134:	30 91 83 03 	lds	r19, 0x0383
     138:	28 17       	cp	r18, r24
     13a:	39 07       	cpc	r19, r25
     13c:	10 f4       	brcc	.+4      	; 0x142 <twi_ack_receive+0x1c>
		twi_ack(); // Still more than one byte to go.
     13e:	85 ec       	ldi	r24, 0xC5	; 197
     140:	01 c0       	rjmp	.+2      	; 0x144 <twi_ack_receive+0x1e>
	} else {
		twi_continue();  // Want to receive one more byte. Next byte will get NOT ACK.
     142:	85 e8       	ldi	r24, 0x85	; 133
     144:	80 93 bc 00 	sts	0x00BC, r24
     148:	08 95       	ret

0000014a <twi_read_byte>:
	}
}

static inline void twi_read_byte() {
	twi_buffer.data[alreadyHandled++] = TWDR;
     14a:	80 91 82 03 	lds	r24, 0x0382
     14e:	90 91 83 03 	lds	r25, 0x0383
     152:	20 91 bb 00 	lds	r18, 0x00BB
     156:	e0 91 da 03 	lds	r30, 0x03DA
     15a:	f0 91 db 03 	lds	r31, 0x03DB
     15e:	e8 0f       	add	r30, r24
     160:	f9 1f       	adc	r31, r25
     162:	20 83       	st	Z, r18
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	90 93 83 03 	sts	0x0383, r25
     16a:	80 93 82 03 	sts	0x0382, r24
}
     16e:	08 95       	ret

00000170 <fillSendBuffer>:
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
	}
#endif

static inline void fillSendBuffer(byte operation, TWIBuffer parameters) {
     170:	9b 01       	movw	r18, r22
	sendBuffer.data[0] = operation;
     172:	e0 91 a3 01 	lds	r30, 0x01A3
     176:	f0 91 a4 01 	lds	r31, 0x01A4
     17a:	80 83       	st	Z, r24
	sendBuffer.size = parameters.size + 1;
     17c:	cb 01       	movw	r24, r22
     17e:	01 96       	adiw	r24, 0x01	; 1
     180:	90 93 a6 01 	sts	0x01A6, r25
     184:	80 93 a5 01 	sts	0x01A5, r24
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
     188:	e0 91 a3 01 	lds	r30, 0x01A3
     18c:	f0 91 a4 01 	lds	r31, 0x01A4
     190:	31 96       	adiw	r30, 0x01	; 1
     192:	cf 01       	movw	r24, r30
     194:	ba 01       	movw	r22, r20
     196:	a9 01       	movw	r20, r18
     198:	0e 94 42 13 	call	0x2684	; 0x2684 <memcpy>
}
     19c:	08 95       	ret

0000019e <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     19e:	84 b7       	in	r24, 0x34	; 52
     1a0:	80 93 fa 01 	sts	0x01FA, r24
	MCUSR = 0;
     1a4:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     1a6:	88 e1       	ldi	r24, 0x18	; 24
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	80 93 60 00 	sts	0x0060, r24
     1b0:	10 92 60 00 	sts	0x0060, r1
     1b4:	0f be       	out	0x3f, r0	; 63
	#endif
}
     1b6:	08 95       	ret

000001b8 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     1b8:	80 91 fa 01 	lds	r24, 0x01FA
     1bc:	08 95       	ret

000001be <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1be:	a4 e0       	ldi	r26, 0x04	; 4
     1c0:	b4 e0       	ldi	r27, 0x04	; 4
     1c2:	e4 ee       	ldi	r30, 0xE4	; 228
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	01 90       	ld	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	81 50       	subi	r24, 0x01	; 1
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <init_ports_m1284P+0xa>
     1d0:	84 e0       	ldi	r24, 0x04	; 4
     1d2:	94 e0       	ldi	r25, 0x04	; 4
     1d4:	90 93 b8 03 	sts	0x03B8, r25
     1d8:	80 93 b7 03 	sts	0x03B7, r24
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	20 93 b9 03 	sts	0x03B9, r18
     1e2:	90 93 38 03 	sts	0x0338, r25
     1e6:	80 93 37 03 	sts	0x0337, r24
     1ea:	22 e0       	ldi	r18, 0x02	; 2
     1ec:	20 93 39 03 	sts	0x0339, r18
     1f0:	90 93 02 04 	sts	0x0402, r25
     1f4:	80 93 01 04 	sts	0x0401, r24
     1f8:	24 e0       	ldi	r18, 0x04	; 4
     1fa:	20 93 03 04 	sts	0x0403, r18
     1fe:	90 93 df 03 	sts	0x03DF, r25
     202:	80 93 de 03 	sts	0x03DE, r24
     206:	28 e0       	ldi	r18, 0x08	; 8
     208:	20 93 e0 03 	sts	0x03E0, r18
     20c:	90 93 74 03 	sts	0x0374, r25
     210:	80 93 73 03 	sts	0x0373, r24
     214:	20 e1       	ldi	r18, 0x10	; 16
     216:	20 93 75 03 	sts	0x0375, r18
     21a:	90 93 0c 02 	sts	0x020C, r25
     21e:	80 93 0b 02 	sts	0x020B, r24
     222:	20 e2       	ldi	r18, 0x20	; 32
     224:	20 93 0d 02 	sts	0x020D, r18
     228:	90 93 29 02 	sts	0x0229, r25
     22c:	80 93 28 02 	sts	0x0228, r24
     230:	20 e4       	ldi	r18, 0x40	; 64
     232:	20 93 2a 02 	sts	0x022A, r18
     236:	90 93 8a 03 	sts	0x038A, r25
     23a:	80 93 89 03 	sts	0x0389, r24
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	80 93 8b 03 	sts	0x038B, r24
	INIT_PORT_AND_PINS(B);
     244:	a9 e7       	ldi	r26, 0x79	; 121
     246:	b3 e0       	ldi	r27, 0x03	; 3
     248:	ee ed       	ldi	r30, 0xDE	; 222
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	86 e0       	ldi	r24, 0x06	; 6
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	81 50       	subi	r24, 0x01	; 1
     254:	e1 f7       	brne	.-8      	; 0x24e <init_ports_m1284P+0x90>
     256:	89 e7       	ldi	r24, 0x79	; 121
     258:	93 e0       	ldi	r25, 0x03	; 3
     25a:	90 93 f7 03 	sts	0x03F7, r25
     25e:	80 93 f6 03 	sts	0x03F6, r24
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	20 93 f8 03 	sts	0x03F8, r18
     268:	90 93 87 03 	sts	0x0387, r25
     26c:	80 93 86 03 	sts	0x0386, r24
     270:	22 e0       	ldi	r18, 0x02	; 2
     272:	20 93 88 03 	sts	0x0388, r18
     276:	90 93 30 02 	sts	0x0230, r25
     27a:	80 93 2f 02 	sts	0x022F, r24
     27e:	24 e0       	ldi	r18, 0x04	; 4
     280:	20 93 31 02 	sts	0x0231, r18
     284:	90 93 1d 04 	sts	0x041D, r25
     288:	80 93 1c 04 	sts	0x041C, r24
     28c:	28 e0       	ldi	r18, 0x08	; 8
     28e:	20 93 1e 04 	sts	0x041E, r18
     292:	90 93 fa 03 	sts	0x03FA, r25
     296:	80 93 f9 03 	sts	0x03F9, r24
     29a:	20 e1       	ldi	r18, 0x10	; 16
     29c:	20 93 fb 03 	sts	0x03FB, r18
     2a0:	90 93 d8 03 	sts	0x03D8, r25
     2a4:	80 93 d7 03 	sts	0x03D7, r24
     2a8:	20 e2       	ldi	r18, 0x20	; 32
     2aa:	20 93 d9 03 	sts	0x03D9, r18
     2ae:	90 93 43 04 	sts	0x0443, r25
     2b2:	80 93 42 04 	sts	0x0442, r24
     2b6:	20 e4       	ldi	r18, 0x40	; 64
     2b8:	20 93 44 04 	sts	0x0444, r18
     2bc:	90 93 8d 03 	sts	0x038D, r25
     2c0:	80 93 8c 03 	sts	0x038C, r24
     2c4:	80 e8       	ldi	r24, 0x80	; 128
     2c6:	80 93 8e 03 	sts	0x038E, r24
	INIT_PORT_AND_PINS(C);
     2ca:	a1 ea       	ldi	r26, 0xA1	; 161
     2cc:	b3 e0       	ldi	r27, 0x03	; 3
     2ce:	e8 ed       	ldi	r30, 0xD8	; 216
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	86 e0       	ldi	r24, 0x06	; 6
     2d4:	01 90       	ld	r0, Z+
     2d6:	0d 92       	st	X+, r0
     2d8:	81 50       	subi	r24, 0x01	; 1
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <init_ports_m1284P+0x116>
     2dc:	81 ea       	ldi	r24, 0xA1	; 161
     2de:	93 e0       	ldi	r25, 0x03	; 3
     2e0:	90 93 80 03 	sts	0x0380, r25
     2e4:	80 93 7f 03 	sts	0x037F, r24
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	20 93 81 03 	sts	0x0381, r18
     2ee:	90 93 15 02 	sts	0x0215, r25
     2f2:	80 93 14 02 	sts	0x0214, r24
     2f6:	22 e0       	ldi	r18, 0x02	; 2
     2f8:	20 93 16 02 	sts	0x0216, r18
     2fc:	90 93 52 03 	sts	0x0352, r25
     300:	80 93 51 03 	sts	0x0351, r24
     304:	24 e0       	ldi	r18, 0x04	; 4
     306:	20 93 53 03 	sts	0x0353, r18
     30a:	90 93 71 03 	sts	0x0371, r25
     30e:	80 93 70 03 	sts	0x0370, r24
     312:	28 e0       	ldi	r18, 0x08	; 8
     314:	20 93 72 03 	sts	0x0372, r18
     318:	90 93 18 02 	sts	0x0218, r25
     31c:	80 93 17 02 	sts	0x0217, r24
     320:	20 e1       	ldi	r18, 0x10	; 16
     322:	20 93 19 02 	sts	0x0219, r18
     326:	90 93 77 03 	sts	0x0377, r25
     32a:	80 93 76 03 	sts	0x0376, r24
     32e:	20 e2       	ldi	r18, 0x20	; 32
     330:	20 93 78 03 	sts	0x0378, r18
     334:	90 93 c6 03 	sts	0x03C6, r25
     338:	80 93 c5 03 	sts	0x03C5, r24
     33c:	20 e4       	ldi	r18, 0x40	; 64
     33e:	20 93 c7 03 	sts	0x03C7, r18
     342:	90 93 23 02 	sts	0x0223, r25
     346:	80 93 22 02 	sts	0x0222, r24
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	80 93 24 02 	sts	0x0224, r24
	INIT_PORT_AND_PINS(D);
     350:	a4 e5       	ldi	r26, 0x54	; 84
     352:	b3 e0       	ldi	r27, 0x03	; 3
     354:	e2 ed       	ldi	r30, 0xD2	; 210
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	86 e0       	ldi	r24, 0x06	; 6
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	e1 f7       	brne	.-8      	; 0x35a <init_ports_m1284P+0x19c>
     362:	84 e5       	ldi	r24, 0x54	; 84
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	90 93 36 02 	sts	0x0236, r25
     36a:	80 93 35 02 	sts	0x0235, r24
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	20 93 37 02 	sts	0x0237, r18
     374:	90 93 35 04 	sts	0x0435, r25
     378:	80 93 34 04 	sts	0x0434, r24
     37c:	22 e0       	ldi	r18, 0x02	; 2
     37e:	20 93 36 04 	sts	0x0436, r18
     382:	90 93 bb 03 	sts	0x03BB, r25
     386:	80 93 ba 03 	sts	0x03BA, r24
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	20 93 bc 03 	sts	0x03BC, r18
     390:	90 93 e4 03 	sts	0x03E4, r25
     394:	80 93 e3 03 	sts	0x03E3, r24
     398:	28 e0       	ldi	r18, 0x08	; 8
     39a:	20 93 e5 03 	sts	0x03E5, r18
     39e:	90 93 d1 03 	sts	0x03D1, r25
     3a2:	80 93 d0 03 	sts	0x03D0, r24
     3a6:	20 e1       	ldi	r18, 0x10	; 16
     3a8:	20 93 d2 03 	sts	0x03D2, r18
     3ac:	90 93 b5 03 	sts	0x03B5, r25
     3b0:	80 93 b4 03 	sts	0x03B4, r24
     3b4:	20 e2       	ldi	r18, 0x20	; 32
     3b6:	20 93 b6 03 	sts	0x03B6, r18
     3ba:	90 93 fd 03 	sts	0x03FD, r25
     3be:	80 93 fc 03 	sts	0x03FC, r24
     3c2:	20 e4       	ldi	r18, 0x40	; 64
     3c4:	20 93 fe 03 	sts	0x03FE, r18
     3c8:	90 93 12 02 	sts	0x0212, r25
     3cc:	80 93 11 02 	sts	0x0211, r24
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	80 93 13 02 	sts	0x0213, r24
}
     3d6:	08 95       	ret

000003d8 <init_nibobee_leds>:
PLed rightLedsArray[] = { &RightYellow_, &RightRed_ };
PLed leftLedsArray[] = { &LeftYellow_, &LeftRed_ };
PLed allLedsArray[] = { &LeftYellow_, &LeftRed_, &RightRed_, &RightYellow_ };

void init_nibobee_leds() {
	INIT_LED(LeftYellow, PinB0)
     3d8:	86 ef       	ldi	r24, 0xF6	; 246
     3da:	93 e0       	ldi	r25, 0x03	; 3
     3dc:	90 93 2c 02 	sts	0x022C, r25
     3e0:	80 93 2b 02 	sts	0x022B, r24

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     3e4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	INIT_LED(LeftRed, PinB1)
     3e8:	86 e8       	ldi	r24, 0x86	; 134
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	90 93 2e 02 	sts	0x022E, r25
     3f0:	80 93 2d 02 	sts	0x022D, r24
     3f4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	INIT_LED(RightRed, PinB2)
     3f8:	8f e2       	ldi	r24, 0x2F	; 47
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	90 93 00 04 	sts	0x0400, r25
     400:	80 93 ff 03 	sts	0x03FF, r24
     404:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	INIT_LED(RightYellow, PinB3)
     408:	8c e1       	ldi	r24, 0x1C	; 28
     40a:	94 e0       	ldi	r25, 0x04	; 4
     40c:	90 93 d6 03 	sts	0x03D6, r25
     410:	80 93 d5 03 	sts	0x03D5, r24
     414:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 2)
     418:	af e3       	ldi	r26, 0x3F	; 63
     41a:	b4 e0       	ldi	r27, 0x04	; 4
     41c:	ef ec       	ldi	r30, 0xCF	; 207
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	81 50       	subi	r24, 0x01	; 1
     428:	e1 f7       	brne	.-8      	; 0x422 <init_nibobee_leds+0x4a>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     42a:	a5 e2       	ldi	r26, 0x25	; 37
     42c:	b2 e0       	ldi	r27, 0x02	; 2
     42e:	ec ec       	ldi	r30, 0xCC	; 204
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	e1 f7       	brne	.-8      	; 0x434 <init_nibobee_leds+0x5c>
	INIT_LED_GROUP(RightLeds, rightLedsArray, 2)
     43c:	a9 ee       	ldi	r26, 0xE9	; 233
     43e:	b3 e0       	ldi	r27, 0x03	; 3
     440:	e9 ec       	ldi	r30, 0xC9	; 201
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	01 90       	ld	r0, Z+
     448:	0d 92       	st	X+, r0
     44a:	81 50       	subi	r24, 0x01	; 1
     44c:	e1 f7       	brne	.-8      	; 0x446 <init_nibobee_leds+0x6e>
	INIT_LED_GROUP(LeftLeds, leftLedsArray, 2)
     44e:	a5 e4       	ldi	r26, 0x45	; 69
     450:	b4 e0       	ldi	r27, 0x04	; 4
     452:	e6 ec       	ldi	r30, 0xC6	; 198
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	01 90       	ld	r0, Z+
     45a:	0d 92       	st	X+, r0
     45c:	81 50       	subi	r24, 0x01	; 1
     45e:	e1 f7       	brne	.-8      	; 0x458 <init_nibobee_leds+0x80>
	INIT_LED_GROUP(AllLeds, allLedsArray, 4)
     460:	a6 ee       	ldi	r26, 0xE6	; 230
     462:	b3 e0       	ldi	r27, 0x03	; 3
     464:	e3 ec       	ldi	r30, 0xC3	; 195
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	01 90       	ld	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	81 50       	subi	r24, 0x01	; 1
     470:	e1 f7       	brne	.-8      	; 0x46a <init_nibobee_leds+0x92>
}
     472:	08 95       	ret

00000474 <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	9a 81       	ldd	r25, Y+2	; 0x02
     47e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     482:	88 81       	ld	r24, Y
     484:	82 ff       	sbrs	r24, 2
     486:	04 c0       	rjmp	.+8      	; 0x490 <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
}
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	ec 01       	movw	r28, r24
	initButton(button->button);
     49c:	88 81       	ld	r24, Y
     49e:	99 81       	ldd	r25, Y+1	; 0x01
     4a0:	0e 94 3a 02 	call	0x474	; 0x474 <initButton>
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     4a4:	8a 81       	ldd	r24, Y+2	; 0x02
     4a6:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <enablePinChangeInterrupt>
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <init_nibobee_buttons>:
#include <kernel/devices/port_m1284P.kernel.h>
#include <kernel/kernel_init.h>
#include <kernel/devices/button.kernel.h>
#include "nibobee_button.h"

void init_nibobee_buttons() {
     4b0:	1f 93       	push	r17
	INIT_BUTTON(ButtonLeftBackward, PinC5, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4b2:	16 e0       	ldi	r17, 0x06	; 6
     4b4:	10 93 f3 03 	sts	0x03F3, r17
     4b8:	86 e7       	ldi	r24, 0x76	; 118
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	90 93 f5 03 	sts	0x03F5, r25
     4c0:	80 93 f4 03 	sts	0x03F4, r24
     4c4:	83 ef       	ldi	r24, 0xF3	; 243
     4c6:	93 e0       	ldi	r25, 0x03	; 3
     4c8:	0e 94 3a 02 	call	0x474	; 0x474 <initButton>
	INIT_BUTTON(ButtonLeftForward, PinC4, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4cc:	10 93 32 02 	sts	0x0232, r17
     4d0:	87 e1       	ldi	r24, 0x17	; 23
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	90 93 34 02 	sts	0x0234, r25
     4d8:	80 93 33 02 	sts	0x0233, r24
     4dc:	82 e3       	ldi	r24, 0x32	; 50
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	0e 94 3a 02 	call	0x474	; 0x474 <initButton>
	INIT_BUTTON(ButtonRightBackward, PinC7, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4e4:	10 93 1a 02 	sts	0x021A, r17
     4e8:	82 e2       	ldi	r24, 0x22	; 34
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	90 93 1c 02 	sts	0x021C, r25
     4f0:	80 93 1b 02 	sts	0x021B, r24
     4f4:	8a e1       	ldi	r24, 0x1A	; 26
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	0e 94 3a 02 	call	0x474	; 0x474 <initButton>
	INIT_BUTTON(ButtonRightForward, PinC6, BUTTON_NEEDS_PULLUP | BUTTON_INVERTED)
     4fc:	10 93 0e 02 	sts	0x020E, r17
     500:	85 ec       	ldi	r24, 0xC5	; 197
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	90 93 10 02 	sts	0x0210, r25
     508:	80 93 0f 02 	sts	0x020F, r24
     50c:	8e e0       	ldi	r24, 0x0E	; 14
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	0e 94 3a 02 	call	0x474	; 0x474 <initButton>
}
     514:	1f 91       	pop	r17
     516:	08 95       	ret

00000518 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     518:	ac ee       	ldi	r26, 0xEC	; 236
     51a:	b3 e0       	ldi	r27, 0x03	; 3
     51c:	ec eb       	ldi	r30, 0xBC	; 188
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	87 e0       	ldi	r24, 0x07	; 7
     522:	01 90       	ld	r0, Z+
     524:	0d 92       	st	X+, r0
     526:	81 50       	subi	r24, 0x01	; 1
     528:	e1 f7       	brne	.-8      	; 0x522 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     52a:	aa e4       	ldi	r26, 0x4A	; 74
     52c:	b3 e0       	ldi	r27, 0x03	; 3
     52e:	e5 eb       	ldi	r30, 0xB5	; 181
     530:	f1 e0       	ldi	r31, 0x01	; 1
     532:	87 e0       	ldi	r24, 0x07	; 7
     534:	01 90       	ld	r0, Z+
     536:	0d 92       	st	X+, r0
     538:	81 50       	subi	r24, 0x01	; 1
     53a:	e1 f7       	brne	.-8      	; 0x534 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     53c:	aa e5       	ldi	r26, 0x5A	; 90
     53e:	b3 e0       	ldi	r27, 0x03	; 3
     540:	ee ea       	ldi	r30, 0xAE	; 174
     542:	f1 e0       	ldi	r31, 0x01	; 1
     544:	87 e0       	ldi	r24, 0x07	; 7
     546:	01 90       	ld	r0, Z+
     548:	0d 92       	st	X+, r0
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	e1 f7       	brne	.-8      	; 0x546 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     54e:	a1 e6       	ldi	r26, 0x61	; 97
     550:	b3 e0       	ldi	r27, 0x03	; 3
     552:	e7 ea       	ldi	r30, 0xA7	; 167
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	87 e0       	ldi	r24, 0x07	; 7
     558:	01 90       	ld	r0, Z+
     55a:	0d 92       	st	X+, r0
     55c:	81 50       	subi	r24, 0x01	; 1
     55e:	e1 f7       	brne	.-8      	; 0x558 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     560:	8c ee       	ldi	r24, 0xEC	; 236
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	90 93 49 04 	sts	0x0449, r25
     568:	80 93 48 04 	sts	0x0448, r24
     56c:	27 e4       	ldi	r18, 0x47	; 71
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	30 93 4b 04 	sts	0x044B, r19
     574:	20 93 4a 04 	sts	0x044A, r18
     578:	10 92 4d 04 	sts	0x044D, r1
     57c:	10 92 4c 04 	sts	0x044C, r1
     580:	2c e1       	ldi	r18, 0x1C	; 28
     582:	34 e0       	ldi	r19, 0x04	; 4
     584:	30 93 4f 04 	sts	0x044F, r19
     588:	20 93 4e 04 	sts	0x044E, r18
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     58c:	90 93 69 03 	sts	0x0369, r25
     590:	80 93 68 03 	sts	0x0368, r24
     594:	88 e4       	ldi	r24, 0x48	; 72
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 6b 03 	sts	0x036B, r25
     59c:	80 93 6a 03 	sts	0x036A, r24
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	90 93 6d 03 	sts	0x036D, r25
     5a8:	80 93 6c 03 	sts	0x036C, r24
     5ac:	29 ef       	ldi	r18, 0xF9	; 249
     5ae:	33 e0       	ldi	r19, 0x03	; 3
     5b0:	30 93 6f 03 	sts	0x036F, r19
     5b4:	20 93 6e 03 	sts	0x036E, r18
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     5b8:	2a e4       	ldi	r18, 0x4A	; 74
     5ba:	33 e0       	ldi	r19, 0x03	; 3
     5bc:	30 93 43 03 	sts	0x0343, r19
     5c0:	20 93 42 03 	sts	0x0342, r18
     5c4:	48 e8       	ldi	r20, 0x88	; 136
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	50 93 45 03 	sts	0x0345, r21
     5cc:	40 93 44 03 	sts	0x0344, r20
     5d0:	10 92 47 03 	sts	0x0347, r1
     5d4:	10 92 46 03 	sts	0x0346, r1
     5d8:	44 eb       	ldi	r20, 0xB4	; 180
     5da:	53 e0       	ldi	r21, 0x03	; 3
     5dc:	50 93 49 03 	sts	0x0349, r21
     5e0:	40 93 48 03 	sts	0x0348, r20
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     5e4:	30 93 a8 03 	sts	0x03A8, r19
     5e8:	20 93 a7 03 	sts	0x03A7, r18
     5ec:	2a e8       	ldi	r18, 0x8A	; 138
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	30 93 aa 03 	sts	0x03AA, r19
     5f4:	20 93 a9 03 	sts	0x03A9, r18
     5f8:	90 93 ac 03 	sts	0x03AC, r25
     5fc:	80 93 ab 03 	sts	0x03AB, r24
     600:	20 ed       	ldi	r18, 0xD0	; 208
     602:	33 e0       	ldi	r19, 0x03	; 3
     604:	30 93 ae 03 	sts	0x03AE, r19
     608:	20 93 ad 03 	sts	0x03AD, r18
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     60c:	2a e5       	ldi	r18, 0x5A	; 90
     60e:	33 e0       	ldi	r19, 0x03	; 3
     610:	30 93 38 04 	sts	0x0438, r19
     614:	20 93 37 04 	sts	0x0437, r18
     618:	43 eb       	ldi	r20, 0xB3	; 179
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	50 93 3a 04 	sts	0x043A, r21
     620:	40 93 39 04 	sts	0x0439, r20
     624:	10 92 3c 04 	sts	0x043C, r1
     628:	10 92 3b 04 	sts	0x043B, r1
     62c:	41 e1       	ldi	r20, 0x11	; 17
     62e:	52 e0       	ldi	r21, 0x02	; 2
     630:	50 93 3e 04 	sts	0x043E, r21
     634:	40 93 3d 04 	sts	0x043D, r20
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     638:	30 93 be 03 	sts	0x03BE, r19
     63c:	20 93 bd 03 	sts	0x03BD, r18
     640:	24 eb       	ldi	r18, 0xB4	; 180
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	30 93 c0 03 	sts	0x03C0, r19
     648:	20 93 bf 03 	sts	0x03BF, r18
     64c:	90 93 c2 03 	sts	0x03C2, r25
     650:	80 93 c1 03 	sts	0x03C1, r24
     654:	2c ef       	ldi	r18, 0xFC	; 252
     656:	33 e0       	ldi	r19, 0x03	; 3
     658:	30 93 c4 03 	sts	0x03C4, r19
     65c:	20 93 c3 03 	sts	0x03C3, r18
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     660:	21 e6       	ldi	r18, 0x61	; 97
     662:	33 e0       	ldi	r19, 0x03	; 3
     664:	30 93 3b 03 	sts	0x033B, r19
     668:	20 93 3a 03 	sts	0x033A, r18
     66c:	48 e9       	ldi	r20, 0x98	; 152
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	50 93 3d 03 	sts	0x033D, r21
     674:	40 93 3c 03 	sts	0x033C, r20
     678:	10 92 3f 03 	sts	0x033F, r1
     67c:	10 92 3e 03 	sts	0x033E, r1
     680:	42 e4       	ldi	r20, 0x42	; 66
     682:	54 e0       	ldi	r21, 0x04	; 4
     684:	50 93 41 03 	sts	0x0341, r21
     688:	40 93 40 03 	sts	0x0340, r20
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     68c:	30 93 c9 03 	sts	0x03C9, r19
     690:	20 93 c8 03 	sts	0x03C8, r18
     694:	2a e9       	ldi	r18, 0x9A	; 154
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	30 93 cb 03 	sts	0x03CB, r19
     69c:	20 93 ca 03 	sts	0x03CA, r18
     6a0:	90 93 cd 03 	sts	0x03CD, r25
     6a4:	80 93 cc 03 	sts	0x03CC, r24
     6a8:	8c e8       	ldi	r24, 0x8C	; 140
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	90 93 cf 03 	sts	0x03CF, r25
     6b0:	80 93 ce 03 	sts	0x03CE, r24
}
     6b4:	08 95       	ret

000006b6 <initMotor>:
#define _MOTOR_KERNEL_

#include "../kernel_init.h"
#include "motor.h"

void initMotor(PMotor motor) {
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
	// Configure the timer. These are configurations,
	// that should work fine for motors, but might also be changed elsewhere.
	setTimerClockSelect(Timer1, prescale_1);
     6bc:	8a e4       	ldi	r24, 0x4A	; 74
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <setTimerClockSelect>
	setWaveformGenerationMode(motor->pwmTimer->timer, pwm_phase_correct);
     6c8:	eb 81       	ldd	r30, Y+3	; 0x03
     6ca:	fc 81       	ldd	r31, Y+4	; 0x04
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	64 e0       	ldi	r22, 0x04	; 4
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	0e 94 45 10 	call	0x208a	; 0x208a <setWaveformGenerationMode>
	
	setTimerCompareValue(motor->pwmTimer, 0);
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 18 11 	call	0x2230	; 0x2230 <setTimerCompareValue>
	setPinOutput(motor->direction);
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	if (!(motor->flags & MOTOR_TWO_DIR_PINS))
     6ec:	88 81       	ld	r24, Y
     6ee:	83 fd       	sbrc	r24, 3
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <initMotor+0x44>
		setPinOne(motor->direction);
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     706:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initMotor>
	setPinOutput(motor->direction2);
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	setPinZero(motor->motor.direction);
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	9a 81       	ldd	r25, Y+2	; 0x02
     716:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
	setPinZero(motor->direction2);
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <init_nibobee_motors>:
#include <kernel/devices/timer_m1284P.kernel.h>
#include <kernel/devices/motor.kernel.h>
#include "nibobee_motor.h"

void init_nibobee_motors() {
	Timer1->flags |= TIMER_RESOLUTION_9bit;
     728:	80 91 4a 03 	lds	r24, 0x034A
     72c:	80 61       	ori	r24, 0x10	; 16
     72e:	80 93 4a 03 	sts	0x034A, r24
	
	INIT_MOTOR(LeftMotorBase, MOTOR_NORMAL, PinD6, Timer1A)
     732:	10 92 af 03 	sts	0x03AF, r1
     736:	8c ef       	ldi	r24, 0xFC	; 252
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	90 93 b1 03 	sts	0x03B1, r25
     73e:	80 93 b0 03 	sts	0x03B0, r24
     742:	82 e4       	ldi	r24, 0x42	; 66
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	90 93 b3 03 	sts	0x03B3, r25
     74a:	80 93 b2 03 	sts	0x03B2, r24
     74e:	8f ea       	ldi	r24, 0xAF	; 175
     750:	93 e0       	ldi	r25, 0x03	; 3
     752:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initMotor>
	INIT_MOTOR(RightMotorBase, MOTOR_INVERSE_DIRECTION, PinD7, Timer1B)
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	80 93 1d 02 	sts	0x021D, r24
     75c:	81 e1       	ldi	r24, 0x11	; 17
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	90 93 1f 02 	sts	0x021F, r25
     764:	80 93 1e 02 	sts	0x021E, r24
     768:	87 ea       	ldi	r24, 0xA7	; 167
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	90 93 21 02 	sts	0x0221, r25
     770:	80 93 20 02 	sts	0x0220, r24
     774:	8d e1       	ldi	r24, 0x1D	; 29
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initMotor>
	
	// Don't know why, but the lib does this... Seems to enable internal PullUp.
	// Pins will be controlled by the timer anyways.
	setPinOne(RightMotorBase->pwmTimer->outputComparePin);
     77c:	e0 91 20 02 	lds	r30, 0x0220
     780:	f0 91 21 02 	lds	r31, 0x0221
     784:	86 81       	ldd	r24, Z+6	; 0x06
     786:	97 81       	ldd	r25, Z+7	; 0x07
     788:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
	setPinOne(LeftMotorBase->pwmTimer->outputComparePin);
     78c:	e0 91 b2 03 	lds	r30, 0x03B2
     790:	f0 91 b3 03 	lds	r31, 0x03B3
     794:	86 81       	ldd	r24, Z+6	; 0x06
     796:	97 81       	ldd	r25, Z+7	; 0x07
     798:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
}
     79c:	08 95       	ret

0000079e <init_timer>:
#define CLOCKISR_A TIMER3_COMPA_vect
#define CLOCKISR_B TIMER3_COMPB_vect
#define CLOCKTIMER_A Timer3A
#define CLOCKTIMER_B Timer3B

void init_timer() {
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
	setWaveformGenerationMode(Timer3, clear_timer_on_match);
     7a2:	c1 e6       	ldi	r28, 0x61	; 97
     7a4:	d3 e0       	ldi	r29, 0x03	; 3
     7a6:	ce 01       	movw	r24, r28
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 45 10 	call	0x208a	; 0x208a <setWaveformGenerationMode>
	setTimerClockSelect(Timer3, prescale_8);
     7b0:	ce 01       	movw	r24, r28
     7b2:	62 e0       	ldi	r22, 0x02	; 2
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <setTimerClockSelect>
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	setTimerCompareValue(Timer3A, 2500);
     7ba:	8a e3       	ldi	r24, 0x3A	; 58
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	64 ec       	ldi	r22, 0xC4	; 196
     7c0:	79 e0       	ldi	r23, 0x09	; 9
     7c2:	0e 94 18 11 	call	0x2230	; 0x2230 <setTimerCompareValue>
	setTimerCompareValue(Timer3B, 2500);
     7c6:	88 ec       	ldi	r24, 0xC8	; 200
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	64 ec       	ldi	r22, 0xC4	; 196
     7cc:	79 e0       	ldi	r23, 0x09	; 9
     7ce:	0e 94 18 11 	call	0x2230	; 0x2230 <setTimerCompareValue>
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     7d8:	08 95       	ret

000007da <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increase the milliseconds_running value.

TIMER_TICK_ISR {
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	0b b6       	in	r0, 0x3b	; 59
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	2f 93       	push	r18
     7ea:	3f 93       	push	r19
     7ec:	4f 93       	push	r20
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
	TIMER_TICK_ACTION
     800:	80 91 fb 01 	lds	r24, 0x01FB
     804:	90 91 fc 01 	lds	r25, 0x01FC
     808:	a0 91 fd 01 	lds	r26, 0x01FD
     80c:	b0 91 fe 01 	lds	r27, 0x01FE
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	a1 1d       	adc	r26, r1
     814:	b1 1d       	adc	r27, r1
     816:	80 93 fb 01 	sts	0x01FB, r24
     81a:	90 93 fc 01 	sts	0x01FC, r25
     81e:	a0 93 fd 01 	sts	0x01FD, r26
     822:	b0 93 fe 01 	sts	0x01FE, r27
     826:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <in_timer_tick>
}
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	0f 90       	pop	r0
     844:	0b be       	out	0x3b, r0	; 59
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <mutex_create>:
// This Mutex implementation simply disables interrupts to ensure
// mutual exclusion.

Mutex mutex_create() {
	return NULL;
}
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	08 95       	ret

00000856 <mutex_lock>:

void mutex_lock(Mutex mutex) {
	cli();
     856:	f8 94       	cli
}
     858:	08 95       	ret

0000085a <mutex_trylock>:

BOOL mutex_trylock(Mutex mutex) {
	cli();
     85a:	f8 94       	cli
	return TRUE;
}
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	08 95       	ret

00000862 <mutex_release>:

void mutex_release(Mutex mutex) {
	sei();
     862:	78 94       	sei
}
     864:	08 95       	ret

00000866 <initSmoothMotor>:

// This must be used when implementing above function. Implemented in motor_smooth.c
void motor_smooth_tick(PSmoothMotor motor);

void initSmoothMotor(PSmoothMotor motor) {
	motor->mutex = mutex_create();
     866:	fc 01       	movw	r30, r24
     868:	11 8a       	std	Z+17, r1	; 0x11
     86a:	10 8a       	std	Z+16, r1	; 0x10
}
     86c:	08 95       	ret

0000086e <smooth_millisecond_tick>:
	BOOL isRunning = motor_A_running || motor_B_running;
	if (wasRunning != isRunning) smooth_enable_millisecond_tick(isRunning);
}

void smooth_millisecond_tick() {
	if (motor_A_running && smooth_ticks % target_motor_A == 0)
     86e:	80 91 05 02 	lds	r24, 0x0205
     872:	90 91 06 02 	lds	r25, 0x0206
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	81 f0       	breq	.+32     	; 0x89a <smooth_millisecond_tick+0x2c>
     87a:	80 91 ff 01 	lds	r24, 0x01FF
     87e:	90 91 00 02 	lds	r25, 0x0200
     882:	60 91 01 02 	lds	r22, 0x0201
     886:	70 91 02 02 	lds	r23, 0x0202
     88a:	0e 94 09 13 	call	0x2612	; 0x2612 <__udivmodhi4>
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	21 f4       	brne	.+8      	; 0x89a <smooth_millisecond_tick+0x2c>
		motor_smooth_tick(SMOOTH_MOTOR_A);
     892:	8f e8       	ldi	r24, 0x8F	; 143
     894:	93 e0       	ldi	r25, 0x03	; 3
     896:	0e 94 c1 11 	call	0x2382	; 0x2382 <motor_smooth_tick>
	if (motor_B_running && smooth_ticks % target_motor_B == 0)
     89a:	80 91 07 02 	lds	r24, 0x0207
     89e:	90 91 08 02 	lds	r25, 0x0208
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	81 f0       	breq	.+32     	; 0x8c6 <smooth_millisecond_tick+0x58>
     8a6:	80 91 ff 01 	lds	r24, 0x01FF
     8aa:	90 91 00 02 	lds	r25, 0x0200
     8ae:	60 91 03 02 	lds	r22, 0x0203
     8b2:	70 91 04 02 	lds	r23, 0x0204
     8b6:	0e 94 09 13 	call	0x2612	; 0x2612 <__udivmodhi4>
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	21 f4       	brne	.+8      	; 0x8c6 <smooth_millisecond_tick+0x58>
		motor_smooth_tick(SMOOTH_MOTOR_B);
     8be:	8a e0       	ldi	r24, 0x0A	; 10
     8c0:	94 e0       	ldi	r25, 0x04	; 4
     8c2:	0e 94 c1 11 	call	0x2382	; 0x2382 <motor_smooth_tick>
     8c6:	08 95       	ret

000008c8 <smooth_enable_millisecond_tick>:

#include <kernel/kernel_init.h>
#include <kernel/devices/motor_smooth_pair.kernel.h>

void smooth_enable_millisecond_tick(BOOL enabled) {
	if (enabled) enableTimerInterrupt(CLOCKTIMER_B);
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	29 f0       	breq	.+10     	; 0x8d6 <smooth_enable_millisecond_tick+0xe>
     8cc:	88 ec       	ldi	r24, 0xC8	; 200
     8ce:	93 e0       	ldi	r25, 0x03	; 3
     8d0:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <enableTimerInterrupt>
     8d4:	08 95       	ret
	else disableTimerInterrupt(CLOCKTIMER_B);
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	93 e0       	ldi	r25, 0x03	; 3
     8da:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <disableTimerInterrupt>
     8de:	08 95       	ret

000008e0 <motor_smooth_set_call_frequency>:
uint16_t target_motor_B = 0;
BOOL motor_A_running = FALSE;
BOOL motor_B_running = FALSE;

extern void motor_smooth_set_call_frequency(PSmoothMotor motor, uint16_t timesPerSecond) {
	BOOL wasRunning = motor_A_running || motor_B_running;
     8e0:	20 91 05 02 	lds	r18, 0x0205
     8e4:	30 91 06 02 	lds	r19, 0x0206
     8e8:	21 15       	cp	r18, r1
     8ea:	31 05       	cpc	r19, r1
     8ec:	61 f4       	brne	.+24     	; 0x906 <motor_smooth_set_call_frequency+0x26>
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 91 07 02 	lds	r20, 0x0207
     8f6:	50 91 08 02 	lds	r21, 0x0208
     8fa:	41 15       	cp	r20, r1
     8fc:	51 05       	cpc	r21, r1
     8fe:	29 f4       	brne	.+10     	; 0x90a <motor_smooth_set_call_frequency+0x2a>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	02 c0       	rjmp	.+4      	; 0x90a <motor_smooth_set_call_frequency+0x2a>
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	30 e0       	ldi	r19, 0x00	; 0
	if (motor == SMOOTH_MOTOR_A) {
     90a:	43 e0       	ldi	r20, 0x03	; 3
     90c:	8f 38       	cpi	r24, 0x8F	; 143
     90e:	94 07       	cpc	r25, r20
     910:	b1 f4       	brne	.+44     	; 0x93e <motor_smooth_set_call_frequency+0x5e>
		motor_A_running = timesPerSecond != 0;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	11 f4       	brne	.+4      	; 0x920 <motor_smooth_set_call_frequency+0x40>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 06 02 	sts	0x0206, r25
     924:	80 93 05 02 	sts	0x0205, r24
		target_motor_A = motor_A_running ? timesPerSecond : SMOOTH_TICK_FREQ / timesPerSecond;
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	21 f4       	brne	.+8      	; 0x934 <motor_smooth_set_call_frequency+0x54>
     92c:	88 ee       	ldi	r24, 0xE8	; 232
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	0e 94 09 13 	call	0x2612	; 0x2612 <__udivmodhi4>
     934:	70 93 02 02 	sts	0x0202, r23
     938:	60 93 01 02 	sts	0x0201, r22
     93c:	19 c0       	rjmp	.+50     	; 0x970 <motor_smooth_set_call_frequency+0x90>
	} else if (motor == SMOOTH_MOTOR_B) {
     93e:	44 e0       	ldi	r20, 0x04	; 4
     940:	8a 30       	cpi	r24, 0x0A	; 10
     942:	94 07       	cpc	r25, r20
     944:	71 f5       	brne	.+92     	; 0x9a2 <motor_smooth_set_call_frequency+0xc2>
		motor_B_running = timesPerSecond != 0;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	61 15       	cp	r22, r1
     94c:	71 05       	cpc	r23, r1
     94e:	11 f4       	brne	.+4      	; 0x954 <motor_smooth_set_call_frequency+0x74>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 08 02 	sts	0x0208, r25
     958:	80 93 07 02 	sts	0x0207, r24
		target_motor_B = motor_B_running ? timesPerSecond : SMOOTH_TICK_FREQ / timesPerSecond;
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	21 f4       	brne	.+8      	; 0x968 <motor_smooth_set_call_frequency+0x88>
     960:	88 ee       	ldi	r24, 0xE8	; 232
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0e 94 09 13 	call	0x2612	; 0x2612 <__udivmodhi4>
     968:	70 93 04 02 	sts	0x0204, r23
     96c:	60 93 03 02 	sts	0x0203, r22
	} else {
		return;
	}
	BOOL isRunning = motor_A_running || motor_B_running;
     970:	80 91 05 02 	lds	r24, 0x0205
     974:	90 91 06 02 	lds	r25, 0x0206
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	61 f4       	brne	.+24     	; 0x994 <motor_smooth_set_call_frequency+0xb4>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	40 91 07 02 	lds	r20, 0x0207
     984:	50 91 08 02 	lds	r21, 0x0208
     988:	41 15       	cp	r20, r1
     98a:	51 05       	cpc	r21, r1
     98c:	29 f4       	brne	.+10     	; 0x998 <motor_smooth_set_call_frequency+0xb8>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <motor_smooth_set_call_frequency+0xb8>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
	if (wasRunning != isRunning) smooth_enable_millisecond_tick(isRunning);
     998:	28 17       	cp	r18, r24
     99a:	39 07       	cpc	r19, r25
     99c:	11 f0       	breq	.+4      	; 0x9a2 <motor_smooth_set_call_frequency+0xc2>
     99e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <smooth_enable_millisecond_tick>
     9a2:	08 95       	ret

000009a4 <__vector_33>:
}

ISR(CLOCKISR_B) {
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	0b b6       	in	r0, 0x3b	; 59
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	smooth_millisecond_tick();
     9ca:	0e 94 37 04 	call	0x86e	; 0x86e <smooth_millisecond_tick>
}
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	0f 90       	pop	r0
     9e8:	0b be       	out	0x3b, r0	; 59
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <init_smooth_motors>:

void init_smooth_motors() {
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, 40, 3000)
     9f4:	8f ea       	ldi	r24, 0xAF	; 175
     9f6:	93 e0       	ldi	r25, 0x03	; 3
     9f8:	90 93 90 03 	sts	0x0390, r25
     9fc:	80 93 8f 03 	sts	0x038F, r24
     a00:	10 92 92 03 	sts	0x0392, r1
     a04:	10 92 91 03 	sts	0x0391, r1
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 94 03 	sts	0x0394, r25
     a10:	80 93 93 03 	sts	0x0393, r24
     a14:	10 92 96 03 	sts	0x0396, r1
     a18:	10 92 95 03 	sts	0x0395, r1
     a1c:	90 93 98 03 	sts	0x0398, r25
     a20:	80 93 97 03 	sts	0x0397, r24
     a24:	10 92 9a 03 	sts	0x039A, r1
     a28:	10 92 99 03 	sts	0x0399, r1
     a2c:	48 e2       	ldi	r20, 0x28	; 40
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	50 93 9c 03 	sts	0x039C, r21
     a34:	40 93 9b 03 	sts	0x039B, r20
     a38:	28 eb       	ldi	r18, 0xB8	; 184
     a3a:	3b e0       	ldi	r19, 0x0B	; 11
     a3c:	30 93 9e 03 	sts	0x039E, r19
     a40:	20 93 9d 03 	sts	0x039D, r18
     a44:	10 92 a0 03 	sts	0x03A0, r1
     a48:	10 92 9f 03 	sts	0x039F, r1
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, 40, 3000)
     a4c:	6d e1       	ldi	r22, 0x1D	; 29
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	70 93 0b 04 	sts	0x040B, r23
     a54:	60 93 0a 04 	sts	0x040A, r22
     a58:	10 92 0d 04 	sts	0x040D, r1
     a5c:	10 92 0c 04 	sts	0x040C, r1
     a60:	90 93 0f 04 	sts	0x040F, r25
     a64:	80 93 0e 04 	sts	0x040E, r24
     a68:	10 92 11 04 	sts	0x0411, r1
     a6c:	10 92 10 04 	sts	0x0410, r1
     a70:	90 93 13 04 	sts	0x0413, r25
     a74:	80 93 12 04 	sts	0x0412, r24
     a78:	10 92 15 04 	sts	0x0415, r1
     a7c:	10 92 14 04 	sts	0x0414, r1
     a80:	50 93 17 04 	sts	0x0417, r21
     a84:	40 93 16 04 	sts	0x0416, r20
     a88:	30 93 19 04 	sts	0x0419, r19
     a8c:	20 93 18 04 	sts	0x0418, r18
     a90:	10 92 1b 04 	sts	0x041B, r1
     a94:	10 92 1a 04 	sts	0x041A, r1
}
     a98:	08 95       	ret

00000a9a <twi_handleMasterRequest>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer);
	byte twi_defaultSlaveBufferData[TWI_Buffer_Size];
	TWIBuffer twi_defaultSlaveBuffer = { twi_defaultSlaveBufferData, TWI_Buffer_Size };
#else
	// Define empty functions
	TWIBuffer twi_handleMasterRequest() { return (TWIBuffer) { 0 }; }
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	08 95       	ret

00000aa4 <twi_handleMasterTransmission>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
     aa4:	08 95       	ret

00000aa6 <twi_unexpectedCondition>:
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() {}
     aa6:	08 95       	ret

00000aa8 <init_twi>:
TWIError twi_error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     aa8:	85 e0       	ldi	r24, 0x05	; 5
     aaa:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     ab4:	84 e6       	ldi	r24, 0x64	; 100
     ab6:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     aba:	10 92 b9 00 	sts	0x00B9, r1
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
     abe:	08 95       	ret

00000ac0 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     ac0:	df 93       	push	r29
     ac2:	cf 93       	push	r28
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	27 97       	sbiw	r28, 0x07	; 7
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     ad4:	80 91 d3 03 	lds	r24, 0x03D3
     ad8:	90 91 d4 03 	lds	r25, 0x03D4
     adc:	83 30       	cpi	r24, 0x03	; 3
     ade:	91 05       	cpc	r25, r1
     ae0:	0c f0       	brlt	.+2      	; 0xae4 <next_twi_operation+0x24>
     ae2:	52 c0       	rjmp	.+164    	; 0xb88 <next_twi_operation+0xc8>
	do {
		current = furtherOperations[nextTwiOperation++];
     ae4:	ae 01       	movw	r20, r28
     ae6:	4f 5f       	subi	r20, 0xFF	; 255
     ae8:	5f 4f       	sbci	r21, 0xFF	; 255
     aea:	80 91 d3 03 	lds	r24, 0x03D3
     aee:	90 91 d4 03 	lds	r25, 0x03D4
     af2:	fc 01       	movw	r30, r24
     af4:	33 e0       	ldi	r19, 0x03	; 3
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	3a 95       	dec	r19
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <next_twi_operation+0x36>
     afe:	e8 1b       	sub	r30, r24
     b00:	f9 0b       	sbc	r31, r25
     b02:	da 01       	movw	r26, r20
     b04:	e1 5e       	subi	r30, 0xE1	; 225
     b06:	fb 4f       	sbci	r31, 0xFB	; 251
     b08:	27 e0       	ldi	r18, 0x07	; 7
     b0a:	01 90       	ld	r0, Z+
     b0c:	0d 92       	st	X+, r0
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	e1 f7       	brne	.-8      	; 0xb0a <next_twi_operation+0x4a>
     b12:	fc 01       	movw	r30, r24
     b14:	23 e0       	ldi	r18, 0x03	; 3
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	2a 95       	dec	r18
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <next_twi_operation+0x56>
     b1e:	e8 1b       	sub	r30, r24
     b20:	f9 0b       	sbc	r31, r25
     b22:	e1 5e       	subi	r30, 0xE1	; 225
     b24:	fb 4f       	sbci	r31, 0xFB	; 251
     b26:	64 81       	ldd	r22, Z+4	; 0x04
     b28:	25 81       	ldd	r18, Z+5	; 0x05
     b2a:	36 81       	ldd	r19, Z+6	; 0x06
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	90 93 d4 03 	sts	0x03D4, r25
     b32:	80 93 d3 03 	sts	0x03D3, r24
		if (current.operationMode != TWI_IllegalOperation) break;
     b36:	21 15       	cp	r18, r1
     b38:	31 05       	cpc	r19, r1
     b3a:	21 f0       	breq	.+8      	; 0xb44 <next_twi_operation+0x84>
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	91 05       	cpc	r25, r1
     b40:	2c f0       	brlt	.+10     	; 0xb4c <next_twi_operation+0x8c>
     b42:	22 c0       	rjmp	.+68     	; 0xb88 <next_twi_operation+0xc8>
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
     b44:	83 30       	cpi	r24, 0x03	; 3
     b46:	91 05       	cpc	r25, r1
     b48:	84 f2       	brlt	.-96     	; 0xaea <next_twi_operation+0x2a>
     b4a:	1e c0       	rjmp	.+60     	; 0xb88 <next_twi_operation+0xc8>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	// Delete or set the LSB, which describes sla+w or sla+r (reading or writing
	// slave address)
	if (current.operationMode == TWI_Send) {
     b4c:	22 30       	cpi	r18, 0x02	; 2
     b4e:	31 05       	cpc	r19, r1
     b50:	11 f4       	brne	.+4      	; 0xb56 <next_twi_operation+0x96>
		twi_address.address = current.device.address & ~_BV(0);
     b52:	6e 7f       	andi	r22, 0xFE	; 254
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <next_twi_operation+0x9e>
	} else if (current.operationMode == TWI_Receive) {
     b56:	21 30       	cpi	r18, 0x01	; 1
     b58:	31 05       	cpc	r19, r1
     b5a:	19 f4       	brne	.+6      	; 0xb62 <next_twi_operation+0xa2>
		twi_address.address = current.device.address | _BV(0);
     b5c:	61 60       	ori	r22, 0x01	; 1
     b5e:	60 93 0a 02 	sts	0x020A, r22
	}
	alreadyHandled = 0;
     b62:	10 92 83 03 	sts	0x0383, r1
     b66:	10 92 82 03 	sts	0x0382, r1
	twi_buffer = current.buffer;
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	ab 81       	ldd	r26, Y+3	; 0x03
     b70:	bc 81       	ldd	r27, Y+4	; 0x04
     b72:	80 93 da 03 	sts	0x03DA, r24
     b76:	90 93 db 03 	sts	0x03DB, r25
     b7a:	a0 93 dc 03 	sts	0x03DC, r26
     b7e:	b0 93 dd 03 	sts	0x03DD, r27
	return TRUE;
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <next_twi_operation+0xcc>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     b8c:	c9 01       	movw	r24, r18
     b8e:	27 96       	adiw	r28, 0x07	; 7
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (!next_twi_operation()) {
     ba0:	0e 94 60 05 	call	0xac0	; 0xac0 <next_twi_operation>
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	19 f4       	brne	.+6      	; 0xbae <twi_stop_or_next+0xe>
		twi_stop();
     ba8:	0e 94 8b 00 	call	0x116	; 0x116 <twi_stop>
     bac:	08 95       	ret
	} else {
		// Next operation, without releasing the bus. Repeated START condition!
		twi_start();
     bae:	85 ea       	ldi	r24, 0xA5	; 165
     bb0:	80 93 bc 00 	sts	0x00BC, r24
     bb4:	08 95       	ret

00000bb6 <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	twi_error = TWI_No_Error;
     bb6:	10 92 85 03 	sts	0x0385, r1
     bba:	10 92 84 03 	sts	0x0384, r1
	twi_running = TRUE;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	90 93 e2 03 	sts	0x03E2, r25
     bc6:	80 93 e1 03 	sts	0x03E1, r24
	nextTwiOperation = 0;
     bca:	10 92 d4 03 	sts	0x03D4, r1
     bce:	10 92 d3 03 	sts	0x03D3, r1
	if (next_twi_operation()) {
     bd2:	0e 94 60 05 	call	0xac0	; 0xac0 <next_twi_operation>
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	19 f0       	breq	.+6      	; 0xbe0 <twi_start_master_operation+0x2a>
		twi_start();
     bda:	85 ea       	ldi	r24, 0xA5	; 165
     bdc:	80 93 bc 00 	sts	0x00BC, r24
     be0:	08 95       	ret

00000be2 <__vector_26>:

static inline void twi_read_byte() {
	twi_buffer.data[alreadyHandled++] = TWDR;
}

ISR(TWI_vect) {
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	0b b6       	in	r0, 0x3b	; 59
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
	switch(TW_STATUS) {
     c08:	80 91 b9 00 	lds	r24, 0x00B9
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	88 7f       	andi	r24, 0xF8	; 248
     c10:	90 70       	andi	r25, 0x00	; 0
     c12:	80 33       	cpi	r24, 0x30	; 48
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <__vector_26+0x38>
     c18:	69 c0       	rjmp	.+210    	; 0xcec <__vector_26+0x10a>
     c1a:	81 33       	cpi	r24, 0x31	; 49
     c1c:	91 05       	cpc	r25, r1
     c1e:	d4 f4       	brge	.+52     	; 0xc54 <__vector_26+0x72>
     c20:	80 31       	cpi	r24, 0x10	; 16
     c22:	91 05       	cpc	r25, r1
     c24:	99 f1       	breq	.+102    	; 0xc8c <__vector_26+0xaa>
     c26:	81 31       	cpi	r24, 0x11	; 17
     c28:	91 05       	cpc	r25, r1
     c2a:	44 f4       	brge	.+16     	; 0xc3c <__vector_26+0x5a>
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__vector_26+0x50>
     c30:	76 c0       	rjmp	.+236    	; 0xd1e <__vector_26+0x13c>
     c32:	88 30       	cpi	r24, 0x08	; 8
     c34:	91 05       	cpc	r25, r1
     c36:	09 f0       	breq	.+2      	; 0xc3a <__vector_26+0x58>
     c38:	75 c0       	rjmp	.+234    	; 0xd24 <__vector_26+0x142>
     c3a:	28 c0       	rjmp	.+80     	; 0xc8c <__vector_26+0xaa>
     c3c:	80 32       	cpi	r24, 0x20	; 32
     c3e:	91 05       	cpc	r25, r1
     c40:	09 f4       	brne	.+2      	; 0xc44 <__vector_26+0x62>
     c42:	5c c0       	rjmp	.+184    	; 0xcfc <__vector_26+0x11a>
     c44:	88 32       	cpi	r24, 0x28	; 40
     c46:	91 05       	cpc	r25, r1
     c48:	a1 f1       	breq	.+104    	; 0xcb2 <__vector_26+0xd0>
     c4a:	88 31       	cpi	r24, 0x18	; 24
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__vector_26+0x70>
     c50:	69 c0       	rjmp	.+210    	; 0xd24 <__vector_26+0x142>
     c52:	2f c0       	rjmp	.+94     	; 0xcb2 <__vector_26+0xd0>
     c54:	88 34       	cpi	r24, 0x48	; 72
     c56:	91 05       	cpc	r25, r1
     c58:	09 f4       	brne	.+2      	; 0xc5c <__vector_26+0x7a>
     c5a:	50 c0       	rjmp	.+160    	; 0xcfc <__vector_26+0x11a>
     c5c:	89 34       	cpi	r24, 0x49	; 73
     c5e:	91 05       	cpc	r25, r1
     c60:	44 f4       	brge	.+16     	; 0xc72 <__vector_26+0x90>
     c62:	88 33       	cpi	r24, 0x38	; 56
     c64:	91 05       	cpc	r25, r1
     c66:	b9 f0       	breq	.+46     	; 0xc96 <__vector_26+0xb4>
     c68:	80 34       	cpi	r24, 0x40	; 64
     c6a:	91 05       	cpc	r25, r1
     c6c:	09 f0       	breq	.+2      	; 0xc70 <__vector_26+0x8e>
     c6e:	5a c0       	rjmp	.+180    	; 0xd24 <__vector_26+0x142>
     c70:	42 c0       	rjmp	.+132    	; 0xcf6 <__vector_26+0x114>
     c72:	88 35       	cpi	r24, 0x58	; 88
     c74:	91 05       	cpc	r25, r1
     c76:	09 f4       	brne	.+2      	; 0xc7a <__vector_26+0x98>
     c78:	4a c0       	rjmp	.+148    	; 0xd0e <__vector_26+0x12c>
     c7a:	88 3f       	cpi	r24, 0xF8	; 248
     c7c:	91 05       	cpc	r25, r1
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__vector_26+0xa0>
     c80:	4b c0       	rjmp	.+150    	; 0xd18 <__vector_26+0x136>
     c82:	80 35       	cpi	r24, 0x50	; 80
     c84:	91 05       	cpc	r25, r1
     c86:	09 f0       	breq	.+2      	; 0xc8a <__vector_26+0xa8>
     c88:	4d c0       	rjmp	.+154    	; 0xd24 <__vector_26+0x142>
     c8a:	33 c0       	rjmp	.+102    	; 0xcf2 <__vector_26+0x110>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     c8c:	80 91 0a 02 	lds	r24, 0x020A
     c90:	80 93 bb 00 	sts	0x00BB, r24
     c94:	27 c0       	rjmp	.+78     	; 0xce4 <__vector_26+0x102>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			twi_error = TWI_Arbitration_Lost;
     c96:	85 e0       	ldi	r24, 0x05	; 5
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 85 03 	sts	0x0385, r25
     c9e:	80 93 84 03 	sts	0x0384, r24
static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base;
     ca2:	85 e8       	ldi	r24, 0x85	; 133
     ca4:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
     ca8:	10 92 e2 03 	sts	0x03E2, r1
     cac:	10 92 e1 03 	sts	0x03E1, r1
     cb0:	41 c0       	rjmp	.+130    	; 0xd34 <__vector_26+0x152>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     cb2:	80 91 82 03 	lds	r24, 0x0382
     cb6:	90 91 83 03 	lds	r25, 0x0383
     cba:	20 91 dc 03 	lds	r18, 0x03DC
     cbe:	30 91 dd 03 	lds	r19, 0x03DD
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	28 f5       	brcc	.+74     	; 0xd12 <__vector_26+0x130>
				twi_send(twi_buffer.data[alreadyHandled++]);
     cc8:	e0 91 da 03 	lds	r30, 0x03DA
     ccc:	f0 91 db 03 	lds	r31, 0x03DB
     cd0:	e8 0f       	add	r30, r24
     cd2:	f9 1f       	adc	r31, r25
     cd4:	20 81       	ld	r18, Z
     cd6:	20 93 bb 00 	sts	0x00BB, r18
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	90 93 83 03 	sts	0x0383, r25
     ce0:	80 93 82 03 	sts	0x0382, r24
     ce4:	85 e8       	ldi	r24, 0x85	; 133
     ce6:	80 93 bc 00 	sts	0x00BC, r24
     cea:	24 c0       	rjmp	.+72     	; 0xd34 <__vector_26+0x152>
		case TW_MT_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			twi_error = TWI_Master_TooMuchDataTransmitted;
     cec:	86 e0       	ldi	r24, 0x06	; 6
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <__vector_26+0x11e>
// Master Receiver
		case TW_MR_SLA_ACK:
			twi_ack_receive();
			break;
		case TW_MR_DATA_ACK:
			twi_read_byte();
     cf2:	0e 94 a5 00 	call	0x14a	; 0x14a <twi_read_byte>
			twi_ack_receive();
     cf6:	0e 94 93 00 	call	0x126	; 0x126 <twi_ack_receive>
			break;
     cfa:	1c c0       	rjmp	.+56     	; 0xd34 <__vector_26+0x152>
		case TW_MR_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	90 93 85 03 	sts	0x0385, r25
     d04:	80 93 84 03 	sts	0x0384, r24
			twi_stop();
     d08:	0e 94 8b 00 	call	0x116	; 0x116 <twi_stop>
			break;
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <__vector_26+0x152>
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_read_byte();
     d0e:	0e 94 a5 00 	call	0x14a	; 0x14a <twi_read_byte>
			twi_stop_or_next();
     d12:	0e 94 d0 05 	call	0xba0	; 0xba0 <twi_stop_or_next>
			break;
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <__vector_26+0x152>
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
			break;
#endif
// Misc
		case TW_NO_INFO:
			twi_error = TWI_No_Info_Interrupt;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		case TW_BUS_ERROR:
			twi_error = TWI_Bus_Error;
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		default:
			twi_error = TWI_Illegal_Status;
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	90 93 85 03 	sts	0x0385, r25
     d2c:	80 93 84 03 	sts	0x0384, r24
			twi_unexpectedCondition();
     d30:	0e 94 53 05 	call	0xaa6	; 0xaa6 <twi_unexpectedCondition>
			break;
	}
}
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0b be       	out	0x3b, r0	; 59
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <twiMultipleOperations>:
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     d5a:	1f 93       	push	r17
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	50 e0       	ldi	r21, 0x00	; 0
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d64:	0f c0       	rjmp	.+30     	; 0xd84 <twiMultipleOperations+0x2a>
		furtherOperations[i] = operations[i];
     d66:	da 01       	movw	r26, r20
     d68:	a1 5e       	subi	r26, 0xE1	; 225
     d6a:	bb 4f       	sbci	r27, 0xFB	; 251
     d6c:	fb 01       	movw	r30, r22
     d6e:	e4 0f       	add	r30, r20
     d70:	f5 1f       	adc	r31, r21
     d72:	17 e0       	ldi	r17, 0x07	; 7
     d74:	01 90       	ld	r0, Z+
     d76:	0d 92       	st	X+, r0
     d78:	11 50       	subi	r17, 0x01	; 1
     d7a:	e1 f7       	brne	.-8      	; 0xd74 <twiMultipleOperations+0x1a>
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     d7c:	2f 5f       	subi	r18, 0xFF	; 255
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	49 5f       	subi	r20, 0xF9	; 249
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	28 17       	cp	r18, r24
     d86:	39 07       	cpc	r19, r25
     d88:	5c f0       	brlt	.+22     	; 0xda0 <twiMultipleOperations+0x46>
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     d8a:	f9 01       	movw	r30, r18
     d8c:	43 e0       	ldi	r20, 0x03	; 3
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	4a 95       	dec	r20
     d94:	e1 f7       	brne	.-8      	; 0xd8e <twiMultipleOperations+0x34>
     d96:	e2 1b       	sub	r30, r18
     d98:	f3 0b       	sbc	r31, r19
     d9a:	ec 5d       	subi	r30, 0xDC	; 220
     d9c:	fb 4f       	sbci	r31, 0xFB	; 251
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <twiMultipleOperations+0x58>
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     da0:	23 30       	cpi	r18, 0x03	; 3
     da2:	31 05       	cpc	r19, r1
     da4:	01 f7       	brne	.-64     	; 0xd66 <twiMultipleOperations+0xc>
     da6:	f1 cf       	rjmp	.-30     	; 0xd8a <twiMultipleOperations+0x30>
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i].operationMode = TWI_IllegalOperation;
     da8:	11 82       	std	Z+1, r1	; 0x01
     daa:	10 82       	st	Z, r1
void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
     dac:	2f 5f       	subi	r18, 0xFF	; 255
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	37 96       	adiw	r30, 0x07	; 7
     db2:	23 30       	cpi	r18, 0x03	; 3
     db4:	31 05       	cpc	r19, r1
     db6:	c4 f3       	brlt	.-16     	; 0xda8 <twiMultipleOperations+0x4e>
		furtherOperations[i].operationMode = TWI_IllegalOperation;
	}
	twi_start_master_operation();
     db8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <twi_start_master_operation>
}
     dbc:	1f 91       	pop	r17
     dbe:	08 95       	ret

00000dc0 <twiSendReceive>:
void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
	twiMultipleOperations(1, op);
}

void twiSendReceive(TWIDevice targetDevice, TWIBuffer sendData, TWIBuffer receiveBuffer) {
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	2e 97       	sbiw	r28, 0x0e	; 14
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
	TWIOperation ops[2] = {
     dd8:	fe 01       	movw	r30, r28
     dda:	31 96       	adiw	r30, 0x01	; 1
     ddc:	9e e0       	ldi	r25, 0x0E	; 14
     dde:	df 01       	movw	r26, r30
     de0:	1d 92       	st	X+, r1
     de2:	9a 95       	dec	r25
     de4:	e9 f7       	brne	.-6      	; 0xde0 <twiSendReceive+0x20>
     de6:	49 83       	std	Y+1, r20	; 0x01
     de8:	5a 83       	std	Y+2, r21	; 0x02
     dea:	6b 83       	std	Y+3, r22	; 0x03
     dec:	7c 83       	std	Y+4, r23	; 0x04
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	42 e0       	ldi	r20, 0x02	; 2
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	5f 83       	std	Y+7, r21	; 0x07
     df6:	4e 83       	std	Y+6, r20	; 0x06
     df8:	08 87       	std	Y+8, r16	; 0x08
     dfa:	19 87       	std	Y+9, r17	; 0x09
     dfc:	2a 87       	std	Y+10, r18	; 0x0a
     dfe:	3b 87       	std	Y+11, r19	; 0x0b
     e00:	8c 87       	std	Y+12, r24	; 0x0c
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9e 87       	std	Y+14, r25	; 0x0e
     e08:	8d 87       	std	Y+13, r24	; 0x0d
		(TWIOperation) { sendData, targetDevice, TWI_Send },
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	bf 01       	movw	r22, r30
     e10:	0e 94 ad 06 	call	0xd5a	; 0xd5a <twiMultipleOperations>
}
     e14:	2e 96       	adiw	r28, 0x0e	; 14
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <twiReceive>:
void twiSend(TWIDevice targetDevice, TWIBuffer data) {
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
	twiMultipleOperations(1, op);
}

void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	27 97       	sbiw	r28, 0x07	; 7
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
     e3e:	fe 01       	movw	r30, r28
     e40:	31 96       	adiw	r30, 0x01	; 1
     e42:	97 e0       	ldi	r25, 0x07	; 7
     e44:	df 01       	movw	r26, r30
     e46:	1d 92       	st	X+, r1
     e48:	9a 95       	dec	r25
     e4a:	e9 f7       	brne	.-6      	; 0xe46 <twiReceive+0x1c>
     e4c:	49 83       	std	Y+1, r20	; 0x01
     e4e:	5a 83       	std	Y+2, r21	; 0x02
     e50:	6b 83       	std	Y+3, r22	; 0x03
     e52:	7c 83       	std	Y+4, r23	; 0x04
     e54:	8d 83       	std	Y+5, r24	; 0x05
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9f 83       	std	Y+7, r25	; 0x07
     e5c:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     e5e:	bf 01       	movw	r22, r30
     e60:	0e 94 ad 06 	call	0xd5a	; 0xd5a <twiMultipleOperations>
}
     e64:	27 96       	adiw	r28, 0x07	; 7
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <twiSend>:
			twi_unexpectedCondition();
			break;
	}
}

void twiSend(TWIDevice targetDevice, TWIBuffer data) {
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	27 97       	sbiw	r28, 0x07	; 7
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
     e8a:	fe 01       	movw	r30, r28
     e8c:	31 96       	adiw	r30, 0x01	; 1
     e8e:	97 e0       	ldi	r25, 0x07	; 7
     e90:	df 01       	movw	r26, r30
     e92:	1d 92       	st	X+, r1
     e94:	9a 95       	dec	r25
     e96:	e9 f7       	brne	.-6      	; 0xe92 <twiSend+0x1c>
     e98:	49 83       	std	Y+1, r20	; 0x01
     e9a:	5a 83       	std	Y+2, r21	; 0x02
     e9c:	6b 83       	std	Y+3, r22	; 0x03
     e9e:	7c 83       	std	Y+4, r23	; 0x04
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9f 83       	std	Y+7, r25	; 0x07
     ea8:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	bf 01       	movw	r22, r30
     eb0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <twiMultipleOperations>
}
     eb4:	27 96       	adiw	r28, 0x07	; 7
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <WAIT_FOR_TWI>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ec6:	f8 94       	cli

void WAIT_FOR_TWI() {
	while (1) {
		uint8_t still_running;
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			still_running = twi_running;
     ec8:	80 91 e1 03 	lds	r24, 0x03E1
     ecc:	90 91 e2 03 	lds	r25, 0x03E2
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     ed0:	78 94       	sei
		}
		if (!still_running) break;
     ed2:	88 23       	and	r24, r24
     ed4:	c1 f7       	brne	.-16     	; 0xec6 <WAIT_FOR_TWI>
	}
}
     ed6:	08 95       	ret

00000ed8 <twi_rpc_oneway>:

void twi_rpc_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     ed8:	1f 93       	push	r17
     eda:	18 2f       	mov	r17, r24
     edc:	86 2f       	mov	r24, r22
     ede:	ba 01       	movw	r22, r20
     ee0:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     ee2:	0e 94 b8 00 	call	0x170	; 0x170 <fillSendBuffer>
	twiSend(device, sendBuffer);
     ee6:	40 91 a3 01 	lds	r20, 0x01A3
     eea:	50 91 a4 01 	lds	r21, 0x01A4
     eee:	60 91 a5 01 	lds	r22, 0x01A5
     ef2:	70 91 a6 01 	lds	r23, 0x01A6
     ef6:	81 2f       	mov	r24, r17
     ef8:	0e 94 3b 07 	call	0xe76	; 0xe76 <twiSend>
}
     efc:	1f 91       	pop	r17
     efe:	08 95       	ret

00000f00 <twi_rpc_pseudo_oneway>:

void twi_rpc_pseudo_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	18 2f       	mov	r17, r24
     f06:	86 2f       	mov	r24, r22
     f08:	ba 01       	movw	r22, r20
     f0a:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     f0c:	0e 94 b8 00 	call	0x170	; 0x170 <fillSendBuffer>
	twiSendReceive(device, sendBuffer, (TWIBuffer) { 0, 0 });
     f10:	40 91 a3 01 	lds	r20, 0x01A3
     f14:	50 91 a4 01 	lds	r21, 0x01A4
     f18:	60 91 a5 01 	lds	r22, 0x01A5
     f1c:	70 91 a6 01 	lds	r23, 0x01A6
     f20:	81 2f       	mov	r24, r17
     f22:	00 e0       	ldi	r16, 0x00	; 0
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	98 01       	movw	r18, r16
     f28:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <twiSendReceive>
}
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	08 95       	ret

00000f32 <bgx1_setIllumination>:

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setIllumination, CMD_SetIllumination, uint16_t)
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <bgx1_setIllumination+0x6>
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	9e 01       	movw	r18, r28
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
     f46:	42 e0       	ldi	r20, 0x02	; 2
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	80 91 a2 01 	lds	r24, 0x01A2
     f4e:	63 e4       	ldi	r22, 0x43	; 67
     f50:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
     f54:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <bgx1_termScroll>:
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	9e 01       	movw	r18, r28
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	80 91 a2 01 	lds	r24, 0x01A2
     f7c:	62 e3       	ldi	r22, 0x32	; 50
     f7e:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
     f82:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <bgx1_termGoto_base>:
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <bgx1_termGoto_base+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	9e 01       	movw	r18, r28
     f9e:	2f 5f       	subi	r18, 0xFF	; 255
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	42 e0       	ldi	r20, 0x02	; 2
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	80 91 a2 01 	lds	r24, 0x01A2
     faa:	61 e3       	ldi	r22, 0x31	; 49
     fac:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
     fb0:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <bgx1_termClear>:
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
     fbe:	80 91 a2 01 	lds	r24, 0x01A2
     fc2:	60 e3       	ldi	r22, 0x30	; 48
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
     fce:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
     fd2:	08 95       	ret

00000fd4 <bgx1_selectFont>:
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	9e 01       	movw	r18, r28
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	80 91 a2 01 	lds	r24, 0x01A2
     fee:	65 e1       	ldi	r22, 0x15	; 21
     ff0:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
     ff4:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <bgx1_fillAll>:
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	9e 01       	movw	r18, r28
    100e:	2f 5f       	subi	r18, 0xFF	; 255
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	80 91 a2 01 	lds	r24, 0x01A2
    101a:	62 e1       	ldi	r22, 0x12	; 18
    101c:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
    1020:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <bgx1_mode>:
// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	9e 01       	movw	r18, r28
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	80 91 a2 01 	lds	r24, 0x01A2
    1046:	61 e1       	ldi	r22, 0x11	; 17
    1048:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
    104c:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <bgx1_move_base>:

// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <bgx1_move_base+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	9e 01       	movw	r18, r28
    1068:	2f 5f       	subi	r18, 0xFF	; 255
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	42 e0       	ldi	r20, 0x02	; 2
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	80 91 a2 01 	lds	r24, 0x01A2
    1074:	60 e1       	ldi	r22, 0x10	; 16
    1076:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
    107a:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <bgx1_setStatus>:

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setStatus, CMD_SetStatus, uint8_t)
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	0f 92       	push	r0
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	9e 01       	movw	r18, r28
    1096:	2f 5f       	subi	r18, 0xFF	; 255
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	41 e0       	ldi	r20, 0x01	; 1
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	80 91 a2 01 	lds	r24, 0x01A2
    10a2:	63 e0       	ldi	r22, 0x03	; 3
    10a4:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
    10a8:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <bgx1_reset>:
  
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
    10b4:	80 91 a2 01 	lds	r24, 0x01A2
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	0e 94 80 07 	call	0xf00	; 0xf00 <twi_rpc_pseudo_oneway>
    10c4:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    10c8:	08 95       	ret

000010ca <twi_rpc>:

void twi_rpc(TWIDevice device, byte operation, TWIBuffer parameters, TWIBuffer resultBuffer) {
    10ca:	df 92       	push	r13
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	d8 2e       	mov	r13, r24
    10d6:	86 2f       	mov	r24, r22
    10d8:	ba 01       	movw	r22, r20
    10da:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
    10dc:	0e 94 b8 00 	call	0x170	; 0x170 <fillSendBuffer>
	twiSendReceive(device, sendBuffer, resultBuffer);
    10e0:	40 91 a3 01 	lds	r20, 0x01A3
    10e4:	50 91 a4 01 	lds	r21, 0x01A4
    10e8:	60 91 a5 01 	lds	r22, 0x01A5
    10ec:	70 91 a6 01 	lds	r23, 0x01A6
    10f0:	8d 2d       	mov	r24, r13
    10f2:	98 01       	movw	r18, r16
    10f4:	87 01       	movw	r16, r14
    10f6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <twiSendReceive>
}
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	08 95       	ret

00001106 <bgx1_syncInterface>:
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <bgx1_syncInterface+0xe>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	9e 01       	movw	r18, r28
    111c:	2e 5f       	subi	r18, 0xFE	; 254
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	41 e0       	ldi	r20, 0x01	; 1
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	7e 01       	movw	r14, r28
    1126:	08 94       	sec
    1128:	e1 1c       	adc	r14, r1
    112a:	f1 1c       	adc	r15, r1
    112c:	01 e0       	ldi	r16, 0x01	; 1
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	80 91 a2 01 	lds	r24, 0x01A2
    1134:	62 e4       	ldi	r22, 0x42	; 66
    1136:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    113a:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	08 95       	ret

00001152 <bgx1_getAnalog>:
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <bgx1_getAnalog+0xe>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	9e 01       	movw	r18, r28
    116a:	2d 5f       	subi	r18, 0xFD	; 253
    116c:	3f 4f       	sbci	r19, 0xFF	; 255
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	7e 01       	movw	r14, r28
    1174:	08 94       	sec
    1176:	e1 1c       	adc	r14, r1
    1178:	f1 1c       	adc	r15, r1
    117a:	02 e0       	ldi	r16, 0x02	; 2
    117c:	10 e0       	ldi	r17, 0x00	; 0
    117e:	80 91 a2 01 	lds	r24, 0x01A2
    1182:	61 e4       	ldi	r22, 0x41	; 65
    1184:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    1188:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	08 95       	ret

000011a4 <bgx1_syncPort_base>:
	uint8_t ddr;
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <bgx1_syncPort_base+0xe>
    11b2:	0f 92       	push	r0
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	9b 83       	std	Y+3, r25	; 0x03
    11ba:	8a 83       	std	Y+2, r24	; 0x02
    11bc:	9e 01       	movw	r18, r28
    11be:	2e 5f       	subi	r18, 0xFE	; 254
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	42 e0       	ldi	r20, 0x02	; 2
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	7e 01       	movw	r14, r28
    11c8:	08 94       	sec
    11ca:	e1 1c       	adc	r14, r1
    11cc:	f1 1c       	adc	r15, r1
    11ce:	01 e0       	ldi	r16, 0x01	; 1
    11d0:	10 e0       	ldi	r17, 0x00	; 0
    11d2:	80 91 a2 01 	lds	r24, 0x01A2
    11d6:	60 e4       	ldi	r22, 0x40	; 64
    11d8:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    11dc:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	08 95       	ret

000011f6 <bgx1_termPrint_base>:
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)

// The NIBObee lib receives an extra byte when executing this, don't know why
TWI_RPC_FUNCTION_VARARGS(bgx1_termPrint_base, CMD_TermPrint, StringArg, byte)
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	9c 01       	movw	r18, r24
    120a:	ab 01       	movw	r20, r22
    120c:	7e 01       	movw	r14, r28
    120e:	08 94       	sec
    1210:	e1 1c       	adc	r14, r1
    1212:	f1 1c       	adc	r15, r1
    1214:	01 e0       	ldi	r16, 0x01	; 1
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	80 91 a2 01 	lds	r24, 0x01A2
    121c:	63 e3       	ldi	r22, 0x33	; 51
    121e:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    1222:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	0f 90       	pop	r0
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	08 95       	ret

00001238 <bgx1_lineTo_base>:
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <bgx1_lineTo_base+0xe>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <bgx1_lineTo_base+0x10>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	9e 01       	movw	r18, r28
    1252:	2d 5f       	subi	r18, 0xFD	; 253
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	42 e0       	ldi	r20, 0x02	; 2
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	7e 01       	movw	r14, r28
    125c:	08 94       	sec
    125e:	e1 1c       	adc	r14, r1
    1260:	f1 1c       	adc	r15, r1
    1262:	02 e0       	ldi	r16, 0x02	; 2
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	80 91 a2 01 	lds	r24, 0x01A2
    126a:	6b e1       	ldi	r22, 0x1B	; 27
    126c:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    1270:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	08 95       	ret

0000128e <bgx1_embeddedImage>:
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <bgx1_embeddedImage+0xe>
    129c:	0f 92       	push	r0
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	9e 01       	movw	r18, r28
    12a6:	2d 5f       	subi	r18, 0xFD	; 253
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	41 e0       	ldi	r20, 0x01	; 1
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	7e 01       	movw	r14, r28
    12b0:	08 94       	sec
    12b2:	e1 1c       	adc	r14, r1
    12b4:	f1 1c       	adc	r15, r1
    12b6:	02 e0       	ldi	r16, 0x02	; 2
    12b8:	10 e0       	ldi	r17, 0x00	; 0
    12ba:	80 91 a2 01 	lds	r24, 0x01A2
    12be:	6a e1       	ldi	r22, 0x1A	; 26
    12c0:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    12c4:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	08 95       	ret

000012e0 <bgx1_drawBitmap_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <bgx1_drawBitmap_base+0xe>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9c 01       	movw	r18, r24
    12f4:	ab 01       	movw	r20, r22
    12f6:	7e 01       	movw	r14, r28
    12f8:	08 94       	sec
    12fa:	e1 1c       	adc	r14, r1
    12fc:	f1 1c       	adc	r15, r1
    12fe:	02 e0       	ldi	r16, 0x02	; 2
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	80 91 a2 01 	lds	r24, 0x01A2
    1306:	69 e1       	ldi	r22, 0x19	; 25
    1308:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    130c:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	08 95       	ret

00001326 <bgx1_box_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <bgx1_box_base+0xe>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <bgx1_box_base+0x10>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	9e 01       	movw	r18, r28
    1340:	2d 5f       	subi	r18, 0xFD	; 253
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	42 e0       	ldi	r20, 0x02	; 2
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	7e 01       	movw	r14, r28
    134a:	08 94       	sec
    134c:	e1 1c       	adc	r14, r1
    134e:	f1 1c       	adc	r15, r1
    1350:	02 e0       	ldi	r16, 0x02	; 2
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	80 91 a2 01 	lds	r24, 0x01A2
    1358:	68 e1       	ldi	r22, 0x18	; 24
    135a:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    135e:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	9a 81       	ldd	r25, Y+2	; 0x02
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <bgx1_vLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <bgx1_vLine+0xe>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	8b 83       	std	Y+3, r24	; 0x03
    1392:	9e 01       	movw	r18, r28
    1394:	2d 5f       	subi	r18, 0xFD	; 253
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	41 e0       	ldi	r20, 0x01	; 1
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	7e 01       	movw	r14, r28
    139e:	08 94       	sec
    13a0:	e1 1c       	adc	r14, r1
    13a2:	f1 1c       	adc	r15, r1
    13a4:	02 e0       	ldi	r16, 0x02	; 2
    13a6:	10 e0       	ldi	r17, 0x00	; 0
    13a8:	80 91 a2 01 	lds	r24, 0x01A2
    13ac:	67 e1       	ldi	r22, 0x17	; 23
    13ae:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    13b2:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	08 95       	ret

000013ce <bgx1_hLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	00 d0       	rcall	.+0      	; 0x13dc <bgx1_hLine+0xe>
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8b 83       	std	Y+3, r24	; 0x03
    13e4:	9e 01       	movw	r18, r28
    13e6:	2d 5f       	subi	r18, 0xFD	; 253
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	7e 01       	movw	r14, r28
    13f0:	08 94       	sec
    13f2:	e1 1c       	adc	r14, r1
    13f4:	f1 1c       	adc	r15, r1
    13f6:	02 e0       	ldi	r16, 0x02	; 2
    13f8:	10 e0       	ldi	r17, 0x00	; 0
    13fa:	80 91 a2 01 	lds	r24, 0x01A2
    13fe:	66 e1       	ldi	r22, 0x16	; 22
    1400:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    1404:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	9a 81       	ldd	r25, Y+2	; 0x02
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	08 95       	ret

00001420 <bgx1_textWidth_base>:
// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	9c 01       	movw	r18, r24
    1434:	ab 01       	movw	r20, r22
    1436:	7e 01       	movw	r14, r28
    1438:	08 94       	sec
    143a:	e1 1c       	adc	r14, r1
    143c:	f1 1c       	adc	r15, r1
    143e:	01 e0       	ldi	r16, 0x01	; 1
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	80 91 a2 01 	lds	r24, 0x01A2
    1446:	64 e1       	ldi	r22, 0x14	; 20
    1448:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    144c:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	08 95       	ret

00001462 <bgx1_print_base>:

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <bgx1_print_base+0xe>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	9c 01       	movw	r18, r24
    1476:	ab 01       	movw	r20, r22
    1478:	7e 01       	movw	r14, r28
    147a:	08 94       	sec
    147c:	e1 1c       	adc	r14, r1
    147e:	f1 1c       	adc	r15, r1
    1480:	02 e0       	ldi	r16, 0x02	; 2
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	80 91 a2 01 	lds	r24, 0x01A2
    1488:	63 e1       	ldi	r22, 0x13	; 19
    148a:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    148e:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	08 95       	ret

000014a8 <bgx1_getStatus>:
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	7e 01       	movw	r14, r28
    14bc:	08 94       	sec
    14be:	e1 1c       	adc	r14, r1
    14c0:	f1 1c       	adc	r15, r1
    14c2:	01 e0       	ldi	r16, 0x01	; 1
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	80 91 a2 01 	lds	r24, 0x01A2
    14ca:	62 e0       	ldi	r22, 0x02	; 2
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    14d6:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	08 95       	ret

000014ec <bgx1_getVersion>:
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <bgx1_getVersion+0xe>
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	7e 01       	movw	r14, r28
    1500:	08 94       	sec
    1502:	e1 1c       	adc	r14, r1
    1504:	f1 1c       	adc	r15, r1
    1506:	02 e0       	ldi	r16, 0x02	; 2
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	80 91 a2 01 	lds	r24, 0x01A2
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	a9 01       	movw	r20, r18
    1516:	0e 94 65 08 	call	0x10ca	; 0x10ca <twi_rpc>
    151a:	0e 94 63 07 	call	0xec6	; 0xec6 <WAIT_FOR_TWI>
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	08 95       	ret

00001534 <before_timer>:
#define _BASE_AFTER_KERNEL_

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
    1534:	08 95       	ret

00001536 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
    1536:	80 b7       	in	r24, 0x30	; 48
    1538:	80 68       	ori	r24, 0x80	; 128
    153a:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
    153c:	e4 e6       	ldi	r30, 0x64	; 100
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	80 66       	ori	r24, 0x60	; 96
    1544:	80 83       	st	Z, r24
	// BOD - TODO configure?
	
	// Final initialization-sequence.
	// AFTER other modules modified __default_stack_size and __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
    1546:	0e 94 9a 0a 	call	0x1534	; 0x1534 <before_timer>
	enableTimerInterrupt(CLOCKTIMER_A);
    154a:	8a e3       	ldi	r24, 0x3A	; 58
    154c:	93 e0       	ldi	r25, 0x03	; 3
    154e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <enableTimerInterrupt>
	sei();
    1552:	78 94       	sei
}
    1554:	08 95       	ret

00001556 <bgx1_print>:
// ==
// Functions for normal RAM arguments
// ==

Point bgx1_print(char *argument) {
	return bgx1_print_base(argument, strlen(argument));
    1556:	dc 01       	movw	r26, r24
    1558:	0d 90       	ld	r0, X+
    155a:	00 20       	and	r0, r0
    155c:	e9 f7       	brne	.-6      	; 0x1558 <bgx1_print+0x2>
    155e:	bd 01       	movw	r22, r26
    1560:	61 50       	subi	r22, 0x01	; 1
    1562:	70 40       	sbci	r23, 0x00	; 0
    1564:	68 1b       	sub	r22, r24
    1566:	79 0b       	sbc	r23, r25
    1568:	0e 94 31 0a 	call	0x1462	; 0x1462 <bgx1_print_base>
}
    156c:	08 95       	ret

0000156e <bgx1_textWidth>:

uint8_t bgx1_textWidth(char *argument) {
	return bgx1_textWidth_base(argument, strlen(argument));
    156e:	dc 01       	movw	r26, r24
    1570:	0d 90       	ld	r0, X+
    1572:	00 20       	and	r0, r0
    1574:	e9 f7       	brne	.-6      	; 0x1570 <bgx1_textWidth+0x2>
    1576:	bd 01       	movw	r22, r26
    1578:	61 50       	subi	r22, 0x01	; 1
    157a:	70 40       	sbci	r23, 0x00	; 0
    157c:	68 1b       	sub	r22, r24
    157e:	79 0b       	sbc	r23, r25
    1580:	0e 94 10 0a 	call	0x1420	; 0x1420 <bgx1_textWidth_base>
}
    1584:	08 95       	ret

00001586 <bgx1_termPrint>:

byte bgx1_termPrint(char *argument) {
	return bgx1_termPrint_base(argument, strlen(argument));
    1586:	dc 01       	movw	r26, r24
    1588:	0d 90       	ld	r0, X+
    158a:	00 20       	and	r0, r0
    158c:	e9 f7       	brne	.-6      	; 0x1588 <bgx1_termPrint+0x2>
    158e:	bd 01       	movw	r22, r26
    1590:	61 50       	subi	r22, 0x01	; 1
    1592:	70 40       	sbci	r23, 0x00	; 0
    1594:	68 1b       	sub	r22, r24
    1596:	79 0b       	sbc	r23, r25
    1598:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <bgx1_termPrint_base>
}
    159c:	08 95       	ret

0000159e <bgx1_drawTile>:

Point bgx1_drawTile(uint8_t width, uint8_t height, const uint8_t *argument) {
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	f8 2f       	mov	r31, r24
    15b6:	e6 2f       	mov	r30, r22
    15b8:	b5 2e       	mov	r11, r21
	PREPARED_BITMAP_CALL(memcpy)
}
    15ba:	cd b6       	in	r12, 0x3d	; 61
    15bc:	de b6       	in	r13, 0x3e	; 62
byte bgx1_termPrint(char *argument) {
	return bgx1_termPrint_base(argument, strlen(argument));
}

Point bgx1_drawTile(uint8_t width, uint8_t height, const uint8_t *argument) {
	PREPARED_BITMAP_CALL(memcpy)
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	68 e0       	ldi	r22, 0x08	; 8
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
    15ca:	9b 01       	movw	r18, r22
    15cc:	2f 5f       	subi	r18, 0xFF	; 255
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	e2 9f       	mul	r30, r18
    15d2:	20 2d       	mov	r18, r0
    15d4:	11 24       	eor	r1, r1
    15d6:	82 2f       	mov	r24, r18
    15d8:	8e 5f       	subi	r24, 0xFE	; 254
    15da:	e8 2e       	mov	r14, r24
    15dc:	ff 24       	eor	r15, r15
    15de:	8d b7       	in	r24, 0x3d	; 61
    15e0:	9e b7       	in	r25, 0x3e	; 62
    15e2:	8e 19       	sub	r24, r14
    15e4:	9f 09       	sbc	r25, r15
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	9e bf       	out	0x3e, r25	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	8d bf       	out	0x3d, r24	; 61
    15f0:	0d b7       	in	r16, 0x3d	; 61
    15f2:	1e b7       	in	r17, 0x3e	; 62
    15f4:	0f 5f       	subi	r16, 0xFF	; 255
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	ad b7       	in	r26, 0x3d	; 61
    15fa:	be b7       	in	r27, 0x3e	; 62
    15fc:	11 96       	adiw	r26, 0x01	; 1
    15fe:	fc 93       	st	X, r31
    1600:	d8 01       	movw	r26, r16
    1602:	11 96       	adiw	r26, 0x01	; 1
    1604:	ec 93       	st	X, r30
    1606:	ed b7       	in	r30, 0x3d	; 61
    1608:	fe b7       	in	r31, 0x3e	; 62
    160a:	33 96       	adiw	r30, 0x03	; 3
    160c:	cf 01       	movw	r24, r30
    160e:	64 2f       	mov	r22, r20
    1610:	7b 2d       	mov	r23, r11
    1612:	42 2f       	mov	r20, r18
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	0e 94 42 13 	call	0x2684	; 0x2684 <memcpy>
    161a:	c8 01       	movw	r24, r16
    161c:	b7 01       	movw	r22, r14
    161e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <bgx1_drawBitmap_base>
}
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de be       	out	0x3e, r13	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd be       	out	0x3d, r12	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	ff 90       	pop	r15
    1636:	ef 90       	pop	r14
    1638:	df 90       	pop	r13
    163a:	cf 90       	pop	r12
    163c:	bf 90       	pop	r11
    163e:	08 95       	ret

00001640 <bgx1_print_P>:

// ==
// Functions for FLASH arguments
// ==

Point bgx1_print_P(PGM_P argument) {
    1640:	af 92       	push	r10
    1642:	bf 92       	push	r11
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	7c 01       	movw	r14, r24
	FETCH_PROGRAM_STRING();
	return bgx1_print_base(ramString, argSize);
}
    165a:	ad b6       	in	r10, 0x3d	; 61
    165c:	be b6       	in	r11, 0x3e	; 62
// ==
// Functions for FLASH arguments
// ==

Point bgx1_print_P(PGM_P argument) {
	FETCH_PROGRAM_STRING();
    165e:	0e 94 39 13 	call	0x2672	; 0x2672 <strlen_P>
    1662:	c8 2e       	mov	r12, r24
    1664:	dd 24       	eor	r13, r13
    1666:	8d b7       	in	r24, 0x3d	; 61
    1668:	9e b7       	in	r25, 0x3e	; 62
    166a:	8c 19       	sub	r24, r12
    166c:	9d 09       	sbc	r25, r13
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	9e bf       	out	0x3e, r25	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	8d bf       	out	0x3d, r24	; 61
    1678:	0d b7       	in	r16, 0x3d	; 61
    167a:	1e b7       	in	r17, 0x3e	; 62
    167c:	0f 5f       	subi	r16, 0xFF	; 255
    167e:	1f 4f       	sbci	r17, 0xFF	; 255
    1680:	c8 01       	movw	r24, r16
    1682:	b7 01       	movw	r22, r14
    1684:	a6 01       	movw	r20, r12
    1686:	0e 94 30 13 	call	0x2660	; 0x2660 <memcpy_P>
	return bgx1_print_base(ramString, argSize);
    168a:	c8 01       	movw	r24, r16
    168c:	b6 01       	movw	r22, r12
    168e:	0e 94 31 0a 	call	0x1462	; 0x1462 <bgx1_print_base>
}
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	be be       	out	0x3e, r11	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	ad be       	out	0x3d, r10	; 61
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
    16ae:	af 90       	pop	r10
    16b0:	08 95       	ret

000016b2 <bgx1_textWidth_P>:

uint8_t bgx1_textWidth_P(PGM_P argument) {
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	7c 01       	movw	r14, r24
	FETCH_PROGRAM_STRING();
	return bgx1_textWidth_base(ramString, argSize);
}
    16cc:	ad b6       	in	r10, 0x3d	; 61
    16ce:	be b6       	in	r11, 0x3e	; 62
	FETCH_PROGRAM_STRING();
	return bgx1_print_base(ramString, argSize);
}

uint8_t bgx1_textWidth_P(PGM_P argument) {
	FETCH_PROGRAM_STRING();
    16d0:	0e 94 39 13 	call	0x2672	; 0x2672 <strlen_P>
    16d4:	c8 2e       	mov	r12, r24
    16d6:	dd 24       	eor	r13, r13
    16d8:	8d b7       	in	r24, 0x3d	; 61
    16da:	9e b7       	in	r25, 0x3e	; 62
    16dc:	8c 19       	sub	r24, r12
    16de:	9d 09       	sbc	r25, r13
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	9e bf       	out	0x3e, r25	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	8d bf       	out	0x3d, r24	; 61
    16ea:	0d b7       	in	r16, 0x3d	; 61
    16ec:	1e b7       	in	r17, 0x3e	; 62
    16ee:	0f 5f       	subi	r16, 0xFF	; 255
    16f0:	1f 4f       	sbci	r17, 0xFF	; 255
    16f2:	c8 01       	movw	r24, r16
    16f4:	b7 01       	movw	r22, r14
    16f6:	a6 01       	movw	r20, r12
    16f8:	0e 94 30 13 	call	0x2660	; 0x2660 <memcpy_P>
	return bgx1_textWidth_base(ramString, argSize);
    16fc:	c8 01       	movw	r24, r16
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 10 0a 	call	0x1420	; 0x1420 <bgx1_textWidth_base>
}
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	be be       	out	0x3e, r11	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	ad be       	out	0x3d, r10	; 61
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	08 95       	ret

00001724 <bgx1_termPrint_P>:

byte bgx1_termPrint_P(PGM_P argument) {
    1724:	af 92       	push	r10
    1726:	bf 92       	push	r11
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	7c 01       	movw	r14, r24
	FETCH_PROGRAM_STRING();
	return bgx1_termPrint_base(ramString, argSize);
}
    173e:	ad b6       	in	r10, 0x3d	; 61
    1740:	be b6       	in	r11, 0x3e	; 62
	FETCH_PROGRAM_STRING();
	return bgx1_textWidth_base(ramString, argSize);
}

byte bgx1_termPrint_P(PGM_P argument) {
	FETCH_PROGRAM_STRING();
    1742:	0e 94 39 13 	call	0x2672	; 0x2672 <strlen_P>
    1746:	c8 2e       	mov	r12, r24
    1748:	dd 24       	eor	r13, r13
    174a:	8d b7       	in	r24, 0x3d	; 61
    174c:	9e b7       	in	r25, 0x3e	; 62
    174e:	8c 19       	sub	r24, r12
    1750:	9d 09       	sbc	r25, r13
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	9e bf       	out	0x3e, r25	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	8d bf       	out	0x3d, r24	; 61
    175c:	0d b7       	in	r16, 0x3d	; 61
    175e:	1e b7       	in	r17, 0x3e	; 62
    1760:	0f 5f       	subi	r16, 0xFF	; 255
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	c8 01       	movw	r24, r16
    1766:	b7 01       	movw	r22, r14
    1768:	a6 01       	movw	r20, r12
    176a:	0e 94 30 13 	call	0x2660	; 0x2660 <memcpy_P>
	return bgx1_termPrint_base(ramString, argSize);
    176e:	c8 01       	movw	r24, r16
    1770:	b6 01       	movw	r22, r12
    1772:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <bgx1_termPrint_base>
}
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	be be       	out	0x3e, r11	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	ad be       	out	0x3d, r10	; 61
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	ff 90       	pop	r15
    178a:	ef 90       	pop	r14
    178c:	df 90       	pop	r13
    178e:	cf 90       	pop	r12
    1790:	bf 90       	pop	r11
    1792:	af 90       	pop	r10
    1794:	08 95       	ret

00001796 <bgx1_drawTile_P>:

Point bgx1_drawTile_P(uint8_t width, uint8_t height, PGM_P argument) {
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	f8 2f       	mov	r31, r24
    17ac:	e6 2f       	mov	r30, r22
    17ae:	9a 01       	movw	r18, r20
	PREPARED_BITMAP_CALL(memcpy_P)
}
    17b0:	cd b6       	in	r12, 0x3d	; 61
    17b2:	de b6       	in	r13, 0x3e	; 62
	FETCH_PROGRAM_STRING();
	return bgx1_termPrint_base(ramString, argSize);
}

Point bgx1_drawTile_P(uint8_t width, uint8_t height, PGM_P argument) {
	PREPARED_BITMAP_CALL(memcpy_P)
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	68 e0       	ldi	r22, 0x08	; 8
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
    17c0:	ab 01       	movw	r20, r22
    17c2:	4f 5f       	subi	r20, 0xFF	; 255
    17c4:	5f 4f       	sbci	r21, 0xFF	; 255
    17c6:	e4 9f       	mul	r30, r20
    17c8:	40 2d       	mov	r20, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	84 2f       	mov	r24, r20
    17ce:	8e 5f       	subi	r24, 0xFE	; 254
    17d0:	e8 2e       	mov	r14, r24
    17d2:	ff 24       	eor	r15, r15
    17d4:	8d b7       	in	r24, 0x3d	; 61
    17d6:	9e b7       	in	r25, 0x3e	; 62
    17d8:	8e 19       	sub	r24, r14
    17da:	9f 09       	sbc	r25, r15
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	9e bf       	out	0x3e, r25	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	8d bf       	out	0x3d, r24	; 61
    17e6:	0d b7       	in	r16, 0x3d	; 61
    17e8:	1e b7       	in	r17, 0x3e	; 62
    17ea:	0f 5f       	subi	r16, 0xFF	; 255
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	ad b7       	in	r26, 0x3d	; 61
    17f0:	be b7       	in	r27, 0x3e	; 62
    17f2:	11 96       	adiw	r26, 0x01	; 1
    17f4:	fc 93       	st	X, r31
    17f6:	d8 01       	movw	r26, r16
    17f8:	11 96       	adiw	r26, 0x01	; 1
    17fa:	ec 93       	st	X, r30
    17fc:	03 96       	adiw	r24, 0x03	; 3
    17fe:	b9 01       	movw	r22, r18
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	0e 94 30 13 	call	0x2660	; 0x2660 <memcpy_P>
    1806:	c8 01       	movw	r24, r16
    1808:	b7 01       	movw	r22, r14
    180a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <bgx1_drawBitmap_base>
}
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de be       	out	0x3e, r13	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd be       	out	0x3d, r12	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	08 95       	ret

0000182a <bgx1_move>:

// ==
// Convenience functions for 2 parameters
// ==

void bgx1_move(uint8_t x, uint8_t y) {
    182a:	96 2f       	mov	r25, r22
	bgx1_move_base((Point) { x, y });
    182c:	0e 94 2c 08 	call	0x1058	; 0x1058 <bgx1_move_base>
}
    1830:	08 95       	ret

00001832 <bgx1_box>:

Point bgx1_box(uint8_t width, uint8_t height) {
    1832:	96 2f       	mov	r25, r22
	return bgx1_box_base((Rect) { width, height });
    1834:	0e 94 93 09 	call	0x1326	; 0x1326 <bgx1_box_base>
}
    1838:	08 95       	ret

0000183a <bgx1_lineTo>:

void bgx1_lineTo(uint8_t x, uint8_t y) {
    183a:	96 2f       	mov	r25, r22
	bgx1_lineTo_base((Point) { x, y });
    183c:	0e 94 1c 09 	call	0x1238	; 0x1238 <bgx1_lineTo_base>
}
    1840:	08 95       	ret

00001842 <bgx1_termGoto>:

void bgx1_termGoto(uint8_t x, uint8_t y) {
    1842:	96 2f       	mov	r25, r22
	bgx1_termGoto_base((Point) { x, y });
    1844:	0e 94 c7 07 	call	0xf8e	; 0xf8e <bgx1_termGoto_base>
}
    1848:	08 95       	ret

0000184a <bgx1_syncPort>:

uint8_t bgx1_syncPort(uint8_t ddr, uint8_t port) {
    184a:	96 2f       	mov	r25, r22
	return bgx1_syncPort_base((SyncPortArgs) { ddr, port });
    184c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <bgx1_syncPort_base>
}
    1850:	08 95       	ret

00001852 <check_bgx1_operational>:

BOOL check_bgx1_operational() {
	uint16_t version = bgx1_getVersion();
    1852:	0e 94 76 0a 	call	0x14ec	; 0x14ec <bgx1_getVersion>
	return (twi_error == TWI_No_Error) && (version == BGX1_VERSION);
    1856:	20 91 84 03 	lds	r18, 0x0384
    185a:	30 91 85 03 	lds	r19, 0x0385
    185e:	21 15       	cp	r18, r1
    1860:	31 05       	cpc	r19, r1
    1862:	31 f4       	brne	.+12     	; 0x1870 <check_bgx1_operational+0x1e>

uint8_t bgx1_syncPort(uint8_t ddr, uint8_t port) {
	return bgx1_syncPort_base((SyncPortArgs) { ddr, port });
}

BOOL check_bgx1_operational() {
    1864:	21 e0       	ldi	r18, 0x01	; 1
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	94 07       	cpc	r25, r20
    186e:	11 f0       	breq	.+4      	; 0x1874 <check_bgx1_operational+0x22>
	uint16_t version = bgx1_getVersion();
	return (twi_error == TWI_No_Error) && (version == BGX1_VERSION);
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
}
    1874:	c9 01       	movw	r24, r18
    1876:	08 95       	ret

00001878 <bgx1_drawBitmap>:
		if (height)														\
			bgx1_move(newPos.x - row_size, newPos.y);					\
	}																	\
	return newPos;

Point bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bytes[]) {
    1878:	8f 92       	push	r8
    187a:	9f 92       	push	r9
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	d8 2e       	mov	r13, r24
    1898:	f6 2e       	mov	r15, r22
    189a:	25 2f       	mov	r18, r21
	const uint8_t *data = bytes;
	DRAW_BITMAP(bgx1_drawTile)
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	68 e0       	ldi	r22, 0x08	; 8
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
    18a8:	e6 2e       	mov	r14, r22
    18aa:	e3 94       	inc	r14
    18ac:	0e 2d       	mov	r16, r14
    18ae:	10 e0       	ldi	r17, 0x00	; 0
    18b0:	82 e1       	ldi	r24, 0x12	; 18
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	b8 01       	movw	r22, r16
    18b6:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
    18ba:	c6 2e       	mov	r12, r22
			bgx1_move(newPos.x - row_size, newPos.y);					\
	}																	\
	return newPos;

Point bgx1_drawBitmap(uint8_t width, uint8_t height, const uint8_t bytes[]) {
	const uint8_t *data = bytes;
    18bc:	52 2f       	mov	r21, r18
    18be:	4a 01       	movw	r8, r20
	DRAW_BITMAP(bgx1_drawTile)
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	1e c0       	rjmp	.+60     	; 0x1902 <bgx1_drawBitmap+0x8a>
    18c6:	bf 2c       	mov	r11, r15
    18c8:	cf 14       	cp	r12, r15
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <bgx1_drawBitmap+0x56>
    18cc:	bc 2c       	mov	r11, r12
    18ce:	8d 2d       	mov	r24, r13
    18d0:	6b 2d       	mov	r22, r11
    18d2:	a4 01       	movw	r20, r8
    18d4:	0e 94 cf 0a 	call	0x159e	; 0x159e <bgx1_drawTile>
    18d8:	a8 2e       	mov	r10, r24
    18da:	4b 2d       	mov	r20, r11
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	40 9f       	mul	r20, r16
    18e0:	90 01       	movw	r18, r0
    18e2:	41 9f       	mul	r20, r17
    18e4:	30 0d       	add	r19, r0
    18e6:	50 9f       	mul	r21, r16
    18e8:	30 0d       	add	r19, r0
    18ea:	11 24       	eor	r1, r1
    18ec:	82 0e       	add	r8, r18
    18ee:	93 1e       	adc	r9, r19
    18f0:	fb 18       	sub	r15, r11
    18f2:	31 f0       	breq	.+12     	; 0x1900 <bgx1_drawBitmap+0x88>
    18f4:	8e 19       	sub	r24, r14
    18f6:	69 2f       	mov	r22, r25
    18f8:	99 83       	std	Y+1, r25	; 0x01
    18fa:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
    18fe:	99 81       	ldd	r25, Y+1	; 0x01
    1900:	8a 2d       	mov	r24, r10
    1902:	ff 20       	and	r15, r15
    1904:	01 f7       	brne	.-64     	; 0x18c6 <bgx1_drawBitmap+0x4e>
}
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	ff 90       	pop	r15
    1912:	ef 90       	pop	r14
    1914:	df 90       	pop	r13
    1916:	cf 90       	pop	r12
    1918:	bf 90       	pop	r11
    191a:	af 90       	pop	r10
    191c:	9f 90       	pop	r9
    191e:	8f 90       	pop	r8
    1920:	08 95       	ret

00001922 <bgx1_drawBitmap_P>:

Point bgx1_drawBitmap_P(uint8_t width, uint8_t height, PGM_P data) {
    1922:	8f 92       	push	r8
    1924:	9f 92       	push	r9
    1926:	af 92       	push	r10
    1928:	bf 92       	push	r11
    192a:	cf 92       	push	r12
    192c:	df 92       	push	r13
    192e:	ef 92       	push	r14
    1930:	ff 92       	push	r15
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	0f 92       	push	r0
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	e8 2e       	mov	r14, r24
    1942:	f6 2e       	mov	r15, r22
    1944:	4a 01       	movw	r8, r20
	DRAW_BITMAP(bgx1_drawTile_P)
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	21 50       	subi	r18, 0x01	; 1
    194c:	30 40       	sbci	r19, 0x00	; 0
    194e:	c9 01       	movw	r24, r18
    1950:	68 e0       	ldi	r22, 0x08	; 8
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
    1958:	d6 2e       	mov	r13, r22
    195a:	d3 94       	inc	r13
    195c:	0d 2d       	mov	r16, r13
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	82 e1       	ldi	r24, 0x12	; 18
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	b8 01       	movw	r22, r16
    1966:	0e 94 1d 13 	call	0x263a	; 0x263a <__divmodhi4>
    196a:	b6 2e       	mov	r11, r22
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	1e c0       	rjmp	.+60     	; 0x19ae <bgx1_drawBitmap_P+0x8c>
    1972:	cf 2c       	mov	r12, r15
    1974:	bf 14       	cp	r11, r15
    1976:	08 f4       	brcc	.+2      	; 0x197a <bgx1_drawBitmap_P+0x58>
    1978:	cb 2c       	mov	r12, r11
    197a:	8e 2d       	mov	r24, r14
    197c:	6c 2d       	mov	r22, r12
    197e:	a4 01       	movw	r20, r8
    1980:	0e 94 cb 0b 	call	0x1796	; 0x1796 <bgx1_drawTile_P>
    1984:	a8 2e       	mov	r10, r24
    1986:	4c 2d       	mov	r20, r12
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	40 9f       	mul	r20, r16
    198c:	90 01       	movw	r18, r0
    198e:	41 9f       	mul	r20, r17
    1990:	30 0d       	add	r19, r0
    1992:	50 9f       	mul	r21, r16
    1994:	30 0d       	add	r19, r0
    1996:	11 24       	eor	r1, r1
    1998:	82 0e       	add	r8, r18
    199a:	93 1e       	adc	r9, r19
    199c:	fc 18       	sub	r15, r12
    199e:	31 f0       	breq	.+12     	; 0x19ac <bgx1_drawBitmap_P+0x8a>
    19a0:	8d 19       	sub	r24, r13
    19a2:	69 2f       	mov	r22, r25
    19a4:	99 83       	std	Y+1, r25	; 0x01
    19a6:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
    19aa:	99 81       	ldd	r25, Y+1	; 0x01
    19ac:	8a 2d       	mov	r24, r10
    19ae:	ff 20       	and	r15, r15
    19b0:	01 f7       	brne	.-64     	; 0x1972 <bgx1_drawBitmap_P+0x50>
}
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	08 95       	ret

000019ce <plot_smily>:
#define delay(a) _delay_ms(a)

#include "res/smily.xbm"

void plot_smily(uint8_t x, uint8_t y) {
	bgx1_move  (x, y);
    19ce:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
	bgx1_drawBitmap_P(smily_width, smily_height, smily_bits);
    19d2:	80 e1       	ldi	r24, 0x10	; 16
    19d4:	60 e1       	ldi	r22, 0x10	; 16
    19d6:	4c e8       	ldi	r20, 0x8C	; 140
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	0e 94 91 0c 	call	0x1922	; 0x1922 <bgx1_drawBitmap_P>
}
    19de:	08 95       	ret

000019e0 <plot_house>:

void plot_house(uint8_t x, uint8_t y, uint8_t s) {
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	18 2f       	mov	r17, r24
    19ee:	06 2f       	mov	r16, r22
    19f0:	d4 2e       	mov	r13, r20
  bgx1_move  (x+s*0, y+s*7);
    19f2:	87 e0       	ldi	r24, 0x07	; 7
    19f4:	48 9f       	mul	r20, r24
    19f6:	f0 2c       	mov	r15, r0
    19f8:	11 24       	eor	r1, r1
    19fa:	f6 0e       	add	r15, r22
    19fc:	81 2f       	mov	r24, r17
    19fe:	6f 2d       	mov	r22, r15
    1a00:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+s*4, y+s*7);
    1a04:	ed 2c       	mov	r14, r13
    1a06:	ee 0c       	add	r14, r14
    1a08:	ee 0c       	add	r14, r14
    1a0a:	e1 0e       	add	r14, r17
    1a0c:	8e 2d       	mov	r24, r14
    1a0e:	6f 2d       	mov	r22, r15
    1a10:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	94 e3       	ldi	r25, 0x34	; 52
    1a18:	ac e0       	ldi	r26, 0x0C	; 12
    1a1a:	81 50       	subi	r24, 0x01	; 1
    1a1c:	90 40       	sbci	r25, 0x00	; 0
    1a1e:	a0 40       	sbci	r26, 0x00	; 0
    1a20:	e1 f7       	brne	.-8      	; 0x1a1a <plot_house+0x3a>
    1a22:	00 c0       	rjmp	.+0      	; 0x1a24 <plot_house+0x44>
    1a24:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*4, y+s*3);
    1a26:	cd 2c       	mov	r12, r13
    1a28:	cc 0c       	add	r12, r12
    1a2a:	dc 0c       	add	r13, r12
    1a2c:	d0 0e       	add	r13, r16
    1a2e:	8e 2d       	mov	r24, r14
    1a30:	6d 2d       	mov	r22, r13
    1a32:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	94 e3       	ldi	r25, 0x34	; 52
    1a3a:	ac e0       	ldi	r26, 0x0C	; 12
    1a3c:	81 50       	subi	r24, 0x01	; 1
    1a3e:	90 40       	sbci	r25, 0x00	; 0
    1a40:	a0 40       	sbci	r26, 0x00	; 0
    1a42:	e1 f7       	brne	.-8      	; 0x1a3c <plot_house+0x5c>
    1a44:	00 c0       	rjmp	.+0      	; 0x1a46 <plot_house+0x66>
    1a46:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*0, y+s*3);
    1a48:	81 2f       	mov	r24, r17
    1a4a:	6d 2d       	mov	r22, r13
    1a4c:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	94 e3       	ldi	r25, 0x34	; 52
    1a54:	ac e0       	ldi	r26, 0x0C	; 12
    1a56:	81 50       	subi	r24, 0x01	; 1
    1a58:	90 40       	sbci	r25, 0x00	; 0
    1a5a:	a0 40       	sbci	r26, 0x00	; 0
    1a5c:	e1 f7       	brne	.-8      	; 0x1a56 <plot_house+0x76>
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <plot_house+0x80>
    1a60:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*2, y+s*0);
    1a62:	8c 2d       	mov	r24, r12
    1a64:	81 0f       	add	r24, r17
    1a66:	60 2f       	mov	r22, r16
    1a68:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	94 e3       	ldi	r25, 0x34	; 52
    1a70:	ac e0       	ldi	r26, 0x0C	; 12
    1a72:	81 50       	subi	r24, 0x01	; 1
    1a74:	90 40       	sbci	r25, 0x00	; 0
    1a76:	a0 40       	sbci	r26, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <plot_house+0x92>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <plot_house+0x9c>
    1a7c:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*4, y+s*3);
    1a7e:	8e 2d       	mov	r24, r14
    1a80:	6d 2d       	mov	r22, r13
    1a82:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	94 e3       	ldi	r25, 0x34	; 52
    1a8a:	ac e0       	ldi	r26, 0x0C	; 12
    1a8c:	81 50       	subi	r24, 0x01	; 1
    1a8e:	90 40       	sbci	r25, 0x00	; 0
    1a90:	a0 40       	sbci	r26, 0x00	; 0
    1a92:	e1 f7       	brne	.-8      	; 0x1a8c <plot_house+0xac>
    1a94:	00 c0       	rjmp	.+0      	; 0x1a96 <plot_house+0xb6>
    1a96:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*0, y+s*7);
    1a98:	81 2f       	mov	r24, r17
    1a9a:	6f 2d       	mov	r22, r15
    1a9c:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    1aa0:	8f ef       	ldi	r24, 0xFF	; 255
    1aa2:	94 e3       	ldi	r25, 0x34	; 52
    1aa4:	ac e0       	ldi	r26, 0x0C	; 12
    1aa6:	81 50       	subi	r24, 0x01	; 1
    1aa8:	90 40       	sbci	r25, 0x00	; 0
    1aaa:	a0 40       	sbci	r26, 0x00	; 0
    1aac:	e1 f7       	brne	.-8      	; 0x1aa6 <plot_house+0xc6>
    1aae:	00 c0       	rjmp	.+0      	; 0x1ab0 <plot_house+0xd0>
    1ab0:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*0, y+s*3);
    1ab2:	81 2f       	mov	r24, r17
    1ab4:	6d 2d       	mov	r22, r13
    1ab6:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	94 e3       	ldi	r25, 0x34	; 52
    1abe:	ac e0       	ldi	r26, 0x0C	; 12
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	90 40       	sbci	r25, 0x00	; 0
    1ac4:	a0 40       	sbci	r26, 0x00	; 0
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <plot_house+0xe0>
    1ac8:	00 c0       	rjmp	.+0      	; 0x1aca <plot_house+0xea>
    1aca:	00 00       	nop
  delay(200);
  bgx1_lineTo(x+s*4, y+s*7);
    1acc:	8e 2d       	mov	r24, r14
    1ace:	6f 2d       	mov	r22, r15
    1ad0:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
}
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	ff 90       	pop	r15
    1ada:	ef 90       	pop	r14
    1adc:	df 90       	pop	r13
    1ade:	cf 90       	pop	r12
    1ae0:	08 95       	ret

00001ae2 <plot_vLines>:

void plot_vLines(uint8_t x, uint8_t y, uint8_t sx, uint8_t sy) {
    1ae2:	bf 92       	push	r11
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	08 2f       	mov	r16, r24
    1af2:	16 2f       	mov	r17, r22
    1af4:	f4 2e       	mov	r15, r20
    1af6:	e2 2e       	mov	r14, r18
  // down lines
  bgx1_move  (x+sx*0, y+sy*0);
    1af8:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*3, y+sy*1);
    1afc:	bf 2c       	mov	r11, r15
    1afe:	bb 0c       	add	r11, r11
    1b00:	db 2c       	mov	r13, r11
    1b02:	df 0c       	add	r13, r15
    1b04:	d0 0e       	add	r13, r16
    1b06:	e1 0e       	add	r14, r17
    1b08:	8d 2d       	mov	r24, r13
    1b0a:	6e 2d       	mov	r22, r14
    1b0c:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*1, y+sy*0);
    1b10:	cf 2c       	mov	r12, r15
    1b12:	c0 0e       	add	r12, r16
    1b14:	8c 2d       	mov	r24, r12
    1b16:	61 2f       	mov	r22, r17
    1b18:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*1, y+sy*1); 
    1b1c:	8c 2d       	mov	r24, r12
    1b1e:	6e 2d       	mov	r22, r14
    1b20:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*3, y+sy*0);
    1b24:	8d 2d       	mov	r24, r13
    1b26:	61 2f       	mov	r22, r17
    1b28:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*0, y+sy*1);
    1b2c:	80 2f       	mov	r24, r16
    1b2e:	6e 2d       	mov	r22, r14
    1b30:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>

  // up lines
  bgx1_move  (x+sx*5, y+sy*1);
    1b34:	cf 2c       	mov	r12, r15
    1b36:	cc 0c       	add	r12, r12
    1b38:	cc 0c       	add	r12, r12
    1b3a:	fc 0c       	add	r15, r12
    1b3c:	f0 0e       	add	r15, r16
    1b3e:	8f 2d       	mov	r24, r15
    1b40:	6e 2d       	mov	r22, r14
    1b42:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*2, y+sy*0);
    1b46:	db 2c       	mov	r13, r11
    1b48:	d0 0e       	add	r13, r16
    1b4a:	8d 2d       	mov	r24, r13
    1b4c:	61 2f       	mov	r22, r17
    1b4e:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*4, y+sy*1);
    1b52:	0c 0d       	add	r16, r12
    1b54:	80 2f       	mov	r24, r16
    1b56:	6e 2d       	mov	r22, r14
    1b58:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*4, y+sy*0); 
    1b5c:	80 2f       	mov	r24, r16
    1b5e:	61 2f       	mov	r22, r17
    1b60:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*2, y+sy*1);
    1b64:	8d 2d       	mov	r24, r13
    1b66:	6e 2d       	mov	r22, r14
    1b68:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*5, y+sy*0);
    1b6c:	8f 2d       	mov	r24, r15
    1b6e:	61 2f       	mov	r22, r17
    1b70:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  
}
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	df 90       	pop	r13
    1b7e:	cf 90       	pop	r12
    1b80:	bf 90       	pop	r11
    1b82:	08 95       	ret

00001b84 <plot_hLines>:

void plot_hLines(uint8_t x, uint8_t y, uint8_t sx, uint8_t sy) {
    1b84:	bf 92       	push	r11
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	18 2f       	mov	r17, r24
    1b94:	06 2f       	mov	r16, r22
    1b96:	f4 2e       	mov	r15, r20
    1b98:	e2 2e       	mov	r14, r18
  // right lines
  bgx1_move  (x+sx*0, y+sy*0);
    1b9a:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*1, y+sy*3);
    1b9e:	f1 0e       	add	r15, r17
    1ba0:	be 2c       	mov	r11, r14
    1ba2:	bb 0c       	add	r11, r11
    1ba4:	db 2c       	mov	r13, r11
    1ba6:	de 0c       	add	r13, r14
    1ba8:	d0 0e       	add	r13, r16
    1baa:	8f 2d       	mov	r24, r15
    1bac:	6d 2d       	mov	r22, r13
    1bae:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*0, y+sy*1);
    1bb2:	ce 2c       	mov	r12, r14
    1bb4:	c0 0e       	add	r12, r16
    1bb6:	81 2f       	mov	r24, r17
    1bb8:	6c 2d       	mov	r22, r12
    1bba:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*1, y+sy*1); 
    1bbe:	8f 2d       	mov	r24, r15
    1bc0:	6c 2d       	mov	r22, r12
    1bc2:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*0, y+sy*3);
    1bc6:	81 2f       	mov	r24, r17
    1bc8:	6d 2d       	mov	r22, r13
    1bca:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*1, y+sy*0);
    1bce:	8f 2d       	mov	r24, r15
    1bd0:	60 2f       	mov	r22, r16
    1bd2:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>

  // left lines
  bgx1_move  (x+sx*1, y+sy*5);
    1bd6:	ce 2c       	mov	r12, r14
    1bd8:	cc 0c       	add	r12, r12
    1bda:	cc 0c       	add	r12, r12
    1bdc:	ec 0c       	add	r14, r12
    1bde:	e0 0e       	add	r14, r16
    1be0:	8f 2d       	mov	r24, r15
    1be2:	6e 2d       	mov	r22, r14
    1be4:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*0, y+sy*2);
    1be8:	db 2c       	mov	r13, r11
    1bea:	d0 0e       	add	r13, r16
    1bec:	81 2f       	mov	r24, r17
    1bee:	6d 2d       	mov	r22, r13
    1bf0:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*1, y+sy*4);
    1bf4:	0c 0d       	add	r16, r12
    1bf6:	8f 2d       	mov	r24, r15
    1bf8:	60 2f       	mov	r22, r16
    1bfa:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*0, y+sy*4); 
    1bfe:	81 2f       	mov	r24, r17
    1c00:	60 2f       	mov	r22, r16
    1c02:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
  bgx1_move  (x+sx*1, y+sy*2);
    1c06:	8f 2d       	mov	r24, r15
    1c08:	6d 2d       	mov	r22, r13
    1c0a:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
  bgx1_lineTo(x+sx*0, y+sy*5);
    1c0e:	81 2f       	mov	r24, r17
    1c10:	6e 2d       	mov	r22, r14
    1c12:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
    
}
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	bf 90       	pop	r11
    1c24:	08 95       	ret

00001c26 <main>:


int main() {
    1c26:	1f 93       	push	r17
	
	bgx1_move(12, 13);
    1c28:	8c e0       	ldi	r24, 0x0C	; 12
    1c2a:	6d e0       	ldi	r22, 0x0D	; 13
    1c2c:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
	
  bgx1_setStatus(0xff);
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	0e 94 44 08 	call	0x1088	; 0x1088 <bgx1_setStatus>

  //bgx1_reset();
  //bgx1_termClear();
  // Hauptschleife:
  while(1) {
    sei();
    1c36:	78 94       	sei
    1c38:	8f e7       	ldi	r24, 0x7F	; 127
    1c3a:	98 e3       	ldi	r25, 0x38	; 56
    1c3c:	a1 e0       	ldi	r26, 0x01	; 1
    1c3e:	81 50       	subi	r24, 0x01	; 1
    1c40:	90 40       	sbci	r25, 0x00	; 0
    1c42:	a0 40       	sbci	r26, 0x00	; 0
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <main+0x18>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <main+0x22>
    1c48:	00 00       	nop
    delay(20);

    if (bgx1_getStatus()==0xff) {
    1c4a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <bgx1_getStatus>
    1c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c50:	91 f7       	brne	.-28     	; 0x1c36 <main+0x10>
    1c52:	8f e7       	ldi	r24, 0x7F	; 127
    1c54:	9d e8       	ldi	r25, 0x8D	; 141
    1c56:	ab e5       	ldi	r26, 0x5B	; 91
    1c58:	81 50       	subi	r24, 0x01	; 1
    1c5a:	90 40       	sbci	r25, 0x00	; 0
    1c5c:	a0 40       	sbci	r26, 0x00	; 0
    1c5e:	e1 f7       	brne	.-8      	; 0x1c58 <main+0x32>
    1c60:	00 c0       	rjmp	.+0      	; 0x1c62 <main+0x3c>
    1c62:	00 00       	nop
      delay(1500);

      bgx1_reset();
    1c64:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <bgx1_reset>
    1c68:	8f e7       	ldi	r24, 0x7F	; 127
    1c6a:	94 e8       	ldi	r25, 0x84	; 132
    1c6c:	ae e1       	ldi	r26, 0x1E	; 30
    1c6e:	81 50       	subi	r24, 0x01	; 1
    1c70:	90 40       	sbci	r25, 0x00	; 0
    1c72:	a0 40       	sbci	r26, 0x00	; 0
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <main+0x48>
    1c76:	00 c0       	rjmp	.+0      	; 0x1c78 <main+0x52>
    1c78:	00 00       	nop

      delay(500);
      
      plot_house(2, 5, 8);
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	65 e0       	ldi	r22, 0x05	; 5
    1c7e:	48 e0       	ldi	r20, 0x08	; 8
    1c80:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <plot_house>
    1c84:	8f e7       	ldi	r24, 0x7F	; 127
    1c86:	94 e8       	ldi	r25, 0x84	; 132
    1c88:	ae e1       	ldi	r26, 0x1E	; 30
    1c8a:	81 50       	subi	r24, 0x01	; 1
    1c8c:	90 40       	sbci	r25, 0x00	; 0
    1c8e:	a0 40       	sbci	r26, 0x00	; 0
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <main+0x64>
    1c92:	00 c0       	rjmp	.+0      	; 0x1c94 <main+0x6e>
    1c94:	00 00       	nop

      delay(500);

      bgx1_move(39, 1);
    1c96:	87 e2       	ldi	r24, 0x27	; 39
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_box(5, 62);
    1c9e:	85 e0       	ldi	r24, 0x05	; 5
    1ca0:	6e e3       	ldi	r22, 0x3E	; 62
    1ca2:	0e 94 19 0c 	call	0x1832	; 0x1832 <bgx1_box>
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	94 e3       	ldi	r25, 0x34	; 52
    1caa:	ac e0       	ldi	r26, 0x0C	; 12
    1cac:	81 50       	subi	r24, 0x01	; 1
    1cae:	90 40       	sbci	r25, 0x00	; 0
    1cb0:	a0 40       	sbci	r26, 0x00	; 0
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <main+0x86>
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <main+0x90>
    1cb6:	00 00       	nop

      delay(200);
      
      bgx1_move  (48, 0);
    1cb8:	80 e3       	ldi	r24, 0x30	; 48
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_lineTo(48, 29); 
    1cc0:	80 e3       	ldi	r24, 0x30	; 48
    1cc2:	6d e1       	ldi	r22, 0x1D	; 29
    1cc4:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      bgx1_lineTo(77, 29); 
    1cc8:	8d e4       	ldi	r24, 0x4D	; 77
    1cca:	6d e1       	ldi	r22, 0x1D	; 29
    1ccc:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      bgx1_lineTo(77, 0); 
    1cd0:	8d e4       	ldi	r24, 0x4D	; 77
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      bgx1_lineTo(48, 0);     
    1cd8:	80 e3       	ldi	r24, 0x30	; 48
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      plot_vLines(50, 2, 5, 25);
    1ce0:	82 e3       	ldi	r24, 0x32	; 50
    1ce2:	62 e0       	ldi	r22, 0x02	; 2
    1ce4:	45 e0       	ldi	r20, 0x05	; 5
    1ce6:	29 e1       	ldi	r18, 0x19	; 25
    1ce8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <plot_vLines>
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	94 e3       	ldi	r25, 0x34	; 52
    1cf0:	ac e0       	ldi	r26, 0x0C	; 12
    1cf2:	81 50       	subi	r24, 0x01	; 1
    1cf4:	90 40       	sbci	r25, 0x00	; 0
    1cf6:	a0 40       	sbci	r26, 0x00	; 0
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <main+0xcc>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <main+0xd6>
    1cfc:	00 00       	nop

      delay(200);
      
      bgx1_move  (48, 34);
    1cfe:	80 e3       	ldi	r24, 0x30	; 48
    1d00:	62 e2       	ldi	r22, 0x22	; 34
    1d02:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_lineTo(48, 63);
    1d06:	80 e3       	ldi	r24, 0x30	; 48
    1d08:	6f e3       	ldi	r22, 0x3F	; 63
    1d0a:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      bgx1_lineTo(77, 63);
    1d0e:	8d e4       	ldi	r24, 0x4D	; 77
    1d10:	6f e3       	ldi	r22, 0x3F	; 63
    1d12:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      bgx1_lineTo(77, 34);
    1d16:	8d e4       	ldi	r24, 0x4D	; 77
    1d18:	62 e2       	ldi	r22, 0x22	; 34
    1d1a:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      bgx1_lineTo(48, 34);
    1d1e:	80 e3       	ldi	r24, 0x30	; 48
    1d20:	62 e2       	ldi	r22, 0x22	; 34
    1d22:	0e 94 1d 0c 	call	0x183a	; 0x183a <bgx1_lineTo>
      plot_hLines(50, 36, 25, 5);
    1d26:	82 e3       	ldi	r24, 0x32	; 50
    1d28:	64 e2       	ldi	r22, 0x24	; 36
    1d2a:	49 e1       	ldi	r20, 0x19	; 25
    1d2c:	25 e0       	ldi	r18, 0x05	; 5
    1d2e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <plot_hLines>
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	94 e3       	ldi	r25, 0x34	; 52
    1d36:	ac e0       	ldi	r26, 0x0C	; 12
    1d38:	81 50       	subi	r24, 0x01	; 1
    1d3a:	90 40       	sbci	r25, 0x00	; 0
    1d3c:	a0 40       	sbci	r26, 0x00	; 0
    1d3e:	e1 f7       	brne	.-8      	; 0x1d38 <main+0x112>
    1d40:	00 c0       	rjmp	.+0      	; 0x1d42 <main+0x11c>
    1d42:	00 00       	nop

      delay(200);

      bgx1_move(48, 31);
    1d44:	80 e3       	ldi	r24, 0x30	; 48
    1d46:	6f e1       	ldi	r22, 0x1F	; 31
    1d48:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_box(30, 2);
    1d4c:	8e e1       	ldi	r24, 0x1E	; 30
    1d4e:	62 e0       	ldi	r22, 0x02	; 2
    1d50:	0e 94 19 0c 	call	0x1832	; 0x1832 <bgx1_box>
    1d54:	8f e7       	ldi	r24, 0x7F	; 127
    1d56:	94 e8       	ldi	r25, 0x84	; 132
    1d58:	ae e1       	ldi	r26, 0x1E	; 30
    1d5a:	81 50       	subi	r24, 0x01	; 1
    1d5c:	90 40       	sbci	r25, 0x00	; 0
    1d5e:	a0 40       	sbci	r26, 0x00	; 0
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <main+0x134>
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <main+0x13e>
    1d64:	00 00       	nop
      
      delay(500);
      
      bgx1_move(82, 0);
    1d66:	82 e5       	ldi	r24, 0x52	; 82
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_selectFont(0);
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <bgx1_selectFont>
      bgx1_print("Test II");
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	0e 94 ab 0a 	call	0x1556	; 0x1556 <bgx1_print>
      uint8_t w = bgx1_textWidth("Test II");
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	0e 94 b7 0a 	call	0x156e	; 0x156e <bgx1_textWidth>
    1d84:	18 2f       	mov	r17, r24
      bgx1_move(82, 8);
    1d86:	82 e5       	ldi	r24, 0x52	; 82
    1d88:	68 e0       	ldi	r22, 0x08	; 8
    1d8a:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_hLine(w);
    1d8e:	81 2f       	mov	r24, r17
    1d90:	0e 94 e7 09 	call	0x13ce	; 0x13ce <bgx1_hLine>
    1d94:	8f ef       	ldi	r24, 0xFF	; 255
    1d96:	94 e3       	ldi	r25, 0x34	; 52
    1d98:	ac e0       	ldi	r26, 0x0C	; 12
    1d9a:	81 50       	subi	r24, 0x01	; 1
    1d9c:	90 40       	sbci	r25, 0x00	; 0
    1d9e:	a0 40       	sbci	r26, 0x00	; 0
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <main+0x174>
    1da2:	00 c0       	rjmp	.+0      	; 0x1da4 <main+0x17e>
    1da4:	00 00       	nop

      delay(200);
      
      bgx1_move(82, 20);
    1da6:	82 e5       	ldi	r24, 0x52	; 82
    1da8:	64 e1       	ldi	r22, 0x14	; 20
    1daa:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_selectFont(1);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <bgx1_selectFont>
      bgx1_print("Test II");
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <bgx1_print>
      w = bgx1_textWidth("Test II");
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	0e 94 b7 0a 	call	0x156e	; 0x156e <bgx1_textWidth>
    1dc4:	18 2f       	mov	r17, r24
      bgx1_move(82, 28);
    1dc6:	82 e5       	ldi	r24, 0x52	; 82
    1dc8:	6c e1       	ldi	r22, 0x1C	; 28
    1dca:	0e 94 15 0c 	call	0x182a	; 0x182a <bgx1_move>
      bgx1_hLine(w);
    1dce:	81 2f       	mov	r24, r17
    1dd0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <bgx1_hLine>
    1dd4:	8f e7       	ldi	r24, 0x7F	; 127
    1dd6:	94 e8       	ldi	r25, 0x84	; 132
    1dd8:	ae e1       	ldi	r26, 0x1E	; 30
    1dda:	81 50       	subi	r24, 0x01	; 1
    1ddc:	90 40       	sbci	r25, 0x00	; 0
    1dde:	a0 40       	sbci	r26, 0x00	; 0
    1de0:	e1 f7       	brne	.-8      	; 0x1dda <main+0x1b4>
    1de2:	00 c0       	rjmp	.+0      	; 0x1de4 <main+0x1be>
    1de4:	00 00       	nop

      delay(500);
      
      plot_smily(85, 40);
    1de6:	85 e5       	ldi	r24, 0x55	; 85
    1de8:	68 e2       	ldi	r22, 0x28	; 40
    1dea:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <plot_smily>
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	94 e3       	ldi	r25, 0x34	; 52
    1df2:	ac e0       	ldi	r26, 0x0C	; 12
    1df4:	81 50       	subi	r24, 0x01	; 1
    1df6:	90 40       	sbci	r25, 0x00	; 0
    1df8:	a0 40       	sbci	r26, 0x00	; 0
    1dfa:	e1 f7       	brne	.-8      	; 0x1df4 <main+0x1ce>
    1dfc:	00 c0       	rjmp	.+0      	; 0x1dfe <main+0x1d8>
    1dfe:	00 00       	nop

      delay(200);
      
      plot_smily(105, 40);
    1e00:	89 e6       	ldi	r24, 0x69	; 105
    1e02:	68 e2       	ldi	r22, 0x28	; 40
    1e04:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <plot_smily>
    1e08:	16 cf       	rjmp	.-468    	; 0x1c36 <main+0x10>

00001e0a <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    1e0a:	80 32       	cpi	r24, 0x20	; 32
    1e0c:	18 f5       	brcc	.+70     	; 0x1e54 <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    1e0e:	58 2f       	mov	r21, r24
    1e10:	56 95       	lsr	r21
    1e12:	56 95       	lsr	r21
    1e14:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    1e16:	e5 2f       	mov	r30, r21
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	e6 51       	subi	r30, 0x16	; 22
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	01 90       	ld	r0, Z+
    1e24:	f0 81       	ld	r31, Z
    1e26:	e0 2d       	mov	r30, r0
    1e28:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    1e2a:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    1e2c:	21 e0       	ldi	r18, 0x01	; 1
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	b9 01       	movw	r22, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <enablePinChangeInterrupt+0x2e>
    1e34:	66 0f       	add	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <enablePinChangeInterrupt+0x2a>
    1e3c:	46 2b       	or	r20, r22
    1e3e:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
    1e40:	80 91 68 00 	lds	r24, 0x0068
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <enablePinChangeInterrupt+0x40>
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	5a 95       	dec	r21
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <enablePinChangeInterrupt+0x3c>
    1e4e:	82 2b       	or	r24, r18
    1e50:	80 93 68 00 	sts	0x0068, r24
    1e54:	08 95       	ret

00001e56 <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    1e56:	80 32       	cpi	r24, 0x20	; 32
    1e58:	c0 f4       	brcc	.+48     	; 0x1e8a <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    1e5a:	e8 2f       	mov	r30, r24
    1e5c:	e6 95       	lsr	r30
    1e5e:	e6 95       	lsr	r30
    1e60:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	ee 0f       	add	r30, r30
    1e66:	ff 1f       	adc	r31, r31
    1e68:	e6 51       	subi	r30, 0x16	; 22
    1e6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6c:	01 90       	ld	r0, Z+
    1e6e:	f0 81       	ld	r31, Z
    1e70:	e0 2d       	mov	r30, r0
    1e72:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    1e74:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    1e76:	21 e0       	ldi	r18, 0x01	; 1
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <disblePinChangeInterrupt+0x2a>
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <disblePinChangeInterrupt+0x26>
    1e84:	20 95       	com	r18
    1e86:	29 23       	and	r18, r25
    1e88:	20 83       	st	Z, r18
    1e8a:	08 95       	ret

00001e8c <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	14 96       	adiw	r26, 0x04	; 4
    1e90:	ed 91       	ld	r30, X+
    1e92:	fc 91       	ld	r31, X
    1e94:	15 97       	sbiw	r26, 0x05	; 5
    1e96:	8f ef       	ldi	r24, 0xFF	; 255
    1e98:	80 83       	st	Z, r24
}
    1e9a:	08 95       	ret

00001e9c <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	14 96       	adiw	r26, 0x04	; 4
    1ea0:	ed 91       	ld	r30, X+
    1ea2:	fc 91       	ld	r31, X
    1ea4:	15 97       	sbiw	r26, 0x05	; 5
    1ea6:	10 82       	st	Z, r1
}
    1ea8:	08 95       	ret

00001eaa <setPinOutput>:

void setPinOutput(PPin pin) {
    1eaa:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1eac:	ed 91       	ld	r30, X+
    1eae:	fc 91       	ld	r31, X
    1eb0:	11 97       	sbiw	r26, 0x01	; 1
    1eb2:	04 80       	ldd	r0, Z+4	; 0x04
    1eb4:	f5 81       	ldd	r31, Z+5	; 0x05
    1eb6:	e0 2d       	mov	r30, r0
    1eb8:	80 81       	ld	r24, Z
    1eba:	12 96       	adiw	r26, 0x02	; 2
    1ebc:	9c 91       	ld	r25, X
    1ebe:	12 97       	sbiw	r26, 0x02	; 2
    1ec0:	89 2b       	or	r24, r25
    1ec2:	80 83       	st	Z, r24
}
    1ec4:	08 95       	ret

00001ec6 <setPinInput>:

void setPinInput(PPin pin) {
    1ec6:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1ec8:	ed 91       	ld	r30, X+
    1eca:	fc 91       	ld	r31, X
    1ecc:	11 97       	sbiw	r26, 0x01	; 1
    1ece:	04 80       	ldd	r0, Z+4	; 0x04
    1ed0:	f5 81       	ldd	r31, Z+5	; 0x05
    1ed2:	e0 2d       	mov	r30, r0
    1ed4:	90 81       	ld	r25, Z
    1ed6:	12 96       	adiw	r26, 0x02	; 2
    1ed8:	8c 91       	ld	r24, X
    1eda:	12 97       	sbiw	r26, 0x02	; 2
    1edc:	80 95       	com	r24
    1ede:	89 23       	and	r24, r25
    1ee0:	80 83       	st	Z, r24
}
    1ee2:	08 95       	ret

00001ee4 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	ed 91       	ld	r30, X+
    1ee8:	fc 91       	ld	r31, X
    1eea:	11 97       	sbiw	r26, 0x01	; 1
    1eec:	60 83       	st	Z, r22
}
    1eee:	08 95       	ret

00001ef0 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	12 96       	adiw	r26, 0x02	; 2
    1ef4:	ed 91       	ld	r30, X+
    1ef6:	fc 91       	ld	r31, X
    1ef8:	13 97       	sbiw	r26, 0x03	; 3
    1efa:	80 81       	ld	r24, Z
}
    1efc:	08 95       	ret

00001efe <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1efe:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1f00:	ed 91       	ld	r30, X+
    1f02:	fc 91       	ld	r31, X
    1f04:	11 97       	sbiw	r26, 0x01	; 1
    1f06:	01 90       	ld	r0, Z+
    1f08:	f0 81       	ld	r31, Z
    1f0a:	e0 2d       	mov	r30, r0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	9c 91       	ld	r25, X
    1f12:	12 97       	sbiw	r26, 0x02	; 2
    1f14:	89 2b       	or	r24, r25
    1f16:	80 83       	st	Z, r24
}
    1f18:	08 95       	ret

00001f1a <setPinZero>:

void setPinZero(PPin pin) {
    1f1a:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    1f1c:	ed 91       	ld	r30, X+
    1f1e:	fc 91       	ld	r31, X
    1f20:	11 97       	sbiw	r26, 0x01	; 1
    1f22:	01 90       	ld	r0, Z+
    1f24:	f0 81       	ld	r31, Z
    1f26:	e0 2d       	mov	r30, r0
    1f28:	90 81       	ld	r25, Z
    1f2a:	12 96       	adiw	r26, 0x02	; 2
    1f2c:	8c 91       	ld	r24, X
    1f2e:	12 97       	sbiw	r26, 0x02	; 2
    1f30:	80 95       	com	r24
    1f32:	89 23       	and	r24, r25
    1f34:	80 83       	st	Z, r24
}
    1f36:	08 95       	ret

00001f38 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1f38:	61 15       	cp	r22, r1
    1f3a:	71 05       	cpc	r23, r1
    1f3c:	19 f0       	breq	.+6      	; 0x1f44 <writePin+0xc>
    1f3e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
    1f42:	08 95       	ret
	else setPinZero(pin);
    1f44:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
    1f48:	08 95       	ret

00001f4a <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1f4a:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    1f4c:	a0 81       	ld	r26, Z
    1f4e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f50:	12 96       	adiw	r26, 0x02	; 2
    1f52:	0d 90       	ld	r0, X+
    1f54:	bc 91       	ld	r27, X
    1f56:	a0 2d       	mov	r26, r0
    1f58:	8c 91       	ld	r24, X
    1f5a:	92 81       	ldd	r25, Z+2	; 0x02
    1f5c:	89 23       	and	r24, r25
		return TRUE;
    1f5e:	21 e0       	ldi	r18, 0x01	; 1
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <readPin+0x1e>
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1f68:	c9 01       	movw	r24, r18
    1f6a:	08 95       	ret

00001f6c <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	64 30       	cpi	r22, 0x04	; 4
    1f70:	71 05       	cpc	r23, r1
    1f72:	48 f4       	brcc	.+18     	; 0x1f86 <setCompareMatchOutputMode+0x1a>
    1f74:	db 01       	movw	r26, r22
    1f76:	ae 50       	subi	r26, 0x0E	; 14
    1f78:	be 4f       	sbci	r27, 0xFE	; 254
    1f7a:	2c 91       	ld	r18, X
    1f7c:	6a 50       	subi	r22, 0x0A	; 10
    1f7e:	7e 4f       	sbci	r23, 0xFE	; 254
    1f80:	db 01       	movw	r26, r22
    1f82:	3c 91       	ld	r19, X
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <setCompareMatchOutputMode+0x1e>
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0B1) | _BV(COM0B0);
			break;
	}
	if (timer->type == TIMER_A) {
    1f8a:	84 81       	ldd	r24, Z+4	; 0x04
    1f8c:	95 81       	ldd	r25, Z+5	; 0x05
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	21 f4       	brne	.+8      	; 0x1f9a <setCompareMatchOutputMode+0x2e>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		// Use left shift to avoid the arithmetic shift.
		oneBits = oneBits << 2;
    1f92:	33 0f       	add	r19, r19
    1f94:	33 0f       	add	r19, r19
		zeroBits = zeroBits << 2;
    1f96:	22 0f       	add	r18, r18
    1f98:	22 0f       	add	r18, r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    1f9a:	a0 81       	ld	r26, Z
    1f9c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f9e:	11 96       	adiw	r26, 0x01	; 1
    1fa0:	0d 90       	ld	r0, X+
    1fa2:	bc 91       	ld	r27, X
    1fa4:	a0 2d       	mov	r26, r0
    1fa6:	8c 91       	ld	r24, X
    1fa8:	83 2b       	or	r24, r19
    1faa:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    1fac:	01 90       	ld	r0, Z+
    1fae:	f0 81       	ld	r31, Z
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	01 80       	ldd	r0, Z+1	; 0x01
    1fb4:	f2 81       	ldd	r31, Z+2	; 0x02
    1fb6:	e0 2d       	mov	r30, r0
    1fb8:	80 81       	ld	r24, Z
    1fba:	20 95       	com	r18
    1fbc:	28 23       	and	r18, r24
    1fbe:	20 83       	st	Z, r18
}
    1fc0:	08 95       	ret

00001fc2 <setTimerClockSelect>:

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
    1fc2:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    1fc4:	80 81       	ld	r24, Z
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	82 70       	andi	r24, 0x02	; 2
    1fca:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    1fcc:	64 30       	cpi	r22, 0x04	; 4
    1fce:	71 05       	cpc	r23, r1
    1fd0:	71 f1       	breq	.+92     	; 0x202e <setTimerClockSelect+0x6c>
    1fd2:	65 30       	cpi	r22, 0x05	; 5
    1fd4:	71 05       	cpc	r23, r1
    1fd6:	68 f4       	brcc	.+26     	; 0x1ff2 <setTimerClockSelect+0x30>
    1fd8:	61 30       	cpi	r22, 0x01	; 1
    1fda:	71 05       	cpc	r23, r1
    1fdc:	f9 f0       	breq	.+62     	; 0x201c <setTimerClockSelect+0x5a>
    1fde:	61 30       	cpi	r22, 0x01	; 1
    1fe0:	71 05       	cpc	r23, r1
    1fe2:	d8 f1       	brcs	.+118    	; 0x205a <setTimerClockSelect+0x98>
    1fe4:	62 30       	cpi	r22, 0x02	; 2
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	e1 f0       	breq	.+56     	; 0x2022 <setTimerClockSelect+0x60>
    1fea:	63 30       	cpi	r22, 0x03	; 3
    1fec:	71 05       	cpc	r23, r1
    1fee:	a1 f4       	brne	.+40     	; 0x2018 <setTimerClockSelect+0x56>
    1ff0:	1b c0       	rjmp	.+54     	; 0x2028 <setTimerClockSelect+0x66>
    1ff2:	67 30       	cpi	r22, 0x07	; 7
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	21 f1       	breq	.+72     	; 0x2040 <setTimerClockSelect+0x7e>
    1ff8:	68 30       	cpi	r22, 0x08	; 8
    1ffa:	71 05       	cpc	r23, r1
    1ffc:	38 f4       	brcc	.+14     	; 0x200c <setTimerClockSelect+0x4a>
    1ffe:	65 30       	cpi	r22, 0x05	; 5
    2000:	71 05       	cpc	r23, r1
    2002:	c1 f0       	breq	.+48     	; 0x2034 <setTimerClockSelect+0x72>
    2004:	66 30       	cpi	r22, 0x06	; 6
    2006:	71 05       	cpc	r23, r1
    2008:	39 f4       	brne	.+14     	; 0x2018 <setTimerClockSelect+0x56>
    200a:	17 c0       	rjmp	.+46     	; 0x203a <setTimerClockSelect+0x78>
    200c:	68 30       	cpi	r22, 0x08	; 8
    200e:	71 05       	cpc	r23, r1
    2010:	d1 f0       	breq	.+52     	; 0x2046 <setTimerClockSelect+0x84>
    2012:	69 30       	cpi	r22, 0x09	; 9
    2014:	71 05       	cpc	r23, r1
    2016:	e1 f0       	breq	.+56     	; 0x2050 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	1d c0       	rjmp	.+58     	; 0x2056 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    201c:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    201e:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    2020:	27 c0       	rjmp	.+78     	; 0x2070 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    2022:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    2024:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    2026:	24 c0       	rjmp	.+72     	; 0x2070 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	e9 f4       	brne	.+58     	; 0x2066 <setTimerClockSelect+0xa4>
    202c:	2d c0       	rjmp	.+90     	; 0x2088 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	b9 f0       	breq	.+46     	; 0x2060 <setTimerClockSelect+0x9e>
    2032:	19 c0       	rjmp	.+50     	; 0x2066 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	d1 f4       	brne	.+52     	; 0x206c <setTimerClockSelect+0xaa>
    2038:	27 c0       	rjmp	.+78     	; 0x2088 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	a1 f0       	breq	.+40     	; 0x2066 <setTimerClockSelect+0xa4>
    203e:	05 c0       	rjmp	.+10     	; 0x204a <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	a1 f0       	breq	.+40     	; 0x206c <setTimerClockSelect+0xaa>
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	f9 f4       	brne	.+62     	; 0x2088 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    204a:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	10 c0       	rjmp	.+32     	; 0x2070 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	d1 f4       	brne	.+52     	; 0x2088 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    2054:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    205a:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    205c:	87 e0       	ldi	r24, 0x07	; 7
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    2060:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    2066:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    2068:	83 e0       	ldi	r24, 0x03	; 3
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    206c:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    206e:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    2070:	a3 81       	ldd	r26, Z+3	; 0x03
    2072:	b4 81       	ldd	r27, Z+4	; 0x04
    2074:	2c 91       	ld	r18, X
    2076:	29 2b       	or	r18, r25
    2078:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    207a:	03 80       	ldd	r0, Z+3	; 0x03
    207c:	f4 81       	ldd	r31, Z+4	; 0x04
    207e:	e0 2d       	mov	r30, r0
    2080:	90 81       	ld	r25, Z
    2082:	80 95       	com	r24
    2084:	89 23       	and	r24, r25
    2086:	80 83       	st	Z, r24
    2088:	08 95       	ret

0000208a <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
    208a:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    208c:	80 81       	ld	r24, Z
    208e:	82 ff       	sbrs	r24, 2
    2090:	37 c0       	rjmp	.+110    	; 0x2100 <setWaveformGenerationMode+0x76>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    2092:	63 30       	cpi	r22, 0x03	; 3
    2094:	71 05       	cpc	r23, r1
    2096:	31 f1       	breq	.+76     	; 0x20e4 <setWaveformGenerationMode+0x5a>
    2098:	64 30       	cpi	r22, 0x04	; 4
    209a:	71 05       	cpc	r23, r1
    209c:	40 f4       	brcc	.+16     	; 0x20ae <setWaveformGenerationMode+0x24>
    209e:	61 30       	cpi	r22, 0x01	; 1
    20a0:	71 05       	cpc	r23, r1
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <setWaveformGenerationMode+0x1c>
    20a4:	57 c0       	rjmp	.+174    	; 0x2154 <setWaveformGenerationMode+0xca>
    20a6:	62 30       	cpi	r22, 0x02	; 2
    20a8:	71 05       	cpc	r23, r1
    20aa:	80 f4       	brcc	.+32     	; 0x20cc <setWaveformGenerationMode+0x42>
    20ac:	0b c0       	rjmp	.+22     	; 0x20c4 <setWaveformGenerationMode+0x3a>
    20ae:	65 30       	cpi	r22, 0x05	; 5
    20b0:	71 05       	cpc	r23, r1
    20b2:	81 f0       	breq	.+32     	; 0x20d4 <setWaveformGenerationMode+0x4a>
    20b4:	65 30       	cpi	r22, 0x05	; 5
    20b6:	71 05       	cpc	r23, r1
    20b8:	c8 f0       	brcs	.+50     	; 0x20ec <setWaveformGenerationMode+0x62>
    20ba:	66 30       	cpi	r22, 0x06	; 6
    20bc:	71 05       	cpc	r23, r1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <setWaveformGenerationMode+0x38>
    20c0:	7a c0       	rjmp	.+244    	; 0x21b6 <setWaveformGenerationMode+0x12c>
    20c2:	1c c0       	rjmp	.+56     	; 0x20fc <setWaveformGenerationMode+0x72>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20c4:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    20c6:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    20c8:	88 e1       	ldi	r24, 0x18	; 24
    20ca:	47 c0       	rjmp	.+142    	; 0x215a <setWaveformGenerationMode+0xd0>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    20cc:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    20ce:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    20d0:	80 e1       	ldi	r24, 0x10	; 16
    20d2:	3e c0       	rjmp	.+124    	; 0x2150 <setWaveformGenerationMode+0xc6>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
    20d4:	84 fd       	sbrc	r24, 4
    20d6:	43 c0       	rjmp	.+134    	; 0x215e <setWaveformGenerationMode+0xd4>
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
    20d8:	85 ff       	sbrs	r24, 5
    20da:	45 c0       	rjmp	.+138    	; 0x2166 <setWaveformGenerationMode+0xdc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
    20dc:	98 e0       	ldi	r25, 0x08	; 8
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    20de:	33 e0       	ldi	r19, 0x03	; 3
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    20e0:	80 e1       	ldi	r24, 0x10	; 16
    20e2:	4c c0       	rjmp	.+152    	; 0x217c <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20e4:	90 e0       	ldi	r25, 0x00	; 0
					oneBitsB = _BV(WGM13) | _BV(WGM12);
				}
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    20e6:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    20e8:	88 e1       	ldi	r24, 0x18	; 24
    20ea:	32 c0       	rjmp	.+100    	; 0x2150 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
    20ec:	84 fd       	sbrc	r24, 4
    20ee:	3f c0       	rjmp	.+126    	; 0x216e <setWaveformGenerationMode+0xe4>
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
    20f0:	85 ff       	sbrs	r24, 5
    20f2:	41 c0       	rjmp	.+130    	; 0x2176 <setWaveformGenerationMode+0xec>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    20f4:	90 e0       	ldi	r25, 0x00	; 0
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    20f6:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    20f8:	88 e1       	ldi	r24, 0x18	; 24
    20fa:	40 c0       	rjmp	.+128    	; 0x217c <setWaveformGenerationMode+0xf2>
				}
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    20fc:	90 e1       	ldi	r25, 0x10	; 16
    20fe:	22 c0       	rjmp	.+68     	; 0x2144 <setWaveformGenerationMode+0xba>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    2100:	62 30       	cpi	r22, 0x02	; 2
    2102:	71 05       	cpc	r23, r1
    2104:	d1 f0       	breq	.+52     	; 0x213a <setWaveformGenerationMode+0xb0>
    2106:	63 30       	cpi	r22, 0x03	; 3
    2108:	71 05       	cpc	r23, r1
    210a:	40 f4       	brcc	.+16     	; 0x211c <setWaveformGenerationMode+0x92>
    210c:	61 15       	cp	r22, r1
    210e:	71 05       	cpc	r23, r1
    2110:	81 f0       	breq	.+32     	; 0x2132 <setWaveformGenerationMode+0xa8>
    2112:	61 30       	cpi	r22, 0x01	; 1
    2114:	71 05       	cpc	r23, r1
    2116:	09 f0       	breq	.+2      	; 0x211a <setWaveformGenerationMode+0x90>
    2118:	4e c0       	rjmp	.+156    	; 0x21b6 <setWaveformGenerationMode+0x12c>
    211a:	32 c0       	rjmp	.+100    	; 0x2180 <setWaveformGenerationMode+0xf6>
    211c:	64 30       	cpi	r22, 0x04	; 4
    211e:	71 05       	cpc	r23, r1
    2120:	a1 f0       	breq	.+40     	; 0x214a <setWaveformGenerationMode+0xc0>
    2122:	64 30       	cpi	r22, 0x04	; 4
    2124:	71 05       	cpc	r23, r1
    2126:	68 f0       	brcs	.+26     	; 0x2142 <setWaveformGenerationMode+0xb8>
    2128:	65 30       	cpi	r22, 0x05	; 5
    212a:	71 05       	cpc	r23, r1
    212c:	09 f0       	breq	.+2      	; 0x2130 <setWaveformGenerationMode+0xa6>
    212e:	43 c0       	rjmp	.+134    	; 0x21b6 <setWaveformGenerationMode+0x12c>
    2130:	06 c0       	rjmp	.+12     	; 0x213e <setWaveformGenerationMode+0xb4>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2132:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    2134:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    2136:	88 e0       	ldi	r24, 0x08	; 8
    2138:	10 c0       	rjmp	.+32     	; 0x215a <setWaveformGenerationMode+0xd0>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	1d c0       	rjmp	.+58     	; 0x2178 <setWaveformGenerationMode+0xee>
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    213e:	98 e0       	ldi	r25, 0x08	; 8
    2140:	13 c0       	rjmp	.+38     	; 0x2168 <setWaveformGenerationMode+0xde>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2142:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    2144:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    2146:	88 e0       	ldi	r24, 0x08	; 8
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    214a:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    214c:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    214e:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    2150:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    2152:	1a c0       	rjmp	.+52     	; 0x2188 <setWaveformGenerationMode+0xfe>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    2154:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    2156:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    2158:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    215a:	23 e0       	ldi	r18, 0x03	; 3
    215c:	15 c0       	rjmp	.+42     	; 0x2188 <setWaveformGenerationMode+0xfe>
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
    215e:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
    2160:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    2162:	80 e1       	ldi	r24, 0x10	; 16
    2164:	10 c0       	rjmp	.+32     	; 0x2186 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					oneBitsB = _BV(WGM13) | _BV(WGM12);
    2166:	98 e1       	ldi	r25, 0x18	; 24
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    2168:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	07 c0       	rjmp	.+14     	; 0x217c <setWaveformGenerationMode+0xf2>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    216e:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
    2170:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2172:	88 e1       	ldi	r24, 0x18	; 24
    2174:	08 c0       	rjmp	.+16     	; 0x2186 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					zeroBitsB = _BV(WGM12);
					oneBitsB = _BV(WGM13);
    2176:	90 e1       	ldi	r25, 0x10	; 16
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    2178:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM12);
    217a:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <setWaveformGenerationMode+0xfe>
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2180:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    2182:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    2184:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    2186:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    2188:	a1 81       	ldd	r26, Z+1	; 0x01
    218a:	b2 81       	ldd	r27, Z+2	; 0x02
    218c:	4c 91       	ld	r20, X
    218e:	43 2b       	or	r20, r19
    2190:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    2192:	a1 81       	ldd	r26, Z+1	; 0x01
    2194:	b2 81       	ldd	r27, Z+2	; 0x02
    2196:	3c 91       	ld	r19, X
    2198:	20 95       	com	r18
    219a:	23 23       	and	r18, r19
    219c:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    219e:	a3 81       	ldd	r26, Z+3	; 0x03
    21a0:	b4 81       	ldd	r27, Z+4	; 0x04
    21a2:	2c 91       	ld	r18, X
    21a4:	29 2b       	or	r18, r25
    21a6:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    21a8:	03 80       	ldd	r0, Z+3	; 0x03
    21aa:	f4 81       	ldd	r31, Z+4	; 0x04
    21ac:	e0 2d       	mov	r30, r0
    21ae:	90 81       	ld	r25, Z
    21b0:	80 95       	com	r24
    21b2:	89 23       	and	r24, r25
    21b4:	80 83       	st	Z, r24
    21b6:	08 95       	ret

000021b8 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    21b8:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative macro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    21ba:	ed 91       	ld	r30, X+
    21bc:	fc 91       	ld	r31, X
    21be:	11 97       	sbiw	r26, 0x01	; 1
    21c0:	05 80       	ldd	r0, Z+5	; 0x05
    21c2:	f6 81       	ldd	r31, Z+6	; 0x06
    21c4:	e0 2d       	mov	r30, r0
    21c6:	20 81       	ld	r18, Z
    21c8:	14 96       	adiw	r26, 0x04	; 4
    21ca:	8d 91       	ld	r24, X+
    21cc:	9c 91       	ld	r25, X
    21ce:	15 97       	sbiw	r26, 0x05	; 5
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <enableTimerInterrupt+0x20>
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <enableTimerInterrupt+0x22>
    21d8:	84 e0       	ldi	r24, 0x04	; 4
    21da:	82 2b       	or	r24, r18
    21dc:	80 83       	st	Z, r24
}
    21de:	08 95       	ret

000021e0 <disableTimerInterrupt>:

void disableTimerInterrupt(PTimer timer) {
    21e0:	dc 01       	movw	r26, r24
	*timer->timer->interruptMaskRegister &= ~_BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    21e2:	ed 91       	ld	r30, X+
    21e4:	fc 91       	ld	r31, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	05 80       	ldd	r0, Z+5	; 0x05
    21ea:	f6 81       	ldd	r31, Z+6	; 0x06
    21ec:	e0 2d       	mov	r30, r0
    21ee:	20 81       	ld	r18, Z
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	8d 91       	ld	r24, X+
    21f4:	9c 91       	ld	r25, X
    21f6:	15 97       	sbiw	r26, 0x05	; 5
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	11 f4       	brne	.+4      	; 0x2200 <disableTimerInterrupt+0x20>
    21fc:	8d ef       	ldi	r24, 0xFD	; 253
    21fe:	01 c0       	rjmp	.+2      	; 0x2202 <disableTimerInterrupt+0x22>
    2200:	8b ef       	ldi	r24, 0xFB	; 251
    2202:	82 23       	and	r24, r18
    2204:	80 83       	st	Z, r24
}
    2206:	08 95       	ret

00002208 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    220e:	8e 81       	ldd	r24, Y+6	; 0x06
    2210:	9f 81       	ldd	r25, Y+7	; 0x07
    2212:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <setPinOutput>
	setCompareMatchOutputMode(timer, set_on_match);
    2216:	ce 01       	movw	r24, r28
    2218:	63 e0       	ldi	r22, 0x03	; 3
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <setCompareMatchOutputMode>
}
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <setCompareMatchOutputMode>
}
    222e:	08 95       	ret

00002230 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    2230:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    2232:	a0 81       	ld	r26, Z
    2234:	b1 81       	ldd	r27, Z+1	; 0x01
    2236:	8c 91       	ld	r24, X
    2238:	82 ff       	sbrs	r24, 2
    223a:	1c c0       	rjmp	.+56     	; 0x2274 <setTimerCompareValue+0x44>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    223c:	9f b7       	in	r25, 0x3f	; 63
		// Use as many significant bits as possible.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    223e:	84 ff       	sbrs	r24, 4
    2240:	06 c0       	rjmp	.+12     	; 0x224e <setTimerCompareValue+0x1e>
			value = value >> (16 - 9);
    2242:	66 0f       	add	r22, r22
    2244:	67 2f       	mov	r22, r23
    2246:	66 1f       	adc	r22, r22
    2248:	77 0b       	sbc	r23, r23
    224a:	71 95       	neg	r23
    224c:	07 c0       	rjmp	.+14     	; 0x225c <setTimerCompareValue+0x2c>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    224e:	85 ff       	sbrs	r24, 5
    2250:	05 c0       	rjmp	.+10     	; 0x225c <setTimerCompareValue+0x2c>
			value = value >> (16 - 10);
    2252:	86 e0       	ldi	r24, 0x06	; 6
    2254:	76 95       	lsr	r23
    2256:	67 95       	ror	r22
    2258:	8a 95       	dec	r24
    225a:	e1 f7       	brne	.-8      	; 0x2254 <setTimerCompareValue+0x24>
		}
		cli();
    225c:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    225e:	a2 81       	ldd	r26, Z+2	; 0x02
    2260:	b3 81       	ldd	r27, Z+3	; 0x03
    2262:	11 96       	adiw	r26, 0x01	; 1
    2264:	7c 93       	st	X, r23
    2266:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    2268:	02 80       	ldd	r0, Z+2	; 0x02
    226a:	f3 81       	ldd	r31, Z+3	; 0x03
    226c:	e0 2d       	mov	r30, r0
    226e:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    2270:	9f bf       	out	0x3f, r25	; 63
    2272:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    2274:	02 80       	ldd	r0, Z+2	; 0x02
    2276:	f3 81       	ldd	r31, Z+3	; 0x03
    2278:	e0 2d       	mov	r30, r0
    227a:	70 83       	st	Z, r23
    227c:	08 95       	ret

0000227e <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    227e:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    2280:	a0 81       	ld	r26, Z
    2282:	b1 81       	ldd	r27, Z+1	; 0x01
    2284:	8c 91       	ld	r24, X
    2286:	82 ff       	sbrs	r24, 2
    2288:	1c c0       	rjmp	.+56     	; 0x22c2 <getTimerCompareValue+0x44>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    228a:	8f b7       	in	r24, 0x3f	; 63
		cli();
    228c:	f8 94       	cli
		// Reading OCR-register does not require any particular ordering of reading the bytes.
		result = *((uint16_t*) timer->outputCompareRegister);
    228e:	a2 81       	ldd	r26, Z+2	; 0x02
    2290:	b3 81       	ldd	r27, Z+3	; 0x03
    2292:	2d 91       	ld	r18, X+
    2294:	3c 91       	ld	r19, X
    2296:	11 97       	sbiw	r26, 0x01	; 1
		SREG = sreg; // re-enable interrupts
    2298:	8f bf       	out	0x3f, r24	; 63
		
		// Shift the value back. Non-significant bits are lost.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    229a:	01 90       	ld	r0, Z+
    229c:	f0 81       	ld	r31, Z
    229e:	e0 2d       	mov	r30, r0
    22a0:	80 81       	ld	r24, Z
    22a2:	84 ff       	sbrs	r24, 4
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <getTimerCompareValue+0x34>
			result = result << (16 - 9);
    22a6:	36 95       	lsr	r19
    22a8:	32 2f       	mov	r19, r18
    22aa:	22 27       	eor	r18, r18
    22ac:	37 95       	ror	r19
    22ae:	27 95       	ror	r18
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <getTimerCompareValue+0x50>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    22b2:	85 ff       	sbrs	r24, 5
    22b4:	0c c0       	rjmp	.+24     	; 0x22ce <getTimerCompareValue+0x50>
			result = result << (16 - 10);
    22b6:	46 e0       	ldi	r20, 0x06	; 6
    22b8:	22 0f       	add	r18, r18
    22ba:	33 1f       	adc	r19, r19
    22bc:	4a 95       	dec	r20
    22be:	e1 f7       	brne	.-8      	; 0x22b8 <getTimerCompareValue+0x3a>
    22c0:	06 c0       	rjmp	.+12     	; 0x22ce <getTimerCompareValue+0x50>
		}
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    22c2:	02 80       	ldd	r0, Z+2	; 0x02
    22c4:	f3 81       	ldd	r31, Z+3	; 0x03
    22c6:	e0 2d       	mov	r30, r0
    22c8:	80 81       	ld	r24, Z
    22ca:	38 2f       	mov	r19, r24
    22cc:	20 e0       	ldi	r18, 0x00	; 0
	}
	return result;
}
    22ce:	c9 01       	movw	r24, r18
    22d0:	08 95       	ret

000022d2 <regulateSpeed>:

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
}

void regulateSpeed(PSmoothMotor motor, uint16_t speed, MotorDirection direction) {
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	ec 01       	movw	r28, r24
    22e0:	8b 01       	movw	r16, r22
    22e2:	7a 01       	movw	r14, r20
	mutex_lock(motor->mutex);
    22e4:	88 89       	ldd	r24, Y+16	; 0x10
    22e6:	99 89       	ldd	r25, Y+17	; 0x11
    22e8:	0e 94 2b 04 	call	0x856	; 0x856 <mutex_lock>
	motor->targetSpeed = speed;
    22ec:	1f 83       	std	Y+7, r17	; 0x07
    22ee:	0e 83       	std	Y+6, r16	; 0x06
	motor->targetDirection = direction;
    22f0:	f9 86       	std	Y+9, r15	; 0x09
    22f2:	e8 86       	std	Y+8, r14	; 0x08
	if (!motor->tickRunning) {
    22f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	49 f4       	brne	.+18     	; 0x230e <regulateSpeed+0x3c>
		motor_smooth_set_call_frequency(motor, motor->adjustmentFrequency);
    22fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    22fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2300:	ce 01       	movw	r24, r28
    2302:	0e 94 70 04 	call	0x8e0	; 0x8e0 <motor_smooth_set_call_frequency>
		motor->tickRunning = TRUE;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9b 87       	std	Y+11, r25	; 0x0b
    230c:	8a 87       	std	Y+10, r24	; 0x0a
	}
	mutex_release(motor->mutex);
    230e:	88 89       	ldd	r24, Y+16	; 0x10
    2310:	99 89       	ldd	r25, Y+17	; 0x11
    2312:	0e 94 31 04 	call	0x862	; 0x862 <mutex_release>
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	08 95       	ret

00002324 <regulateStopMotor>:

// 'Imported' from motor.c. Avoided adding internal-header just for this function.
uint16_t motor_toUnsignedSpeed(int16_t speed);

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	42 e0       	ldi	r20, 0x02	; 2
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <regulateSpeed>
}
    2330:	08 95       	ret

00002332 <regulateSpeedForward>:
	}
	mutex_release(motor->mutex);
}

void regulateSpeedForward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, FORWARD);
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	0e 94 69 11 	call	0x22d2	; 0x22d2 <regulateSpeed>
}
    233a:	08 95       	ret

0000233c <regulateSpeedBackward>:

void regulateSpeedBackward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, BACKWARD);
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	0e 94 69 11 	call	0x22d2	; 0x22d2 <regulateSpeed>
}
    2344:	08 95       	ret

00002346 <regulateDirSpeed>:

void regulateDirSpeed(PSmoothMotor motor, int16_t speed) {
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	ec 01       	movw	r28, r24
    2350:	8b 01       	movw	r16, r22
	if (speed == 0) {
    2352:	61 15       	cp	r22, r1
    2354:	71 05       	cpc	r23, r1
    2356:	19 f4       	brne	.+6      	; 0x235e <regulateDirSpeed+0x18>
		regulateStopMotor(motor);
    2358:	0e 94 92 11 	call	0x2324	; 0x2324 <regulateStopMotor>
		return;
    235c:	0d c0       	rjmp	.+26     	; 0x2378 <regulateDirSpeed+0x32>
	}
	regulateSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    235e:	cb 01       	movw	r24, r22
    2360:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <motor_toUnsignedSpeed>
    2364:	bc 01       	movw	r22, r24
    2366:	41 2f       	mov	r20, r17
    2368:	40 95       	com	r20
    236a:	44 1f       	adc	r20, r20
    236c:	44 27       	eor	r20, r20
    236e:	44 1f       	adc	r20, r20
    2370:	ce 01       	movw	r24, r28
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	0e 94 69 11 	call	0x22d2	; 0x22d2 <regulateSpeed>
}
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <motor_smooth_tick>:

void motor_smooth_tick(PSmoothMotor motor) {
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	ec 01       	movw	r28, r24
	mutex_lock(motor->mutex);
    2388:	88 89       	ldd	r24, Y+16	; 0x10
    238a:	99 89       	ldd	r25, Y+17	; 0x11
    238c:	0e 94 2b 04 	call	0x856	; 0x856 <mutex_lock>
	
	// Load all values into registers.
	MotorDirection targetDir = motor->targetDirection;
    2390:	48 85       	ldd	r20, Y+8	; 0x08
    2392:	59 85       	ldd	r21, Y+9	; 0x09
	uint16_t currentSpeed = motor->currentSpeed;
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
	uint16_t targetSpeed = motor->targetSpeed;
    2398:	6e 81       	ldd	r22, Y+6	; 0x06
    239a:	7f 81       	ldd	r23, Y+7	; 0x07
	uint16_t adjustment = motor->adjustmentStep;
    239c:	2e 85       	ldd	r18, Y+14	; 0x0e
    239e:	3f 85       	ldd	r19, Y+15	; 0x0f
	
	if (motor->currentDirection != targetDir) {
    23a0:	ec 81       	ldd	r30, Y+4	; 0x04
    23a2:	fd 81       	ldd	r31, Y+5	; 0x05
    23a4:	e4 17       	cp	r30, r20
    23a6:	f5 07       	cpc	r31, r21
    23a8:	41 f0       	breq	.+16     	; 0x23ba <motor_smooth_tick+0x38>
		// Slowing down until we can change the direction.
		if (currentSpeed < adjustment) {
    23aa:	82 17       	cp	r24, r18
    23ac:	93 07       	cpc	r25, r19
    23ae:	c0 f4       	brcc	.+48     	; 0x23e0 <motor_smooth_tick+0x5e>
			// Reached zero. Now we either finished stopping,
			// or can continue in the other direction.
			currentSpeed = 0;
			motor->currentDirection = targetDir;
    23b0:	5d 83       	std	Y+5, r21	; 0x05
    23b2:	4c 83       	std	Y+4, r20	; 0x04
	if (motor->currentDirection != targetDir) {
		// Slowing down until we can change the direction.
		if (currentSpeed < adjustment) {
			// Reached zero. Now we either finished stopping,
			// or can continue in the other direction.
			currentSpeed = 0;
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	16 c0       	rjmp	.+44     	; 0x23e6 <motor_smooth_tick+0x64>
		} else {
			currentSpeed -= adjustment;
		}
	} else {
		// Going in the correct direction already.
		if (currentSpeed < targetSpeed) { // Speeding up
    23ba:	86 17       	cp	r24, r22
    23bc:	97 07       	cpc	r25, r23
    23be:	50 f4       	brcc	.+20     	; 0x23d4 <motor_smooth_tick+0x52>
			if (targetSpeed - currentSpeed < adjustment) {
    23c0:	ab 01       	movw	r20, r22
    23c2:	48 1b       	sub	r20, r24
    23c4:	59 0b       	sbc	r21, r25
    23c6:	42 17       	cp	r20, r18
    23c8:	53 07       	cpc	r21, r19
    23ca:	68 f0       	brcs	.+26     	; 0x23e6 <motor_smooth_tick+0x64>
				currentSpeed = targetSpeed;
			} else {
				currentSpeed += adjustment;
    23cc:	b9 01       	movw	r22, r18
    23ce:	68 0f       	add	r22, r24
    23d0:	79 1f       	adc	r23, r25
    23d2:	09 c0       	rjmp	.+18     	; 0x23e6 <motor_smooth_tick+0x64>
			}
		} else { // Slowing down
			if (currentSpeed - targetSpeed < adjustment) {
    23d4:	ac 01       	movw	r20, r24
    23d6:	46 1b       	sub	r20, r22
    23d8:	57 0b       	sbc	r21, r23
    23da:	42 17       	cp	r20, r18
    23dc:	53 07       	cpc	r21, r19
    23de:	18 f0       	brcs	.+6      	; 0x23e6 <motor_smooth_tick+0x64>
				currentSpeed = targetSpeed;
			} else {
				currentSpeed -= adjustment;
    23e0:	bc 01       	movw	r22, r24
    23e2:	62 1b       	sub	r22, r18
    23e4:	73 0b       	sbc	r23, r19
			}
		}
	}
	
	// After the adjustments, update the actual value!
	motor->currentSpeed = currentSpeed;
    23e6:	7b 83       	std	Y+3, r23	; 0x03
    23e8:	6a 83       	std	Y+2, r22	; 0x02
	setSpeed(motor->motor, motor->currentSpeed, motor->currentDirection);
    23ea:	4c 81       	ldd	r20, Y+4	; 0x04
    23ec:	5d 81       	ldd	r21, Y+5	; 0x05
    23ee:	88 81       	ld	r24, Y
    23f0:	99 81       	ldd	r25, Y+1	; 0x01
    23f2:	0e 94 6d 12 	call	0x24da	; 0x24da <setSpeed>
	
	// If we are ready adjusting, stop ticking.
	if (motor->targetSpeed == motor->currentSpeed && motor->targetDirection == motor->currentDirection) {
    23f6:	2e 81       	ldd	r18, Y+6	; 0x06
    23f8:	3f 81       	ldd	r19, Y+7	; 0x07
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	28 17       	cp	r18, r24
    2400:	39 07       	cpc	r19, r25
    2402:	71 f4       	brne	.+28     	; 0x2420 <motor_smooth_tick+0x9e>
    2404:	28 85       	ldd	r18, Y+8	; 0x08
    2406:	39 85       	ldd	r19, Y+9	; 0x09
    2408:	8c 81       	ldd	r24, Y+4	; 0x04
    240a:	9d 81       	ldd	r25, Y+5	; 0x05
    240c:	28 17       	cp	r18, r24
    240e:	39 07       	cpc	r19, r25
    2410:	39 f4       	brne	.+14     	; 0x2420 <motor_smooth_tick+0x9e>
		motor_smooth_set_call_frequency(motor, 0);
    2412:	ce 01       	movw	r24, r28
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	0e 94 70 04 	call	0x8e0	; 0x8e0 <motor_smooth_set_call_frequency>
		motor->tickRunning = FALSE;
    241c:	1b 86       	std	Y+11, r1	; 0x0b
    241e:	1a 86       	std	Y+10, r1	; 0x0a
	}
	mutex_release(motor->mutex);
    2420:	88 89       	ldd	r24, Y+16	; 0x10
    2422:	99 89       	ldd	r25, Y+17	; 0x11
    2424:	0e 94 31 04 	call	0x862	; 0x862 <mutex_release>
}
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <stopMotor>:
#include "motor.h"
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

void stopMotor(PMotor motor) {
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	ec 01       	movw	r28, r24
	// TODO -- unclear how to stop the motor.
	// TCCR1A &= ~(_BV(COM1A0) | _BV(COM1A1) | _BV(COM1B0) | _BV(COM1B1));
	// disableOutputCompare(motor->pwmTimer);
	// setPinZero(motor->pwmTimer->outputComparePin);
	setTimerCompareValue(motor->pwmTimer, 0);
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	70 e0       	ldi	r23, 0x00	; 0
    243c:	0e 94 18 11 	call	0x2230	; 0x2230 <setTimerCompareValue>
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    2440:	88 81       	ld	r24, Y
    2442:	83 ff       	sbrs	r24, 3
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <stopMotor+0x28>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
		setPinZero(Dir2(motor));
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
	}
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    245c:	fc 01       	movw	r30, r24
    245e:	83 81       	ldd	r24, Z+3	; 0x03
    2460:	94 81       	ldd	r25, Z+4	; 0x04
    2462:	0e 94 3f 11 	call	0x227e	; 0x227e <getTimerCompareValue>
}
    2466:	08 95       	ret

00002468 <getDirection>:

MotorDirection getDirection(PMotor motor) {
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    2472:	28 81       	ld	r18, Y
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	23 ff       	sbrs	r18, 3
    247a:	12 c0       	rjmp	.+36     	; 0x24a0 <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
    247c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <readPin>
    2480:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <readPin>
		if (dir1 && !dir2) val = FORWARD;
    248a:	01 15       	cp	r16, r1
    248c:	11 05       	cpc	r17, r1
    248e:	19 f0       	breq	.+6      	; 0x2496 <getDirection+0x2e>
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	e9 f0       	breq	.+58     	; 0x24ce <getDirection+0x66>
    2494:	02 c0       	rjmp	.+4      	; 0x249a <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	e9 f4       	brne	.+58     	; 0x24d4 <getDirection+0x6c>
    249a:	22 e0       	ldi	r18, 0x02	; 2
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	11 c0       	rjmp	.+34     	; 0x24c2 <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
    24a0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <readPin>
    24a4:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
    24a6:	82 30       	cpi	r24, 0x02	; 2
    24a8:	91 05       	cpc	r25, r1
    24aa:	59 f0       	breq	.+22     	; 0x24c2 <getDirection+0x5a>
    24ac:	88 81       	ld	r24, Y
    24ae:	82 ff       	sbrs	r24, 2
    24b0:	08 c0       	rjmp	.+16     	; 0x24c2 <getDirection+0x5a>
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	21 15       	cp	r18, r1
    24b8:	31 05       	cpc	r19, r1
    24ba:	11 f0       	breq	.+4      	; 0x24c0 <getDirection+0x58>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9c 01       	movw	r18, r24
	return val;
}
    24c2:	c9 01       	movw	r24, r18
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	ec cf       	rjmp	.-40     	; 0x24ac <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	e9 cf       	rjmp	.-46     	; 0x24ac <getDirection+0x44>

000024da <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	ec 01       	movw	r28, r24
    24e4:	8b 01       	movw	r16, r22
    24e6:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
    24e8:	42 30       	cpi	r20, 0x02	; 2
    24ea:	51 05       	cpc	r21, r1
    24ec:	19 f0       	breq	.+6      	; 0x24f4 <setSpeed+0x1a>
    24ee:	01 15       	cp	r16, r1
    24f0:	11 05       	cpc	r17, r1
    24f2:	21 f4       	brne	.+8      	; 0x24fc <setSpeed+0x22>
		stopMotor(motor);
    24f4:	ce 01       	movw	r24, r28
    24f6:	0e 94 17 12 	call	0x242e	; 0x242e <stopMotor>
		return;
    24fa:	32 c0       	rjmp	.+100    	; 0x2560 <setSpeed+0x86>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
    24fc:	28 81       	ld	r18, Y
    24fe:	22 ff       	sbrs	r18, 2
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <setSpeed+0x38>
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	41 15       	cp	r20, r1
    2508:	51 05       	cpc	r21, r1
    250a:	11 f0       	breq	.+4      	; 0x2510 <setSpeed+0x36>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    2512:	23 ff       	sbrs	r18, 3
    2514:	13 c0       	rjmp	.+38     	; 0x253c <setSpeed+0x62>
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
    251a:	61 30       	cpi	r22, 0x01	; 1
    251c:	71 05       	cpc	r23, r1
    251e:	39 f4       	brne	.+14     	; 0x252e <setSpeed+0x54>
			setPinOne(motor->direction);
    2520:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
			setPinZero(Dir2(motor));
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
    252c:	0b c0       	rjmp	.+22     	; 0x2544 <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
    252e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <setPinZero>
			setPinOne(Dir2(motor));
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <setPinOne>
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <writePin>
	}
	if (motor->flags & MOTOR_INVERSE_SPEED) speed = 0xFFFF - speed;
    2544:	88 81       	ld	r24, Y
    2546:	81 ff       	sbrs	r24, 1
    2548:	02 c0       	rjmp	.+4      	; 0x254e <setSpeed+0x74>
    254a:	00 95       	com	r16
    254c:	10 95       	com	r17
	setTimerCompareValue(motor->pwmTimer, speed);
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	b8 01       	movw	r22, r16
    2554:	0e 94 18 11 	call	0x2230	; 0x2230 <setTimerCompareValue>
	enableOutputCompare(motor->pwmTimer);
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	9c 81       	ldd	r25, Y+4	; 0x04
    255c:	0e 94 04 11 	call	0x2208	; 0x2208 <enableOutputCompare>
}
    2560:	df 91       	pop	r29
    2562:	cf 91       	pop	r28
    2564:	1f 91       	pop	r17
    2566:	0f 91       	pop	r16
    2568:	08 95       	ret

0000256a <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	0e 94 6d 12 	call	0x24da	; 0x24da <setSpeed>
}
    2572:	08 95       	ret

00002574 <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
    2574:	40 e0       	ldi	r20, 0x00	; 0
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	0e 94 6d 12 	call	0x24da	; 0x24da <setSpeed>
}
    257c:	08 95       	ret

0000257e <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
    2588:	0e 94 34 12 	call	0x2468	; 0x2468 <getDirection>
    258c:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	91 05       	cpc	r25, r1
    2592:	71 f0       	breq	.+28     	; 0x25b0 <getDirSpeed+0x32>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    2594:	f8 01       	movw	r30, r16
    2596:	83 81       	ldd	r24, Z+3	; 0x03
    2598:	94 81       	ldd	r25, Z+4	; 0x04
    259a:	0e 94 3f 11 	call	0x227e	; 0x227e <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
    259e:	9c 01       	movw	r18, r24
    25a0:	36 95       	lsr	r19
    25a2:	27 95       	ror	r18
	if (dir == BACKWARD)
    25a4:	20 97       	sbiw	r28, 0x00	; 0
    25a6:	31 f4       	brne	.+12     	; 0x25b4 <getDirSpeed+0x36>
		val *= -1; // Should be optimized away by compiler.
    25a8:	30 95       	com	r19
    25aa:	21 95       	neg	r18
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <getDirSpeed+0x36>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
    25b4:	c9 01       	movw	r24, r18
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	08 95       	ret

000025c0 <motor_toUnsignedSpeed>:

uint16_t motor_toUnsignedSpeed(int16_t speed) {
	uint16_t absv = abs(speed);
    25c0:	28 2f       	mov	r18, r24
    25c2:	39 2f       	mov	r19, r25
    25c4:	37 ff       	sbrs	r19, 7
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <motor_toUnsignedSpeed+0xe>
    25c8:	30 95       	com	r19
    25ca:	21 95       	neg	r18
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
	return absv;
}
    25d2:	c9 01       	movw	r24, r18
    25d4:	08 95       	ret

000025d6 <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	ec 01       	movw	r28, r24
    25e0:	8b 01       	movw	r16, r22
	if (speed == 0) {
    25e2:	61 15       	cp	r22, r1
    25e4:	71 05       	cpc	r23, r1
    25e6:	19 f4       	brne	.+6      	; 0x25ee <setDirSpeed+0x18>
		stopMotor(motor);
    25e8:	0e 94 17 12 	call	0x242e	; 0x242e <stopMotor>
		return;
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <setDirSpeed+0x32>
	}
	setSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    25ee:	cb 01       	movw	r24, r22
    25f0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <motor_toUnsignedSpeed>
    25f4:	bc 01       	movw	r22, r24
    25f6:	41 2f       	mov	r20, r17
    25f8:	40 95       	com	r20
    25fa:	44 1f       	adc	r20, r20
    25fc:	44 27       	eor	r20, r20
    25fe:	44 1f       	adc	r20, r20
    2600:	ce 01       	movw	r24, r28
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	0e 94 6d 12 	call	0x24da	; 0x24da <setSpeed>
}
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	08 95       	ret

00002612 <__udivmodhi4>:
    2612:	aa 1b       	sub	r26, r26
    2614:	bb 1b       	sub	r27, r27
    2616:	51 e1       	ldi	r21, 0x11	; 17
    2618:	07 c0       	rjmp	.+14     	; 0x2628 <__udivmodhi4_ep>

0000261a <__udivmodhi4_loop>:
    261a:	aa 1f       	adc	r26, r26
    261c:	bb 1f       	adc	r27, r27
    261e:	a6 17       	cp	r26, r22
    2620:	b7 07       	cpc	r27, r23
    2622:	10 f0       	brcs	.+4      	; 0x2628 <__udivmodhi4_ep>
    2624:	a6 1b       	sub	r26, r22
    2626:	b7 0b       	sbc	r27, r23

00002628 <__udivmodhi4_ep>:
    2628:	88 1f       	adc	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	5a 95       	dec	r21
    262e:	a9 f7       	brne	.-22     	; 0x261a <__udivmodhi4_loop>
    2630:	80 95       	com	r24
    2632:	90 95       	com	r25
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	08 95       	ret

0000263a <__divmodhi4>:
    263a:	97 fb       	bst	r25, 7
    263c:	09 2e       	mov	r0, r25
    263e:	07 26       	eor	r0, r23
    2640:	0a d0       	rcall	.+20     	; 0x2656 <__divmodhi4_neg1>
    2642:	77 fd       	sbrc	r23, 7
    2644:	04 d0       	rcall	.+8      	; 0x264e <__divmodhi4_neg2>
    2646:	e5 df       	rcall	.-54     	; 0x2612 <__udivmodhi4>
    2648:	06 d0       	rcall	.+12     	; 0x2656 <__divmodhi4_neg1>
    264a:	00 20       	and	r0, r0
    264c:	1a f4       	brpl	.+6      	; 0x2654 <__divmodhi4_exit>

0000264e <__divmodhi4_neg2>:
    264e:	70 95       	com	r23
    2650:	61 95       	neg	r22
    2652:	7f 4f       	sbci	r23, 0xFF	; 255

00002654 <__divmodhi4_exit>:
    2654:	08 95       	ret

00002656 <__divmodhi4_neg1>:
    2656:	f6 f7       	brtc	.-4      	; 0x2654 <__divmodhi4_exit>
    2658:	90 95       	com	r25
    265a:	81 95       	neg	r24
    265c:	9f 4f       	sbci	r25, 0xFF	; 255
    265e:	08 95       	ret

00002660 <memcpy_P>:
    2660:	fb 01       	movw	r30, r22
    2662:	dc 01       	movw	r26, r24
    2664:	02 c0       	rjmp	.+4      	; 0x266a <memcpy_P+0xa>
    2666:	05 90       	lpm	r0, Z+
    2668:	0d 92       	st	X+, r0
    266a:	41 50       	subi	r20, 0x01	; 1
    266c:	50 40       	sbci	r21, 0x00	; 0
    266e:	d8 f7       	brcc	.-10     	; 0x2666 <memcpy_P+0x6>
    2670:	08 95       	ret

00002672 <strlen_P>:
    2672:	fc 01       	movw	r30, r24
    2674:	05 90       	lpm	r0, Z+
    2676:	00 20       	and	r0, r0
    2678:	e9 f7       	brne	.-6      	; 0x2674 <strlen_P+0x2>
    267a:	80 95       	com	r24
    267c:	90 95       	com	r25
    267e:	8e 0f       	add	r24, r30
    2680:	9f 1f       	adc	r25, r31
    2682:	08 95       	ret

00002684 <memcpy>:
    2684:	fb 01       	movw	r30, r22
    2686:	dc 01       	movw	r26, r24
    2688:	02 c0       	rjmp	.+4      	; 0x268e <memcpy+0xa>
    268a:	01 90       	ld	r0, Z+
    268c:	0d 92       	st	X+, r0
    268e:	41 50       	subi	r20, 0x01	; 1
    2690:	50 40       	sbci	r21, 0x00	; 0
    2692:	d8 f7       	brcc	.-10     	; 0x268a <memcpy+0x6>
    2694:	08 95       	ret

00002696 <_exit>:
    2696:	f8 94       	cli

00002698 <__stop_program>:
    2698:	ff cf       	rjmp	.-2      	; 0x2698 <__stop_program>
