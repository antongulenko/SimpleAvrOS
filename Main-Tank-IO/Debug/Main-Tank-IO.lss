
Main-Tank-IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  00001700  00001794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001700  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000147  00800246  00800246  000018da  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000d04  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031b7  00000000  00000000  000030eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b60  00000000  00000000  000062a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004000  00000000  00000000  00006e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  0000ae04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000124e  00000000  00000000  0000b434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018a0  00000000  00000000  0000c682  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00047ced  00000000  00000000  0000df22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000004cd  00000000  00000000  00055c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  000560dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      80:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_32>
      84:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e0       	ldi	r30, 0x00	; 0
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 34       	cpi	r26, 0x46	; 70
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a6 e4       	ldi	r26, 0x46	; 70
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 38       	cpi	r26, 0x8D	; 141
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
	MCUSR = 0;
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 7a 00 	call	0xf4	; 0xf4 <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 82 00 	call	0x104	; 0x104 <init_ports_m1284P>

000000ca <init_tank_leds_kernel_init>:
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
}
KERNEL_INIT(init_tank_leds)
      ca:	0e 94 c7 01 	call	0x38e	; 0x38e <init_tank_leds>

000000ce <init_tank_buttons_kernel_init>:
	INIT_BUTTON(Button2, PinA2)
	INIT_BUTTON(Button3, PinA3)
	INIT_BUTTON(Button4, PinA4)
	INIT_BUTTON(ButtonSwitch, PinA5)
}
KERNEL_INIT(init_tank_buttons)
      ce:	0e 94 82 02 	call	0x504	; 0x504 <init_tank_buttons>

000000d2 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      d2:	0e 94 ab 02 	call	0x556	; 0x556 <init_timer_m1284P>

000000d6 <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      d6:	0e 94 97 04 	call	0x92e	; 0x92e <init_idle_scheduler>

000000da <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 2500);
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      da:	0e 94 aa 04 	call	0x954	; 0x954 <init_scheduler>

000000de <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      de:	0e 94 55 05 	call	0xaaa	; 0xaaa <init_kernel>
      e2:	0e 94 83 05 	call	0xb06	; 0xb06 <main>
      e6:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <MainProcessEnd>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
      ee:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <processor_loop_idle>
}
      f2:	08 95       	ret

000000f4 <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
      f4:	84 b7       	in	r24, 0x34	; 52
      f6:	80 93 4a 02 	sts	0x024A, r24
	MCUSR = 0;
      fa:	14 be       	out	0x34, r1	; 52
}
      fc:	08 95       	ret

000000fe <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
      fe:	80 91 4a 02 	lds	r24, 0x024A
     102:	08 95       	ret

00000104 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     104:	ae ef       	ldi	r26, 0xFE	; 254
     106:	b2 e0       	ldi	r27, 0x02	; 2
     108:	ea e2       	ldi	r30, 0x2A	; 42
     10a:	f2 e0       	ldi	r31, 0x02	; 2
     10c:	86 e0       	ldi	r24, 0x06	; 6
     10e:	01 90       	ld	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	81 50       	subi	r24, 0x01	; 1
     114:	e1 f7       	brne	.-8      	; 0x10e <init_ports_m1284P+0xa>
     116:	ab ef       	ldi	r26, 0xFB	; 251
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	e7 e2       	ldi	r30, 0x27	; 39
     11c:	f2 e0       	ldi	r31, 0x02	; 2
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	01 90       	ld	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	81 50       	subi	r24, 0x01	; 1
     126:	e1 f7       	brne	.-8      	; 0x120 <init_ports_m1284P+0x1c>
     128:	a6 e5       	ldi	r26, 0x56	; 86
     12a:	b3 e0       	ldi	r27, 0x03	; 3
     12c:	e4 e2       	ldi	r30, 0x24	; 36
     12e:	f2 e0       	ldi	r31, 0x02	; 2
     130:	83 e0       	ldi	r24, 0x03	; 3
     132:	01 90       	ld	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	81 50       	subi	r24, 0x01	; 1
     138:	e1 f7       	brne	.-8      	; 0x132 <init_ports_m1284P+0x2e>
     13a:	ac eb       	ldi	r26, 0xBC	; 188
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	e1 e2       	ldi	r30, 0x21	; 33
     140:	f2 e0       	ldi	r31, 0x02	; 2
     142:	83 e0       	ldi	r24, 0x03	; 3
     144:	01 90       	ld	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	81 50       	subi	r24, 0x01	; 1
     14a:	e1 f7       	brne	.-8      	; 0x144 <init_ports_m1284P+0x40>
     14c:	a8 ed       	ldi	r26, 0xD8	; 216
     14e:	b2 e0       	ldi	r27, 0x02	; 2
     150:	ee e1       	ldi	r30, 0x1E	; 30
     152:	f2 e0       	ldi	r31, 0x02	; 2
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	01 90       	ld	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	81 50       	subi	r24, 0x01	; 1
     15c:	e1 f7       	brne	.-8      	; 0x156 <init_ports_m1284P+0x52>
     15e:	a8 e8       	ldi	r26, 0x88	; 136
     160:	b2 e0       	ldi	r27, 0x02	; 2
     162:	eb e1       	ldi	r30, 0x1B	; 27
     164:	f2 e0       	ldi	r31, 0x02	; 2
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	01 90       	ld	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	81 50       	subi	r24, 0x01	; 1
     16e:	e1 f7       	brne	.-8      	; 0x168 <init_ports_m1284P+0x64>
     170:	a7 eb       	ldi	r26, 0xB7	; 183
     172:	b2 e0       	ldi	r27, 0x02	; 2
     174:	e8 e1       	ldi	r30, 0x18	; 24
     176:	f2 e0       	ldi	r31, 0x02	; 2
     178:	83 e0       	ldi	r24, 0x03	; 3
     17a:	01 90       	ld	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	81 50       	subi	r24, 0x01	; 1
     180:	e1 f7       	brne	.-8      	; 0x17a <init_ports_m1284P+0x76>
     182:	a9 e4       	ldi	r26, 0x49	; 73
     184:	b3 e0       	ldi	r27, 0x03	; 3
     186:	e5 e1       	ldi	r30, 0x15	; 21
     188:	f2 e0       	ldi	r31, 0x02	; 2
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	01 90       	ld	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	81 50       	subi	r24, 0x01	; 1
     192:	e1 f7       	brne	.-8      	; 0x18c <init_ports_m1284P+0x88>
     194:	ab e0       	ldi	r26, 0x0B	; 11
     196:	b3 e0       	ldi	r27, 0x03	; 3
     198:	e2 e1       	ldi	r30, 0x12	; 18
     19a:	f2 e0       	ldi	r31, 0x02	; 2
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	01 90       	ld	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	81 50       	subi	r24, 0x01	; 1
     1a4:	e1 f7       	brne	.-8      	; 0x19e <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     1a6:	a0 e6       	ldi	r26, 0x60	; 96
     1a8:	b3 e0       	ldi	r27, 0x03	; 3
     1aa:	ec e0       	ldi	r30, 0x0C	; 12
     1ac:	f2 e0       	ldi	r31, 0x02	; 2
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	01 90       	ld	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	81 50       	subi	r24, 0x01	; 1
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <init_ports_m1284P+0xac>
     1b8:	a1 ee       	ldi	r26, 0xE1	; 225
     1ba:	b2 e0       	ldi	r27, 0x02	; 2
     1bc:	e9 e0       	ldi	r30, 0x09	; 9
     1be:	f2 e0       	ldi	r31, 0x02	; 2
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	81 50       	subi	r24, 0x01	; 1
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <init_ports_m1284P+0xbe>
     1ca:	ab e5       	ldi	r26, 0x5B	; 91
     1cc:	b3 e0       	ldi	r27, 0x03	; 3
     1ce:	e6 e0       	ldi	r30, 0x06	; 6
     1d0:	f2 e0       	ldi	r31, 0x02	; 2
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	81 50       	subi	r24, 0x01	; 1
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <init_ports_m1284P+0xd0>
     1dc:	ac e6       	ldi	r26, 0x6C	; 108
     1de:	b2 e0       	ldi	r27, 0x02	; 2
     1e0:	e3 e0       	ldi	r30, 0x03	; 3
     1e2:	f2 e0       	ldi	r31, 0x02	; 2
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	01 90       	ld	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	81 50       	subi	r24, 0x01	; 1
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <init_ports_m1284P+0xe2>
     1ee:	a6 e0       	ldi	r26, 0x06	; 6
     1f0:	b3 e0       	ldi	r27, 0x03	; 3
     1f2:	e0 e0       	ldi	r30, 0x00	; 0
     1f4:	f2 e0       	ldi	r31, 0x02	; 2
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	01 90       	ld	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	81 50       	subi	r24, 0x01	; 1
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <init_ports_m1284P+0xf4>
     200:	a5 e1       	ldi	r26, 0x15	; 21
     202:	b3 e0       	ldi	r27, 0x03	; 3
     204:	ed ef       	ldi	r30, 0xFD	; 253
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	81 50       	subi	r24, 0x01	; 1
     210:	e1 f7       	brne	.-8      	; 0x20a <init_ports_m1284P+0x106>
     212:	a6 ea       	ldi	r26, 0xA6	; 166
     214:	b2 e0       	ldi	r27, 0x02	; 2
     216:	ea ef       	ldi	r30, 0xFA	; 250
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	83 e0       	ldi	r24, 0x03	; 3
     21c:	01 90       	ld	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	81 50       	subi	r24, 0x01	; 1
     222:	e1 f7       	brne	.-8      	; 0x21c <init_ports_m1284P+0x118>
     224:	af e6       	ldi	r26, 0x6F	; 111
     226:	b2 e0       	ldi	r27, 0x02	; 2
     228:	e7 ef       	ldi	r30, 0xF7	; 247
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	01 90       	ld	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	81 50       	subi	r24, 0x01	; 1
     234:	e1 f7       	brne	.-8      	; 0x22e <init_ports_m1284P+0x12a>
     236:	a3 ea       	ldi	r26, 0xA3	; 163
     238:	b2 e0       	ldi	r27, 0x02	; 2
     23a:	e4 ef       	ldi	r30, 0xF4	; 244
     23c:	f1 e0       	ldi	r31, 0x01	; 1
     23e:	83 e0       	ldi	r24, 0x03	; 3
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	81 50       	subi	r24, 0x01	; 1
     246:	e1 f7       	brne	.-8      	; 0x240 <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     248:	ae ee       	ldi	r26, 0xEE	; 238
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	ee ee       	ldi	r30, 0xEE	; 238
     24e:	f1 e0       	ldi	r31, 0x01	; 1
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	81 50       	subi	r24, 0x01	; 1
     258:	e1 f7       	brne	.-8      	; 0x252 <init_ports_m1284P+0x14e>
     25a:	a8 e2       	ldi	r26, 0x28	; 40
     25c:	b3 e0       	ldi	r27, 0x03	; 3
     25e:	eb ee       	ldi	r30, 0xEB	; 235
     260:	f1 e0       	ldi	r31, 0x01	; 1
     262:	83 e0       	ldi	r24, 0x03	; 3
     264:	01 90       	ld	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	81 50       	subi	r24, 0x01	; 1
     26a:	e1 f7       	brne	.-8      	; 0x264 <init_ports_m1284P+0x160>
     26c:	ae ed       	ldi	r26, 0xDE	; 222
     26e:	b2 e0       	ldi	r27, 0x02	; 2
     270:	e8 ee       	ldi	r30, 0xE8	; 232
     272:	f1 e0       	ldi	r31, 0x01	; 1
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	01 90       	ld	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	81 50       	subi	r24, 0x01	; 1
     27c:	e1 f7       	brne	.-8      	; 0x276 <init_ports_m1284P+0x172>
     27e:	ac e1       	ldi	r26, 0x1C	; 28
     280:	b3 e0       	ldi	r27, 0x03	; 3
     282:	e5 ee       	ldi	r30, 0xE5	; 229
     284:	f1 e0       	ldi	r31, 0x01	; 1
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	01 90       	ld	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	81 50       	subi	r24, 0x01	; 1
     28e:	e1 f7       	brne	.-8      	; 0x288 <init_ports_m1284P+0x184>
     290:	a9 e9       	ldi	r26, 0x99	; 153
     292:	b2 e0       	ldi	r27, 0x02	; 2
     294:	e2 ee       	ldi	r30, 0xE2	; 226
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	01 90       	ld	r0, Z+
     29c:	0d 92       	st	X+, r0
     29e:	81 50       	subi	r24, 0x01	; 1
     2a0:	e1 f7       	brne	.-8      	; 0x29a <init_ports_m1284P+0x196>
     2a2:	a5 e8       	ldi	r26, 0x85	; 133
     2a4:	b2 e0       	ldi	r27, 0x02	; 2
     2a6:	ef ed       	ldi	r30, 0xDF	; 223
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	01 90       	ld	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	e1 f7       	brne	.-8      	; 0x2ac <init_ports_m1284P+0x1a8>
     2b4:	ab ed       	ldi	r26, 0xDB	; 219
     2b6:	b2 e0       	ldi	r27, 0x02	; 2
     2b8:	ec ed       	ldi	r30, 0xDC	; 220
     2ba:	f1 e0       	ldi	r31, 0x01	; 1
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	01 90       	ld	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	81 50       	subi	r24, 0x01	; 1
     2c4:	e1 f7       	brne	.-8      	; 0x2be <init_ports_m1284P+0x1ba>
     2c6:	a9 ec       	ldi	r26, 0xC9	; 201
     2c8:	b2 e0       	ldi	r27, 0x02	; 2
     2ca:	e9 ed       	ldi	r30, 0xD9	; 217
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	01 90       	ld	r0, Z+
     2d2:	0d 92       	st	X+, r0
     2d4:	81 50       	subi	r24, 0x01	; 1
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <init_ports_m1284P+0x1cc>
     2d8:	ae e5       	ldi	r26, 0x5E	; 94
     2da:	b2 e0       	ldi	r27, 0x02	; 2
     2dc:	e6 ed       	ldi	r30, 0xD6	; 214
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	83 e0       	ldi	r24, 0x03	; 3
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	81 50       	subi	r24, 0x01	; 1
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     2ea:	a1 eb       	ldi	r26, 0xB1	; 177
     2ec:	b2 e0       	ldi	r27, 0x02	; 2
     2ee:	e0 ed       	ldi	r30, 0xD0	; 208
     2f0:	f1 e0       	ldi	r31, 0x01	; 1
     2f2:	86 e0       	ldi	r24, 0x06	; 6
     2f4:	01 90       	ld	r0, Z+
     2f6:	0d 92       	st	X+, r0
     2f8:	81 50       	subi	r24, 0x01	; 1
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <init_ports_m1284P+0x1f0>
     2fc:	a0 e8       	ldi	r26, 0x80	; 128
     2fe:	b2 e0       	ldi	r27, 0x02	; 2
     300:	ed ec       	ldi	r30, 0xCD	; 205
     302:	f1 e0       	ldi	r31, 0x01	; 1
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	01 90       	ld	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	81 50       	subi	r24, 0x01	; 1
     30c:	e1 f7       	brne	.-8      	; 0x306 <init_ports_m1284P+0x202>
     30e:	ae e8       	ldi	r26, 0x8E	; 142
     310:	b2 e0       	ldi	r27, 0x02	; 2
     312:	ea ec       	ldi	r30, 0xCA	; 202
     314:	f1 e0       	ldi	r31, 0x01	; 1
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	01 90       	ld	r0, Z+
     31a:	0d 92       	st	X+, r0
     31c:	81 50       	subi	r24, 0x01	; 1
     31e:	e1 f7       	brne	.-8      	; 0x318 <init_ports_m1284P+0x214>
     320:	ad e7       	ldi	r26, 0x7D	; 125
     322:	b2 e0       	ldi	r27, 0x02	; 2
     324:	e7 ec       	ldi	r30, 0xC7	; 199
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	83 e0       	ldi	r24, 0x03	; 3
     32a:	01 90       	ld	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	81 50       	subi	r24, 0x01	; 1
     330:	e1 f7       	brne	.-8      	; 0x32a <init_ports_m1284P+0x226>
     332:	af eb       	ldi	r26, 0xBF	; 191
     334:	b2 e0       	ldi	r27, 0x02	; 2
     336:	e4 ec       	ldi	r30, 0xC4	; 196
     338:	f1 e0       	ldi	r31, 0x01	; 1
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	01 90       	ld	r0, Z+
     33e:	0d 92       	st	X+, r0
     340:	81 50       	subi	r24, 0x01	; 1
     342:	e1 f7       	brne	.-8      	; 0x33c <init_ports_m1284P+0x238>
     344:	ae e3       	ldi	r26, 0x3E	; 62
     346:	b3 e0       	ldi	r27, 0x03	; 3
     348:	e1 ec       	ldi	r30, 0xC1	; 193
     34a:	f1 e0       	ldi	r31, 0x01	; 1
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	81 50       	subi	r24, 0x01	; 1
     354:	e1 f7       	brne	.-8      	; 0x34e <init_ports_m1284P+0x24a>
     356:	af e1       	ldi	r26, 0x1F	; 31
     358:	b3 e0       	ldi	r27, 0x03	; 3
     35a:	ee eb       	ldi	r30, 0xBE	; 190
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	01 90       	ld	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	81 50       	subi	r24, 0x01	; 1
     366:	e1 f7       	brne	.-8      	; 0x360 <init_ports_m1284P+0x25c>
     368:	a3 e5       	ldi	r26, 0x53	; 83
     36a:	b3 e0       	ldi	r27, 0x03	; 3
     36c:	eb eb       	ldi	r30, 0xBB	; 187
     36e:	f1 e0       	ldi	r31, 0x01	; 1
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	01 90       	ld	r0, Z+
     374:	0d 92       	st	X+, r0
     376:	81 50       	subi	r24, 0x01	; 1
     378:	e1 f7       	brne	.-8      	; 0x372 <init_ports_m1284P+0x26e>
     37a:	ab e2       	ldi	r26, 0x2B	; 43
     37c:	b3 e0       	ldi	r27, 0x03	; 3
     37e:	e8 eb       	ldi	r30, 0xB8	; 184
     380:	f1 e0       	ldi	r31, 0x01	; 1
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	01 90       	ld	r0, Z+
     386:	0d 92       	st	X+, r0
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	e1 f7       	brne	.-8      	; 0x384 <init_ports_m1284P+0x280>
}
     38c:	08 95       	ret

0000038e <init_tank_leds>:
PLed allLedsArray[] = {
				&Red1, &Red2, &Red3, &Red4, &Red5,
				&White1, &White2, &White3, &White4, &White5,
				&Yellow1, &Yellow2, &Green1, &Green2, &Green3 };

void init_tank_leds() {
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
	
	// TODO assign correct pins

	INIT_LED(White1, PinA1)
     392:	c6 e5       	ldi	r28, 0x56	; 86
     394:	d3 e0       	ldi	r29, 0x03	; 3
     396:	d0 93 5a 03 	sts	0x035A, r29
     39a:	c0 93 59 03 	sts	0x0359, r28

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(White2, PinA1)
     3a4:	d0 93 eb 02 	sts	0x02EB, r29
     3a8:	c0 93 ea 02 	sts	0x02EA, r28
     3ac:	ce 01       	movw	r24, r28
     3ae:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(White3, PinA1)
     3b2:	d0 93 1b 03 	sts	0x031B, r29
     3b6:	c0 93 1a 03 	sts	0x031A, r28
     3ba:	ce 01       	movw	r24, r28
     3bc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(White4, PinA1)
     3c0:	d0 93 c3 02 	sts	0x02C3, r29
     3c4:	c0 93 c2 02 	sts	0x02C2, r28
     3c8:	ce 01       	movw	r24, r28
     3ca:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(White5, PinA1)
     3ce:	d0 93 f8 02 	sts	0x02F8, r29
     3d2:	c0 93 f7 02 	sts	0x02F7, r28
     3d6:	ce 01       	movw	r24, r28
     3d8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>

	INIT_LED(Red1, PinA1)
     3dc:	d0 93 27 03 	sts	0x0327, r29
     3e0:	c0 93 26 03 	sts	0x0326, r28
     3e4:	ce 01       	movw	r24, r28
     3e6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Red2, PinA1)
     3ea:	d0 93 cf 02 	sts	0x02CF, r29
     3ee:	c0 93 ce 02 	sts	0x02CE, r28
     3f2:	ce 01       	movw	r24, r28
     3f4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Red3, PinA1)
     3f8:	d0 93 69 02 	sts	0x0269, r29
     3fc:	c0 93 68 02 	sts	0x0268, r28
     400:	ce 01       	movw	r24, r28
     402:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Red4, PinA1)
     406:	d0 93 cd 02 	sts	0x02CD, r29
     40a:	c0 93 cc 02 	sts	0x02CC, r28
     40e:	ce 01       	movw	r24, r28
     410:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Red5, PinA1)
     414:	d0 93 19 03 	sts	0x0319, r29
     418:	c0 93 18 03 	sts	0x0318, r28
     41c:	ce 01       	movw	r24, r28
     41e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>

	INIT_LED(Green1, PinA1)
     422:	d0 93 6b 02 	sts	0x026B, r29
     426:	c0 93 6a 02 	sts	0x026A, r28
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Green2, PinA1)
     430:	d0 93 c5 02 	sts	0x02C5, r29
     434:	c0 93 c4 02 	sts	0x02C4, r28
     438:	ce 01       	movw	r24, r28
     43a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Green3, PinA1)
     43e:	d0 93 bb 02 	sts	0x02BB, r29
     442:	c0 93 ba 02 	sts	0x02BA, r28
     446:	ce 01       	movw	r24, r28
     448:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Yellow1, PinA1)
     44c:	d0 93 0a 03 	sts	0x030A, r29
     450:	c0 93 09 03 	sts	0x0309, r28
     454:	ce 01       	movw	r24, r28
     456:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	INIT_LED(Yellow2, PinA1)
     45a:	d0 93 ed 02 	sts	0x02ED, r29
     45e:	c0 93 ec 02 	sts	0x02EC, r28
     462:	ce 01       	movw	r24, r28
     464:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 5)
     468:	ab e8       	ldi	r26, 0x8B	; 139
     46a:	b2 e0       	ldi	r27, 0x02	; 2
     46c:	e5 eb       	ldi	r30, 0xB5	; 181
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	81 50       	subi	r24, 0x01	; 1
     478:	e1 f7       	brne	.-8      	; 0x472 <init_tank_leds+0xe4>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     47a:	aa e7       	ldi	r26, 0x7A	; 122
     47c:	b2 e0       	ldi	r27, 0x02	; 2
     47e:	e2 eb       	ldi	r30, 0xB2	; 178
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	81 50       	subi	r24, 0x01	; 1
     48a:	e1 f7       	brne	.-8      	; 0x484 <init_tank_leds+0xf6>
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
     48c:	a7 ee       	ldi	r26, 0xE7	; 231
     48e:	b2 e0       	ldi	r27, 0x02	; 2
     490:	ef ea       	ldi	r30, 0xAF	; 175
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	81 50       	subi	r24, 0x01	; 1
     49c:	e1 f7       	brne	.-8      	; 0x496 <init_tank_leds+0x108>
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
     49e:	a4 ee       	ldi	r26, 0xE4	; 228
     4a0:	b2 e0       	ldi	r27, 0x02	; 2
     4a2:	ec ea       	ldi	r30, 0xAC	; 172
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	01 90       	ld	r0, Z+
     4aa:	0d 92       	st	X+, r0
     4ac:	81 50       	subi	r24, 0x01	; 1
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <init_tank_leds+0x11a>
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
     4b0:	a6 ec       	ldi	r26, 0xC6	; 198
     4b2:	b2 e0       	ldi	r27, 0x02	; 2
     4b4:	e9 ea       	ldi	r30, 0xA9	; 169
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	01 90       	ld	r0, Z+
     4bc:	0d 92       	st	X+, r0
     4be:	81 50       	subi	r24, 0x01	; 1
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <init_tank_leds+0x12c>
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
     4c2:	a4 ef       	ldi	r26, 0xF4	; 244
     4c4:	b2 e0       	ldi	r27, 0x02	; 2
     4c6:	e6 ea       	ldi	r30, 0xA6	; 166
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	01 90       	ld	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <init_tank_leds+0x13e>
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <initButton>:
#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
	setPinInput(button->pin);
     4da:	fc 01       	movw	r30, r24
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
}
     4e4:	08 95       	ret

000004e6 <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ec 01       	movw	r28, r24
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	0e 94 ff 06 	call	0xdfe	; 0xdfe <enablePinChangeInterrupt>
	setPinInput(button->button->pin);
     4f2:	e8 81       	ld	r30, Y
     4f4:	f9 81       	ldd	r31, Y+1	; 0x01
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <init_tank_buttons>:

void init_tank_buttons() {
	
	// TODO set pins correctly

	INIT_BUTTON(Button1, PinA1)
     504:	86 e5       	ldi	r24, 0x56	; 86
     506:	93 e0       	ldi	r25, 0x03	; 3
     508:	90 93 05 03 	sts	0x0305, r25
     50c:	80 93 04 03 	sts	0x0304, r24
#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
	setPinInput(button->pin);
     510:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
	INIT_BUTTON(Button2, PinA2)
     514:	8c eb       	ldi	r24, 0xBC	; 188
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	90 93 84 02 	sts	0x0284, r25
     51c:	80 93 83 02 	sts	0x0283, r24
     520:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
	INIT_BUTTON(Button3, PinA3)
     524:	88 ed       	ldi	r24, 0xD8	; 216
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	90 93 5f 03 	sts	0x035F, r25
     52c:	80 93 5e 03 	sts	0x035E, r24
     530:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
	INIT_BUTTON(Button4, PinA4)
     534:	88 e8       	ldi	r24, 0x88	; 136
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	90 93 23 03 	sts	0x0323, r25
     53c:	80 93 22 03 	sts	0x0322, r24
     540:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
	INIT_BUTTON(ButtonSwitch, PinA5)
     544:	87 eb       	ldi	r24, 0xB7	; 183
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	90 93 fa 02 	sts	0x02FA, r25
     54c:	80 93 f9 02 	sts	0x02F9, r24
     550:	0e 94 5d 07 	call	0xeba	; 0xeba <setPinInput>
}
     554:	08 95       	ret

00000556 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     556:	ac e9       	ldi	r26, 0x9C	; 156
     558:	b2 e0       	ldi	r27, 0x02	; 2
     55a:	ef e9       	ldi	r30, 0x9F	; 159
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	87 e0       	ldi	r24, 0x07	; 7
     560:	01 90       	ld	r0, Z+
     562:	0d 92       	st	X+, r0
     564:	81 50       	subi	r24, 0x01	; 1
     566:	e1 f7       	brne	.-8      	; 0x560 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     568:	ac e4       	ldi	r26, 0x4C	; 76
     56a:	b3 e0       	ldi	r27, 0x03	; 3
     56c:	e8 e9       	ldi	r30, 0x98	; 152
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	87 e0       	ldi	r24, 0x07	; 7
     572:	01 90       	ld	r0, Z+
     574:	0d 92       	st	X+, r0
     576:	81 50       	subi	r24, 0x01	; 1
     578:	e1 f7       	brne	.-8      	; 0x572 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     57a:	ae e0       	ldi	r26, 0x0E	; 14
     57c:	b3 e0       	ldi	r27, 0x03	; 3
     57e:	e1 e9       	ldi	r30, 0x91	; 145
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	01 90       	ld	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	81 50       	subi	r24, 0x01	; 1
     58a:	e1 f7       	brne	.-8      	; 0x584 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     58c:	a1 e6       	ldi	r26, 0x61	; 97
     58e:	b2 e0       	ldi	r27, 0x02	; 2
     590:	ea e8       	ldi	r30, 0x8A	; 138
     592:	f1 e0       	ldi	r31, 0x01	; 1
     594:	87 e0       	ldi	r24, 0x07	; 7
     596:	01 90       	ld	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	81 50       	subi	r24, 0x01	; 1
     59c:	e1 f7       	brne	.-8      	; 0x596 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     59e:	a0 ed       	ldi	r26, 0xD0	; 208
     5a0:	b2 e0       	ldi	r27, 0x02	; 2
     5a2:	e2 e8       	ldi	r30, 0x82	; 130
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     5b0:	a1 e4       	ldi	r26, 0x41	; 65
     5b2:	b3 e0       	ldi	r27, 0x03	; 3
     5b4:	ea e7       	ldi	r30, 0x7A	; 122
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	88 e0       	ldi	r24, 0x08	; 8
     5ba:	01 90       	ld	r0, Z+
     5bc:	0d 92       	st	X+, r0
     5be:	81 50       	subi	r24, 0x01	; 1
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     5c2:	a2 e7       	ldi	r26, 0x72	; 114
     5c4:	b2 e0       	ldi	r27, 0x02	; 2
     5c6:	e2 e7       	ldi	r30, 0x72	; 114
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	01 90       	ld	r0, Z+
     5ce:	0d 92       	st	X+, r0
     5d0:	81 50       	subi	r24, 0x01	; 1
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     5d4:	a6 e3       	ldi	r26, 0x36	; 54
     5d6:	b3 e0       	ldi	r27, 0x03	; 3
     5d8:	ea e6       	ldi	r30, 0x6A	; 106
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	88 e0       	ldi	r24, 0x08	; 8
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	81 50       	subi	r24, 0x01	; 1
     5e4:	e1 f7       	brne	.-8      	; 0x5de <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     5e6:	a9 ea       	ldi	r26, 0xA9	; 169
     5e8:	b2 e0       	ldi	r27, 0x02	; 2
     5ea:	e2 e6       	ldi	r30, 0x62	; 98
     5ec:	f1 e0       	ldi	r31, 0x01	; 1
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	01 90       	ld	r0, Z+
     5f2:	0d 92       	st	X+, r0
     5f4:	81 50       	subi	r24, 0x01	; 1
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     5f8:	ae e2       	ldi	r26, 0x2E	; 46
     5fa:	b3 e0       	ldi	r27, 0x03	; 3
     5fc:	ea e5       	ldi	r30, 0x5A	; 90
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	88 e0       	ldi	r24, 0x08	; 8
     602:	01 90       	ld	r0, Z+
     604:	0d 92       	st	X+, r0
     606:	81 50       	subi	r24, 0x01	; 1
     608:	e1 f7       	brne	.-8      	; 0x602 <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     60a:	a1 e9       	ldi	r26, 0x91	; 145
     60c:	b2 e0       	ldi	r27, 0x02	; 2
     60e:	e2 e5       	ldi	r30, 0x52	; 82
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	88 e0       	ldi	r24, 0x08	; 8
     614:	01 90       	ld	r0, Z+
     616:	0d 92       	st	X+, r0
     618:	81 50       	subi	r24, 0x01	; 1
     61a:	e1 f7       	brne	.-8      	; 0x614 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     61c:	a6 e5       	ldi	r26, 0x56	; 86
     61e:	b2 e0       	ldi	r27, 0x02	; 2
     620:	ea e4       	ldi	r30, 0x4A	; 74
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	01 90       	ld	r0, Z+
     628:	0d 92       	st	X+, r0
     62a:	81 50       	subi	r24, 0x01	; 1
     62c:	e1 f7       	brne	.-8      	; 0x626 <init_timer_m1284P+0xd0>
}
     62e:	08 95       	ret

00000630 <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	90 e4       	ldi	r25, 0x40	; 64
     634:	20 91 46 01 	lds	r18, 0x0146
     638:	30 91 47 01 	lds	r19, 0x0147
     63c:	82 1b       	sub	r24, r18
     63e:	93 0b       	sbc	r25, r19
     640:	90 93 45 02 	sts	0x0245, r25
     644:	80 93 44 02 	sts	0x0244, r24
	__malloc_margin = 0;
     648:	10 92 41 02 	sts	0x0241, r1
     64c:	10 92 40 02 	sts	0x0240, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     650:	60 91 4b 02 	lds	r22, 0x024B
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	6e 5f       	subi	r22, 0xFE	; 254
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <calloc>
     662:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	19 f0       	breq	.+6      	; 0x66e <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     668:	11 82       	std	Z+1, r1	; 0x01
     66a:	10 82       	st	Z, r1
     66c:	02 c0       	rjmp	.+4      	; 0x672 <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     66e:	e0 e0       	ldi	r30, 0x00	; 0
     670:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     672:	f0 93 4d 02 	sts	0x024D, r31
     676:	e0 93 4c 02 	sts	0x024C, r30
}
     67a:	08 95       	ret

0000067c <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <createProcessBase3+0x16>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	d8 2e       	mov	r13, r24
     698:	c9 2e       	mov	r12, r25
     69a:	7b 01       	movw	r14, r22
     69c:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     69e:	ca 01       	movw	r24, r20
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	29 83       	std	Y+1, r18	; 0x01
     6a6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <calloc>
     6aa:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     6ac:	29 81       	ldd	r18, Y+1	; 0x01
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	b1 f1       	breq	.+108    	; 0x71e <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     6b2:	a5 01       	movw	r20, r10
     6b4:	41 50       	subi	r20, 0x01	; 1
     6b6:	50 40       	sbci	r21, 0x00	; 0
     6b8:	48 0f       	add	r20, r24
     6ba:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     6bc:	87 e7       	ldi	r24, 0x77	; 119
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	fa 01       	movw	r30, r20
     6c2:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     6c8:	fa 01       	movw	r30, r20
     6ca:	32 97       	sbiw	r30, 0x02	; 2
     6cc:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     6ce:	fa 01       	movw	r30, r20
     6d0:	33 97       	sbiw	r30, 0x03	; 3
     6d2:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     6d4:	62 2f       	mov	r22, r18
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	6e 5f       	subi	r22, 0xFE	; 254
     6da:	7f 4f       	sbci	r23, 0xFF	; 255
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	49 83       	std	Y+1, r20	; 0x01
     6e2:	5a 83       	std	Y+2, r21	; 0x02
     6e4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <calloc>
     6e8:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     6ea:	49 81       	ldd	r20, Y+1	; 0x01
     6ec:	5a 81       	ldd	r21, Y+2	; 0x02
     6ee:	00 97       	sbiw	r24, 0x00	; 0
     6f0:	49 f0       	breq	.+18     	; 0x704 <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     6f2:	ca 01       	movw	r24, r20
     6f4:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     6f6:	f9 01       	movw	r30, r18
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     6fc:	e1 14       	cp	r14, r1
     6fe:	f1 04       	cpc	r15, r1
     700:	31 f4       	brne	.+12     	; 0x70e <createProcessBase3+0x92>
     702:	04 c0       	rjmp	.+8      	; 0x70c <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     704:	c8 01       	movw	r24, r16
     706:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <free>
     70a:	09 c0       	rjmp	.+18     	; 0x71e <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     70c:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     70e:	fa 01       	movw	r30, r20
     710:	7e 97       	sbiw	r30, 0x1e	; 30
     712:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     714:	4f 51       	subi	r20, 0x1F	; 31
     716:	50 40       	sbci	r21, 0x00	; 0
     718:	fa 01       	movw	r30, r20
     71a:	f0 82       	st	Z, r15
	return result;
     71c:	02 c0       	rjmp	.+4      	; 0x722 <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     722:	c9 01       	movw	r24, r18
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	cf 91       	pop	r28
     72a:	df 91       	pop	r29
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	08 95       	ret

0000073e <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
     73e:	40 91 46 01 	lds	r20, 0x0146
     742:	50 91 47 01 	lds	r21, 0x0147
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	0e 94 3e 03 	call	0x67c	; 0x67c <createProcessBase3>
}
     74c:	08 95       	ret

0000074e <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	0e 94 9f 03 	call	0x73e	; 0x73e <createProcessBase2>
}
     756:	08 95       	ret

00000758 <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
	PushProcessContext()
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	0f 92       	push	r0
     760:	0b b6       	in	r0, 0x3b	; 59
     762:	0f 92       	push	r0
     764:	1f 92       	push	r1
     766:	11 24       	eor	r1, r1
     768:	2f 92       	push	r2
     76a:	3f 92       	push	r3
     76c:	4f 92       	push	r4
     76e:	5f 92       	push	r5
     770:	6f 92       	push	r6
     772:	7f 92       	push	r7
     774:	8f 92       	push	r8
     776:	9f 92       	push	r9
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	2f 93       	push	r18
     78a:	3f 93       	push	r19
     78c:	4f 93       	push	r20
     78e:	5f 93       	push	r21
     790:	6f 93       	push	r22
     792:	7f 93       	push	r23
     794:	8f 93       	push	r24
     796:	9f 93       	push	r25
     798:	af 93       	push	r26
     79a:	bf 93       	push	r27
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     7a4:	dc 01       	movw	r26, r24
	StoreContextStack()
     7a6:	0d b6       	in	r0, 0x3d	; 61
     7a8:	0d 92       	st	X+, r0
     7aa:	0e b6       	in	r0, 0x3e	; 62
     7ac:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     7ae:	db 01       	movw	r26, r22
	RestoreContextStack()
     7b0:	0d 90       	ld	r0, X+
     7b2:	0d be       	out	0x3d, r0	; 61
     7b4:	0d 90       	ld	r0, X+
     7b6:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	df 90       	pop	r13
     7de:	cf 90       	pop	r12
     7e0:	bf 90       	pop	r11
     7e2:	af 90       	pop	r10
     7e4:	9f 90       	pop	r9
     7e6:	8f 90       	pop	r8
     7e8:	7f 90       	pop	r7
     7ea:	6f 90       	pop	r6
     7ec:	5f 90       	pop	r5
     7ee:	4f 90       	pop	r4
     7f0:	3f 90       	pop	r3
     7f2:	2f 90       	pop	r2
     7f4:	1f 90       	pop	r1
     7f6:	0f 90       	pop	r0
     7f8:	0b be       	out	0x3b, r0	; 59
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0

	sei();
     800:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     802:	08 95       	ret

00000804 <getCurrentProcess>:

inline Process getCurrentProcess() {
	return (Process) __current_process;
}
     804:	80 91 4c 02 	lds	r24, 0x024C
     808:	90 91 4d 02 	lds	r25, 0x024D
     80c:	08 95       	ret

0000080e <switchProcess>:

void switchProcess(Process newProcess) {
     80e:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     810:	80 91 4c 02 	lds	r24, 0x024C
     814:	90 91 4d 02 	lds	r25, 0x024D
	__current_process = newProcess;
     818:	70 93 4d 02 	sts	0x024D, r23
     81c:	60 93 4c 02 	sts	0x024C, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     820:	0e 94 ac 03 	call	0x758	; 0x758 <switchContext>
}
     824:	08 95       	ret

00000826 <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     82c:	2a 5f       	subi	r18, 0xFA	; 250
     82e:	0e 94 3e 03 	call	0x67c	; 0x67c <createProcessBase3>
     832:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	e9 f0       	breq	.+58     	; 0x872 <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     838:	dc 01       	movw	r26, r24
     83a:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     83c:	80 91 48 01 	lds	r24, 0x0148
     840:	90 91 49 01 	lds	r25, 0x0149
     844:	95 83       	std	Z+5, r25	; 0x05
     846:	84 83       	std	Z+4, r24	; 0x04
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	90 93 49 01 	sts	0x0149, r25
     84e:	80 93 48 01 	sts	0x0148, r24
	ext->stackSize = stackSize;
     852:	13 96       	adiw	r26, 0x03	; 3
     854:	dc 93       	st	X, r29
     856:	ce 93       	st	-X, r28
     858:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     85a:	27 e2       	ldi	r18, 0x27	; 39
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	2c 1b       	sub	r18, r28
     860:	3d 0b       	sbc	r19, r29
     862:	80 81       	ld	r24, Z
     864:	91 81       	ldd	r25, Z+1	; 0x01
     866:	82 0f       	add	r24, r18
     868:	93 1f       	adc	r25, r19
     86a:	15 96       	adiw	r26, 0x05	; 5
     86c:	9c 93       	st	X, r25
     86e:	8e 93       	st	-X, r24
     870:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     872:	cf 01       	movw	r24, r30
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
     87a:	40 91 46 01 	lds	r20, 0x0146
     87e:	50 91 47 01 	lds	r21, 0x0147
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	0e 94 13 04 	call	0x826	; 0x826 <createProcess3>
}
     888:	08 95       	ret

0000088a <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 3d 04 	call	0x87a	; 0x87a <createProcess2>
}
     892:	08 95       	ret

00000894 <freeProcess>:

void freeProcess(Process process) {
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     89a:	80 91 4c 02 	lds	r24, 0x024C
     89e:	90 91 4d 02 	lds	r25, 0x024D
     8a2:	c8 17       	cp	r28, r24
     8a4:	d9 07       	cpc	r29, r25
     8a6:	69 f0       	breq	.+26     	; 0x8c2 <freeProcess+0x2e>
     8a8:	fe 01       	movw	r30, r28
     8aa:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     8ac:	8c 81       	ldd	r24, Y+4	; 0x04
     8ae:	9d 81       	ldd	r25, Y+5	; 0x05
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	21 f0       	breq	.+8      	; 0x8bc <freeProcess+0x28>
		free(pcb->stackTop);
     8b4:	84 81       	ldd	r24, Z+4	; 0x04
     8b6:	95 81       	ldd	r25, Z+5	; 0x05
     8b8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <free>
	}
	free(process);
     8bc:	ce 01       	movw	r24, r28
     8be:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <free>
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
	return ProcMem(process)->stackSize;
}
     8c8:	fc 01       	movw	r30, r24
     8ca:	86 81       	ldd	r24, Z+6	; 0x06
     8cc:	08 95       	ret

000008ce <getFreeProcessStackSize>:

uint16_t getFreeProcessStackSize(Process process) {
     8ce:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     8d0:	20 85       	ldd	r18, Z+8	; 0x08
     8d2:	31 85       	ldd	r19, Z+9	; 0x09
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	28 1b       	sub	r18, r24
     8da:	39 0b       	sbc	r19, r25
}
     8dc:	c9 01       	movw	r24, r18
     8de:	08 95       	ret

000008e0 <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     8e0:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     8e2:	84 81       	ldd	r24, Z+4	; 0x04
     8e4:	95 81       	ldd	r25, Z+5	; 0x05
     8e6:	08 95       	ret

000008e8 <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
	return ProcMem(proc) + ADDITIONAL_MEMORY;
     8e8:	9c 01       	movw	r18, r24
     8ea:	28 5d       	subi	r18, 0xD8	; 216
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
}
     8ee:	c9 01       	movw	r24, r18
     8f0:	08 95       	ret

000008f2 <init_process>:
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
     8f2:	80 91 4b 02 	lds	r24, 0x024B
     8f6:	8a 5f       	subi	r24, 0xFA	; 250
     8f8:	80 93 4b 02 	sts	0x024B, r24
	init_process_base();
     8fc:	0e 94 18 03 	call	0x630	; 0x630 <init_process_base>
     900:	a0 91 4c 02 	lds	r26, 0x024C
     904:	b0 91 4d 02 	lds	r27, 0x024D
     908:	fd 01       	movw	r30, r26
     90a:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     90c:	15 96       	adiw	r26, 0x05	; 5
     90e:	1c 92       	st	X, r1
     910:	1e 92       	st	-X, r1
     912:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     914:	80 91 46 01 	lds	r24, 0x0146
     918:	90 91 47 01 	lds	r25, 0x0147
     91c:	93 83       	std	Z+3, r25	; 0x03
     91e:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     920:	80 91 44 02 	lds	r24, 0x0244
     924:	90 91 45 02 	lds	r25, 0x0245
     928:	95 83       	std	Z+5, r25	; 0x05
     92a:	84 83       	std	Z+4, r24	; 0x04
}
     92c:	08 95       	ret

0000092e <init_idle_scheduler>:

Process __idle_process;

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
     92e:	87 e7       	ldi	r24, 0x77	; 119
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	40 e4       	ldi	r20, 0x40	; 64
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	0e 94 13 04 	call	0x826	; 0x826 <createProcess3>
     940:	90 93 25 03 	sts	0x0325, r25
     944:	80 93 24 03 	sts	0x0324, r24
}
     948:	08 95       	ret

0000094a <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
}
     94a:	80 91 24 03 	lds	r24, 0x0324
     94e:	90 91 25 03 	lds	r25, 0x0325
     952:	08 95       	ret

00000954 <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     958:	c1 e6       	ldi	r28, 0x61	; 97
     95a:	d2 e0       	ldi	r29, 0x02	; 2
     95c:	ce 01       	movw	r24, r28
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	0e 94 40 08 	call	0x1080	; 0x1080 <setWaveformGenerationMode>
	setTimerCompareValue(timer, 2500);
     966:	81 e9       	ldi	r24, 0x91	; 145
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	64 ec       	ldi	r22, 0xC4	; 196
     96c:	79 e0       	ldi	r23, 0x09	; 9
     96e:	0e 94 0f 09 	call	0x121e	; 0x121e <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     972:	ce 01       	movw	r24, r28
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
     982:	81 e9       	ldi	r24, 0x91	; 145
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 e7 08 	call	0x11ce	; 0x11ce <enableTimerInterrupt>
	sei();
     98a:	78 94       	sei
}
     98c:	08 95       	ret
#include "scheduler.kernel.h"

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     98e:	08 95       	ret

00000990 <schedule>:

// Regular header-files
#include "../kernel.h"

Process schedule(BOOL fromTimer) {
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     996:	0e 94 c1 05 	call	0xb82	; 0xb82 <dms_schedule>
     99a:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	51 f4       	brne	.+20     	; 0x9b4 <schedule+0x24>
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 bd 09 	call	0x137a	; 0x137a <rr_schedule>
     9a6:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	21 f4       	brne	.+8      	; 0x9b4 <schedule+0x24>
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
     9ac:	20 91 24 03 	lds	r18, 0x0324
     9b0:	30 91 25 03 	lds	r19, 0x0325
	return p;
}
     9b4:	c9 01       	movw	r24, r18
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <__vector_32>:
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
#endif
	// First push the current context, before any register may be modified.
	PushProcessContext()
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	0f 92       	push	r0
     9c4:	0b b6       	in	r0, 0x3b	; 59
     9c6:	0f 92       	push	r0
     9c8:	1f 92       	push	r1
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 92       	push	r2
     9ce:	3f 92       	push	r3
     9d0:	4f 92       	push	r4
     9d2:	5f 92       	push	r5
     9d4:	6f 92       	push	r6
     9d6:	7f 92       	push	r7
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     a08:	80 91 4e 02 	lds	r24, 0x024E
     a0c:	90 91 4f 02 	lds	r25, 0x024F
     a10:	a0 91 50 02 	lds	r26, 0x0250
     a14:	b0 91 51 02 	lds	r27, 0x0251
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	a1 1d       	adc	r26, r1
     a1c:	b1 1d       	adc	r27, r1
     a1e:	80 93 4e 02 	sts	0x024E, r24
     a22:	90 93 4f 02 	sts	0x024F, r25
     a26:	a0 93 50 02 	sts	0x0250, r26
     a2a:	b0 93 51 02 	sts	0x0251, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     a2e:	a0 91 4c 02 	lds	r26, 0x024C
	asm volatile("lds r27, __current_process + 1");
     a32:	b0 91 4d 02 	lds	r27, 0x024D
	StoreContextStack()
     a36:	0d b6       	in	r0, 0x3d	; 61
     a38:	0d 92       	st	X+, r0
     a3a:	0e b6       	in	r0, 0x3e	; 62
     a3c:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 c8 04 	call	0x990	; 0x990 <schedule>
     a46:	90 93 4d 02 	sts	0x024D, r25
     a4a:	80 93 4c 02 	sts	0x024C, r24
	if (__current_process == InvalidProcess) {
     a4e:	00 97       	sbiw	r24, 0x00	; 0
     a50:	11 f4       	brne	.+4      	; 0xa56 <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     a52:	0e 94 11 0a 	call	0x1422	; 0x1422 <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     a56:	dc 01       	movw	r26, r24
	RestoreContextStack()
     a58:	0d 90       	ld	r0, X+
     a5a:	0d be       	out	0x3d, r0	; 61
     a5c:	0d 90       	ld	r0, X+
     a5e:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     a60:	ff 91       	pop	r31
     a62:	ef 91       	pop	r30
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	1f 90       	pop	r1
     a9e:	0f 90       	pop	r0
     aa0:	0b be       	out	0x3b, r0	; 59
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     aa8:	18 95       	reti

00000aaa <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
     aaa:	80 b7       	in	r24, 0x30	; 48
     aac:	80 68       	ori	r24, 0x80	; 128
     aae:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
     ab0:	e4 e6       	ldi	r30, 0x64	; 100
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	80 66       	ori	r24, 0x60	; 96
     ab8:	80 83       	st	Z, r24
	
	// Watchdog-timer
	// Enabled through the WDTON-fuse-bit. Explicitely disable here.
	// Configure the prescaler -- WDT system-reset after 0,5 s without wdt-instruction.
	WDTCSR = _BV(WDCE);
     aba:	e0 e6       	ldi	r30, 0x60	; 96
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 e1       	ldi	r24, 0x10	; 16
     ac0:	80 83       	st	Z, r24
	// WDP3:0 = 0101 - 0,5s timeout
	WDTCSR |= // _BV(WDP3) |
     ac2:	80 81       	ld	r24, Z
     ac4:	85 60       	ori	r24, 0x05	; 5
     ac6:	80 83       	st	Z, r24
			_BV(WDP0);
	
	// BOD - TODO configure?
	
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
     ac8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <init_process>
	rr_captureMainProcess(PrioNormal);
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 03 0a 	call	0x1406	; 0x1406 <rr_captureMainProcess>
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     ad4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <before_scheduler>
	start_scheduler();
     ad8:	0e 94 c1 04 	call	0x982	; 0x982 <start_scheduler>
}
     adc:	08 95       	ret

00000ade <MyPeriodicJob>:

volatile uint16_t counter = 0;
volatile uint16_t main_counter = 0;

void MyPeriodicJob() {
	counter++;
     ade:	80 91 46 02 	lds	r24, 0x0246
     ae2:	90 91 47 02 	lds	r25, 0x0247
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	90 93 47 02 	sts	0x0247, r25
     aec:	80 93 46 02 	sts	0x0246, r24
}
     af0:	08 95       	ret

00000af2 <before_scheduler>:

void before_scheduler() {
	createPeriodicJob(&MyPeriodicJob, 50, 0);
     af2:	8f e6       	ldi	r24, 0x6F	; 111
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	42 e3       	ldi	r20, 0x32	; 50
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	0e 94 72 06 	call	0xce4	; 0xce4 <createPeriodicJob>
}
     b04:	08 95       	ret

00000b06 <main>:

int main() {
	// This will continue as rr-thread.
	while (1) {
		main_counter++;
     b06:	80 91 48 02 	lds	r24, 0x0248
     b0a:	90 91 49 02 	lds	r25, 0x0249
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	90 93 49 02 	sts	0x0249, r25
     b14:	80 93 48 02 	sts	0x0248, r24
     b18:	f6 cf       	rjmp	.-20     	; 0xb06 <main>

00000b1a <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
	PJob job = JobMem(process);
     b22:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     b26:	e8 2e       	mov	r14, r24
     b28:	e7 01       	movw	r28, r14
     b2a:	7e 01       	movw	r14, r28
     b2c:	f9 2e       	mov	r15, r25
     b2e:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
     b30:	e9 81       	ldd	r30, Y+1	; 0x01
     b32:	fa 81       	ldd	r31, Y+2	; 0x02
     b34:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
     b36:	1c 86       	std	Y+12, r1	; 0x0c
     b38:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
     b3a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <schedule_next>
     b3e:	f8 cf       	rjmp	.-16     	; 0xb30 <AperiodicJobWrapper+0x16>

00000b40 <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
	PJob job = JobMem(process);
     b48:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     b4c:	e8 2e       	mov	r14, r24
     b4e:	e7 01       	movw	r28, r14
     b50:	7e 01       	movw	r14, r28
     b52:	f9 2e       	mov	r15, r25
     b54:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	09 95       	icall
		periodicJob->nextPeriod += job->period;
     b5c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b5e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b60:	ad 85       	ldd	r26, Y+13	; 0x0d
     b62:	be 85       	ldd	r27, Y+14	; 0x0e
     b64:	2d 81       	ldd	r18, Y+5	; 0x05
     b66:	3e 81       	ldd	r19, Y+6	; 0x06
     b68:	4f 81       	ldd	r20, Y+7	; 0x07
     b6a:	58 85       	ldd	r21, Y+8	; 0x08
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	a4 1f       	adc	r26, r20
     b72:	b5 1f       	adc	r27, r21
     b74:	8b 87       	std	Y+11, r24	; 0x0b
     b76:	9c 87       	std	Y+12, r25	; 0x0c
     b78:	ad 87       	std	Y+13, r26	; 0x0d
     b7a:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
     b7c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <schedule_next>
     b80:	ea cf       	rjmp	.-44     	; 0xb56 <PeriodicJobWrapper+0x16>

00000b82 <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
     b8a:	c0 91 54 02 	lds	r28, 0x0254
     b8e:	d0 91 55 02 	lds	r29, 0x0255
	while (current) {
     b92:	25 c0       	rjmp	.+74     	; 0xbde <dms_schedule+0x5c>
		PJob job = JobMem(current);
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     b9a:	fc 01       	movw	r30, r24
		switch(job->jobType) {
     b9c:	81 85       	ldd	r24, Z+9	; 0x09
     b9e:	92 85       	ldd	r25, Z+10	; 0x0a
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	21 f0       	breq	.+8      	; 0xbac <dms_schedule+0x2a>
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	c1 f4       	brne	.+48     	; 0xbda <dms_schedule+0x58>
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
     bac:	63 85       	ldd	r22, Z+11	; 0x0b
     bae:	74 85       	ldd	r23, Z+12	; 0x0c
     bb0:	85 85       	ldd	r24, Z+13	; 0x0d
     bb2:	96 85       	ldd	r25, Z+14	; 0x0e
     bb4:	20 91 4e 02 	lds	r18, 0x024E
     bb8:	30 91 4f 02 	lds	r19, 0x024F
     bbc:	40 91 50 02 	lds	r20, 0x0250
     bc0:	50 91 51 02 	lds	r21, 0x0251
     bc4:	26 17       	cp	r18, r22
     bc6:	37 07       	cpc	r19, r23
     bc8:	48 07       	cpc	r20, r24
     bca:	59 07       	cpc	r21, r25
     bcc:	30 f0       	brcs	.+12     	; 0xbda <dms_schedule+0x58>
     bce:	09 c0       	rjmp	.+18     	; 0xbe2 <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
     bd0:	83 85       	ldd	r24, Z+11	; 0x0b
     bd2:	94 85       	ldd	r25, Z+12	; 0x0c
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 05       	cpc	r25, r1
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
     bda:	c3 81       	ldd	r28, Z+3	; 0x03
     bdc:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
     bde:	20 97       	sbiw	r28, 0x00	; 0
     be0:	c9 f6       	brne	.-78     	; 0xb94 <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
     be2:	ce 01       	movw	r24, r28
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	8c 01       	movw	r16, r24
     bf8:	eb 01       	movw	r28, r22
	if (!processListHead) {
     bfa:	80 91 54 02 	lds	r24, 0x0254
     bfe:	90 91 55 02 	lds	r25, 0x0255
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	39 f4       	brne	.+14     	; 0xc14 <insertJobIntoList+0x26>
		processListHead = process;
     c06:	10 93 55 02 	sts	0x0255, r17
     c0a:	00 93 54 02 	sts	0x0254, r16
		job->nextJob = NULL;
     c0e:	1c 82       	std	Y+4, r1	; 0x04
     c10:	1b 82       	std	Y+3, r1	; 0x03
     c12:	2d c0       	rjmp	.+90     	; 0xc6e <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
     c14:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     c18:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
     c1a:	65 81       	ldd	r22, Z+5	; 0x05
     c1c:	76 81       	ldd	r23, Z+6	; 0x06
     c1e:	87 81       	ldd	r24, Z+7	; 0x07
     c20:	90 85       	ldd	r25, Z+8	; 0x08
     c22:	2d 81       	ldd	r18, Y+5	; 0x05
     c24:	3e 81       	ldd	r19, Y+6	; 0x06
     c26:	4f 81       	ldd	r20, Y+7	; 0x07
     c28:	58 85       	ldd	r21, Y+8	; 0x08
     c2a:	26 17       	cp	r18, r22
     c2c:	37 07       	cpc	r19, r23
     c2e:	48 07       	cpc	r20, r24
     c30:	59 07       	cpc	r21, r25
     c32:	68 f0       	brcs	.+26     	; 0xc4e <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
     c34:	62 17       	cp	r22, r18
     c36:	73 07       	cpc	r23, r19
     c38:	84 07       	cpc	r24, r20
     c3a:	95 07       	cpc	r25, r21
     c3c:	21 f4       	brne	.+8      	; 0xc46 <insertJobIntoList+0x58>
     c3e:	90 81       	ld	r25, Z
     c40:	88 81       	ld	r24, Y
     c42:	98 17       	cp	r25, r24
     c44:	20 f0       	brcs	.+8      	; 0xc4e <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
     c46:	83 81       	ldd	r24, Z+3	; 0x03
     c48:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	19 f7       	brne	.-58     	; 0xc14 <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     c56:	fc 01       	movw	r30, r24
     c58:	83 81       	ldd	r24, Z+3	; 0x03
     c5a:	94 81       	ldd	r25, Z+4	; 0x04
     c5c:	9c 83       	std	Y+4, r25	; 0x04
     c5e:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     c68:	fc 01       	movw	r30, r24
     c6a:	14 83       	std	Z+4, r17	; 0x04
     c6c:	03 83       	std	Z+3, r16	; 0x03
	}
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     c78:	6f 92       	push	r6
     c7a:	7f 92       	push	r7
     c7c:	8f 92       	push	r8
     c7e:	9f 92       	push	r9
     c80:	af 92       	push	r10
     c82:	bf 92       	push	r11
     c84:	cf 92       	push	r12
     c86:	df 92       	push	r13
     c88:	ef 92       	push	r14
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	5c 01       	movw	r10, r24
     c96:	4b 01       	movw	r8, r22
     c98:	69 01       	movw	r12, r18
     c9a:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
     c9c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     ca0:	19 2f       	mov	r17, r25
     ca2:	68 2e       	mov	r6, r24
     ca4:	e3 01       	movw	r28, r6
     ca6:	3e 01       	movw	r6, r28
     ca8:	79 2e       	mov	r7, r25
     caa:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
     cac:	9a 82       	std	Y+2, r9	; 0x02
     cae:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
     cb0:	08 83       	st	Y, r16
	job->period = period;
     cb2:	cd 82       	std	Y+5, r12	; 0x05
     cb4:	de 82       	std	Y+6, r13	; 0x06
     cb6:	ef 82       	std	Y+7, r14	; 0x07
     cb8:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
     cba:	c5 01       	movw	r24, r10
     cbc:	b3 01       	movw	r22, r6
     cbe:	0e 94 f7 05 	call	0xbee	; 0xbee <insertJobIntoList>
	return job;
}
     cc2:	86 2d       	mov	r24, r6
     cc4:	91 2f       	mov	r25, r17
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	bf 90       	pop	r11
     cd8:	af 90       	pop	r10
     cda:	9f 90       	pop	r9
     cdc:	8f 90       	pop	r8
     cde:	7f 90       	pop	r7
     ce0:	6f 90       	pop	r6
     ce2:	08 95       	ret

00000ce4 <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	5a 01       	movw	r10, r20
     cfa:	6b 01       	movw	r12, r22
     cfc:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
     cfe:	40 91 46 01 	lds	r20, 0x0146
     d02:	50 91 47 01 	lds	r21, 0x0147
     d06:	80 ea       	ldi	r24, 0xA0	; 160
     d08:	95 e0       	ldi	r25, 0x05	; 5
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	2f e0       	ldi	r18, 0x0F	; 15
     d10:	0e 94 13 04 	call	0x826	; 0x826 <createProcess3>
     d14:	f8 2e       	mov	r15, r24
     d16:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
     d18:	be 01       	movw	r22, r28
     d1a:	a6 01       	movw	r20, r12
     d1c:	95 01       	movw	r18, r10
     d1e:	0e 94 3c 06 	call	0xc78	; 0xc78 <initializeJob>
     d22:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
     d24:	12 86       	std	Z+10, r1	; 0x0a
     d26:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
     d28:	20 91 4e 02 	lds	r18, 0x024E
     d2c:	30 91 4f 02 	lds	r19, 0x024F
     d30:	40 91 50 02 	lds	r20, 0x0250
     d34:	50 91 51 02 	lds	r21, 0x0251
     d38:	2a 0d       	add	r18, r10
     d3a:	3b 1d       	adc	r19, r11
     d3c:	4c 1d       	adc	r20, r12
     d3e:	5d 1d       	adc	r21, r13
     d40:	23 87       	std	Z+11, r18	; 0x0b
     d42:	34 87       	std	Z+12, r19	; 0x0c
     d44:	45 87       	std	Z+13, r20	; 0x0d
     d46:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
     d48:	8f 2d       	mov	r24, r15
     d4a:	91 2f       	mov	r25, r17
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	08 95       	ret

00000d60 <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	ec 01       	movw	r28, r24
     d74:	5a 01       	movw	r10, r20
     d76:	6b 01       	movw	r12, r22
     d78:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
     d7a:	40 91 46 01 	lds	r20, 0x0146
     d7e:	50 91 47 01 	lds	r21, 0x0147
     d82:	8d e8       	ldi	r24, 0x8D	; 141
     d84:	95 e0       	ldi	r25, 0x05	; 5
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	2d e0       	ldi	r18, 0x0D	; 13
     d8c:	0e 94 13 04 	call	0x826	; 0x826 <createProcess3>
     d90:	f8 2e       	mov	r15, r24
     d92:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
     d94:	be 01       	movw	r22, r28
     d96:	a6 01       	movw	r20, r12
     d98:	95 01       	movw	r18, r10
     d9a:	0e 94 3c 06 	call	0xc78	; 0xc78 <initializeJob>
     d9e:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	92 87       	std	Z+10, r25	; 0x0a
     da6:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
     da8:	14 86       	std	Z+12, r1	; 0x0c
     daa:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
     dac:	8f 2d       	mov	r24, r15
     dae:	91 2f       	mov	r25, r17
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	bf 90       	pop	r11
     dc0:	af 90       	pop	r10
     dc2:	08 95       	ret

00000dc4 <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
     dc4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <getProcessMemory>
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	fc 01       	movw	r30, r24
     dce:	34 87       	std	Z+12, r19	; 0x0c
     dd0:	23 87       	std	Z+11, r18	; 0x0b
}
     dd2:	08 95       	ret

00000dd4 <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 c8 04 	call	0x990	; 0x990 <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	11 f0       	breq	.+4      	; 0xde4 <schedule_next+0x10>
	switchProcess(next); // Will not return here.
     de0:	0e 94 07 04 	call	0x80e	; 0x80e <switchProcess>
     de4:	08 95       	ret

00000de6 <processor_idle>:
}

void processor_idle() {
	sleep_enable();
     de6:	83 b7       	in	r24, 0x33	; 51
     de8:	81 60       	ori	r24, 0x01	; 1
     dea:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
     dec:	83 b7       	in	r24, 0x33	; 51
     dee:	81 7f       	andi	r24, 0xF1	; 241
     df0:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
     df2:	78 94       	sei
	sleep_cpu();
     df4:	88 95       	sleep
}
     df6:	08 95       	ret

00000df8 <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
     df8:	0e 94 f3 06 	call	0xde6	; 0xde6 <processor_idle>
     dfc:	fd cf       	rjmp	.-6      	; 0xdf8 <processor_loop_idle>

00000dfe <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
     dfe:	80 32       	cpi	r24, 0x20	; 32
     e00:	18 f5       	brcc	.+70     	; 0xe48 <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
     e02:	58 2f       	mov	r21, r24
     e04:	56 95       	lsr	r21
     e06:	56 95       	lsr	r21
     e08:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
     e0a:	e5 2f       	mov	r30, r21
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	e0 5d       	subi	r30, 0xD0	; 208
     e14:	fd 4f       	sbci	r31, 0xFD	; 253
     e16:	01 90       	ld	r0, Z+
     e18:	f0 81       	ld	r31, Z
     e1a:	e0 2d       	mov	r30, r0
     e1c:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
     e1e:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	b9 01       	movw	r22, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <enablePinChangeInterrupt+0x2e>
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	8a 95       	dec	r24
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <enablePinChangeInterrupt+0x2a>
     e30:	46 2b       	or	r20, r22
     e32:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
     e34:	80 91 68 00 	lds	r24, 0x0068
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <enablePinChangeInterrupt+0x40>
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	5a 95       	dec	r21
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <enablePinChangeInterrupt+0x3c>
     e42:	82 2b       	or	r24, r18
     e44:	80 93 68 00 	sts	0x0068, r24
     e48:	08 95       	ret

00000e4a <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
     e4a:	80 32       	cpi	r24, 0x20	; 32
     e4c:	c0 f4       	brcc	.+48     	; 0xe7e <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
     e4e:	e8 2f       	mov	r30, r24
     e50:	e6 95       	lsr	r30
     e52:	e6 95       	lsr	r30
     e54:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	e0 5d       	subi	r30, 0xD0	; 208
     e5e:	fd 4f       	sbci	r31, 0xFD	; 253
     e60:	01 90       	ld	r0, Z+
     e62:	f0 81       	ld	r31, Z
     e64:	e0 2d       	mov	r30, r0
     e66:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
     e68:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <disblePinChangeInterrupt+0x2a>
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	8a 95       	dec	r24
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <disblePinChangeInterrupt+0x26>
     e78:	20 95       	com	r18
     e7a:	29 23       	and	r18, r25
     e7c:	20 83       	st	Z, r18
     e7e:	08 95       	ret

00000e80 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
     e80:	dc 01       	movw	r26, r24
     e82:	14 96       	adiw	r26, 0x04	; 4
     e84:	ed 91       	ld	r30, X+
     e86:	fc 91       	ld	r31, X
     e88:	15 97       	sbiw	r26, 0x05	; 5
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	80 83       	st	Z, r24
}
     e8e:	08 95       	ret

00000e90 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
     e90:	dc 01       	movw	r26, r24
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	15 97       	sbiw	r26, 0x05	; 5
     e9a:	10 82       	st	Z, r1
}
     e9c:	08 95       	ret

00000e9e <setPinOutput>:

void setPinOutput(PPin pin) {
     e9e:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
     ea0:	ed 91       	ld	r30, X+
     ea2:	fc 91       	ld	r31, X
     ea4:	11 97       	sbiw	r26, 0x01	; 1
     ea6:	04 80       	ldd	r0, Z+4	; 0x04
     ea8:	f5 81       	ldd	r31, Z+5	; 0x05
     eaa:	e0 2d       	mov	r30, r0
     eac:	80 81       	ld	r24, Z
     eae:	12 96       	adiw	r26, 0x02	; 2
     eb0:	9c 91       	ld	r25, X
     eb2:	12 97       	sbiw	r26, 0x02	; 2
     eb4:	89 2b       	or	r24, r25
     eb6:	80 83       	st	Z, r24
}
     eb8:	08 95       	ret

00000eba <setPinInput>:

void setPinInput(PPin pin) {
     eba:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
     ebc:	ed 91       	ld	r30, X+
     ebe:	fc 91       	ld	r31, X
     ec0:	11 97       	sbiw	r26, 0x01	; 1
     ec2:	04 80       	ldd	r0, Z+4	; 0x04
     ec4:	f5 81       	ldd	r31, Z+5	; 0x05
     ec6:	e0 2d       	mov	r30, r0
     ec8:	90 81       	ld	r25, Z
     eca:	12 96       	adiw	r26, 0x02	; 2
     ecc:	8c 91       	ld	r24, X
     ece:	12 97       	sbiw	r26, 0x02	; 2
     ed0:	80 95       	com	r24
     ed2:	89 23       	and	r24, r25
     ed4:	80 83       	st	Z, r24
}
     ed6:	08 95       	ret

00000ed8 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
     ed8:	dc 01       	movw	r26, r24
     eda:	ed 91       	ld	r30, X+
     edc:	fc 91       	ld	r31, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	60 83       	st	Z, r22
}
     ee2:	08 95       	ret

00000ee4 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
     ee4:	dc 01       	movw	r26, r24
     ee6:	12 96       	adiw	r26, 0x02	; 2
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
     eec:	13 97       	sbiw	r26, 0x03	; 3
     eee:	80 81       	ld	r24, Z
}
     ef0:	08 95       	ret

00000ef2 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
     ef2:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
     ef4:	ed 91       	ld	r30, X+
     ef6:	fc 91       	ld	r31, X
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	01 90       	ld	r0, Z+
     efc:	f0 81       	ld	r31, Z
     efe:	e0 2d       	mov	r30, r0
     f00:	80 81       	ld	r24, Z
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	9c 91       	ld	r25, X
     f06:	12 97       	sbiw	r26, 0x02	; 2
     f08:	89 2b       	or	r24, r25
     f0a:	80 83       	st	Z, r24
}
     f0c:	08 95       	ret

00000f0e <setPinZero>:

void setPinZero(PPin pin) {
     f0e:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
     f10:	ed 91       	ld	r30, X+
     f12:	fc 91       	ld	r31, X
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	01 90       	ld	r0, Z+
     f18:	f0 81       	ld	r31, Z
     f1a:	e0 2d       	mov	r30, r0
     f1c:	90 81       	ld	r25, Z
     f1e:	12 96       	adiw	r26, 0x02	; 2
     f20:	8c 91       	ld	r24, X
     f22:	12 97       	sbiw	r26, 0x02	; 2
     f24:	80 95       	com	r24
     f26:	89 23       	and	r24, r25
     f28:	80 83       	st	Z, r24
}
     f2a:	08 95       	ret

00000f2c <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
     f2c:	61 15       	cp	r22, r1
     f2e:	71 05       	cpc	r23, r1
     f30:	19 f0       	breq	.+6      	; 0xf38 <writePin+0xc>
     f32:	0e 94 79 07 	call	0xef2	; 0xef2 <setPinOne>
     f36:	08 95       	ret
	else setPinZero(pin);
     f38:	0e 94 87 07 	call	0xf0e	; 0xf0e <setPinZero>
     f3c:	08 95       	ret

00000f3e <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
     f3e:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
     f40:	a0 81       	ld	r26, Z
     f42:	b1 81       	ldd	r27, Z+1	; 0x01
     f44:	12 96       	adiw	r26, 0x02	; 2
     f46:	0d 90       	ld	r0, X+
     f48:	bc 91       	ld	r27, X
     f4a:	a0 2d       	mov	r26, r0
     f4c:	8c 91       	ld	r24, X
     f4e:	92 81       	ldd	r25, Z+2	; 0x02
     f50:	89 23       	and	r24, r25
		return TRUE;
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	11 f4       	brne	.+4      	; 0xf5c <readPin+0x1e>
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
     f5c:	c9 01       	movw	r24, r18
     f5e:	08 95       	ret

00000f60 <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
     f60:	fc 01       	movw	r30, r24
     f62:	64 30       	cpi	r22, 0x04	; 4
     f64:	71 05       	cpc	r23, r1
     f66:	48 f4       	brcc	.+18     	; 0xf7a <setCompareMatchOutputMode+0x1a>
     f68:	db 01       	movw	r26, r22
     f6a:	a8 5c       	subi	r26, 0xC8	; 200
     f6c:	bd 4f       	sbci	r27, 0xFD	; 253
     f6e:	2c 91       	ld	r18, X
     f70:	64 5c       	subi	r22, 0xC4	; 196
     f72:	7d 4f       	sbci	r23, 0xFD	; 253
     f74:	db 01       	movw	r26, r22
     f76:	3c 91       	ld	r19, X
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <setCompareMatchOutputMode+0x1e>
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	95 81       	ldd	r25, Z+5	; 0x05
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	21 f4       	brne	.+8      	; 0xf90 <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
     f88:	36 95       	lsr	r19
     f8a:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
     f8c:	26 95       	lsr	r18
     f8e:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
     f90:	a0 81       	ld	r26, Z
     f92:	b1 81       	ldd	r27, Z+1	; 0x01
     f94:	11 96       	adiw	r26, 0x01	; 1
     f96:	0d 90       	ld	r0, X+
     f98:	bc 91       	ld	r27, X
     f9a:	a0 2d       	mov	r26, r0
     f9c:	8c 91       	ld	r24, X
     f9e:	83 2b       	or	r24, r19
     fa0:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
     fa2:	01 90       	ld	r0, Z+
     fa4:	f0 81       	ld	r31, Z
     fa6:	e0 2d       	mov	r30, r0
     fa8:	01 80       	ldd	r0, Z+1	; 0x01
     faa:	f2 81       	ldd	r31, Z+2	; 0x02
     fac:	e0 2d       	mov	r30, r0
     fae:	80 81       	ld	r24, Z
     fb0:	20 95       	com	r18
     fb2:	28 23       	and	r18, r24
     fb4:	20 83       	st	Z, r18
}
     fb6:	08 95       	ret

00000fb8 <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
     fb8:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
     fba:	80 81       	ld	r24, Z
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	82 70       	andi	r24, 0x02	; 2
     fc0:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
     fc2:	64 30       	cpi	r22, 0x04	; 4
     fc4:	71 05       	cpc	r23, r1
     fc6:	71 f1       	breq	.+92     	; 0x1024 <setTimerClockSelect+0x6c>
     fc8:	65 30       	cpi	r22, 0x05	; 5
     fca:	71 05       	cpc	r23, r1
     fcc:	68 f4       	brcc	.+26     	; 0xfe8 <setTimerClockSelect+0x30>
     fce:	61 30       	cpi	r22, 0x01	; 1
     fd0:	71 05       	cpc	r23, r1
     fd2:	f9 f0       	breq	.+62     	; 0x1012 <setTimerClockSelect+0x5a>
     fd4:	61 30       	cpi	r22, 0x01	; 1
     fd6:	71 05       	cpc	r23, r1
     fd8:	d8 f1       	brcs	.+118    	; 0x1050 <setTimerClockSelect+0x98>
     fda:	62 30       	cpi	r22, 0x02	; 2
     fdc:	71 05       	cpc	r23, r1
     fde:	e1 f0       	breq	.+56     	; 0x1018 <setTimerClockSelect+0x60>
     fe0:	63 30       	cpi	r22, 0x03	; 3
     fe2:	71 05       	cpc	r23, r1
     fe4:	a1 f4       	brne	.+40     	; 0x100e <setTimerClockSelect+0x56>
     fe6:	1b c0       	rjmp	.+54     	; 0x101e <setTimerClockSelect+0x66>
     fe8:	67 30       	cpi	r22, 0x07	; 7
     fea:	71 05       	cpc	r23, r1
     fec:	21 f1       	breq	.+72     	; 0x1036 <setTimerClockSelect+0x7e>
     fee:	68 30       	cpi	r22, 0x08	; 8
     ff0:	71 05       	cpc	r23, r1
     ff2:	38 f4       	brcc	.+14     	; 0x1002 <setTimerClockSelect+0x4a>
     ff4:	65 30       	cpi	r22, 0x05	; 5
     ff6:	71 05       	cpc	r23, r1
     ff8:	c1 f0       	breq	.+48     	; 0x102a <setTimerClockSelect+0x72>
     ffa:	66 30       	cpi	r22, 0x06	; 6
     ffc:	71 05       	cpc	r23, r1
     ffe:	39 f4       	brne	.+14     	; 0x100e <setTimerClockSelect+0x56>
    1000:	17 c0       	rjmp	.+46     	; 0x1030 <setTimerClockSelect+0x78>
    1002:	68 30       	cpi	r22, 0x08	; 8
    1004:	71 05       	cpc	r23, r1
    1006:	d1 f0       	breq	.+52     	; 0x103c <setTimerClockSelect+0x84>
    1008:	69 30       	cpi	r22, 0x09	; 9
    100a:	71 05       	cpc	r23, r1
    100c:	e1 f0       	breq	.+56     	; 0x1046 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	1d c0       	rjmp	.+58     	; 0x104c <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    1012:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    1014:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    1016:	27 c0       	rjmp	.+78     	; 0x1066 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    1018:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    101a:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    101c:	24 c0       	rjmp	.+72     	; 0x1066 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	e9 f4       	brne	.+58     	; 0x105c <setTimerClockSelect+0xa4>
    1022:	2d c0       	rjmp	.+90     	; 0x107e <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	b9 f0       	breq	.+46     	; 0x1056 <setTimerClockSelect+0x9e>
    1028:	19 c0       	rjmp	.+50     	; 0x105c <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	d1 f4       	brne	.+52     	; 0x1062 <setTimerClockSelect+0xaa>
    102e:	27 c0       	rjmp	.+78     	; 0x107e <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	a1 f0       	breq	.+40     	; 0x105c <setTimerClockSelect+0xa4>
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	a1 f0       	breq	.+40     	; 0x1062 <setTimerClockSelect+0xaa>
    103a:	07 c0       	rjmp	.+14     	; 0x104a <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	f9 f4       	brne	.+62     	; 0x107e <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    1040:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	10 c0       	rjmp	.+32     	; 0x1066 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	d1 f4       	brne	.+52     	; 0x107e <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    104a:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0b c0       	rjmp	.+22     	; 0x1066 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    1050:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1052:	87 e0       	ldi	r24, 0x07	; 7
    1054:	08 c0       	rjmp	.+16     	; 0x1066 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    1056:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    1058:	84 e0       	ldi	r24, 0x04	; 4
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    105c:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    105e:	83 e0       	ldi	r24, 0x03	; 3
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    1062:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    1064:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    1066:	a3 81       	ldd	r26, Z+3	; 0x03
    1068:	b4 81       	ldd	r27, Z+4	; 0x04
    106a:	2c 91       	ld	r18, X
    106c:	29 2b       	or	r18, r25
    106e:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    1070:	03 80       	ldd	r0, Z+3	; 0x03
    1072:	f4 81       	ldd	r31, Z+4	; 0x04
    1074:	e0 2d       	mov	r30, r0
    1076:	90 81       	ld	r25, Z
    1078:	80 95       	com	r24
    107a:	89 23       	and	r24, r25
    107c:	80 83       	st	Z, r24
    107e:	08 95       	ret

00001080 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
    1080:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    1082:	80 81       	ld	r24, Z
    1084:	82 ff       	sbrs	r24, 2
    1086:	54 c0       	rjmp	.+168    	; 0x1130 <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    1088:	65 30       	cpi	r22, 0x05	; 5
    108a:	71 05       	cpc	r23, r1
    108c:	b9 f1       	breq	.+110    	; 0x10fc <setWaveformGenerationMode+0x7c>
    108e:	66 30       	cpi	r22, 0x06	; 6
    1090:	71 05       	cpc	r23, r1
    1092:	b0 f4       	brcc	.+44     	; 0x10c0 <setWaveformGenerationMode+0x40>
    1094:	62 30       	cpi	r22, 0x02	; 2
    1096:	71 05       	cpc	r23, r1
    1098:	69 f1       	breq	.+90     	; 0x10f4 <setWaveformGenerationMode+0x74>
    109a:	63 30       	cpi	r22, 0x03	; 3
    109c:	71 05       	cpc	r23, r1
    109e:	40 f4       	brcc	.+16     	; 0x10b0 <setWaveformGenerationMode+0x30>
    10a0:	61 15       	cp	r22, r1
    10a2:	71 05       	cpc	r23, r1
    10a4:	19 f1       	breq	.+70     	; 0x10ec <setWaveformGenerationMode+0x6c>
    10a6:	61 30       	cpi	r22, 0x01	; 1
    10a8:	71 05       	cpc	r23, r1
    10aa:	09 f0       	breq	.+2      	; 0x10ae <setWaveformGenerationMode+0x2e>
    10ac:	8f c0       	rjmp	.+286    	; 0x11cc <setWaveformGenerationMode+0x14c>
    10ae:	6e c0       	rjmp	.+220    	; 0x118c <setWaveformGenerationMode+0x10c>
    10b0:	63 30       	cpi	r22, 0x03	; 3
    10b2:	71 05       	cpc	r23, r1
    10b4:	29 f1       	breq	.+74     	; 0x1100 <setWaveformGenerationMode+0x80>
    10b6:	64 30       	cpi	r22, 0x04	; 4
    10b8:	71 05       	cpc	r23, r1
    10ba:	09 f0       	breq	.+2      	; 0x10be <setWaveformGenerationMode+0x3e>
    10bc:	87 c0       	rjmp	.+270    	; 0x11cc <setWaveformGenerationMode+0x14c>
    10be:	24 c0       	rjmp	.+72     	; 0x1108 <setWaveformGenerationMode+0x88>
    10c0:	68 30       	cpi	r22, 0x08	; 8
    10c2:	71 05       	cpc	r23, r1
    10c4:	29 f1       	breq	.+74     	; 0x1110 <setWaveformGenerationMode+0x90>
    10c6:	69 30       	cpi	r22, 0x09	; 9
    10c8:	71 05       	cpc	r23, r1
    10ca:	40 f4       	brcc	.+16     	; 0x10dc <setWaveformGenerationMode+0x5c>
    10cc:	66 30       	cpi	r22, 0x06	; 6
    10ce:	71 05       	cpc	r23, r1
    10d0:	39 f1       	breq	.+78     	; 0x1120 <setWaveformGenerationMode+0xa0>
    10d2:	67 30       	cpi	r22, 0x07	; 7
    10d4:	71 05       	cpc	r23, r1
    10d6:	09 f0       	breq	.+2      	; 0x10da <setWaveformGenerationMode+0x5a>
    10d8:	79 c0       	rjmp	.+242    	; 0x11cc <setWaveformGenerationMode+0x14c>
    10da:	26 c0       	rjmp	.+76     	; 0x1128 <setWaveformGenerationMode+0xa8>
    10dc:	69 30       	cpi	r22, 0x09	; 9
    10de:	71 05       	cpc	r23, r1
    10e0:	d9 f0       	breq	.+54     	; 0x1118 <setWaveformGenerationMode+0x98>
    10e2:	6a 30       	cpi	r22, 0x0A	; 10
    10e4:	71 05       	cpc	r23, r1
    10e6:	09 f0       	breq	.+2      	; 0x10ea <setWaveformGenerationMode+0x6a>
    10e8:	71 c0       	rjmp	.+226    	; 0x11cc <setWaveformGenerationMode+0x14c>
    10ea:	10 c0       	rjmp	.+32     	; 0x110c <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    10ec:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    10ee:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    10f0:	88 e1       	ldi	r24, 0x18	; 24
    10f2:	4f c0       	rjmp	.+158    	; 0x1192 <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    10f4:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    10f6:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    10f8:	80 e1       	ldi	r24, 0x10	; 16
    10fa:	46 c0       	rjmp	.+140    	; 0x1188 <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
    10fc:	98 e1       	ldi	r25, 0x18	; 24
    10fe:	3a c0       	rjmp	.+116    	; 0x1174 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1100:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1102:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1104:	88 e1       	ldi	r24, 0x18	; 24
    1106:	40 c0       	rjmp	.+128    	; 0x1188 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
    1108:	90 e1       	ldi	r25, 0x10	; 16
    110a:	2f c0       	rjmp	.+94     	; 0x116a <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    110c:	90 e1       	ldi	r25, 0x10	; 16
    110e:	36 c0       	rjmp	.+108    	; 0x117c <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
    1110:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
    1112:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	42 c0       	rjmp	.+132    	; 0x119c <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
    1118:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
    111a:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    111c:	80 e1       	ldi	r24, 0x10	; 16
    111e:	27 c0       	rjmp	.+78     	; 0x116e <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1120:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
    1122:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1124:	88 e1       	ldi	r24, 0x18	; 24
    1126:	3a c0       	rjmp	.+116    	; 0x119c <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1128:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
    112a:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    112c:	88 e1       	ldi	r24, 0x18	; 24
    112e:	1f c0       	rjmp	.+62     	; 0x116e <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    1130:	62 30       	cpi	r22, 0x02	; 2
    1132:	71 05       	cpc	r23, r1
    1134:	c9 f0       	breq	.+50     	; 0x1168 <setWaveformGenerationMode+0xe8>
    1136:	63 30       	cpi	r22, 0x03	; 3
    1138:	71 05       	cpc	r23, r1
    113a:	40 f4       	brcc	.+16     	; 0x114c <setWaveformGenerationMode+0xcc>
    113c:	61 15       	cp	r22, r1
    113e:	71 05       	cpc	r23, r1
    1140:	79 f0       	breq	.+30     	; 0x1160 <setWaveformGenerationMode+0xe0>
    1142:	61 30       	cpi	r22, 0x01	; 1
    1144:	71 05       	cpc	r23, r1
    1146:	09 f0       	breq	.+2      	; 0x114a <setWaveformGenerationMode+0xca>
    1148:	41 c0       	rjmp	.+130    	; 0x11cc <setWaveformGenerationMode+0x14c>
    114a:	25 c0       	rjmp	.+74     	; 0x1196 <setWaveformGenerationMode+0x116>
    114c:	64 30       	cpi	r22, 0x04	; 4
    114e:	71 05       	cpc	r23, r1
    1150:	c1 f0       	breq	.+48     	; 0x1182 <setWaveformGenerationMode+0x102>
    1152:	64 30       	cpi	r22, 0x04	; 4
    1154:	71 05       	cpc	r23, r1
    1156:	88 f0       	brcs	.+34     	; 0x117a <setWaveformGenerationMode+0xfa>
    1158:	65 30       	cpi	r22, 0x05	; 5
    115a:	71 05       	cpc	r23, r1
    115c:	b9 f5       	brne	.+110    	; 0x11cc <setWaveformGenerationMode+0x14c>
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1160:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1162:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	15 c0       	rjmp	.+42     	; 0x1192 <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1168:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
    116a:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
    116c:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    116e:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
    1170:	16 c0       	rjmp	.+44     	; 0x119e <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    1172:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
    1174:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	fa cf       	rjmp	.-12     	; 0x116e <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    117a:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    117c:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    117e:	88 e0       	ldi	r24, 0x08	; 8
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    1182:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    1184:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1186:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    1188:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    118a:	09 c0       	rjmp	.+18     	; 0x119e <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    118c:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    118e:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    1190:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    1192:	23 e0       	ldi	r18, 0x03	; 3
    1194:	04 c0       	rjmp	.+8      	; 0x119e <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1196:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    1198:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    119a:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    119c:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    119e:	a1 81       	ldd	r26, Z+1	; 0x01
    11a0:	b2 81       	ldd	r27, Z+2	; 0x02
    11a2:	4c 91       	ld	r20, X
    11a4:	43 2b       	or	r20, r19
    11a6:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    11a8:	a1 81       	ldd	r26, Z+1	; 0x01
    11aa:	b2 81       	ldd	r27, Z+2	; 0x02
    11ac:	3c 91       	ld	r19, X
    11ae:	20 95       	com	r18
    11b0:	23 23       	and	r18, r19
    11b2:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    11b4:	a3 81       	ldd	r26, Z+3	; 0x03
    11b6:	b4 81       	ldd	r27, Z+4	; 0x04
    11b8:	2c 91       	ld	r18, X
    11ba:	29 2b       	or	r18, r25
    11bc:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    11be:	03 80       	ldd	r0, Z+3	; 0x03
    11c0:	f4 81       	ldd	r31, Z+4	; 0x04
    11c2:	e0 2d       	mov	r30, r0
    11c4:	90 81       	ld	r25, Z
    11c6:	80 95       	com	r24
    11c8:	89 23       	and	r24, r25
    11ca:	80 83       	st	Z, r24
    11cc:	08 95       	ret

000011ce <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    11ce:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    11d0:	ed 91       	ld	r30, X+
    11d2:	fc 91       	ld	r31, X
    11d4:	11 97       	sbiw	r26, 0x01	; 1
    11d6:	05 80       	ldd	r0, Z+5	; 0x05
    11d8:	f6 81       	ldd	r31, Z+6	; 0x06
    11da:	e0 2d       	mov	r30, r0
    11dc:	20 81       	ld	r18, Z
    11de:	14 96       	adiw	r26, 0x04	; 4
    11e0:	8d 91       	ld	r24, X+
    11e2:	9c 91       	ld	r25, X
    11e4:	15 97       	sbiw	r26, 0x05	; 5
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	11 f4       	brne	.+4      	; 0x11ee <enableTimerInterrupt+0x20>
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <enableTimerInterrupt+0x22>
    11ee:	84 e0       	ldi	r24, 0x04	; 4
    11f0:	82 2b       	or	r24, r18
    11f2:	80 83       	st	Z, r24
}
    11f4:	08 95       	ret

000011f6 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    11fc:	8e 81       	ldd	r24, Y+6	; 0x06
    11fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1200:	0e 94 4f 07 	call	0xe9e	; 0xe9e <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
    1204:	ce 01       	movw	r24, r28
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	0e 94 b0 07 	call	0xf60	; 0xf60 <setCompareMatchOutputMode>
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	0e 94 b0 07 	call	0xf60	; 0xf60 <setCompareMatchOutputMode>
}
    121c:	08 95       	ret

0000121e <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    121e:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    1220:	a0 81       	ld	r26, Z
    1222:	b1 81       	ldd	r27, Z+1	; 0x01
    1224:	8c 91       	ld	r24, X
    1226:	82 ff       	sbrs	r24, 2
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    122a:	8f b7       	in	r24, 0x3f	; 63
		cli();
    122c:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    122e:	a2 81       	ldd	r26, Z+2	; 0x02
    1230:	b3 81       	ldd	r27, Z+3	; 0x03
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	7c 93       	st	X, r23
    1236:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    1238:	02 80       	ldd	r0, Z+2	; 0x02
    123a:	f3 81       	ldd	r31, Z+3	; 0x03
    123c:	e0 2d       	mov	r30, r0
    123e:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    1240:	8f bf       	out	0x3f, r24	; 63
    1242:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    1244:	02 80       	ldd	r0, Z+2	; 0x02
    1246:	f3 81       	ldd	r31, Z+3	; 0x03
    1248:	e0 2d       	mov	r30, r0
    124a:	70 83       	st	Z, r23
    124c:	08 95       	ret

0000124e <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    124e:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    1250:	a0 81       	ld	r26, Z
    1252:	b1 81       	ldd	r27, Z+1	; 0x01
    1254:	8c 91       	ld	r24, X
    1256:	82 ff       	sbrs	r24, 2
    1258:	09 c0       	rjmp	.+18     	; 0x126c <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    125a:	2f b7       	in	r18, 0x3f	; 63
		cli();
    125c:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
    125e:	02 80       	ldd	r0, Z+2	; 0x02
    1260:	f3 81       	ldd	r31, Z+3	; 0x03
    1262:	e0 2d       	mov	r30, r0
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
    1268:	2f bf       	out	0x3f, r18	; 63
    126a:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    126c:	02 80       	ldd	r0, Z+2	; 0x02
    126e:	f3 81       	ldd	r31, Z+3	; 0x03
    1270:	e0 2d       	mov	r30, r0
    1272:	90 81       	ld	r25, Z
    1274:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
    1276:	08 95       	ret

00001278 <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	8c 01       	movw	r16, r24
    1282:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	64 e0       	ldi	r22, 0x04	; 4
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <calloc>
    1290:	fc 01       	movw	r30, r24
	elem->thread = thread;
    1292:	11 83       	std	Z+1, r17	; 0x01
    1294:	00 83       	st	Z, r16
	elem->next = queue->first;
    1296:	de 01       	movw	r26, r28
    1298:	aa 0f       	add	r26, r26
    129a:	bb 1f       	adc	r27, r27
    129c:	aa 0f       	add	r26, r26
    129e:	bb 1f       	adc	r27, r27
    12a0:	ac 0f       	add	r26, r28
    12a2:	bd 1f       	adc	r27, r29
    12a4:	aa 59       	subi	r26, 0x9A	; 154
    12a6:	bc 4f       	sbci	r27, 0xFC	; 252
    12a8:	8d 91       	ld	r24, X+
    12aa:	9c 91       	ld	r25, X
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	93 83       	std	Z+3, r25	; 0x03
    12b0:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	fc 93       	st	X, r31
    12b6:	ee 93       	st	-X, r30
	if (queue->count == 0)
    12b8:	14 96       	adiw	r26, 0x04	; 4
    12ba:	8c 91       	ld	r24, X
    12bc:	14 97       	sbiw	r26, 0x04	; 4
    12be:	88 23       	and	r24, r24
    12c0:	21 f4       	brne	.+8      	; 0x12ca <insertThreadIntoQueue+0x52>
		queue->current = elem;
    12c2:	13 96       	adiw	r26, 0x03	; 3
    12c4:	fc 93       	st	X, r31
    12c6:	ee 93       	st	-X, r30
    12c8:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
    12ca:	fe 01       	movw	r30, r28
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	ec 0f       	add	r30, r28
    12d6:	fd 1f       	adc	r31, r29
    12d8:	ea 59       	subi	r30, 0x9A	; 154
    12da:	fc 4f       	sbci	r31, 0xFC	; 252
    12dc:	84 81       	ldd	r24, Z+4	; 0x04
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
    12e2:	80 91 52 02 	lds	r24, 0x0252
    12e6:	90 91 53 02 	lds	r25, 0x0253
    12ea:	8c 17       	cp	r24, r28
    12ec:	9d 07       	cpc	r25, r29
    12ee:	20 f4       	brcc	.+8      	; 0x12f8 <insertThreadIntoQueue+0x80>
    12f0:	d0 93 53 02 	sts	0x0253, r29
    12f4:	c0 93 52 02 	sts	0x0252, r28
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	0f 91       	pop	r16
    1300:	08 95       	ret

00001302 <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
    130c:	0e 94 45 04 	call	0x88a	; 0x88a <createProcess>
    1310:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1312:	be 01       	movw	r22, r28
    1314:	0e 94 3c 09 	call	0x1278	; 0x1278 <insertThreadIntoQueue>
	return thread;
}
    1318:	c8 01       	movw	r24, r16
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	0e 94 81 09 	call	0x1302	; 0x1302 <createThread2>
}
    132c:	08 95       	ret

0000132e <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	eb 01       	movw	r28, r22
    1338:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
    133a:	0e 94 3d 04 	call	0x87a	; 0x87a <createProcess2>
    133e:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1340:	be 01       	movw	r22, r28
    1342:	0e 94 3c 09 	call	0x1278	; 0x1278 <insertThreadIntoQueue>
	return thread;
}
    1346:	c8 01       	movw	r24, r16
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	eb 01       	movw	r28, r22
    135c:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
    135e:	a9 01       	movw	r20, r18
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	0e 94 13 04 	call	0x826	; 0x826 <createProcess3>
    1366:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1368:	be 01       	movw	r22, r28
    136a:	0e 94 3c 09 	call	0x1278	; 0x1278 <insertThreadIntoQueue>
	return thread;
}
    136e:	c8 01       	movw	r24, r16
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    137a:	80 91 52 02 	lds	r24, 0x0252
    137e:	90 91 53 02 	lds	r25, 0x0253
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <rr_schedule+0xc>
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	29 f4       	brne	.+10     	; 0x1394 <rr_schedule+0x1a>
    138a:	10 92 52 02 	sts	0x0252, r1
    138e:	10 92 53 02 	sts	0x0253, r1
    1392:	10 c0       	rjmp	.+32     	; 0x13b4 <rr_schedule+0x3a>
    1394:	fc 01       	movw	r30, r24
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	e8 0f       	add	r30, r24
    13a0:	f9 1f       	adc	r31, r25
    13a2:	ea 59       	subi	r30, 0x9A	; 154
    13a4:	fc 4f       	sbci	r31, 0xFC	; 252
    13a6:	24 81       	ldd	r18, Z+4	; 0x04
    13a8:	22 23       	and	r18, r18
    13aa:	61 f3       	breq	.-40     	; 0x1384 <rr_schedule+0xa>
    13ac:	80 93 52 02 	sts	0x0252, r24
    13b0:	90 93 53 02 	sts	0x0253, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    13b4:	fc 01       	movw	r30, r24
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	e8 0f       	add	r30, r24
    13c0:	f9 1f       	adc	r31, r25
    13c2:	ea 59       	subi	r30, 0x9A	; 154
    13c4:	fc 4f       	sbci	r31, 0xFC	; 252
    13c6:	24 81       	ldd	r18, Z+4	; 0x04
    13c8:	22 23       	and	r18, r18
    13ca:	c9 f0       	breq	.+50     	; 0x13fe <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    13cc:	a2 81       	ldd	r26, Z+2	; 0x02
    13ce:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    13d0:	12 96       	adiw	r26, 0x02	; 2
    13d2:	0d 90       	ld	r0, X+
    13d4:	bc 91       	ld	r27, X
    13d6:	a0 2d       	mov	r26, r0
    13d8:	10 97       	sbiw	r26, 0x00	; 0
    13da:	11 f4       	brne	.+4      	; 0x13e0 <rr_schedule+0x66>
    13dc:	a0 81       	ld	r26, Z
    13de:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    13e0:	fc 01       	movw	r30, r24
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	e8 0f       	add	r30, r24
    13ec:	f9 1f       	adc	r31, r25
    13ee:	ea 59       	subi	r30, 0x9A	; 154
    13f0:	fc 4f       	sbci	r31, 0xFC	; 252
    13f2:	b3 83       	std	Z+3, r27	; 0x03
    13f4:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    13f6:	2d 91       	ld	r18, X+
    13f8:	3c 91       	ld	r19, X
    13fa:	11 97       	sbiw	r26, 0x01	; 1
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    1402:	c9 01       	movw	r24, r18
    1404:	08 95       	ret

00001406 <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    140c:	0e 94 02 04 	call	0x804	; 0x804 <getCurrentProcess>
    1410:	be 01       	movw	r22, r28
    1412:	0e 94 3c 09 	call	0x1278	; 0x1278 <insertThreadIntoQueue>
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    141c:	0e 94 02 04 	call	0x804	; 0x804 <getCurrentProcess>
}
    1420:	08 95       	ret

00001422 <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    1422:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    1424:	84 b7       	in	r24, 0x34	; 52
    1426:	88 70       	andi	r24, 0x08	; 8
    1428:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    142a:	80 e1       	ldi	r24, 0x10	; 16
    142c:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    1430:	88 e0       	ldi	r24, 0x08	; 8
    1432:	80 93 60 00 	sts	0x0060, r24
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <HARDWARE_RESET+0x14>

00001438 <calloc>:
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	68 9f       	mul	r22, r24
    1446:	80 01       	movw	r16, r0
    1448:	69 9f       	mul	r22, r25
    144a:	10 0d       	add	r17, r0
    144c:	78 9f       	mul	r23, r24
    144e:	10 0d       	add	r17, r0
    1450:	11 24       	eor	r1, r1
    1452:	c8 01       	movw	r24, r16
    1454:	0e 94 41 0a 	call	0x1482	; 0x1482 <malloc>
    1458:	e8 2e       	mov	r14, r24
    145a:	e7 01       	movw	r28, r14
    145c:	7e 01       	movw	r14, r28
    145e:	f9 2e       	mov	r15, r25
    1460:	e7 01       	movw	r28, r14
    1462:	20 97       	sbiw	r28, 0x00	; 0
    1464:	31 f0       	breq	.+12     	; 0x1472 <calloc+0x3a>
    1466:	8e 2d       	mov	r24, r14
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	a8 01       	movw	r20, r16
    146e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <memset>
    1472:	ce 01       	movw	r24, r28
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	08 95       	ret

00001482 <malloc>:
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	82 30       	cpi	r24, 0x02	; 2
    1488:	91 05       	cpc	r25, r1
    148a:	10 f4       	brcc	.+4      	; 0x1490 <malloc+0xe>
    148c:	82 e0       	ldi	r24, 0x02	; 2
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	e0 91 8b 03 	lds	r30, 0x038B
    1494:	f0 91 8c 03 	lds	r31, 0x038C
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	26 c0       	rjmp	.+76     	; 0x14ee <malloc+0x6c>
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	68 17       	cp	r22, r24
    14a8:	79 07       	cpc	r23, r25
    14aa:	e0 f0       	brcs	.+56     	; 0x14e4 <malloc+0x62>
    14ac:	68 17       	cp	r22, r24
    14ae:	79 07       	cpc	r23, r25
    14b0:	81 f4       	brne	.+32     	; 0x14d2 <malloc+0x50>
    14b2:	82 81       	ldd	r24, Z+2	; 0x02
    14b4:	93 81       	ldd	r25, Z+3	; 0x03
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	31 f0       	breq	.+12     	; 0x14c8 <malloc+0x46>
    14bc:	d9 01       	movw	r26, r18
    14be:	13 96       	adiw	r26, 0x03	; 3
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	12 97       	sbiw	r26, 0x02	; 2
    14c6:	2b c0       	rjmp	.+86     	; 0x151e <malloc+0x9c>
    14c8:	90 93 8c 03 	sts	0x038C, r25
    14cc:	80 93 8b 03 	sts	0x038B, r24
    14d0:	26 c0       	rjmp	.+76     	; 0x151e <malloc+0x9c>
    14d2:	41 15       	cp	r20, r1
    14d4:	51 05       	cpc	r21, r1
    14d6:	19 f0       	breq	.+6      	; 0x14de <malloc+0x5c>
    14d8:	64 17       	cp	r22, r20
    14da:	75 07       	cpc	r23, r21
    14dc:	18 f4       	brcc	.+6      	; 0x14e4 <malloc+0x62>
    14de:	ab 01       	movw	r20, r22
    14e0:	e9 01       	movw	r28, r18
    14e2:	df 01       	movw	r26, r30
    14e4:	9f 01       	movw	r18, r30
    14e6:	72 81       	ldd	r23, Z+2	; 0x02
    14e8:	63 81       	ldd	r22, Z+3	; 0x03
    14ea:	e7 2f       	mov	r30, r23
    14ec:	f6 2f       	mov	r31, r22
    14ee:	30 97       	sbiw	r30, 0x00	; 0
    14f0:	c1 f6       	brne	.-80     	; 0x14a2 <malloc+0x20>
    14f2:	41 15       	cp	r20, r1
    14f4:	51 05       	cpc	r21, r1
    14f6:	01 f1       	breq	.+64     	; 0x1538 <malloc+0xb6>
    14f8:	48 1b       	sub	r20, r24
    14fa:	59 0b       	sbc	r21, r25
    14fc:	44 30       	cpi	r20, 0x04	; 4
    14fe:	51 05       	cpc	r21, r1
    1500:	80 f4       	brcc	.+32     	; 0x1522 <malloc+0xa0>
    1502:	12 96       	adiw	r26, 0x02	; 2
    1504:	8d 91       	ld	r24, X+
    1506:	9c 91       	ld	r25, X
    1508:	13 97       	sbiw	r26, 0x03	; 3
    150a:	20 97       	sbiw	r28, 0x00	; 0
    150c:	19 f0       	breq	.+6      	; 0x1514 <malloc+0x92>
    150e:	9b 83       	std	Y+3, r25	; 0x03
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	04 c0       	rjmp	.+8      	; 0x151c <malloc+0x9a>
    1514:	90 93 8c 03 	sts	0x038C, r25
    1518:	80 93 8b 03 	sts	0x038B, r24
    151c:	fd 01       	movw	r30, r26
    151e:	32 96       	adiw	r30, 0x02	; 2
    1520:	46 c0       	rjmp	.+140    	; 0x15ae <malloc+0x12c>
    1522:	fd 01       	movw	r30, r26
    1524:	e4 0f       	add	r30, r20
    1526:	f5 1f       	adc	r31, r21
    1528:	81 93       	st	Z+, r24
    152a:	91 93       	st	Z+, r25
    152c:	42 50       	subi	r20, 0x02	; 2
    152e:	50 40       	sbci	r21, 0x00	; 0
    1530:	11 96       	adiw	r26, 0x01	; 1
    1532:	5c 93       	st	X, r21
    1534:	4e 93       	st	-X, r20
    1536:	3b c0       	rjmp	.+118    	; 0x15ae <malloc+0x12c>
    1538:	20 91 89 03 	lds	r18, 0x0389
    153c:	30 91 8a 03 	lds	r19, 0x038A
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	41 f4       	brne	.+16     	; 0x1556 <malloc+0xd4>
    1546:	20 91 42 02 	lds	r18, 0x0242
    154a:	30 91 43 02 	lds	r19, 0x0243
    154e:	30 93 8a 03 	sts	0x038A, r19
    1552:	20 93 89 03 	sts	0x0389, r18
    1556:	20 91 44 02 	lds	r18, 0x0244
    155a:	30 91 45 02 	lds	r19, 0x0245
    155e:	21 15       	cp	r18, r1
    1560:	31 05       	cpc	r19, r1
    1562:	41 f4       	brne	.+16     	; 0x1574 <malloc+0xf2>
    1564:	2d b7       	in	r18, 0x3d	; 61
    1566:	3e b7       	in	r19, 0x3e	; 62
    1568:	40 91 40 02 	lds	r20, 0x0240
    156c:	50 91 41 02 	lds	r21, 0x0241
    1570:	24 1b       	sub	r18, r20
    1572:	35 0b       	sbc	r19, r21
    1574:	e0 91 89 03 	lds	r30, 0x0389
    1578:	f0 91 8a 03 	lds	r31, 0x038A
    157c:	e2 17       	cp	r30, r18
    157e:	f3 07       	cpc	r31, r19
    1580:	a0 f4       	brcc	.+40     	; 0x15aa <malloc+0x128>
    1582:	2e 1b       	sub	r18, r30
    1584:	3f 0b       	sbc	r19, r31
    1586:	28 17       	cp	r18, r24
    1588:	39 07       	cpc	r19, r25
    158a:	78 f0       	brcs	.+30     	; 0x15aa <malloc+0x128>
    158c:	ac 01       	movw	r20, r24
    158e:	4e 5f       	subi	r20, 0xFE	; 254
    1590:	5f 4f       	sbci	r21, 0xFF	; 255
    1592:	24 17       	cp	r18, r20
    1594:	35 07       	cpc	r19, r21
    1596:	48 f0       	brcs	.+18     	; 0x15aa <malloc+0x128>
    1598:	4e 0f       	add	r20, r30
    159a:	5f 1f       	adc	r21, r31
    159c:	50 93 8a 03 	sts	0x038A, r21
    15a0:	40 93 89 03 	sts	0x0389, r20
    15a4:	81 93       	st	Z+, r24
    15a6:	91 93       	st	Z+, r25
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <malloc+0x12c>
    15aa:	e0 e0       	ldi	r30, 0x00	; 0
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	cf 01       	movw	r24, r30
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <free>:
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <free+0xa>
    15be:	91 c0       	rjmp	.+290    	; 0x16e2 <free+0x12c>
    15c0:	fc 01       	movw	r30, r24
    15c2:	32 97       	sbiw	r30, 0x02	; 2
    15c4:	13 82       	std	Z+3, r1	; 0x03
    15c6:	12 82       	std	Z+2, r1	; 0x02
    15c8:	60 91 8b 03 	lds	r22, 0x038B
    15cc:	70 91 8c 03 	lds	r23, 0x038C
    15d0:	61 15       	cp	r22, r1
    15d2:	71 05       	cpc	r23, r1
    15d4:	81 f4       	brne	.+32     	; 0x15f6 <free+0x40>
    15d6:	20 81       	ld	r18, Z
    15d8:	31 81       	ldd	r19, Z+1	; 0x01
    15da:	28 0f       	add	r18, r24
    15dc:	39 1f       	adc	r19, r25
    15de:	80 91 89 03 	lds	r24, 0x0389
    15e2:	90 91 8a 03 	lds	r25, 0x038A
    15e6:	82 17       	cp	r24, r18
    15e8:	93 07       	cpc	r25, r19
    15ea:	99 f5       	brne	.+102    	; 0x1652 <free+0x9c>
    15ec:	f0 93 8a 03 	sts	0x038A, r31
    15f0:	e0 93 89 03 	sts	0x0389, r30
    15f4:	76 c0       	rjmp	.+236    	; 0x16e2 <free+0x12c>
    15f6:	db 01       	movw	r26, r22
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <free+0x4c>
    15fe:	cd 01       	movw	r24, r26
    1600:	d9 01       	movw	r26, r18
    1602:	ae 17       	cp	r26, r30
    1604:	bf 07       	cpc	r27, r31
    1606:	48 f4       	brcc	.+18     	; 0x161a <free+0x64>
    1608:	12 96       	adiw	r26, 0x02	; 2
    160a:	2d 91       	ld	r18, X+
    160c:	3c 91       	ld	r19, X
    160e:	13 97       	sbiw	r26, 0x03	; 3
    1610:	21 15       	cp	r18, r1
    1612:	31 05       	cpc	r19, r1
    1614:	a1 f7       	brne	.-24     	; 0x15fe <free+0x48>
    1616:	cd 01       	movw	r24, r26
    1618:	21 c0       	rjmp	.+66     	; 0x165c <free+0xa6>
    161a:	b3 83       	std	Z+3, r27	; 0x03
    161c:	a2 83       	std	Z+2, r26	; 0x02
    161e:	ef 01       	movw	r28, r30
    1620:	49 91       	ld	r20, Y+
    1622:	59 91       	ld	r21, Y+
    1624:	9e 01       	movw	r18, r28
    1626:	24 0f       	add	r18, r20
    1628:	35 1f       	adc	r19, r21
    162a:	a2 17       	cp	r26, r18
    162c:	b3 07       	cpc	r27, r19
    162e:	79 f4       	brne	.+30     	; 0x164e <free+0x98>
    1630:	2d 91       	ld	r18, X+
    1632:	3c 91       	ld	r19, X
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	24 0f       	add	r18, r20
    1638:	35 1f       	adc	r19, r21
    163a:	2e 5f       	subi	r18, 0xFE	; 254
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	31 83       	std	Z+1, r19	; 0x01
    1640:	20 83       	st	Z, r18
    1642:	12 96       	adiw	r26, 0x02	; 2
    1644:	2d 91       	ld	r18, X+
    1646:	3c 91       	ld	r19, X
    1648:	13 97       	sbiw	r26, 0x03	; 3
    164a:	33 83       	std	Z+3, r19	; 0x03
    164c:	22 83       	std	Z+2, r18	; 0x02
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	29 f4       	brne	.+10     	; 0x165c <free+0xa6>
    1652:	f0 93 8c 03 	sts	0x038C, r31
    1656:	e0 93 8b 03 	sts	0x038B, r30
    165a:	43 c0       	rjmp	.+134    	; 0x16e2 <free+0x12c>
    165c:	dc 01       	movw	r26, r24
    165e:	13 96       	adiw	r26, 0x03	; 3
    1660:	fc 93       	st	X, r31
    1662:	ee 93       	st	-X, r30
    1664:	12 97       	sbiw	r26, 0x02	; 2
    1666:	4d 91       	ld	r20, X+
    1668:	5d 91       	ld	r21, X+
    166a:	a4 0f       	add	r26, r20
    166c:	b5 1f       	adc	r27, r21
    166e:	ea 17       	cp	r30, r26
    1670:	fb 07       	cpc	r31, r27
    1672:	69 f4       	brne	.+26     	; 0x168e <free+0xd8>
    1674:	20 81       	ld	r18, Z
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	24 0f       	add	r18, r20
    167a:	35 1f       	adc	r19, r21
    167c:	2e 5f       	subi	r18, 0xFE	; 254
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	ec 01       	movw	r28, r24
    1682:	39 83       	std	Y+1, r19	; 0x01
    1684:	28 83       	st	Y, r18
    1686:	22 81       	ldd	r18, Z+2	; 0x02
    1688:	33 81       	ldd	r19, Z+3	; 0x03
    168a:	3b 83       	std	Y+3, r19	; 0x03
    168c:	2a 83       	std	Y+2, r18	; 0x02
    168e:	e0 e0       	ldi	r30, 0x00	; 0
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <free+0xe2>
    1694:	fb 01       	movw	r30, r22
    1696:	bc 01       	movw	r22, r24
    1698:	db 01       	movw	r26, r22
    169a:	12 96       	adiw	r26, 0x02	; 2
    169c:	8d 91       	ld	r24, X+
    169e:	9c 91       	ld	r25, X
    16a0:	13 97       	sbiw	r26, 0x03	; 3
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	b9 f7       	brne	.-18     	; 0x1694 <free+0xde>
    16a6:	9b 01       	movw	r18, r22
    16a8:	2e 5f       	subi	r18, 0xFE	; 254
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	8d 91       	ld	r24, X+
    16ae:	9c 91       	ld	r25, X
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	82 0f       	add	r24, r18
    16b4:	93 1f       	adc	r25, r19
    16b6:	40 91 89 03 	lds	r20, 0x0389
    16ba:	50 91 8a 03 	lds	r21, 0x038A
    16be:	48 17       	cp	r20, r24
    16c0:	59 07       	cpc	r21, r25
    16c2:	79 f4       	brne	.+30     	; 0x16e2 <free+0x12c>
    16c4:	30 97       	sbiw	r30, 0x00	; 0
    16c6:	29 f4       	brne	.+10     	; 0x16d2 <free+0x11c>
    16c8:	10 92 8c 03 	sts	0x038C, r1
    16cc:	10 92 8b 03 	sts	0x038B, r1
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <free+0x120>
    16d2:	13 82       	std	Z+3, r1	; 0x03
    16d4:	12 82       	std	Z+2, r1	; 0x02
    16d6:	22 50       	subi	r18, 0x02	; 2
    16d8:	30 40       	sbci	r19, 0x00	; 0
    16da:	30 93 8a 03 	sts	0x038A, r19
    16de:	20 93 89 03 	sts	0x0389, r18
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <memset>:
    16e8:	dc 01       	movw	r26, r24
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <memset+0x6>
    16ec:	6d 93       	st	X+, r22
    16ee:	41 50       	subi	r20, 0x01	; 1
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	e0 f7       	brcc	.-8      	; 0x16ec <memset+0x4>
    16f4:	08 95       	ret

000016f6 <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    16f6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    16fa:	08 95       	ret
    16fc:	f8 94       	cli

000016fe <__stop_program>:
    16fe:	ff cf       	rjmp	.-2      	; 0x16fe <__stop_program>
