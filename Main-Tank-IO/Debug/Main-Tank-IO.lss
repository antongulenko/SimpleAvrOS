
Main-Tank-IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  000026bc  00002750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000349  00800268  00800268  000028b8  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  000028b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f3  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000250  00000000  00000000  0000331b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000130b  00000000  00000000  0000356b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004498  00000000  00000000  00004876  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bce  00000000  00000000  00008d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000443c  00000000  00000000  000098dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007b0  00000000  00000000  0000dd18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018de  00000000  00000000  0000e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001dca  00000000  00000000  0000fda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004bfd2  00000000  00000000  00011b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000004d6  00000000  00000000  0005db42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d8  00000000  00000000  0005e018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_26>
      6c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      70:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      7c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      80:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_32>
      84:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      88:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec eb       	ldi	r30, 0xBC	; 188
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 36       	cpi	r26, 0x68	; 104
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	15 e0       	ldi	r17, 0x05	; 5
      b4:	a8 e6       	ldi	r26, 0x68	; 104
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3b       	cpi	r26, 0xB1	; 177
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 0f 01 	call	0x21e	; 0x21e <init_ports_m1284P>

000000ca <init_tank_leds_kernel_init>:
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
}
KERNEL_INIT(init_tank_leds)
      ca:	0e 94 1c 02 	call	0x438	; 0x438 <init_tank_leds>

000000ce <init_tank_buttons_kernel_init>:
	INIT_BUTTON(Button2, PinA2, BUTTON_NORMAL)
	INIT_BUTTON(Button3, PinA3, BUTTON_NORMAL)
	INIT_BUTTON(Button4, PinA4, BUTTON_NORMAL)
	INIT_BUTTON(ButtonSwitch, PinA5, BUTTON_NORMAL)
}
KERNEL_INIT(init_tank_buttons)
      ce:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <init_tank_buttons>

000000d2 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      d2:	0e 94 1d 03 	call	0x63a	; 0x63a <init_timer_m1284P>

000000d6 <init_timer_kernel_init>:
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	setTimerCompareValue(Timer3A, 2500);
	setTimerCompareValue(Timer3B, 2500);
}
KERNEL_INIT(init_timer)
      d6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <init_timer>

000000da <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      da:	0e 94 51 04 	call	0x8a2	; 0x8a2 <init_twi>

000000de <tankIO_server_readButtons_register_function_kernel_init>:
	if (buttonStatus(Button3)) result |= _BV(3);
	if (buttonStatus(Button4)) result |= _BV(4);
	if (buttonStatus(ButtonSwitch)) result |= _BV(5);
	FILL_RESULT(resultBuffer, result, uint8_t)
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_readButtons, TANK_IO_readButtons, uint8_t)
      de:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <tankIO_server_readButtons_register_function>

000000e2 <tankIO_server_writeLeds_register_function_kernel_init>:

void tankIO_server_writeLeds(uint16_t *args, uint16_t argSize) {
	setLeds(AllLeds, *args);
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_writeLeds, TANK_IO_writeLeds, uint16_t)
      e2:	0e 94 2f 0c 	call	0x185e	; 0x185e <tankIO_server_writeLeds_register_function>

000000e6 <init_kernel_kernel_init>:
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
	enableTimerInterrupt(CLOCKTIMER_A);
	sei();
}
KERNEL_INIT(init_kernel)
      e6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <init_kernel>
      ea:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <main>
      ee:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <_exit>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <twi_stop>:
#define twi_send(data) TWDR = data; twi_continue()
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
      f6:	85 ed       	ldi	r24, 0xD5	; 213
      f8:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
      fc:	80 91 dd 01 	lds	r24, 0x01DD
     100:	90 91 de 01 	lds	r25, 0x01DE
     104:	a0 91 df 01 	lds	r26, 0x01DF
     108:	b0 91 e0 01 	lds	r27, 0x01E0
     10c:	80 93 38 05 	sts	0x0538, r24
     110:	90 93 39 05 	sts	0x0539, r25
     114:	a0 93 3a 05 	sts	0x053A, r26
     118:	b0 93 3b 05 	sts	0x053B, r27
	#else
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
     11c:	10 92 43 05 	sts	0x0543, r1
     120:	10 92 42 05 	sts	0x0542, r1
}
     124:	08 95       	ret

00000126 <twi_end>:
	}
}

static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
     126:	85 ec       	ldi	r24, 0xC5	; 197
     128:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     12c:	80 91 dd 01 	lds	r24, 0x01DD
     130:	90 91 de 01 	lds	r25, 0x01DE
     134:	a0 91 df 01 	lds	r26, 0x01DF
     138:	b0 91 e0 01 	lds	r27, 0x01E0
     13c:	80 93 38 05 	sts	0x0538, r24
     140:	90 93 39 05 	sts	0x0539, r25
     144:	a0 93 3a 05 	sts	0x053A, r26
     148:	b0 93 3b 05 	sts	0x053B, r27
	#else
		twi_base;
	#endif
	twi_running = FALSE;
     14c:	10 92 43 05 	sts	0x0543, r1
     150:	10 92 42 05 	sts	0x0542, r1
}
     154:	08 95       	ret

00000156 <twi_receive_byte>:
	}	
}

static inline void twi_receive_byte() {
	// received data-byte. Read into receive-twi_buffer, acknowledge, if more bytes expected.
	twi_buffer.data[alreadyHandled++] = TWDR;
     156:	20 91 ea 04 	lds	r18, 0x04EA
     15a:	30 91 eb 04 	lds	r19, 0x04EB
     15e:	80 91 bb 00 	lds	r24, 0x00BB
     162:	e0 91 38 05 	lds	r30, 0x0538
     166:	f0 91 39 05 	lds	r31, 0x0539
     16a:	e2 0f       	add	r30, r18
     16c:	f3 1f       	adc	r31, r19
     16e:	80 83       	st	Z, r24
     170:	2f 5f       	subi	r18, 0xFF	; 255
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	30 93 eb 04 	sts	0x04EB, r19
     178:	20 93 ea 04 	sts	0x04EA, r18
	if (alreadyHandled < twi_buffer.size - 1) {
     17c:	80 91 3a 05 	lds	r24, 0x053A
     180:	90 91 3b 05 	lds	r25, 0x053B
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	28 17       	cp	r18, r24
     188:	39 07       	cpc	r19, r25
     18a:	10 f4       	brcc	.+4      	; 0x190 <twi_receive_byte+0x3a>
		twi_ack(); // Still more than one byte to go.
     18c:	85 ec       	ldi	r24, 0xC5	; 197
     18e:	01 c0       	rjmp	.+2      	; 0x192 <twi_receive_byte+0x3c>
	} else {
		twi_continue(); // Want to receive one more byte. Next byte will get NOT ACK.
     190:	85 e8       	ldi	r24, 0x85	; 133
     192:	80 93 bc 00 	sts	0x00BC, r24
     196:	08 95       	ret

00000198 <twi_init_receive>:
	}
}

static inline void twi_init_receive() {
	if (twi_buffer.size > 0) {
     198:	80 91 3a 05 	lds	r24, 0x053A
     19c:	90 91 3b 05 	lds	r25, 0x053B
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	11 f0       	breq	.+4      	; 0x1a8 <twi_init_receive+0x10>
		twi_ack(); // Acknowledge, if want to receive at least one byte
     1a4:	85 ec       	ldi	r24, 0xC5	; 197
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <twi_init_receive+0x12>
	} else {
		twi_continue();
     1a8:	85 e8       	ldi	r24, 0x85	; 133
     1aa:	80 93 bc 00 	sts	0x00BC, r24
     1ae:	08 95       	ret

000001b0 <tankIO_server_writeLeds_handler>:
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	ec 01       	movw	r28, r24
	FILL_RESULT(resultBuffer, result, uint8_t)
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_readButtons, TANK_IO_readButtons, uint8_t)

void tankIO_server_writeLeds(uint16_t *args, uint16_t argSize) {
	setLeds(AllLeds, *args);
     1b6:	e8 81       	ld	r30, Y
     1b8:	f9 81       	ldd	r31, Y+1	; 0x01
     1ba:	60 81       	ld	r22, Z
     1bc:	71 81       	ldd	r23, Z+1	; 0x01
     1be:	8a e4       	ldi	r24, 0x4A	; 74
     1c0:	95 e0       	ldi	r25, 0x05	; 5
     1c2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <setLeds>
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_writeLeds, TANK_IO_writeLeds, uint16_t)
     1c6:	1b 82       	std	Y+3, r1	; 0x03
     1c8:	1a 82       	std	Y+2, r1	; 0x02
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <fillSendBuffer>:
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
	}
#endif

static inline void fillSendBuffer(byte operation, TWIBuffer parameters) {
     1d0:	9b 01       	movw	r18, r22
	sendBuffer.data[0] = operation;
     1d2:	e0 91 e1 01 	lds	r30, 0x01E1
     1d6:	f0 91 e2 01 	lds	r31, 0x01E2
     1da:	80 83       	st	Z, r24
	sendBuffer.size = parameters.size + 1;
     1dc:	cb 01       	movw	r24, r22
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	90 93 e4 01 	sts	0x01E4, r25
     1e4:	80 93 e3 01 	sts	0x01E3, r24
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
     1e8:	e0 91 e1 01 	lds	r30, 0x01E1
     1ec:	f0 91 e2 01 	lds	r31, 0x01E2
     1f0:	31 96       	adiw	r30, 0x01	; 1
     1f2:	cf 01       	movw	r24, r30
     1f4:	ba 01       	movw	r22, r20
     1f6:	a9 01       	movw	r20, r18
     1f8:	0e 94 4c 13 	call	0x2698	; 0x2698 <memcpy>
}
     1fc:	08 95       	ret

000001fe <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     1fe:	84 b7       	in	r24, 0x34	; 52
     200:	80 93 68 02 	sts	0x0268, r24
	MCUSR = 0;
     204:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     206:	88 e1       	ldi	r24, 0x18	; 24
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	80 93 60 00 	sts	0x0060, r24
     210:	10 92 60 00 	sts	0x0060, r1
     214:	0f be       	out	0x3f, r0	; 63
	#endif
}
     216:	08 95       	ret

00000218 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     218:	80 91 68 02 	lds	r24, 0x0268
     21c:	08 95       	ret

0000021e <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     21e:	a9 e6       	ldi	r26, 0x69	; 105
     220:	b5 e0       	ldi	r27, 0x05	; 5
     222:	eb e4       	ldi	r30, 0x4B	; 75
     224:	f2 e0       	ldi	r31, 0x02	; 2
     226:	86 e0       	ldi	r24, 0x06	; 6
     228:	01 90       	ld	r0, Z+
     22a:	0d 92       	st	X+, r0
     22c:	81 50       	subi	r24, 0x01	; 1
     22e:	e1 f7       	brne	.-8      	; 0x228 <init_ports_m1284P+0xa>
     230:	89 e6       	ldi	r24, 0x69	; 105
     232:	95 e0       	ldi	r25, 0x05	; 5
     234:	90 93 0f 05 	sts	0x050F, r25
     238:	80 93 0e 05 	sts	0x050E, r24
     23c:	21 e0       	ldi	r18, 0x01	; 1
     23e:	20 93 10 05 	sts	0x0510, r18
     242:	90 93 9e 04 	sts	0x049E, r25
     246:	80 93 9d 04 	sts	0x049D, r24
     24a:	22 e0       	ldi	r18, 0x02	; 2
     24c:	20 93 9f 04 	sts	0x049F, r18
     250:	90 93 67 05 	sts	0x0567, r25
     254:	80 93 66 05 	sts	0x0566, r24
     258:	24 e0       	ldi	r18, 0x04	; 4
     25a:	20 93 68 05 	sts	0x0568, r18
     25e:	90 93 3d 05 	sts	0x053D, r25
     262:	80 93 3c 05 	sts	0x053C, r24
     266:	28 e0       	ldi	r18, 0x08	; 8
     268:	20 93 3e 05 	sts	0x053E, r18
     26c:	90 93 dc 04 	sts	0x04DC, r25
     270:	80 93 db 04 	sts	0x04DB, r24
     274:	20 e1       	ldi	r18, 0x10	; 16
     276:	20 93 dd 04 	sts	0x04DD, r18
     27a:	90 93 7b 02 	sts	0x027B, r25
     27e:	80 93 7a 02 	sts	0x027A, r24
     282:	20 e2       	ldi	r18, 0x20	; 32
     284:	20 93 7c 02 	sts	0x027C, r18
     288:	90 93 92 02 	sts	0x0292, r25
     28c:	80 93 91 02 	sts	0x0291, r24
     290:	20 e4       	ldi	r18, 0x40	; 64
     292:	20 93 93 02 	sts	0x0293, r18
     296:	90 93 f4 04 	sts	0x04F4, r25
     29a:	80 93 f3 04 	sts	0x04F3, r24
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	80 93 f5 04 	sts	0x04F5, r24
	INIT_PORT_AND_PINS(B);
     2a4:	a1 ee       	ldi	r26, 0xE1	; 225
     2a6:	b4 e0       	ldi	r27, 0x04	; 4
     2a8:	e5 e4       	ldi	r30, 0x45	; 69
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
     2ac:	86 e0       	ldi	r24, 0x06	; 6
     2ae:	01 90       	ld	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <init_ports_m1284P+0x90>
     2b6:	81 ee       	ldi	r24, 0xE1	; 225
     2b8:	94 e0       	ldi	r25, 0x04	; 4
     2ba:	90 93 55 05 	sts	0x0555, r25
     2be:	80 93 54 05 	sts	0x0554, r24
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	20 93 56 05 	sts	0x0556, r18
     2c8:	90 93 f1 04 	sts	0x04F1, r25
     2cc:	80 93 f0 04 	sts	0x04F0, r24
     2d0:	22 e0       	ldi	r18, 0x02	; 2
     2d2:	20 93 f2 04 	sts	0x04F2, r18
     2d6:	90 93 9a 02 	sts	0x029A, r25
     2da:	80 93 99 02 	sts	0x0299, r24
     2de:	24 e0       	ldi	r18, 0x04	; 4
     2e0:	20 93 9b 02 	sts	0x029B, r18
     2e4:	90 93 70 05 	sts	0x0570, r25
     2e8:	80 93 6f 05 	sts	0x056F, r24
     2ec:	28 e0       	ldi	r18, 0x08	; 8
     2ee:	20 93 71 05 	sts	0x0571, r18
     2f2:	90 93 58 05 	sts	0x0558, r25
     2f6:	80 93 57 05 	sts	0x0557, r24
     2fa:	20 e1       	ldi	r18, 0x10	; 16
     2fc:	20 93 59 05 	sts	0x0559, r18
     300:	90 93 36 05 	sts	0x0536, r25
     304:	80 93 35 05 	sts	0x0535, r24
     308:	20 e2       	ldi	r18, 0x20	; 32
     30a:	20 93 37 05 	sts	0x0537, r18
     30e:	90 93 a1 05 	sts	0x05A1, r25
     312:	80 93 a0 05 	sts	0x05A0, r24
     316:	20 e4       	ldi	r18, 0x40	; 64
     318:	20 93 a2 05 	sts	0x05A2, r18
     31c:	90 93 f9 04 	sts	0x04F9, r25
     320:	80 93 f8 04 	sts	0x04F8, r24
     324:	80 e8       	ldi	r24, 0x80	; 128
     326:	80 93 fa 04 	sts	0x04FA, r24
	INIT_PORT_AND_PINS(C);
     32a:	ab ef       	ldi	r26, 0xFB	; 251
     32c:	b4 e0       	ldi	r27, 0x04	; 4
     32e:	ef e3       	ldi	r30, 0x3F	; 63
     330:	f2 e0       	ldi	r31, 0x02	; 2
     332:	86 e0       	ldi	r24, 0x06	; 6
     334:	01 90       	ld	r0, Z+
     336:	0d 92       	st	X+, r0
     338:	81 50       	subi	r24, 0x01	; 1
     33a:	e1 f7       	brne	.-8      	; 0x334 <init_ports_m1284P+0x116>
     33c:	8b ef       	ldi	r24, 0xFB	; 251
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	90 93 e8 04 	sts	0x04E8, r25
     344:	80 93 e7 04 	sts	0x04E7, r24
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	20 93 e9 04 	sts	0x04E9, r18
     34e:	90 93 81 02 	sts	0x0281, r25
     352:	80 93 80 02 	sts	0x0280, r24
     356:	22 e0       	ldi	r18, 0x02	; 2
     358:	20 93 82 02 	sts	0x0282, r18
     35c:	90 93 ba 04 	sts	0x04BA, r25
     360:	80 93 b9 04 	sts	0x04B9, r24
     364:	24 e0       	ldi	r18, 0x04	; 4
     366:	20 93 bb 04 	sts	0x04BB, r18
     36a:	90 93 d9 04 	sts	0x04D9, r25
     36e:	80 93 d8 04 	sts	0x04D8, r24
     372:	28 e0       	ldi	r18, 0x08	; 8
     374:	20 93 da 04 	sts	0x04DA, r18
     378:	90 93 84 02 	sts	0x0284, r25
     37c:	80 93 83 02 	sts	0x0283, r24
     380:	20 e1       	ldi	r18, 0x10	; 16
     382:	20 93 85 02 	sts	0x0285, r18
     386:	90 93 df 04 	sts	0x04DF, r25
     38a:	80 93 de 04 	sts	0x04DE, r24
     38e:	20 e2       	ldi	r18, 0x20	; 32
     390:	20 93 e0 04 	sts	0x04E0, r18
     394:	90 93 1d 05 	sts	0x051D, r25
     398:	80 93 1c 05 	sts	0x051C, r24
     39c:	20 e4       	ldi	r18, 0x40	; 64
     39e:	20 93 1e 05 	sts	0x051E, r18
     3a2:	90 93 8c 02 	sts	0x028C, r25
     3a6:	80 93 8b 02 	sts	0x028B, r24
     3aa:	80 e8       	ldi	r24, 0x80	; 128
     3ac:	80 93 8d 02 	sts	0x028D, r24
	INIT_PORT_AND_PINS(D);
     3b0:	ac eb       	ldi	r26, 0xBC	; 188
     3b2:	b4 e0       	ldi	r27, 0x04	; 4
     3b4:	e9 e3       	ldi	r30, 0x39	; 57
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	86 e0       	ldi	r24, 0x06	; 6
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	81 50       	subi	r24, 0x01	; 1
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <init_ports_m1284P+0x19c>
     3c2:	8c eb       	ldi	r24, 0xBC	; 188
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	90 93 9d 02 	sts	0x029D, r25
     3ca:	80 93 9c 02 	sts	0x029C, r24
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	20 93 9e 02 	sts	0x029E, r18
     3d4:	90 93 90 05 	sts	0x0590, r25
     3d8:	80 93 8f 05 	sts	0x058F, r24
     3dc:	22 e0       	ldi	r18, 0x02	; 2
     3de:	20 93 91 05 	sts	0x0591, r18
     3e2:	90 93 12 05 	sts	0x0512, r25
     3e6:	80 93 11 05 	sts	0x0511, r24
     3ea:	24 e0       	ldi	r18, 0x04	; 4
     3ec:	20 93 13 05 	sts	0x0513, r18
     3f0:	90 93 48 05 	sts	0x0548, r25
     3f4:	80 93 47 05 	sts	0x0547, r24
     3f8:	28 e0       	ldi	r18, 0x08	; 8
     3fa:	20 93 49 05 	sts	0x0549, r18
     3fe:	90 93 2c 05 	sts	0x052C, r25
     402:	80 93 2b 05 	sts	0x052B, r24
     406:	20 e1       	ldi	r18, 0x10	; 16
     408:	20 93 2d 05 	sts	0x052D, r18
     40c:	90 93 0a 05 	sts	0x050A, r25
     410:	80 93 09 05 	sts	0x0509, r24
     414:	20 e2       	ldi	r18, 0x20	; 32
     416:	20 93 0b 05 	sts	0x050B, r18
     41a:	90 93 5d 05 	sts	0x055D, r25
     41e:	80 93 5c 05 	sts	0x055C, r24
     422:	20 e4       	ldi	r18, 0x40	; 64
     424:	20 93 5e 05 	sts	0x055E, r18
     428:	90 93 7e 02 	sts	0x027E, r25
     42c:	80 93 7d 02 	sts	0x027D, r24
     430:	80 e8       	ldi	r24, 0x80	; 128
     432:	80 93 7f 02 	sts	0x027F, r24
}
     436:	08 95       	ret

00000438 <init_tank_leds>:
PLed allLedsArray[] = {
				&Red1_, &Red2_, &Red3_, &Red4_, &Red5_,
				&White1_, &White2_, &White3_, &White4_, &White5_,
				&Yellow1_, &Yellow2_, &Green1_, &Green2_, &Green3_ };

void init_tank_leds() {
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
	
	// TODO assign correct pins

	INIT_LED(White1, PinA1)
     43c:	cd e9       	ldi	r28, 0x9D	; 157
     43e:	d4 e0       	ldi	r29, 0x04	; 4
     440:	d0 93 2a 05 	sts	0x052A, r29
     444:	c0 93 29 05 	sts	0x0529, r28

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(White2, PinA1)
     44e:	d0 93 60 05 	sts	0x0560, r29
     452:	c0 93 5f 05 	sts	0x055F, r28
     456:	ce 01       	movw	r24, r28
     458:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(White3, PinA1)
     45c:	d0 93 a4 05 	sts	0x05A4, r29
     460:	c0 93 a3 05 	sts	0x05A3, r28
     464:	ce 01       	movw	r24, r28
     466:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(White4, PinA1)
     46a:	d0 93 95 02 	sts	0x0295, r29
     46e:	c0 93 94 02 	sts	0x0294, r28
     472:	ce 01       	movw	r24, r28
     474:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(White5, PinA1)
     478:	d0 93 0d 05 	sts	0x050D, r29
     47c:	c0 93 0c 05 	sts	0x050C, r28
     480:	ce 01       	movw	r24, r28
     482:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>

	INIT_LED(Red1, PinA1)
     486:	d0 93 b1 04 	sts	0x04B1, r29
     48a:	c0 93 b0 04 	sts	0x04B0, r28
     48e:	ce 01       	movw	r24, r28
     490:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Red2, PinA1)
     494:	d0 93 73 05 	sts	0x0573, r29
     498:	c0 93 72 05 	sts	0x0572, r28
     49c:	ce 01       	movw	r24, r28
     49e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Red3, PinA1)
     4a2:	d0 93 f7 04 	sts	0x04F7, r29
     4a6:	c0 93 f6 04 	sts	0x04F6, r28
     4aa:	ce 01       	movw	r24, r28
     4ac:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Red4, PinA1)
     4b0:	d0 93 5b 05 	sts	0x055B, r29
     4b4:	c0 93 5a 05 	sts	0x055A, r28
     4b8:	ce 01       	movw	r24, r28
     4ba:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Red5, PinA1)
     4be:	d0 93 28 05 	sts	0x0528, r29
     4c2:	c0 93 27 05 	sts	0x0527, r28
     4c6:	ce 01       	movw	r24, r28
     4c8:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>

	INIT_LED(Green1, PinA1)
     4cc:	d0 93 8a 02 	sts	0x028A, r29
     4d0:	c0 93 89 02 	sts	0x0289, r28
     4d4:	ce 01       	movw	r24, r28
     4d6:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Green2, PinA1)
     4da:	d0 93 ef 04 	sts	0x04EF, r29
     4de:	c0 93 ee 04 	sts	0x04EE, r28
     4e2:	ce 01       	movw	r24, r28
     4e4:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Green3, PinA1)
     4e8:	d0 93 75 05 	sts	0x0575, r29
     4ec:	c0 93 74 05 	sts	0x0574, r28
     4f0:	ce 01       	movw	r24, r28
     4f2:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Yellow1, PinA1)
     4f6:	d0 93 65 05 	sts	0x0565, r29
     4fa:	c0 93 64 05 	sts	0x0564, r28
     4fe:	ce 01       	movw	r24, r28
     500:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	INIT_LED(Yellow2, PinA1)
     504:	d0 93 2f 05 	sts	0x052F, r29
     508:	c0 93 2e 05 	sts	0x052E, r28
     50c:	ce 01       	movw	r24, r28
     50e:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 5)
     512:	aa e9       	ldi	r26, 0x9A	; 154
     514:	b5 e0       	ldi	r27, 0x05	; 5
     516:	e6 e3       	ldi	r30, 0x36	; 54
     518:	f2 e0       	ldi	r31, 0x02	; 2
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	01 90       	ld	r0, Z+
     51e:	0d 92       	st	X+, r0
     520:	81 50       	subi	r24, 0x01	; 1
     522:	e1 f7       	brne	.-8      	; 0x51c <init_tank_leds+0xe4>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     524:	ae e8       	ldi	r26, 0x8E	; 142
     526:	b2 e0       	ldi	r27, 0x02	; 2
     528:	e3 e3       	ldi	r30, 0x33	; 51
     52a:	f2 e0       	ldi	r31, 0x02	; 2
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	81 50       	subi	r24, 0x01	; 1
     534:	e1 f7       	brne	.-8      	; 0x52e <init_tank_leds+0xf6>
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
     536:	a6 e9       	ldi	r26, 0x96	; 150
     538:	b2 e0       	ldi	r27, 0x02	; 2
     53a:	e0 e3       	ldi	r30, 0x30	; 48
     53c:	f2 e0       	ldi	r31, 0x02	; 2
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	01 90       	ld	r0, Z+
     542:	0d 92       	st	X+, r0
     544:	81 50       	subi	r24, 0x01	; 1
     546:	e1 f7       	brne	.-8      	; 0x540 <init_tank_leds+0x108>
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
     548:	a1 e6       	ldi	r26, 0x61	; 97
     54a:	b5 e0       	ldi	r27, 0x05	; 5
     54c:	ed e2       	ldi	r30, 0x2D	; 45
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	01 90       	ld	r0, Z+
     554:	0d 92       	st	X+, r0
     556:	81 50       	subi	r24, 0x01	; 1
     558:	e1 f7       	brne	.-8      	; 0x552 <init_tank_leds+0x11a>
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
     55a:	a2 e3       	ldi	r26, 0x32	; 50
     55c:	b5 e0       	ldi	r27, 0x05	; 5
     55e:	ea e2       	ldi	r30, 0x2A	; 42
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	01 90       	ld	r0, Z+
     566:	0d 92       	st	X+, r0
     568:	81 50       	subi	r24, 0x01	; 1
     56a:	e1 f7       	brne	.-8      	; 0x564 <init_tank_leds+0x12c>
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
     56c:	aa e4       	ldi	r26, 0x4A	; 74
     56e:	b5 e0       	ldi	r27, 0x05	; 5
     570:	e7 e2       	ldi	r30, 0x27	; 39
     572:	f2 e0       	ldi	r31, 0x02	; 2
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	e1 f7       	brne	.-8      	; 0x576 <init_tank_leds+0x13e>
}
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     592:	88 81       	ld	r24, Y
     594:	82 ff       	sbrs	r24, 2
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <setPinOne>
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ec 01       	movw	r28, r24
	initButton(button->button);
     5ac:	88 81       	ld	r24, Y
     5ae:	99 81       	ldd	r25, Y+1	; 0x01
     5b0:	0e 94 c2 02 	call	0x584	; 0x584 <initButton>
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	0e 94 04 10 	call	0x2008	; 0x2008 <enablePinChangeInterrupt>
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <init_tank_buttons>:

void init_tank_buttons() {
	
	// TODO set pins correctly

	INIT_BUTTON(Button1, PinA1, BUTTON_NORMAL)
     5c0:	10 92 9d 05 	sts	0x059D, r1
     5c4:	8d e9       	ldi	r24, 0x9D	; 157
     5c6:	94 e0       	ldi	r25, 0x04	; 4
     5c8:	90 93 9f 05 	sts	0x059F, r25
     5cc:	80 93 9e 05 	sts	0x059E, r24
     5d0:	8d e9       	ldi	r24, 0x9D	; 157
     5d2:	95 e0       	ldi	r25, 0x05	; 5
     5d4:	0e 94 c2 02 	call	0x584	; 0x584 <initButton>
	INIT_BUTTON(Button2, PinA2, BUTTON_NORMAL)
     5d8:	10 92 44 05 	sts	0x0544, r1
     5dc:	86 e6       	ldi	r24, 0x66	; 102
     5de:	95 e0       	ldi	r25, 0x05	; 5
     5e0:	90 93 46 05 	sts	0x0546, r25
     5e4:	80 93 45 05 	sts	0x0545, r24
     5e8:	84 e4       	ldi	r24, 0x44	; 68
     5ea:	95 e0       	ldi	r25, 0x05	; 5
     5ec:	0e 94 c2 02 	call	0x584	; 0x584 <initButton>
	INIT_BUTTON(Button3, PinA3, BUTTON_NORMAL)
     5f0:	10 92 86 02 	sts	0x0286, r1
     5f4:	8c e3       	ldi	r24, 0x3C	; 60
     5f6:	95 e0       	ldi	r25, 0x05	; 5
     5f8:	90 93 88 02 	sts	0x0288, r25
     5fc:	80 93 87 02 	sts	0x0287, r24
     600:	86 e8       	ldi	r24, 0x86	; 134
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	0e 94 c2 02 	call	0x584	; 0x584 <initButton>
	INIT_BUTTON(Button4, PinA4, BUTTON_NORMAL)
     608:	10 92 3f 05 	sts	0x053F, r1
     60c:	8b ed       	ldi	r24, 0xDB	; 219
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	90 93 41 05 	sts	0x0541, r25
     614:	80 93 40 05 	sts	0x0540, r24
     618:	8f e3       	ldi	r24, 0x3F	; 63
     61a:	95 e0       	ldi	r25, 0x05	; 5
     61c:	0e 94 c2 02 	call	0x584	; 0x584 <initButton>
	INIT_BUTTON(ButtonSwitch, PinA5, BUTTON_NORMAL)
     620:	10 92 76 02 	sts	0x0276, r1
     624:	8a e7       	ldi	r24, 0x7A	; 122
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	90 93 78 02 	sts	0x0278, r25
     62c:	80 93 77 02 	sts	0x0277, r24
     630:	86 e7       	ldi	r24, 0x76	; 118
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	0e 94 c2 02 	call	0x584	; 0x584 <initButton>
}
     638:	08 95       	ret

0000063a <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     63a:	ad e4       	ldi	r26, 0x4D	; 77
     63c:	b5 e0       	ldi	r27, 0x05	; 5
     63e:	e0 e2       	ldi	r30, 0x20	; 32
     640:	f2 e0       	ldi	r31, 0x02	; 2
     642:	87 e0       	ldi	r24, 0x07	; 7
     644:	01 90       	ld	r0, Z+
     646:	0d 92       	st	X+, r0
     648:	81 50       	subi	r24, 0x01	; 1
     64a:	e1 f7       	brne	.-8      	; 0x644 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     64c:	a2 eb       	ldi	r26, 0xB2	; 178
     64e:	b4 e0       	ldi	r27, 0x04	; 4
     650:	e9 e1       	ldi	r30, 0x19	; 25
     652:	f2 e0       	ldi	r31, 0x02	; 2
     654:	87 e0       	ldi	r24, 0x07	; 7
     656:	01 90       	ld	r0, Z+
     658:	0d 92       	st	X+, r0
     65a:	81 50       	subi	r24, 0x01	; 1
     65c:	e1 f7       	brne	.-8      	; 0x656 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     65e:	a2 ec       	ldi	r26, 0xC2	; 194
     660:	b4 e0       	ldi	r27, 0x04	; 4
     662:	e2 e1       	ldi	r30, 0x12	; 18
     664:	f2 e0       	ldi	r31, 0x02	; 2
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	01 90       	ld	r0, Z+
     66a:	0d 92       	st	X+, r0
     66c:	81 50       	subi	r24, 0x01	; 1
     66e:	e1 f7       	brne	.-8      	; 0x668 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     670:	a9 ec       	ldi	r26, 0xC9	; 201
     672:	b4 e0       	ldi	r27, 0x04	; 4
     674:	eb e0       	ldi	r30, 0x0B	; 11
     676:	f2 e0       	ldi	r31, 0x02	; 2
     678:	87 e0       	ldi	r24, 0x07	; 7
     67a:	01 90       	ld	r0, Z+
     67c:	0d 92       	st	X+, r0
     67e:	81 50       	subi	r24, 0x01	; 1
     680:	e1 f7       	brne	.-8      	; 0x67a <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     682:	8d e4       	ldi	r24, 0x4D	; 77
     684:	95 e0       	ldi	r25, 0x05	; 5
     686:	90 93 a6 05 	sts	0x05A6, r25
     68a:	80 93 a5 05 	sts	0x05A5, r24
     68e:	27 e4       	ldi	r18, 0x47	; 71
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	30 93 a8 05 	sts	0x05A8, r19
     696:	20 93 a7 05 	sts	0x05A7, r18
     69a:	10 92 aa 05 	sts	0x05AA, r1
     69e:	10 92 a9 05 	sts	0x05A9, r1
     6a2:	2f e6       	ldi	r18, 0x6F	; 111
     6a4:	35 e0       	ldi	r19, 0x05	; 5
     6a6:	30 93 ac 05 	sts	0x05AC, r19
     6aa:	20 93 ab 05 	sts	0x05AB, r18
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     6ae:	90 93 d1 04 	sts	0x04D1, r25
     6b2:	80 93 d0 04 	sts	0x04D0, r24
     6b6:	88 e4       	ldi	r24, 0x48	; 72
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	90 93 d3 04 	sts	0x04D3, r25
     6be:	80 93 d2 04 	sts	0x04D2, r24
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	90 93 d5 04 	sts	0x04D5, r25
     6ca:	80 93 d4 04 	sts	0x04D4, r24
     6ce:	27 e5       	ldi	r18, 0x57	; 87
     6d0:	35 e0       	ldi	r19, 0x05	; 5
     6d2:	30 93 d7 04 	sts	0x04D7, r19
     6d6:	20 93 d6 04 	sts	0x04D6, r18
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     6da:	22 eb       	ldi	r18, 0xB2	; 178
     6dc:	34 e0       	ldi	r19, 0x04	; 4
     6de:	30 93 a9 04 	sts	0x04A9, r19
     6e2:	20 93 a8 04 	sts	0x04A8, r18
     6e6:	48 e8       	ldi	r20, 0x88	; 136
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	50 93 ab 04 	sts	0x04AB, r21
     6ee:	40 93 aa 04 	sts	0x04AA, r20
     6f2:	10 92 ad 04 	sts	0x04AD, r1
     6f6:	10 92 ac 04 	sts	0x04AC, r1
     6fa:	49 e0       	ldi	r20, 0x09	; 9
     6fc:	55 e0       	ldi	r21, 0x05	; 5
     6fe:	50 93 af 04 	sts	0x04AF, r21
     702:	40 93 ae 04 	sts	0x04AE, r20
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     706:	30 93 02 05 	sts	0x0502, r19
     70a:	20 93 01 05 	sts	0x0501, r18
     70e:	2a e8       	ldi	r18, 0x8A	; 138
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	30 93 04 05 	sts	0x0504, r19
     716:	20 93 03 05 	sts	0x0503, r18
     71a:	90 93 06 05 	sts	0x0506, r25
     71e:	80 93 05 05 	sts	0x0505, r24
     722:	2b e2       	ldi	r18, 0x2B	; 43
     724:	35 e0       	ldi	r19, 0x05	; 5
     726:	30 93 08 05 	sts	0x0508, r19
     72a:	20 93 07 05 	sts	0x0507, r18
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     72e:	22 ec       	ldi	r18, 0xC2	; 194
     730:	34 e0       	ldi	r19, 0x04	; 4
     732:	30 93 93 05 	sts	0x0593, r19
     736:	20 93 92 05 	sts	0x0592, r18
     73a:	43 eb       	ldi	r20, 0xB3	; 179
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	50 93 95 05 	sts	0x0595, r21
     742:	40 93 94 05 	sts	0x0594, r20
     746:	10 92 97 05 	sts	0x0597, r1
     74a:	10 92 96 05 	sts	0x0596, r1
     74e:	4d e7       	ldi	r20, 0x7D	; 125
     750:	52 e0       	ldi	r21, 0x02	; 2
     752:	50 93 99 05 	sts	0x0599, r21
     756:	40 93 98 05 	sts	0x0598, r20
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     75a:	30 93 15 05 	sts	0x0515, r19
     75e:	20 93 14 05 	sts	0x0514, r18
     762:	24 eb       	ldi	r18, 0xB4	; 180
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	30 93 17 05 	sts	0x0517, r19
     76a:	20 93 16 05 	sts	0x0516, r18
     76e:	90 93 19 05 	sts	0x0519, r25
     772:	80 93 18 05 	sts	0x0518, r24
     776:	2c e5       	ldi	r18, 0x5C	; 92
     778:	35 e0       	ldi	r19, 0x05	; 5
     77a:	30 93 1b 05 	sts	0x051B, r19
     77e:	20 93 1a 05 	sts	0x051A, r18
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     782:	29 ec       	ldi	r18, 0xC9	; 201
     784:	34 e0       	ldi	r19, 0x04	; 4
     786:	30 93 a1 04 	sts	0x04A1, r19
     78a:	20 93 a0 04 	sts	0x04A0, r18
     78e:	48 e9       	ldi	r20, 0x98	; 152
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	50 93 a3 04 	sts	0x04A3, r21
     796:	40 93 a2 04 	sts	0x04A2, r20
     79a:	10 92 a5 04 	sts	0x04A5, r1
     79e:	10 92 a4 04 	sts	0x04A4, r1
     7a2:	40 ea       	ldi	r20, 0xA0	; 160
     7a4:	55 e0       	ldi	r21, 0x05	; 5
     7a6:	50 93 a7 04 	sts	0x04A7, r21
     7aa:	40 93 a6 04 	sts	0x04A6, r20
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     7ae:	30 93 20 05 	sts	0x0520, r19
     7b2:	20 93 1f 05 	sts	0x051F, r18
     7b6:	2a e9       	ldi	r18, 0x9A	; 154
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	30 93 22 05 	sts	0x0522, r19
     7be:	20 93 21 05 	sts	0x0521, r18
     7c2:	90 93 24 05 	sts	0x0524, r25
     7c6:	80 93 23 05 	sts	0x0523, r24
     7ca:	88 ef       	ldi	r24, 0xF8	; 248
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	90 93 26 05 	sts	0x0526, r25
     7d2:	80 93 25 05 	sts	0x0525, r24
}
     7d6:	08 95       	ret

000007d8 <init_timer>:
#define CLOCKISR_A TIMER3_COMPA_vect
#define CLOCKISR_B TIMER3_COMPB_vect
#define CLOCKTIMER_A Timer3A
#define CLOCKTIMER_B Timer3B

void init_timer() {
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
	setWaveformGenerationMode(Timer3, clear_timer_on_match);
     7dc:	c9 ec       	ldi	r28, 0xC9	; 201
     7de:	d4 e0       	ldi	r29, 0x04	; 4
     7e0:	ce 01       	movw	r24, r28
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <setWaveformGenerationMode>
	setTimerClockSelect(Timer3, prescale_8);
     7ea:	ce 01       	movw	r24, r28
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <setTimerClockSelect>
	
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
	setTimerCompareValue(Timer3A, 2500);
     7f4:	80 ea       	ldi	r24, 0xA0	; 160
     7f6:	94 e0       	ldi	r25, 0x04	; 4
     7f8:	64 ec       	ldi	r22, 0xC4	; 196
     7fa:	79 e0       	ldi	r23, 0x09	; 9
     7fc:	0e 94 a7 11 	call	0x234e	; 0x234e <setTimerCompareValue>
	setTimerCompareValue(Timer3B, 2500);
     800:	8f e1       	ldi	r24, 0x1F	; 31
     802:	95 e0       	ldi	r25, 0x05	; 5
     804:	64 ec       	ldi	r22, 0xC4	; 196
     806:	79 e0       	ldi	r23, 0x09	; 9
     808:	0e 94 a7 11 	call	0x234e	; 0x234e <setTimerCompareValue>
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     812:	08 95       	ret

00000814 <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increase the milliseconds_running value.

TIMER_TICK_ISR {
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	0b b6       	in	r0, 0x3b	; 59
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
	TIMER_TICK_ACTION
     83a:	80 91 69 02 	lds	r24, 0x0269
     83e:	90 91 6a 02 	lds	r25, 0x026A
     842:	a0 91 6b 02 	lds	r26, 0x026B
     846:	b0 91 6c 02 	lds	r27, 0x026C
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	a1 1d       	adc	r26, r1
     84e:	b1 1d       	adc	r27, r1
     850:	80 93 69 02 	sts	0x0269, r24
     854:	90 93 6a 02 	sts	0x026A, r25
     858:	a0 93 6b 02 	sts	0x026B, r26
     85c:	b0 93 6c 02 	sts	0x026C, r27
     860:	0e 94 09 04 	call	0x812	; 0x812 <in_timer_tick>
}
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0b be       	out	0x3b, r0	; 59
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <mutex_create>:
// This Mutex implementation simply disables interrupts to ensure
// mutual exclusion.

Mutex mutex_create() {
	return NULL;
}
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	08 95       	ret

00000890 <mutex_lock>:

void mutex_lock(Mutex mutex) {
	cli();
     890:	f8 94       	cli
}
     892:	08 95       	ret

00000894 <mutex_trylock>:

BOOL mutex_trylock(Mutex mutex) {
	cli();
     894:	f8 94       	cli
	return TRUE;
}
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	08 95       	ret

0000089c <mutex_release>:

void mutex_release(Mutex mutex) {
	sei();
     89c:	78 94       	sei
}
     89e:	08 95       	ret

000008a0 <twi_unexpectedCondition>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() {}
     8a0:	08 95       	ret

000008a2 <init_twi>:
TWIError twi_error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     8a2:	85 e0       	ldi	r24, 0x05	; 5
     8a4:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     8ae:	81 e1       	ldi	r24, 0x11	; 17
     8b0:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     8b4:	10 92 b9 00 	sts	0x00B9, r1
	// TODO uncovered: TWAMR (slave address mask register)
	#ifdef TWI_Slave
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
     8b8:	8c e2       	ldi	r24, 0x2C	; 44
     8ba:	80 93 ba 00 	sts	0x00BA, r24
	#endif
}
     8be:	08 95       	ret

000008c0 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	27 97       	sbiw	r28, 0x07	; 7
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
     8d4:	ae 01       	movw	r20, r28
     8d6:	4f 5f       	subi	r20, 0xFF	; 255
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	80 91 30 05 	lds	r24, 0x0530
     8de:	90 91 31 05 	lds	r25, 0x0531
     8e2:	fc 01       	movw	r30, r24
     8e4:	33 e0       	ldi	r19, 0x03	; 3
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	3a 95       	dec	r19
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <next_twi_operation+0x26>
     8ee:	e8 1b       	sub	r30, r24
     8f0:	f9 0b       	sbc	r31, r25
     8f2:	da 01       	movw	r26, r20
     8f4:	e6 58       	subi	r30, 0x86	; 134
     8f6:	fa 4f       	sbci	r31, 0xFA	; 250
     8f8:	27 e0       	ldi	r18, 0x07	; 7
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	21 50       	subi	r18, 0x01	; 1
     900:	e1 f7       	brne	.-8      	; 0x8fa <next_twi_operation+0x3a>
     902:	fc 01       	movw	r30, r24
     904:	23 e0       	ldi	r18, 0x03	; 3
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	2a 95       	dec	r18
     90c:	e1 f7       	brne	.-8      	; 0x906 <next_twi_operation+0x46>
     90e:	e8 1b       	sub	r30, r24
     910:	f9 0b       	sbc	r31, r25
     912:	e6 58       	subi	r30, 0x86	; 134
     914:	fa 4f       	sbci	r31, 0xFA	; 250
     916:	64 81       	ldd	r22, Z+4	; 0x04
     918:	25 81       	ldd	r18, Z+5	; 0x05
     91a:	36 81       	ldd	r19, Z+6	; 0x06
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	90 93 31 05 	sts	0x0531, r25
     922:	80 93 30 05 	sts	0x0530, r24
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	91 05       	cpc	r25, r1
     92a:	ec f4       	brge	.+58     	; 0x966 <next_twi_operation+0xa6>
     92c:	21 15       	cp	r18, r1
     92e:	31 05       	cpc	r19, r1
     930:	a1 f2       	breq	.-88     	; 0x8da <next_twi_operation+0x1a>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	// Delete or set the LSB, which describes sla+w or sla+r (reading or writing
	// slave address)
	if (current.operationMode == TWI_Send) {
     932:	22 30       	cpi	r18, 0x02	; 2
     934:	31 05       	cpc	r19, r1
     936:	21 f4       	brne	.+8      	; 0x940 <next_twi_operation+0x80>
		twi_address.address = current.device.address & ~_BV(0);
     938:	86 2f       	mov	r24, r22
     93a:	8e 7f       	andi	r24, 0xFE	; 254
     93c:	80 93 79 02 	sts	0x0279, r24
	} else if (current.operationMode == TWI_Send) {
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
     940:	10 92 eb 04 	sts	0x04EB, r1
     944:	10 92 ea 04 	sts	0x04EA, r1
	twi_buffer = current.buffer;
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	ab 81       	ldd	r26, Y+3	; 0x03
     94e:	bc 81       	ldd	r27, Y+4	; 0x04
     950:	80 93 38 05 	sts	0x0538, r24
     954:	90 93 39 05 	sts	0x0539, r25
     958:	a0 93 3a 05 	sts	0x053A, r26
     95c:	b0 93 3b 05 	sts	0x053B, r27
	return TRUE;
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	02 c0       	rjmp	.+4      	; 0x96a <next_twi_operation+0xaa>
BOOL next_twi_operation() {
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     96a:	c9 01       	movw	r24, r18
     96c:	27 96       	adiw	r28, 0x07	; 7
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (nextTwiOperation >= NUM_TWI_OPERATIONS || !next_twi_operation()) {
     97e:	80 91 30 05 	lds	r24, 0x0530
     982:	90 91 31 05 	lds	r25, 0x0531
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	91 05       	cpc	r25, r1
     98a:	24 f4       	brge	.+8      	; 0x994 <twi_stop_or_next+0x16>
     98c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <next_twi_operation>
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	19 f4       	brne	.+6      	; 0x99a <twi_stop_or_next+0x1c>
		twi_stop();
     994:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
     998:	08 95       	ret
	} else {
		// Next operation, without releasing the bus. Repeated START condition!
		twi_start();
     99a:	85 ea       	ldi	r24, 0xA5	; 165
     99c:	80 93 bc 00 	sts	0x00BC, r24
     9a0:	08 95       	ret

000009a2 <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	twi_error = TWI_No_Error;
     9a2:	10 92 ed 04 	sts	0x04ED, r1
     9a6:	10 92 ec 04 	sts	0x04EC, r1
	twi_running = TRUE;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	90 93 43 05 	sts	0x0543, r25
     9b2:	80 93 42 05 	sts	0x0542, r24
	nextTwiOperation = 0;
     9b6:	10 92 31 05 	sts	0x0531, r1
     9ba:	10 92 30 05 	sts	0x0530, r1
	if (next_twi_operation()) {
     9be:	0e 94 60 04 	call	0x8c0	; 0x8c0 <next_twi_operation>
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	19 f0       	breq	.+6      	; 0x9cc <twi_start_master_operation+0x2a>
		twi_start();
     9c6:	85 ea       	ldi	r24, 0xA5	; 165
     9c8:	80 93 bc 00 	sts	0x00BC, r24
     9cc:	08 95       	ret

000009ce <twiMultipleOperations>:
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     9ce:	1f 93       	push	r17
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     9d8:	0f c0       	rjmp	.+30     	; 0x9f8 <twiMultipleOperations+0x2a>
		furtherOperations[i] = operations[i];
     9da:	da 01       	movw	r26, r20
     9dc:	a6 58       	subi	r26, 0x86	; 134
     9de:	ba 4f       	sbci	r27, 0xFA	; 250
     9e0:	fb 01       	movw	r30, r22
     9e2:	e4 0f       	add	r30, r20
     9e4:	f5 1f       	adc	r31, r21
     9e6:	17 e0       	ldi	r17, 0x07	; 7
     9e8:	01 90       	ld	r0, Z+
     9ea:	0d 92       	st	X+, r0
     9ec:	11 50       	subi	r17, 0x01	; 1
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <twiMultipleOperations+0x1a>
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	49 5f       	subi	r20, 0xF9	; 249
     9f6:	5f 4f       	sbci	r21, 0xFF	; 255
     9f8:	28 17       	cp	r18, r24
     9fa:	39 07       	cpc	r19, r25
     9fc:	5c f0       	brlt	.+22     	; 0xa14 <twiMultipleOperations+0x46>
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     9fe:	f9 01       	movw	r30, r18
     a00:	43 e0       	ldi	r20, 0x03	; 3
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	4a 95       	dec	r20
     a08:	e1 f7       	brne	.-8      	; 0xa02 <twiMultipleOperations+0x34>
     a0a:	e2 1b       	sub	r30, r18
     a0c:	f3 0b       	sbc	r31, r19
     a0e:	e1 58       	subi	r30, 0x81	; 129
     a10:	fa 4f       	sbci	r31, 0xFA	; 250
     a12:	09 c0       	rjmp	.+18     	; 0xa26 <twiMultipleOperations+0x58>
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     a14:	23 30       	cpi	r18, 0x03	; 3
     a16:	31 05       	cpc	r19, r1
     a18:	01 f7       	brne	.-64     	; 0x9da <twiMultipleOperations+0xc>
     a1a:	f1 cf       	rjmp	.-30     	; 0x9fe <twiMultipleOperations+0x30>
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i].operationMode = TWI_IllegalOperation;
     a1c:	11 82       	std	Z+1, r1	; 0x01
     a1e:	10 82       	st	Z, r1
void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
     a20:	2f 5f       	subi	r18, 0xFF	; 255
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	37 96       	adiw	r30, 0x07	; 7
     a26:	23 30       	cpi	r18, 0x03	; 3
     a28:	31 05       	cpc	r19, r1
     a2a:	c4 f3       	brlt	.-16     	; 0xa1c <twiMultipleOperations+0x4e>
		furtherOperations[i].operationMode = TWI_IllegalOperation;
	}
	twi_start_master_operation();
     a2c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <twi_start_master_operation>
}
     a30:	1f 91       	pop	r17
     a32:	08 95       	ret

00000a34 <twiSendReceive>:
void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
	twiMultipleOperations(1, op);
}

void twiSendReceive(TWIDevice targetDevice, TWIBuffer sendData, TWIBuffer receiveBuffer) {
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	2e 97       	sbiw	r28, 0x0e	; 14
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
	TWIOperation ops[2] = {
     a4c:	fe 01       	movw	r30, r28
     a4e:	31 96       	adiw	r30, 0x01	; 1
     a50:	9e e0       	ldi	r25, 0x0E	; 14
     a52:	df 01       	movw	r26, r30
     a54:	1d 92       	st	X+, r1
     a56:	9a 95       	dec	r25
     a58:	e9 f7       	brne	.-6      	; 0xa54 <twiSendReceive+0x20>
     a5a:	49 83       	std	Y+1, r20	; 0x01
     a5c:	5a 83       	std	Y+2, r21	; 0x02
     a5e:	6b 83       	std	Y+3, r22	; 0x03
     a60:	7c 83       	std	Y+4, r23	; 0x04
     a62:	8d 83       	std	Y+5, r24	; 0x05
     a64:	42 e0       	ldi	r20, 0x02	; 2
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	5f 83       	std	Y+7, r21	; 0x07
     a6a:	4e 83       	std	Y+6, r20	; 0x06
     a6c:	08 87       	std	Y+8, r16	; 0x08
     a6e:	19 87       	std	Y+9, r17	; 0x09
     a70:	2a 87       	std	Y+10, r18	; 0x0a
     a72:	3b 87       	std	Y+11, r19	; 0x0b
     a74:	8c 87       	std	Y+12, r24	; 0x0c
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	9e 87       	std	Y+14, r25	; 0x0e
     a7c:	8d 87       	std	Y+13, r24	; 0x0d
		(TWIOperation) { sendData, targetDevice, TWI_Send },
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	bf 01       	movw	r22, r30
     a84:	0e 94 e7 04 	call	0x9ce	; 0x9ce <twiMultipleOperations>
}
     a88:	2e 96       	adiw	r28, 0x0e	; 14
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	f8 94       	cli
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	cf 91       	pop	r28
     a96:	df 91       	pop	r29
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <twiReceive>:
void twiSend(TWIDevice targetDevice, TWIBuffer data) {
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
	twiMultipleOperations(1, op);
}

void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	27 97       	sbiw	r28, 0x07	; 7
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
     ab2:	fe 01       	movw	r30, r28
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	97 e0       	ldi	r25, 0x07	; 7
     ab8:	df 01       	movw	r26, r30
     aba:	1d 92       	st	X+, r1
     abc:	9a 95       	dec	r25
     abe:	e9 f7       	brne	.-6      	; 0xaba <twiReceive+0x1c>
     ac0:	49 83       	std	Y+1, r20	; 0x01
     ac2:	5a 83       	std	Y+2, r21	; 0x02
     ac4:	6b 83       	std	Y+3, r22	; 0x03
     ac6:	7c 83       	std	Y+4, r23	; 0x04
     ac8:	8d 83       	std	Y+5, r24	; 0x05
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9f 83       	std	Y+7, r25	; 0x07
     ad0:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     ad2:	bf 01       	movw	r22, r30
     ad4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <twiMultipleOperations>
}
     ad8:	27 96       	adiw	r28, 0x07	; 7
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	cf 91       	pop	r28
     ae6:	df 91       	pop	r29
     ae8:	08 95       	ret

00000aea <twiSend>:
			twi_error = TWI_Illegal_Status;
			twi_unexpectedCondition();
	}
}

void twiSend(TWIDevice targetDevice, TWIBuffer data) {
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	27 97       	sbiw	r28, 0x07	; 7
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
     afe:	fe 01       	movw	r30, r28
     b00:	31 96       	adiw	r30, 0x01	; 1
     b02:	97 e0       	ldi	r25, 0x07	; 7
     b04:	df 01       	movw	r26, r30
     b06:	1d 92       	st	X+, r1
     b08:	9a 95       	dec	r25
     b0a:	e9 f7       	brne	.-6      	; 0xb06 <twiSend+0x1c>
     b0c:	49 83       	std	Y+1, r20	; 0x01
     b0e:	5a 83       	std	Y+2, r21	; 0x02
     b10:	6b 83       	std	Y+3, r22	; 0x03
     b12:	7c 83       	std	Y+4, r23	; 0x04
     b14:	8d 83       	std	Y+5, r24	; 0x05
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	9f 83       	std	Y+7, r25	; 0x07
     b1c:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	bf 01       	movw	r22, r30
     b24:	0e 94 e7 04 	call	0x9ce	; 0x9ce <twiMultipleOperations>
}
     b28:	27 96       	adiw	r28, 0x07	; 7
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	cf 91       	pop	r28
     b36:	df 91       	pop	r29
     b38:	08 95       	ret

00000b3a <WAIT_FOR_TWI>:
}

void WAIT_FOR_TWI() {
	while (1) {
		uint8_t still_running;
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     b3a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b3c:	f8 94       	cli
			still_running = twi_running;
     b3e:	80 91 42 05 	lds	r24, 0x0542
     b42:	90 91 43 05 	lds	r25, 0x0543
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b46:	2f bf       	out	0x3f, r18	; 63
		}
		if (still_running) break;
     b48:	88 23       	and	r24, r24
     b4a:	b9 f3       	breq	.-18     	; 0xb3a <WAIT_FOR_TWI>
	}
}
     b4c:	08 95       	ret

00000b4e <twi_handleMasterRequest>:

	TWIBuffer twi_handleMasterRequest() {
		// We only operate in RPC-mode, so this call always arrives
		// after the according twi_handleMasterTransmission, which
		// sets receiveBuffer to the result-value.
		return receiveBuffer;
     b4e:	60 91 76 05 	lds	r22, 0x0576
     b52:	70 91 77 05 	lds	r23, 0x0577
	}
     b56:	80 91 78 05 	lds	r24, 0x0578
     b5a:	90 91 79 05 	lds	r25, 0x0579
     b5e:	08 95       	ret

00000b60 <twi_rpc_oneway>:
	sendBuffer.data[0] = operation;
	sendBuffer.size = parameters.size + 1;
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
}

void twi_rpc_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     b60:	1f 93       	push	r17
     b62:	18 2f       	mov	r17, r24
     b64:	86 2f       	mov	r24, r22
     b66:	ba 01       	movw	r22, r20
     b68:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     b6a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <fillSendBuffer>
	twiSend(device, sendBuffer);
     b6e:	40 91 e1 01 	lds	r20, 0x01E1
     b72:	50 91 e2 01 	lds	r21, 0x01E2
     b76:	60 91 e3 01 	lds	r22, 0x01E3
     b7a:	70 91 e4 01 	lds	r23, 0x01E4
     b7e:	81 2f       	mov	r24, r17
     b80:	0e 94 75 05 	call	0xaea	; 0xaea <twiSend>
}
     b84:	1f 91       	pop	r17
     b86:	08 95       	ret

00000b88 <bgx1_setIllumination>:

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_setIllumination, CMD_SetIllumination, uint16_t)
     b88:	9c 01       	movw	r18, r24
     b8a:	42 e0       	ldi	r20, 0x02	; 2
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	80 91 c4 01 	lds	r24, 0x01C4
     b92:	63 e4       	ldi	r22, 0x43	; 67
     b94:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     b98:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     b9c:	08 95       	ret

00000b9e <bgx1_termPrint_base>:

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_VOID	(bgx1_termGoto, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_termScroll, CMD_TermScroll, uint8_t)
TWI_RPC_FUNCTION_VOID_VAR(bgx1_termPrint_base, CMD_TermPrint, StringArg)
     b9e:	9c 01       	movw	r18, r24
     ba0:	ab 01       	movw	r20, r22
     ba2:	80 91 c4 01 	lds	r24, 0x01C4
     ba6:	63 e3       	ldi	r22, 0x33	; 51
     ba8:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     bac:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     bb0:	08 95       	ret

00000bb2 <bgx1_termScroll>:
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo, CMD_LineTo, Point)

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_VOID	(bgx1_termGoto, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_termScroll, CMD_TermScroll, uint8_t)
     bb2:	9c 01       	movw	r18, r24
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	80 91 c4 01 	lds	r24, 0x01C4
     bbc:	62 e3       	ldi	r22, 0x32	; 50
     bbe:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     bc2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     bc6:	08 95       	ret

00000bc8 <bgx1_termGoto>:
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo, CMD_LineTo, Point)

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_VOID	(bgx1_termGoto, CMD_TermGoto, Point)
     bc8:	9c 01       	movw	r18, r24
     bca:	42 e0       	ldi	r20, 0x02	; 2
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	80 91 c4 01 	lds	r24, 0x01C4
     bd2:	61 e3       	ldi	r22, 0x31	; 49
     bd4:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     bd8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     bdc:	08 95       	ret

00000bde <bgx1_termClear>:
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo, CMD_LineTo, Point)

// Terminal
TWI_RPC_FUNCTION_NOTIFY	(bgx1_termClear, CMD_TermClear)
     bde:	80 91 c4 01 	lds	r24, 0x01C4
     be2:	60 e3       	ldi	r22, 0x30	; 48
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     bee:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     bf2:	08 95       	ret

00000bf4 <bgx1_lineTo>:
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_lineTo, CMD_LineTo, Point)
     bf4:	9c 01       	movw	r18, r24
     bf6:	42 e0       	ldi	r20, 0x02	; 2
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	80 91 c4 01 	lds	r24, 0x01C4
     bfe:	6b e1       	ldi	r22, 0x1B	; 27
     c00:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c04:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c08:	08 95       	ret

00000c0a <bgx1_selectFont>:
TWI_RPC_FUNCTION_VOID	(bgx1_move, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
     c0a:	9c 01       	movw	r18, r24
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	80 91 c4 01 	lds	r24, 0x01C4
     c14:	65 e1       	ldi	r22, 0x15	; 21
     c16:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c1a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c1e:	08 95       	ret

00000c20 <bgx1_fillAll>:
} StringArg, *PStringArg;

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
     c20:	9c 01       	movw	r18, r24
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	80 91 c4 01 	lds	r24, 0x01C4
     c2a:	62 e1       	ldi	r22, 0x12	; 18
     c2c:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c30:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c34:	08 95       	ret

00000c36 <bgx1_mode>:
	// Rest is filled with char[].
} StringArg, *PStringArg;

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
     c36:	9c 01       	movw	r18, r24
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	80 91 c4 01 	lds	r24, 0x01C4
     c40:	61 e1       	ldi	r22, 0x11	; 17
     c42:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c46:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c4a:	08 95       	ret

00000c4c <bgx1_move>:
	uint8_t len;
	// Rest is filled with char[].
} StringArg, *PStringArg;

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move, CMD_Move, Point)
     c4c:	9c 01       	movw	r18, r24
     c4e:	42 e0       	ldi	r20, 0x02	; 2
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	80 91 c4 01 	lds	r24, 0x01C4
     c56:	60 e1       	ldi	r22, 0x10	; 16
     c58:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c5c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c60:	08 95       	ret

00000c62 <bgx1_setStatus>:

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_setStatus, CMD_SetStatus, uint8_t)
     c62:	9c 01       	movw	r18, r24
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	80 91 c4 01 	lds	r24, 0x01C4
     c6c:	63 e0       	ldi	r22, 0x03	; 3
     c6e:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c72:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c76:	08 95       	ret

00000c78 <bgx1_reset>:
  
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
     c78:	80 91 c4 01 	lds	r24, 0x01C4
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	a9 01       	movw	r20, r18
     c84:	0e 94 b0 05 	call	0xb60	; 0xb60 <twi_rpc_oneway>
     c88:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     c8c:	08 95       	ret

00000c8e <twi_rpc>:

void twi_rpc(TWIDevice device, byte operation, TWIBuffer parameters, TWIBuffer resultBuffer) {
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	d8 2e       	mov	r13, r24
     c9a:	86 2f       	mov	r24, r22
     c9c:	ba 01       	movw	r22, r20
     c9e:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     ca0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <fillSendBuffer>
	twiSendReceive(device, sendBuffer, resultBuffer);
     ca4:	40 91 e1 01 	lds	r20, 0x01E1
     ca8:	50 91 e2 01 	lds	r21, 0x01E2
     cac:	60 91 e3 01 	lds	r22, 0x01E3
     cb0:	70 91 e4 01 	lds	r23, 0x01E4
     cb4:	8d 2d       	mov	r24, r13
     cb6:	98 01       	movw	r18, r16
     cb8:	87 01       	movw	r16, r14
     cba:	0e 94 1a 05 	call	0xa34	; 0xa34 <twiSendReceive>
}
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	df 90       	pop	r13
     cc8:	08 95       	ret

00000cca <bgx1_syncInterface>:
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	0f 92       	push	r0
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9c 01       	movw	r18, r24
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	7e 01       	movw	r14, r28
     ce4:	08 94       	sec
     ce6:	e1 1c       	adc	r14, r1
     ce8:	f1 1c       	adc	r15, r1
     cea:	01 e0       	ldi	r16, 0x01	; 1
     cec:	10 e0       	ldi	r17, 0x00	; 0
     cee:	80 91 c4 01 	lds	r24, 0x01C4
     cf2:	62 e4       	ldi	r22, 0x42	; 66
     cf4:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     cf8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <bgx1_getAnalog>:
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog, CMD_GetAnalog, uint8_t, uint16_t)
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <bgx1_getAnalog+0xe>
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	9c 01       	movw	r18, r24
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	7e 01       	movw	r14, r28
     d28:	08 94       	sec
     d2a:	e1 1c       	adc	r14, r1
     d2c:	f1 1c       	adc	r15, r1
     d2e:	02 e0       	ldi	r16, 0x02	; 2
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	80 91 c4 01 	lds	r24, 0x01C4
     d36:	61 e4       	ldi	r22, 0x41	; 65
     d38:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     d3c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	08 95       	ret

00000d56 <bgx1_syncPort>:
	uint8_t ddr;
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort, CMD_SyncPort, SyncPortArgs, uint8_t)
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	0f 92       	push	r0
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	9c 01       	movw	r18, r24
     d6a:	42 e0       	ldi	r20, 0x02	; 2
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	7e 01       	movw	r14, r28
     d70:	08 94       	sec
     d72:	e1 1c       	adc	r14, r1
     d74:	f1 1c       	adc	r15, r1
     d76:	01 e0       	ldi	r16, 0x01	; 1
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	80 91 c4 01 	lds	r24, 0x01C4
     d7e:	60 e4       	ldi	r22, 0x40	; 64
     d80:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     d84:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	08 95       	ret

00000d9a <bgx1_embeddedImage>:
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <bgx1_embeddedImage+0xe>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9c 01       	movw	r18, r24
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	7e 01       	movw	r14, r28
     db4:	08 94       	sec
     db6:	e1 1c       	adc	r14, r1
     db8:	f1 1c       	adc	r15, r1
     dba:	02 e0       	ldi	r16, 0x02	; 2
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	80 91 c4 01 	lds	r24, 0x01C4
     dc2:	6a e1       	ldi	r22, 0x1A	; 26
     dc4:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     dc8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	08 95       	ret

00000de2 <bgx1_drawBitmap_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <bgx1_drawBitmap_base+0xe>
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	9c 01       	movw	r18, r24
     df6:	ab 01       	movw	r20, r22
     df8:	7e 01       	movw	r14, r28
     dfa:	08 94       	sec
     dfc:	e1 1c       	adc	r14, r1
     dfe:	f1 1c       	adc	r15, r1
     e00:	02 e0       	ldi	r16, 0x02	; 2
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	80 91 c4 01 	lds	r24, 0x01C4
     e08:	69 e1       	ldi	r22, 0x19	; 25
     e0a:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     e0e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <bgx1_box>:
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box, CMD_Box, Rect, Point)
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <bgx1_box+0xe>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 01       	movw	r18, r24
     e3c:	42 e0       	ldi	r20, 0x02	; 2
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	7e 01       	movw	r14, r28
     e42:	08 94       	sec
     e44:	e1 1c       	adc	r14, r1
     e46:	f1 1c       	adc	r15, r1
     e48:	02 e0       	ldi	r16, 0x02	; 2
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	80 91 c4 01 	lds	r24, 0x01C4
     e50:	68 e1       	ldi	r22, 0x18	; 24
     e52:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     e56:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	08 95       	ret

00000e70 <bgx1_vLine>:
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <bgx1_vLine+0xe>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9c 01       	movw	r18, r24
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	7e 01       	movw	r14, r28
     e8a:	08 94       	sec
     e8c:	e1 1c       	adc	r14, r1
     e8e:	f1 1c       	adc	r15, r1
     e90:	02 e0       	ldi	r16, 0x02	; 2
     e92:	10 e0       	ldi	r17, 0x00	; 0
     e94:	80 91 c4 01 	lds	r24, 0x01C4
     e98:	67 e1       	ldi	r22, 0x17	; 23
     e9a:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     e9e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	08 95       	ret

00000eb8 <bgx1_hLine>:
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <bgx1_hLine+0xe>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9c 01       	movw	r18, r24
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	7e 01       	movw	r14, r28
     ed2:	08 94       	sec
     ed4:	e1 1c       	adc	r14, r1
     ed6:	f1 1c       	adc	r15, r1
     ed8:	02 e0       	ldi	r16, 0x02	; 2
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	80 91 c4 01 	lds	r24, 0x01C4
     ee0:	66 e1       	ldi	r22, 0x16	; 22
     ee2:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     ee6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	08 95       	ret

00000f00 <bgx1_textWidth_base>:
// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	0f 92       	push	r0
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9c 01       	movw	r18, r24
     f14:	ab 01       	movw	r20, r22
     f16:	7e 01       	movw	r14, r28
     f18:	08 94       	sec
     f1a:	e1 1c       	adc	r14, r1
     f1c:	f1 1c       	adc	r15, r1
     f1e:	01 e0       	ldi	r16, 0x01	; 1
     f20:	10 e0       	ldi	r17, 0x00	; 0
     f22:	80 91 c4 01 	lds	r24, 0x01C4
     f26:	64 e1       	ldi	r22, 0x14	; 20
     f28:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     f2c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <bgx1_print_base>:

// Display
TWI_RPC_FUNCTION_VOID	(bgx1_move, CMD_Move, Point)
TWI_RPC_FUNCTION_VOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_VOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <bgx1_print_base+0xe>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	9c 01       	movw	r18, r24
     f56:	ab 01       	movw	r20, r22
     f58:	7e 01       	movw	r14, r28
     f5a:	08 94       	sec
     f5c:	e1 1c       	adc	r14, r1
     f5e:	f1 1c       	adc	r15, r1
     f60:	02 e0       	ldi	r16, 0x02	; 2
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	80 91 c4 01 	lds	r24, 0x01C4
     f68:	63 e1       	ldi	r22, 0x13	; 19
     f6a:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     f6e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	08 95       	ret

00000f88 <bgx1_getStatus>:
};

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	7e 01       	movw	r14, r28
     f9c:	08 94       	sec
     f9e:	e1 1c       	adc	r14, r1
     fa0:	f1 1c       	adc	r15, r1
     fa2:	01 e0       	ldi	r16, 0x01	; 1
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	80 91 c4 01 	lds	r24, 0x01C4
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	a9 01       	movw	r20, r18
     fb2:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     fb6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	08 95       	ret

00000fcc <bgx1_getVersion>:
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_NOTIFY	(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion, CMD_GetVersion, uint16_t)
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <bgx1_getVersion+0xe>
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	7e 01       	movw	r14, r28
     fe0:	08 94       	sec
     fe2:	e1 1c       	adc	r14, r1
     fe4:	f1 1c       	adc	r15, r1
     fe6:	02 e0       	ldi	r16, 0x02	; 2
     fe8:	10 e0       	ldi	r17, 0x00	; 0
     fea:	80 91 c4 01 	lds	r24, 0x01C4
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	a9 01       	movw	r20, r18
     ff6:	0e 94 47 06 	call	0xc8e	; 0xc8e <twi_rpc>
     ffa:	0e 94 9d 05 	call	0xb3a	; 0xb3a <WAIT_FOR_TWI>
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	08 95       	ret

00001014 <twi_handleRpcRequest>:

// The hash-structure used by the uthash implementation
PTwiFunction twiRpcFunctions = NULL;

// buffer containes the arguments and the result afterwards.
void twi_handleRpcRequest(byte operation, TWIBuffer *buffer) {
    1014:	af 92       	push	r10
    1016:	bf 92       	push	r11
    1018:	cf 92       	push	r12
    101a:	df 92       	push	r13
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	6b 01       	movw	r12, r22
	PTwiFunction result;
	HASH_FIND_INT(twiRpcFunctions, &operation, result);
    1032:	e0 91 6e 02 	lds	r30, 0x026E
    1036:	f0 91 6f 02 	lds	r31, 0x026F
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f4       	brne	.+2      	; 0x1040 <twi_handleRpcRequest+0x2c>
    103e:	63 c0       	rjmp	.+198    	; 0x1106 <twi_handleRpcRequest+0xf2>
    1040:	28 2f       	mov	r18, r24
    1042:	33 27       	eor	r19, r19
    1044:	27 fd       	sbrc	r18, 7
    1046:	30 95       	com	r19
    1048:	e3 80       	ldd	r14, Z+3	; 0x03
    104a:	f4 80       	ldd	r15, Z+4	; 0x04
    104c:	c9 01       	movw	r24, r18
    104e:	96 95       	lsr	r25
    1050:	87 95       	ror	r24
    1052:	96 95       	lsr	r25
    1054:	87 95       	ror	r24
    1056:	a9 01       	movw	r20, r18
    1058:	75 e0       	ldi	r23, 0x05	; 5
    105a:	44 0f       	add	r20, r20
    105c:	55 1f       	adc	r21, r21
    105e:	7a 95       	dec	r23
    1060:	e1 f7       	brne	.-8      	; 0x105a <twi_handleRpcRequest+0x46>
    1062:	84 0f       	add	r24, r20
    1064:	95 1f       	adc	r25, r21
    1066:	4a 81       	ldd	r20, Y+2	; 0x02
    1068:	55 27       	eor	r21, r21
    106a:	47 fd       	sbrc	r20, 7
    106c:	50 95       	com	r21
    106e:	84 0f       	add	r24, r20
    1070:	95 1f       	adc	r25, r21
    1072:	82 27       	eor	r24, r18
    1074:	93 27       	eor	r25, r19
    1076:	d7 01       	movw	r26, r14
    1078:	12 96       	adiw	r26, 0x02	; 2
    107a:	2d 91       	ld	r18, X+
    107c:	3c 91       	ld	r19, X
    107e:	13 97       	sbiw	r26, 0x03	; 3
    1080:	21 50       	subi	r18, 0x01	; 1
    1082:	30 40       	sbci	r19, 0x00	; 0
    1084:	82 23       	and	r24, r18
    1086:	93 23       	and	r25, r19
    1088:	9c 01       	movw	r18, r24
    108a:	22 0f       	add	r18, r18
    108c:	33 1f       	adc	r19, r19
    108e:	28 0f       	add	r18, r24
    1090:	39 1f       	adc	r19, r25
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	ed 91       	ld	r30, X+
    1098:	fc 91       	ld	r31, X
    109a:	11 97       	sbiw	r26, 0x01	; 1
    109c:	e2 0f       	add	r30, r18
    109e:	f3 1f       	adc	r31, r19
    10a0:	00 81       	ld	r16, Z
    10a2:	11 81       	ldd	r17, Z+1	; 0x01
    10a4:	01 15       	cp	r16, r1
    10a6:	11 05       	cpc	r17, r1
    10a8:	39 f0       	breq	.+14     	; 0x10b8 <twi_handleRpcRequest+0xa4>
    10aa:	1a 96       	adiw	r26, 0x0a	; 10
    10ac:	8d 91       	ld	r24, X+
    10ae:	9c 91       	ld	r25, X
    10b0:	1b 97       	sbiw	r26, 0x0b	; 11
    10b2:	08 1b       	sub	r16, r24
    10b4:	19 0b       	sbc	r17, r25
    10b6:	20 c0       	rjmp	.+64     	; 0x10f8 <twi_handleRpcRequest+0xe4>
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	1d c0       	rjmp	.+58     	; 0x10f8 <twi_handleRpcRequest+0xe4>
    10be:	f8 01       	movw	r30, r16
    10c0:	87 85       	ldd	r24, Z+15	; 0x0f
    10c2:	90 89       	ldd	r25, Z+16	; 0x10
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	91 05       	cpc	r25, r1
    10c8:	49 f4       	brne	.+18     	; 0x10dc <twi_handleRpcRequest+0xc8>
    10ca:	85 85       	ldd	r24, Z+13	; 0x0d
    10cc:	96 85       	ldd	r25, Z+14	; 0x0e
    10ce:	b5 01       	movw	r22, r10
    10d0:	42 e0       	ldi	r20, 0x02	; 2
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	0e 94 3f 13 	call	0x267e	; 0x267e <memcmp>
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	d9 f0       	breq	.+54     	; 0x1112 <twi_handleRpcRequest+0xfe>
    10dc:	d8 01       	movw	r26, r16
    10de:	1b 96       	adiw	r26, 0x0b	; 11
    10e0:	0d 91       	ld	r16, X+
    10e2:	1c 91       	ld	r17, X
    10e4:	1c 97       	sbiw	r26, 0x0c	; 12
    10e6:	01 15       	cp	r16, r1
    10e8:	11 05       	cpc	r17, r1
    10ea:	69 f0       	breq	.+26     	; 0x1106 <twi_handleRpcRequest+0xf2>
    10ec:	f7 01       	movw	r30, r14
    10ee:	82 85       	ldd	r24, Z+10	; 0x0a
    10f0:	93 85       	ldd	r25, Z+11	; 0x0b
    10f2:	08 1b       	sub	r16, r24
    10f4:	19 0b       	sbc	r17, r25
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <twi_handleRpcRequest+0xec>
    10f8:	5e 01       	movw	r10, r28
    10fa:	08 94       	sec
    10fc:	a1 1c       	adc	r10, r1
    10fe:	b1 1c       	adc	r11, r1
    1100:	01 15       	cp	r16, r1
    1102:	11 05       	cpc	r17, r1
    1104:	e1 f6       	brne	.-72     	; 0x10be <twi_handleRpcRequest+0xaa>
	if (result)
		result->associatedFunction(buffer);
	else
		// Illegal operation... would be nice to have some error-handling.
		// Simply avoid sending random data.
		buffer->size = 0;
    1106:	d6 01       	movw	r26, r12
    1108:	13 96       	adiw	r26, 0x03	; 3
    110a:	1c 92       	st	X, r1
    110c:	1e 92       	st	-X, r1
    110e:	12 97       	sbiw	r26, 0x02	; 2
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <twi_handleRpcRequest+0x10c>
// buffer containes the arguments and the result afterwards.
void twi_handleRpcRequest(byte operation, TWIBuffer *buffer) {
	PTwiFunction result;
	HASH_FIND_INT(twiRpcFunctions, &operation, result);
	if (result)
		result->associatedFunction(buffer);
    1112:	d8 01       	movw	r26, r16
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	ed 91       	ld	r30, X+
    1118:	fc 91       	ld	r31, X
    111a:	12 97       	sbiw	r26, 0x02	; 2
    111c:	c6 01       	movw	r24, r12
    111e:	09 95       	icall
	else
		// Illegal operation... would be nice to have some error-handling.
		// Simply avoid sending random data.
		buffer->size = 0;
}
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	bf 90       	pop	r11
    1134:	af 90       	pop	r10
    1136:	08 95       	ret

00001138 <twi_handleMasterTransmission>:
		// after the according twi_handleMasterTransmission, which
		// sets receiveBuffer to the result-value.
		return receiveBuffer;
	}

	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <twi_handleMasterTransmission+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <twi_handleMasterTransmission+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	69 83       	std	Y+1, r22	; 0x01
    1146:	7a 83       	std	Y+2, r23	; 0x02
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	9c 83       	std	Y+4, r25	; 0x04
		byte operation = twi_buffer.data[0];
    114c:	e6 2f       	mov	r30, r22
    114e:	f7 2f       	mov	r31, r23
    1150:	81 91       	ld	r24, Z+
		twi_buffer.data++; // Skip the operation-byte
    1152:	fa 83       	std	Y+2, r31	; 0x02
    1154:	e9 83       	std	Y+1, r30	; 0x01
		twi_buffer.size--;
    1156:	2b 81       	ldd	r18, Y+3	; 0x03
    1158:	3c 81       	ldd	r19, Y+4	; 0x04
    115a:	21 50       	subi	r18, 0x01	; 1
    115c:	30 40       	sbci	r19, 0x00	; 0
    115e:	3c 83       	std	Y+4, r19	; 0x04
    1160:	2b 83       	std	Y+3, r18	; 0x03
		twi_handleRpcRequest(operation, &twi_buffer);
    1162:	be 01       	movw	r22, r28
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	0e 94 0a 08 	call	0x1014	; 0x1014 <twi_handleRpcRequest>
		// The buffer has been modified, store it to be returned by
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	ab 81       	ldd	r26, Y+3	; 0x03
    1172:	bc 81       	ldd	r27, Y+4	; 0x04
    1174:	80 93 76 05 	sts	0x0576, r24
    1178:	90 93 77 05 	sts	0x0577, r25
    117c:	a0 93 78 05 	sts	0x0578, r26
    1180:	b0 93 79 05 	sts	0x0579, r27
	}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <__vector_26>:
	} else {
		twi_continue();
	}
}

ISR(TWI_vect) {
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	0b b6       	in	r0, 0x3b	; 59
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	4f 93       	push	r20
    11a6:	5f 93       	push	r21
    11a8:	6f 93       	push	r22
    11aa:	7f 93       	push	r23
    11ac:	8f 93       	push	r24
    11ae:	9f 93       	push	r25
    11b0:	af 93       	push	r26
    11b2:	bf 93       	push	r27
    11b4:	ef 93       	push	r30
    11b6:	ff 93       	push	r31
	switch(TW_STATUS) {
    11b8:	80 91 b9 00 	lds	r24, 0x00B9
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	88 7f       	andi	r24, 0xF8	; 248
    11c0:	90 70       	andi	r25, 0x00	; 0
    11c2:	88 36       	cpi	r24, 0x68	; 104
    11c4:	91 05       	cpc	r25, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <__vector_26+0x38>
    11c8:	01 c1       	rjmp	.+514    	; 0x13cc <__vector_26+0x23a>
    11ca:	89 36       	cpi	r24, 0x69	; 105
    11cc:	91 05       	cpc	r25, r1
    11ce:	ec f5       	brge	.+122    	; 0x124a <__vector_26+0xb8>
    11d0:	80 33       	cpi	r24, 0x30	; 48
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <__vector_26+0x46>
    11d6:	9b c0       	rjmp	.+310    	; 0x130e <__vector_26+0x17c>
    11d8:	81 33       	cpi	r24, 0x31	; 49
    11da:	91 05       	cpc	r25, r1
    11dc:	cc f4       	brge	.+50     	; 0x1210 <__vector_26+0x7e>
    11de:	88 31       	cpi	r24, 0x18	; 24
    11e0:	91 05       	cpc	r25, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <__vector_26+0x54>
    11e4:	77 c0       	rjmp	.+238    	; 0x12d4 <__vector_26+0x142>
    11e6:	89 31       	cpi	r24, 0x19	; 25
    11e8:	91 05       	cpc	r25, r1
    11ea:	4c f4       	brge	.+18     	; 0x11fe <__vector_26+0x6c>
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__vector_26+0x62>
    11f2:	68 c0       	rjmp	.+208    	; 0x12c4 <__vector_26+0x132>
    11f4:	80 31       	cpi	r24, 0x10	; 16
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__vector_26+0x6a>
    11fa:	01 c1       	rjmp	.+514    	; 0x13fe <__vector_26+0x26c>
    11fc:	63 c0       	rjmp	.+198    	; 0x12c4 <__vector_26+0x132>
    11fe:	80 32       	cpi	r24, 0x20	; 32
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <__vector_26+0x74>
    1204:	8d c0       	rjmp	.+282    	; 0x1320 <__vector_26+0x18e>
    1206:	88 32       	cpi	r24, 0x28	; 40
    1208:	91 05       	cpc	r25, r1
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_26+0x7c>
    120c:	f8 c0       	rjmp	.+496    	; 0x13fe <__vector_26+0x26c>
    120e:	62 c0       	rjmp	.+196    	; 0x12d4 <__vector_26+0x142>
    1210:	88 34       	cpi	r24, 0x48	; 72
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <__vector_26+0x86>
    1216:	84 c0       	rjmp	.+264    	; 0x1320 <__vector_26+0x18e>
    1218:	89 34       	cpi	r24, 0x49	; 73
    121a:	91 05       	cpc	r25, r1
    121c:	4c f4       	brge	.+18     	; 0x1230 <__vector_26+0x9e>
    121e:	88 33       	cpi	r24, 0x38	; 56
    1220:	91 05       	cpc	r25, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <__vector_26+0x94>
    1224:	54 c0       	rjmp	.+168    	; 0x12ce <__vector_26+0x13c>
    1226:	80 34       	cpi	r24, 0x40	; 64
    1228:	91 05       	cpc	r25, r1
    122a:	09 f0       	breq	.+2      	; 0x122e <__vector_26+0x9c>
    122c:	e8 c0       	rjmp	.+464    	; 0x13fe <__vector_26+0x26c>
    122e:	ce c0       	rjmp	.+412    	; 0x13cc <__vector_26+0x23a>
    1230:	88 35       	cpi	r24, 0x58	; 88
    1232:	91 05       	cpc	r25, r1
    1234:	09 f4       	brne	.+2      	; 0x1238 <__vector_26+0xa6>
    1236:	77 c0       	rjmp	.+238    	; 0x1326 <__vector_26+0x194>
    1238:	80 36       	cpi	r24, 0x60	; 96
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <__vector_26+0xae>
    123e:	c6 c0       	rjmp	.+396    	; 0x13cc <__vector_26+0x23a>
    1240:	80 35       	cpi	r24, 0x50	; 80
    1242:	91 05       	cpc	r25, r1
    1244:	09 f0       	breq	.+2      	; 0x1248 <__vector_26+0xb6>
    1246:	db c0       	rjmp	.+438    	; 0x13fe <__vector_26+0x26c>
    1248:	c4 c0       	rjmp	.+392    	; 0x13d2 <__vector_26+0x240>
    124a:	88 39       	cpi	r24, 0x98	; 152
    124c:	91 05       	cpc	r25, r1
    124e:	09 f4       	brne	.+2      	; 0x1252 <__vector_26+0xc0>
    1250:	c9 c0       	rjmp	.+402    	; 0x13e4 <__vector_26+0x252>
    1252:	89 39       	cpi	r24, 0x99	; 153
    1254:	91 05       	cpc	r25, r1
    1256:	cc f4       	brge	.+50     	; 0x128a <__vector_26+0xf8>
    1258:	80 38       	cpi	r24, 0x80	; 128
    125a:	91 05       	cpc	r25, r1
    125c:	09 f4       	brne	.+2      	; 0x1260 <__vector_26+0xce>
    125e:	b9 c0       	rjmp	.+370    	; 0x13d2 <__vector_26+0x240>
    1260:	81 38       	cpi	r24, 0x81	; 129
    1262:	91 05       	cpc	r25, r1
    1264:	4c f4       	brge	.+18     	; 0x1278 <__vector_26+0xe6>
    1266:	80 37       	cpi	r24, 0x70	; 112
    1268:	91 05       	cpc	r25, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <__vector_26+0xdc>
    126c:	af c0       	rjmp	.+350    	; 0x13cc <__vector_26+0x23a>
    126e:	88 37       	cpi	r24, 0x78	; 120
    1270:	91 05       	cpc	r25, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <__vector_26+0xe4>
    1274:	c4 c0       	rjmp	.+392    	; 0x13fe <__vector_26+0x26c>
    1276:	aa c0       	rjmp	.+340    	; 0x13cc <__vector_26+0x23a>
    1278:	88 38       	cpi	r24, 0x88	; 136
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <__vector_26+0xee>
    127e:	b2 c0       	rjmp	.+356    	; 0x13e4 <__vector_26+0x252>
    1280:	80 39       	cpi	r24, 0x90	; 144
    1282:	91 05       	cpc	r25, r1
    1284:	09 f0       	breq	.+2      	; 0x1288 <__vector_26+0xf6>
    1286:	bb c0       	rjmp	.+374    	; 0x13fe <__vector_26+0x26c>
    1288:	a4 c0       	rjmp	.+328    	; 0x13d2 <__vector_26+0x240>
    128a:	80 3b       	cpi	r24, 0xB0	; 176
    128c:	91 05       	cpc	r25, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <__vector_26+0x100>
    1290:	4d c0       	rjmp	.+154    	; 0x132c <__vector_26+0x19a>
    1292:	81 3b       	cpi	r24, 0xB1	; 177
    1294:	91 05       	cpc	r25, r1
    1296:	4c f4       	brge	.+18     	; 0x12aa <__vector_26+0x118>
    1298:	80 3a       	cpi	r24, 0xA0	; 160
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <__vector_26+0x10e>
    129e:	9c c0       	rjmp	.+312    	; 0x13d8 <__vector_26+0x246>
    12a0:	88 3a       	cpi	r24, 0xA8	; 168
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <__vector_26+0x116>
    12a6:	ab c0       	rjmp	.+342    	; 0x13fe <__vector_26+0x26c>
    12a8:	41 c0       	rjmp	.+130    	; 0x132c <__vector_26+0x19a>
    12aa:	80 3c       	cpi	r24, 0xC0	; 192
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <__vector_26+0x120>
    12b0:	7b c0       	rjmp	.+246    	; 0x13a8 <__vector_26+0x216>
    12b2:	88 3c       	cpi	r24, 0xC8	; 200
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <__vector_26+0x128>
    12b8:	74 c0       	rjmp	.+232    	; 0x13a2 <__vector_26+0x210>
    12ba:	88 3b       	cpi	r24, 0xB8	; 184
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__vector_26+0x130>
    12c0:	9e c0       	rjmp	.+316    	; 0x13fe <__vector_26+0x26c>
    12c2:	44 c0       	rjmp	.+136    	; 0x134c <__vector_26+0x1ba>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
    12c4:	80 91 79 02 	lds	r24, 0x0279
    12c8:	80 93 bb 00 	sts	0x00BB, r24
    12cc:	1c c0       	rjmp	.+56     	; 0x1306 <__vector_26+0x174>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			twi_error = TWI_Arbitration_Lost;
    12ce:	85 e0       	ldi	r24, 0x05	; 5
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	77 c0       	rjmp	.+238    	; 0x13c2 <__vector_26+0x230>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
    12d4:	80 91 ea 04 	lds	r24, 0x04EA
    12d8:	90 91 eb 04 	lds	r25, 0x04EB
    12dc:	20 91 3a 05 	lds	r18, 0x053A
    12e0:	30 91 3b 05 	lds	r19, 0x053B
    12e4:	82 17       	cp	r24, r18
    12e6:	93 07       	cpc	r25, r19
    12e8:	f0 f4       	brcc	.+60     	; 0x1326 <__vector_26+0x194>
				twi_send(twi_buffer.data[alreadyHandled++]);
    12ea:	e0 91 38 05 	lds	r30, 0x0538
    12ee:	f0 91 39 05 	lds	r31, 0x0539
    12f2:	e8 0f       	add	r30, r24
    12f4:	f9 1f       	adc	r31, r25
    12f6:	20 81       	ld	r18, Z
    12f8:	20 93 bb 00 	sts	0x00BB, r18
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 eb 04 	sts	0x04EB, r25
    1302:	80 93 ea 04 	sts	0x04EA, r24
    1306:	85 e8       	ldi	r24, 0x85	; 133
    1308:	80 93 bc 00 	sts	0x00BC, r24
    130c:	80 c0       	rjmp	.+256    	; 0x140e <__vector_26+0x27c>
		case TW_MT_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			twi_error = TWI_Master_TooMuchDataTransmitted;
    130e:	86 e0       	ldi	r24, 0x06	; 6
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	90 93 ed 04 	sts	0x04ED, r25
    1316:	80 93 ec 04 	sts	0x04EC, r24
			twi_stop();
    131a:	0e 94 7b 00 	call	0xf6	; 0xf6 <twi_stop>
			break;
    131e:	77 c0       	rjmp	.+238    	; 0x140e <__vector_26+0x27c>
			break;
		case TW_MR_DATA_ACK:
			twi_receive_byte();
			break;
		case TW_MR_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
    1320:	84 e0       	ldi	r24, 0x04	; 4
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	f6 cf       	rjmp	.-20     	; 0x1312 <__vector_26+0x180>
			twi_stop();
			break;
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_stop_or_next();
    1326:	0e 94 bf 04 	call	0x97e	; 0x97e <twi_stop_or_next>
			break;
    132a:	71 c0       	rjmp	.+226    	; 0x140e <__vector_26+0x27c>

	TWIBuffer twi_handleMasterRequest() {
		// We only operate in RPC-mode, so this call always arrives
		// after the according twi_handleMasterTransmission, which
		// sets receiveBuffer to the result-value.
		return receiveBuffer;
    132c:	30 91 76 05 	lds	r19, 0x0576
    1330:	20 91 77 05 	lds	r18, 0x0577
    1334:	90 91 78 05 	lds	r25, 0x0578
    1338:	80 91 79 05 	lds	r24, 0x0579
#ifdef TWI_Slave
// Slave Transmitter
		case TW_ST_SLA_ACK:
		case TW_ST_ARB_LOST_SLA_ACK:
			twi_buffer = twi_handleMasterRequest();
    133c:	30 93 38 05 	sts	0x0538, r19
    1340:	20 93 39 05 	sts	0x0539, r18
    1344:	90 93 3a 05 	sts	0x053A, r25
    1348:	80 93 3b 05 	sts	0x053B, r24
		case TW_ST_DATA_ACK:
			if (alreadyHandled < twi_buffer.size - 1) {
    134c:	80 91 ea 04 	lds	r24, 0x04EA
    1350:	90 91 eb 04 	lds	r25, 0x04EB
    1354:	20 91 3a 05 	lds	r18, 0x053A
    1358:	30 91 3b 05 	lds	r19, 0x053B
    135c:	21 50       	subi	r18, 0x01	; 1
    135e:	30 40       	sbci	r19, 0x00	; 0
    1360:	60 91 38 05 	lds	r22, 0x0538
    1364:	70 91 39 05 	lds	r23, 0x0539
    1368:	ac 01       	movw	r20, r24
    136a:	4f 5f       	subi	r20, 0xFF	; 255
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	82 17       	cp	r24, r18
    1370:	93 07       	cpc	r25, r19
    1372:	60 f4       	brcc	.+24     	; 0x138c <__vector_26+0x1fa>
				// At least one more byte after this one.
				twi_send_ack(twi_buffer.data[alreadyHandled++]);
    1374:	86 0f       	add	r24, r22
    1376:	97 1f       	adc	r25, r23
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	80 93 bb 00 	sts	0x00BB, r24
    1380:	50 93 eb 04 	sts	0x04EB, r21
    1384:	40 93 ea 04 	sts	0x04EA, r20
    1388:	85 ec       	ldi	r24, 0xC5	; 197
    138a:	be cf       	rjmp	.-132    	; 0x1308 <__vector_26+0x176>
			} else {
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
    138c:	86 0f       	add	r24, r22
    138e:	97 1f       	adc	r25, r23
    1390:	fc 01       	movw	r30, r24
    1392:	80 81       	ld	r24, Z
    1394:	80 93 bb 00 	sts	0x00BB, r24
    1398:	50 93 eb 04 	sts	0x04EB, r21
    139c:	40 93 ea 04 	sts	0x04EA, r20
    13a0:	b2 cf       	rjmp	.-156    	; 0x1306 <__vector_26+0x174>
			}				
			break;
		case TW_ST_LAST_DATA:
			twi_error = TWI_Slave_NotEnoughDataTransmitted;
    13a2:	87 e0       	ldi	r24, 0x07	; 7
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <__vector_26+0x230>
			twi_end();
			break;
		case TW_ST_DATA_NACK:
			if (alreadyHandled < twi_buffer.size) {
    13a8:	20 91 ea 04 	lds	r18, 0x04EA
    13ac:	30 91 eb 04 	lds	r19, 0x04EB
    13b0:	80 91 3a 05 	lds	r24, 0x053A
    13b4:	90 91 3b 05 	lds	r25, 0x053B
    13b8:	28 17       	cp	r18, r24
    13ba:	39 07       	cpc	r19, r25
    13bc:	e8 f4       	brcc	.+58     	; 0x13f8 <__vector_26+0x266>
				twi_error = TWI_Slave_TooMuchDataTransmitted;
    13be:	88 e0       	ldi	r24, 0x08	; 8
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	90 93 ed 04 	sts	0x04ED, r25
    13c6:	80 93 ec 04 	sts	0x04EC, r24
    13ca:	16 c0       	rjmp	.+44     	; 0x13f8 <__vector_26+0x266>
// Slave Receiver
		case TW_SR_SLA_ACK:
		case TW_SR_ARB_LOST_SLA_ACK:
		case TW_SR_GCALL_ACK:
		case TW_SR_ARB_LOST_GCALL_ACK:
			twi_init_receive();
    13cc:	0e 94 cc 00 	call	0x198	; 0x198 <twi_init_receive>
			break;
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <__vector_26+0x27c>
		case TW_SR_DATA_ACK:
		case TW_SR_GCALL_DATA_ACK:
			twi_receive_byte();
    13d2:	0e 94 ab 00 	call	0x156	; 0x156 <twi_receive_byte>
			break;
    13d6:	1b c0       	rjmp	.+54     	; 0x140e <__vector_26+0x27c>
		case TW_SR_STOP:
			// Transmission ended early.
			twi_error = TWI_Slave_NotEnoughDataReceived;	
    13d8:	89 e0       	ldi	r24, 0x09	; 9
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	90 93 ed 04 	sts	0x04ED, r25
    13e0:	80 93 ec 04 	sts	0x04EC, r24
		case TW_SR_DATA_NACK:
		case TW_SR_GCALL_DATA_NACK:
			// Invoke application-code before releasing the bus. The twi_buffer should be copied quickly.
			twi_handleMasterTransmission((TWIBuffer) { twi_buffer.data, alreadyHandled } );
    13e4:	60 91 38 05 	lds	r22, 0x0538
    13e8:	70 91 39 05 	lds	r23, 0x0539
    13ec:	80 91 ea 04 	lds	r24, 0x04EA
    13f0:	90 91 eb 04 	lds	r25, 0x04EB
    13f4:	0e 94 9c 08 	call	0x1138	; 0x1138 <twi_handleMasterTransmission>
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
    13f8:	0e 94 93 00 	call	0x126	; 0x126 <twi_end>
			break;
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <__vector_26+0x27c>
		case TW_NO_INFO:
			twi_error = TWI_No_Info_Interrupt;
		case TW_BUS_ERROR:
			twi_error = TWI_Bus_Error;
		default:
			twi_error = TWI_Illegal_Status;
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	90 93 ed 04 	sts	0x04ED, r25
    1406:	80 93 ec 04 	sts	0x04EC, r24
			twi_unexpectedCondition();
    140a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <twi_unexpectedCondition>
	}
}
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0b be       	out	0x3b, r0	; 59
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <tankIO_server_readButtons>:

#define TWI_Slave_Address TANK_IO_ADDRESS
#define TWI_Slave
#include <kernel/TWI/twi_rpc_hash_server.kernel.h>

void tankIO_server_readButtons(TWIBuffer *resultBuffer) {
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
	uint8_t result = 0;
	if (buttonStatus(Button1)) result |= _BV(1);
    143c:	8d e9       	ldi	r24, 0x9D	; 157
    143e:	95 e0       	ldi	r25, 0x05	; 5
    1440:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <buttonStatus>
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	11 f4       	brne	.+4      	; 0x144c <tankIO_server_readButtons+0x18>
#define TWI_Slave_Address TANK_IO_ADDRESS
#define TWI_Slave
#include <kernel/TWI/twi_rpc_hash_server.kernel.h>

void tankIO_server_readButtons(TWIBuffer *resultBuffer) {
	uint8_t result = 0;
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	01 c0       	rjmp	.+2      	; 0x144e <tankIO_server_readButtons+0x1a>
	if (buttonStatus(Button1)) result |= _BV(1);
    144c:	12 e0       	ldi	r17, 0x02	; 2
	if (buttonStatus(Button2)) result |= _BV(2);
    144e:	84 e4       	ldi	r24, 0x44	; 68
    1450:	95 e0       	ldi	r25, 0x05	; 5
    1452:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <buttonStatus>
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	09 f0       	breq	.+2      	; 0x145c <tankIO_server_readButtons+0x28>
    145a:	14 60       	ori	r17, 0x04	; 4
	if (buttonStatus(Button3)) result |= _BV(3);
    145c:	86 e8       	ldi	r24, 0x86	; 134
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <buttonStatus>
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	09 f0       	breq	.+2      	; 0x146a <tankIO_server_readButtons+0x36>
    1468:	18 60       	ori	r17, 0x08	; 8
	if (buttonStatus(Button4)) result |= _BV(4);
    146a:	8f e3       	ldi	r24, 0x3F	; 63
    146c:	95 e0       	ldi	r25, 0x05	; 5
    146e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <buttonStatus>
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	09 f0       	breq	.+2      	; 0x1478 <tankIO_server_readButtons+0x44>
    1476:	10 61       	ori	r17, 0x10	; 16
	if (buttonStatus(ButtonSwitch)) result |= _BV(5);
    1478:	86 e7       	ldi	r24, 0x76	; 118
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <buttonStatus>
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	09 f0       	breq	.+2      	; 0x1486 <tankIO_server_readButtons+0x52>
    1484:	10 62       	ori	r17, 0x20	; 32
	FILL_RESULT(resultBuffer, result, uint8_t)
    1486:	e8 81       	ld	r30, Y
    1488:	f9 81       	ldd	r31, Y+1	; 0x01
    148a:	10 83       	st	Z, r17
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9b 83       	std	Y+3, r25	; 0x03
    1492:	8a 83       	std	Y+2, r24	; 0x02
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	1f 91       	pop	r17
    149a:	08 95       	ret

0000149c <tankIO_server_readButtons_handler>:
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_readButtons, TANK_IO_readButtons, uint8_t)
    149c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <tankIO_server_readButtons>
    14a0:	08 95       	ret

000014a2 <tankIO_server_readButtons_register_function>:
    14a2:	4f 92       	push	r4
    14a4:	5f 92       	push	r5
    14a6:	6f 92       	push	r6
    14a8:	7f 92       	push	r7
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	10 92 ed 01 	sts	0x01ED, r1
    14c6:	10 92 ec 01 	sts	0x01EC, r1
    14ca:	e5 ee       	ldi	r30, 0xE5	; 229
    14cc:	f1 e0       	ldi	r31, 0x01	; 1
    14ce:	f0 93 f3 01 	sts	0x01F3, r31
    14d2:	e0 93 f2 01 	sts	0x01F2, r30
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	90 93 f5 01 	sts	0x01F5, r25
    14de:	80 93 f4 01 	sts	0x01F4, r24
    14e2:	a0 91 6e 02 	lds	r26, 0x026E
    14e6:	b0 91 6f 02 	lds	r27, 0x026F
    14ea:	8f 01       	movw	r16, r30
    14ec:	0d 5f       	subi	r16, 0xFD	; 253
    14ee:	1f 4f       	sbci	r17, 0xFF	; 255
    14f0:	10 97       	sbiw	r26, 0x00	; 0
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <tankIO_server_readButtons_register_function+0x54>
    14f4:	49 c0       	rjmp	.+146    	; 0x1588 <tankIO_server_readButtons_register_function+0xe6>
    14f6:	f0 93 6f 02 	sts	0x026F, r31
    14fa:	e0 93 6e 02 	sts	0x026E, r30
    14fe:	10 92 eb 01 	sts	0x01EB, r1
    1502:	10 92 ea 01 	sts	0x01EA, r1
    1506:	88 e1       	ldi	r24, 0x18	; 24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 0c 12 	call	0x2418	; 0x2418 <malloc>
    150e:	90 93 e9 01 	sts	0x01E9, r25
    1512:	80 93 e8 01 	sts	0x01E8, r24
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	09 f4       	brne	.+2      	; 0x151c <tankIO_server_readButtons_register_function+0x7a>
    151a:	d7 c0       	rjmp	.+430    	; 0x16ca <tankIO_server_readButtons_register_function+0x228>
    151c:	e8 2f       	mov	r30, r24
    151e:	f9 2f       	mov	r31, r25
    1520:	88 e1       	ldi	r24, 0x18	; 24
    1522:	df 01       	movw	r26, r30
    1524:	1d 92       	st	X+, r1
    1526:	8a 95       	dec	r24
    1528:	e9 f7       	brne	.-6      	; 0x1524 <tankIO_server_readButtons_register_function+0x82>
    152a:	c0 91 e8 01 	lds	r28, 0x01E8
    152e:	d0 91 e9 01 	lds	r29, 0x01E9
    1532:	19 87       	std	Y+9, r17	; 0x09
    1534:	08 87       	std	Y+8, r16	; 0x08
    1536:	80 e2       	ldi	r24, 0x20	; 32
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9b 83       	std	Y+3, r25	; 0x03
    153c:	8a 83       	std	Y+2, r24	; 0x02
    153e:	85 e0       	ldi	r24, 0x05	; 5
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9d 83       	std	Y+5, r25	; 0x05
    1544:	8c 83       	std	Y+4, r24	; 0x04
    1546:	83 e0       	ldi	r24, 0x03	; 3
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9b 87       	std	Y+11, r25	; 0x0b
    154c:	8a 87       	std	Y+10, r24	; 0x0a
    154e:	80 ec       	ldi	r24, 0xC0	; 192
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 0c 12 	call	0x2418	; 0x2418 <malloc>
    1556:	99 83       	std	Y+1, r25	; 0x01
    1558:	88 83       	st	Y, r24
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	09 f4       	brne	.+2      	; 0x1560 <tankIO_server_readButtons_register_function+0xbe>
    155e:	b5 c0       	rjmp	.+362    	; 0x16ca <tankIO_server_readButtons_register_function+0x228>
    1560:	e8 2f       	mov	r30, r24
    1562:	f9 2f       	mov	r31, r25
    1564:	80 ec       	ldi	r24, 0xC0	; 192
    1566:	df 01       	movw	r26, r30
    1568:	1d 92       	st	X+, r1
    156a:	8a 95       	dec	r24
    156c:	e9 f7       	brne	.-6      	; 0x1568 <tankIO_server_readButtons_register_function+0xc6>
    156e:	e0 91 e8 01 	lds	r30, 0x01E8
    1572:	f0 91 e9 01 	lds	r31, 0x01E9
    1576:	81 ee       	ldi	r24, 0xE1	; 225
    1578:	9f e1       	ldi	r25, 0x1F	; 31
    157a:	a1 e1       	ldi	r26, 0x11	; 17
    157c:	b0 ea       	ldi	r27, 0xA0	; 160
    157e:	84 8b       	std	Z+20, r24	; 0x14
    1580:	95 8b       	std	Z+21, r25	; 0x15
    1582:	a6 8b       	std	Z+22, r26	; 0x16
    1584:	b7 8b       	std	Z+23, r27	; 0x17
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <tankIO_server_readButtons_register_function+0x112>
    1588:	13 96       	adiw	r26, 0x03	; 3
    158a:	0d 90       	ld	r0, X+
    158c:	bc 91       	ld	r27, X
    158e:	a0 2d       	mov	r26, r0
    1590:	18 96       	adiw	r26, 0x08	; 8
    1592:	cd 91       	ld	r28, X+
    1594:	dc 91       	ld	r29, X
    1596:	19 97       	sbiw	r26, 0x09	; 9
    1598:	fd 83       	std	Y+5, r31	; 0x05
    159a:	ec 83       	std	Y+4, r30	; 0x04
    159c:	1a 96       	adiw	r26, 0x0a	; 10
    159e:	8d 91       	ld	r24, X+
    15a0:	9c 91       	ld	r25, X
    15a2:	1b 97       	sbiw	r26, 0x0b	; 11
    15a4:	c8 1b       	sub	r28, r24
    15a6:	d9 0b       	sbc	r29, r25
    15a8:	d6 83       	std	Z+6, r29	; 0x06
    15aa:	c5 83       	std	Z+5, r28	; 0x05
    15ac:	19 96       	adiw	r26, 0x09	; 9
    15ae:	1c 93       	st	X, r17
    15b0:	0e 93       	st	-X, r16
    15b2:	18 97       	sbiw	r26, 0x08	; 8
    15b4:	e0 91 6e 02 	lds	r30, 0x026E
    15b8:	f0 91 6f 02 	lds	r31, 0x026F
    15bc:	c3 81       	ldd	r28, Z+3	; 0x03
    15be:	d4 81       	ldd	r29, Z+4	; 0x04
    15c0:	8e 81       	ldd	r24, Y+6	; 0x06
    15c2:	9f 81       	ldd	r25, Y+7	; 0x07
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9f 83       	std	Y+7, r25	; 0x07
    15c8:	8e 83       	std	Y+6, r24	; 0x06
    15ca:	48 ee       	ldi	r20, 0xE8	; 232
    15cc:	51 e0       	ldi	r21, 0x01	; 1
    15ce:	d0 93 e9 01 	sts	0x01E9, r29
    15d2:	c0 93 e8 01 	sts	0x01E8, r28
    15d6:	da 01       	movw	r26, r20
    15d8:	13 97       	sbiw	r26, 0x03	; 3
    15da:	20 91 e5 01 	lds	r18, 0x01E5
    15de:	33 27       	eor	r19, r19
    15e0:	27 fd       	sbrc	r18, 7
    15e2:	30 95       	com	r19
    15e4:	c9 01       	movw	r24, r18
    15e6:	96 95       	lsr	r25
    15e8:	87 95       	ror	r24
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	b9 01       	movw	r22, r18
    15f0:	15 e0       	ldi	r17, 0x05	; 5
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	1a 95       	dec	r17
    15f8:	e1 f7       	brne	.-8      	; 0x15f2 <tankIO_server_readButtons_register_function+0x150>
    15fa:	86 0f       	add	r24, r22
    15fc:	97 1f       	adc	r25, r23
    15fe:	60 91 e6 01 	lds	r22, 0x01E6
    1602:	77 27       	eor	r23, r23
    1604:	67 fd       	sbrc	r22, 7
    1606:	70 95       	com	r23
    1608:	86 0f       	add	r24, r22
    160a:	97 1f       	adc	r25, r23
    160c:	82 27       	eor	r24, r18
    160e:	93 27       	eor	r25, r19
    1610:	52 96       	adiw	r26, 0x12	; 18
    1612:	9c 93       	st	X, r25
    1614:	8e 93       	st	-X, r24
    1616:	51 97       	sbiw	r26, 0x11	; 17
    1618:	03 80       	ldd	r0, Z+3	; 0x03
    161a:	f4 81       	ldd	r31, Z+4	; 0x04
    161c:	e0 2d       	mov	r30, r0
    161e:	22 81       	ldd	r18, Z+2	; 0x02
    1620:	33 81       	ldd	r19, Z+3	; 0x03
    1622:	21 50       	subi	r18, 0x01	; 1
    1624:	30 40       	sbci	r19, 0x00	; 0
    1626:	28 23       	and	r18, r24
    1628:	39 23       	and	r19, r25
    162a:	c9 01       	movw	r24, r18
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	82 0f       	add	r24, r18
    1632:	93 1f       	adc	r25, r19
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	01 90       	ld	r0, Z+
    163a:	f0 81       	ld	r31, Z
    163c:	e0 2d       	mov	r30, r0
    163e:	e8 0f       	add	r30, r24
    1640:	f9 1f       	adc	r31, r25
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	01 96       	adiw	r24, 0x01	; 1
    1648:	93 83       	std	Z+3, r25	; 0x03
    164a:	82 83       	std	Z+2, r24	; 0x02
    164c:	20 81       	ld	r18, Z
    164e:	31 81       	ldd	r19, Z+1	; 0x01
    1650:	1c 96       	adiw	r26, 0x0c	; 12
    1652:	3c 93       	st	X, r19
    1654:	2e 93       	st	-X, r18
    1656:	1b 97       	sbiw	r26, 0x0b	; 11
    1658:	1a 96       	adiw	r26, 0x0a	; 10
    165a:	1c 92       	st	X, r1
    165c:	1e 92       	st	-X, r1
    165e:	19 97       	sbiw	r26, 0x09	; 9
    1660:	21 15       	cp	r18, r1
    1662:	31 05       	cpc	r19, r1
    1664:	29 f0       	breq	.+10     	; 0x1670 <tankIO_server_readButtons_register_function+0x1ce>
    1666:	d9 01       	movw	r26, r18
    1668:	17 96       	adiw	r26, 0x07	; 7
    166a:	5c 93       	st	X, r21
    166c:	4e 93       	st	-X, r20
    166e:	16 97       	sbiw	r26, 0x06	; 6
    1670:	28 ee       	ldi	r18, 0xE8	; 232
    1672:	31 e0       	ldi	r19, 0x01	; 1
    1674:	31 83       	std	Z+1, r19	; 0x01
    1676:	20 83       	st	Z, r18
    1678:	24 81       	ldd	r18, Z+4	; 0x04
    167a:	35 81       	ldd	r19, Z+5	; 0x05
    167c:	2f 5f       	subi	r18, 0xFF	; 255
    167e:	3f 4f       	sbci	r19, 0xFF	; 255
    1680:	a9 01       	movw	r20, r18
    1682:	44 0f       	add	r20, r20
    1684:	55 1f       	adc	r21, r21
    1686:	e3 e0       	ldi	r30, 0x03	; 3
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	ea 95       	dec	r30
    168e:	e1 f7       	brne	.-8      	; 0x1688 <tankIO_server_readButtons_register_function+0x1e6>
    1690:	42 0f       	add	r20, r18
    1692:	53 1f       	adc	r21, r19
    1694:	84 17       	cp	r24, r20
    1696:	95 07       	cpc	r25, r21
    1698:	08 f4       	brcc	.+2      	; 0x169c <tankIO_server_readButtons_register_function+0x1fa>
    169a:	c8 c0       	rjmp	.+400    	; 0x182c <tankIO_server_readButtons_register_function+0x38a>
    169c:	8a 89       	ldd	r24, Y+18	; 0x12
    169e:	9b 89       	ldd	r25, Y+19	; 0x13
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	91 05       	cpc	r25, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <tankIO_server_readButtons_register_function+0x206>
    16a6:	c2 c0       	rjmp	.+388    	; 0x182c <tankIO_server_readButtons_register_function+0x38a>
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9b 81       	ldd	r25, Y+3	; 0x03
    16ac:	8c 01       	movw	r16, r24
    16ae:	00 0f       	add	r16, r16
    16b0:	11 1f       	adc	r17, r17
    16b2:	08 0f       	add	r16, r24
    16b4:	19 1f       	adc	r17, r25
    16b6:	00 0f       	add	r16, r16
    16b8:	11 1f       	adc	r17, r17
    16ba:	00 0f       	add	r16, r16
    16bc:	11 1f       	adc	r17, r17
    16be:	c8 01       	movw	r24, r16
    16c0:	0e 94 0c 12 	call	0x2418	; 0x2418 <malloc>
    16c4:	4c 01       	movw	r8, r24
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <tankIO_server_readButtons_register_function+0x230>
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_exit>
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	a8 01       	movw	r20, r16
    16d8:	0e 94 55 13 	call	0x26aa	; 0x26aa <memset>
    16dc:	0e 81       	ldd	r16, Y+6	; 0x06
    16de:	1f 81       	ldd	r17, Y+7	; 0x07
    16e0:	6a 80       	ldd	r6, Y+2	; 0x02
    16e2:	7b 80       	ldd	r7, Y+3	; 0x03
    16e4:	73 01       	movw	r14, r6
    16e6:	ee 0c       	add	r14, r14
    16e8:	ff 1c       	adc	r15, r15
    16ea:	08 94       	sec
    16ec:	e1 08       	sbc	r14, r1
    16ee:	f1 08       	sbc	r15, r1
    16f0:	c7 01       	movw	r24, r14
    16f2:	80 23       	and	r24, r16
    16f4:	91 23       	and	r25, r17
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	11 f4       	brne	.+4      	; 0x1702 <tankIO_server_readButtons_register_function+0x260>
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	02 c0       	rjmp	.+4      	; 0x170e <tankIO_server_readButtons_register_function+0x26c>
    170a:	16 95       	lsr	r17
    170c:	07 95       	ror	r16
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <tankIO_server_readButtons_register_function+0x268>
    1712:	02 0f       	add	r16, r18
    1714:	13 1f       	adc	r17, r19
    1716:	1d 87       	std	Y+13, r17	; 0x0d
    1718:	0c 87       	std	Y+12, r16	; 0x0c
    171a:	1f 86       	std	Y+15, r1	; 0x0f
    171c:	1e 86       	std	Y+14, r1	; 0x0e
    171e:	cc 24       	eor	r12, r12
    1720:	dd 24       	eor	r13, r13
    1722:	aa 24       	eor	r10, r10
    1724:	bb 24       	eor	r11, r11
    1726:	51 c0       	rjmp	.+162    	; 0x17ca <tankIO_server_readButtons_register_function+0x328>
    1728:	8c 0d       	add	r24, r12
    172a:	9d 1d       	adc	r25, r13
    172c:	fc 01       	movw	r30, r24
    172e:	20 81       	ld	r18, Z
    1730:	31 81       	ldd	r19, Z+1	; 0x01
    1732:	40 c0       	rjmp	.+128    	; 0x17b4 <tankIO_server_readButtons_register_function+0x312>
    1734:	d9 01       	movw	r26, r18
    1736:	18 96       	adiw	r26, 0x08	; 8
    1738:	5c 90       	ld	r5, X
    173a:	18 97       	sbiw	r26, 0x08	; 8
    173c:	19 96       	adiw	r26, 0x09	; 9
    173e:	4c 90       	ld	r4, X
    1740:	19 97       	sbiw	r26, 0x09	; 9
    1742:	1e 96       	adiw	r26, 0x0e	; 14
    1744:	8d 91       	ld	r24, X+
    1746:	9c 91       	ld	r25, X
    1748:	1f 97       	sbiw	r26, 0x0f	; 15
    174a:	8e 21       	and	r24, r14
    174c:	9f 21       	and	r25, r15
    174e:	fc 01       	movw	r30, r24
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	e8 0f       	add	r30, r24
    1756:	f9 1f       	adc	r31, r25
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	e8 0d       	add	r30, r8
    175e:	f9 1d       	adc	r31, r9
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	93 83       	std	Z+3, r25	; 0x03
    1768:	82 83       	std	Z+2, r24	; 0x02
    176a:	08 17       	cp	r16, r24
    176c:	19 07       	cpc	r17, r25
    176e:	58 f4       	brcc	.+22     	; 0x1786 <tankIO_server_readButtons_register_function+0x2e4>
    1770:	4e 85       	ldd	r20, Y+14	; 0x0e
    1772:	5f 85       	ldd	r21, Y+15	; 0x0f
    1774:	4f 5f       	subi	r20, 0xFF	; 255
    1776:	5f 4f       	sbci	r21, 0xFF	; 255
    1778:	5f 87       	std	Y+15, r21	; 0x0f
    177a:	4e 87       	std	Y+14, r20	; 0x0e
    177c:	b8 01       	movw	r22, r16
    177e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodhi4>
    1782:	75 83       	std	Z+5, r23	; 0x05
    1784:	64 83       	std	Z+4, r22	; 0x04
    1786:	d9 01       	movw	r26, r18
    1788:	17 96       	adiw	r26, 0x07	; 7
    178a:	1c 92       	st	X, r1
    178c:	1e 92       	st	-X, r1
    178e:	16 97       	sbiw	r26, 0x06	; 6
    1790:	80 81       	ld	r24, Z
    1792:	91 81       	ldd	r25, Z+1	; 0x01
    1794:	19 96       	adiw	r26, 0x09	; 9
    1796:	9c 93       	st	X, r25
    1798:	8e 93       	st	-X, r24
    179a:	18 97       	sbiw	r26, 0x08	; 8
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	29 f0       	breq	.+10     	; 0x17aa <tankIO_server_readButtons_register_function+0x308>
    17a0:	dc 01       	movw	r26, r24
    17a2:	17 96       	adiw	r26, 0x07	; 7
    17a4:	3c 93       	st	X, r19
    17a6:	2e 93       	st	-X, r18
    17a8:	16 97       	sbiw	r26, 0x06	; 6
    17aa:	31 83       	std	Z+1, r19	; 0x01
    17ac:	20 83       	st	Z, r18
    17ae:	c2 01       	movw	r24, r4
    17b0:	29 2f       	mov	r18, r25
    17b2:	34 2d       	mov	r19, r4
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	09 f0       	breq	.+2      	; 0x17bc <tankIO_server_readButtons_register_function+0x31a>
    17ba:	bc cf       	rjmp	.-136    	; 0x1734 <tankIO_server_readButtons_register_function+0x292>
    17bc:	08 94       	sec
    17be:	a1 1c       	adc	r10, r1
    17c0:	b1 1c       	adc	r11, r1
    17c2:	e6 e0       	ldi	r30, 0x06	; 6
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	ce 0e       	add	r12, r30
    17c8:	df 1e       	adc	r13, r31
    17ca:	88 81       	ld	r24, Y
    17cc:	99 81       	ldd	r25, Y+1	; 0x01
    17ce:	a6 14       	cp	r10, r6
    17d0:	b7 04       	cpc	r11, r7
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <tankIO_server_readButtons_register_function+0x334>
    17d4:	a9 cf       	rjmp	.-174    	; 0x1728 <tankIO_server_readButtons_register_function+0x286>
    17d6:	0e 94 a6 12 	call	0x254c	; 0x254c <free>
    17da:	e0 91 e8 01 	lds	r30, 0x01E8
    17de:	f0 91 e9 01 	lds	r31, 0x01E9
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	93 83       	std	Z+3, r25	; 0x03
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	84 81       	ldd	r24, Z+4	; 0x04
    17f0:	95 81       	ldd	r25, Z+5	; 0x05
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	95 83       	std	Z+5, r25	; 0x05
    17f6:	84 83       	std	Z+4, r24	; 0x04
    17f8:	91 82       	std	Z+1, r9	; 0x01
    17fa:	80 82       	st	Z, r8
    17fc:	86 81       	ldd	r24, Z+6	; 0x06
    17fe:	97 81       	ldd	r25, Z+7	; 0x07
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	26 85       	ldd	r18, Z+14	; 0x0e
    1806:	37 85       	ldd	r19, Z+15	; 0x0f
    1808:	82 17       	cp	r24, r18
    180a:	93 07       	cpc	r25, r19
    180c:	20 f4       	brcc	.+8      	; 0x1816 <tankIO_server_readButtons_register_function+0x374>
    180e:	80 89       	ldd	r24, Z+16	; 0x10
    1810:	91 89       	ldd	r25, Z+17	; 0x11
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	02 c0       	rjmp	.+4      	; 0x181a <tankIO_server_readButtons_register_function+0x378>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	91 8b       	std	Z+17, r25	; 0x11
    181c:	80 8b       	std	Z+16, r24	; 0x10
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	20 f0       	brcs	.+8      	; 0x182c <tankIO_server_readButtons_register_function+0x38a>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	93 8b       	std	Z+19, r25	; 0x13
    182a:	82 8b       	std	Z+18, r24	; 0x12
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	bf 90       	pop	r11
    183e:	af 90       	pop	r10
    1840:	9f 90       	pop	r9
    1842:	8f 90       	pop	r8
    1844:	7f 90       	pop	r7
    1846:	6f 90       	pop	r6
    1848:	5f 90       	pop	r5
    184a:	4f 90       	pop	r4
    184c:	08 95       	ret

0000184e <tankIO_server_writeLeds>:

void tankIO_server_writeLeds(uint16_t *args, uint16_t argSize) {
	setLeds(AllLeds, *args);
    184e:	fc 01       	movw	r30, r24
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	8a e4       	ldi	r24, 0x4A	; 74
    1856:	95 e0       	ldi	r25, 0x05	; 5
    1858:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <setLeds>
}
    185c:	08 95       	ret

0000185e <tankIO_server_writeLeds_register_function>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_writeLeds, TANK_IO_writeLeds, uint16_t)
    185e:	4f 92       	push	r4
    1860:	5f 92       	push	r5
    1862:	6f 92       	push	r6
    1864:	7f 92       	push	r7
    1866:	8f 92       	push	r8
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	10 92 00 02 	sts	0x0200, r1
    1882:	10 92 ff 01 	sts	0x01FF, r1
    1886:	e8 ef       	ldi	r30, 0xF8	; 248
    1888:	f1 e0       	ldi	r31, 0x01	; 1
    188a:	f0 93 06 02 	sts	0x0206, r31
    188e:	e0 93 05 02 	sts	0x0205, r30
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	90 93 08 02 	sts	0x0208, r25
    189a:	80 93 07 02 	sts	0x0207, r24
    189e:	a0 91 6e 02 	lds	r26, 0x026E
    18a2:	b0 91 6f 02 	lds	r27, 0x026F
    18a6:	8f 01       	movw	r16, r30
    18a8:	0d 5f       	subi	r16, 0xFD	; 253
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	10 97       	sbiw	r26, 0x00	; 0
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <tankIO_server_writeLeds_register_function+0x54>
    18b0:	49 c0       	rjmp	.+146    	; 0x1944 <tankIO_server_writeLeds_register_function+0xe6>
    18b2:	f0 93 6f 02 	sts	0x026F, r31
    18b6:	e0 93 6e 02 	sts	0x026E, r30
    18ba:	10 92 fe 01 	sts	0x01FE, r1
    18be:	10 92 fd 01 	sts	0x01FD, r1
    18c2:	88 e1       	ldi	r24, 0x18	; 24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 0c 12 	call	0x2418	; 0x2418 <malloc>
    18ca:	90 93 fc 01 	sts	0x01FC, r25
    18ce:	80 93 fb 01 	sts	0x01FB, r24
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <tankIO_server_writeLeds_register_function+0x7a>
    18d6:	d7 c0       	rjmp	.+430    	; 0x1a86 <tankIO_server_writeLeds_register_function+0x228>
    18d8:	e8 2f       	mov	r30, r24
    18da:	f9 2f       	mov	r31, r25
    18dc:	88 e1       	ldi	r24, 0x18	; 24
    18de:	df 01       	movw	r26, r30
    18e0:	1d 92       	st	X+, r1
    18e2:	8a 95       	dec	r24
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <tankIO_server_writeLeds_register_function+0x82>
    18e6:	c0 91 fb 01 	lds	r28, 0x01FB
    18ea:	d0 91 fc 01 	lds	r29, 0x01FC
    18ee:	19 87       	std	Y+9, r17	; 0x09
    18f0:	08 87       	std	Y+8, r16	; 0x08
    18f2:	80 e2       	ldi	r24, 0x20	; 32
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	85 e0       	ldi	r24, 0x05	; 5
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	9d 83       	std	Y+5, r25	; 0x05
    1900:	8c 83       	std	Y+4, r24	; 0x04
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9b 87       	std	Y+11, r25	; 0x0b
    1908:	8a 87       	std	Y+10, r24	; 0x0a
    190a:	80 ec       	ldi	r24, 0xC0	; 192
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 0c 12 	call	0x2418	; 0x2418 <malloc>
    1912:	99 83       	std	Y+1, r25	; 0x01
    1914:	88 83       	st	Y, r24
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	09 f4       	brne	.+2      	; 0x191c <tankIO_server_writeLeds_register_function+0xbe>
    191a:	b5 c0       	rjmp	.+362    	; 0x1a86 <tankIO_server_writeLeds_register_function+0x228>
    191c:	e8 2f       	mov	r30, r24
    191e:	f9 2f       	mov	r31, r25
    1920:	80 ec       	ldi	r24, 0xC0	; 192
    1922:	df 01       	movw	r26, r30
    1924:	1d 92       	st	X+, r1
    1926:	8a 95       	dec	r24
    1928:	e9 f7       	brne	.-6      	; 0x1924 <tankIO_server_writeLeds_register_function+0xc6>
    192a:	e0 91 fb 01 	lds	r30, 0x01FB
    192e:	f0 91 fc 01 	lds	r31, 0x01FC
    1932:	81 ee       	ldi	r24, 0xE1	; 225
    1934:	9f e1       	ldi	r25, 0x1F	; 31
    1936:	a1 e1       	ldi	r26, 0x11	; 17
    1938:	b0 ea       	ldi	r27, 0xA0	; 160
    193a:	84 8b       	std	Z+20, r24	; 0x14
    193c:	95 8b       	std	Z+21, r25	; 0x15
    193e:	a6 8b       	std	Z+22, r26	; 0x16
    1940:	b7 8b       	std	Z+23, r27	; 0x17
    1942:	16 c0       	rjmp	.+44     	; 0x1970 <tankIO_server_writeLeds_register_function+0x112>
    1944:	13 96       	adiw	r26, 0x03	; 3
    1946:	0d 90       	ld	r0, X+
    1948:	bc 91       	ld	r27, X
    194a:	a0 2d       	mov	r26, r0
    194c:	18 96       	adiw	r26, 0x08	; 8
    194e:	cd 91       	ld	r28, X+
    1950:	dc 91       	ld	r29, X
    1952:	19 97       	sbiw	r26, 0x09	; 9
    1954:	fd 83       	std	Y+5, r31	; 0x05
    1956:	ec 83       	std	Y+4, r30	; 0x04
    1958:	1a 96       	adiw	r26, 0x0a	; 10
    195a:	8d 91       	ld	r24, X+
    195c:	9c 91       	ld	r25, X
    195e:	1b 97       	sbiw	r26, 0x0b	; 11
    1960:	c8 1b       	sub	r28, r24
    1962:	d9 0b       	sbc	r29, r25
    1964:	d6 83       	std	Z+6, r29	; 0x06
    1966:	c5 83       	std	Z+5, r28	; 0x05
    1968:	19 96       	adiw	r26, 0x09	; 9
    196a:	1c 93       	st	X, r17
    196c:	0e 93       	st	-X, r16
    196e:	18 97       	sbiw	r26, 0x08	; 8
    1970:	e0 91 6e 02 	lds	r30, 0x026E
    1974:	f0 91 6f 02 	lds	r31, 0x026F
    1978:	c3 81       	ldd	r28, Z+3	; 0x03
    197a:	d4 81       	ldd	r29, Z+4	; 0x04
    197c:	8e 81       	ldd	r24, Y+6	; 0x06
    197e:	9f 81       	ldd	r25, Y+7	; 0x07
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	9f 83       	std	Y+7, r25	; 0x07
    1984:	8e 83       	std	Y+6, r24	; 0x06
    1986:	4b ef       	ldi	r20, 0xFB	; 251
    1988:	51 e0       	ldi	r21, 0x01	; 1
    198a:	d0 93 fc 01 	sts	0x01FC, r29
    198e:	c0 93 fb 01 	sts	0x01FB, r28
    1992:	da 01       	movw	r26, r20
    1994:	13 97       	sbiw	r26, 0x03	; 3
    1996:	20 91 f8 01 	lds	r18, 0x01F8
    199a:	33 27       	eor	r19, r19
    199c:	27 fd       	sbrc	r18, 7
    199e:	30 95       	com	r19
    19a0:	c9 01       	movw	r24, r18
    19a2:	96 95       	lsr	r25
    19a4:	87 95       	ror	r24
    19a6:	96 95       	lsr	r25
    19a8:	87 95       	ror	r24
    19aa:	b9 01       	movw	r22, r18
    19ac:	15 e0       	ldi	r17, 0x05	; 5
    19ae:	66 0f       	add	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	1a 95       	dec	r17
    19b4:	e1 f7       	brne	.-8      	; 0x19ae <tankIO_server_writeLeds_register_function+0x150>
    19b6:	86 0f       	add	r24, r22
    19b8:	97 1f       	adc	r25, r23
    19ba:	60 91 f9 01 	lds	r22, 0x01F9
    19be:	77 27       	eor	r23, r23
    19c0:	67 fd       	sbrc	r22, 7
    19c2:	70 95       	com	r23
    19c4:	86 0f       	add	r24, r22
    19c6:	97 1f       	adc	r25, r23
    19c8:	82 27       	eor	r24, r18
    19ca:	93 27       	eor	r25, r19
    19cc:	52 96       	adiw	r26, 0x12	; 18
    19ce:	9c 93       	st	X, r25
    19d0:	8e 93       	st	-X, r24
    19d2:	51 97       	sbiw	r26, 0x11	; 17
    19d4:	03 80       	ldd	r0, Z+3	; 0x03
    19d6:	f4 81       	ldd	r31, Z+4	; 0x04
    19d8:	e0 2d       	mov	r30, r0
    19da:	22 81       	ldd	r18, Z+2	; 0x02
    19dc:	33 81       	ldd	r19, Z+3	; 0x03
    19de:	21 50       	subi	r18, 0x01	; 1
    19e0:	30 40       	sbci	r19, 0x00	; 0
    19e2:	28 23       	and	r18, r24
    19e4:	39 23       	and	r19, r25
    19e6:	c9 01       	movw	r24, r18
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	01 90       	ld	r0, Z+
    19f6:	f0 81       	ld	r31, Z
    19f8:	e0 2d       	mov	r30, r0
    19fa:	e8 0f       	add	r30, r24
    19fc:	f9 1f       	adc	r31, r25
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	93 83       	std	Z+3, r25	; 0x03
    1a06:	82 83       	std	Z+2, r24	; 0x02
    1a08:	20 81       	ld	r18, Z
    1a0a:	31 81       	ldd	r19, Z+1	; 0x01
    1a0c:	1c 96       	adiw	r26, 0x0c	; 12
    1a0e:	3c 93       	st	X, r19
    1a10:	2e 93       	st	-X, r18
    1a12:	1b 97       	sbiw	r26, 0x0b	; 11
    1a14:	1a 96       	adiw	r26, 0x0a	; 10
    1a16:	1c 92       	st	X, r1
    1a18:	1e 92       	st	-X, r1
    1a1a:	19 97       	sbiw	r26, 0x09	; 9
    1a1c:	21 15       	cp	r18, r1
    1a1e:	31 05       	cpc	r19, r1
    1a20:	29 f0       	breq	.+10     	; 0x1a2c <tankIO_server_writeLeds_register_function+0x1ce>
    1a22:	d9 01       	movw	r26, r18
    1a24:	17 96       	adiw	r26, 0x07	; 7
    1a26:	5c 93       	st	X, r21
    1a28:	4e 93       	st	-X, r20
    1a2a:	16 97       	sbiw	r26, 0x06	; 6
    1a2c:	2b ef       	ldi	r18, 0xFB	; 251
    1a2e:	31 e0       	ldi	r19, 0x01	; 1
    1a30:	31 83       	std	Z+1, r19	; 0x01
    1a32:	20 83       	st	Z, r18
    1a34:	24 81       	ldd	r18, Z+4	; 0x04
    1a36:	35 81       	ldd	r19, Z+5	; 0x05
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	a9 01       	movw	r20, r18
    1a3e:	44 0f       	add	r20, r20
    1a40:	55 1f       	adc	r21, r21
    1a42:	f3 e0       	ldi	r31, 0x03	; 3
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	fa 95       	dec	r31
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <tankIO_server_writeLeds_register_function+0x1e6>
    1a4c:	42 0f       	add	r20, r18
    1a4e:	53 1f       	adc	r21, r19
    1a50:	84 17       	cp	r24, r20
    1a52:	95 07       	cpc	r25, r21
    1a54:	08 f4       	brcc	.+2      	; 0x1a58 <tankIO_server_writeLeds_register_function+0x1fa>
    1a56:	c8 c0       	rjmp	.+400    	; 0x1be8 <tankIO_server_writeLeds_register_function+0x38a>
    1a58:	8a 89       	ldd	r24, Y+18	; 0x12
    1a5a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	91 05       	cpc	r25, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <tankIO_server_writeLeds_register_function+0x206>
    1a62:	c2 c0       	rjmp	.+388    	; 0x1be8 <tankIO_server_writeLeds_register_function+0x38a>
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	9b 81       	ldd	r25, Y+3	; 0x03
    1a68:	8c 01       	movw	r16, r24
    1a6a:	00 0f       	add	r16, r16
    1a6c:	11 1f       	adc	r17, r17
    1a6e:	08 0f       	add	r16, r24
    1a70:	19 1f       	adc	r17, r25
    1a72:	00 0f       	add	r16, r16
    1a74:	11 1f       	adc	r17, r17
    1a76:	00 0f       	add	r16, r16
    1a78:	11 1f       	adc	r17, r17
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	0e 94 0c 12 	call	0x2418	; 0x2418 <malloc>
    1a80:	4c 01       	movw	r8, r24
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	21 f4       	brne	.+8      	; 0x1a8e <tankIO_server_writeLeds_register_function+0x230>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	9f ef       	ldi	r25, 0xFF	; 255
    1a8a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_exit>
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	a8 01       	movw	r20, r16
    1a94:	0e 94 55 13 	call	0x26aa	; 0x26aa <memset>
    1a98:	0e 81       	ldd	r16, Y+6	; 0x06
    1a9a:	1f 81       	ldd	r17, Y+7	; 0x07
    1a9c:	6a 80       	ldd	r6, Y+2	; 0x02
    1a9e:	7b 80       	ldd	r7, Y+3	; 0x03
    1aa0:	73 01       	movw	r14, r6
    1aa2:	ee 0c       	add	r14, r14
    1aa4:	ff 1c       	adc	r15, r15
    1aa6:	08 94       	sec
    1aa8:	e1 08       	sbc	r14, r1
    1aaa:	f1 08       	sbc	r15, r1
    1aac:	c7 01       	movw	r24, r14
    1aae:	80 23       	and	r24, r16
    1ab0:	91 23       	and	r25, r17
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	11 f4       	brne	.+4      	; 0x1abe <tankIO_server_writeLeds_register_function+0x260>
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <tankIO_server_writeLeds_register_function+0x26c>
    1ac6:	16 95       	lsr	r17
    1ac8:	07 95       	ror	r16
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <tankIO_server_writeLeds_register_function+0x268>
    1ace:	02 0f       	add	r16, r18
    1ad0:	13 1f       	adc	r17, r19
    1ad2:	1d 87       	std	Y+13, r17	; 0x0d
    1ad4:	0c 87       	std	Y+12, r16	; 0x0c
    1ad6:	1f 86       	std	Y+15, r1	; 0x0f
    1ad8:	1e 86       	std	Y+14, r1	; 0x0e
    1ada:	cc 24       	eor	r12, r12
    1adc:	dd 24       	eor	r13, r13
    1ade:	aa 24       	eor	r10, r10
    1ae0:	bb 24       	eor	r11, r11
    1ae2:	51 c0       	rjmp	.+162    	; 0x1b86 <tankIO_server_writeLeds_register_function+0x328>
    1ae4:	8c 0d       	add	r24, r12
    1ae6:	9d 1d       	adc	r25, r13
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 81       	ld	r18, Z
    1aec:	31 81       	ldd	r19, Z+1	; 0x01
    1aee:	40 c0       	rjmp	.+128    	; 0x1b70 <tankIO_server_writeLeds_register_function+0x312>
    1af0:	d9 01       	movw	r26, r18
    1af2:	18 96       	adiw	r26, 0x08	; 8
    1af4:	5c 90       	ld	r5, X
    1af6:	18 97       	sbiw	r26, 0x08	; 8
    1af8:	19 96       	adiw	r26, 0x09	; 9
    1afa:	4c 90       	ld	r4, X
    1afc:	19 97       	sbiw	r26, 0x09	; 9
    1afe:	1e 96       	adiw	r26, 0x0e	; 14
    1b00:	8d 91       	ld	r24, X+
    1b02:	9c 91       	ld	r25, X
    1b04:	1f 97       	sbiw	r26, 0x0f	; 15
    1b06:	8e 21       	and	r24, r14
    1b08:	9f 21       	and	r25, r15
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	ee 0f       	add	r30, r30
    1b0e:	ff 1f       	adc	r31, r31
    1b10:	e8 0f       	add	r30, r24
    1b12:	f9 1f       	adc	r31, r25
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	e8 0d       	add	r30, r8
    1b1a:	f9 1d       	adc	r31, r9
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	93 83       	std	Z+3, r25	; 0x03
    1b24:	82 83       	std	Z+2, r24	; 0x02
    1b26:	08 17       	cp	r16, r24
    1b28:	19 07       	cpc	r17, r25
    1b2a:	58 f4       	brcc	.+22     	; 0x1b42 <tankIO_server_writeLeds_register_function+0x2e4>
    1b2c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b2e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b30:	4f 5f       	subi	r20, 0xFF	; 255
    1b32:	5f 4f       	sbci	r21, 0xFF	; 255
    1b34:	5f 87       	std	Y+15, r21	; 0x0f
    1b36:	4e 87       	std	Y+14, r20	; 0x0e
    1b38:	b8 01       	movw	r22, r16
    1b3a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodhi4>
    1b3e:	75 83       	std	Z+5, r23	; 0x05
    1b40:	64 83       	std	Z+4, r22	; 0x04
    1b42:	d9 01       	movw	r26, r18
    1b44:	17 96       	adiw	r26, 0x07	; 7
    1b46:	1c 92       	st	X, r1
    1b48:	1e 92       	st	-X, r1
    1b4a:	16 97       	sbiw	r26, 0x06	; 6
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	19 96       	adiw	r26, 0x09	; 9
    1b52:	9c 93       	st	X, r25
    1b54:	8e 93       	st	-X, r24
    1b56:	18 97       	sbiw	r26, 0x08	; 8
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	29 f0       	breq	.+10     	; 0x1b66 <tankIO_server_writeLeds_register_function+0x308>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	17 96       	adiw	r26, 0x07	; 7
    1b60:	3c 93       	st	X, r19
    1b62:	2e 93       	st	-X, r18
    1b64:	16 97       	sbiw	r26, 0x06	; 6
    1b66:	31 83       	std	Z+1, r19	; 0x01
    1b68:	20 83       	st	Z, r18
    1b6a:	c2 01       	movw	r24, r4
    1b6c:	29 2f       	mov	r18, r25
    1b6e:	34 2d       	mov	r19, r4
    1b70:	21 15       	cp	r18, r1
    1b72:	31 05       	cpc	r19, r1
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <tankIO_server_writeLeds_register_function+0x31a>
    1b76:	bc cf       	rjmp	.-136    	; 0x1af0 <tankIO_server_writeLeds_register_function+0x292>
    1b78:	08 94       	sec
    1b7a:	a1 1c       	adc	r10, r1
    1b7c:	b1 1c       	adc	r11, r1
    1b7e:	e6 e0       	ldi	r30, 0x06	; 6
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	ce 0e       	add	r12, r30
    1b84:	df 1e       	adc	r13, r31
    1b86:	88 81       	ld	r24, Y
    1b88:	99 81       	ldd	r25, Y+1	; 0x01
    1b8a:	a6 14       	cp	r10, r6
    1b8c:	b7 04       	cpc	r11, r7
    1b8e:	08 f4       	brcc	.+2      	; 0x1b92 <tankIO_server_writeLeds_register_function+0x334>
    1b90:	a9 cf       	rjmp	.-174    	; 0x1ae4 <tankIO_server_writeLeds_register_function+0x286>
    1b92:	0e 94 a6 12 	call	0x254c	; 0x254c <free>
    1b96:	e0 91 fb 01 	lds	r30, 0x01FB
    1b9a:	f0 91 fc 01 	lds	r31, 0x01FC
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	93 83       	std	Z+3, r25	; 0x03
    1ba8:	82 83       	std	Z+2, r24	; 0x02
    1baa:	84 81       	ldd	r24, Z+4	; 0x04
    1bac:	95 81       	ldd	r25, Z+5	; 0x05
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	95 83       	std	Z+5, r25	; 0x05
    1bb2:	84 83       	std	Z+4, r24	; 0x04
    1bb4:	91 82       	std	Z+1, r9	; 0x01
    1bb6:	80 82       	st	Z, r8
    1bb8:	86 81       	ldd	r24, Z+6	; 0x06
    1bba:	97 81       	ldd	r25, Z+7	; 0x07
    1bbc:	96 95       	lsr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	26 85       	ldd	r18, Z+14	; 0x0e
    1bc2:	37 85       	ldd	r19, Z+15	; 0x0f
    1bc4:	82 17       	cp	r24, r18
    1bc6:	93 07       	cpc	r25, r19
    1bc8:	20 f4       	brcc	.+8      	; 0x1bd2 <tankIO_server_writeLeds_register_function+0x374>
    1bca:	80 89       	ldd	r24, Z+16	; 0x10
    1bcc:	91 89       	ldd	r25, Z+17	; 0x11
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <tankIO_server_writeLeds_register_function+0x378>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	91 8b       	std	Z+17, r25	; 0x11
    1bd8:	80 8b       	std	Z+16, r24	; 0x10
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	91 05       	cpc	r25, r1
    1bde:	20 f0       	brcs	.+8      	; 0x1be8 <tankIO_server_writeLeds_register_function+0x38a>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	93 8b       	std	Z+19, r25	; 0x13
    1be6:	82 8b       	std	Z+18, r24	; 0x12
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	ef 90       	pop	r14
    1bf4:	df 90       	pop	r13
    1bf6:	cf 90       	pop	r12
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	7f 90       	pop	r7
    1c02:	6f 90       	pop	r6
    1c04:	5f 90       	pop	r5
    1c06:	4f 90       	pop	r4
    1c08:	08 95       	ret

00001c0a <before_timer>:
#define _BASE_AFTER_KERNEL_

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
    1c0a:	08 95       	ret

00001c0c <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
    1c0c:	80 b7       	in	r24, 0x30	; 48
    1c0e:	80 68       	ori	r24, 0x80	; 128
    1c10:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
    1c12:	e4 e6       	ldi	r30, 0x64	; 100
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 66       	ori	r24, 0x60	; 96
    1c1a:	80 83       	st	Z, r24
	// BOD - TODO configure?
	
	// Final initialization-sequence.
	// AFTER other modules modified __default_stack_size and __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
    1c1c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <before_timer>
	enableTimerInterrupt(CLOCKTIMER_A);
    1c20:	80 ea       	ldi	r24, 0xA0	; 160
    1c22:	94 e0       	ldi	r25, 0x04	; 4
    1c24:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <enableTimerInterrupt>
	sei();
    1c28:	78 94       	sei
}
    1c2a:	08 95       	ret

00001c2c <main>:

// #define USE_ISR
#define TICK_AFTER_MS 200

int main() {
	led_operation_1();
    1c2c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <led_operation_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	94 e3       	ldi	r25, 0x34	; 52
    1c34:	ac e0       	ldi	r26, 0x0C	; 12
    1c36:	81 50       	subi	r24, 0x01	; 1
    1c38:	90 40       	sbci	r25, 0x00	; 0
    1c3a:	a0 40       	sbci	r26, 0x00	; 0
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <main+0xa>
    1c3e:	00 c0       	rjmp	.+0      	; 0x1c40 <main+0x14>
    1c40:	00 00       	nop
	
	#ifndef USE_ISR
		while (1) {
			_delay_ms(TICK_AFTER_MS);
			led_operation_tick();
    1c42:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <led_operation_tick>
    1c46:	f4 cf       	rjmp	.-24     	; 0x1c30 <main+0x4>

00001c48 <led_operation_tick>:
uint16_t leds_left;
uint16_t leds_middle;
uint16_t leds_right;

void led_operation_tick() {
	if (running) {
    1c48:	80 91 00 01 	lds	r24, 0x0100
    1c4c:	90 91 01 01 	lds	r25, 0x0101
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <led_operation_tick+0xe>
    1c54:	50 c0       	rjmp	.+160    	; 0x1cf6 <led_operation_tick+0xae>
		ROL(leds_left);
    1c56:	20 91 74 02 	lds	r18, 0x0274
    1c5a:	30 91 75 02 	lds	r19, 0x0275
    1c5e:	c9 01       	movw	r24, r18
    1c60:	88 0f       	add	r24, r24
    1c62:	89 2f       	mov	r24, r25
    1c64:	88 1f       	adc	r24, r24
    1c66:	99 0b       	sbc	r25, r25
    1c68:	91 95       	neg	r25
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	82 2b       	or	r24, r18
    1c70:	93 2b       	or	r25, r19
    1c72:	90 93 75 02 	sts	0x0275, r25
    1c76:	80 93 74 02 	sts	0x0274, r24
		ROL(leds_middle);
    1c7a:	20 91 72 02 	lds	r18, 0x0272
    1c7e:	30 91 73 02 	lds	r19, 0x0273
    1c82:	c9 01       	movw	r24, r18
    1c84:	88 0f       	add	r24, r24
    1c86:	89 2f       	mov	r24, r25
    1c88:	88 1f       	adc	r24, r24
    1c8a:	99 0b       	sbc	r25, r25
    1c8c:	91 95       	neg	r25
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	82 2b       	or	r24, r18
    1c94:	93 2b       	or	r25, r19
    1c96:	90 93 73 02 	sts	0x0273, r25
    1c9a:	80 93 72 02 	sts	0x0272, r24
		ROL(leds_right);
    1c9e:	80 91 70 02 	lds	r24, 0x0270
    1ca2:	90 91 71 02 	lds	r25, 0x0271
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	22 0f       	add	r18, r18
    1caa:	23 2f       	mov	r18, r19
    1cac:	22 1f       	adc	r18, r18
    1cae:	33 0b       	sbc	r19, r19
    1cb0:	31 95       	neg	r19
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	28 2b       	or	r18, r24
    1cb8:	39 2b       	or	r19, r25
    1cba:	30 93 71 02 	sts	0x0271, r19
    1cbe:	20 93 70 02 	sts	0x0270, r18
		setLeds(RightLeds, MAKE_WORD(leds_right, 0));
    1cc2:	80 91 68 01 	lds	r24, 0x0168
    1cc6:	90 91 69 01 	lds	r25, 0x0169
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	72 2f       	mov	r23, r18
    1cce:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <setLeds>
		setLeds(MiddleLeds, MAKE_WORD(leds_middle, 0));
    1cd2:	70 91 72 02 	lds	r23, 0x0272
    1cd6:	80 91 70 01 	lds	r24, 0x0170
    1cda:	90 91 71 01 	lds	r25, 0x0171
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <setLeds>
		setLeds(LeftLeds, MAKE_WORD(leds_left, 0));
    1ce4:	70 91 74 02 	lds	r23, 0x0274
    1ce8:	80 91 6c 01 	lds	r24, 0x016C
    1cec:	90 91 6d 01 	lds	r25, 0x016D
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <setLeds>
    1cf6:	08 95       	ret

00001cf8 <led_operation_off>:
	}
}

void led_operation_off() {
	running = FALSE;
    1cf8:	10 92 01 01 	sts	0x0101, r1
    1cfc:	10 92 00 01 	sts	0x0100, r1
}
    1d00:	08 95       	ret

00001d02 <led_operation_1>:

void led_operation_1() {
	leds_right = 3;
    1d02:	83 e0       	ldi	r24, 0x03	; 3
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	90 93 71 02 	sts	0x0271, r25
    1d0a:	80 93 70 02 	sts	0x0270, r24
	leds_middle = 3 << 1;
    1d0e:	26 e0       	ldi	r18, 0x06	; 6
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	30 93 73 02 	sts	0x0273, r19
    1d16:	20 93 72 02 	sts	0x0272, r18
	leds_left = 3;
    1d1a:	90 93 75 02 	sts	0x0275, r25
    1d1e:	80 93 74 02 	sts	0x0274, r24
	running = TRUE;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	90 93 01 01 	sts	0x0101, r25
    1d2a:	80 93 00 01 	sts	0x0100, r24
}
    1d2e:	08 95       	ret

00001d30 <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
    1d30:	fc 01       	movw	r30, r24
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	61 e0       	ldi	r22, 0x01	; 1
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <writePin>
}
    1d3e:	08 95       	ret

00001d40 <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
    1d40:	fc 01       	movw	r30, r24
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <writePin>
}
    1d4e:	08 95       	ret

00001d50 <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1d50:	fc 01       	movw	r30, r24
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <writePin>
}
    1d5a:	08 95       	ret

00001d5c <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
    1d5c:	af 92       	push	r10
    1d5e:	bf 92       	push	r11
    1d60:	cf 92       	push	r12
    1d62:	df 92       	push	r13
    1d64:	ef 92       	push	r14
    1d66:	ff 92       	push	r15
    1d68:	0f 93       	push	r16
    1d6a:	1f 93       	push	r17
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
    1d70:	6c 01       	movw	r12, r24
    1d72:	5b 01       	movw	r10, r22
	uint16_t iMask = 1 << (16 - leds->count);
    1d74:	dc 01       	movw	r26, r24
    1d76:	12 96       	adiw	r26, 0x02	; 2
    1d78:	0c 91       	ld	r16, X
    1d7a:	12 97       	sbiw	r26, 0x02	; 2
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	80 e1       	ldi	r24, 0x10	; 16
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	80 1b       	sub	r24, r16
    1d84:	91 0b       	sbc	r25, r17
    1d86:	c1 e0       	ldi	r28, 0x01	; 1
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <setLeds+0x34>
    1d8c:	cc 0f       	add	r28, r28
    1d8e:	dd 1f       	adc	r29, r29
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <setLeds+0x30>
	for (int i = leds->count - 1; i >= 0; i--) {
    1d94:	01 50       	subi	r16, 0x01	; 1
    1d96:	10 40       	sbci	r17, 0x00	; 0
    1d98:	78 01       	movw	r14, r16
    1d9a:	ee 0c       	add	r14, r14
    1d9c:	ff 1c       	adc	r15, r15
    1d9e:	17 c0       	rjmp	.+46     	; 0x1dce <setLeds+0x72>
		setLed(leds->leds[i], iMask & mask);
    1da0:	d6 01       	movw	r26, r12
    1da2:	ed 91       	ld	r30, X+
    1da4:	fc 91       	ld	r31, X
    1da6:	ee 0d       	add	r30, r14
    1da8:	ff 1d       	adc	r31, r15
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1daa:	01 90       	ld	r0, Z+
    1dac:	f0 81       	ld	r31, Z
    1dae:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
    1db0:	be 01       	movw	r22, r28
    1db2:	6a 21       	and	r22, r10
    1db4:	7b 21       	and	r23, r11
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1db6:	80 81       	ld	r24, Z
    1db8:	91 81       	ldd	r25, Z+1	; 0x01
    1dba:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    1dbe:	cc 0f       	add	r28, r28
    1dc0:	dd 1f       	adc	r29, r29
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
    1dc2:	01 50       	subi	r16, 0x01	; 1
    1dc4:	10 40       	sbci	r17, 0x00	; 0
    1dc6:	ee ef       	ldi	r30, 0xFE	; 254
    1dc8:	ff ef       	ldi	r31, 0xFF	; 255
    1dca:	ee 0e       	add	r14, r30
    1dcc:	ff 1e       	adc	r15, r31
    1dce:	ff ef       	ldi	r31, 0xFF	; 255
    1dd0:	0f 3f       	cpi	r16, 0xFF	; 255
    1dd2:	1f 07       	cpc	r17, r31
    1dd4:	29 f7       	brne	.-54     	; 0x1da0 <setLeds+0x44>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	ff 90       	pop	r15
    1de0:	ef 90       	pop	r14
    1de2:	df 90       	pop	r13
    1de4:	cf 90       	pop	r12
    1de6:	bf 90       	pop	r11
    1de8:	af 90       	pop	r10
    1dea:	08 95       	ret

00001dec <enableLeds>:

void enableLeds(PLedGroup leds) {
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	12 96       	adiw	r26, 0x02	; 2
    1dfe:	ec 90       	ld	r14, X
    1e00:	12 97       	sbiw	r26, 0x02	; 2
    1e02:	ff 24       	eor	r15, r15
    1e04:	c0 e0       	ldi	r28, 0x00	; 0
    1e06:	d0 e0       	ldi	r29, 0x00	; 0
    1e08:	0d c0       	rjmp	.+26     	; 0x1e24 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	d8 01       	movw	r26, r16
    1e12:	ed 91       	ld	r30, X+
    1e14:	fc 91       	ld	r31, X
    1e16:	e8 0f       	add	r30, r24
    1e18:	f9 1f       	adc	r31, r25
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1e22:	21 96       	adiw	r28, 0x01	; 1
    1e24:	ce 15       	cp	r28, r14
    1e26:	df 05       	cpc	r29, r15
    1e28:	84 f3       	brlt	.-32     	; 0x1e0a <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	08 95       	ret

00001e38 <disableLeds>:

void disableLeds(PLedGroup leds) {
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    1e46:	dc 01       	movw	r26, r24
    1e48:	12 96       	adiw	r26, 0x02	; 2
    1e4a:	ec 90       	ld	r14, X
    1e4c:	12 97       	sbiw	r26, 0x02	; 2
    1e4e:	ff 24       	eor	r15, r15
    1e50:	c0 e0       	ldi	r28, 0x00	; 0
    1e52:	d0 e0       	ldi	r29, 0x00	; 0
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    1e56:	ce 01       	movw	r24, r28
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	d8 01       	movw	r26, r16
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	e8 0f       	add	r30, r24
    1e64:	f9 1f       	adc	r31, r25
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    1e6e:	21 96       	adiw	r28, 0x01	; 1
    1e70:	ce 15       	cp	r28, r14
    1e72:	df 05       	cpc	r29, r15
    1e74:	84 f3       	brlt	.-32     	; 0x1e56 <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	08 95       	ret

00001e84 <blinkLeds>:

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
    1e84:	cf 92       	push	r12
    1e86:	df 92       	push	r13
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	6c 01       	movw	r12, r24
    1e9a:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    1e9c:	ff 24       	eor	r15, r15
    1e9e:	1c c0       	rjmp	.+56     	; 0x1ed8 <blinkLeds+0x54>
		setLeds(leds, ledMask);
    1ea0:	c6 01       	movw	r24, r12
    1ea2:	b8 01       	movw	r22, r16
    1ea4:	49 83       	std	Y+1, r20	; 0x01
    1ea6:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <setLeds>
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	94 e3       	ldi	r25, 0x34	; 52
    1eae:	ac e0       	ldi	r26, 0x0C	; 12
    1eb0:	81 50       	subi	r24, 0x01	; 1
    1eb2:	90 40       	sbci	r25, 0x00	; 0
    1eb4:	a0 40       	sbci	r26, 0x00	; 0
    1eb6:	e1 f7       	brne	.-8      	; 0x1eb0 <blinkLeds+0x2c>
    1eb8:	00 c0       	rjmp	.+0      	; 0x1eba <blinkLeds+0x36>
    1eba:	00 00       	nop
		_delay_ms(200);
		disableLeds(leds);
    1ebc:	c6 01       	movw	r24, r12
    1ebe:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <disableLeds>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	94 e3       	ldi	r25, 0x34	; 52
    1ec6:	ac e0       	ldi	r26, 0x0C	; 12
    1ec8:	81 50       	subi	r24, 0x01	; 1
    1eca:	90 40       	sbci	r25, 0x00	; 0
    1ecc:	a0 40       	sbci	r26, 0x00	; 0
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <blinkLeds+0x44>
    1ed0:	00 c0       	rjmp	.+0      	; 0x1ed2 <blinkLeds+0x4e>
    1ed2:	00 00       	nop
		disableLed(leds->leds[i]);
	}
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    1ed4:	f3 94       	inc	r15
    1ed6:	49 81       	ldd	r20, Y+1	; 0x01
    1ed8:	f4 16       	cp	r15, r20
    1eda:	10 f3       	brcs	.-60     	; 0x1ea0 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		_delay_ms(200);
		disableLeds(leds);
		_delay_ms(200);
	}
}
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	08 95       	ret

00001eee <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, const uint8_t times) {
    1eee:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    1ef0:	6f ef       	ldi	r22, 0xFF	; 255
    1ef2:	7f ef       	ldi	r23, 0xFF	; 255
    1ef4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <blinkLeds>
}
    1ef8:	08 95       	ret

00001efa <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1efa:	dc 01       	movw	r26, r24
    1efc:	14 96       	adiw	r26, 0x04	; 4
    1efe:	ed 91       	ld	r30, X+
    1f00:	fc 91       	ld	r31, X
    1f02:	15 97       	sbiw	r26, 0x05	; 5
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	80 83       	st	Z, r24
}
    1f08:	08 95       	ret

00001f0a <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	14 96       	adiw	r26, 0x04	; 4
    1f0e:	ed 91       	ld	r30, X+
    1f10:	fc 91       	ld	r31, X
    1f12:	15 97       	sbiw	r26, 0x05	; 5
    1f14:	10 82       	st	Z, r1
}
    1f16:	08 95       	ret

00001f18 <setPinOutput>:

void setPinOutput(PPin pin) {
    1f18:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	04 80       	ldd	r0, Z+4	; 0x04
    1f22:	f5 81       	ldd	r31, Z+5	; 0x05
    1f24:	e0 2d       	mov	r30, r0
    1f26:	80 81       	ld	r24, Z
    1f28:	12 96       	adiw	r26, 0x02	; 2
    1f2a:	9c 91       	ld	r25, X
    1f2c:	12 97       	sbiw	r26, 0x02	; 2
    1f2e:	89 2b       	or	r24, r25
    1f30:	80 83       	st	Z, r24
}
    1f32:	08 95       	ret

00001f34 <setPinInput>:

void setPinInput(PPin pin) {
    1f34:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1f36:	ed 91       	ld	r30, X+
    1f38:	fc 91       	ld	r31, X
    1f3a:	11 97       	sbiw	r26, 0x01	; 1
    1f3c:	04 80       	ldd	r0, Z+4	; 0x04
    1f3e:	f5 81       	ldd	r31, Z+5	; 0x05
    1f40:	e0 2d       	mov	r30, r0
    1f42:	90 81       	ld	r25, Z
    1f44:	12 96       	adiw	r26, 0x02	; 2
    1f46:	8c 91       	ld	r24, X
    1f48:	12 97       	sbiw	r26, 0x02	; 2
    1f4a:	80 95       	com	r24
    1f4c:	89 23       	and	r24, r25
    1f4e:	80 83       	st	Z, r24
}
    1f50:	08 95       	ret

00001f52 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    1f52:	dc 01       	movw	r26, r24
    1f54:	ed 91       	ld	r30, X+
    1f56:	fc 91       	ld	r31, X
    1f58:	11 97       	sbiw	r26, 0x01	; 1
    1f5a:	60 83       	st	Z, r22
}
    1f5c:	08 95       	ret

00001f5e <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    1f5e:	dc 01       	movw	r26, r24
    1f60:	12 96       	adiw	r26, 0x02	; 2
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	13 97       	sbiw	r26, 0x03	; 3
    1f68:	80 81       	ld	r24, Z
}
    1f6a:	08 95       	ret

00001f6c <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1f6c:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1f6e:	ed 91       	ld	r30, X+
    1f70:	fc 91       	ld	r31, X
    1f72:	11 97       	sbiw	r26, 0x01	; 1
    1f74:	01 90       	ld	r0, Z+
    1f76:	f0 81       	ld	r31, Z
    1f78:	e0 2d       	mov	r30, r0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	12 96       	adiw	r26, 0x02	; 2
    1f7e:	9c 91       	ld	r25, X
    1f80:	12 97       	sbiw	r26, 0x02	; 2
    1f82:	89 2b       	or	r24, r25
    1f84:	80 83       	st	Z, r24
}
    1f86:	08 95       	ret

00001f88 <setPinZero>:

void setPinZero(PPin pin) {
    1f88:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    1f8a:	ed 91       	ld	r30, X+
    1f8c:	fc 91       	ld	r31, X
    1f8e:	11 97       	sbiw	r26, 0x01	; 1
    1f90:	01 90       	ld	r0, Z+
    1f92:	f0 81       	ld	r31, Z
    1f94:	e0 2d       	mov	r30, r0
    1f96:	90 81       	ld	r25, Z
    1f98:	12 96       	adiw	r26, 0x02	; 2
    1f9a:	8c 91       	ld	r24, X
    1f9c:	12 97       	sbiw	r26, 0x02	; 2
    1f9e:	80 95       	com	r24
    1fa0:	89 23       	and	r24, r25
    1fa2:	80 83       	st	Z, r24
}
    1fa4:	08 95       	ret

00001fa6 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1fa6:	61 15       	cp	r22, r1
    1fa8:	71 05       	cpc	r23, r1
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <writePin+0xc>
    1fac:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <setPinOne>
    1fb0:	08 95       	ret
	else setPinZero(pin);
    1fb2:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <setPinZero>
    1fb6:	08 95       	ret

00001fb8 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1fb8:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    1fba:	a0 81       	ld	r26, Z
    1fbc:	b1 81       	ldd	r27, Z+1	; 0x01
    1fbe:	12 96       	adiw	r26, 0x02	; 2
    1fc0:	0d 90       	ld	r0, X+
    1fc2:	bc 91       	ld	r27, X
    1fc4:	a0 2d       	mov	r26, r0
    1fc6:	8c 91       	ld	r24, X
    1fc8:	92 81       	ldd	r25, Z+2	; 0x02
    1fca:	89 23       	and	r24, r25
		return TRUE;
    1fcc:	21 e0       	ldi	r18, 0x01	; 1
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <readPin+0x1e>
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1fd6:	c9 01       	movw	r24, r18
    1fd8:	08 95       	ret

00001fda <buttonStatus>:
 */ 

#include "button.h"
#include "port.h"

BOOL buttonStatus(PButton button) {
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ec 01       	movw	r28, r24
	BOOL val = readPin(button->pin);
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <readPin>
    1fe8:	9c 01       	movw	r18, r24
	if (button->flags & BUTTON_INVERTED) val = !val;
    1fea:	88 81       	ld	r24, Y
    1fec:	81 ff       	sbrs	r24, 1
    1fee:	08 c0       	rjmp	.+16     	; 0x2000 <buttonStatus+0x26>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	21 15       	cp	r18, r1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	11 f0       	breq	.+4      	; 0x1ffe <buttonStatus+0x24>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 01       	movw	r18, r24
	return val;
}
    2000:	c9 01       	movw	r24, r18
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    2008:	80 32       	cpi	r24, 0x20	; 32
    200a:	18 f5       	brcc	.+70     	; 0x2052 <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    200c:	58 2f       	mov	r21, r24
    200e:	56 95       	lsr	r21
    2010:	56 95       	lsr	r21
    2012:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    2014:	e5 2f       	mov	r30, r21
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	ef 5a       	subi	r30, 0xAF	; 175
    201e:	fd 4f       	sbci	r31, 0xFD	; 253
    2020:	01 90       	ld	r0, Z+
    2022:	f0 81       	ld	r31, Z
    2024:	e0 2d       	mov	r30, r0
    2026:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    2028:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    202a:	21 e0       	ldi	r18, 0x01	; 1
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	b9 01       	movw	r22, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <enablePinChangeInterrupt+0x2e>
    2032:	66 0f       	add	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	8a 95       	dec	r24
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <enablePinChangeInterrupt+0x2a>
    203a:	46 2b       	or	r20, r22
    203c:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
    203e:	80 91 68 00 	lds	r24, 0x0068
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <enablePinChangeInterrupt+0x40>
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	5a 95       	dec	r21
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <enablePinChangeInterrupt+0x3c>
    204c:	82 2b       	or	r24, r18
    204e:	80 93 68 00 	sts	0x0068, r24
    2052:	08 95       	ret

00002054 <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    2054:	80 32       	cpi	r24, 0x20	; 32
    2056:	c0 f4       	brcc	.+48     	; 0x2088 <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    2058:	e8 2f       	mov	r30, r24
    205a:	e6 95       	lsr	r30
    205c:	e6 95       	lsr	r30
    205e:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	ef 5a       	subi	r30, 0xAF	; 175
    2068:	fd 4f       	sbci	r31, 0xFD	; 253
    206a:	01 90       	ld	r0, Z+
    206c:	f0 81       	ld	r31, Z
    206e:	e0 2d       	mov	r30, r0
    2070:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    2072:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    2074:	21 e0       	ldi	r18, 0x01	; 1
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	02 c0       	rjmp	.+4      	; 0x207e <disblePinChangeInterrupt+0x2a>
    207a:	22 0f       	add	r18, r18
    207c:	33 1f       	adc	r19, r19
    207e:	8a 95       	dec	r24
    2080:	e2 f7       	brpl	.-8      	; 0x207a <disblePinChangeInterrupt+0x26>
    2082:	20 95       	com	r18
    2084:	29 23       	and	r18, r25
    2086:	20 83       	st	Z, r18
    2088:	08 95       	ret

0000208a <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    208a:	fc 01       	movw	r30, r24
    208c:	64 30       	cpi	r22, 0x04	; 4
    208e:	71 05       	cpc	r23, r1
    2090:	48 f4       	brcc	.+18     	; 0x20a4 <setCompareMatchOutputMode+0x1a>
    2092:	db 01       	movw	r26, r22
    2094:	a7 5a       	subi	r26, 0xA7	; 167
    2096:	bd 4f       	sbci	r27, 0xFD	; 253
    2098:	2c 91       	ld	r18, X
    209a:	63 5a       	subi	r22, 0xA3	; 163
    209c:	7d 4f       	sbci	r23, 0xFD	; 253
    209e:	db 01       	movw	r26, r22
    20a0:	3c 91       	ld	r19, X
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <setCompareMatchOutputMode+0x1e>
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0B1) | _BV(COM0B0);
			break;
	}
	if (timer->type == TIMER_A) {
    20a8:	84 81       	ldd	r24, Z+4	; 0x04
    20aa:	95 81       	ldd	r25, Z+5	; 0x05
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <setCompareMatchOutputMode+0x2e>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		// Use left shift to avoid the arithmetic shift.
		oneBits = oneBits << 2;
    20b0:	33 0f       	add	r19, r19
    20b2:	33 0f       	add	r19, r19
		zeroBits = zeroBits << 2;
    20b4:	22 0f       	add	r18, r18
    20b6:	22 0f       	add	r18, r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    20b8:	a0 81       	ld	r26, Z
    20ba:	b1 81       	ldd	r27, Z+1	; 0x01
    20bc:	11 96       	adiw	r26, 0x01	; 1
    20be:	0d 90       	ld	r0, X+
    20c0:	bc 91       	ld	r27, X
    20c2:	a0 2d       	mov	r26, r0
    20c4:	8c 91       	ld	r24, X
    20c6:	83 2b       	or	r24, r19
    20c8:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    20ca:	01 90       	ld	r0, Z+
    20cc:	f0 81       	ld	r31, Z
    20ce:	e0 2d       	mov	r30, r0
    20d0:	01 80       	ldd	r0, Z+1	; 0x01
    20d2:	f2 81       	ldd	r31, Z+2	; 0x02
    20d4:	e0 2d       	mov	r30, r0
    20d6:	80 81       	ld	r24, Z
    20d8:	20 95       	com	r18
    20da:	28 23       	and	r18, r24
    20dc:	20 83       	st	Z, r18
}
    20de:	08 95       	ret

000020e0 <setTimerClockSelect>:

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
    20e0:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    20e2:	80 81       	ld	r24, Z
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	82 70       	andi	r24, 0x02	; 2
    20e8:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    20ea:	64 30       	cpi	r22, 0x04	; 4
    20ec:	71 05       	cpc	r23, r1
    20ee:	71 f1       	breq	.+92     	; 0x214c <setTimerClockSelect+0x6c>
    20f0:	65 30       	cpi	r22, 0x05	; 5
    20f2:	71 05       	cpc	r23, r1
    20f4:	68 f4       	brcc	.+26     	; 0x2110 <setTimerClockSelect+0x30>
    20f6:	61 30       	cpi	r22, 0x01	; 1
    20f8:	71 05       	cpc	r23, r1
    20fa:	f9 f0       	breq	.+62     	; 0x213a <setTimerClockSelect+0x5a>
    20fc:	61 30       	cpi	r22, 0x01	; 1
    20fe:	71 05       	cpc	r23, r1
    2100:	d8 f1       	brcs	.+118    	; 0x2178 <setTimerClockSelect+0x98>
    2102:	62 30       	cpi	r22, 0x02	; 2
    2104:	71 05       	cpc	r23, r1
    2106:	e1 f0       	breq	.+56     	; 0x2140 <setTimerClockSelect+0x60>
    2108:	63 30       	cpi	r22, 0x03	; 3
    210a:	71 05       	cpc	r23, r1
    210c:	a1 f4       	brne	.+40     	; 0x2136 <setTimerClockSelect+0x56>
    210e:	1b c0       	rjmp	.+54     	; 0x2146 <setTimerClockSelect+0x66>
    2110:	67 30       	cpi	r22, 0x07	; 7
    2112:	71 05       	cpc	r23, r1
    2114:	21 f1       	breq	.+72     	; 0x215e <setTimerClockSelect+0x7e>
    2116:	68 30       	cpi	r22, 0x08	; 8
    2118:	71 05       	cpc	r23, r1
    211a:	38 f4       	brcc	.+14     	; 0x212a <setTimerClockSelect+0x4a>
    211c:	65 30       	cpi	r22, 0x05	; 5
    211e:	71 05       	cpc	r23, r1
    2120:	c1 f0       	breq	.+48     	; 0x2152 <setTimerClockSelect+0x72>
    2122:	66 30       	cpi	r22, 0x06	; 6
    2124:	71 05       	cpc	r23, r1
    2126:	39 f4       	brne	.+14     	; 0x2136 <setTimerClockSelect+0x56>
    2128:	17 c0       	rjmp	.+46     	; 0x2158 <setTimerClockSelect+0x78>
    212a:	68 30       	cpi	r22, 0x08	; 8
    212c:	71 05       	cpc	r23, r1
    212e:	d1 f0       	breq	.+52     	; 0x2164 <setTimerClockSelect+0x84>
    2130:	69 30       	cpi	r22, 0x09	; 9
    2132:	71 05       	cpc	r23, r1
    2134:	e1 f0       	breq	.+56     	; 0x216e <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	1d c0       	rjmp	.+58     	; 0x2174 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    213a:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    213c:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    213e:	27 c0       	rjmp	.+78     	; 0x218e <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    2140:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    2142:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    2144:	24 c0       	rjmp	.+72     	; 0x218e <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	e9 f4       	brne	.+58     	; 0x2184 <setTimerClockSelect+0xa4>
    214a:	2d c0       	rjmp	.+90     	; 0x21a6 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	b9 f0       	breq	.+46     	; 0x217e <setTimerClockSelect+0x9e>
    2150:	19 c0       	rjmp	.+50     	; 0x2184 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	d1 f4       	brne	.+52     	; 0x218a <setTimerClockSelect+0xaa>
    2156:	27 c0       	rjmp	.+78     	; 0x21a6 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	a1 f0       	breq	.+40     	; 0x2184 <setTimerClockSelect+0xa4>
    215c:	05 c0       	rjmp	.+10     	; 0x2168 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	a1 f0       	breq	.+40     	; 0x218a <setTimerClockSelect+0xaa>
    2162:	07 c0       	rjmp	.+14     	; 0x2172 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	f9 f4       	brne	.+62     	; 0x21a6 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    2168:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	10 c0       	rjmp	.+32     	; 0x218e <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	d1 f4       	brne	.+52     	; 0x21a6 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    2172:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0b c0       	rjmp	.+22     	; 0x218e <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    2178:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    217a:	87 e0       	ldi	r24, 0x07	; 7
    217c:	08 c0       	rjmp	.+16     	; 0x218e <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    217e:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    2180:	84 e0       	ldi	r24, 0x04	; 4
    2182:	05 c0       	rjmp	.+10     	; 0x218e <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    2184:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	02 c0       	rjmp	.+4      	; 0x218e <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    218a:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    218c:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    218e:	a3 81       	ldd	r26, Z+3	; 0x03
    2190:	b4 81       	ldd	r27, Z+4	; 0x04
    2192:	2c 91       	ld	r18, X
    2194:	29 2b       	or	r18, r25
    2196:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    2198:	03 80       	ldd	r0, Z+3	; 0x03
    219a:	f4 81       	ldd	r31, Z+4	; 0x04
    219c:	e0 2d       	mov	r30, r0
    219e:	90 81       	ld	r25, Z
    21a0:	80 95       	com	r24
    21a2:	89 23       	and	r24, r25
    21a4:	80 83       	st	Z, r24
    21a6:	08 95       	ret

000021a8 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
    21a8:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    21aa:	80 81       	ld	r24, Z
    21ac:	82 ff       	sbrs	r24, 2
    21ae:	37 c0       	rjmp	.+110    	; 0x221e <setWaveformGenerationMode+0x76>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    21b0:	63 30       	cpi	r22, 0x03	; 3
    21b2:	71 05       	cpc	r23, r1
    21b4:	31 f1       	breq	.+76     	; 0x2202 <setWaveformGenerationMode+0x5a>
    21b6:	64 30       	cpi	r22, 0x04	; 4
    21b8:	71 05       	cpc	r23, r1
    21ba:	40 f4       	brcc	.+16     	; 0x21cc <setWaveformGenerationMode+0x24>
    21bc:	61 30       	cpi	r22, 0x01	; 1
    21be:	71 05       	cpc	r23, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <setWaveformGenerationMode+0x1c>
    21c2:	57 c0       	rjmp	.+174    	; 0x2272 <setWaveformGenerationMode+0xca>
    21c4:	62 30       	cpi	r22, 0x02	; 2
    21c6:	71 05       	cpc	r23, r1
    21c8:	80 f4       	brcc	.+32     	; 0x21ea <setWaveformGenerationMode+0x42>
    21ca:	0b c0       	rjmp	.+22     	; 0x21e2 <setWaveformGenerationMode+0x3a>
    21cc:	65 30       	cpi	r22, 0x05	; 5
    21ce:	71 05       	cpc	r23, r1
    21d0:	81 f0       	breq	.+32     	; 0x21f2 <setWaveformGenerationMode+0x4a>
    21d2:	65 30       	cpi	r22, 0x05	; 5
    21d4:	71 05       	cpc	r23, r1
    21d6:	c8 f0       	brcs	.+50     	; 0x220a <setWaveformGenerationMode+0x62>
    21d8:	66 30       	cpi	r22, 0x06	; 6
    21da:	71 05       	cpc	r23, r1
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <setWaveformGenerationMode+0x38>
    21de:	7a c0       	rjmp	.+244    	; 0x22d4 <setWaveformGenerationMode+0x12c>
    21e0:	1c c0       	rjmp	.+56     	; 0x221a <setWaveformGenerationMode+0x72>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    21e2:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    21e4:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    21e6:	88 e1       	ldi	r24, 0x18	; 24
    21e8:	47 c0       	rjmp	.+142    	; 0x2278 <setWaveformGenerationMode+0xd0>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    21ea:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    21ec:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    21ee:	80 e1       	ldi	r24, 0x10	; 16
    21f0:	3e c0       	rjmp	.+124    	; 0x226e <setWaveformGenerationMode+0xc6>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
    21f2:	84 fd       	sbrc	r24, 4
    21f4:	43 c0       	rjmp	.+134    	; 0x227c <setWaveformGenerationMode+0xd4>
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
    21f6:	85 ff       	sbrs	r24, 5
    21f8:	45 c0       	rjmp	.+138    	; 0x2284 <setWaveformGenerationMode+0xdc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
    21fa:	98 e0       	ldi	r25, 0x08	; 8
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    21fc:	33 e0       	ldi	r19, 0x03	; 3
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    21fe:	80 e1       	ldi	r24, 0x10	; 16
    2200:	4c c0       	rjmp	.+152    	; 0x229a <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2202:	90 e0       	ldi	r25, 0x00	; 0
					oneBitsB = _BV(WGM13) | _BV(WGM12);
				}
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    2204:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2206:	88 e1       	ldi	r24, 0x18	; 24
    2208:	32 c0       	rjmp	.+100    	; 0x226e <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
    220a:	84 fd       	sbrc	r24, 4
    220c:	3f c0       	rjmp	.+126    	; 0x228c <setWaveformGenerationMode+0xe4>
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
    220e:	85 ff       	sbrs	r24, 5
    2210:	41 c0       	rjmp	.+130    	; 0x2294 <setWaveformGenerationMode+0xec>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2212:	90 e0       	ldi	r25, 0x00	; 0
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    2214:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2216:	88 e1       	ldi	r24, 0x18	; 24
    2218:	40 c0       	rjmp	.+128    	; 0x229a <setWaveformGenerationMode+0xf2>
				}
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    221a:	90 e1       	ldi	r25, 0x10	; 16
    221c:	22 c0       	rjmp	.+68     	; 0x2262 <setWaveformGenerationMode+0xba>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    221e:	62 30       	cpi	r22, 0x02	; 2
    2220:	71 05       	cpc	r23, r1
    2222:	d1 f0       	breq	.+52     	; 0x2258 <setWaveformGenerationMode+0xb0>
    2224:	63 30       	cpi	r22, 0x03	; 3
    2226:	71 05       	cpc	r23, r1
    2228:	40 f4       	brcc	.+16     	; 0x223a <setWaveformGenerationMode+0x92>
    222a:	61 15       	cp	r22, r1
    222c:	71 05       	cpc	r23, r1
    222e:	81 f0       	breq	.+32     	; 0x2250 <setWaveformGenerationMode+0xa8>
    2230:	61 30       	cpi	r22, 0x01	; 1
    2232:	71 05       	cpc	r23, r1
    2234:	09 f0       	breq	.+2      	; 0x2238 <setWaveformGenerationMode+0x90>
    2236:	4e c0       	rjmp	.+156    	; 0x22d4 <setWaveformGenerationMode+0x12c>
    2238:	32 c0       	rjmp	.+100    	; 0x229e <setWaveformGenerationMode+0xf6>
    223a:	64 30       	cpi	r22, 0x04	; 4
    223c:	71 05       	cpc	r23, r1
    223e:	a1 f0       	breq	.+40     	; 0x2268 <setWaveformGenerationMode+0xc0>
    2240:	64 30       	cpi	r22, 0x04	; 4
    2242:	71 05       	cpc	r23, r1
    2244:	68 f0       	brcs	.+26     	; 0x2260 <setWaveformGenerationMode+0xb8>
    2246:	65 30       	cpi	r22, 0x05	; 5
    2248:	71 05       	cpc	r23, r1
    224a:	09 f0       	breq	.+2      	; 0x224e <setWaveformGenerationMode+0xa6>
    224c:	43 c0       	rjmp	.+134    	; 0x22d4 <setWaveformGenerationMode+0x12c>
    224e:	06 c0       	rjmp	.+12     	; 0x225c <setWaveformGenerationMode+0xb4>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2250:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    2252:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    2254:	88 e0       	ldi	r24, 0x08	; 8
    2256:	10 c0       	rjmp	.+32     	; 0x2278 <setWaveformGenerationMode+0xd0>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	1d c0       	rjmp	.+58     	; 0x2296 <setWaveformGenerationMode+0xee>
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    225c:	98 e0       	ldi	r25, 0x08	; 8
    225e:	13 c0       	rjmp	.+38     	; 0x2286 <setWaveformGenerationMode+0xde>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    2260:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    2262:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    2264:	88 e0       	ldi	r24, 0x08	; 8
    2266:	03 c0       	rjmp	.+6      	; 0x226e <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    2268:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    226a:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    226c:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    226e:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    2270:	1a c0       	rjmp	.+52     	; 0x22a6 <setWaveformGenerationMode+0xfe>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    2272:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    2274:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    2276:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    2278:	23 e0       	ldi	r18, 0x03	; 3
    227a:	15 c0       	rjmp	.+42     	; 0x22a6 <setWaveformGenerationMode+0xfe>
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
    227c:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
    227e:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    2280:	80 e1       	ldi	r24, 0x10	; 16
    2282:	10 c0       	rjmp	.+32     	; 0x22a4 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					oneBitsB = _BV(WGM13) | _BV(WGM12);
    2284:	98 e1       	ldi	r25, 0x18	; 24
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    2286:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	07 c0       	rjmp	.+14     	; 0x229a <setWaveformGenerationMode+0xf2>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    228c:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
    228e:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    2290:	88 e1       	ldi	r24, 0x18	; 24
    2292:	08 c0       	rjmp	.+16     	; 0x22a4 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					zeroBitsB = _BV(WGM12);
					oneBitsB = _BV(WGM13);
    2294:	90 e1       	ldi	r25, 0x10	; 16
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    2296:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM12);
    2298:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <setWaveformGenerationMode+0xfe>
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    229e:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    22a0:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    22a2:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    22a4:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    22a6:	a1 81       	ldd	r26, Z+1	; 0x01
    22a8:	b2 81       	ldd	r27, Z+2	; 0x02
    22aa:	4c 91       	ld	r20, X
    22ac:	43 2b       	or	r20, r19
    22ae:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    22b0:	a1 81       	ldd	r26, Z+1	; 0x01
    22b2:	b2 81       	ldd	r27, Z+2	; 0x02
    22b4:	3c 91       	ld	r19, X
    22b6:	20 95       	com	r18
    22b8:	23 23       	and	r18, r19
    22ba:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    22bc:	a3 81       	ldd	r26, Z+3	; 0x03
    22be:	b4 81       	ldd	r27, Z+4	; 0x04
    22c0:	2c 91       	ld	r18, X
    22c2:	29 2b       	or	r18, r25
    22c4:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    22c6:	03 80       	ldd	r0, Z+3	; 0x03
    22c8:	f4 81       	ldd	r31, Z+4	; 0x04
    22ca:	e0 2d       	mov	r30, r0
    22cc:	90 81       	ld	r25, Z
    22ce:	80 95       	com	r24
    22d0:	89 23       	and	r24, r25
    22d2:	80 83       	st	Z, r24
    22d4:	08 95       	ret

000022d6 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    22d6:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative macro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    22d8:	ed 91       	ld	r30, X+
    22da:	fc 91       	ld	r31, X
    22dc:	11 97       	sbiw	r26, 0x01	; 1
    22de:	05 80       	ldd	r0, Z+5	; 0x05
    22e0:	f6 81       	ldd	r31, Z+6	; 0x06
    22e2:	e0 2d       	mov	r30, r0
    22e4:	20 81       	ld	r18, Z
    22e6:	14 96       	adiw	r26, 0x04	; 4
    22e8:	8d 91       	ld	r24, X+
    22ea:	9c 91       	ld	r25, X
    22ec:	15 97       	sbiw	r26, 0x05	; 5
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	11 f4       	brne	.+4      	; 0x22f6 <enableTimerInterrupt+0x20>
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	01 c0       	rjmp	.+2      	; 0x22f8 <enableTimerInterrupt+0x22>
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	82 2b       	or	r24, r18
    22fa:	80 83       	st	Z, r24
}
    22fc:	08 95       	ret

000022fe <disableTimerInterrupt>:

void disableTimerInterrupt(PTimer timer) {
    22fe:	dc 01       	movw	r26, r24
	*timer->timer->interruptMaskRegister &= ~_BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    2300:	ed 91       	ld	r30, X+
    2302:	fc 91       	ld	r31, X
    2304:	11 97       	sbiw	r26, 0x01	; 1
    2306:	05 80       	ldd	r0, Z+5	; 0x05
    2308:	f6 81       	ldd	r31, Z+6	; 0x06
    230a:	e0 2d       	mov	r30, r0
    230c:	20 81       	ld	r18, Z
    230e:	14 96       	adiw	r26, 0x04	; 4
    2310:	8d 91       	ld	r24, X+
    2312:	9c 91       	ld	r25, X
    2314:	15 97       	sbiw	r26, 0x05	; 5
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	11 f4       	brne	.+4      	; 0x231e <disableTimerInterrupt+0x20>
    231a:	8d ef       	ldi	r24, 0xFD	; 253
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <disableTimerInterrupt+0x22>
    231e:	8b ef       	ldi	r24, 0xFB	; 251
    2320:	82 23       	and	r24, r18
    2322:	80 83       	st	Z, r24
}
    2324:	08 95       	ret

00002326 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    232c:	8e 81       	ldd	r24, Y+6	; 0x06
    232e:	9f 81       	ldd	r25, Y+7	; 0x07
    2330:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <setPinOutput>
	setCompareMatchOutputMode(timer, set_on_match);
    2334:	ce 01       	movw	r24, r28
    2336:	63 e0       	ldi	r22, 0x03	; 3
    2338:	70 e0       	ldi	r23, 0x00	; 0
    233a:	0e 94 45 10 	call	0x208a	; 0x208a <setCompareMatchOutputMode>
}
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	08 95       	ret

00002344 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	0e 94 45 10 	call	0x208a	; 0x208a <setCompareMatchOutputMode>
}
    234c:	08 95       	ret

0000234e <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    234e:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    2350:	a0 81       	ld	r26, Z
    2352:	b1 81       	ldd	r27, Z+1	; 0x01
    2354:	8c 91       	ld	r24, X
    2356:	82 ff       	sbrs	r24, 2
    2358:	1c c0       	rjmp	.+56     	; 0x2392 <setTimerCompareValue+0x44>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    235a:	9f b7       	in	r25, 0x3f	; 63
		// Use as many significant bits as possible.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    235c:	84 ff       	sbrs	r24, 4
    235e:	06 c0       	rjmp	.+12     	; 0x236c <setTimerCompareValue+0x1e>
			value = value >> (16 - 9);
    2360:	66 0f       	add	r22, r22
    2362:	67 2f       	mov	r22, r23
    2364:	66 1f       	adc	r22, r22
    2366:	77 0b       	sbc	r23, r23
    2368:	71 95       	neg	r23
    236a:	07 c0       	rjmp	.+14     	; 0x237a <setTimerCompareValue+0x2c>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    236c:	85 ff       	sbrs	r24, 5
    236e:	05 c0       	rjmp	.+10     	; 0x237a <setTimerCompareValue+0x2c>
			value = value >> (16 - 10);
    2370:	86 e0       	ldi	r24, 0x06	; 6
    2372:	76 95       	lsr	r23
    2374:	67 95       	ror	r22
    2376:	8a 95       	dec	r24
    2378:	e1 f7       	brne	.-8      	; 0x2372 <setTimerCompareValue+0x24>
		}
		cli();
    237a:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    237c:	a2 81       	ldd	r26, Z+2	; 0x02
    237e:	b3 81       	ldd	r27, Z+3	; 0x03
    2380:	11 96       	adiw	r26, 0x01	; 1
    2382:	7c 93       	st	X, r23
    2384:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    2386:	02 80       	ldd	r0, Z+2	; 0x02
    2388:	f3 81       	ldd	r31, Z+3	; 0x03
    238a:	e0 2d       	mov	r30, r0
    238c:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    238e:	9f bf       	out	0x3f, r25	; 63
    2390:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    2392:	02 80       	ldd	r0, Z+2	; 0x02
    2394:	f3 81       	ldd	r31, Z+3	; 0x03
    2396:	e0 2d       	mov	r30, r0
    2398:	70 83       	st	Z, r23
    239a:	08 95       	ret

0000239c <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    239c:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    239e:	a0 81       	ld	r26, Z
    23a0:	b1 81       	ldd	r27, Z+1	; 0x01
    23a2:	8c 91       	ld	r24, X
    23a4:	82 ff       	sbrs	r24, 2
    23a6:	1c c0       	rjmp	.+56     	; 0x23e0 <getTimerCompareValue+0x44>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    23a8:	8f b7       	in	r24, 0x3f	; 63
		cli();
    23aa:	f8 94       	cli
		// Reading OCR-register does not require any particular ordering of reading the bytes.
		result = *((uint16_t*) timer->outputCompareRegister);
    23ac:	a2 81       	ldd	r26, Z+2	; 0x02
    23ae:	b3 81       	ldd	r27, Z+3	; 0x03
    23b0:	2d 91       	ld	r18, X+
    23b2:	3c 91       	ld	r19, X
    23b4:	11 97       	sbiw	r26, 0x01	; 1
		SREG = sreg; // re-enable interrupts
    23b6:	8f bf       	out	0x3f, r24	; 63
		
		// Shift the value back. Non-significant bits are lost.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    23b8:	01 90       	ld	r0, Z+
    23ba:	f0 81       	ld	r31, Z
    23bc:	e0 2d       	mov	r30, r0
    23be:	80 81       	ld	r24, Z
    23c0:	84 ff       	sbrs	r24, 4
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <getTimerCompareValue+0x34>
			result = result << (16 - 9);
    23c4:	36 95       	lsr	r19
    23c6:	32 2f       	mov	r19, r18
    23c8:	22 27       	eor	r18, r18
    23ca:	37 95       	ror	r19
    23cc:	27 95       	ror	r18
    23ce:	0e c0       	rjmp	.+28     	; 0x23ec <getTimerCompareValue+0x50>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    23d0:	85 ff       	sbrs	r24, 5
    23d2:	0c c0       	rjmp	.+24     	; 0x23ec <getTimerCompareValue+0x50>
			result = result << (16 - 10);
    23d4:	46 e0       	ldi	r20, 0x06	; 6
    23d6:	22 0f       	add	r18, r18
    23d8:	33 1f       	adc	r19, r19
    23da:	4a 95       	dec	r20
    23dc:	e1 f7       	brne	.-8      	; 0x23d6 <getTimerCompareValue+0x3a>
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <getTimerCompareValue+0x50>
		}
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    23e0:	02 80       	ldd	r0, Z+2	; 0x02
    23e2:	f3 81       	ldd	r31, Z+3	; 0x03
    23e4:	e0 2d       	mov	r30, r0
    23e6:	80 81       	ld	r24, Z
    23e8:	38 2f       	mov	r19, r24
    23ea:	20 e0       	ldi	r18, 0x00	; 0
	}
	return result;
}
    23ec:	c9 01       	movw	r24, r18
    23ee:	08 95       	ret

000023f0 <__udivmodhi4>:
    23f0:	aa 1b       	sub	r26, r26
    23f2:	bb 1b       	sub	r27, r27
    23f4:	51 e1       	ldi	r21, 0x11	; 17
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <__udivmodhi4_ep>

000023f8 <__udivmodhi4_loop>:
    23f8:	aa 1f       	adc	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	a6 17       	cp	r26, r22
    23fe:	b7 07       	cpc	r27, r23
    2400:	10 f0       	brcs	.+4      	; 0x2406 <__udivmodhi4_ep>
    2402:	a6 1b       	sub	r26, r22
    2404:	b7 0b       	sbc	r27, r23

00002406 <__udivmodhi4_ep>:
    2406:	88 1f       	adc	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	5a 95       	dec	r21
    240c:	a9 f7       	brne	.-22     	; 0x23f8 <__udivmodhi4_loop>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	08 95       	ret

00002418 <malloc>:
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	91 05       	cpc	r25, r1
    2420:	10 f4       	brcc	.+4      	; 0x2426 <malloc+0xe>
    2422:	82 e0       	ldi	r24, 0x02	; 2
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	e0 91 af 05 	lds	r30, 0x05AF
    242a:	f0 91 b0 05 	lds	r31, 0x05B0
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	26 c0       	rjmp	.+76     	; 0x2484 <malloc+0x6c>
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	68 17       	cp	r22, r24
    243e:	79 07       	cpc	r23, r25
    2440:	e0 f0       	brcs	.+56     	; 0x247a <malloc+0x62>
    2442:	68 17       	cp	r22, r24
    2444:	79 07       	cpc	r23, r25
    2446:	81 f4       	brne	.+32     	; 0x2468 <malloc+0x50>
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	21 15       	cp	r18, r1
    244e:	31 05       	cpc	r19, r1
    2450:	31 f0       	breq	.+12     	; 0x245e <malloc+0x46>
    2452:	d9 01       	movw	r26, r18
    2454:	13 96       	adiw	r26, 0x03	; 3
    2456:	9c 93       	st	X, r25
    2458:	8e 93       	st	-X, r24
    245a:	12 97       	sbiw	r26, 0x02	; 2
    245c:	2b c0       	rjmp	.+86     	; 0x24b4 <malloc+0x9c>
    245e:	90 93 b0 05 	sts	0x05B0, r25
    2462:	80 93 af 05 	sts	0x05AF, r24
    2466:	26 c0       	rjmp	.+76     	; 0x24b4 <malloc+0x9c>
    2468:	41 15       	cp	r20, r1
    246a:	51 05       	cpc	r21, r1
    246c:	19 f0       	breq	.+6      	; 0x2474 <malloc+0x5c>
    246e:	64 17       	cp	r22, r20
    2470:	75 07       	cpc	r23, r21
    2472:	18 f4       	brcc	.+6      	; 0x247a <malloc+0x62>
    2474:	ab 01       	movw	r20, r22
    2476:	e9 01       	movw	r28, r18
    2478:	df 01       	movw	r26, r30
    247a:	9f 01       	movw	r18, r30
    247c:	72 81       	ldd	r23, Z+2	; 0x02
    247e:	63 81       	ldd	r22, Z+3	; 0x03
    2480:	e7 2f       	mov	r30, r23
    2482:	f6 2f       	mov	r31, r22
    2484:	30 97       	sbiw	r30, 0x00	; 0
    2486:	c1 f6       	brne	.-80     	; 0x2438 <malloc+0x20>
    2488:	41 15       	cp	r20, r1
    248a:	51 05       	cpc	r21, r1
    248c:	01 f1       	breq	.+64     	; 0x24ce <malloc+0xb6>
    248e:	48 1b       	sub	r20, r24
    2490:	59 0b       	sbc	r21, r25
    2492:	44 30       	cpi	r20, 0x04	; 4
    2494:	51 05       	cpc	r21, r1
    2496:	80 f4       	brcc	.+32     	; 0x24b8 <malloc+0xa0>
    2498:	12 96       	adiw	r26, 0x02	; 2
    249a:	8d 91       	ld	r24, X+
    249c:	9c 91       	ld	r25, X
    249e:	13 97       	sbiw	r26, 0x03	; 3
    24a0:	20 97       	sbiw	r28, 0x00	; 0
    24a2:	19 f0       	breq	.+6      	; 0x24aa <malloc+0x92>
    24a4:	9b 83       	std	Y+3, r25	; 0x03
    24a6:	8a 83       	std	Y+2, r24	; 0x02
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <malloc+0x9a>
    24aa:	90 93 b0 05 	sts	0x05B0, r25
    24ae:	80 93 af 05 	sts	0x05AF, r24
    24b2:	fd 01       	movw	r30, r26
    24b4:	32 96       	adiw	r30, 0x02	; 2
    24b6:	46 c0       	rjmp	.+140    	; 0x2544 <malloc+0x12c>
    24b8:	fd 01       	movw	r30, r26
    24ba:	e4 0f       	add	r30, r20
    24bc:	f5 1f       	adc	r31, r21
    24be:	81 93       	st	Z+, r24
    24c0:	91 93       	st	Z+, r25
    24c2:	42 50       	subi	r20, 0x02	; 2
    24c4:	50 40       	sbci	r21, 0x00	; 0
    24c6:	11 96       	adiw	r26, 0x01	; 1
    24c8:	5c 93       	st	X, r21
    24ca:	4e 93       	st	-X, r20
    24cc:	3b c0       	rjmp	.+118    	; 0x2544 <malloc+0x12c>
    24ce:	20 91 ad 05 	lds	r18, 0x05AD
    24d2:	30 91 ae 05 	lds	r19, 0x05AE
    24d6:	21 15       	cp	r18, r1
    24d8:	31 05       	cpc	r19, r1
    24da:	41 f4       	brne	.+16     	; 0x24ec <malloc+0xd4>
    24dc:	20 91 63 02 	lds	r18, 0x0263
    24e0:	30 91 64 02 	lds	r19, 0x0264
    24e4:	30 93 ae 05 	sts	0x05AE, r19
    24e8:	20 93 ad 05 	sts	0x05AD, r18
    24ec:	20 91 65 02 	lds	r18, 0x0265
    24f0:	30 91 66 02 	lds	r19, 0x0266
    24f4:	21 15       	cp	r18, r1
    24f6:	31 05       	cpc	r19, r1
    24f8:	41 f4       	brne	.+16     	; 0x250a <malloc+0xf2>
    24fa:	2d b7       	in	r18, 0x3d	; 61
    24fc:	3e b7       	in	r19, 0x3e	; 62
    24fe:	40 91 61 02 	lds	r20, 0x0261
    2502:	50 91 62 02 	lds	r21, 0x0262
    2506:	24 1b       	sub	r18, r20
    2508:	35 0b       	sbc	r19, r21
    250a:	e0 91 ad 05 	lds	r30, 0x05AD
    250e:	f0 91 ae 05 	lds	r31, 0x05AE
    2512:	e2 17       	cp	r30, r18
    2514:	f3 07       	cpc	r31, r19
    2516:	a0 f4       	brcc	.+40     	; 0x2540 <malloc+0x128>
    2518:	2e 1b       	sub	r18, r30
    251a:	3f 0b       	sbc	r19, r31
    251c:	28 17       	cp	r18, r24
    251e:	39 07       	cpc	r19, r25
    2520:	78 f0       	brcs	.+30     	; 0x2540 <malloc+0x128>
    2522:	ac 01       	movw	r20, r24
    2524:	4e 5f       	subi	r20, 0xFE	; 254
    2526:	5f 4f       	sbci	r21, 0xFF	; 255
    2528:	24 17       	cp	r18, r20
    252a:	35 07       	cpc	r19, r21
    252c:	48 f0       	brcs	.+18     	; 0x2540 <malloc+0x128>
    252e:	4e 0f       	add	r20, r30
    2530:	5f 1f       	adc	r21, r31
    2532:	50 93 ae 05 	sts	0x05AE, r21
    2536:	40 93 ad 05 	sts	0x05AD, r20
    253a:	81 93       	st	Z+, r24
    253c:	91 93       	st	Z+, r25
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <malloc+0x12c>
    2540:	e0 e0       	ldi	r30, 0x00	; 0
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	cf 01       	movw	r24, r30
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	08 95       	ret

0000254c <free>:
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	09 f4       	brne	.+2      	; 0x2556 <free+0xa>
    2554:	91 c0       	rjmp	.+290    	; 0x2678 <free+0x12c>
    2556:	fc 01       	movw	r30, r24
    2558:	32 97       	sbiw	r30, 0x02	; 2
    255a:	13 82       	std	Z+3, r1	; 0x03
    255c:	12 82       	std	Z+2, r1	; 0x02
    255e:	60 91 af 05 	lds	r22, 0x05AF
    2562:	70 91 b0 05 	lds	r23, 0x05B0
    2566:	61 15       	cp	r22, r1
    2568:	71 05       	cpc	r23, r1
    256a:	81 f4       	brne	.+32     	; 0x258c <free+0x40>
    256c:	20 81       	ld	r18, Z
    256e:	31 81       	ldd	r19, Z+1	; 0x01
    2570:	28 0f       	add	r18, r24
    2572:	39 1f       	adc	r19, r25
    2574:	80 91 ad 05 	lds	r24, 0x05AD
    2578:	90 91 ae 05 	lds	r25, 0x05AE
    257c:	82 17       	cp	r24, r18
    257e:	93 07       	cpc	r25, r19
    2580:	99 f5       	brne	.+102    	; 0x25e8 <free+0x9c>
    2582:	f0 93 ae 05 	sts	0x05AE, r31
    2586:	e0 93 ad 05 	sts	0x05AD, r30
    258a:	76 c0       	rjmp	.+236    	; 0x2678 <free+0x12c>
    258c:	db 01       	movw	r26, r22
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <free+0x4c>
    2594:	cd 01       	movw	r24, r26
    2596:	d9 01       	movw	r26, r18
    2598:	ae 17       	cp	r26, r30
    259a:	bf 07       	cpc	r27, r31
    259c:	48 f4       	brcc	.+18     	; 0x25b0 <free+0x64>
    259e:	12 96       	adiw	r26, 0x02	; 2
    25a0:	2d 91       	ld	r18, X+
    25a2:	3c 91       	ld	r19, X
    25a4:	13 97       	sbiw	r26, 0x03	; 3
    25a6:	21 15       	cp	r18, r1
    25a8:	31 05       	cpc	r19, r1
    25aa:	a1 f7       	brne	.-24     	; 0x2594 <free+0x48>
    25ac:	cd 01       	movw	r24, r26
    25ae:	21 c0       	rjmp	.+66     	; 0x25f2 <free+0xa6>
    25b0:	b3 83       	std	Z+3, r27	; 0x03
    25b2:	a2 83       	std	Z+2, r26	; 0x02
    25b4:	ef 01       	movw	r28, r30
    25b6:	49 91       	ld	r20, Y+
    25b8:	59 91       	ld	r21, Y+
    25ba:	9e 01       	movw	r18, r28
    25bc:	24 0f       	add	r18, r20
    25be:	35 1f       	adc	r19, r21
    25c0:	a2 17       	cp	r26, r18
    25c2:	b3 07       	cpc	r27, r19
    25c4:	79 f4       	brne	.+30     	; 0x25e4 <free+0x98>
    25c6:	2d 91       	ld	r18, X+
    25c8:	3c 91       	ld	r19, X
    25ca:	11 97       	sbiw	r26, 0x01	; 1
    25cc:	24 0f       	add	r18, r20
    25ce:	35 1f       	adc	r19, r21
    25d0:	2e 5f       	subi	r18, 0xFE	; 254
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	31 83       	std	Z+1, r19	; 0x01
    25d6:	20 83       	st	Z, r18
    25d8:	12 96       	adiw	r26, 0x02	; 2
    25da:	2d 91       	ld	r18, X+
    25dc:	3c 91       	ld	r19, X
    25de:	13 97       	sbiw	r26, 0x03	; 3
    25e0:	33 83       	std	Z+3, r19	; 0x03
    25e2:	22 83       	std	Z+2, r18	; 0x02
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	29 f4       	brne	.+10     	; 0x25f2 <free+0xa6>
    25e8:	f0 93 b0 05 	sts	0x05B0, r31
    25ec:	e0 93 af 05 	sts	0x05AF, r30
    25f0:	43 c0       	rjmp	.+134    	; 0x2678 <free+0x12c>
    25f2:	dc 01       	movw	r26, r24
    25f4:	13 96       	adiw	r26, 0x03	; 3
    25f6:	fc 93       	st	X, r31
    25f8:	ee 93       	st	-X, r30
    25fa:	12 97       	sbiw	r26, 0x02	; 2
    25fc:	4d 91       	ld	r20, X+
    25fe:	5d 91       	ld	r21, X+
    2600:	a4 0f       	add	r26, r20
    2602:	b5 1f       	adc	r27, r21
    2604:	ea 17       	cp	r30, r26
    2606:	fb 07       	cpc	r31, r27
    2608:	69 f4       	brne	.+26     	; 0x2624 <free+0xd8>
    260a:	20 81       	ld	r18, Z
    260c:	31 81       	ldd	r19, Z+1	; 0x01
    260e:	24 0f       	add	r18, r20
    2610:	35 1f       	adc	r19, r21
    2612:	2e 5f       	subi	r18, 0xFE	; 254
    2614:	3f 4f       	sbci	r19, 0xFF	; 255
    2616:	ec 01       	movw	r28, r24
    2618:	39 83       	std	Y+1, r19	; 0x01
    261a:	28 83       	st	Y, r18
    261c:	22 81       	ldd	r18, Z+2	; 0x02
    261e:	33 81       	ldd	r19, Z+3	; 0x03
    2620:	3b 83       	std	Y+3, r19	; 0x03
    2622:	2a 83       	std	Y+2, r18	; 0x02
    2624:	e0 e0       	ldi	r30, 0x00	; 0
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <free+0xe2>
    262a:	fb 01       	movw	r30, r22
    262c:	bc 01       	movw	r22, r24
    262e:	db 01       	movw	r26, r22
    2630:	12 96       	adiw	r26, 0x02	; 2
    2632:	8d 91       	ld	r24, X+
    2634:	9c 91       	ld	r25, X
    2636:	13 97       	sbiw	r26, 0x03	; 3
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	b9 f7       	brne	.-18     	; 0x262a <free+0xde>
    263c:	9b 01       	movw	r18, r22
    263e:	2e 5f       	subi	r18, 0xFE	; 254
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	8d 91       	ld	r24, X+
    2644:	9c 91       	ld	r25, X
    2646:	11 97       	sbiw	r26, 0x01	; 1
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	40 91 ad 05 	lds	r20, 0x05AD
    2650:	50 91 ae 05 	lds	r21, 0x05AE
    2654:	48 17       	cp	r20, r24
    2656:	59 07       	cpc	r21, r25
    2658:	79 f4       	brne	.+30     	; 0x2678 <free+0x12c>
    265a:	30 97       	sbiw	r30, 0x00	; 0
    265c:	29 f4       	brne	.+10     	; 0x2668 <free+0x11c>
    265e:	10 92 b0 05 	sts	0x05B0, r1
    2662:	10 92 af 05 	sts	0x05AF, r1
    2666:	02 c0       	rjmp	.+4      	; 0x266c <free+0x120>
    2668:	13 82       	std	Z+3, r1	; 0x03
    266a:	12 82       	std	Z+2, r1	; 0x02
    266c:	22 50       	subi	r18, 0x02	; 2
    266e:	30 40       	sbci	r19, 0x00	; 0
    2670:	30 93 ae 05 	sts	0x05AE, r19
    2674:	20 93 ad 05 	sts	0x05AD, r18
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <memcmp>:
    267e:	fb 01       	movw	r30, r22
    2680:	dc 01       	movw	r26, r24
    2682:	04 c0       	rjmp	.+8      	; 0x268c <memcmp+0xe>
    2684:	8d 91       	ld	r24, X+
    2686:	01 90       	ld	r0, Z+
    2688:	80 19       	sub	r24, r0
    268a:	21 f4       	brne	.+8      	; 0x2694 <memcmp+0x16>
    268c:	41 50       	subi	r20, 0x01	; 1
    268e:	50 40       	sbci	r21, 0x00	; 0
    2690:	c8 f7       	brcc	.-14     	; 0x2684 <memcmp+0x6>
    2692:	88 1b       	sub	r24, r24
    2694:	99 0b       	sbc	r25, r25
    2696:	08 95       	ret

00002698 <memcpy>:
    2698:	fb 01       	movw	r30, r22
    269a:	dc 01       	movw	r26, r24
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <memcpy+0xa>
    269e:	01 90       	ld	r0, Z+
    26a0:	0d 92       	st	X+, r0
    26a2:	41 50       	subi	r20, 0x01	; 1
    26a4:	50 40       	sbci	r21, 0x00	; 0
    26a6:	d8 f7       	brcc	.-10     	; 0x269e <memcpy+0x6>
    26a8:	08 95       	ret

000026aa <memset>:
    26aa:	dc 01       	movw	r26, r24
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <memset+0x6>
    26ae:	6d 93       	st	X+, r22
    26b0:	41 50       	subi	r20, 0x01	; 1
    26b2:	50 40       	sbci	r21, 0x00	; 0
    26b4:	e0 f7       	brcc	.-8      	; 0x26ae <memset+0x4>
    26b6:	08 95       	ret

000026b8 <_exit>:
    26b8:	f8 94       	cli

000026ba <__stop_program>:
    26ba:	ff cf       	rjmp	.-2      	; 0x26ba <__stop_program>
