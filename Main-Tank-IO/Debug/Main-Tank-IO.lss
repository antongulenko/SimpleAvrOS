
Main-Tank-IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  00001d60  00001df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a7  0080024a  0080024a  00001f3e  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000318  00000000  00000000  00002783  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000ec0  00000000  00000000  00002a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c3d  00000000  00000000  0000395b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e83  00000000  00000000  00007598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004aee  00000000  00000000  0000841b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000770  00000000  00000000  0000cf0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000015d8  00000000  00000000  0000d67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c96  00000000  00000000  0000ec54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004fffe  00000000  00000000  000108ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000005bd  00000000  00000000  000608e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a0  00000000  00000000  00060ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_26>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_32>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e6       	ldi	r30, 0x60	; 96
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 34       	cpi	r26, 0x4A	; 74
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	aa e4       	ldi	r26, 0x4A	; 74
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3f       	cpi	r26, 0xF1	; 241
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
	MCUSR = 0;
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init_ports_m1284P>

000000ca <init_tank_leds_kernel_init>:
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
}
KERNEL_INIT(init_tank_leds)
      ca:	0e 94 26 02 	call	0x44c	; 0x44c <init_tank_leds>

000000ce <init_tank_buttons_kernel_init>:
	INIT_BUTTON(Button2, PinA2)
	INIT_BUTTON(Button3, PinA3)
	INIT_BUTTON(Button4, PinA4)
	INIT_BUTTON(ButtonSwitch, PinA5)
}
KERNEL_INIT(init_tank_buttons)
      ce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <init_tank_buttons>

000000d2 <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      d2:	0e 94 0b 03 	call	0x616	; 0x616 <init_twi>

000000d6 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      d6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <init_timer_m1284P>

000000da <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      da:	0e 94 c5 06 	call	0xd8a	; 0xd8a <init_idle_scheduler>

000000de <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 2500);
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      de:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <init_scheduler>

000000e2 <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      e2:	0e 94 83 07 	call	0xf06	; 0xf06 <init_kernel>
      e6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <main>
      ea:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <MainProcessEnd>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <twi_stop>:
#define twi_send(data) TWDR = data; twi_continue()
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
      f2:	85 ed       	ldi	r24, 0xD5	; 213
      f4:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
      f8:	80 91 46 01 	lds	r24, 0x0146
      fc:	90 91 47 01 	lds	r25, 0x0147
     100:	a0 91 48 01 	lds	r26, 0x0148
     104:	b0 91 49 01 	lds	r27, 0x0149
     108:	80 93 53 03 	sts	0x0353, r24
     10c:	90 93 54 03 	sts	0x0354, r25
     110:	a0 93 55 03 	sts	0x0355, r26
     114:	b0 93 56 03 	sts	0x0356, r27
	#else
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
     118:	10 92 58 03 	sts	0x0358, r1
     11c:	10 92 57 03 	sts	0x0357, r1
}
     120:	08 95       	ret

00000122 <twi_end>:
	}
}

static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
     122:	85 ec       	ldi	r24, 0xC5	; 197
     124:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     128:	80 91 46 01 	lds	r24, 0x0146
     12c:	90 91 47 01 	lds	r25, 0x0147
     130:	a0 91 48 01 	lds	r26, 0x0148
     134:	b0 91 49 01 	lds	r27, 0x0149
     138:	80 93 53 03 	sts	0x0353, r24
     13c:	90 93 54 03 	sts	0x0354, r25
     140:	a0 93 55 03 	sts	0x0355, r26
     144:	b0 93 56 03 	sts	0x0356, r27
	#else
		twi_base;
	#endif
	twi_running = FALSE;
     148:	10 92 58 03 	sts	0x0358, r1
     14c:	10 92 57 03 	sts	0x0357, r1
}
     150:	08 95       	ret

00000152 <twi_receive_byte>:
	next_twi_operation();
}

static inline void twi_receive_byte() {
	// received data-byte. Read into receive-twi_buffer, acknowledge, if more bytes expected.
	twi_buffer.data[alreadyHandled++] = TWDR;
     152:	20 91 05 03 	lds	r18, 0x0305
     156:	30 91 06 03 	lds	r19, 0x0306
     15a:	80 91 bb 00 	lds	r24, 0x00BB
     15e:	e0 91 53 03 	lds	r30, 0x0353
     162:	f0 91 54 03 	lds	r31, 0x0354
     166:	e2 0f       	add	r30, r18
     168:	f3 1f       	adc	r31, r19
     16a:	80 83       	st	Z, r24
     16c:	2f 5f       	subi	r18, 0xFF	; 255
     16e:	3f 4f       	sbci	r19, 0xFF	; 255
     170:	30 93 06 03 	sts	0x0306, r19
     174:	20 93 05 03 	sts	0x0305, r18
	if (alreadyHandled < twi_buffer.size - 1) {
     178:	80 91 55 03 	lds	r24, 0x0355
     17c:	90 91 56 03 	lds	r25, 0x0356
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	28 17       	cp	r18, r24
     184:	39 07       	cpc	r19, r25
     186:	10 f4       	brcc	.+4      	; 0x18c <twi_receive_byte+0x3a>
		twi_ack(); // Still more than one byte to go.
     188:	85 ec       	ldi	r24, 0xC5	; 197
     18a:	01 c0       	rjmp	.+2      	; 0x18e <twi_receive_byte+0x3c>
	} else {
		twi_continue(); // Want to receive one more byte. Next byte will get NOT ACK.
     18c:	85 e8       	ldi	r24, 0x85	; 133
     18e:	80 93 bc 00 	sts	0x00BC, r24
     192:	08 95       	ret

00000194 <twi_init_receive>:
	}
}

static inline void twi_init_receive() {
	if (twi_buffer.size > 0) {
     194:	80 91 55 03 	lds	r24, 0x0355
     198:	90 91 56 03 	lds	r25, 0x0356
     19c:	00 97       	sbiw	r24, 0x00	; 0
     19e:	11 f0       	breq	.+4      	; 0x1a4 <twi_init_receive+0x10>
		twi_ack(); // Acknowledge, if want to receive at least one byte
     1a0:	85 ec       	ldi	r24, 0xC5	; 197
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <twi_init_receive+0x12>
	} else {
		twi_continue();
     1a4:	85 e8       	ldi	r24, 0x85	; 133
     1a6:	80 93 bc 00 	sts	0x00BC, r24
     1aa:	08 95       	ret

000001ac <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
     1ac:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <processor_loop_idle>
}
     1b0:	08 95       	ret

000001b2 <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     1b2:	84 b7       	in	r24, 0x34	; 52
     1b4:	80 93 4c 02 	sts	0x024C, r24
	MCUSR = 0;
     1b8:	14 be       	out	0x34, r1	; 52
}
     1ba:	08 95       	ret

000001bc <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     1bc:	80 91 4c 02 	lds	r24, 0x024C
     1c0:	08 95       	ret

000001c2 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1c2:	a1 e4       	ldi	r26, 0x41	; 65
     1c4:	b3 e0       	ldi	r27, 0x03	; 3
     1c6:	ee e2       	ldi	r30, 0x2E	; 46
     1c8:	f2 e0       	ldi	r31, 0x02	; 2
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	01 90       	ld	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	e1 f7       	brne	.-8      	; 0x1cc <init_ports_m1284P+0xa>
     1d4:	ae e3       	ldi	r26, 0x3E	; 62
     1d6:	b3 e0       	ldi	r27, 0x03	; 3
     1d8:	eb e2       	ldi	r30, 0x2B	; 43
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	01 90       	ld	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	81 50       	subi	r24, 0x01	; 1
     1e4:	e1 f7       	brne	.-8      	; 0x1de <init_ports_m1284P+0x1c>
     1e6:	a8 eb       	ldi	r26, 0xB8	; 184
     1e8:	b3 e0       	ldi	r27, 0x03	; 3
     1ea:	e8 e2       	ldi	r30, 0x28	; 40
     1ec:	f2 e0       	ldi	r31, 0x02	; 2
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	01 90       	ld	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	81 50       	subi	r24, 0x01	; 1
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <init_ports_m1284P+0x2e>
     1f8:	ad ef       	ldi	r26, 0xFD	; 253
     1fa:	b2 e0       	ldi	r27, 0x02	; 2
     1fc:	e5 e2       	ldi	r30, 0x25	; 37
     1fe:	f2 e0       	ldi	r31, 0x02	; 2
     200:	83 e0       	ldi	r24, 0x03	; 3
     202:	01 90       	ld	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	81 50       	subi	r24, 0x01	; 1
     208:	e1 f7       	brne	.-8      	; 0x202 <init_ports_m1284P+0x40>
     20a:	ab e1       	ldi	r26, 0x1B	; 27
     20c:	b3 e0       	ldi	r27, 0x03	; 3
     20e:	e2 e2       	ldi	r30, 0x22	; 34
     210:	f2 e0       	ldi	r31, 0x02	; 2
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	01 90       	ld	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	81 50       	subi	r24, 0x01	; 1
     21a:	e1 f7       	brne	.-8      	; 0x214 <init_ports_m1284P+0x52>
     21c:	a9 e8       	ldi	r26, 0x89	; 137
     21e:	b2 e0       	ldi	r27, 0x02	; 2
     220:	ef e1       	ldi	r30, 0x1F	; 31
     222:	f2 e0       	ldi	r31, 0x02	; 2
     224:	83 e0       	ldi	r24, 0x03	; 3
     226:	01 90       	ld	r0, Z+
     228:	0d 92       	st	X+, r0
     22a:	81 50       	subi	r24, 0x01	; 1
     22c:	e1 f7       	brne	.-8      	; 0x226 <init_ports_m1284P+0x64>
     22e:	a8 ef       	ldi	r26, 0xF8	; 248
     230:	b2 e0       	ldi	r27, 0x02	; 2
     232:	ec e1       	ldi	r30, 0x1C	; 28
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	01 90       	ld	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	81 50       	subi	r24, 0x01	; 1
     23e:	e1 f7       	brne	.-8      	; 0x238 <init_ports_m1284P+0x76>
     240:	a6 e9       	ldi	r26, 0x96	; 150
     242:	b3 e0       	ldi	r27, 0x03	; 3
     244:	e9 e1       	ldi	r30, 0x19	; 25
     246:	f2 e0       	ldi	r31, 0x02	; 2
     248:	83 e0       	ldi	r24, 0x03	; 3
     24a:	01 90       	ld	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	81 50       	subi	r24, 0x01	; 1
     250:	e1 f7       	brne	.-8      	; 0x24a <init_ports_m1284P+0x88>
     252:	a0 e5       	ldi	r26, 0x50	; 80
     254:	b3 e0       	ldi	r27, 0x03	; 3
     256:	e6 e1       	ldi	r30, 0x16	; 22
     258:	f2 e0       	ldi	r31, 0x02	; 2
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	01 90       	ld	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	81 50       	subi	r24, 0x01	; 1
     262:	e1 f7       	brne	.-8      	; 0x25c <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     264:	a2 ec       	ldi	r26, 0xC2	; 194
     266:	b3 e0       	ldi	r27, 0x03	; 3
     268:	e0 e1       	ldi	r30, 0x10	; 16
     26a:	f2 e0       	ldi	r31, 0x02	; 2
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	01 90       	ld	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	81 50       	subi	r24, 0x01	; 1
     274:	e1 f7       	brne	.-8      	; 0x26e <init_ports_m1284P+0xac>
     276:	a4 e2       	ldi	r26, 0x24	; 36
     278:	b3 e0       	ldi	r27, 0x03	; 3
     27a:	ed e0       	ldi	r30, 0x0D	; 13
     27c:	f2 e0       	ldi	r31, 0x02	; 2
     27e:	83 e0       	ldi	r24, 0x03	; 3
     280:	01 90       	ld	r0, Z+
     282:	0d 92       	st	X+, r0
     284:	81 50       	subi	r24, 0x01	; 1
     286:	e1 f7       	brne	.-8      	; 0x280 <init_ports_m1284P+0xbe>
     288:	ad eb       	ldi	r26, 0xBD	; 189
     28a:	b3 e0       	ldi	r27, 0x03	; 3
     28c:	ea e0       	ldi	r30, 0x0A	; 10
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	01 90       	ld	r0, Z+
     294:	0d 92       	st	X+, r0
     296:	81 50       	subi	r24, 0x01	; 1
     298:	e1 f7       	brne	.-8      	; 0x292 <init_ports_m1284P+0xd0>
     29a:	ad e6       	ldi	r26, 0x6D	; 109
     29c:	b2 e0       	ldi	r27, 0x02	; 2
     29e:	e7 e0       	ldi	r30, 0x07	; 7
     2a0:	f2 e0       	ldi	r31, 0x02	; 2
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	01 90       	ld	r0, Z+
     2a6:	0d 92       	st	X+, r0
     2a8:	81 50       	subi	r24, 0x01	; 1
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <init_ports_m1284P+0xe2>
     2ac:	a9 e4       	ldi	r26, 0x49	; 73
     2ae:	b3 e0       	ldi	r27, 0x03	; 3
     2b0:	e4 e0       	ldi	r30, 0x04	; 4
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	81 50       	subi	r24, 0x01	; 1
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <init_ports_m1284P+0xf4>
     2be:	a2 e6       	ldi	r26, 0x62	; 98
     2c0:	b3 e0       	ldi	r27, 0x03	; 3
     2c2:	e1 e0       	ldi	r30, 0x01	; 1
     2c4:	f2 e0       	ldi	r31, 0x02	; 2
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	01 90       	ld	r0, Z+
     2ca:	0d 92       	st	X+, r0
     2cc:	81 50       	subi	r24, 0x01	; 1
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <init_ports_m1284P+0x106>
     2d0:	a7 ee       	ldi	r26, 0xE7	; 231
     2d2:	b2 e0       	ldi	r27, 0x02	; 2
     2d4:	ee ef       	ldi	r30, 0xFE	; 254
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	01 90       	ld	r0, Z+
     2dc:	0d 92       	st	X+, r0
     2de:	81 50       	subi	r24, 0x01	; 1
     2e0:	e1 f7       	brne	.-8      	; 0x2da <init_ports_m1284P+0x118>
     2e2:	a0 e7       	ldi	r26, 0x70	; 112
     2e4:	b2 e0       	ldi	r27, 0x02	; 2
     2e6:	eb ef       	ldi	r30, 0xFB	; 251
     2e8:	f1 e0       	ldi	r31, 0x01	; 1
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	01 90       	ld	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	81 50       	subi	r24, 0x01	; 1
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <init_ports_m1284P+0x12a>
     2f4:	a4 ee       	ldi	r26, 0xE4	; 228
     2f6:	b2 e0       	ldi	r27, 0x02	; 2
     2f8:	e8 ef       	ldi	r30, 0xF8	; 248
     2fa:	f1 e0       	ldi	r31, 0x01	; 1
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	01 90       	ld	r0, Z+
     300:	0d 92       	st	X+, r0
     302:	81 50       	subi	r24, 0x01	; 1
     304:	e1 f7       	brne	.-8      	; 0x2fe <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     306:	a1 e3       	ldi	r26, 0x31	; 49
     308:	b3 e0       	ldi	r27, 0x03	; 3
     30a:	e2 ef       	ldi	r30, 0xF2	; 242
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	86 e0       	ldi	r24, 0x06	; 6
     310:	01 90       	ld	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	81 50       	subi	r24, 0x01	; 1
     316:	e1 f7       	brne	.-8      	; 0x310 <init_ports_m1284P+0x14e>
     318:	a5 e7       	ldi	r26, 0x75	; 117
     31a:	b3 e0       	ldi	r27, 0x03	; 3
     31c:	ef ee       	ldi	r30, 0xEF	; 239
     31e:	f1 e0       	ldi	r31, 0x01	; 1
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	01 90       	ld	r0, Z+
     324:	0d 92       	st	X+, r0
     326:	81 50       	subi	r24, 0x01	; 1
     328:	e1 f7       	brne	.-8      	; 0x322 <init_ports_m1284P+0x160>
     32a:	a1 e2       	ldi	r26, 0x21	; 33
     32c:	b3 e0       	ldi	r27, 0x03	; 3
     32e:	ec ee       	ldi	r30, 0xEC	; 236
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	01 90       	ld	r0, Z+
     336:	0d 92       	st	X+, r0
     338:	81 50       	subi	r24, 0x01	; 1
     33a:	e1 f7       	brne	.-8      	; 0x334 <init_ports_m1284P+0x172>
     33c:	a9 e6       	ldi	r26, 0x69	; 105
     33e:	b3 e0       	ldi	r27, 0x03	; 3
     340:	e9 ee       	ldi	r30, 0xE9	; 233
     342:	f1 e0       	ldi	r31, 0x01	; 1
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	01 90       	ld	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	e1 f7       	brne	.-8      	; 0x346 <init_ports_m1284P+0x184>
     34e:	aa ed       	ldi	r26, 0xDA	; 218
     350:	b2 e0       	ldi	r27, 0x02	; 2
     352:	e6 ee       	ldi	r30, 0xE6	; 230
     354:	f1 e0       	ldi	r31, 0x01	; 1
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	01 90       	ld	r0, Z+
     35a:	0d 92       	st	X+, r0
     35c:	81 50       	subi	r24, 0x01	; 1
     35e:	e1 f7       	brne	.-8      	; 0x358 <init_ports_m1284P+0x196>
     360:	a6 e8       	ldi	r26, 0x86	; 134
     362:	b2 e0       	ldi	r27, 0x02	; 2
     364:	e3 ee       	ldi	r30, 0xE3	; 227
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	01 90       	ld	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	e1 f7       	brne	.-8      	; 0x36a <init_ports_m1284P+0x1a8>
     372:	ae e1       	ldi	r26, 0x1E	; 30
     374:	b3 e0       	ldi	r27, 0x03	; 3
     376:	e0 ee       	ldi	r30, 0xE0	; 224
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	01 90       	ld	r0, Z+
     37e:	0d 92       	st	X+, r0
     380:	81 50       	subi	r24, 0x01	; 1
     382:	e1 f7       	brne	.-8      	; 0x37c <init_ports_m1284P+0x1ba>
     384:	ac e0       	ldi	r26, 0x0C	; 12
     386:	b3 e0       	ldi	r27, 0x03	; 3
     388:	ed ed       	ldi	r30, 0xDD	; 221
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	01 90       	ld	r0, Z+
     390:	0d 92       	st	X+, r0
     392:	81 50       	subi	r24, 0x01	; 1
     394:	e1 f7       	brne	.-8      	; 0x38e <init_ports_m1284P+0x1cc>
     396:	af e5       	ldi	r26, 0x5F	; 95
     398:	b2 e0       	ldi	r27, 0x02	; 2
     39a:	ea ed       	ldi	r30, 0xDA	; 218
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	01 90       	ld	r0, Z+
     3a2:	0d 92       	st	X+, r0
     3a4:	81 50       	subi	r24, 0x01	; 1
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     3a8:	a2 ef       	ldi	r26, 0xF2	; 242
     3aa:	b2 e0       	ldi	r27, 0x02	; 2
     3ac:	e4 ed       	ldi	r30, 0xD4	; 212
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	86 e0       	ldi	r24, 0x06	; 6
     3b2:	01 90       	ld	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	81 50       	subi	r24, 0x01	; 1
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <init_ports_m1284P+0x1f0>
     3ba:	a1 e8       	ldi	r26, 0x81	; 129
     3bc:	b2 e0       	ldi	r27, 0x02	; 2
     3be:	e1 ed       	ldi	r30, 0xD1	; 209
     3c0:	f1 e0       	ldi	r31, 0x01	; 1
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	01 90       	ld	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	81 50       	subi	r24, 0x01	; 1
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <init_ports_m1284P+0x202>
     3cc:	af e8       	ldi	r26, 0x8F	; 143
     3ce:	b2 e0       	ldi	r27, 0x02	; 2
     3d0:	ee ec       	ldi	r30, 0xCE	; 206
     3d2:	f1 e0       	ldi	r31, 0x01	; 1
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	01 90       	ld	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	81 50       	subi	r24, 0x01	; 1
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <init_ports_m1284P+0x214>
     3de:	ae e7       	ldi	r26, 0x7E	; 126
     3e0:	b2 e0       	ldi	r27, 0x02	; 2
     3e2:	eb ec       	ldi	r30, 0xCB	; 203
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	01 90       	ld	r0, Z+
     3ea:	0d 92       	st	X+, r0
     3ec:	81 50       	subi	r24, 0x01	; 1
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <init_ports_m1284P+0x226>
     3f0:	a0 e0       	ldi	r26, 0x00	; 0
     3f2:	b3 e0       	ldi	r27, 0x03	; 3
     3f4:	e8 ec       	ldi	r30, 0xC8	; 200
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	01 90       	ld	r0, Z+
     3fc:	0d 92       	st	X+, r0
     3fe:	81 50       	subi	r24, 0x01	; 1
     400:	e1 f7       	brne	.-8      	; 0x3fa <init_ports_m1284P+0x238>
     402:	ab e8       	ldi	r26, 0x8B	; 139
     404:	b3 e0       	ldi	r27, 0x03	; 3
     406:	e5 ec       	ldi	r30, 0xC5	; 197
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	83 e0       	ldi	r24, 0x03	; 3
     40c:	01 90       	ld	r0, Z+
     40e:	0d 92       	st	X+, r0
     410:	81 50       	subi	r24, 0x01	; 1
     412:	e1 f7       	brne	.-8      	; 0x40c <init_ports_m1284P+0x24a>
     414:	ac e6       	ldi	r26, 0x6C	; 108
     416:	b3 e0       	ldi	r27, 0x03	; 3
     418:	e2 ec       	ldi	r30, 0xC2	; 194
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	01 90       	ld	r0, Z+
     420:	0d 92       	st	X+, r0
     422:	81 50       	subi	r24, 0x01	; 1
     424:	e1 f7       	brne	.-8      	; 0x41e <init_ports_m1284P+0x25c>
     426:	a5 eb       	ldi	r26, 0xB5	; 181
     428:	b3 e0       	ldi	r27, 0x03	; 3
     42a:	ef eb       	ldi	r30, 0xBF	; 191
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	01 90       	ld	r0, Z+
     432:	0d 92       	st	X+, r0
     434:	81 50       	subi	r24, 0x01	; 1
     436:	e1 f7       	brne	.-8      	; 0x430 <init_ports_m1284P+0x26e>
     438:	a8 e7       	ldi	r26, 0x78	; 120
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	ec eb       	ldi	r30, 0xBC	; 188
     43e:	f1 e0       	ldi	r31, 0x01	; 1
     440:	83 e0       	ldi	r24, 0x03	; 3
     442:	01 90       	ld	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	81 50       	subi	r24, 0x01	; 1
     448:	e1 f7       	brne	.-8      	; 0x442 <init_ports_m1284P+0x280>
}
     44a:	08 95       	ret

0000044c <init_tank_leds>:
PLed allLedsArray[] = {
				&Red1, &Red2, &Red3, &Red4, &Red5,
				&White1, &White2, &White3, &White4, &White5,
				&Yellow1, &Yellow2, &Green1, &Green2, &Green3 };

void init_tank_leds() {
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
	
	// TODO assign correct pins

	INIT_LED(White1, PinA1)
     450:	c8 eb       	ldi	r28, 0xB8	; 184
     452:	d3 e0       	ldi	r29, 0x03	; 3
     454:	d0 93 bc 03 	sts	0x03BC, r29
     458:	c0 93 bb 03 	sts	0x03BB, r28

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     45c:	ce 01       	movw	r24, r28
     45e:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(White2, PinA1)
     462:	d0 93 2e 03 	sts	0x032E, r29
     466:	c0 93 2d 03 	sts	0x032D, r28
     46a:	ce 01       	movw	r24, r28
     46c:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(White3, PinA1)
     470:	d0 93 68 03 	sts	0x0368, r29
     474:	c0 93 67 03 	sts	0x0367, r28
     478:	ce 01       	movw	r24, r28
     47a:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(White4, PinA1)
     47e:	d0 93 04 03 	sts	0x0304, r29
     482:	c0 93 03 03 	sts	0x0303, r28
     486:	ce 01       	movw	r24, r28
     488:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(White5, PinA1)
     48c:	d0 93 38 03 	sts	0x0338, r29
     490:	c0 93 37 03 	sts	0x0337, r28
     494:	ce 01       	movw	r24, r28
     496:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>

	INIT_LED(Red1, PinA1)
     49a:	d0 93 74 03 	sts	0x0374, r29
     49e:	c0 93 73 03 	sts	0x0373, r28
     4a2:	ce 01       	movw	r24, r28
     4a4:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Red2, PinA1)
     4a8:	d0 93 12 03 	sts	0x0312, r29
     4ac:	c0 93 11 03 	sts	0x0311, r28
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Red3, PinA1)
     4b6:	d0 93 6a 02 	sts	0x026A, r29
     4ba:	c0 93 69 02 	sts	0x0269, r28
     4be:	ce 01       	movw	r24, r28
     4c0:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Red4, PinA1)
     4c4:	d0 93 10 03 	sts	0x0310, r29
     4c8:	c0 93 0f 03 	sts	0x030F, r28
     4cc:	ce 01       	movw	r24, r28
     4ce:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Red5, PinA1)
     4d2:	d0 93 66 03 	sts	0x0366, r29
     4d6:	c0 93 65 03 	sts	0x0365, r28
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>

	INIT_LED(Green1, PinA1)
     4e0:	d0 93 6c 02 	sts	0x026C, r29
     4e4:	c0 93 6b 02 	sts	0x026B, r28
     4e8:	ce 01       	movw	r24, r28
     4ea:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Green2, PinA1)
     4ee:	d0 93 08 03 	sts	0x0308, r29
     4f2:	c0 93 07 03 	sts	0x0307, r28
     4f6:	ce 01       	movw	r24, r28
     4f8:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Green3, PinA1)
     4fc:	d0 93 fc 02 	sts	0x02FC, r29
     500:	c0 93 fb 02 	sts	0x02FB, r28
     504:	ce 01       	movw	r24, r28
     506:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Yellow1, PinA1)
     50a:	d0 93 4d 03 	sts	0x034D, r29
     50e:	c0 93 4c 03 	sts	0x034C, r28
     512:	ce 01       	movw	r24, r28
     514:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	INIT_LED(Yellow2, PinA1)
     518:	d0 93 30 03 	sts	0x0330, r29
     51c:	c0 93 2f 03 	sts	0x032F, r28
     520:	ce 01       	movw	r24, r28
     522:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 5)
     526:	ac e8       	ldi	r26, 0x8C	; 140
     528:	b2 e0       	ldi	r27, 0x02	; 2
     52a:	e9 eb       	ldi	r30, 0xB9	; 185
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	81 50       	subi	r24, 0x01	; 1
     536:	e1 f7       	brne	.-8      	; 0x530 <init_tank_leds+0xe4>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     538:	ab e7       	ldi	r26, 0x7B	; 123
     53a:	b2 e0       	ldi	r27, 0x02	; 2
     53c:	e6 eb       	ldi	r30, 0xB6	; 182
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	01 90       	ld	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	81 50       	subi	r24, 0x01	; 1
     548:	e1 f7       	brne	.-8      	; 0x542 <init_tank_leds+0xf6>
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
     54a:	aa e2       	ldi	r26, 0x2A	; 42
     54c:	b3 e0       	ldi	r27, 0x03	; 3
     54e:	e3 eb       	ldi	r30, 0xB3	; 179
     550:	f1 e0       	ldi	r31, 0x01	; 1
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	01 90       	ld	r0, Z+
     556:	0d 92       	st	X+, r0
     558:	81 50       	subi	r24, 0x01	; 1
     55a:	e1 f7       	brne	.-8      	; 0x554 <init_tank_leds+0x108>
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
     55c:	a7 e2       	ldi	r26, 0x27	; 39
     55e:	b3 e0       	ldi	r27, 0x03	; 3
     560:	e0 eb       	ldi	r30, 0xB0	; 176
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	81 50       	subi	r24, 0x01	; 1
     56c:	e1 f7       	brne	.-8      	; 0x566 <init_tank_leds+0x11a>
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
     56e:	a9 e0       	ldi	r26, 0x09	; 9
     570:	b3 e0       	ldi	r27, 0x03	; 3
     572:	ed ea       	ldi	r30, 0xAD	; 173
     574:	f1 e0       	ldi	r31, 0x01	; 1
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	01 90       	ld	r0, Z+
     57a:	0d 92       	st	X+, r0
     57c:	81 50       	subi	r24, 0x01	; 1
     57e:	e1 f7       	brne	.-8      	; 0x578 <init_tank_leds+0x12c>
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
     580:	a9 e3       	ldi	r26, 0x39	; 57
     582:	b3 e0       	ldi	r27, 0x03	; 3
     584:	ea ea       	ldi	r30, 0xAA	; 170
     586:	f1 e0       	ldi	r31, 0x01	; 1
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	01 90       	ld	r0, Z+
     58c:	0d 92       	st	X+, r0
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	e1 f7       	brne	.-8      	; 0x58a <init_tank_leds+0x13e>
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <initButton>:
#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
	setPinInput(button->pin);
     598:	fc 01       	movw	r30, r24
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
}
     5a2:	08 95       	ret

000005a4 <initInterruptButton>:

void initInterruptButton(PInterruptButton button) {
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
	enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     5aa:	8a 81       	ldd	r24, Y+2	; 0x02
     5ac:	0e 94 2d 09 	call	0x125a	; 0x125a <enablePinChangeInterrupt>
	setPinInput(button->button->pin);
     5b0:	e8 81       	ld	r30, Y
     5b2:	f9 81       	ldd	r31, Y+1	; 0x01
     5b4:	80 81       	ld	r24, Z
     5b6:	91 81       	ldd	r25, Z+1	; 0x01
     5b8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
}
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <init_tank_buttons>:

void init_tank_buttons() {
	
	// TODO set pins correctly

	INIT_BUTTON(Button1, PinA1)
     5c2:	88 eb       	ldi	r24, 0xB8	; 184
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	90 93 48 03 	sts	0x0348, r25
     5ca:	80 93 47 03 	sts	0x0347, r24
#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
	setPinInput(button->pin);
     5ce:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
	INIT_BUTTON(Button2, PinA2)
     5d2:	8d ef       	ldi	r24, 0xFD	; 253
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	90 93 85 02 	sts	0x0285, r25
     5da:	80 93 84 02 	sts	0x0284, r24
     5de:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
	INIT_BUTTON(Button3, PinA3)
     5e2:	8b e1       	ldi	r24, 0x1B	; 27
     5e4:	93 e0       	ldi	r25, 0x03	; 3
     5e6:	90 93 c1 03 	sts	0x03C1, r25
     5ea:	80 93 c0 03 	sts	0x03C0, r24
     5ee:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
	INIT_BUTTON(Button4, PinA4)
     5f2:	89 e8       	ldi	r24, 0x89	; 137
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	90 93 70 03 	sts	0x0370, r25
     5fa:	80 93 6f 03 	sts	0x036F, r24
     5fe:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
	INIT_BUTTON(ButtonSwitch, PinA5)
     602:	88 ef       	ldi	r24, 0xF8	; 248
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	90 93 3d 03 	sts	0x033D, r25
     60a:	80 93 3c 03 	sts	0x033C, r24
     60e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <setPinInput>
}
     612:	08 95       	ret

00000614 <twi_unexpectedCondition>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() { }
     614:	08 95       	ret

00000616 <init_twi>:
TWIError error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     616:	85 e0       	ldi	r24, 0x05	; 5
     618:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     622:	81 e1       	ldi	r24, 0x11	; 17
     624:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     628:	10 92 b9 00 	sts	0x00B9, r1
	// TODO uncovered: TWAMR (slave address mask register)
	#ifdef TWI_Slave
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	80 93 ba 00 	sts	0x00BA, r24
	#endif
}
     632:	08 95       	ret

00000634 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	27 97       	sbiw	r28, 0x07	; 7
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
     648:	ae 01       	movw	r20, r28
     64a:	4f 5f       	subi	r20, 0xFF	; 255
     64c:	5f 4f       	sbci	r21, 0xFF	; 255
     64e:	80 91 4e 03 	lds	r24, 0x034E
     652:	90 91 4f 03 	lds	r25, 0x034F
     656:	fc 01       	movw	r30, r24
     658:	33 e0       	ldi	r19, 0x03	; 3
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	3a 95       	dec	r19
     660:	e1 f7       	brne	.-8      	; 0x65a <next_twi_operation+0x26>
     662:	e8 1b       	sub	r30, r24
     664:	f9 0b       	sbc	r31, r25
     666:	da 01       	movw	r26, r20
     668:	e0 56       	subi	r30, 0x60	; 96
     66a:	fc 4f       	sbci	r31, 0xFC	; 252
     66c:	27 e0       	ldi	r18, 0x07	; 7
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	21 50       	subi	r18, 0x01	; 1
     674:	e1 f7       	brne	.-8      	; 0x66e <next_twi_operation+0x3a>
     676:	fc 01       	movw	r30, r24
     678:	23 e0       	ldi	r18, 0x03	; 3
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	2a 95       	dec	r18
     680:	e1 f7       	brne	.-8      	; 0x67a <next_twi_operation+0x46>
     682:	e8 1b       	sub	r30, r24
     684:	f9 0b       	sbc	r31, r25
     686:	e0 56       	subi	r30, 0x60	; 96
     688:	fc 4f       	sbci	r31, 0xFC	; 252
     68a:	64 81       	ldd	r22, Z+4	; 0x04
     68c:	25 81       	ldd	r18, Z+5	; 0x05
     68e:	36 81       	ldd	r19, Z+6	; 0x06
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	90 93 4f 03 	sts	0x034F, r25
     696:	80 93 4e 03 	sts	0x034E, r24
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	91 05       	cpc	r25, r1
     69e:	ec f4       	brge	.+58     	; 0x6da <next_twi_operation+0xa6>
     6a0:	21 15       	cp	r18, r1
     6a2:	31 05       	cpc	r19, r1
     6a4:	a1 f2       	breq	.-88     	; 0x64e <next_twi_operation+0x1a>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	if (current.operationMode == TWI_Send) {
     6a6:	22 30       	cpi	r18, 0x02	; 2
     6a8:	31 05       	cpc	r19, r1
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <next_twi_operation+0x80>
		twi_address.address = current.device.address & ~_BV(TW_READ);
     6ac:	86 2f       	mov	r24, r22
     6ae:	8d 7f       	andi	r24, 0xFD	; 253
     6b0:	80 93 5e 02 	sts	0x025E, r24
	} else if (current.operationMode == TWI_Send) {
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
     6b4:	10 92 06 03 	sts	0x0306, r1
     6b8:	10 92 05 03 	sts	0x0305, r1
	twi_buffer = current.buffer;
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	ab 81       	ldd	r26, Y+3	; 0x03
     6c2:	bc 81       	ldd	r27, Y+4	; 0x04
     6c4:	80 93 53 03 	sts	0x0353, r24
     6c8:	90 93 54 03 	sts	0x0354, r25
     6cc:	a0 93 55 03 	sts	0x0355, r26
     6d0:	b0 93 56 03 	sts	0x0356, r27
	return TRUE;
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <next_twi_operation+0xaa>
BOOL next_twi_operation() {
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     6de:	c9 01       	movw	r24, r18
     6e0:	27 96       	adiw	r28, 0x07	; 7
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	cf 91       	pop	r28
     6ee:	df 91       	pop	r29
     6f0:	08 95       	ret

000006f2 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (nextTwiOperation >= NUM_TWI_OPERATIONS || !next_twi_operation()) {
     6f2:	80 91 4e 03 	lds	r24, 0x034E
     6f6:	90 91 4f 03 	lds	r25, 0x034F
     6fa:	83 30       	cpi	r24, 0x03	; 3
     6fc:	91 05       	cpc	r25, r1
     6fe:	24 f4       	brge	.+8      	; 0x708 <twi_stop_or_next+0x16>
     700:	0e 94 1a 03 	call	0x634	; 0x634 <next_twi_operation>
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	11 f4       	brne	.+4      	; 0x70c <twi_stop_or_next+0x1a>
		twi_stop();
     708:	0e 94 79 00 	call	0xf2	; 0xf2 <twi_stop>
     70c:	08 95       	ret

0000070e <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	error = TWI_No_Error;
     70e:	10 92 61 03 	sts	0x0361, r1
     712:	10 92 60 03 	sts	0x0360, r1
	twi_running = TRUE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	90 93 58 03 	sts	0x0358, r25
     71e:	80 93 57 03 	sts	0x0357, r24
	nextTwiOperation = 0;
     722:	10 92 4f 03 	sts	0x034F, r1
     726:	10 92 4e 03 	sts	0x034E, r1
	next_twi_operation();
     72a:	0e 94 1a 03 	call	0x634	; 0x634 <next_twi_operation>
}
     72e:	08 95       	ret

00000730 <__vector_26>:
	} else {
		twi_continue();
	}
}

ISR(TWI_vect) {
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	0b b6       	in	r0, 0x3b	; 59
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	2f 93       	push	r18
     740:	3f 93       	push	r19
     742:	4f 93       	push	r20
     744:	5f 93       	push	r21
     746:	6f 93       	push	r22
     748:	7f 93       	push	r23
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
     752:	ef 93       	push	r30
     754:	ff 93       	push	r31
	switch(TW_STATUS) {
     756:	80 91 b9 00 	lds	r24, 0x00B9
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	88 7f       	andi	r24, 0xF8	; 248
     75e:	90 70       	andi	r25, 0x00	; 0
     760:	88 36       	cpi	r24, 0x68	; 104
     762:	91 05       	cpc	r25, r1
     764:	09 f4       	brne	.+2      	; 0x768 <__vector_26+0x38>
     766:	f5 c0       	rjmp	.+490    	; 0x952 <__vector_26+0x222>
     768:	89 36       	cpi	r24, 0x69	; 105
     76a:	91 05       	cpc	r25, r1
     76c:	ec f5       	brge	.+122    	; 0x7e8 <__vector_26+0xb8>
     76e:	80 33       	cpi	r24, 0x30	; 48
     770:	91 05       	cpc	r25, r1
     772:	09 f4       	brne	.+2      	; 0x776 <__vector_26+0x46>
     774:	9b c0       	rjmp	.+310    	; 0x8ac <__vector_26+0x17c>
     776:	81 33       	cpi	r24, 0x31	; 49
     778:	91 05       	cpc	r25, r1
     77a:	cc f4       	brge	.+50     	; 0x7ae <__vector_26+0x7e>
     77c:	88 31       	cpi	r24, 0x18	; 24
     77e:	91 05       	cpc	r25, r1
     780:	09 f4       	brne	.+2      	; 0x784 <__vector_26+0x54>
     782:	77 c0       	rjmp	.+238    	; 0x872 <__vector_26+0x142>
     784:	89 31       	cpi	r24, 0x19	; 25
     786:	91 05       	cpc	r25, r1
     788:	4c f4       	brge	.+18     	; 0x79c <__vector_26+0x6c>
     78a:	88 30       	cpi	r24, 0x08	; 8
     78c:	91 05       	cpc	r25, r1
     78e:	09 f4       	brne	.+2      	; 0x792 <__vector_26+0x62>
     790:	68 c0       	rjmp	.+208    	; 0x862 <__vector_26+0x132>
     792:	80 31       	cpi	r24, 0x10	; 16
     794:	91 05       	cpc	r25, r1
     796:	09 f0       	breq	.+2      	; 0x79a <__vector_26+0x6a>
     798:	eb c0       	rjmp	.+470    	; 0x970 <__vector_26+0x240>
     79a:	63 c0       	rjmp	.+198    	; 0x862 <__vector_26+0x132>
     79c:	80 32       	cpi	r24, 0x20	; 32
     79e:	91 05       	cpc	r25, r1
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <__vector_26+0x74>
     7a2:	8d c0       	rjmp	.+282    	; 0x8be <__vector_26+0x18e>
     7a4:	88 32       	cpi	r24, 0x28	; 40
     7a6:	91 05       	cpc	r25, r1
     7a8:	09 f0       	breq	.+2      	; 0x7ac <__vector_26+0x7c>
     7aa:	e2 c0       	rjmp	.+452    	; 0x970 <__vector_26+0x240>
     7ac:	62 c0       	rjmp	.+196    	; 0x872 <__vector_26+0x142>
     7ae:	88 34       	cpi	r24, 0x48	; 72
     7b0:	91 05       	cpc	r25, r1
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <__vector_26+0x86>
     7b4:	84 c0       	rjmp	.+264    	; 0x8be <__vector_26+0x18e>
     7b6:	89 34       	cpi	r24, 0x49	; 73
     7b8:	91 05       	cpc	r25, r1
     7ba:	4c f4       	brge	.+18     	; 0x7ce <__vector_26+0x9e>
     7bc:	88 33       	cpi	r24, 0x38	; 56
     7be:	91 05       	cpc	r25, r1
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <__vector_26+0x94>
     7c2:	54 c0       	rjmp	.+168    	; 0x86c <__vector_26+0x13c>
     7c4:	80 34       	cpi	r24, 0x40	; 64
     7c6:	91 05       	cpc	r25, r1
     7c8:	09 f0       	breq	.+2      	; 0x7cc <__vector_26+0x9c>
     7ca:	d2 c0       	rjmp	.+420    	; 0x970 <__vector_26+0x240>
     7cc:	c2 c0       	rjmp	.+388    	; 0x952 <__vector_26+0x222>
     7ce:	88 35       	cpi	r24, 0x58	; 88
     7d0:	91 05       	cpc	r25, r1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <__vector_26+0xa6>
     7d4:	77 c0       	rjmp	.+238    	; 0x8c4 <__vector_26+0x194>
     7d6:	80 36       	cpi	r24, 0x60	; 96
     7d8:	91 05       	cpc	r25, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_26+0xae>
     7dc:	ba c0       	rjmp	.+372    	; 0x952 <__vector_26+0x222>
     7de:	80 35       	cpi	r24, 0x50	; 80
     7e0:	91 05       	cpc	r25, r1
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <__vector_26+0xb6>
     7e4:	c5 c0       	rjmp	.+394    	; 0x970 <__vector_26+0x240>
     7e6:	b8 c0       	rjmp	.+368    	; 0x958 <__vector_26+0x228>
     7e8:	88 39       	cpi	r24, 0x98	; 152
     7ea:	91 05       	cpc	r25, r1
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <__vector_26+0xc0>
     7ee:	bd c0       	rjmp	.+378    	; 0x96a <__vector_26+0x23a>
     7f0:	89 39       	cpi	r24, 0x99	; 153
     7f2:	91 05       	cpc	r25, r1
     7f4:	cc f4       	brge	.+50     	; 0x828 <__vector_26+0xf8>
     7f6:	80 38       	cpi	r24, 0x80	; 128
     7f8:	91 05       	cpc	r25, r1
     7fa:	09 f4       	brne	.+2      	; 0x7fe <__vector_26+0xce>
     7fc:	ad c0       	rjmp	.+346    	; 0x958 <__vector_26+0x228>
     7fe:	81 38       	cpi	r24, 0x81	; 129
     800:	91 05       	cpc	r25, r1
     802:	4c f4       	brge	.+18     	; 0x816 <__vector_26+0xe6>
     804:	80 37       	cpi	r24, 0x70	; 112
     806:	91 05       	cpc	r25, r1
     808:	09 f4       	brne	.+2      	; 0x80c <__vector_26+0xdc>
     80a:	a3 c0       	rjmp	.+326    	; 0x952 <__vector_26+0x222>
     80c:	88 37       	cpi	r24, 0x78	; 120
     80e:	91 05       	cpc	r25, r1
     810:	09 f0       	breq	.+2      	; 0x814 <__vector_26+0xe4>
     812:	ae c0       	rjmp	.+348    	; 0x970 <__vector_26+0x240>
     814:	9e c0       	rjmp	.+316    	; 0x952 <__vector_26+0x222>
     816:	88 38       	cpi	r24, 0x88	; 136
     818:	91 05       	cpc	r25, r1
     81a:	09 f4       	brne	.+2      	; 0x81e <__vector_26+0xee>
     81c:	a6 c0       	rjmp	.+332    	; 0x96a <__vector_26+0x23a>
     81e:	80 39       	cpi	r24, 0x90	; 144
     820:	91 05       	cpc	r25, r1
     822:	09 f0       	breq	.+2      	; 0x826 <__vector_26+0xf6>
     824:	a5 c0       	rjmp	.+330    	; 0x970 <__vector_26+0x240>
     826:	98 c0       	rjmp	.+304    	; 0x958 <__vector_26+0x228>
     828:	80 3b       	cpi	r24, 0xB0	; 176
     82a:	91 05       	cpc	r25, r1
     82c:	09 f4       	brne	.+2      	; 0x830 <__vector_26+0x100>
     82e:	4d c0       	rjmp	.+154    	; 0x8ca <__vector_26+0x19a>
     830:	81 3b       	cpi	r24, 0xB1	; 177
     832:	91 05       	cpc	r25, r1
     834:	4c f4       	brge	.+18     	; 0x848 <__vector_26+0x118>
     836:	80 3a       	cpi	r24, 0xA0	; 160
     838:	91 05       	cpc	r25, r1
     83a:	09 f4       	brne	.+2      	; 0x83e <__vector_26+0x10e>
     83c:	90 c0       	rjmp	.+288    	; 0x95e <__vector_26+0x22e>
     83e:	88 3a       	cpi	r24, 0xA8	; 168
     840:	91 05       	cpc	r25, r1
     842:	09 f0       	breq	.+2      	; 0x846 <__vector_26+0x116>
     844:	95 c0       	rjmp	.+298    	; 0x970 <__vector_26+0x240>
     846:	41 c0       	rjmp	.+130    	; 0x8ca <__vector_26+0x19a>
     848:	80 3c       	cpi	r24, 0xC0	; 192
     84a:	91 05       	cpc	r25, r1
     84c:	09 f4       	brne	.+2      	; 0x850 <__vector_26+0x120>
     84e:	73 c0       	rjmp	.+230    	; 0x936 <__vector_26+0x206>
     850:	88 3c       	cpi	r24, 0xC8	; 200
     852:	91 05       	cpc	r25, r1
     854:	09 f4       	brne	.+2      	; 0x858 <__vector_26+0x128>
     856:	6c c0       	rjmp	.+216    	; 0x930 <__vector_26+0x200>
     858:	88 3b       	cpi	r24, 0xB8	; 184
     85a:	91 05       	cpc	r25, r1
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_26+0x130>
     85e:	88 c0       	rjmp	.+272    	; 0x970 <__vector_26+0x240>
     860:	3c c0       	rjmp	.+120    	; 0x8da <__vector_26+0x1aa>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     862:	80 91 5e 02 	lds	r24, 0x025E
     866:	80 93 bb 00 	sts	0x00BB, r24
     86a:	1c c0       	rjmp	.+56     	; 0x8a4 <__vector_26+0x174>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			error = TWI_Arbitration_Lost;
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	78 c0       	rjmp	.+240    	; 0x962 <__vector_26+0x232>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     872:	80 91 05 03 	lds	r24, 0x0305
     876:	90 91 06 03 	lds	r25, 0x0306
     87a:	20 91 55 03 	lds	r18, 0x0355
     87e:	30 91 56 03 	lds	r19, 0x0356
     882:	82 17       	cp	r24, r18
     884:	93 07       	cpc	r25, r19
     886:	f0 f4       	brcc	.+60     	; 0x8c4 <__vector_26+0x194>
				twi_send(twi_buffer.data[alreadyHandled++]);
     888:	e0 91 53 03 	lds	r30, 0x0353
     88c:	f0 91 54 03 	lds	r31, 0x0354
     890:	e8 0f       	add	r30, r24
     892:	f9 1f       	adc	r31, r25
     894:	20 81       	ld	r18, Z
     896:	20 93 bb 00 	sts	0x00BB, r18
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	90 93 06 03 	sts	0x0306, r25
     8a0:	80 93 05 03 	sts	0x0305, r24
     8a4:	85 e8       	ldi	r24, 0x85	; 133
     8a6:	80 93 bc 00 	sts	0x00BC, r24
     8aa:	6a c0       	rjmp	.+212    	; 0x980 <__vector_26+0x250>
		case TW_MT_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			error = TWI_Master_TooMuchDataTransmitted;
     8ac:	86 e0       	ldi	r24, 0x06	; 6
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	90 93 61 03 	sts	0x0361, r25
     8b4:	80 93 60 03 	sts	0x0360, r24
			twi_stop();
     8b8:	0e 94 79 00 	call	0xf2	; 0xf2 <twi_stop>
			break;
     8bc:	61 c0       	rjmp	.+194    	; 0x980 <__vector_26+0x250>
			break;
		case TW_MR_DATA_ACK:
			twi_receive_byte();
			break;
		case TW_MR_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	f6 cf       	rjmp	.-20     	; 0x8b0 <__vector_26+0x180>
			twi_stop();
			break;
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_stop_or_next();
     8c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <twi_stop_or_next>
			break;
     8c8:	5b c0       	rjmp	.+182    	; 0x980 <__vector_26+0x250>
#ifdef TWI_Slave
// Slave Transmitter
		case TW_ST_SLA_ACK:
		case TW_ST_ARB_LOST_SLA_ACK:
			twi_buffer = twi_handleMasterRequest();
     8ca:	10 92 53 03 	sts	0x0353, r1
     8ce:	10 92 54 03 	sts	0x0354, r1
     8d2:	10 92 55 03 	sts	0x0355, r1
     8d6:	10 92 56 03 	sts	0x0356, r1
		case TW_ST_DATA_ACK:
			if (alreadyHandled < twi_buffer.size - 1) {
     8da:	80 91 05 03 	lds	r24, 0x0305
     8de:	90 91 06 03 	lds	r25, 0x0306
     8e2:	20 91 55 03 	lds	r18, 0x0355
     8e6:	30 91 56 03 	lds	r19, 0x0356
     8ea:	21 50       	subi	r18, 0x01	; 1
     8ec:	30 40       	sbci	r19, 0x00	; 0
     8ee:	60 91 53 03 	lds	r22, 0x0353
     8f2:	70 91 54 03 	lds	r23, 0x0354
     8f6:	ac 01       	movw	r20, r24
     8f8:	4f 5f       	subi	r20, 0xFF	; 255
     8fa:	5f 4f       	sbci	r21, 0xFF	; 255
     8fc:	82 17       	cp	r24, r18
     8fe:	93 07       	cpc	r25, r19
     900:	60 f4       	brcc	.+24     	; 0x91a <__vector_26+0x1ea>
				// At least one more byte after this one.
				twi_send_ack(twi_buffer.data[alreadyHandled++]);
     902:	86 0f       	add	r24, r22
     904:	97 1f       	adc	r25, r23
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	80 93 bb 00 	sts	0x00BB, r24
     90e:	50 93 06 03 	sts	0x0306, r21
     912:	40 93 05 03 	sts	0x0305, r20
     916:	85 ec       	ldi	r24, 0xC5	; 197
     918:	c6 cf       	rjmp	.-116    	; 0x8a6 <__vector_26+0x176>
			} else {
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
     91a:	86 0f       	add	r24, r22
     91c:	97 1f       	adc	r25, r23
     91e:	fc 01       	movw	r30, r24
     920:	80 81       	ld	r24, Z
     922:	80 93 bb 00 	sts	0x00BB, r24
     926:	50 93 06 03 	sts	0x0306, r21
     92a:	40 93 05 03 	sts	0x0305, r20
     92e:	ba cf       	rjmp	.-140    	; 0x8a4 <__vector_26+0x174>
			}				
			break;
		case TW_ST_LAST_DATA:
			error = TWI_Slave_NotEnoughDataTransmitted;
     930:	87 e0       	ldi	r24, 0x07	; 7
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	16 c0       	rjmp	.+44     	; 0x962 <__vector_26+0x232>
			twi_end();
			break;
		case TW_ST_DATA_NACK:
			if (alreadyHandled < twi_buffer.size) {
     936:	20 91 05 03 	lds	r18, 0x0305
     93a:	30 91 06 03 	lds	r19, 0x0306
     93e:	80 91 55 03 	lds	r24, 0x0355
     942:	90 91 56 03 	lds	r25, 0x0356
     946:	28 17       	cp	r18, r24
     948:	39 07       	cpc	r19, r25
     94a:	78 f4       	brcc	.+30     	; 0x96a <__vector_26+0x23a>
				error = TWI_Slave_TooMuchDataTransmitted;
     94c:	88 e0       	ldi	r24, 0x08	; 8
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	08 c0       	rjmp	.+16     	; 0x962 <__vector_26+0x232>
// Slave Receiver
		case TW_SR_SLA_ACK:
		case TW_SR_ARB_LOST_SLA_ACK:
		case TW_SR_GCALL_ACK:
		case TW_SR_ARB_LOST_GCALL_ACK:
			twi_init_receive();
     952:	0e 94 ca 00 	call	0x194	; 0x194 <twi_init_receive>
			break;
     956:	14 c0       	rjmp	.+40     	; 0x980 <__vector_26+0x250>
		case TW_SR_DATA_ACK:
		case TW_SR_GCALL_DATA_ACK:
			twi_receive_byte();
     958:	0e 94 a9 00 	call	0x152	; 0x152 <twi_receive_byte>
			break;
     95c:	11 c0       	rjmp	.+34     	; 0x980 <__vector_26+0x250>
		case TW_SR_STOP:
			// Transmission ended early.
			error = TWI_Slave_NotEnoughDataReceived;	
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	90 93 61 03 	sts	0x0361, r25
     966:	80 93 60 03 	sts	0x0360, r24
		case TW_SR_DATA_NACK:
		case TW_SR_GCALL_DATA_NACK:
			// Invoke application-code before releasing the bus. The twi_buffer should be copied quickly.
			twi_handleMasterTransmission((TWIBuffer) { twi_buffer.data, alreadyHandled } );
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
     96a:	0e 94 91 00 	call	0x122	; 0x122 <twi_end>
			break;
     96e:	08 c0       	rjmp	.+16     	; 0x980 <__vector_26+0x250>
		case TW_NO_INFO:
			error = TWI_No_Info_Interrupt;
		case TW_BUS_ERROR:
			error = TWI_Bus_Error;
		default:
			error = TWI_Illegal_Status;
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 61 03 	sts	0x0361, r25
     978:	80 93 60 03 	sts	0x0360, r24
			twi_unexpectedCondition();
     97c:	0e 94 0a 03 	call	0x614	; 0x614 <twi_unexpectedCondition>
	}
}
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	bf 91       	pop	r27
     986:	af 91       	pop	r26
     988:	9f 91       	pop	r25
     98a:	8f 91       	pop	r24
     98c:	7f 91       	pop	r23
     98e:	6f 91       	pop	r22
     990:	5f 91       	pop	r21
     992:	4f 91       	pop	r20
     994:	3f 91       	pop	r19
     996:	2f 91       	pop	r18
     998:	0f 90       	pop	r0
     99a:	0b be       	out	0x3b, r0	; 59
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <twi_handleMasterRequest>:
#include <kernel/TWI/twi_raw.kernel.h>

TWIBuffer twi_handleMasterRequest() {
	TWIBuffer buf;
	return buf;
}
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	08 95       	ret

000009b0 <twi_handleMasterTransmission>:

void twi_handleMasterTransmission(TWIBuffer twi_buffer) {
	
}
     9b0:	08 95       	ret

000009b2 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     9b2:	ad ed       	ldi	r26, 0xDD	; 221
     9b4:	b2 e0       	ldi	r27, 0x02	; 2
     9b6:	e3 ea       	ldi	r30, 0xA3	; 163
     9b8:	f1 e0       	ldi	r31, 0x01	; 1
     9ba:	87 e0       	ldi	r24, 0x07	; 7
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     9c4:	a9 e9       	ldi	r26, 0x99	; 153
     9c6:	b3 e0       	ldi	r27, 0x03	; 3
     9c8:	ec e9       	ldi	r30, 0x9C	; 156
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	01 90       	ld	r0, Z+
     9d0:	0d 92       	st	X+, r0
     9d2:	81 50       	subi	r24, 0x01	; 1
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     9d6:	a9 e5       	ldi	r26, 0x59	; 89
     9d8:	b3 e0       	ldi	r27, 0x03	; 3
     9da:	e5 e9       	ldi	r30, 0x95	; 149
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	87 e0       	ldi	r24, 0x07	; 7
     9e0:	01 90       	ld	r0, Z+
     9e2:	0d 92       	st	X+, r0
     9e4:	81 50       	subi	r24, 0x01	; 1
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     9e8:	a2 e6       	ldi	r26, 0x62	; 98
     9ea:	b2 e0       	ldi	r27, 0x02	; 2
     9ec:	ee e8       	ldi	r30, 0x8E	; 142
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	87 e0       	ldi	r24, 0x07	; 7
     9f2:	01 90       	ld	r0, Z+
     9f4:	0d 92       	st	X+, r0
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     9fa:	a3 e1       	ldi	r26, 0x13	; 19
     9fc:	b3 e0       	ldi	r27, 0x03	; 3
     9fe:	e6 e8       	ldi	r30, 0x86	; 134
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	88 e0       	ldi	r24, 0x08	; 8
     a04:	01 90       	ld	r0, Z+
     a06:	0d 92       	st	X+, r0
     a08:	81 50       	subi	r24, 0x01	; 1
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     a0c:	ae e8       	ldi	r26, 0x8E	; 142
     a0e:	b3 e0       	ldi	r27, 0x03	; 3
     a10:	ee e7       	ldi	r30, 0x7E	; 126
     a12:	f1 e0       	ldi	r31, 0x01	; 1
     a14:	88 e0       	ldi	r24, 0x08	; 8
     a16:	01 90       	ld	r0, Z+
     a18:	0d 92       	st	X+, r0
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     a1e:	a3 e7       	ldi	r26, 0x73	; 115
     a20:	b2 e0       	ldi	r27, 0x02	; 2
     a22:	e6 e7       	ldi	r30, 0x76	; 118
     a24:	f1 e0       	ldi	r31, 0x01	; 1
     a26:	88 e0       	ldi	r24, 0x08	; 8
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     a30:	a3 e8       	ldi	r26, 0x83	; 131
     a32:	b3 e0       	ldi	r27, 0x03	; 3
     a34:	ee e6       	ldi	r30, 0x6E	; 110
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	88 e0       	ldi	r24, 0x08	; 8
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	e1 f7       	brne	.-8      	; 0xa3a <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     a42:	aa ee       	ldi	r26, 0xEA	; 234
     a44:	b2 e0       	ldi	r27, 0x02	; 2
     a46:	e6 e6       	ldi	r30, 0x66	; 102
     a48:	f1 e0       	ldi	r31, 0x01	; 1
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	01 90       	ld	r0, Z+
     a4e:	0d 92       	st	X+, r0
     a50:	81 50       	subi	r24, 0x01	; 1
     a52:	e1 f7       	brne	.-8      	; 0xa4c <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     a54:	ab e7       	ldi	r26, 0x7B	; 123
     a56:	b3 e0       	ldi	r27, 0x03	; 3
     a58:	ee e5       	ldi	r30, 0x5E	; 94
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	88 e0       	ldi	r24, 0x08	; 8
     a5e:	01 90       	ld	r0, Z+
     a60:	0d 92       	st	X+, r0
     a62:	81 50       	subi	r24, 0x01	; 1
     a64:	e1 f7       	brne	.-8      	; 0xa5e <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     a66:	a2 e9       	ldi	r26, 0x92	; 146
     a68:	b2 e0       	ldi	r27, 0x02	; 2
     a6a:	e6 e5       	ldi	r30, 0x56	; 86
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	01 90       	ld	r0, Z+
     a72:	0d 92       	st	X+, r0
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	e1 f7       	brne	.-8      	; 0xa70 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     a78:	a6 e5       	ldi	r26, 0x56	; 86
     a7a:	b2 e0       	ldi	r27, 0x02	; 2
     a7c:	ee e4       	ldi	r30, 0x4E	; 78
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	88 e0       	ldi	r24, 0x08	; 8
     a82:	01 90       	ld	r0, Z+
     a84:	0d 92       	st	X+, r0
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	e1 f7       	brne	.-8      	; 0xa82 <init_timer_m1284P+0xd0>
}
     a8a:	08 95       	ret

00000a8c <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	90 e4       	ldi	r25, 0x40	; 64
     a90:	20 91 4a 01 	lds	r18, 0x014A
     a94:	30 91 4b 01 	lds	r19, 0x014B
     a98:	82 1b       	sub	r24, r18
     a9a:	93 0b       	sbc	r25, r19
     a9c:	90 93 49 02 	sts	0x0249, r25
     aa0:	80 93 48 02 	sts	0x0248, r24
	__malloc_margin = 0;
     aa4:	10 92 45 02 	sts	0x0245, r1
     aa8:	10 92 44 02 	sts	0x0244, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     aac:	60 91 4d 02 	lds	r22, 0x024D
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	6e 5f       	subi	r22, 0xFE	; 254
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <calloc>
     abe:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     ac0:	00 97       	sbiw	r24, 0x00	; 0
     ac2:	19 f0       	breq	.+6      	; 0xaca <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     ac4:	11 82       	std	Z+1, r1	; 0x01
     ac6:	10 82       	st	Z, r1
     ac8:	02 c0       	rjmp	.+4      	; 0xace <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     aca:	e0 e0       	ldi	r30, 0x00	; 0
     acc:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     ace:	f0 93 4f 02 	sts	0x024F, r31
     ad2:	e0 93 4e 02 	sts	0x024E, r30
}
     ad6:	08 95       	ret

00000ad8 <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     ad8:	af 92       	push	r10
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	df 93       	push	r29
     aea:	cf 93       	push	r28
     aec:	00 d0       	rcall	.+0      	; 0xaee <createProcessBase3+0x16>
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	d8 2e       	mov	r13, r24
     af4:	c9 2e       	mov	r12, r25
     af6:	7b 01       	movw	r14, r22
     af8:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     afa:	ca 01       	movw	r24, r20
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	29 83       	std	Y+1, r18	; 0x01
     b02:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <calloc>
     b06:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     b08:	29 81       	ldd	r18, Y+1	; 0x01
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	b1 f1       	breq	.+108    	; 0xb7a <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     b0e:	a5 01       	movw	r20, r10
     b10:	41 50       	subi	r20, 0x01	; 1
     b12:	50 40       	sbci	r21, 0x00	; 0
     b14:	48 0f       	add	r20, r24
     b16:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     b18:	86 ed       	ldi	r24, 0xD6	; 214
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	fa 01       	movw	r30, r20
     b1e:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     b24:	fa 01       	movw	r30, r20
     b26:	32 97       	sbiw	r30, 0x02	; 2
     b28:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     b2a:	fa 01       	movw	r30, r20
     b2c:	33 97       	sbiw	r30, 0x03	; 3
     b2e:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     b30:	62 2f       	mov	r22, r18
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	6e 5f       	subi	r22, 0xFE	; 254
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	49 83       	std	Y+1, r20	; 0x01
     b3e:	5a 83       	std	Y+2, r21	; 0x02
     b40:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <calloc>
     b44:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     b46:	49 81       	ldd	r20, Y+1	; 0x01
     b48:	5a 81       	ldd	r21, Y+2	; 0x02
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	49 f0       	breq	.+18     	; 0xb60 <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     b4e:	ca 01       	movw	r24, r20
     b50:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     b52:	f9 01       	movw	r30, r18
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     b58:	e1 14       	cp	r14, r1
     b5a:	f1 04       	cpc	r15, r1
     b5c:	31 f4       	brne	.+12     	; 0xb6a <createProcessBase3+0x92>
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     b60:	c8 01       	movw	r24, r16
     b62:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <free>
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     b68:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     b6a:	fa 01       	movw	r30, r20
     b6c:	7e 97       	sbiw	r30, 0x1e	; 30
     b6e:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     b70:	4f 51       	subi	r20, 0x1F	; 31
     b72:	50 40       	sbci	r21, 0x00	; 0
     b74:	fa 01       	movw	r30, r20
     b76:	f0 82       	st	Z, r15
	return result;
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     b7e:	c9 01       	movw	r24, r18
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	bf 90       	pop	r11
     b96:	af 90       	pop	r10
     b98:	08 95       	ret

00000b9a <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
     b9a:	40 91 4a 01 	lds	r20, 0x014A
     b9e:	50 91 4b 01 	lds	r21, 0x014B
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	0e 94 6c 05 	call	0xad8	; 0xad8 <createProcessBase3>
}
     ba8:	08 95       	ret

00000baa <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	0e 94 cd 05 	call	0xb9a	; 0xb9a <createProcessBase2>
}
     bb2:	08 95       	ret

00000bb4 <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
	PushProcessContext()
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	0f 92       	push	r0
     bbc:	0b b6       	in	r0, 0x3b	; 59
     bbe:	0f 92       	push	r0
     bc0:	1f 92       	push	r1
     bc2:	11 24       	eor	r1, r1
     bc4:	2f 92       	push	r2
     bc6:	3f 92       	push	r3
     bc8:	4f 92       	push	r4
     bca:	5f 92       	push	r5
     bcc:	6f 92       	push	r6
     bce:	7f 92       	push	r7
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	2f 93       	push	r18
     be6:	3f 93       	push	r19
     be8:	4f 93       	push	r20
     bea:	5f 93       	push	r21
     bec:	6f 93       	push	r22
     bee:	7f 93       	push	r23
     bf0:	8f 93       	push	r24
     bf2:	9f 93       	push	r25
     bf4:	af 93       	push	r26
     bf6:	bf 93       	push	r27
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     c00:	dc 01       	movw	r26, r24
	StoreContextStack()
     c02:	0d b6       	in	r0, 0x3d	; 61
     c04:	0d 92       	st	X+, r0
     c06:	0e b6       	in	r0, 0x3e	; 62
     c08:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     c0a:	db 01       	movw	r26, r22
	RestoreContextStack()
     c0c:	0d 90       	ld	r0, X+
     c0e:	0d be       	out	0x3d, r0	; 61
     c10:	0d 90       	ld	r0, X+
     c12:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	7f 90       	pop	r7
     c46:	6f 90       	pop	r6
     c48:	5f 90       	pop	r5
     c4a:	4f 90       	pop	r4
     c4c:	3f 90       	pop	r3
     c4e:	2f 90       	pop	r2
     c50:	1f 90       	pop	r1
     c52:	0f 90       	pop	r0
     c54:	0b be       	out	0x3b, r0	; 59
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	0f 90       	pop	r0

	sei();
     c5c:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     c5e:	08 95       	ret

00000c60 <getCurrentProcess>:

inline Process getCurrentProcess() {
	return (Process) __current_process;
}
     c60:	80 91 4e 02 	lds	r24, 0x024E
     c64:	90 91 4f 02 	lds	r25, 0x024F
     c68:	08 95       	ret

00000c6a <switchProcess>:

void switchProcess(Process newProcess) {
     c6a:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     c6c:	80 91 4e 02 	lds	r24, 0x024E
     c70:	90 91 4f 02 	lds	r25, 0x024F
	__current_process = newProcess;
     c74:	70 93 4f 02 	sts	0x024F, r23
     c78:	60 93 4e 02 	sts	0x024E, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     c7c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <switchContext>
}
     c80:	08 95       	ret

00000c82 <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     c88:	2a 5f       	subi	r18, 0xFA	; 250
     c8a:	0e 94 6c 05 	call	0xad8	; 0xad8 <createProcessBase3>
     c8e:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	e9 f0       	breq	.+58     	; 0xcce <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     c94:	dc 01       	movw	r26, r24
     c96:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     c98:	80 91 4c 01 	lds	r24, 0x014C
     c9c:	90 91 4d 01 	lds	r25, 0x014D
     ca0:	95 83       	std	Z+5, r25	; 0x05
     ca2:	84 83       	std	Z+4, r24	; 0x04
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	90 93 4d 01 	sts	0x014D, r25
     caa:	80 93 4c 01 	sts	0x014C, r24
	ext->stackSize = stackSize;
     cae:	13 96       	adiw	r26, 0x03	; 3
     cb0:	dc 93       	st	X, r29
     cb2:	ce 93       	st	-X, r28
     cb4:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     cb6:	27 e2       	ldi	r18, 0x27	; 39
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	2c 1b       	sub	r18, r28
     cbc:	3d 0b       	sbc	r19, r29
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	15 96       	adiw	r26, 0x05	; 5
     cc8:	9c 93       	st	X, r25
     cca:	8e 93       	st	-X, r24
     ccc:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     cce:	cf 01       	movw	r24, r30
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
     cd6:	40 91 4a 01 	lds	r20, 0x014A
     cda:	50 91 4b 01 	lds	r21, 0x014B
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	0e 94 41 06 	call	0xc82	; 0xc82 <createProcess3>
}
     ce4:	08 95       	ret

00000ce6 <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <createProcess2>
}
     cee:	08 95       	ret

00000cf0 <freeProcess>:

void freeProcess(Process process) {
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     cf6:	80 91 4e 02 	lds	r24, 0x024E
     cfa:	90 91 4f 02 	lds	r25, 0x024F
     cfe:	c8 17       	cp	r28, r24
     d00:	d9 07       	cpc	r29, r25
     d02:	69 f0       	breq	.+26     	; 0xd1e <freeProcess+0x2e>
     d04:	fe 01       	movw	r30, r28
     d06:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	21 f0       	breq	.+8      	; 0xd18 <freeProcess+0x28>
		free(pcb->stackTop);
     d10:	84 81       	ldd	r24, Z+4	; 0x04
     d12:	95 81       	ldd	r25, Z+5	; 0x05
     d14:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <free>
	}
	free(process);
     d18:	ce 01       	movw	r24, r28
     d1a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <free>
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
	return ProcMem(process)->stackSize;
}
     d24:	fc 01       	movw	r30, r24
     d26:	86 81       	ldd	r24, Z+6	; 0x06
     d28:	08 95       	ret

00000d2a <getFreeProcessStackSize>:

uint16_t getFreeProcessStackSize(Process process) {
     d2a:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     d2c:	20 85       	ldd	r18, Z+8	; 0x08
     d2e:	31 85       	ldd	r19, Z+9	; 0x09
     d30:	80 81       	ld	r24, Z
     d32:	91 81       	ldd	r25, Z+1	; 0x01
     d34:	28 1b       	sub	r18, r24
     d36:	39 0b       	sbc	r19, r25
}
     d38:	c9 01       	movw	r24, r18
     d3a:	08 95       	ret

00000d3c <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     d3c:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	95 81       	ldd	r25, Z+5	; 0x05
     d42:	08 95       	ret

00000d44 <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
	return ProcMem(proc) + ADDITIONAL_MEMORY;
     d44:	9c 01       	movw	r18, r24
     d46:	28 5d       	subi	r18, 0xD8	; 216
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
}
     d4a:	c9 01       	movw	r24, r18
     d4c:	08 95       	ret

00000d4e <init_process>:
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
     d4e:	80 91 4d 02 	lds	r24, 0x024D
     d52:	8a 5f       	subi	r24, 0xFA	; 250
     d54:	80 93 4d 02 	sts	0x024D, r24
	init_process_base();
     d58:	0e 94 46 05 	call	0xa8c	; 0xa8c <init_process_base>
     d5c:	a0 91 4e 02 	lds	r26, 0x024E
     d60:	b0 91 4f 02 	lds	r27, 0x024F
     d64:	fd 01       	movw	r30, r26
     d66:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     d68:	15 96       	adiw	r26, 0x05	; 5
     d6a:	1c 92       	st	X, r1
     d6c:	1e 92       	st	-X, r1
     d6e:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     d70:	80 91 4a 01 	lds	r24, 0x014A
     d74:	90 91 4b 01 	lds	r25, 0x014B
     d78:	93 83       	std	Z+3, r25	; 0x03
     d7a:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     d7c:	80 91 48 02 	lds	r24, 0x0248
     d80:	90 91 49 02 	lds	r25, 0x0249
     d84:	95 83       	std	Z+5, r25	; 0x05
     d86:	84 83       	std	Z+4, r24	; 0x04
}
     d88:	08 95       	ret

00000d8a <init_idle_scheduler>:

Process __idle_process;

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
     d8a:	86 ed       	ldi	r24, 0xD6	; 214
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	40 e4       	ldi	r20, 0x40	; 64
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	0e 94 41 06 	call	0xc82	; 0xc82 <createProcess3>
     d9c:	90 93 72 03 	sts	0x0372, r25
     da0:	80 93 71 03 	sts	0x0371, r24
}
     da4:	08 95       	ret

00000da6 <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
}
     da6:	80 91 71 03 	lds	r24, 0x0371
     daa:	90 91 72 03 	lds	r25, 0x0372
     dae:	08 95       	ret

00000db0 <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     db4:	c2 e6       	ldi	r28, 0x62	; 98
     db6:	d2 e0       	ldi	r29, 0x02	; 2
     db8:	ce 01       	movw	r24, r28
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	0e 94 fe 09 	call	0x13fc	; 0x13fc <setWaveformGenerationMode>
	setTimerCompareValue(timer, 2500);
     dc2:	82 e9       	ldi	r24, 0x92	; 146
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	64 ec       	ldi	r22, 0xC4	; 196
     dc8:	79 e0       	ldi	r23, 0x09	; 9
     dca:	0e 94 cd 0a 	call	0x159a	; 0x159a <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     dce:	ce 01       	movw	r24, r28
     dd0:	62 e0       	ldi	r22, 0x02	; 2
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	0e 94 9a 09 	call	0x1334	; 0x1334 <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
     dde:	82 e9       	ldi	r24, 0x92	; 146
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 a5 0a 	call	0x154a	; 0x154a <enableTimerInterrupt>
	sei();
     de6:	78 94       	sei
}
     de8:	08 95       	ret

00000dea <before_scheduler>:
#include "scheduler.kernel.h"

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     dea:	08 95       	ret

00000dec <schedule>:

// Regular header-files
#include "../kernel.h"

Process schedule(BOOL fromTimer) {
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     df2:	0e 94 2e 0b 	call	0x165c	; 0x165c <dms_schedule>
     df6:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	51 f4       	brne	.+20     	; 0xe10 <schedule+0x24>
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <rr_schedule>
     e02:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	21 f4       	brne	.+8      	; 0xe10 <schedule+0x24>
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
     e08:	20 91 71 03 	lds	r18, 0x0371
     e0c:	30 91 72 03 	lds	r19, 0x0372
	return p;
}
     e10:	c9 01       	movw	r24, r18
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <__vector_32>:
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
#endif
	// First push the current context, before any register may be modified.
	PushProcessContext()
     e18:	0f 92       	push	r0
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	0f 92       	push	r0
     e20:	0b b6       	in	r0, 0x3b	; 59
     e22:	0f 92       	push	r0
     e24:	1f 92       	push	r1
     e26:	11 24       	eor	r1, r1
     e28:	2f 92       	push	r2
     e2a:	3f 92       	push	r3
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     e64:	80 91 50 02 	lds	r24, 0x0250
     e68:	90 91 51 02 	lds	r25, 0x0251
     e6c:	a0 91 52 02 	lds	r26, 0x0252
     e70:	b0 91 53 02 	lds	r27, 0x0253
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	a1 1d       	adc	r26, r1
     e78:	b1 1d       	adc	r27, r1
     e7a:	80 93 50 02 	sts	0x0250, r24
     e7e:	90 93 51 02 	sts	0x0251, r25
     e82:	a0 93 52 02 	sts	0x0252, r26
     e86:	b0 93 53 02 	sts	0x0253, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     e8a:	a0 91 4e 02 	lds	r26, 0x024E
	asm volatile("lds r27, __current_process + 1");
     e8e:	b0 91 4f 02 	lds	r27, 0x024F
	StoreContextStack()
     e92:	0d b6       	in	r0, 0x3d	; 61
     e94:	0d 92       	st	X+, r0
     e96:	0e b6       	in	r0, 0x3e	; 62
     e98:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 f6 06 	call	0xdec	; 0xdec <schedule>
     ea2:	90 93 4f 02 	sts	0x024F, r25
     ea6:	80 93 4e 02 	sts	0x024E, r24
	if (__current_process == InvalidProcess) {
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	11 f4       	brne	.+4      	; 0xeb2 <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     eae:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     eb2:	dc 01       	movw	r26, r24
	RestoreContextStack()
     eb4:	0d 90       	ld	r0, X+
     eb6:	0d be       	out	0x3d, r0	; 61
     eb8:	0d 90       	ld	r0, X+
     eba:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	5f 90       	pop	r5
     ef2:	4f 90       	pop	r4
     ef4:	3f 90       	pop	r3
     ef6:	2f 90       	pop	r2
     ef8:	1f 90       	pop	r1
     efa:	0f 90       	pop	r0
     efc:	0b be       	out	0x3b, r0	; 59
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     f04:	18 95       	reti

00000f06 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
     f06:	80 b7       	in	r24, 0x30	; 48
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
     f0c:	e4 e6       	ldi	r30, 0x64	; 100
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 66       	ori	r24, 0x60	; 96
     f14:	80 83       	st	Z, r24
	
	// Watchdog-timer
	// Enabled through the WDTON-fuse-bit. Explicitely disable here.
	// Configure the prescaler -- WDT system-reset after 0,5 s without wdt-instruction.
	WDTCSR = _BV(WDCE);
     f16:	e0 e6       	ldi	r30, 0x60	; 96
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	80 83       	st	Z, r24
	// WDP3:0 = 0101 - 0,5s timeout
	WDTCSR |= // _BV(WDP3) |
     f1e:	80 81       	ld	r24, Z
     f20:	85 60       	ori	r24, 0x05	; 5
     f22:	80 83       	st	Z, r24
			_BV(WDP0);
	
	// BOD - TODO configure?
	
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
     f24:	0e 94 a7 06 	call	0xd4e	; 0xd4e <init_process>
	rr_captureMainProcess(PrioNormal);
     f28:	83 e0       	ldi	r24, 0x03	; 3
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <rr_captureMainProcess>
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     f30:	0e 94 f5 06 	call	0xdea	; 0xdea <before_scheduler>
	start_scheduler();
     f34:	0e 94 ef 06 	call	0xdde	; 0xdde <start_scheduler>
}
     f38:	08 95       	ret

00000f3a <main>:

int i = 0;

int main() {
	while (1) {
		if (i >= AllLeds.count) i = 0;
     f3a:	80 91 3b 03 	lds	r24, 0x033B
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	20 91 4a 02 	lds	r18, 0x024A
     f44:	30 91 4b 02 	lds	r19, 0x024B
     f48:	28 17       	cp	r18, r24
     f4a:	39 07       	cpc	r19, r25
     f4c:	24 f0       	brlt	.+8      	; 0xf56 <main+0x1c>
     f4e:	10 92 4b 02 	sts	0x024B, r1
     f52:	10 92 4a 02 	sts	0x024A, r1
		enableLed(AllLeds.leds[i]);
     f56:	80 91 4a 02 	lds	r24, 0x024A
     f5a:	90 91 4b 02 	lds	r25, 0x024B
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	e0 91 39 03 	lds	r30, 0x0339
     f66:	f0 91 3a 03 	lds	r31, 0x033A
     f6a:	e8 0f       	add	r30, r24
     f6c:	f9 1f       	adc	r31, r25
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	0e 94 e7 07 	call	0xfce	; 0xfce <enableLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	94 e3       	ldi	r25, 0x34	; 52
     f7a:	ac e0       	ldi	r26, 0x0C	; 12
     f7c:	81 50       	subi	r24, 0x01	; 1
     f7e:	90 40       	sbci	r25, 0x00	; 0
     f80:	a0 40       	sbci	r26, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <main+0x42>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <main+0x4c>
     f86:	00 00       	nop
		_delay_ms(200);
		disableLed(AllLeds.leds[i]);
     f88:	80 91 4a 02 	lds	r24, 0x024A
     f8c:	90 91 4b 02 	lds	r25, 0x024B
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	e0 91 39 03 	lds	r30, 0x0339
     f98:	f0 91 3a 03 	lds	r31, 0x033A
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	0e 94 ef 07 	call	0xfde	; 0xfde <disableLed>
     fa8:	8f e7       	ldi	r24, 0x7F	; 127
     faa:	9a e1       	ldi	r25, 0x1A	; 26
     fac:	a6 e0       	ldi	r26, 0x06	; 6
     fae:	81 50       	subi	r24, 0x01	; 1
     fb0:	90 40       	sbci	r25, 0x00	; 0
     fb2:	a0 40       	sbci	r26, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <main+0x74>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <main+0x7e>
     fb8:	00 00       	nop
		_delay_ms(100);
		i++;
     fba:	80 91 4a 02 	lds	r24, 0x024A
     fbe:	90 91 4b 02 	lds	r25, 0x024B
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	90 93 4b 02 	sts	0x024B, r25
     fc8:	80 93 4a 02 	sts	0x024A, r24
	}
     fcc:	b6 cf       	rjmp	.-148    	; 0xf3a <main>

00000fce <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	0e 94 13 09 	call	0x1226	; 0x1226 <writePin>
}
     fdc:	08 95       	ret

00000fde <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
     fde:	fc 01       	movw	r30, r24
     fe0:	80 81       	ld	r24, Z
     fe2:	91 81       	ldd	r25, Z+1	; 0x01
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	0e 94 13 09 	call	0x1226	; 0x1226 <writePin>
}
     fec:	08 95       	ret

00000fee <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
     fee:	fc 01       	movw	r30, r24
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	0e 94 13 09 	call	0x1226	; 0x1226 <writePin>
}
     ff8:	08 95       	ret

00000ffa <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	7c 01       	movw	r14, r24
    1010:	6b 01       	movw	r12, r22
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
    1012:	dc 01       	movw	r26, r24
    1014:	12 96       	adiw	r26, 0x02	; 2
    1016:	ac 90       	ld	r10, X
    1018:	12 97       	sbiw	r26, 0x02	; 2
    101a:	bb 24       	eor	r11, r11
    101c:	c0 e0       	ldi	r28, 0x00	; 0
    101e:	d0 e0       	ldi	r29, 0x00	; 0
void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
    1020:	01 e0       	ldi	r16, 0x01	; 1
    1022:	10 e0       	ldi	r17, 0x00	; 0
	for (int i = 0, max = leds->count; i < max; i++) {
    1024:	15 c0       	rjmp	.+42     	; 0x1050 <setLeds+0x56>
		setLed(leds->leds[i], iMask & mask);
    1026:	ce 01       	movw	r24, r28
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	d7 01       	movw	r26, r14
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
    1032:	e8 0f       	add	r30, r24
    1034:	f9 1f       	adc	r31, r25
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1036:	01 90       	ld	r0, Z+
    1038:	f0 81       	ld	r31, Z
    103a:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
		setLed(leds->leds[i], iMask & mask);
    103c:	b8 01       	movw	r22, r16
    103e:	6c 21       	and	r22, r12
    1040:	7d 21       	and	r23, r13
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	0e 94 13 09 	call	0x1226	; 0x1226 <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    104a:	00 0f       	add	r16, r16
    104c:	11 1f       	adc	r17, r17
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1;
	for (int i = 0, max = leds->count; i < max; i++) {
    104e:	21 96       	adiw	r28, 0x01	; 1
    1050:	ca 15       	cp	r28, r10
    1052:	db 05       	cpc	r29, r11
    1054:	44 f3       	brlt	.-48     	; 0x1026 <setLeds+0x2c>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	08 95       	ret

0000106c <enableLeds>:

void enableLeds(PLedGroup leds) {
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    107a:	dc 01       	movw	r26, r24
    107c:	12 96       	adiw	r26, 0x02	; 2
    107e:	ec 90       	ld	r14, X
    1080:	12 97       	sbiw	r26, 0x02	; 2
    1082:	ff 24       	eor	r15, r15
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	0d c0       	rjmp	.+26     	; 0x10a4 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    108a:	ce 01       	movw	r24, r28
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	d8 01       	movw	r26, r16
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	0e 94 e7 07 	call	0xfce	; 0xfce <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    10a2:	21 96       	adiw	r28, 0x01	; 1
    10a4:	ce 15       	cp	r28, r14
    10a6:	df 05       	cpc	r29, r15
    10a8:	84 f3       	brlt	.-32     	; 0x108a <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	08 95       	ret

000010b8 <disableLeds>:

void disableLeds(PLedGroup leds) {
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    10c6:	dc 01       	movw	r26, r24
    10c8:	12 96       	adiw	r26, 0x02	; 2
    10ca:	ec 90       	ld	r14, X
    10cc:	12 97       	sbiw	r26, 0x02	; 2
    10ce:	ff 24       	eor	r15, r15
    10d0:	c0 e0       	ldi	r28, 0x00	; 0
    10d2:	d0 e0       	ldi	r29, 0x00	; 0
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    10d6:	ce 01       	movw	r24, r28
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	d8 01       	movw	r26, r16
    10de:	ed 91       	ld	r30, X+
    10e0:	fc 91       	ld	r31, X
    10e2:	e8 0f       	add	r30, r24
    10e4:	f9 1f       	adc	r31, r25
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	0e 94 ef 07 	call	0xfde	; 0xfde <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    10ee:	21 96       	adiw	r28, 0x01	; 1
    10f0:	ce 15       	cp	r28, r14
    10f2:	df 05       	cpc	r29, r15
    10f4:	84 f3       	brlt	.-32     	; 0x10d6 <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	08 95       	ret

00001104 <blinkLeds>:

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	6c 01       	movw	r12, r24
    111a:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    111c:	ff 24       	eor	r15, r15
    111e:	1c c0       	rjmp	.+56     	; 0x1158 <blinkLeds+0x54>
		setLeds(leds, ledMask);
    1120:	c6 01       	movw	r24, r12
    1122:	b8 01       	movw	r22, r16
    1124:	49 83       	std	Y+1, r20	; 0x01
    1126:	0e 94 fd 07 	call	0xffa	; 0xffa <setLeds>
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	94 e3       	ldi	r25, 0x34	; 52
    112e:	ac e0       	ldi	r26, 0x0C	; 12
    1130:	81 50       	subi	r24, 0x01	; 1
    1132:	90 40       	sbci	r25, 0x00	; 0
    1134:	a0 40       	sbci	r26, 0x00	; 0
    1136:	e1 f7       	brne	.-8      	; 0x1130 <blinkLeds+0x2c>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <blinkLeds+0x36>
    113a:	00 00       	nop
		_delay_ms(200);
		disableLeds(leds);
    113c:	c6 01       	movw	r24, r12
    113e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <disableLeds>
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	94 e3       	ldi	r25, 0x34	; 52
    1146:	ac e0       	ldi	r26, 0x0C	; 12
    1148:	81 50       	subi	r24, 0x01	; 1
    114a:	90 40       	sbci	r25, 0x00	; 0
    114c:	a0 40       	sbci	r26, 0x00	; 0
    114e:	e1 f7       	brne	.-8      	; 0x1148 <blinkLeds+0x44>
    1150:	00 c0       	rjmp	.+0      	; 0x1152 <blinkLeds+0x4e>
    1152:	00 00       	nop
		disableLed(leds->leds[i]);
	}
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, const uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    1154:	f3 94       	inc	r15
    1156:	49 81       	ldd	r20, Y+1	; 0x01
    1158:	f4 16       	cp	r15, r20
    115a:	10 f3       	brcs	.-60     	; 0x1120 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		_delay_ms(200);
		disableLeds(leds);
		_delay_ms(200);
	}
}
    115c:	0f 90       	pop	r0
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, const uint8_t times) {
    116e:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    1170:	6f ef       	ldi	r22, 0xFF	; 255
    1172:	7f ef       	ldi	r23, 0xFF	; 255
    1174:	0e 94 82 08 	call	0x1104	; 0x1104 <blinkLeds>
}
    1178:	08 95       	ret

0000117a <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    117a:	dc 01       	movw	r26, r24
    117c:	14 96       	adiw	r26, 0x04	; 4
    117e:	ed 91       	ld	r30, X+
    1180:	fc 91       	ld	r31, X
    1182:	15 97       	sbiw	r26, 0x05	; 5
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	80 83       	st	Z, r24
}
    1188:	08 95       	ret

0000118a <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    118a:	dc 01       	movw	r26, r24
    118c:	14 96       	adiw	r26, 0x04	; 4
    118e:	ed 91       	ld	r30, X+
    1190:	fc 91       	ld	r31, X
    1192:	15 97       	sbiw	r26, 0x05	; 5
    1194:	10 82       	st	Z, r1
}
    1196:	08 95       	ret

00001198 <setPinOutput>:

void setPinOutput(PPin pin) {
    1198:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    119a:	ed 91       	ld	r30, X+
    119c:	fc 91       	ld	r31, X
    119e:	11 97       	sbiw	r26, 0x01	; 1
    11a0:	04 80       	ldd	r0, Z+4	; 0x04
    11a2:	f5 81       	ldd	r31, Z+5	; 0x05
    11a4:	e0 2d       	mov	r30, r0
    11a6:	80 81       	ld	r24, Z
    11a8:	12 96       	adiw	r26, 0x02	; 2
    11aa:	9c 91       	ld	r25, X
    11ac:	12 97       	sbiw	r26, 0x02	; 2
    11ae:	89 2b       	or	r24, r25
    11b0:	80 83       	st	Z, r24
}
    11b2:	08 95       	ret

000011b4 <setPinInput>:

void setPinInput(PPin pin) {
    11b4:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    11b6:	ed 91       	ld	r30, X+
    11b8:	fc 91       	ld	r31, X
    11ba:	11 97       	sbiw	r26, 0x01	; 1
    11bc:	04 80       	ldd	r0, Z+4	; 0x04
    11be:	f5 81       	ldd	r31, Z+5	; 0x05
    11c0:	e0 2d       	mov	r30, r0
    11c2:	90 81       	ld	r25, Z
    11c4:	12 96       	adiw	r26, 0x02	; 2
    11c6:	8c 91       	ld	r24, X
    11c8:	12 97       	sbiw	r26, 0x02	; 2
    11ca:	80 95       	com	r24
    11cc:	89 23       	and	r24, r25
    11ce:	80 83       	st	Z, r24
}
    11d0:	08 95       	ret

000011d2 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    11d2:	dc 01       	movw	r26, r24
    11d4:	ed 91       	ld	r30, X+
    11d6:	fc 91       	ld	r31, X
    11d8:	11 97       	sbiw	r26, 0x01	; 1
    11da:	60 83       	st	Z, r22
}
    11dc:	08 95       	ret

000011de <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    11de:	dc 01       	movw	r26, r24
    11e0:	12 96       	adiw	r26, 0x02	; 2
    11e2:	ed 91       	ld	r30, X+
    11e4:	fc 91       	ld	r31, X
    11e6:	13 97       	sbiw	r26, 0x03	; 3
    11e8:	80 81       	ld	r24, Z
}
    11ea:	08 95       	ret

000011ec <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    11ec:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    11ee:	ed 91       	ld	r30, X+
    11f0:	fc 91       	ld	r31, X
    11f2:	11 97       	sbiw	r26, 0x01	; 1
    11f4:	01 90       	ld	r0, Z+
    11f6:	f0 81       	ld	r31, Z
    11f8:	e0 2d       	mov	r30, r0
    11fa:	80 81       	ld	r24, Z
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	9c 91       	ld	r25, X
    1200:	12 97       	sbiw	r26, 0x02	; 2
    1202:	89 2b       	or	r24, r25
    1204:	80 83       	st	Z, r24
}
    1206:	08 95       	ret

00001208 <setPinZero>:

void setPinZero(PPin pin) {
    1208:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    120a:	ed 91       	ld	r30, X+
    120c:	fc 91       	ld	r31, X
    120e:	11 97       	sbiw	r26, 0x01	; 1
    1210:	01 90       	ld	r0, Z+
    1212:	f0 81       	ld	r31, Z
    1214:	e0 2d       	mov	r30, r0
    1216:	90 81       	ld	r25, Z
    1218:	12 96       	adiw	r26, 0x02	; 2
    121a:	8c 91       	ld	r24, X
    121c:	12 97       	sbiw	r26, 0x02	; 2
    121e:	80 95       	com	r24
    1220:	89 23       	and	r24, r25
    1222:	80 83       	st	Z, r24
}
    1224:	08 95       	ret

00001226 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1226:	61 15       	cp	r22, r1
    1228:	71 05       	cpc	r23, r1
    122a:	19 f0       	breq	.+6      	; 0x1232 <writePin+0xc>
    122c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <setPinOne>
    1230:	08 95       	ret
	else setPinZero(pin);
    1232:	0e 94 04 09 	call	0x1208	; 0x1208 <setPinZero>
    1236:	08 95       	ret

00001238 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1238:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    123a:	a0 81       	ld	r26, Z
    123c:	b1 81       	ldd	r27, Z+1	; 0x01
    123e:	12 96       	adiw	r26, 0x02	; 2
    1240:	0d 90       	ld	r0, X+
    1242:	bc 91       	ld	r27, X
    1244:	a0 2d       	mov	r26, r0
    1246:	8c 91       	ld	r24, X
    1248:	92 81       	ldd	r25, Z+2	; 0x02
    124a:	89 23       	and	r24, r25
		return TRUE;
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	11 f4       	brne	.+4      	; 0x1256 <readPin+0x1e>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1256:	c9 01       	movw	r24, r18
    1258:	08 95       	ret

0000125a <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    125a:	80 32       	cpi	r24, 0x20	; 32
    125c:	18 f5       	brcc	.+70     	; 0x12a4 <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    125e:	58 2f       	mov	r21, r24
    1260:	56 95       	lsr	r21
    1262:	56 95       	lsr	r21
    1264:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    1266:	e5 2f       	mov	r30, r21
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	ee 0f       	add	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	ec 5c       	subi	r30, 0xCC	; 204
    1270:	fd 4f       	sbci	r31, 0xFD	; 253
    1272:	01 90       	ld	r0, Z+
    1274:	f0 81       	ld	r31, Z
    1276:	e0 2d       	mov	r30, r0
    1278:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    127a:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    127c:	21 e0       	ldi	r18, 0x01	; 1
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	b9 01       	movw	r22, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <enablePinChangeInterrupt+0x2e>
    1284:	66 0f       	add	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	8a 95       	dec	r24
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <enablePinChangeInterrupt+0x2a>
    128c:	46 2b       	or	r20, r22
    128e:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
    1290:	80 91 68 00 	lds	r24, 0x0068
    1294:	02 c0       	rjmp	.+4      	; 0x129a <enablePinChangeInterrupt+0x40>
    1296:	22 0f       	add	r18, r18
    1298:	33 1f       	adc	r19, r19
    129a:	5a 95       	dec	r21
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <enablePinChangeInterrupt+0x3c>
    129e:	82 2b       	or	r24, r18
    12a0:	80 93 68 00 	sts	0x0068, r24
    12a4:	08 95       	ret

000012a6 <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    12a6:	80 32       	cpi	r24, 0x20	; 32
    12a8:	c0 f4       	brcc	.+48     	; 0x12da <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    12aa:	e8 2f       	mov	r30, r24
    12ac:	e6 95       	lsr	r30
    12ae:	e6 95       	lsr	r30
    12b0:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ec 5c       	subi	r30, 0xCC	; 204
    12ba:	fd 4f       	sbci	r31, 0xFD	; 253
    12bc:	01 90       	ld	r0, Z+
    12be:	f0 81       	ld	r31, Z
    12c0:	e0 2d       	mov	r30, r0
    12c2:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    12c4:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    12c6:	21 e0       	ldi	r18, 0x01	; 1
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <disblePinChangeInterrupt+0x2a>
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	8a 95       	dec	r24
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <disblePinChangeInterrupt+0x26>
    12d4:	20 95       	com	r18
    12d6:	29 23       	and	r18, r25
    12d8:	20 83       	st	Z, r18
    12da:	08 95       	ret

000012dc <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    12dc:	fc 01       	movw	r30, r24
    12de:	64 30       	cpi	r22, 0x04	; 4
    12e0:	71 05       	cpc	r23, r1
    12e2:	48 f4       	brcc	.+18     	; 0x12f6 <setCompareMatchOutputMode+0x1a>
    12e4:	db 01       	movw	r26, r22
    12e6:	a4 5c       	subi	r26, 0xC4	; 196
    12e8:	bd 4f       	sbci	r27, 0xFD	; 253
    12ea:	2c 91       	ld	r18, X
    12ec:	60 5c       	subi	r22, 0xC0	; 192
    12ee:	7d 4f       	sbci	r23, 0xFD	; 253
    12f0:	db 01       	movw	r26, r22
    12f2:	3c 91       	ld	r19, X
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <setCompareMatchOutputMode+0x1e>
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
    12fa:	84 81       	ldd	r24, Z+4	; 0x04
    12fc:	95 81       	ldd	r25, Z+5	; 0x05
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	21 f4       	brne	.+8      	; 0x130c <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
    1304:	36 95       	lsr	r19
    1306:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
    1308:	26 95       	lsr	r18
    130a:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    130c:	a0 81       	ld	r26, Z
    130e:	b1 81       	ldd	r27, Z+1	; 0x01
    1310:	11 96       	adiw	r26, 0x01	; 1
    1312:	0d 90       	ld	r0, X+
    1314:	bc 91       	ld	r27, X
    1316:	a0 2d       	mov	r26, r0
    1318:	8c 91       	ld	r24, X
    131a:	83 2b       	or	r24, r19
    131c:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    131e:	01 90       	ld	r0, Z+
    1320:	f0 81       	ld	r31, Z
    1322:	e0 2d       	mov	r30, r0
    1324:	01 80       	ldd	r0, Z+1	; 0x01
    1326:	f2 81       	ldd	r31, Z+2	; 0x02
    1328:	e0 2d       	mov	r30, r0
    132a:	80 81       	ld	r24, Z
    132c:	20 95       	com	r18
    132e:	28 23       	and	r18, r24
    1330:	20 83       	st	Z, r18
}
    1332:	08 95       	ret

00001334 <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
    1334:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    1336:	80 81       	ld	r24, Z
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	82 70       	andi	r24, 0x02	; 2
    133c:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    133e:	64 30       	cpi	r22, 0x04	; 4
    1340:	71 05       	cpc	r23, r1
    1342:	71 f1       	breq	.+92     	; 0x13a0 <setTimerClockSelect+0x6c>
    1344:	65 30       	cpi	r22, 0x05	; 5
    1346:	71 05       	cpc	r23, r1
    1348:	68 f4       	brcc	.+26     	; 0x1364 <setTimerClockSelect+0x30>
    134a:	61 30       	cpi	r22, 0x01	; 1
    134c:	71 05       	cpc	r23, r1
    134e:	f9 f0       	breq	.+62     	; 0x138e <setTimerClockSelect+0x5a>
    1350:	61 30       	cpi	r22, 0x01	; 1
    1352:	71 05       	cpc	r23, r1
    1354:	d8 f1       	brcs	.+118    	; 0x13cc <setTimerClockSelect+0x98>
    1356:	62 30       	cpi	r22, 0x02	; 2
    1358:	71 05       	cpc	r23, r1
    135a:	e1 f0       	breq	.+56     	; 0x1394 <setTimerClockSelect+0x60>
    135c:	63 30       	cpi	r22, 0x03	; 3
    135e:	71 05       	cpc	r23, r1
    1360:	a1 f4       	brne	.+40     	; 0x138a <setTimerClockSelect+0x56>
    1362:	1b c0       	rjmp	.+54     	; 0x139a <setTimerClockSelect+0x66>
    1364:	67 30       	cpi	r22, 0x07	; 7
    1366:	71 05       	cpc	r23, r1
    1368:	21 f1       	breq	.+72     	; 0x13b2 <setTimerClockSelect+0x7e>
    136a:	68 30       	cpi	r22, 0x08	; 8
    136c:	71 05       	cpc	r23, r1
    136e:	38 f4       	brcc	.+14     	; 0x137e <setTimerClockSelect+0x4a>
    1370:	65 30       	cpi	r22, 0x05	; 5
    1372:	71 05       	cpc	r23, r1
    1374:	c1 f0       	breq	.+48     	; 0x13a6 <setTimerClockSelect+0x72>
    1376:	66 30       	cpi	r22, 0x06	; 6
    1378:	71 05       	cpc	r23, r1
    137a:	39 f4       	brne	.+14     	; 0x138a <setTimerClockSelect+0x56>
    137c:	17 c0       	rjmp	.+46     	; 0x13ac <setTimerClockSelect+0x78>
    137e:	68 30       	cpi	r22, 0x08	; 8
    1380:	71 05       	cpc	r23, r1
    1382:	d1 f0       	breq	.+52     	; 0x13b8 <setTimerClockSelect+0x84>
    1384:	69 30       	cpi	r22, 0x09	; 9
    1386:	71 05       	cpc	r23, r1
    1388:	e1 f0       	breq	.+56     	; 0x13c2 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	1d c0       	rjmp	.+58     	; 0x13c8 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    138e:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    1390:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    1392:	27 c0       	rjmp	.+78     	; 0x13e2 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    1394:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    1396:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    1398:	24 c0       	rjmp	.+72     	; 0x13e2 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	e9 f4       	brne	.+58     	; 0x13d8 <setTimerClockSelect+0xa4>
    139e:	2d c0       	rjmp	.+90     	; 0x13fa <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	b9 f0       	breq	.+46     	; 0x13d2 <setTimerClockSelect+0x9e>
    13a4:	19 c0       	rjmp	.+50     	; 0x13d8 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	d1 f4       	brne	.+52     	; 0x13de <setTimerClockSelect+0xaa>
    13aa:	27 c0       	rjmp	.+78     	; 0x13fa <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	a1 f0       	breq	.+40     	; 0x13d8 <setTimerClockSelect+0xa4>
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	a1 f0       	breq	.+40     	; 0x13de <setTimerClockSelect+0xaa>
    13b6:	07 c0       	rjmp	.+14     	; 0x13c6 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	f9 f4       	brne	.+62     	; 0x13fa <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    13bc:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	10 c0       	rjmp	.+32     	; 0x13e2 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	d1 f4       	brne	.+52     	; 0x13fa <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    13c6:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	0b c0       	rjmp	.+22     	; 0x13e2 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    13cc:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    13ce:	87 e0       	ldi	r24, 0x07	; 7
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    13d2:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    13d4:	84 e0       	ldi	r24, 0x04	; 4
    13d6:	05 c0       	rjmp	.+10     	; 0x13e2 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    13d8:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    13de:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    13e0:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    13e2:	a3 81       	ldd	r26, Z+3	; 0x03
    13e4:	b4 81       	ldd	r27, Z+4	; 0x04
    13e6:	2c 91       	ld	r18, X
    13e8:	29 2b       	or	r18, r25
    13ea:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    13ec:	03 80       	ldd	r0, Z+3	; 0x03
    13ee:	f4 81       	ldd	r31, Z+4	; 0x04
    13f0:	e0 2d       	mov	r30, r0
    13f2:	90 81       	ld	r25, Z
    13f4:	80 95       	com	r24
    13f6:	89 23       	and	r24, r25
    13f8:	80 83       	st	Z, r24
    13fa:	08 95       	ret

000013fc <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
    13fc:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    13fe:	80 81       	ld	r24, Z
    1400:	82 ff       	sbrs	r24, 2
    1402:	54 c0       	rjmp	.+168    	; 0x14ac <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    1404:	65 30       	cpi	r22, 0x05	; 5
    1406:	71 05       	cpc	r23, r1
    1408:	b9 f1       	breq	.+110    	; 0x1478 <setWaveformGenerationMode+0x7c>
    140a:	66 30       	cpi	r22, 0x06	; 6
    140c:	71 05       	cpc	r23, r1
    140e:	b0 f4       	brcc	.+44     	; 0x143c <setWaveformGenerationMode+0x40>
    1410:	62 30       	cpi	r22, 0x02	; 2
    1412:	71 05       	cpc	r23, r1
    1414:	69 f1       	breq	.+90     	; 0x1470 <setWaveformGenerationMode+0x74>
    1416:	63 30       	cpi	r22, 0x03	; 3
    1418:	71 05       	cpc	r23, r1
    141a:	40 f4       	brcc	.+16     	; 0x142c <setWaveformGenerationMode+0x30>
    141c:	61 15       	cp	r22, r1
    141e:	71 05       	cpc	r23, r1
    1420:	19 f1       	breq	.+70     	; 0x1468 <setWaveformGenerationMode+0x6c>
    1422:	61 30       	cpi	r22, 0x01	; 1
    1424:	71 05       	cpc	r23, r1
    1426:	09 f0       	breq	.+2      	; 0x142a <setWaveformGenerationMode+0x2e>
    1428:	8f c0       	rjmp	.+286    	; 0x1548 <setWaveformGenerationMode+0x14c>
    142a:	6e c0       	rjmp	.+220    	; 0x1508 <setWaveformGenerationMode+0x10c>
    142c:	63 30       	cpi	r22, 0x03	; 3
    142e:	71 05       	cpc	r23, r1
    1430:	29 f1       	breq	.+74     	; 0x147c <setWaveformGenerationMode+0x80>
    1432:	64 30       	cpi	r22, 0x04	; 4
    1434:	71 05       	cpc	r23, r1
    1436:	09 f0       	breq	.+2      	; 0x143a <setWaveformGenerationMode+0x3e>
    1438:	87 c0       	rjmp	.+270    	; 0x1548 <setWaveformGenerationMode+0x14c>
    143a:	24 c0       	rjmp	.+72     	; 0x1484 <setWaveformGenerationMode+0x88>
    143c:	68 30       	cpi	r22, 0x08	; 8
    143e:	71 05       	cpc	r23, r1
    1440:	29 f1       	breq	.+74     	; 0x148c <setWaveformGenerationMode+0x90>
    1442:	69 30       	cpi	r22, 0x09	; 9
    1444:	71 05       	cpc	r23, r1
    1446:	40 f4       	brcc	.+16     	; 0x1458 <setWaveformGenerationMode+0x5c>
    1448:	66 30       	cpi	r22, 0x06	; 6
    144a:	71 05       	cpc	r23, r1
    144c:	39 f1       	breq	.+78     	; 0x149c <setWaveformGenerationMode+0xa0>
    144e:	67 30       	cpi	r22, 0x07	; 7
    1450:	71 05       	cpc	r23, r1
    1452:	09 f0       	breq	.+2      	; 0x1456 <setWaveformGenerationMode+0x5a>
    1454:	79 c0       	rjmp	.+242    	; 0x1548 <setWaveformGenerationMode+0x14c>
    1456:	26 c0       	rjmp	.+76     	; 0x14a4 <setWaveformGenerationMode+0xa8>
    1458:	69 30       	cpi	r22, 0x09	; 9
    145a:	71 05       	cpc	r23, r1
    145c:	d9 f0       	breq	.+54     	; 0x1494 <setWaveformGenerationMode+0x98>
    145e:	6a 30       	cpi	r22, 0x0A	; 10
    1460:	71 05       	cpc	r23, r1
    1462:	09 f0       	breq	.+2      	; 0x1466 <setWaveformGenerationMode+0x6a>
    1464:	71 c0       	rjmp	.+226    	; 0x1548 <setWaveformGenerationMode+0x14c>
    1466:	10 c0       	rjmp	.+32     	; 0x1488 <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1468:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    146a:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    146c:	88 e1       	ldi	r24, 0x18	; 24
    146e:	4f c0       	rjmp	.+158    	; 0x150e <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1470:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1472:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    1474:	80 e1       	ldi	r24, 0x10	; 16
    1476:	46 c0       	rjmp	.+140    	; 0x1504 <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
    1478:	98 e1       	ldi	r25, 0x18	; 24
    147a:	3a c0       	rjmp	.+116    	; 0x14f0 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    147c:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    147e:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1480:	88 e1       	ldi	r24, 0x18	; 24
    1482:	40 c0       	rjmp	.+128    	; 0x1504 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
    1484:	90 e1       	ldi	r25, 0x10	; 16
    1486:	2f c0       	rjmp	.+94     	; 0x14e6 <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    1488:	90 e1       	ldi	r25, 0x10	; 16
    148a:	36 c0       	rjmp	.+108    	; 0x14f8 <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
    148c:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
    148e:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    1490:	80 e1       	ldi	r24, 0x10	; 16
    1492:	42 c0       	rjmp	.+132    	; 0x1518 <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
    1494:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
    1496:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    1498:	80 e1       	ldi	r24, 0x10	; 16
    149a:	27 c0       	rjmp	.+78     	; 0x14ea <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    149c:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
    149e:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    14a0:	88 e1       	ldi	r24, 0x18	; 24
    14a2:	3a c0       	rjmp	.+116    	; 0x1518 <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    14a4:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
    14a6:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    14a8:	88 e1       	ldi	r24, 0x18	; 24
    14aa:	1f c0       	rjmp	.+62     	; 0x14ea <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    14ac:	62 30       	cpi	r22, 0x02	; 2
    14ae:	71 05       	cpc	r23, r1
    14b0:	c9 f0       	breq	.+50     	; 0x14e4 <setWaveformGenerationMode+0xe8>
    14b2:	63 30       	cpi	r22, 0x03	; 3
    14b4:	71 05       	cpc	r23, r1
    14b6:	40 f4       	brcc	.+16     	; 0x14c8 <setWaveformGenerationMode+0xcc>
    14b8:	61 15       	cp	r22, r1
    14ba:	71 05       	cpc	r23, r1
    14bc:	79 f0       	breq	.+30     	; 0x14dc <setWaveformGenerationMode+0xe0>
    14be:	61 30       	cpi	r22, 0x01	; 1
    14c0:	71 05       	cpc	r23, r1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <setWaveformGenerationMode+0xca>
    14c4:	41 c0       	rjmp	.+130    	; 0x1548 <setWaveformGenerationMode+0x14c>
    14c6:	25 c0       	rjmp	.+74     	; 0x1512 <setWaveformGenerationMode+0x116>
    14c8:	64 30       	cpi	r22, 0x04	; 4
    14ca:	71 05       	cpc	r23, r1
    14cc:	c1 f0       	breq	.+48     	; 0x14fe <setWaveformGenerationMode+0x102>
    14ce:	64 30       	cpi	r22, 0x04	; 4
    14d0:	71 05       	cpc	r23, r1
    14d2:	88 f0       	brcs	.+34     	; 0x14f6 <setWaveformGenerationMode+0xfa>
    14d4:	65 30       	cpi	r22, 0x05	; 5
    14d6:	71 05       	cpc	r23, r1
    14d8:	b9 f5       	brne	.+110    	; 0x1548 <setWaveformGenerationMode+0x14c>
    14da:	09 c0       	rjmp	.+18     	; 0x14ee <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    14dc:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    14de:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    14e0:	88 e0       	ldi	r24, 0x08	; 8
    14e2:	15 c0       	rjmp	.+42     	; 0x150e <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    14e4:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
    14e6:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
    14e8:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    14ea:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    14ee:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
    14f0:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	fa cf       	rjmp	.-12     	; 0x14ea <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    14f6:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    14f8:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    14fe:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    1500:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1502:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    1504:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    1506:	09 c0       	rjmp	.+18     	; 0x151a <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1508:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    150a:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    150c:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    150e:	23 e0       	ldi	r18, 0x03	; 3
    1510:	04 c0       	rjmp	.+8      	; 0x151a <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1512:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    1514:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1516:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    1518:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    151a:	a1 81       	ldd	r26, Z+1	; 0x01
    151c:	b2 81       	ldd	r27, Z+2	; 0x02
    151e:	4c 91       	ld	r20, X
    1520:	43 2b       	or	r20, r19
    1522:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    1524:	a1 81       	ldd	r26, Z+1	; 0x01
    1526:	b2 81       	ldd	r27, Z+2	; 0x02
    1528:	3c 91       	ld	r19, X
    152a:	20 95       	com	r18
    152c:	23 23       	and	r18, r19
    152e:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    1530:	a3 81       	ldd	r26, Z+3	; 0x03
    1532:	b4 81       	ldd	r27, Z+4	; 0x04
    1534:	2c 91       	ld	r18, X
    1536:	29 2b       	or	r18, r25
    1538:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    153a:	03 80       	ldd	r0, Z+3	; 0x03
    153c:	f4 81       	ldd	r31, Z+4	; 0x04
    153e:	e0 2d       	mov	r30, r0
    1540:	90 81       	ld	r25, Z
    1542:	80 95       	com	r24
    1544:	89 23       	and	r24, r25
    1546:	80 83       	st	Z, r24
    1548:	08 95       	ret

0000154a <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    154a:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    154c:	ed 91       	ld	r30, X+
    154e:	fc 91       	ld	r31, X
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	05 80       	ldd	r0, Z+5	; 0x05
    1554:	f6 81       	ldd	r31, Z+6	; 0x06
    1556:	e0 2d       	mov	r30, r0
    1558:	20 81       	ld	r18, Z
    155a:	14 96       	adiw	r26, 0x04	; 4
    155c:	8d 91       	ld	r24, X+
    155e:	9c 91       	ld	r25, X
    1560:	15 97       	sbiw	r26, 0x05	; 5
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	11 f4       	brne	.+4      	; 0x156a <enableTimerInterrupt+0x20>
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	01 c0       	rjmp	.+2      	; 0x156c <enableTimerInterrupt+0x22>
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	82 2b       	or	r24, r18
    156e:	80 83       	st	Z, r24
}
    1570:	08 95       	ret

00001572 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	0e 94 cc 08 	call	0x1198	; 0x1198 <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
    1580:	ce 01       	movw	r24, r28
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	0e 94 6e 09 	call	0x12dc	; 0x12dc <setCompareMatchOutputMode>
}
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	0e 94 6e 09 	call	0x12dc	; 0x12dc <setCompareMatchOutputMode>
}
    1598:	08 95       	ret

0000159a <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    159a:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    159c:	a0 81       	ld	r26, Z
    159e:	b1 81       	ldd	r27, Z+1	; 0x01
    15a0:	8c 91       	ld	r24, X
    15a2:	82 ff       	sbrs	r24, 2
    15a4:	0d c0       	rjmp	.+26     	; 0x15c0 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    15a6:	8f b7       	in	r24, 0x3f	; 63
		cli();
    15a8:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    15aa:	a2 81       	ldd	r26, Z+2	; 0x02
    15ac:	b3 81       	ldd	r27, Z+3	; 0x03
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	7c 93       	st	X, r23
    15b2:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    15b4:	02 80       	ldd	r0, Z+2	; 0x02
    15b6:	f3 81       	ldd	r31, Z+3	; 0x03
    15b8:	e0 2d       	mov	r30, r0
    15ba:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    15bc:	8f bf       	out	0x3f, r24	; 63
    15be:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    15c0:	02 80       	ldd	r0, Z+2	; 0x02
    15c2:	f3 81       	ldd	r31, Z+3	; 0x03
    15c4:	e0 2d       	mov	r30, r0
    15c6:	70 83       	st	Z, r23
    15c8:	08 95       	ret

000015ca <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    15ca:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    15cc:	a0 81       	ld	r26, Z
    15ce:	b1 81       	ldd	r27, Z+1	; 0x01
    15d0:	8c 91       	ld	r24, X
    15d2:	82 ff       	sbrs	r24, 2
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    15d6:	2f b7       	in	r18, 0x3f	; 63
		cli();
    15d8:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
    15da:	02 80       	ldd	r0, Z+2	; 0x02
    15dc:	f3 81       	ldd	r31, Z+3	; 0x03
    15de:	e0 2d       	mov	r30, r0
    15e0:	80 81       	ld	r24, Z
    15e2:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
    15e4:	2f bf       	out	0x3f, r18	; 63
    15e6:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    15e8:	02 80       	ldd	r0, Z+2	; 0x02
    15ea:	f3 81       	ldd	r31, Z+3	; 0x03
    15ec:	e0 2d       	mov	r30, r0
    15ee:	90 81       	ld	r25, Z
    15f0:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
    15f2:	08 95       	ret

000015f4 <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	PJob job = JobMem(process);
    15fc:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    1600:	e8 2e       	mov	r14, r24
    1602:	e7 01       	movw	r28, r14
    1604:	7e 01       	movw	r14, r28
    1606:	f9 2e       	mov	r15, r25
    1608:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
    160a:	e9 81       	ldd	r30, Y+1	; 0x01
    160c:	fa 81       	ldd	r31, Y+2	; 0x02
    160e:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
    1610:	1c 86       	std	Y+12, r1	; 0x0c
    1612:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
    1614:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <schedule_next>
    1618:	f8 cf       	rjmp	.-16     	; 0x160a <AperiodicJobWrapper+0x16>

0000161a <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
	PJob job = JobMem(process);
    1622:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    1626:	e8 2e       	mov	r14, r24
    1628:	e7 01       	movw	r28, r14
    162a:	7e 01       	movw	r14, r28
    162c:	f9 2e       	mov	r15, r25
    162e:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	09 95       	icall
		periodicJob->nextPeriod += job->period;
    1636:	8b 85       	ldd	r24, Y+11	; 0x0b
    1638:	9c 85       	ldd	r25, Y+12	; 0x0c
    163a:	ad 85       	ldd	r26, Y+13	; 0x0d
    163c:	be 85       	ldd	r27, Y+14	; 0x0e
    163e:	2d 81       	ldd	r18, Y+5	; 0x05
    1640:	3e 81       	ldd	r19, Y+6	; 0x06
    1642:	4f 81       	ldd	r20, Y+7	; 0x07
    1644:	58 85       	ldd	r21, Y+8	; 0x08
    1646:	82 0f       	add	r24, r18
    1648:	93 1f       	adc	r25, r19
    164a:	a4 1f       	adc	r26, r20
    164c:	b5 1f       	adc	r27, r21
    164e:	8b 87       	std	Y+11, r24	; 0x0b
    1650:	9c 87       	std	Y+12, r25	; 0x0c
    1652:	ad 87       	std	Y+13, r26	; 0x0d
    1654:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
    1656:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <schedule_next>
    165a:	ea cf       	rjmp	.-44     	; 0x1630 <PeriodicJobWrapper+0x16>

0000165c <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
    1664:	c0 91 c8 03 	lds	r28, 0x03C8
    1668:	d0 91 c9 03 	lds	r29, 0x03C9
	while (current) {
    166c:	25 c0       	rjmp	.+74     	; 0x16b8 <dms_schedule+0x5c>
		PJob job = JobMem(current);
    166e:	ce 01       	movw	r24, r28
    1670:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    1674:	fc 01       	movw	r30, r24
		switch(job->jobType) {
    1676:	81 85       	ldd	r24, Z+9	; 0x09
    1678:	92 85       	ldd	r25, Z+10	; 0x0a
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	21 f0       	breq	.+8      	; 0x1686 <dms_schedule+0x2a>
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	c1 f4       	brne	.+48     	; 0x16b4 <dms_schedule+0x58>
    1684:	12 c0       	rjmp	.+36     	; 0x16aa <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
    1686:	63 85       	ldd	r22, Z+11	; 0x0b
    1688:	74 85       	ldd	r23, Z+12	; 0x0c
    168a:	85 85       	ldd	r24, Z+13	; 0x0d
    168c:	96 85       	ldd	r25, Z+14	; 0x0e
    168e:	20 91 50 02 	lds	r18, 0x0250
    1692:	30 91 51 02 	lds	r19, 0x0251
    1696:	40 91 52 02 	lds	r20, 0x0252
    169a:	50 91 53 02 	lds	r21, 0x0253
    169e:	26 17       	cp	r18, r22
    16a0:	37 07       	cpc	r19, r23
    16a2:	48 07       	cpc	r20, r24
    16a4:	59 07       	cpc	r21, r25
    16a6:	30 f0       	brcs	.+12     	; 0x16b4 <dms_schedule+0x58>
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
    16aa:	83 85       	ldd	r24, Z+11	; 0x0b
    16ac:	94 85       	ldd	r25, Z+12	; 0x0c
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	21 f0       	breq	.+8      	; 0x16bc <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
    16b4:	c3 81       	ldd	r28, Z+3	; 0x03
    16b6:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
    16b8:	20 97       	sbiw	r28, 0x00	; 0
    16ba:	c9 f6       	brne	.-78     	; 0x166e <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
    16bc:	ce 01       	movw	r24, r28
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	08 95       	ret

000016c8 <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	8c 01       	movw	r16, r24
    16d2:	eb 01       	movw	r28, r22
	if (!processListHead) {
    16d4:	80 91 c8 03 	lds	r24, 0x03C8
    16d8:	90 91 c9 03 	lds	r25, 0x03C9
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	39 f4       	brne	.+14     	; 0x16ee <insertJobIntoList+0x26>
		processListHead = process;
    16e0:	10 93 c9 03 	sts	0x03C9, r17
    16e4:	00 93 c8 03 	sts	0x03C8, r16
		job->nextJob = NULL;
    16e8:	1c 82       	std	Y+4, r1	; 0x04
    16ea:	1b 82       	std	Y+3, r1	; 0x03
    16ec:	2d c0       	rjmp	.+90     	; 0x1748 <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
    16ee:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    16f2:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
    16f4:	65 81       	ldd	r22, Z+5	; 0x05
    16f6:	76 81       	ldd	r23, Z+6	; 0x06
    16f8:	87 81       	ldd	r24, Z+7	; 0x07
    16fa:	90 85       	ldd	r25, Z+8	; 0x08
    16fc:	2d 81       	ldd	r18, Y+5	; 0x05
    16fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1700:	4f 81       	ldd	r20, Y+7	; 0x07
    1702:	58 85       	ldd	r21, Y+8	; 0x08
    1704:	26 17       	cp	r18, r22
    1706:	37 07       	cpc	r19, r23
    1708:	48 07       	cpc	r20, r24
    170a:	59 07       	cpc	r21, r25
    170c:	68 f0       	brcs	.+26     	; 0x1728 <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
    170e:	62 17       	cp	r22, r18
    1710:	73 07       	cpc	r23, r19
    1712:	84 07       	cpc	r24, r20
    1714:	95 07       	cpc	r25, r21
    1716:	21 f4       	brne	.+8      	; 0x1720 <insertJobIntoList+0x58>
    1718:	90 81       	ld	r25, Z
    171a:	88 81       	ld	r24, Y
    171c:	98 17       	cp	r25, r24
    171e:	20 f0       	brcs	.+8      	; 0x1728 <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
    1720:	83 81       	ldd	r24, Z+3	; 0x03
    1722:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	19 f7       	brne	.-58     	; 0x16ee <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    1730:	fc 01       	movw	r30, r24
    1732:	83 81       	ldd	r24, Z+3	; 0x03
    1734:	94 81       	ldd	r25, Z+4	; 0x04
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    1742:	fc 01       	movw	r30, r24
    1744:	14 83       	std	Z+4, r17	; 0x04
    1746:	03 83       	std	Z+3, r16	; 0x03
	}
}
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
    1752:	6f 92       	push	r6
    1754:	7f 92       	push	r7
    1756:	8f 92       	push	r8
    1758:	9f 92       	push	r9
    175a:	af 92       	push	r10
    175c:	bf 92       	push	r11
    175e:	cf 92       	push	r12
    1760:	df 92       	push	r13
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	5c 01       	movw	r10, r24
    1770:	4b 01       	movw	r8, r22
    1772:	69 01       	movw	r12, r18
    1774:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
    1776:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    177a:	19 2f       	mov	r17, r25
    177c:	68 2e       	mov	r6, r24
    177e:	e3 01       	movw	r28, r6
    1780:	3e 01       	movw	r6, r28
    1782:	79 2e       	mov	r7, r25
    1784:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
    1786:	9a 82       	std	Y+2, r9	; 0x02
    1788:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
    178a:	08 83       	st	Y, r16
	job->period = period;
    178c:	cd 82       	std	Y+5, r12	; 0x05
    178e:	de 82       	std	Y+6, r13	; 0x06
    1790:	ef 82       	std	Y+7, r14	; 0x07
    1792:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
    1794:	c5 01       	movw	r24, r10
    1796:	b3 01       	movw	r22, r6
    1798:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <insertJobIntoList>
	return job;
}
    179c:	86 2d       	mov	r24, r6
    179e:	91 2f       	mov	r25, r17
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	9f 90       	pop	r9
    17b6:	8f 90       	pop	r8
    17b8:	7f 90       	pop	r7
    17ba:	6f 90       	pop	r6
    17bc:	08 95       	ret

000017be <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
    17be:	af 92       	push	r10
    17c0:	bf 92       	push	r11
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ff 92       	push	r15
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	ec 01       	movw	r28, r24
    17d2:	5a 01       	movw	r10, r20
    17d4:	6b 01       	movw	r12, r22
    17d6:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
    17d8:	40 91 4a 01 	lds	r20, 0x014A
    17dc:	50 91 4b 01 	lds	r21, 0x014B
    17e0:	8d e0       	ldi	r24, 0x0D	; 13
    17e2:	9b e0       	ldi	r25, 0x0B	; 11
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	2f e0       	ldi	r18, 0x0F	; 15
    17ea:	0e 94 41 06 	call	0xc82	; 0xc82 <createProcess3>
    17ee:	f8 2e       	mov	r15, r24
    17f0:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
    17f2:	be 01       	movw	r22, r28
    17f4:	a6 01       	movw	r20, r12
    17f6:	95 01       	movw	r18, r10
    17f8:	0e 94 a9 0b 	call	0x1752	; 0x1752 <initializeJob>
    17fc:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
    17fe:	12 86       	std	Z+10, r1	; 0x0a
    1800:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
    1802:	20 91 50 02 	lds	r18, 0x0250
    1806:	30 91 51 02 	lds	r19, 0x0251
    180a:	40 91 52 02 	lds	r20, 0x0252
    180e:	50 91 53 02 	lds	r21, 0x0253
    1812:	2a 0d       	add	r18, r10
    1814:	3b 1d       	adc	r19, r11
    1816:	4c 1d       	adc	r20, r12
    1818:	5d 1d       	adc	r21, r13
    181a:	23 87       	std	Z+11, r18	; 0x0b
    181c:	34 87       	std	Z+12, r19	; 0x0c
    181e:	45 87       	std	Z+13, r20	; 0x0d
    1820:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
    1822:	8f 2d       	mov	r24, r15
    1824:	91 2f       	mov	r25, r17
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	bf 90       	pop	r11
    1836:	af 90       	pop	r10
    1838:	08 95       	ret

0000183a <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	ec 01       	movw	r28, r24
    184e:	5a 01       	movw	r10, r20
    1850:	6b 01       	movw	r12, r22
    1852:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
    1854:	40 91 4a 01 	lds	r20, 0x014A
    1858:	50 91 4b 01 	lds	r21, 0x014B
    185c:	8a ef       	ldi	r24, 0xFA	; 250
    185e:	9a e0       	ldi	r25, 0x0A	; 10
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	2d e0       	ldi	r18, 0x0D	; 13
    1866:	0e 94 41 06 	call	0xc82	; 0xc82 <createProcess3>
    186a:	f8 2e       	mov	r15, r24
    186c:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
    186e:	be 01       	movw	r22, r28
    1870:	a6 01       	movw	r20, r12
    1872:	95 01       	movw	r18, r10
    1874:	0e 94 a9 0b 	call	0x1752	; 0x1752 <initializeJob>
    1878:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	92 87       	std	Z+10, r25	; 0x0a
    1880:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
    1882:	14 86       	std	Z+12, r1	; 0x0c
    1884:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
    1886:	8f 2d       	mov	r24, r15
    1888:	91 2f       	mov	r25, r17
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	08 95       	ret

0000189e <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
    189e:	0e 94 a2 06 	call	0xd44	; 0xd44 <getProcessMemory>
    18a2:	21 e0       	ldi	r18, 0x01	; 1
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	34 87       	std	Z+12, r19	; 0x0c
    18aa:	23 87       	std	Z+11, r18	; 0x0b
}
    18ac:	08 95       	ret

000018ae <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	8c 01       	movw	r16, r24
    18b8:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	64 e0       	ldi	r22, 0x04	; 4
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <calloc>
    18c6:	fc 01       	movw	r30, r24
	elem->thread = thread;
    18c8:	11 83       	std	Z+1, r17	; 0x01
    18ca:	00 83       	st	Z, r16
	elem->next = queue->first;
    18cc:	de 01       	movw	r26, r28
    18ce:	aa 0f       	add	r26, r26
    18d0:	bb 1f       	adc	r27, r27
    18d2:	aa 0f       	add	r26, r26
    18d4:	bb 1f       	adc	r27, r27
    18d6:	ac 0f       	add	r26, r28
    18d8:	bd 1f       	adc	r27, r29
    18da:	a6 53       	subi	r26, 0x36	; 54
    18dc:	bc 4f       	sbci	r27, 0xFC	; 252
    18de:	8d 91       	ld	r24, X+
    18e0:	9c 91       	ld	r25, X
    18e2:	11 97       	sbiw	r26, 0x01	; 1
    18e4:	93 83       	std	Z+3, r25	; 0x03
    18e6:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	fc 93       	st	X, r31
    18ec:	ee 93       	st	-X, r30
	if (queue->count == 0)
    18ee:	14 96       	adiw	r26, 0x04	; 4
    18f0:	8c 91       	ld	r24, X
    18f2:	14 97       	sbiw	r26, 0x04	; 4
    18f4:	88 23       	and	r24, r24
    18f6:	21 f4       	brne	.+8      	; 0x1900 <insertThreadIntoQueue+0x52>
		queue->current = elem;
    18f8:	13 96       	adiw	r26, 0x03	; 3
    18fa:	fc 93       	st	X, r31
    18fc:	ee 93       	st	-X, r30
    18fe:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
    1900:	fe 01       	movw	r30, r28
    1902:	ee 0f       	add	r30, r30
    1904:	ff 1f       	adc	r31, r31
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	ec 0f       	add	r30, r28
    190c:	fd 1f       	adc	r31, r29
    190e:	e6 53       	subi	r30, 0x36	; 54
    1910:	fc 4f       	sbci	r31, 0xFC	; 252
    1912:	84 81       	ldd	r24, Z+4	; 0x04
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
    1918:	80 91 54 02 	lds	r24, 0x0254
    191c:	90 91 55 02 	lds	r25, 0x0255
    1920:	8c 17       	cp	r24, r28
    1922:	9d 07       	cpc	r25, r29
    1924:	20 f4       	brcc	.+8      	; 0x192e <insertThreadIntoQueue+0x80>
    1926:	d0 93 55 02 	sts	0x0255, r29
    192a:	c0 93 54 02 	sts	0x0254, r28
}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
    1942:	0e 94 73 06 	call	0xce6	; 0xce6 <createProcess>
    1946:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1948:	be 01       	movw	r22, r28
    194a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <insertThreadIntoQueue>
	return thread;
}
    194e:	c8 01       	movw	r24, r16
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
    195a:	63 e0       	ldi	r22, 0x03	; 3
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <createThread2>
}
    1962:	08 95       	ret

00001964 <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	eb 01       	movw	r28, r22
    196e:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
    1970:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <createProcess2>
    1974:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1976:	be 01       	movw	r22, r28
    1978:	0e 94 57 0c 	call	0x18ae	; 0x18ae <insertThreadIntoQueue>
	return thread;
}
    197c:	c8 01       	movw	r24, r16
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	eb 01       	movw	r28, r22
    1992:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
    1994:	a9 01       	movw	r20, r18
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	0e 94 41 06 	call	0xc82	; 0xc82 <createProcess3>
    199c:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    199e:	be 01       	movw	r22, r28
    19a0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <insertThreadIntoQueue>
	return thread;
}
    19a4:	c8 01       	movw	r24, r16
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    19b0:	80 91 54 02 	lds	r24, 0x0254
    19b4:	90 91 55 02 	lds	r25, 0x0255
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <rr_schedule+0xc>
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	29 f4       	brne	.+10     	; 0x19ca <rr_schedule+0x1a>
    19c0:	10 92 54 02 	sts	0x0254, r1
    19c4:	10 92 55 02 	sts	0x0255, r1
    19c8:	10 c0       	rjmp	.+32     	; 0x19ea <rr_schedule+0x3a>
    19ca:	fc 01       	movw	r30, r24
    19cc:	ee 0f       	add	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	ee 0f       	add	r30, r30
    19d2:	ff 1f       	adc	r31, r31
    19d4:	e8 0f       	add	r30, r24
    19d6:	f9 1f       	adc	r31, r25
    19d8:	e6 53       	subi	r30, 0x36	; 54
    19da:	fc 4f       	sbci	r31, 0xFC	; 252
    19dc:	24 81       	ldd	r18, Z+4	; 0x04
    19de:	22 23       	and	r18, r18
    19e0:	61 f3       	breq	.-40     	; 0x19ba <rr_schedule+0xa>
    19e2:	80 93 54 02 	sts	0x0254, r24
    19e6:	90 93 55 02 	sts	0x0255, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    19ea:	fc 01       	movw	r30, r24
    19ec:	ee 0f       	add	r30, r30
    19ee:	ff 1f       	adc	r31, r31
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	e8 0f       	add	r30, r24
    19f6:	f9 1f       	adc	r31, r25
    19f8:	e6 53       	subi	r30, 0x36	; 54
    19fa:	fc 4f       	sbci	r31, 0xFC	; 252
    19fc:	24 81       	ldd	r18, Z+4	; 0x04
    19fe:	22 23       	and	r18, r18
    1a00:	c9 f0       	breq	.+50     	; 0x1a34 <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    1a02:	a2 81       	ldd	r26, Z+2	; 0x02
    1a04:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    1a06:	12 96       	adiw	r26, 0x02	; 2
    1a08:	0d 90       	ld	r0, X+
    1a0a:	bc 91       	ld	r27, X
    1a0c:	a0 2d       	mov	r26, r0
    1a0e:	10 97       	sbiw	r26, 0x00	; 0
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <rr_schedule+0x66>
    1a12:	a0 81       	ld	r26, Z
    1a14:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    1a16:	fc 01       	movw	r30, r24
    1a18:	ee 0f       	add	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	e8 0f       	add	r30, r24
    1a22:	f9 1f       	adc	r31, r25
    1a24:	e6 53       	subi	r30, 0x36	; 54
    1a26:	fc 4f       	sbci	r31, 0xFC	; 252
    1a28:	b3 83       	std	Z+3, r27	; 0x03
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    1a2c:	2d 91       	ld	r18, X+
    1a2e:	3c 91       	ld	r19, X
    1a30:	11 97       	sbiw	r26, 0x01	; 1
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    1a38:	c9 01       	movw	r24, r18
    1a3a:	08 95       	ret

00001a3c <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    1a42:	0e 94 30 06 	call	0xc60	; 0xc60 <getCurrentProcess>
    1a46:	be 01       	movw	r22, r28
    1a48:	0e 94 57 0c 	call	0x18ae	; 0x18ae <insertThreadIntoQueue>
}
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    1a52:	0e 94 30 06 	call	0xc60	; 0xc60 <getCurrentProcess>
}
    1a56:	08 95       	ret

00001a58 <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 f6 06 	call	0xdec	; 0xdec <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <schedule_next+0x10>
	switchProcess(next); // Will not return here.
    1a64:	0e 94 35 06 	call	0xc6a	; 0xc6a <switchProcess>
    1a68:	08 95       	ret

00001a6a <processor_idle>:
}

void processor_idle() {
	sleep_enable();
    1a6a:	83 b7       	in	r24, 0x33	; 51
    1a6c:	81 60       	ori	r24, 0x01	; 1
    1a6e:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
    1a70:	83 b7       	in	r24, 0x33	; 51
    1a72:	81 7f       	andi	r24, 0xF1	; 241
    1a74:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
    1a76:	78 94       	sei
	sleep_cpu();
    1a78:	88 95       	sleep
}
    1a7a:	08 95       	ret

00001a7c <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
    1a7c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <processor_idle>
    1a80:	fd cf       	rjmp	.-6      	; 0x1a7c <processor_loop_idle>

00001a82 <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    1a82:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    1a84:	84 b7       	in	r24, 0x34	; 52
    1a86:	88 70       	andi	r24, 0x08	; 8
    1a88:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    1a8a:	80 e1       	ldi	r24, 0x10	; 16
    1a8c:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    1a90:	88 e0       	ldi	r24, 0x08	; 8
    1a92:	80 93 60 00 	sts	0x0060, r24
    1a96:	ff cf       	rjmp	.-2      	; 0x1a96 <HARDWARE_RESET+0x14>

00001a98 <calloc>:
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	68 9f       	mul	r22, r24
    1aa6:	80 01       	movw	r16, r0
    1aa8:	69 9f       	mul	r22, r25
    1aaa:	10 0d       	add	r17, r0
    1aac:	78 9f       	mul	r23, r24
    1aae:	10 0d       	add	r17, r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	c8 01       	movw	r24, r16
    1ab4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <malloc>
    1ab8:	e8 2e       	mov	r14, r24
    1aba:	e7 01       	movw	r28, r14
    1abc:	7e 01       	movw	r14, r28
    1abe:	f9 2e       	mov	r15, r25
    1ac0:	e7 01       	movw	r28, r14
    1ac2:	20 97       	sbiw	r28, 0x00	; 0
    1ac4:	31 f0       	breq	.+12     	; 0x1ad2 <calloc+0x3a>
    1ac6:	8e 2d       	mov	r24, r14
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	a8 01       	movw	r20, r16
    1ace:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <memset>
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	08 95       	ret

00001ae2 <malloc>:
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	91 05       	cpc	r25, r1
    1aea:	10 f4       	brcc	.+4      	; 0x1af0 <malloc+0xe>
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	e0 91 ef 03 	lds	r30, 0x03EF
    1af4:	f0 91 f0 03 	lds	r31, 0x03F0
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	26 c0       	rjmp	.+76     	; 0x1b4e <malloc+0x6c>
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	68 17       	cp	r22, r24
    1b08:	79 07       	cpc	r23, r25
    1b0a:	e0 f0       	brcs	.+56     	; 0x1b44 <malloc+0x62>
    1b0c:	68 17       	cp	r22, r24
    1b0e:	79 07       	cpc	r23, r25
    1b10:	81 f4       	brne	.+32     	; 0x1b32 <malloc+0x50>
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	21 15       	cp	r18, r1
    1b18:	31 05       	cpc	r19, r1
    1b1a:	31 f0       	breq	.+12     	; 0x1b28 <malloc+0x46>
    1b1c:	d9 01       	movw	r26, r18
    1b1e:	13 96       	adiw	r26, 0x03	; 3
    1b20:	9c 93       	st	X, r25
    1b22:	8e 93       	st	-X, r24
    1b24:	12 97       	sbiw	r26, 0x02	; 2
    1b26:	2b c0       	rjmp	.+86     	; 0x1b7e <malloc+0x9c>
    1b28:	90 93 f0 03 	sts	0x03F0, r25
    1b2c:	80 93 ef 03 	sts	0x03EF, r24
    1b30:	26 c0       	rjmp	.+76     	; 0x1b7e <malloc+0x9c>
    1b32:	41 15       	cp	r20, r1
    1b34:	51 05       	cpc	r21, r1
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <malloc+0x5c>
    1b38:	64 17       	cp	r22, r20
    1b3a:	75 07       	cpc	r23, r21
    1b3c:	18 f4       	brcc	.+6      	; 0x1b44 <malloc+0x62>
    1b3e:	ab 01       	movw	r20, r22
    1b40:	e9 01       	movw	r28, r18
    1b42:	df 01       	movw	r26, r30
    1b44:	9f 01       	movw	r18, r30
    1b46:	72 81       	ldd	r23, Z+2	; 0x02
    1b48:	63 81       	ldd	r22, Z+3	; 0x03
    1b4a:	e7 2f       	mov	r30, r23
    1b4c:	f6 2f       	mov	r31, r22
    1b4e:	30 97       	sbiw	r30, 0x00	; 0
    1b50:	c1 f6       	brne	.-80     	; 0x1b02 <malloc+0x20>
    1b52:	41 15       	cp	r20, r1
    1b54:	51 05       	cpc	r21, r1
    1b56:	01 f1       	breq	.+64     	; 0x1b98 <malloc+0xb6>
    1b58:	48 1b       	sub	r20, r24
    1b5a:	59 0b       	sbc	r21, r25
    1b5c:	44 30       	cpi	r20, 0x04	; 4
    1b5e:	51 05       	cpc	r21, r1
    1b60:	80 f4       	brcc	.+32     	; 0x1b82 <malloc+0xa0>
    1b62:	12 96       	adiw	r26, 0x02	; 2
    1b64:	8d 91       	ld	r24, X+
    1b66:	9c 91       	ld	r25, X
    1b68:	13 97       	sbiw	r26, 0x03	; 3
    1b6a:	20 97       	sbiw	r28, 0x00	; 0
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <malloc+0x92>
    1b6e:	9b 83       	std	Y+3, r25	; 0x03
    1b70:	8a 83       	std	Y+2, r24	; 0x02
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <malloc+0x9a>
    1b74:	90 93 f0 03 	sts	0x03F0, r25
    1b78:	80 93 ef 03 	sts	0x03EF, r24
    1b7c:	fd 01       	movw	r30, r26
    1b7e:	32 96       	adiw	r30, 0x02	; 2
    1b80:	46 c0       	rjmp	.+140    	; 0x1c0e <malloc+0x12c>
    1b82:	fd 01       	movw	r30, r26
    1b84:	e4 0f       	add	r30, r20
    1b86:	f5 1f       	adc	r31, r21
    1b88:	81 93       	st	Z+, r24
    1b8a:	91 93       	st	Z+, r25
    1b8c:	42 50       	subi	r20, 0x02	; 2
    1b8e:	50 40       	sbci	r21, 0x00	; 0
    1b90:	11 96       	adiw	r26, 0x01	; 1
    1b92:	5c 93       	st	X, r21
    1b94:	4e 93       	st	-X, r20
    1b96:	3b c0       	rjmp	.+118    	; 0x1c0e <malloc+0x12c>
    1b98:	20 91 ed 03 	lds	r18, 0x03ED
    1b9c:	30 91 ee 03 	lds	r19, 0x03EE
    1ba0:	21 15       	cp	r18, r1
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	41 f4       	brne	.+16     	; 0x1bb6 <malloc+0xd4>
    1ba6:	20 91 46 02 	lds	r18, 0x0246
    1baa:	30 91 47 02 	lds	r19, 0x0247
    1bae:	30 93 ee 03 	sts	0x03EE, r19
    1bb2:	20 93 ed 03 	sts	0x03ED, r18
    1bb6:	20 91 48 02 	lds	r18, 0x0248
    1bba:	30 91 49 02 	lds	r19, 0x0249
    1bbe:	21 15       	cp	r18, r1
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	41 f4       	brne	.+16     	; 0x1bd4 <malloc+0xf2>
    1bc4:	2d b7       	in	r18, 0x3d	; 61
    1bc6:	3e b7       	in	r19, 0x3e	; 62
    1bc8:	40 91 44 02 	lds	r20, 0x0244
    1bcc:	50 91 45 02 	lds	r21, 0x0245
    1bd0:	24 1b       	sub	r18, r20
    1bd2:	35 0b       	sbc	r19, r21
    1bd4:	e0 91 ed 03 	lds	r30, 0x03ED
    1bd8:	f0 91 ee 03 	lds	r31, 0x03EE
    1bdc:	e2 17       	cp	r30, r18
    1bde:	f3 07       	cpc	r31, r19
    1be0:	a0 f4       	brcc	.+40     	; 0x1c0a <malloc+0x128>
    1be2:	2e 1b       	sub	r18, r30
    1be4:	3f 0b       	sbc	r19, r31
    1be6:	28 17       	cp	r18, r24
    1be8:	39 07       	cpc	r19, r25
    1bea:	78 f0       	brcs	.+30     	; 0x1c0a <malloc+0x128>
    1bec:	ac 01       	movw	r20, r24
    1bee:	4e 5f       	subi	r20, 0xFE	; 254
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	24 17       	cp	r18, r20
    1bf4:	35 07       	cpc	r19, r21
    1bf6:	48 f0       	brcs	.+18     	; 0x1c0a <malloc+0x128>
    1bf8:	4e 0f       	add	r20, r30
    1bfa:	5f 1f       	adc	r21, r31
    1bfc:	50 93 ee 03 	sts	0x03EE, r21
    1c00:	40 93 ed 03 	sts	0x03ED, r20
    1c04:	81 93       	st	Z+, r24
    1c06:	91 93       	st	Z+, r25
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <malloc+0x12c>
    1c0a:	e0 e0       	ldi	r30, 0x00	; 0
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	cf 01       	movw	r24, r30
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <free>:
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <free+0xa>
    1c1e:	91 c0       	rjmp	.+290    	; 0x1d42 <free+0x12c>
    1c20:	fc 01       	movw	r30, r24
    1c22:	32 97       	sbiw	r30, 0x02	; 2
    1c24:	13 82       	std	Z+3, r1	; 0x03
    1c26:	12 82       	std	Z+2, r1	; 0x02
    1c28:	60 91 ef 03 	lds	r22, 0x03EF
    1c2c:	70 91 f0 03 	lds	r23, 0x03F0
    1c30:	61 15       	cp	r22, r1
    1c32:	71 05       	cpc	r23, r1
    1c34:	81 f4       	brne	.+32     	; 0x1c56 <free+0x40>
    1c36:	20 81       	ld	r18, Z
    1c38:	31 81       	ldd	r19, Z+1	; 0x01
    1c3a:	28 0f       	add	r18, r24
    1c3c:	39 1f       	adc	r19, r25
    1c3e:	80 91 ed 03 	lds	r24, 0x03ED
    1c42:	90 91 ee 03 	lds	r25, 0x03EE
    1c46:	82 17       	cp	r24, r18
    1c48:	93 07       	cpc	r25, r19
    1c4a:	99 f5       	brne	.+102    	; 0x1cb2 <free+0x9c>
    1c4c:	f0 93 ee 03 	sts	0x03EE, r31
    1c50:	e0 93 ed 03 	sts	0x03ED, r30
    1c54:	76 c0       	rjmp	.+236    	; 0x1d42 <free+0x12c>
    1c56:	db 01       	movw	r26, r22
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <free+0x4c>
    1c5e:	cd 01       	movw	r24, r26
    1c60:	d9 01       	movw	r26, r18
    1c62:	ae 17       	cp	r26, r30
    1c64:	bf 07       	cpc	r27, r31
    1c66:	48 f4       	brcc	.+18     	; 0x1c7a <free+0x64>
    1c68:	12 96       	adiw	r26, 0x02	; 2
    1c6a:	2d 91       	ld	r18, X+
    1c6c:	3c 91       	ld	r19, X
    1c6e:	13 97       	sbiw	r26, 0x03	; 3
    1c70:	21 15       	cp	r18, r1
    1c72:	31 05       	cpc	r19, r1
    1c74:	a1 f7       	brne	.-24     	; 0x1c5e <free+0x48>
    1c76:	cd 01       	movw	r24, r26
    1c78:	21 c0       	rjmp	.+66     	; 0x1cbc <free+0xa6>
    1c7a:	b3 83       	std	Z+3, r27	; 0x03
    1c7c:	a2 83       	std	Z+2, r26	; 0x02
    1c7e:	ef 01       	movw	r28, r30
    1c80:	49 91       	ld	r20, Y+
    1c82:	59 91       	ld	r21, Y+
    1c84:	9e 01       	movw	r18, r28
    1c86:	24 0f       	add	r18, r20
    1c88:	35 1f       	adc	r19, r21
    1c8a:	a2 17       	cp	r26, r18
    1c8c:	b3 07       	cpc	r27, r19
    1c8e:	79 f4       	brne	.+30     	; 0x1cae <free+0x98>
    1c90:	2d 91       	ld	r18, X+
    1c92:	3c 91       	ld	r19, X
    1c94:	11 97       	sbiw	r26, 0x01	; 1
    1c96:	24 0f       	add	r18, r20
    1c98:	35 1f       	adc	r19, r21
    1c9a:	2e 5f       	subi	r18, 0xFE	; 254
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	31 83       	std	Z+1, r19	; 0x01
    1ca0:	20 83       	st	Z, r18
    1ca2:	12 96       	adiw	r26, 0x02	; 2
    1ca4:	2d 91       	ld	r18, X+
    1ca6:	3c 91       	ld	r19, X
    1ca8:	13 97       	sbiw	r26, 0x03	; 3
    1caa:	33 83       	std	Z+3, r19	; 0x03
    1cac:	22 83       	std	Z+2, r18	; 0x02
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	29 f4       	brne	.+10     	; 0x1cbc <free+0xa6>
    1cb2:	f0 93 f0 03 	sts	0x03F0, r31
    1cb6:	e0 93 ef 03 	sts	0x03EF, r30
    1cba:	43 c0       	rjmp	.+134    	; 0x1d42 <free+0x12c>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	13 96       	adiw	r26, 0x03	; 3
    1cc0:	fc 93       	st	X, r31
    1cc2:	ee 93       	st	-X, r30
    1cc4:	12 97       	sbiw	r26, 0x02	; 2
    1cc6:	4d 91       	ld	r20, X+
    1cc8:	5d 91       	ld	r21, X+
    1cca:	a4 0f       	add	r26, r20
    1ccc:	b5 1f       	adc	r27, r21
    1cce:	ea 17       	cp	r30, r26
    1cd0:	fb 07       	cpc	r31, r27
    1cd2:	69 f4       	brne	.+26     	; 0x1cee <free+0xd8>
    1cd4:	20 81       	ld	r18, Z
    1cd6:	31 81       	ldd	r19, Z+1	; 0x01
    1cd8:	24 0f       	add	r18, r20
    1cda:	35 1f       	adc	r19, r21
    1cdc:	2e 5f       	subi	r18, 0xFE	; 254
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	39 83       	std	Y+1, r19	; 0x01
    1ce4:	28 83       	st	Y, r18
    1ce6:	22 81       	ldd	r18, Z+2	; 0x02
    1ce8:	33 81       	ldd	r19, Z+3	; 0x03
    1cea:	3b 83       	std	Y+3, r19	; 0x03
    1cec:	2a 83       	std	Y+2, r18	; 0x02
    1cee:	e0 e0       	ldi	r30, 0x00	; 0
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <free+0xe2>
    1cf4:	fb 01       	movw	r30, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	db 01       	movw	r26, r22
    1cfa:	12 96       	adiw	r26, 0x02	; 2
    1cfc:	8d 91       	ld	r24, X+
    1cfe:	9c 91       	ld	r25, X
    1d00:	13 97       	sbiw	r26, 0x03	; 3
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	b9 f7       	brne	.-18     	; 0x1cf4 <free+0xde>
    1d06:	9b 01       	movw	r18, r22
    1d08:	2e 5f       	subi	r18, 0xFE	; 254
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	8d 91       	ld	r24, X+
    1d0e:	9c 91       	ld	r25, X
    1d10:	11 97       	sbiw	r26, 0x01	; 1
    1d12:	82 0f       	add	r24, r18
    1d14:	93 1f       	adc	r25, r19
    1d16:	40 91 ed 03 	lds	r20, 0x03ED
    1d1a:	50 91 ee 03 	lds	r21, 0x03EE
    1d1e:	48 17       	cp	r20, r24
    1d20:	59 07       	cpc	r21, r25
    1d22:	79 f4       	brne	.+30     	; 0x1d42 <free+0x12c>
    1d24:	30 97       	sbiw	r30, 0x00	; 0
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <free+0x11c>
    1d28:	10 92 f0 03 	sts	0x03F0, r1
    1d2c:	10 92 ef 03 	sts	0x03EF, r1
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <free+0x120>
    1d32:	13 82       	std	Z+3, r1	; 0x03
    1d34:	12 82       	std	Z+2, r1	; 0x02
    1d36:	22 50       	subi	r18, 0x02	; 2
    1d38:	30 40       	sbci	r19, 0x00	; 0
    1d3a:	30 93 ee 03 	sts	0x03EE, r19
    1d3e:	20 93 ed 03 	sts	0x03ED, r18
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <memset>:
    1d48:	dc 01       	movw	r26, r24
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <memset+0x6>
    1d4c:	6d 93       	st	X+, r22
    1d4e:	41 50       	subi	r20, 0x01	; 1
    1d50:	50 40       	sbci	r21, 0x00	; 0
    1d52:	e0 f7       	brcc	.-8      	; 0x1d4c <memset+0x4>
    1d54:	08 95       	ret

00001d56 <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    1d56:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    1d5a:	08 95       	ret
    1d5c:	f8 94       	cli

00001d5e <__stop_program>:
    1d5e:	ff cf       	rjmp	.-2      	; 0x1d5e <__stop_program>
