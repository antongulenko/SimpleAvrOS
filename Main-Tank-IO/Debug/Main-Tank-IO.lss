
Main-Tank-IO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000294  00800100  000066f8  0000678c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800394  00800394  00006a20  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00006a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f3  00000000  00000000  00007290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000380  00000000  00000000  00007483  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002170  00000000  00000000  00007803  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006459  00000000  00000000  00009973  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d9c  00000000  00000000  0000fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005f99  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d10  00000000  00000000  00016b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000279b  00000000  00000000  00017814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000414f  00000000  00000000  00019faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0005c8e4  00000000  00000000  0001e0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000629  00000000  00000000  0007a9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e8  00000000  00000000  0007b00b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__vector_26>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_32>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ef       	ldi	r30, 0xF8	; 248
      a0:	f6 e6       	ldi	r31, 0x66	; 102
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 39       	cpi	r26, 0x94	; 148
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	16 e0       	ldi	r17, 0x06	; 6
      b4:	a4 e9       	ldi	r26, 0x94	; 148
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 3e       	cpi	r26, 0xE7	; 231
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 1d 01 	call	0x23a	; 0x23a <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 2d 01 	call	0x25a	; 0x25a <init_ports_m1284P>

000000ca <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      ca:	0e 94 3a 02 	call	0x474	; 0x474 <init_timer_m1284P>

000000ce <init_timer_kernel_init>:
	#define MILLISECOND_TIMER_VALUE ((uint16_t) 2500)
	
	setTimerCompareValue(Timer3A, MILLISECOND_TIMER_VALUE);
	setTimerCompareValue(Timer3B, MILLISECOND_TIMER_VALUE);
}
KERNEL_INIT(init_timer)
      ce:	0e 94 09 03 	call	0x612	; 0x612 <init_timer>

000000d2 <init_tank_leds_kernel_init>:
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
}
KERNEL_INIT(init_tank_leds)
      d2:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_tank_leds>

000000d6 <init_tank_buttons_kernel_init>:
	INIT_BUTTON(Button3, PinC3, TANK_BUTTON, 19)
	INIT_BUTTON(Button4, PinC2, TANK_BUTTON, 18)
	INIT_BUTTON(ButtonSwitch, PinD7, TANK_BUTTON, 31)
	buttonMutex = mutex_create();
}
KERNEL_INIT(init_tank_buttons)
      d6:	0e 94 3d 04 	call	0x87a	; 0x87a <init_tank_buttons>

000000da <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      da:	0e 94 f5 04 	call	0x9ea	; 0x9ea <init_twi>

000000de <tankIO_server_reset_register_function_kernel_init>:
void tankIO_server_reset() {
	initialized = FALSE; // In case the master queries this.
	HARDWARE_RESET();
}
// This is declared ASYNC to cleanly terminate the current TWI-connection.
TWI_RPC_SERVER_FUNCTION_ASYNC_NOTIFY	(tankIO_server_reset, TANK_IO_reset)
      de:	0e 94 c3 0b 	call	0x1786	; 0x1786 <tankIO_server_reset_register_function>

000000e2 <TANKIO_server_isInitialized_register_function_kernel_init>:

void TANKIO_server_isInitialized(TWIBuffer *result) {
	FILL_RESULT(result, initialized, BOOL)
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(TANKIO_server_isInitialized, TANK_IO_isInitialized, BOOL)
      e2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <TANKIO_server_isInitialized_register_function>

000000e6 <tankIO_server_buttonStatus_register_function_kernel_init>:

void tankIO_server_buttonStatus(TWIBuffer *result) {
	uint8_t buttons = buttonStatusMask();
	FILL_RESULT(result, buttons, uint8_t)
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_buttonStatus, TANK_IO_buttonStatus, uint8_t)
      e6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <tankIO_server_buttonStatus_register_function>

000000ea <tankIO_server_pressedButtons_register_function_kernel_init>:

void tankIO_server_pressedButtons(TWIBuffer *result) {
	uint8_t buttons = pressedButtons();
	FILL_RESULT(result, buttons, uint8_t)
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_pressedButtons, TANK_IO_pressedButtons, uint8_t)
      ea:	0e 94 77 11 	call	0x22ee	; 0x22ee <tankIO_server_pressedButtons_register_function>

000000ee <tankIO_server_enableLed_register_function_kernel_init>:
// ==

void tankIO_server_enableLed(SingleLed *led, uint16_t size) {
	enableLed(toLed(*led));
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_enableLed, TANK_IO_enableLed, SingleLed)
      ee:	0e 94 9c 13 	call	0x2738	; 0x2738 <tankIO_server_enableLed_register_function>

000000f2 <tankIO_server_disableLed_register_function_kernel_init>:

void tankIO_server_disableLed(SingleLed *led, uint16_t size) {
	disableLed(toLed(*led));
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_disableLed, TANK_IO_disableLed, SingleLed)
      f2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <tankIO_server_disableLed_register_function>

000000f6 <tankIO_server_setLed_register_function_kernel_init>:

void tankIO_server_setLed(SetLedParam *param, uint16_t size) {
	setLed(toLed(param->led), param->value);
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_setLed, TANK_IO_setLed, SetLedParam)
      f6:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <tankIO_server_setLed_register_function>

000000fa <tankIO_server_setLeds_register_function_kernel_init>:
// ==

void tankIO_server_setLeds(MaskedLeds *leds, uint16_t size) {
	setLeds(toLedGroup(leds->leds), leds->mask);
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_setLeds, TANK_IO_setLeds, MaskedLeds)
      fa:	0e 94 77 19 	call	0x32ee	; 0x32ee <tankIO_server_setLeds_register_function>

000000fe <tankIO_server_enableLeds_register_function_kernel_init>:

void tankIO_server_enableLeds(TankIoLeds *leds, uint16_t size) {
	enableLeds(toLedGroup(*leds));
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_enableLeds, TANK_IO_enableLeds, TankIoLeds)
      fe:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <tankIO_server_enableLeds_register_function>

00000102 <tankIO_server_disableLeds_register_function_kernel_init>:

void tankIO_server_disableLeds(TankIoLeds *leds, uint16_t size) {
	disableLeds(toLedGroup(*leds));
}
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_disableLeds, TANK_IO_disableLeds, TankIoLeds)
     102:	0e 94 65 1d 	call	0x3aca	; 0x3aca <tankIO_server_disableLeds_register_function>

00000106 <tankIO_server_blinkLed_register_function_kernel_init>:
// ==

void tankIO_server_blinkLed(BlinkLedParam *param, uint16_t size) {
	blinkLed(toLed(param->led), param->times);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
     106:	0e 94 57 1f 	call	0x3eae	; 0x3eae <tankIO_server_blinkLed_register_function>

0000010a <tankIO_server_blinkLeds_register_function_kernel_init>:

void tankIO_server_blinkLeds(BlinkLedsParam *param, uint16_t size) {
	blinkLeds(toLedGroup(param->leds.leds), param->leds.mask, param->times);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
     10a:	0e 94 51 21 	call	0x42a2	; 0x42a2 <tankIO_server_blinkLeds_register_function>

0000010e <tankIO_server_blinkAllLeds_register_function_kernel_init>:

void tankIO_server_blinkAllLeds(BlinkAllLedsParam *param, uint16_t size) {
	blinkAllLeds(toLedGroup(param->leds), param->times);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkAllLeds, TANK_IO_blinkAllLeds, BlinkAllLedsParam)
     10e:	0e 94 49 23 	call	0x4692	; 0x4692 <tankIO_server_blinkAllLeds_register_function>

00000112 <tankIO_server_flashLed_register_function_kernel_init>:
// ==

void tankIO_server_flashLed(FlashLedParam *param, uint16_t size) {
	flashLed(toLed(param->led), param->milliseconds);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_flashLed, TANK_IO_flashLed, FlashLedParam)
     112:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <tankIO_server_flashLed_register_function>

00000116 <tankIO_server_flashLeds_register_function_kernel_init>:

void tankIO_server_flashLeds(FlashLedsParam *param, uint16_t size) {
	flashLeds(toLedGroup(param->leds.leds), param->leds.mask, param->milliseconds);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_flashLeds, TANK_IO_flashLeds, FlashLedsParam)
     116:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <tankIO_server_flashLeds_register_function>

0000011a <tankIO_server_flashAllLeds_register_function_kernel_init>:

void tankIO_server_flashAllLeds(FlashAllLedsParam *param, uint16_t size) {
	flashAllLeds(toLedGroup(param->leds), param->milliseconds);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_flashAllLeds, TANK_IO_flashAllLeds, FlashAllLedsParam)
     11a:	0e 94 32 29 	call	0x5264	; 0x5264 <tankIO_server_flashAllLeds_register_function>

0000011e <tankIO_server_blinkByte_register_function_kernel_init>:
// ==

void tankIO_server_blinkByte(BlinkByteParam *param, uint16_t size) {
	blinkByte(toLedGroup(param->display), toLedGroup(param->notifier), param->data);
}
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkByte, TANK_IO_blinkByte, BlinkByteParam)
     11e:	0e 94 39 2b 	call	0x5672	; 0x5672 <tankIO_server_blinkByte_register_function>

00000122 <init_kernel_kernel_init>:
	#ifdef TIMER_INTERRUPT_B
	enableTimerInterrupt(CLOCKTIMER_B);
	#endif
	sei();
}
KERNEL_INIT(init_kernel)
     122:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <init_kernel>

00000126 <tankIO_system_initialized_kernel_init>:
#include "tank_IO_server.kernel.h"
#include "shared/base_after.kernel.h"

// Set TWI-interface online, after all other initialization.
// Function defined in tank_IO_server.kernel.h
KERNEL_INIT(tankIO_system_initialized)
     126:	86 ed       	ldi	r24, 0xD6	; 214
     128:	80 93 9e 03 	sts	0x039E, r24
     12c:	0e 94 7a 2d 	call	0x5af4	; 0x5af4 <main>
     130:	0c 94 77 33 	jmp	0x66ee	; 0x66ee <MainProcessEnd>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <twi_stop>:
	twi_continue();
}

static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
     138:	85 ed       	ldi	r24, 0xD5	; 213
     13a:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     13e:	80 91 dd 01 	lds	r24, 0x01DD
     142:	90 91 de 01 	lds	r25, 0x01DE
     146:	a0 91 df 01 	lds	r26, 0x01DF
     14a:	b0 91 e0 01 	lds	r27, 0x01E0
     14e:	80 93 6b 06 	sts	0x066B, r24
     152:	90 93 6c 06 	sts	0x066C, r25
     156:	a0 93 6d 06 	sts	0x066D, r26
     15a:	b0 93 6e 06 	sts	0x066E, r27
	#else
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
     15e:	10 92 77 06 	sts	0x0677, r1
     162:	10 92 76 06 	sts	0x0676, r1
}
     166:	08 95       	ret

00000168 <twi_end>:
	}
}

static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
     168:	85 ec       	ldi	r24, 0xC5	; 197
     16a:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     16e:	80 91 dd 01 	lds	r24, 0x01DD
     172:	90 91 de 01 	lds	r25, 0x01DE
     176:	a0 91 df 01 	lds	r26, 0x01DF
     17a:	b0 91 e0 01 	lds	r27, 0x01E0
     17e:	80 93 6b 06 	sts	0x066B, r24
     182:	90 93 6c 06 	sts	0x066C, r25
     186:	a0 93 6d 06 	sts	0x066D, r26
     18a:	b0 93 6e 06 	sts	0x066E, r27
	#else
		twi_base;
	#endif
	twi_running = FALSE;
     18e:	10 92 77 06 	sts	0x0677, r1
     192:	10 92 76 06 	sts	0x0676, r1
}
     196:	08 95       	ret

00000198 <twi_ack_receive>:

static inline void twi_ack_receive() {
	// Directly after a (repeated) start condition, in MR mode,
	// buffer size 0 and 1 both lead to a NACK of the first received byte.
	// In case of buffer size 0, this byte will be 'useless'.
	if (alreadyHandled + 1 < twi_buffer.size) {
     198:	80 91 1b 06 	lds	r24, 0x061B
     19c:	90 91 1c 06 	lds	r25, 0x061C
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	20 91 6d 06 	lds	r18, 0x066D
     1a6:	30 91 6e 06 	lds	r19, 0x066E
     1aa:	82 17       	cp	r24, r18
     1ac:	93 07       	cpc	r25, r19
     1ae:	10 f4       	brcc	.+4      	; 0x1b4 <twi_ack_receive+0x1c>
		twi_ack(); // Still more than one byte to go.
     1b0:	85 ec       	ldi	r24, 0xC5	; 197
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <twi_ack_receive+0x1e>
	} else {
		twi_continue();  // Want to receive one more byte. Next byte will get NOT ACK.
     1b4:	85 e8       	ldi	r24, 0x85	; 133
     1b6:	80 93 bc 00 	sts	0x00BC, r24
     1ba:	08 95       	ret

000001bc <twi_read_byte>:
	
	// Additional if-guard necessary, e.g. if the receive-buffer size
	// is zero (because in Master-Receiver mode, we have to receive
	// AT LEAST one byte, so we will end up here, even if the receive-
	// buffer has no space at all reserved. Fix by skipping this byte).
	if (alreadyHandled < twi_buffer.size)
     1bc:	80 91 1b 06 	lds	r24, 0x061B
     1c0:	90 91 1c 06 	lds	r25, 0x061C
     1c4:	20 91 6d 06 	lds	r18, 0x066D
     1c8:	30 91 6e 06 	lds	r19, 0x066E
     1cc:	82 17       	cp	r24, r18
     1ce:	93 07       	cpc	r25, r19
     1d0:	70 f4       	brcc	.+28     	; 0x1ee <twi_read_byte+0x32>
		twi_buffer.data[alreadyHandled++] = TWDR;
     1d2:	20 91 bb 00 	lds	r18, 0x00BB
     1d6:	e0 91 6b 06 	lds	r30, 0x066B
     1da:	f0 91 6c 06 	lds	r31, 0x066C
     1de:	e8 0f       	add	r30, r24
     1e0:	f9 1f       	adc	r31, r25
     1e2:	20 83       	st	Z, r18
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	90 93 1c 06 	sts	0x061C, r25
     1ea:	80 93 1b 06 	sts	0x061B, r24
     1ee:	08 95       	ret

000001f0 <TANKIO_server_isInitialized_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_NOTIFY	(tankIO_server_reset, TANK_IO_reset)

void TANKIO_server_isInitialized(TWIBuffer *result) {
	FILL_RESULT(result, initialized, BOOL)
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(TANKIO_server_isInitialized, TANK_IO_isInitialized, BOOL)
     1f0:	fc 01       	movw	r30, r24
}
// This is declared ASYNC to cleanly terminate the current TWI-connection.
TWI_RPC_SERVER_FUNCTION_ASYNC_NOTIFY	(tankIO_server_reset, TANK_IO_reset)

void TANKIO_server_isInitialized(TWIBuffer *result) {
	FILL_RESULT(result, initialized, BOOL)
     1f2:	a0 81       	ld	r26, Z
     1f4:	b1 81       	ldd	r27, Z+1	; 0x01
     1f6:	80 91 9e 03 	lds	r24, 0x039E
     1fa:	8c 93       	st	X, r24
     1fc:	11 96       	adiw	r26, 0x01	; 1
     1fe:	1c 92       	st	X, r1
     200:	11 97       	sbiw	r26, 0x01	; 1
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	93 83       	std	Z+3, r25	; 0x03
     208:	82 83       	std	Z+2, r24	; 0x02
}
TWI_RPC_SERVER_FUNCTION_NOARGS	(TANKIO_server_isInitialized, TANK_IO_isInitialized, BOOL)
     20a:	08 95       	ret

0000020c <fillSendBuffer>:
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
	}
#endif

static inline void fillSendBuffer(byte operation, TWIBuffer parameters) {
     20c:	9b 01       	movw	r18, r22
	sendBuffer.data[0] = operation;
     20e:	e0 91 e1 01 	lds	r30, 0x01E1
     212:	f0 91 e2 01 	lds	r31, 0x01E2
     216:	80 83       	st	Z, r24
	sendBuffer.size = parameters.size + 1;
     218:	cb 01       	movw	r24, r22
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	90 93 e4 01 	sts	0x01E4, r25
     220:	80 93 e3 01 	sts	0x01E3, r24
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
     224:	e0 91 e1 01 	lds	r30, 0x01E1
     228:	f0 91 e2 01 	lds	r31, 0x01E2
     22c:	31 96       	adiw	r30, 0x01	; 1
     22e:	cf 01       	movw	r24, r30
     230:	ba 01       	movw	r22, r20
     232:	a9 01       	movw	r20, r18
     234:	0e 94 67 33 	call	0x66ce	; 0x66ce <memcpy>
}
     238:	08 95       	ret

0000023a <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     23a:	84 b7       	in	r24, 0x34	; 52
     23c:	80 93 94 03 	sts	0x0394, r24
	MCUSR = 0;
     240:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     242:	88 e1       	ldi	r24, 0x18	; 24
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	80 93 60 00 	sts	0x0060, r24
     24c:	10 92 60 00 	sts	0x0060, r1
     250:	0f be       	out	0x3f, r0	; 63
	#endif
}
     252:	08 95       	ret

00000254 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     254:	80 91 94 03 	lds	r24, 0x0394
     258:	08 95       	ret

0000025a <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     25a:	ae e9       	ldi	r26, 0x9E	; 158
     25c:	b6 e0       	ldi	r27, 0x06	; 6
     25e:	e8 e6       	ldi	r30, 0x68	; 104
     260:	f3 e0       	ldi	r31, 0x03	; 3
     262:	86 e0       	ldi	r24, 0x06	; 6
     264:	01 90       	ld	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	81 50       	subi	r24, 0x01	; 1
     26a:	e1 f7       	brne	.-8      	; 0x264 <init_ports_m1284P+0xa>
     26c:	8e e9       	ldi	r24, 0x9E	; 158
     26e:	96 e0       	ldi	r25, 0x06	; 6
     270:	90 93 42 06 	sts	0x0642, r25
     274:	80 93 41 06 	sts	0x0641, r24
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	20 93 43 06 	sts	0x0643, r18
     27e:	90 93 cf 05 	sts	0x05CF, r25
     282:	80 93 ce 05 	sts	0x05CE, r24
     286:	22 e0       	ldi	r18, 0x02	; 2
     288:	20 93 d0 05 	sts	0x05D0, r18
     28c:	90 93 9c 06 	sts	0x069C, r25
     290:	80 93 9b 06 	sts	0x069B, r24
     294:	24 e0       	ldi	r18, 0x04	; 4
     296:	20 93 9d 06 	sts	0x069D, r18
     29a:	90 93 70 06 	sts	0x0670, r25
     29e:	80 93 6f 06 	sts	0x066F, r24
     2a2:	28 e0       	ldi	r18, 0x08	; 8
     2a4:	20 93 71 06 	sts	0x0671, r18
     2a8:	90 93 0d 06 	sts	0x060D, r25
     2ac:	80 93 0c 06 	sts	0x060C, r24
     2b0:	20 e1       	ldi	r18, 0x10	; 16
     2b2:	20 93 0e 06 	sts	0x060E, r18
     2b6:	90 93 ab 03 	sts	0x03AB, r25
     2ba:	80 93 aa 03 	sts	0x03AA, r24
     2be:	20 e2       	ldi	r18, 0x20	; 32
     2c0:	20 93 ac 03 	sts	0x03AC, r18
     2c4:	90 93 c3 03 	sts	0x03C3, r25
     2c8:	80 93 c2 03 	sts	0x03C2, r24
     2cc:	20 e4       	ldi	r18, 0x40	; 64
     2ce:	20 93 c4 03 	sts	0x03C4, r18
     2d2:	90 93 25 06 	sts	0x0625, r25
     2d6:	80 93 24 06 	sts	0x0624, r24
     2da:	80 e8       	ldi	r24, 0x80	; 128
     2dc:	80 93 26 06 	sts	0x0626, r24
	INIT_PORT_AND_PINS(B);
     2e0:	a2 e1       	ldi	r26, 0x12	; 18
     2e2:	b6 e0       	ldi	r27, 0x06	; 6
     2e4:	e2 e6       	ldi	r30, 0x62	; 98
     2e6:	f3 e0       	ldi	r31, 0x03	; 3
     2e8:	86 e0       	ldi	r24, 0x06	; 6
     2ea:	01 90       	ld	r0, Z+
     2ec:	0d 92       	st	X+, r0
     2ee:	81 50       	subi	r24, 0x01	; 1
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <init_ports_m1284P+0x90>
     2f2:	82 e1       	ldi	r24, 0x12	; 18
     2f4:	96 e0       	ldi	r25, 0x06	; 6
     2f6:	90 93 8a 06 	sts	0x068A, r25
     2fa:	80 93 89 06 	sts	0x0689, r24
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	20 93 8b 06 	sts	0x068B, r18
     304:	90 93 22 06 	sts	0x0622, r25
     308:	80 93 21 06 	sts	0x0621, r24
     30c:	22 e0       	ldi	r18, 0x02	; 2
     30e:	20 93 23 06 	sts	0x0623, r18
     312:	90 93 cb 03 	sts	0x03CB, r25
     316:	80 93 ca 03 	sts	0x03CA, r24
     31a:	24 e0       	ldi	r18, 0x04	; 4
     31c:	20 93 cc 03 	sts	0x03CC, r18
     320:	90 93 a5 06 	sts	0x06A5, r25
     324:	80 93 a4 06 	sts	0x06A4, r24
     328:	28 e0       	ldi	r18, 0x08	; 8
     32a:	20 93 a6 06 	sts	0x06A6, r18
     32e:	90 93 8d 06 	sts	0x068D, r25
     332:	80 93 8c 06 	sts	0x068C, r24
     336:	20 e1       	ldi	r18, 0x10	; 16
     338:	20 93 8e 06 	sts	0x068E, r18
     33c:	90 93 69 06 	sts	0x0669, r25
     340:	80 93 68 06 	sts	0x0668, r24
     344:	20 e2       	ldi	r18, 0x20	; 32
     346:	20 93 6a 06 	sts	0x066A, r18
     34a:	90 93 d7 06 	sts	0x06D7, r25
     34e:	80 93 d6 06 	sts	0x06D6, r24
     352:	20 e4       	ldi	r18, 0x40	; 64
     354:	20 93 d8 06 	sts	0x06D8, r18
     358:	90 93 2a 06 	sts	0x062A, r25
     35c:	80 93 29 06 	sts	0x0629, r24
     360:	80 e8       	ldi	r24, 0x80	; 128
     362:	80 93 2b 06 	sts	0x062B, r24
	INIT_PORT_AND_PINS(C);
     366:	ac e2       	ldi	r26, 0x2C	; 44
     368:	b6 e0       	ldi	r27, 0x06	; 6
     36a:	ec e5       	ldi	r30, 0x5C	; 92
     36c:	f3 e0       	ldi	r31, 0x03	; 3
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	01 90       	ld	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	81 50       	subi	r24, 0x01	; 1
     376:	e1 f7       	brne	.-8      	; 0x370 <init_ports_m1284P+0x116>
     378:	8c e2       	ldi	r24, 0x2C	; 44
     37a:	96 e0       	ldi	r25, 0x06	; 6
     37c:	90 93 19 06 	sts	0x0619, r25
     380:	80 93 18 06 	sts	0x0618, r24
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	20 93 1a 06 	sts	0x061A, r18
     38a:	90 93 b1 03 	sts	0x03B1, r25
     38e:	80 93 b0 03 	sts	0x03B0, r24
     392:	22 e0       	ldi	r18, 0x02	; 2
     394:	20 93 b2 03 	sts	0x03B2, r18
     398:	90 93 eb 05 	sts	0x05EB, r25
     39c:	80 93 ea 05 	sts	0x05EA, r24
     3a0:	24 e0       	ldi	r18, 0x04	; 4
     3a2:	20 93 ec 05 	sts	0x05EC, r18
     3a6:	90 93 0a 06 	sts	0x060A, r25
     3aa:	80 93 09 06 	sts	0x0609, r24
     3ae:	28 e0       	ldi	r18, 0x08	; 8
     3b0:	20 93 0b 06 	sts	0x060B, r18
     3b4:	90 93 b4 03 	sts	0x03B4, r25
     3b8:	80 93 b3 03 	sts	0x03B3, r24
     3bc:	20 e1       	ldi	r18, 0x10	; 16
     3be:	20 93 b5 03 	sts	0x03B5, r18
     3c2:	90 93 10 06 	sts	0x0610, r25
     3c6:	80 93 0f 06 	sts	0x060F, r24
     3ca:	20 e2       	ldi	r18, 0x20	; 32
     3cc:	20 93 11 06 	sts	0x0611, r18
     3d0:	90 93 50 06 	sts	0x0650, r25
     3d4:	80 93 4f 06 	sts	0x064F, r24
     3d8:	20 e4       	ldi	r18, 0x40	; 64
     3da:	20 93 51 06 	sts	0x0651, r18
     3de:	90 93 bd 03 	sts	0x03BD, r25
     3e2:	80 93 bc 03 	sts	0x03BC, r24
     3e6:	80 e8       	ldi	r24, 0x80	; 128
     3e8:	80 93 be 03 	sts	0x03BE, r24
	INIT_PORT_AND_PINS(D);
     3ec:	ad ee       	ldi	r26, 0xED	; 237
     3ee:	b5 e0       	ldi	r27, 0x05	; 5
     3f0:	e6 e5       	ldi	r30, 0x56	; 86
     3f2:	f3 e0       	ldi	r31, 0x03	; 3
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	01 90       	ld	r0, Z+
     3f8:	0d 92       	st	X+, r0
     3fa:	81 50       	subi	r24, 0x01	; 1
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <init_ports_m1284P+0x19c>
     3fe:	8d ee       	ldi	r24, 0xED	; 237
     400:	95 e0       	ldi	r25, 0x05	; 5
     402:	90 93 ce 03 	sts	0x03CE, r25
     406:	80 93 cd 03 	sts	0x03CD, r24
     40a:	21 e0       	ldi	r18, 0x01	; 1
     40c:	20 93 cf 03 	sts	0x03CF, r18
     410:	90 93 c5 06 	sts	0x06C5, r25
     414:	80 93 c4 06 	sts	0x06C4, r24
     418:	22 e0       	ldi	r18, 0x02	; 2
     41a:	20 93 c6 06 	sts	0x06C6, r18
     41e:	90 93 45 06 	sts	0x0645, r25
     422:	80 93 44 06 	sts	0x0644, r24
     426:	24 e0       	ldi	r18, 0x04	; 4
     428:	20 93 46 06 	sts	0x0646, r18
     42c:	90 93 7d 06 	sts	0x067D, r25
     430:	80 93 7c 06 	sts	0x067C, r24
     434:	28 e0       	ldi	r18, 0x08	; 8
     436:	20 93 7e 06 	sts	0x067E, r18
     43a:	90 93 5f 06 	sts	0x065F, r25
     43e:	80 93 5e 06 	sts	0x065E, r24
     442:	20 e1       	ldi	r18, 0x10	; 16
     444:	20 93 60 06 	sts	0x0660, r18
     448:	90 93 3d 06 	sts	0x063D, r25
     44c:	80 93 3c 06 	sts	0x063C, r24
     450:	20 e2       	ldi	r18, 0x20	; 32
     452:	20 93 3e 06 	sts	0x063E, r18
     456:	90 93 92 06 	sts	0x0692, r25
     45a:	80 93 91 06 	sts	0x0691, r24
     45e:	20 e4       	ldi	r18, 0x40	; 64
     460:	20 93 93 06 	sts	0x0693, r18
     464:	90 93 ae 03 	sts	0x03AE, r25
     468:	80 93 ad 03 	sts	0x03AD, r24
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	80 93 af 03 	sts	0x03AF, r24
}
     472:	08 95       	ret

00000474 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     474:	a2 e8       	ldi	r26, 0x82	; 130
     476:	b6 e0       	ldi	r27, 0x06	; 6
     478:	ef e4       	ldi	r30, 0x4F	; 79
     47a:	f3 e0       	ldi	r31, 0x03	; 3
     47c:	87 e0       	ldi	r24, 0x07	; 7
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	81 50       	subi	r24, 0x01	; 1
     484:	e1 f7       	brne	.-8      	; 0x47e <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     486:	a3 ee       	ldi	r26, 0xE3	; 227
     488:	b5 e0       	ldi	r27, 0x05	; 5
     48a:	e8 e4       	ldi	r30, 0x48	; 72
     48c:	f3 e0       	ldi	r31, 0x03	; 3
     48e:	87 e0       	ldi	r24, 0x07	; 7
     490:	01 90       	ld	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	81 50       	subi	r24, 0x01	; 1
     496:	e1 f7       	brne	.-8      	; 0x490 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     498:	a3 ef       	ldi	r26, 0xF3	; 243
     49a:	b5 e0       	ldi	r27, 0x05	; 5
     49c:	e1 e4       	ldi	r30, 0x41	; 65
     49e:	f3 e0       	ldi	r31, 0x03	; 3
     4a0:	87 e0       	ldi	r24, 0x07	; 7
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	81 50       	subi	r24, 0x01	; 1
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     4aa:	aa ef       	ldi	r26, 0xFA	; 250
     4ac:	b5 e0       	ldi	r27, 0x05	; 5
     4ae:	ea e3       	ldi	r30, 0x3A	; 58
     4b0:	f3 e0       	ldi	r31, 0x03	; 3
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	01 90       	ld	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	81 50       	subi	r24, 0x01	; 1
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     4bc:	82 e8       	ldi	r24, 0x82	; 130
     4be:	96 e0       	ldi	r25, 0x06	; 6
     4c0:	90 93 dc 06 	sts	0x06DC, r25
     4c4:	80 93 db 06 	sts	0x06DB, r24
     4c8:	27 e4       	ldi	r18, 0x47	; 71
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	30 93 de 06 	sts	0x06DE, r19
     4d0:	20 93 dd 06 	sts	0x06DD, r18
     4d4:	10 92 e0 06 	sts	0x06E0, r1
     4d8:	10 92 df 06 	sts	0x06DF, r1
     4dc:	24 ea       	ldi	r18, 0xA4	; 164
     4de:	36 e0       	ldi	r19, 0x06	; 6
     4e0:	30 93 e2 06 	sts	0x06E2, r19
     4e4:	20 93 e1 06 	sts	0x06E1, r18
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     4e8:	90 93 02 06 	sts	0x0602, r25
     4ec:	80 93 01 06 	sts	0x0601, r24
     4f0:	88 e4       	ldi	r24, 0x48	; 72
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	90 93 04 06 	sts	0x0604, r25
     4f8:	80 93 03 06 	sts	0x0603, r24
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	90 93 06 06 	sts	0x0606, r25
     504:	80 93 05 06 	sts	0x0605, r24
     508:	2c e8       	ldi	r18, 0x8C	; 140
     50a:	36 e0       	ldi	r19, 0x06	; 6
     50c:	30 93 08 06 	sts	0x0608, r19
     510:	20 93 07 06 	sts	0x0607, r18
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     514:	23 ee       	ldi	r18, 0xE3	; 227
     516:	35 e0       	ldi	r19, 0x05	; 5
     518:	30 93 da 05 	sts	0x05DA, r19
     51c:	20 93 d9 05 	sts	0x05D9, r18
     520:	48 e8       	ldi	r20, 0x88	; 136
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	50 93 dc 05 	sts	0x05DC, r21
     528:	40 93 db 05 	sts	0x05DB, r20
     52c:	10 92 de 05 	sts	0x05DE, r1
     530:	10 92 dd 05 	sts	0x05DD, r1
     534:	4c e3       	ldi	r20, 0x3C	; 60
     536:	56 e0       	ldi	r21, 0x06	; 6
     538:	50 93 e0 05 	sts	0x05E0, r21
     53c:	40 93 df 05 	sts	0x05DF, r20
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     540:	30 93 33 06 	sts	0x0633, r19
     544:	20 93 32 06 	sts	0x0632, r18
     548:	2a e8       	ldi	r18, 0x8A	; 138
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	30 93 35 06 	sts	0x0635, r19
     550:	20 93 34 06 	sts	0x0634, r18
     554:	90 93 37 06 	sts	0x0637, r25
     558:	80 93 36 06 	sts	0x0636, r24
     55c:	2e e5       	ldi	r18, 0x5E	; 94
     55e:	36 e0       	ldi	r19, 0x06	; 6
     560:	30 93 39 06 	sts	0x0639, r19
     564:	20 93 38 06 	sts	0x0638, r18
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     568:	23 ef       	ldi	r18, 0xF3	; 243
     56a:	35 e0       	ldi	r19, 0x05	; 5
     56c:	30 93 c8 06 	sts	0x06C8, r19
     570:	20 93 c7 06 	sts	0x06C7, r18
     574:	43 eb       	ldi	r20, 0xB3	; 179
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	50 93 ca 06 	sts	0x06CA, r21
     57c:	40 93 c9 06 	sts	0x06C9, r20
     580:	10 92 cc 06 	sts	0x06CC, r1
     584:	10 92 cb 06 	sts	0x06CB, r1
     588:	4d ea       	ldi	r20, 0xAD	; 173
     58a:	53 e0       	ldi	r21, 0x03	; 3
     58c:	50 93 ce 06 	sts	0x06CE, r21
     590:	40 93 cd 06 	sts	0x06CD, r20
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     594:	30 93 48 06 	sts	0x0648, r19
     598:	20 93 47 06 	sts	0x0647, r18
     59c:	24 eb       	ldi	r18, 0xB4	; 180
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	30 93 4a 06 	sts	0x064A, r19
     5a4:	20 93 49 06 	sts	0x0649, r18
     5a8:	90 93 4c 06 	sts	0x064C, r25
     5ac:	80 93 4b 06 	sts	0x064B, r24
     5b0:	21 e9       	ldi	r18, 0x91	; 145
     5b2:	36 e0       	ldi	r19, 0x06	; 6
     5b4:	30 93 4e 06 	sts	0x064E, r19
     5b8:	20 93 4d 06 	sts	0x064D, r18
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     5bc:	2a ef       	ldi	r18, 0xFA	; 250
     5be:	35 e0       	ldi	r19, 0x05	; 5
     5c0:	30 93 d2 05 	sts	0x05D2, r19
     5c4:	20 93 d1 05 	sts	0x05D1, r18
     5c8:	48 e9       	ldi	r20, 0x98	; 152
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	50 93 d4 05 	sts	0x05D4, r21
     5d0:	40 93 d3 05 	sts	0x05D3, r20
     5d4:	10 92 d6 05 	sts	0x05D6, r1
     5d8:	10 92 d5 05 	sts	0x05D5, r1
     5dc:	46 ed       	ldi	r20, 0xD6	; 214
     5de:	56 e0       	ldi	r21, 0x06	; 6
     5e0:	50 93 d8 05 	sts	0x05D8, r21
     5e4:	40 93 d7 05 	sts	0x05D7, r20
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     5e8:	30 93 53 06 	sts	0x0653, r19
     5ec:	20 93 52 06 	sts	0x0652, r18
     5f0:	2a e9       	ldi	r18, 0x9A	; 154
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	30 93 55 06 	sts	0x0655, r19
     5f8:	20 93 54 06 	sts	0x0654, r18
     5fc:	90 93 57 06 	sts	0x0657, r25
     600:	80 93 56 06 	sts	0x0656, r24
     604:	89 e2       	ldi	r24, 0x29	; 41
     606:	96 e0       	ldi	r25, 0x06	; 6
     608:	90 93 59 06 	sts	0x0659, r25
     60c:	80 93 58 06 	sts	0x0658, r24
}
     610:	08 95       	ret

00000612 <init_timer>:
#define CLOCKISR_A TIMER3_COMPA_vect
#define CLOCKISR_B TIMER3_COMPB_vect
#define CLOCKTIMER_A Timer3A
#define CLOCKTIMER_B Timer3B

void init_timer() {
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
	setWaveformGenerationMode(Timer3, clear_timer_on_match);
     616:	ca ef       	ldi	r28, 0xFA	; 250
     618:	d5 e0       	ldi	r29, 0x05	; 5
     61a:	ce 01       	movw	r24, r28
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	0e 94 c0 30 	call	0x6180	; 0x6180 <setWaveformGenerationMode>
	setTimerClockSelect(Timer3, prescale_8);
     624:	ce 01       	movw	r24, r28
     626:	62 e0       	ldi	r22, 0x02	; 2
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <setTimerClockSelect>
	
	// --> 8 * 2500 = 20000 @ 20MHz
	// results in one compare-match every millisecond.
	#define MILLISECOND_TIMER_VALUE ((uint16_t) 2500)
	
	setTimerCompareValue(Timer3A, MILLISECOND_TIMER_VALUE);
     62e:	81 ed       	ldi	r24, 0xD1	; 209
     630:	95 e0       	ldi	r25, 0x05	; 5
     632:	64 ec       	ldi	r22, 0xC4	; 196
     634:	79 e0       	ldi	r23, 0x09	; 9
     636:	0e 94 93 31 	call	0x6326	; 0x6326 <setTimerCompareValue>
	setTimerCompareValue(Timer3B, MILLISECOND_TIMER_VALUE);
     63a:	82 e5       	ldi	r24, 0x52	; 82
     63c:	96 e0       	ldi	r25, 0x06	; 6
     63e:	64 ec       	ldi	r22, 0xC4	; 196
     640:	79 e0       	ldi	r23, 0x09	; 9
     642:	0e 94 93 31 	call	0x6326	; 0x6326 <setTimerCompareValue>
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     64c:	08 95       	ret

0000064e <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increase the milliseconds_running value.

TIMER_TICK_ISR {
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	0b b6       	in	r0, 0x3b	; 59
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	2f 93       	push	r18
     65e:	3f 93       	push	r19
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	6f 93       	push	r22
     666:	7f 93       	push	r23
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27
     670:	ef 93       	push	r30
     672:	ff 93       	push	r31
	TIMER_TICK_ACTION
     674:	80 91 95 03 	lds	r24, 0x0395
     678:	90 91 96 03 	lds	r25, 0x0396
     67c:	a0 91 97 03 	lds	r26, 0x0397
     680:	b0 91 98 03 	lds	r27, 0x0398
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	a1 1d       	adc	r26, r1
     688:	b1 1d       	adc	r27, r1
     68a:	80 93 95 03 	sts	0x0395, r24
     68e:	90 93 96 03 	sts	0x0396, r25
     692:	a0 93 97 03 	sts	0x0397, r26
     696:	b0 93 98 03 	sts	0x0398, r27
     69a:	0e 94 26 03 	call	0x64c	; 0x64c <in_timer_tick>
}
     69e:	ff 91       	pop	r31
     6a0:	ef 91       	pop	r30
     6a2:	bf 91       	pop	r27
     6a4:	af 91       	pop	r26
     6a6:	9f 91       	pop	r25
     6a8:	8f 91       	pop	r24
     6aa:	7f 91       	pop	r23
     6ac:	6f 91       	pop	r22
     6ae:	5f 91       	pop	r21
     6b0:	4f 91       	pop	r20
     6b2:	3f 91       	pop	r19
     6b4:	2f 91       	pop	r18
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <mutex_create>:
typedef struct {
	BOOL interruptsWereEnabled;
} AtomicMutex;

Mutex mutex_create() {
	return (Mutex) malloc(sizeof(AtomicMutex));
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
}
     6cc:	08 95       	ret

000006ce <mutex_lock>:

void mutex_lock(Mutex mutex) {
	((AtomicMutex *) mutex)->interruptsWereEnabled = SREG & _BV(7);
     6ce:	2f b7       	in	r18, 0x3f	; 63
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	20 78       	andi	r18, 0x80	; 128
     6d4:	30 70       	andi	r19, 0x00	; 0
     6d6:	fc 01       	movw	r30, r24
     6d8:	31 83       	std	Z+1, r19	; 0x01
     6da:	20 83       	st	Z, r18
	cli();
     6dc:	f8 94       	cli
}
     6de:	08 95       	ret

000006e0 <mutex_trylock>:

BOOL mutex_trylock(Mutex mutex) {
	mutex_lock(mutex);
     6e0:	0e 94 67 03 	call	0x6ce	; 0x6ce <mutex_lock>
	return TRUE;
}
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	08 95       	ret

000006ea <mutex_release>:

void mutex_release(Mutex mutex) {
	// if (((AtomicMutex *) mutex)->interruptsWereEnabled)
		sei();
     6ea:	78 94       	sei
}
     6ec:	08 95       	ret

000006ee <init_tank_leds>:
				&White1_, &White2_, &White3_, &White4_, &White5_,
				&Green1_, &Green2_, &Green3_, &Yellow1_, &Yellow2_,
				&Red1_, &Red2_, &Red3_, &Red4_, &Red5_ };

void init_tank_leds() {
	INIT_LED(White1, PinB0)
     6ee:	89 e8       	ldi	r24, 0x89	; 137
     6f0:	96 e0       	ldi	r25, 0x06	; 6
     6f2:	90 93 5d 06 	sts	0x065D, r25
     6f6:	80 93 5c 06 	sts	0x065C, r24

#include "../kernel_init.h"
#include "led.h"

static void initLed(PLed led) {
	setPinOutput(led->pin);
     6fa:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(White2, PinB1)
     6fe:	81 e2       	ldi	r24, 0x21	; 33
     700:	96 e0       	ldi	r25, 0x06	; 6
     702:	90 93 95 06 	sts	0x0695, r25
     706:	80 93 94 06 	sts	0x0694, r24
     70a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(White3, PinB2)
     70e:	8a ec       	ldi	r24, 0xCA	; 202
     710:	93 e0       	ldi	r25, 0x03	; 3
     712:	90 93 da 06 	sts	0x06DA, r25
     716:	80 93 d9 06 	sts	0x06D9, r24
     71a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(White4, PinB3)
     71e:	84 ea       	ldi	r24, 0xA4	; 164
     720:	96 e0       	ldi	r25, 0x06	; 6
     722:	90 93 c6 03 	sts	0x03C6, r25
     726:	80 93 c5 03 	sts	0x03C5, r24
     72a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(White5, PinB4)
     72e:	8c e8       	ldi	r24, 0x8C	; 140
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	90 93 40 06 	sts	0x0640, r25
     736:	80 93 3f 06 	sts	0x063F, r24
     73a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>

	INIT_LED(Green1, PinB5)
     73e:	88 e6       	ldi	r24, 0x68	; 104
     740:	96 e0       	ldi	r25, 0x06	; 6
     742:	90 93 bb 03 	sts	0x03BB, r25
     746:	80 93 ba 03 	sts	0x03BA, r24
     74a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Green2, PinB6)
     74e:	86 ed       	ldi	r24, 0xD6	; 214
     750:	96 e0       	ldi	r25, 0x06	; 6
     752:	90 93 20 06 	sts	0x0620, r25
     756:	80 93 1f 06 	sts	0x061F, r24
     75a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Green3, PinB7)
     75e:	89 e2       	ldi	r24, 0x29	; 41
     760:	96 e0       	ldi	r25, 0x06	; 6
     762:	90 93 aa 06 	sts	0x06AA, r25
     766:	80 93 a9 06 	sts	0x06A9, r24
     76a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Yellow1, PinD0)
     76e:	8d ec       	ldi	r24, 0xCD	; 205
     770:	93 e0       	ldi	r25, 0x03	; 3
     772:	90 93 9a 06 	sts	0x069A, r25
     776:	80 93 99 06 	sts	0x0699, r24
     77a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Yellow2, PinD1)
     77e:	84 ec       	ldi	r24, 0xC4	; 196
     780:	96 e0       	ldi	r25, 0x06	; 6
     782:	90 93 62 06 	sts	0x0662, r25
     786:	80 93 61 06 	sts	0x0661, r24
     78a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>

	INIT_LED(Red1, PinD2)
     78e:	84 e4       	ldi	r24, 0x44	; 68
     790:	96 e0       	ldi	r25, 0x06	; 6
     792:	90 93 e2 05 	sts	0x05E2, r25
     796:	80 93 e1 05 	sts	0x05E1, r24
     79a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Red2, PinD3)
     79e:	8c e7       	ldi	r24, 0x7C	; 124
     7a0:	96 e0       	ldi	r25, 0x06	; 6
     7a2:	90 93 a8 06 	sts	0x06A8, r25
     7a6:	80 93 a7 06 	sts	0x06A7, r24
     7aa:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Red3, PinD4)
     7ae:	8e e5       	ldi	r24, 0x5E	; 94
     7b0:	96 e0       	ldi	r25, 0x06	; 6
     7b2:	90 93 28 06 	sts	0x0628, r25
     7b6:	80 93 27 06 	sts	0x0627, r24
     7ba:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Red4, PinD5)
     7be:	8c e3       	ldi	r24, 0x3C	; 60
     7c0:	96 e0       	ldi	r25, 0x06	; 6
     7c2:	90 93 90 06 	sts	0x0690, r25
     7c6:	80 93 8f 06 	sts	0x068F, r24
     7ca:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	INIT_LED(Red5, PinD6)
     7ce:	81 e9       	ldi	r24, 0x91	; 145
     7d0:	96 e0       	ldi	r25, 0x06	; 6
     7d2:	90 93 5b 06 	sts	0x065B, r25
     7d6:	80 93 5a 06 	sts	0x065A, r24
     7da:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	
	INIT_LED_GROUP(RedLeds, redLedsArray, 5)
     7de:	af ec       	ldi	r26, 0xCF	; 207
     7e0:	b6 e0       	ldi	r27, 0x06	; 6
     7e2:	e7 e3       	ldi	r30, 0x37	; 55
     7e4:	f3 e0       	ldi	r31, 0x03	; 3
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	01 90       	ld	r0, Z+
     7ea:	0d 92       	st	X+, r0
     7ec:	81 50       	subi	r24, 0x01	; 1
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <init_tank_leds+0xfa>
	INIT_LED_GROUP(YellowLeds, yellowLedsArray, 2)
     7f0:	af eb       	ldi	r26, 0xBF	; 191
     7f2:	b3 e0       	ldi	r27, 0x03	; 3
     7f4:	e4 e3       	ldi	r30, 0x34	; 52
     7f6:	f3 e0       	ldi	r31, 0x03	; 3
     7f8:	83 e0       	ldi	r24, 0x03	; 3
     7fa:	01 90       	ld	r0, Z+
     7fc:	0d 92       	st	X+, r0
     7fe:	81 50       	subi	r24, 0x01	; 1
     800:	e1 f7       	brne	.-8      	; 0x7fa <init_tank_leds+0x10c>
	INIT_LED_GROUP(WhiteLeds, whiteLedsArray, 5)
     802:	a7 ec       	ldi	r26, 0xC7	; 199
     804:	b3 e0       	ldi	r27, 0x03	; 3
     806:	e1 e3       	ldi	r30, 0x31	; 49
     808:	f3 e0       	ldi	r31, 0x03	; 3
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	81 50       	subi	r24, 0x01	; 1
     812:	e1 f7       	brne	.-8      	; 0x80c <init_tank_leds+0x11e>
	INIT_LED_GROUP(GreenLeds, greenLedsArray, 3)
     814:	a6 e9       	ldi	r26, 0x96	; 150
     816:	b6 e0       	ldi	r27, 0x06	; 6
     818:	ee e2       	ldi	r30, 0x2E	; 46
     81a:	f3 e0       	ldi	r31, 0x03	; 3
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	81 50       	subi	r24, 0x01	; 1
     824:	e1 f7       	brne	.-8      	; 0x81e <init_tank_leds+0x130>
	INIT_LED_GROUP(MiddleLeds, middleLedsArray, 5)
     826:	a5 e6       	ldi	r26, 0x65	; 101
     828:	b6 e0       	ldi	r27, 0x06	; 6
     82a:	eb e2       	ldi	r30, 0x2B	; 43
     82c:	f3 e0       	ldi	r31, 0x03	; 3
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	01 90       	ld	r0, Z+
     832:	0d 92       	st	X+, r0
     834:	81 50       	subi	r24, 0x01	; 1
     836:	e1 f7       	brne	.-8      	; 0x830 <init_tank_leds+0x142>
	INIT_LED_GROUP(AllLeds, allLedsArray, 15)
     838:	af e7       	ldi	r26, 0x7F	; 127
     83a:	b6 e0       	ldi	r27, 0x06	; 6
     83c:	e8 e2       	ldi	r30, 0x28	; 40
     83e:	f3 e0       	ldi	r31, 0x03	; 3
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	81 50       	subi	r24, 0x01	; 1
     848:	e1 f7       	brne	.-8      	; 0x842 <init_tank_leds+0x154>
}
     84a:	08 95       	ret

0000084c <initButton>:

#include "../kernel_init.h"
#include "external_interrupts.h"
#include "button.h"

void initButton(PButton button) {
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	ec 01       	movw	r28, r24
	setPinInput(button->pin);
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	9a 81       	ldd	r25, Y+2	; 0x02
     856:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <setPinInput>
	if (button->flags & BUTTON_NEEDS_PULLUP)
     85a:	88 81       	ld	r24, Y
     85c:	81 ff       	sbrs	r24, 1
     85e:	04 c0       	rjmp	.+8      	; 0x868 <initButton+0x1c>
		setPinOne(button->pin); // Enable intern pull up resistor
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <setPinOne>
	
	#ifndef FORCE_BUTTON_PIN_CHANGE_INTERRUPTS
	if (button->flags & BUTTON_USE_PIN_CHANGE_INTERRUPT)
     868:	88 81       	ld	r24, Y
     86a:	82 ff       	sbrs	r24, 2
     86c:	03 c0       	rjmp	.+6      	; 0x874 <initButton+0x28>
	#endif
		enablePinChangeInterrupt(button->pinChangeInterruptNumber);
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <enablePinChangeInterrupt>
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <init_tank_buttons>:

Mutex buttonMutex;
uint8_t buttonsPressedSinceLastCall = 0;
uint8_t wasPressed = 0;

void init_tank_buttons() {
     87a:	1f 93       	push	r17
	#define TANK_BUTTON BUTTON_INVERTED | BUTTON_NEEDS_PULLUP
	INIT_BUTTON(Button1, PinC5, TANK_BUTTON, 21)
     87c:	13 e0       	ldi	r17, 0x03	; 3
     87e:	10 93 d2 06 	sts	0x06D2, r17
     882:	8f e0       	ldi	r24, 0x0F	; 15
     884:	96 e0       	ldi	r25, 0x06	; 6
     886:	90 93 d4 06 	sts	0x06D4, r25
     88a:	80 93 d3 06 	sts	0x06D3, r24
     88e:	85 e1       	ldi	r24, 0x15	; 21
     890:	80 93 d5 06 	sts	0x06D5, r24
     894:	82 ed       	ldi	r24, 0xD2	; 210
     896:	96 e0       	ldi	r25, 0x06	; 6
     898:	0e 94 26 04 	call	0x84c	; 0x84c <initButton>
	INIT_BUTTON(Button2, PinC4, TANK_BUTTON, 20)
     89c:	10 93 78 06 	sts	0x0678, r17
     8a0:	83 eb       	ldi	r24, 0xB3	; 179
     8a2:	93 e0       	ldi	r25, 0x03	; 3
     8a4:	90 93 7a 06 	sts	0x067A, r25
     8a8:	80 93 79 06 	sts	0x0679, r24
     8ac:	84 e1       	ldi	r24, 0x14	; 20
     8ae:	80 93 7b 06 	sts	0x067B, r24
     8b2:	88 e7       	ldi	r24, 0x78	; 120
     8b4:	96 e0       	ldi	r25, 0x06	; 6
     8b6:	0e 94 26 04 	call	0x84c	; 0x84c <initButton>
	INIT_BUTTON(Button3, PinC3, TANK_BUTTON, 19)
     8ba:	10 93 b6 03 	sts	0x03B6, r17
     8be:	89 e0       	ldi	r24, 0x09	; 9
     8c0:	96 e0       	ldi	r25, 0x06	; 6
     8c2:	90 93 b8 03 	sts	0x03B8, r25
     8c6:	80 93 b7 03 	sts	0x03B7, r24
     8ca:	83 e1       	ldi	r24, 0x13	; 19
     8cc:	80 93 b9 03 	sts	0x03B9, r24
     8d0:	86 eb       	ldi	r24, 0xB6	; 182
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	0e 94 26 04 	call	0x84c	; 0x84c <initButton>
	INIT_BUTTON(Button4, PinC2, TANK_BUTTON, 18)
     8d8:	10 93 72 06 	sts	0x0672, r17
     8dc:	8a ee       	ldi	r24, 0xEA	; 234
     8de:	95 e0       	ldi	r25, 0x05	; 5
     8e0:	90 93 74 06 	sts	0x0674, r25
     8e4:	80 93 73 06 	sts	0x0673, r24
     8e8:	82 e1       	ldi	r24, 0x12	; 18
     8ea:	80 93 75 06 	sts	0x0675, r24
     8ee:	82 e7       	ldi	r24, 0x72	; 114
     8f0:	96 e0       	ldi	r25, 0x06	; 6
     8f2:	0e 94 26 04 	call	0x84c	; 0x84c <initButton>
	INIT_BUTTON(ButtonSwitch, PinD7, TANK_BUTTON, 31)
     8f6:	10 93 a5 03 	sts	0x03A5, r17
     8fa:	8d ea       	ldi	r24, 0xAD	; 173
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	90 93 a7 03 	sts	0x03A7, r25
     902:	80 93 a6 03 	sts	0x03A6, r24
     906:	8f e1       	ldi	r24, 0x1F	; 31
     908:	80 93 a8 03 	sts	0x03A8, r24
     90c:	85 ea       	ldi	r24, 0xA5	; 165
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0e 94 26 04 	call	0x84c	; 0x84c <initButton>
	buttonMutex = mutex_create();
     914:	0e 94 62 03 	call	0x6c4	; 0x6c4 <mutex_create>
     918:	90 93 3b 06 	sts	0x063B, r25
     91c:	80 93 3a 06 	sts	0x063A, r24
}
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <buttonStatusMask>:
KERNEL_INIT(init_tank_buttons)

uint8_t buttonStatusMask() {
     924:	1f 93       	push	r17
	uint8_t buttons = 0;
	if (buttonStatus(Button1)) buttons |= BUTTON_1;
     926:	82 ed       	ldi	r24, 0xD2	; 210
     928:	96 e0       	ldi	r25, 0x06	; 6
     92a:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <buttonStatus>
	buttonMutex = mutex_create();
}
KERNEL_INIT(init_tank_buttons)

uint8_t buttonStatusMask() {
	uint8_t buttons = 0;
     92e:	11 e0       	ldi	r17, 0x01	; 1
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	09 f4       	brne	.+2      	; 0x936 <buttonStatusMask+0x12>
     934:	10 e0       	ldi	r17, 0x00	; 0
	if (buttonStatus(Button1)) buttons |= BUTTON_1;
	if (buttonStatus(Button2)) buttons |= BUTTON_2;
     936:	88 e7       	ldi	r24, 0x78	; 120
     938:	96 e0       	ldi	r25, 0x06	; 6
     93a:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <buttonStatus>
     93e:	00 97       	sbiw	r24, 0x00	; 0
     940:	09 f0       	breq	.+2      	; 0x944 <buttonStatusMask+0x20>
     942:	12 60       	ori	r17, 0x02	; 2
	if (buttonStatus(Button3)) buttons |= BUTTON_3;
     944:	86 eb       	ldi	r24, 0xB6	; 182
     946:	93 e0       	ldi	r25, 0x03	; 3
     948:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <buttonStatus>
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	09 f0       	breq	.+2      	; 0x952 <buttonStatusMask+0x2e>
     950:	14 60       	ori	r17, 0x04	; 4
	if (buttonStatus(Button4)) buttons |= BUTTON_4;
     952:	82 e7       	ldi	r24, 0x72	; 114
     954:	96 e0       	ldi	r25, 0x06	; 6
     956:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <buttonStatus>
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	09 f0       	breq	.+2      	; 0x960 <buttonStatusMask+0x3c>
     95e:	18 60       	ori	r17, 0x08	; 8
	if (buttonStatus(ButtonSwitch)) buttons |= BUTTON_SWITCH;
     960:	85 ea       	ldi	r24, 0xA5	; 165
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	0e 94 d9 2f 	call	0x5fb2	; 0x5fb2 <buttonStatus>
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	09 f0       	breq	.+2      	; 0x96e <buttonStatusMask+0x4a>
     96c:	10 61       	ori	r17, 0x10	; 16
	return buttons;
}
     96e:	81 2f       	mov	r24, r17
     970:	1f 91       	pop	r17
     972:	08 95       	ret

00000974 <pressedButtons>:

uint8_t pressedButtons() {
	mutex_lock(buttonMutex);
     974:	80 91 3a 06 	lds	r24, 0x063A
     978:	90 91 3b 06 	lds	r25, 0x063B
     97c:	0e 94 67 03 	call	0x6ce	; 0x6ce <mutex_lock>
	uint8_t result = buttonsPressedSinceLastCall;
     980:	80 91 99 03 	lds	r24, 0x0399
	buttonsPressedSinceLastCall = 0;
     984:	10 92 99 03 	sts	0x0399, r1
	return TRUE;
}

void mutex_release(Mutex mutex) {
	// if (((AtomicMutex *) mutex)->interruptsWereEnabled)
		sei();
     988:	78 94       	sei
	mutex_release(buttonMutex);
	return result;
}
     98a:	08 95       	ret

0000098c <updateButtonStatus>:

void updateButtonStatus() {
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
	uint8_t pressedNow = buttonStatusMask();
     990:	0e 94 92 04 	call	0x924	; 0x924 <buttonStatusMask>
     994:	08 2f       	mov	r16, r24
	uint8_t newlyPressed = 0;
	
	if (!(wasPressed & BUTTON_1) && (pressedNow & BUTTON_1))
     996:	80 91 9a 03 	lds	r24, 0x039A
     99a:	80 fd       	sbrc	r24, 0
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <updateButtonStatus+0x18>
	return result;
}

void updateButtonStatus() {
	uint8_t pressedNow = buttonStatusMask();
	uint8_t newlyPressed = 0;
     99e:	10 2f       	mov	r17, r16
     9a0:	11 70       	andi	r17, 0x01	; 1
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <updateButtonStatus+0x1a>
     9a4:	10 e0       	ldi	r17, 0x00	; 0
	
	if (!(wasPressed & BUTTON_1) && (pressedNow & BUTTON_1))
		newlyPressed |= BUTTON_1;
	if (!(wasPressed & BUTTON_2) && (pressedNow & BUTTON_2))
     9a6:	81 fd       	sbrc	r24, 1
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <updateButtonStatus+0x22>
     9aa:	01 fd       	sbrc	r16, 1
		newlyPressed |= BUTTON_2;
     9ac:	12 60       	ori	r17, 0x02	; 2
	if (!(wasPressed & BUTTON_3) && (pressedNow & BUTTON_3))
     9ae:	82 fd       	sbrc	r24, 2
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <updateButtonStatus+0x2a>
     9b2:	02 fd       	sbrc	r16, 2
		newlyPressed |= BUTTON_3;
     9b4:	14 60       	ori	r17, 0x04	; 4
	if (!(wasPressed & BUTTON_4) && (pressedNow & BUTTON_4))
     9b6:	83 fd       	sbrc	r24, 3
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <updateButtonStatus+0x32>
     9ba:	03 fd       	sbrc	r16, 3
		newlyPressed |= BUTTON_4;
     9bc:	18 60       	ori	r17, 0x08	; 8
	if (!(wasPressed & BUTTON_SWITCH) && (pressedNow & BUTTON_SWITCH))
     9be:	84 fd       	sbrc	r24, 4
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <updateButtonStatus+0x3a>
     9c2:	04 fd       	sbrc	r16, 4
		newlyPressed |= BUTTON_SWITCH;
     9c4:	10 61       	ori	r17, 0x10	; 16
	
	mutex_lock(buttonMutex);
     9c6:	80 91 3a 06 	lds	r24, 0x063A
     9ca:	90 91 3b 06 	lds	r25, 0x063B
     9ce:	0e 94 67 03 	call	0x6ce	; 0x6ce <mutex_lock>
	buttonsPressedSinceLastCall |= newlyPressed;
     9d2:	80 91 99 03 	lds	r24, 0x0399
     9d6:	81 2b       	or	r24, r17
     9d8:	80 93 99 03 	sts	0x0399, r24
     9dc:	78 94       	sei
	mutex_release(buttonMutex);
	
	wasPressed = pressedNow;
     9de:	00 93 9a 03 	sts	0x039A, r16
}
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <twi_unexpectedCondition>:
// This can be implemented by the application code to handle
// unexpected conditions in TWI traffic. Or define this macro.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() {
	TWI_DEBUG_ERROR(twi_error)
}
     9e8:	08 95       	ret

000009ea <init_twi>:
TWIError twi_error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     9ea:	85 e0       	ldi	r24, 0x05	; 5
     9ec:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     9f6:	81 e1       	ldi	r24, 0x11	; 17
     9f8:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     9fc:	10 92 b9 00 	sts	0x00B9, r1
	// TODO uncovered: TWAMR (slave address mask register)
	#ifdef TWI_Slave
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
     a00:	8c e2       	ldi	r24, 0x2C	; 44
     a02:	80 93 ba 00 	sts	0x00BA, r24
	#endif
}
     a06:	08 95       	ret

00000a08 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     a08:	df 93       	push	r29
     a0a:	cf 93       	push	r28
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	27 97       	sbiw	r28, 0x07	; 7
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     a1c:	80 91 63 06 	lds	r24, 0x0663
     a20:	90 91 64 06 	lds	r25, 0x0664
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	91 05       	cpc	r25, r1
     a28:	0c f0       	brlt	.+2      	; 0xa2c <next_twi_operation+0x24>
     a2a:	52 c0       	rjmp	.+164    	; 0xad0 <next_twi_operation+0xc8>
	do {
		current = furtherOperations[nextTwiOperation++];
     a2c:	ae 01       	movw	r20, r28
     a2e:	4f 5f       	subi	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	80 91 63 06 	lds	r24, 0x0663
     a36:	90 91 64 06 	lds	r25, 0x0664
     a3a:	fc 01       	movw	r30, r24
     a3c:	33 e0       	ldi	r19, 0x03	; 3
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	3a 95       	dec	r19
     a44:	e1 f7       	brne	.-8      	; 0xa3e <next_twi_operation+0x36>
     a46:	e8 1b       	sub	r30, r24
     a48:	f9 0b       	sbc	r31, r25
     a4a:	da 01       	movw	r26, r20
     a4c:	e1 55       	subi	r30, 0x51	; 81
     a4e:	f9 4f       	sbci	r31, 0xF9	; 249
     a50:	27 e0       	ldi	r18, 0x07	; 7
     a52:	01 90       	ld	r0, Z+
     a54:	0d 92       	st	X+, r0
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	e1 f7       	brne	.-8      	; 0xa52 <next_twi_operation+0x4a>
     a5a:	fc 01       	movw	r30, r24
     a5c:	23 e0       	ldi	r18, 0x03	; 3
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	2a 95       	dec	r18
     a64:	e1 f7       	brne	.-8      	; 0xa5e <next_twi_operation+0x56>
     a66:	e8 1b       	sub	r30, r24
     a68:	f9 0b       	sbc	r31, r25
     a6a:	e1 55       	subi	r30, 0x51	; 81
     a6c:	f9 4f       	sbci	r31, 0xF9	; 249
     a6e:	64 81       	ldd	r22, Z+4	; 0x04
     a70:	25 81       	ldd	r18, Z+5	; 0x05
     a72:	36 81       	ldd	r19, Z+6	; 0x06
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	90 93 64 06 	sts	0x0664, r25
     a7a:	80 93 63 06 	sts	0x0663, r24
		if (current.operationMode != TWI_IllegalOperation) break;
     a7e:	21 15       	cp	r18, r1
     a80:	31 05       	cpc	r19, r1
     a82:	21 f0       	breq	.+8      	; 0xa8c <next_twi_operation+0x84>
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     a84:	83 30       	cpi	r24, 0x03	; 3
     a86:	91 05       	cpc	r25, r1
     a88:	2c f0       	brlt	.+10     	; 0xa94 <next_twi_operation+0x8c>
     a8a:	22 c0       	rjmp	.+68     	; 0xad0 <next_twi_operation+0xc8>
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	91 05       	cpc	r25, r1
     a90:	84 f2       	brlt	.-96     	; 0xa32 <next_twi_operation+0x2a>
     a92:	1e c0       	rjmp	.+60     	; 0xad0 <next_twi_operation+0xc8>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	// Delete or set the LSB, which describes sla+w or sla+r (reading or writing
	// slave address)
	if (current.operationMode == TWI_Send) {
     a94:	22 30       	cpi	r18, 0x02	; 2
     a96:	31 05       	cpc	r19, r1
     a98:	11 f4       	brne	.+4      	; 0xa9e <next_twi_operation+0x96>
		twi_address.address = current.device.address & ~_BV(0);
     a9a:	6e 7f       	andi	r22, 0xFE	; 254
     a9c:	04 c0       	rjmp	.+8      	; 0xaa6 <next_twi_operation+0x9e>
	} else if (current.operationMode == TWI_Receive) {
     a9e:	21 30       	cpi	r18, 0x01	; 1
     aa0:	31 05       	cpc	r19, r1
     aa2:	19 f4       	brne	.+6      	; 0xaaa <next_twi_operation+0xa2>
		twi_address.address = current.device.address | _BV(0);
     aa4:	61 60       	ori	r22, 0x01	; 1
     aa6:	60 93 a9 03 	sts	0x03A9, r22
	}
	alreadyHandled = 0;
     aaa:	10 92 1c 06 	sts	0x061C, r1
     aae:	10 92 1b 06 	sts	0x061B, r1
	twi_buffer = current.buffer;
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	ab 81       	ldd	r26, Y+3	; 0x03
     ab8:	bc 81       	ldd	r27, Y+4	; 0x04
     aba:	80 93 6b 06 	sts	0x066B, r24
     abe:	90 93 6c 06 	sts	0x066C, r25
     ac2:	a0 93 6d 06 	sts	0x066D, r26
     ac6:	b0 93 6e 06 	sts	0x066E, r27
	return TRUE;
     aca:	21 e0       	ldi	r18, 0x01	; 1
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <next_twi_operation+0xcc>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     ad4:	c9 01       	movw	r24, r18
     ad6:	27 96       	adiw	r28, 0x07	; 7
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	cf 91       	pop	r28
     ae4:	df 91       	pop	r29
     ae6:	08 95       	ret

00000ae8 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (!next_twi_operation()) {
     ae8:	0e 94 04 05 	call	0xa08	; 0xa08 <next_twi_operation>
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	19 f4       	brne	.+6      	; 0xaf6 <twi_stop_or_next+0xe>
		twi_stop();
     af0:	0e 94 9c 00 	call	0x138	; 0x138 <twi_stop>
     af4:	08 95       	ret
	} else {
		// Next operation, without releasing the bus. Repeated START condition!
		twi_start();
     af6:	85 ea       	ldi	r24, 0xA5	; 165
     af8:	80 93 bc 00 	sts	0x00BC, r24
     afc:	08 95       	ret

00000afe <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	twi_error = TWI_No_Error;
     afe:	10 92 1e 06 	sts	0x061E, r1
     b02:	10 92 1d 06 	sts	0x061D, r1
	twi_running = TRUE;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	90 93 77 06 	sts	0x0677, r25
     b0e:	80 93 76 06 	sts	0x0676, r24
	nextTwiOperation = 0;
     b12:	10 92 64 06 	sts	0x0664, r1
     b16:	10 92 63 06 	sts	0x0663, r1
	if (next_twi_operation()) {
     b1a:	0e 94 04 05 	call	0xa08	; 0xa08 <next_twi_operation>
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	19 f0       	breq	.+6      	; 0xb28 <twi_start_master_operation+0x2a>
		twi_start();
     b22:	85 ea       	ldi	r24, 0xA5	; 165
     b24:	80 93 bc 00 	sts	0x00BC, r24
     b28:	08 95       	ret

00000b2a <twiMultipleOperations>:
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     b2a:	1f 93       	push	r17
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     b34:	0f c0       	rjmp	.+30     	; 0xb54 <twiMultipleOperations+0x2a>
		furtherOperations[i] = operations[i];
     b36:	da 01       	movw	r26, r20
     b38:	a1 55       	subi	r26, 0x51	; 81
     b3a:	b9 4f       	sbci	r27, 0xF9	; 249
     b3c:	fb 01       	movw	r30, r22
     b3e:	e4 0f       	add	r30, r20
     b40:	f5 1f       	adc	r31, r21
     b42:	17 e0       	ldi	r17, 0x07	; 7
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	11 50       	subi	r17, 0x01	; 1
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <twiMultipleOperations+0x1a>
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     b4c:	2f 5f       	subi	r18, 0xFF	; 255
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	49 5f       	subi	r20, 0xF9	; 249
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	28 17       	cp	r18, r24
     b56:	39 07       	cpc	r19, r25
     b58:	5c f0       	brlt	.+22     	; 0xb70 <twiMultipleOperations+0x46>
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     b5a:	f9 01       	movw	r30, r18
     b5c:	43 e0       	ldi	r20, 0x03	; 3
     b5e:	ee 0f       	add	r30, r30
     b60:	ff 1f       	adc	r31, r31
     b62:	4a 95       	dec	r20
     b64:	e1 f7       	brne	.-8      	; 0xb5e <twiMultipleOperations+0x34>
     b66:	e2 1b       	sub	r30, r18
     b68:	f3 0b       	sbc	r31, r19
     b6a:	ec 54       	subi	r30, 0x4C	; 76
     b6c:	f9 4f       	sbci	r31, 0xF9	; 249
     b6e:	09 c0       	rjmp	.+18     	; 0xb82 <twiMultipleOperations+0x58>
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     b70:	23 30       	cpi	r18, 0x03	; 3
     b72:	31 05       	cpc	r19, r1
     b74:	01 f7       	brne	.-64     	; 0xb36 <twiMultipleOperations+0xc>
     b76:	f1 cf       	rjmp	.-30     	; 0xb5a <twiMultipleOperations+0x30>
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i].operationMode = TWI_IllegalOperation;
     b78:	11 82       	std	Z+1, r1	; 0x01
     b7a:	10 82       	st	Z, r1
void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	37 96       	adiw	r30, 0x07	; 7
     b82:	23 30       	cpi	r18, 0x03	; 3
     b84:	31 05       	cpc	r19, r1
     b86:	c4 f3       	brlt	.-16     	; 0xb78 <twiMultipleOperations+0x4e>
		furtherOperations[i].operationMode = TWI_IllegalOperation;
	}
	twi_start_master_operation();
     b88:	0e 94 7f 05 	call	0xafe	; 0xafe <twi_start_master_operation>
}
     b8c:	1f 91       	pop	r17
     b8e:	08 95       	ret

00000b90 <twiSendReceive>:
void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
	twiMultipleOperations(1, op);
}

void twiSendReceive(TWIDevice targetDevice, TWIBuffer sendData, TWIBuffer receiveBuffer) {
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	2e 97       	sbiw	r28, 0x0e	; 14
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	TWIOperation ops[2] = {
     ba8:	fe 01       	movw	r30, r28
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	9e e0       	ldi	r25, 0x0E	; 14
     bae:	df 01       	movw	r26, r30
     bb0:	1d 92       	st	X+, r1
     bb2:	9a 95       	dec	r25
     bb4:	e9 f7       	brne	.-6      	; 0xbb0 <twiSendReceive+0x20>
     bb6:	49 83       	std	Y+1, r20	; 0x01
     bb8:	5a 83       	std	Y+2, r21	; 0x02
     bba:	6b 83       	std	Y+3, r22	; 0x03
     bbc:	7c 83       	std	Y+4, r23	; 0x04
     bbe:	8d 83       	std	Y+5, r24	; 0x05
     bc0:	42 e0       	ldi	r20, 0x02	; 2
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	5f 83       	std	Y+7, r21	; 0x07
     bc6:	4e 83       	std	Y+6, r20	; 0x06
     bc8:	08 87       	std	Y+8, r16	; 0x08
     bca:	19 87       	std	Y+9, r17	; 0x09
     bcc:	2a 87       	std	Y+10, r18	; 0x0a
     bce:	3b 87       	std	Y+11, r19	; 0x0b
     bd0:	8c 87       	std	Y+12, r24	; 0x0c
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9e 87       	std	Y+14, r25	; 0x0e
     bd8:	8d 87       	std	Y+13, r24	; 0x0d
		(TWIOperation) { sendData, targetDevice, TWI_Send },
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	bf 01       	movw	r22, r30
     be0:	0e 94 95 05 	call	0xb2a	; 0xb2a <twiMultipleOperations>
}
     be4:	2e 96       	adiw	r28, 0x0e	; 14
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <twiReceive>:
void twiSend(TWIDevice targetDevice, TWIBuffer data) {
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
	twiMultipleOperations(1, op);
}

void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	27 97       	sbiw	r28, 0x07	; 7
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
     c0e:	fe 01       	movw	r30, r28
     c10:	31 96       	adiw	r30, 0x01	; 1
     c12:	97 e0       	ldi	r25, 0x07	; 7
     c14:	df 01       	movw	r26, r30
     c16:	1d 92       	st	X+, r1
     c18:	9a 95       	dec	r25
     c1a:	e9 f7       	brne	.-6      	; 0xc16 <twiReceive+0x1c>
     c1c:	49 83       	std	Y+1, r20	; 0x01
     c1e:	5a 83       	std	Y+2, r21	; 0x02
     c20:	6b 83       	std	Y+3, r22	; 0x03
     c22:	7c 83       	std	Y+4, r23	; 0x04
     c24:	8d 83       	std	Y+5, r24	; 0x05
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9f 83       	std	Y+7, r25	; 0x07
     c2c:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     c2e:	bf 01       	movw	r22, r30
     c30:	0e 94 95 05 	call	0xb2a	; 0xb2a <twiMultipleOperations>
}
     c34:	27 96       	adiw	r28, 0x07	; 7
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <twiSend>:
			twi_unexpectedCondition();
			break;
	}
}

void twiSend(TWIDevice targetDevice, TWIBuffer data) {
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	27 97       	sbiw	r28, 0x07	; 7
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
     c5a:	fe 01       	movw	r30, r28
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	97 e0       	ldi	r25, 0x07	; 7
     c60:	df 01       	movw	r26, r30
     c62:	1d 92       	st	X+, r1
     c64:	9a 95       	dec	r25
     c66:	e9 f7       	brne	.-6      	; 0xc62 <twiSend+0x1c>
     c68:	49 83       	std	Y+1, r20	; 0x01
     c6a:	5a 83       	std	Y+2, r21	; 0x02
     c6c:	6b 83       	std	Y+3, r22	; 0x03
     c6e:	7c 83       	std	Y+4, r23	; 0x04
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9f 83       	std	Y+7, r25	; 0x07
     c78:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	bf 01       	movw	r22, r30
     c80:	0e 94 95 05 	call	0xb2a	; 0xb2a <twiMultipleOperations>
}
     c84:	27 96       	adiw	r28, 0x07	; 7
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	de bf       	out	0x3e, r29	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <WAIT_FOR_TWI>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c96:	f8 94       	cli

void WAIT_FOR_TWI() {
	while (1) {
		uint8_t still_running;
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			still_running = twi_running;
     c98:	80 91 76 06 	lds	r24, 0x0676
     c9c:	90 91 77 06 	lds	r25, 0x0677
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     ca0:	78 94       	sei
		}
		if (!still_running) {
     ca2:	88 23       	and	r24, r24
     ca4:	c1 f7       	brne	.-16     	; 0xc96 <WAIT_FOR_TWI>
			_delay_ms(TWI_DELAY);
			#endif
			break;
		}
	}
}
     ca6:	08 95       	ret

00000ca8 <turn_word>:

void turn_word(uint16_t *word) {
	uint8_t temp = ((uint8_t*) word)[0];
     ca8:	fc 01       	movw	r30, r24
     caa:	80 81       	ld	r24, Z
	((uint8_t*) word)[0] = ((uint8_t*) word)[1];
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	90 83       	st	Z, r25
	((uint8_t*) word)[1] = temp;
     cb0:	81 83       	std	Z+1, r24	; 0x01
}
     cb2:	08 95       	ret

00000cb4 <twi_handleMasterRequest>:

	TWIBuffer twi_handleMasterRequest() {
		// We only operate in RPC-mode, so this call always arrives
		// after the according twi_handleMasterTransmission, which
		// sets receiveBuffer to the result-value.
		return receiveBuffer;
     cb4:	60 91 ab 06 	lds	r22, 0x06AB
     cb8:	70 91 ac 06 	lds	r23, 0x06AC
	}
     cbc:	80 91 ad 06 	lds	r24, 0x06AD
     cc0:	90 91 ae 06 	lds	r25, 0x06AE
     cc4:	08 95       	ret

00000cc6 <twi_rpc_oneway>:
	sendBuffer.data[0] = operation;
	sendBuffer.size = parameters.size + 1;
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
}

void twi_rpc_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     cc6:	1f 93       	push	r17
     cc8:	18 2f       	mov	r17, r24
     cca:	86 2f       	mov	r24, r22
     ccc:	ba 01       	movw	r22, r20
     cce:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     cd0:	0e 94 06 01 	call	0x20c	; 0x20c <fillSendBuffer>
	twiSend(device, sendBuffer);
     cd4:	40 91 e1 01 	lds	r20, 0x01E1
     cd8:	50 91 e2 01 	lds	r21, 0x01E2
     cdc:	60 91 e3 01 	lds	r22, 0x01E3
     ce0:	70 91 e4 01 	lds	r23, 0x01E4
     ce4:	81 2f       	mov	r24, r17
     ce6:	0e 94 23 06 	call	0xc46	; 0xc46 <twiSend>
}
     cea:	1f 91       	pop	r17
     cec:	08 95       	ret

00000cee <twi_rpc_pseudo_oneway>:

void twi_rpc_pseudo_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	18 2f       	mov	r17, r24
     cf4:	86 2f       	mov	r24, r22
     cf6:	ba 01       	movw	r22, r20
     cf8:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     cfa:	0e 94 06 01 	call	0x20c	; 0x20c <fillSendBuffer>
	twiSendReceive(device, sendBuffer, (TWIBuffer) { 0, 0 });
     cfe:	40 91 e1 01 	lds	r20, 0x01E1
     d02:	50 91 e2 01 	lds	r21, 0x01E2
     d06:	60 91 e3 01 	lds	r22, 0x01E3
     d0a:	70 91 e4 01 	lds	r23, 0x01E4
     d0e:	81 2f       	mov	r24, r17
     d10:	00 e0       	ldi	r16, 0x00	; 0
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	98 01       	movw	r18, r16
     d16:	0e 94 c8 05 	call	0xb90	; 0xb90 <twiSendReceive>
}
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <bgx1_setIllumination>:

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setIllumination, CMD_SetIllumination, uint16_t)
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <bgx1_setIllumination+0x6>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	9e 01       	movw	r18, r28
     d30:	2f 5f       	subi	r18, 0xFF	; 255
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	42 e0       	ldi	r20, 0x02	; 2
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	80 91 36 01 	lds	r24, 0x0136
     d3c:	63 e4       	ldi	r22, 0x43	; 67
     d3e:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     d42:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <bgx1_termScroll>:
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	0f 92       	push	r0
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	9e 01       	movw	r18, r28
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	80 91 36 01 	lds	r24, 0x0136
     d6a:	62 e3       	ldi	r22, 0x32	; 50
     d6c:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     d70:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <bgx1_termGoto_base>:
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <bgx1_termGoto_base+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	9e 01       	movw	r18, r28
     d8c:	2f 5f       	subi	r18, 0xFF	; 255
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	42 e0       	ldi	r20, 0x02	; 2
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	80 91 36 01 	lds	r24, 0x0136
     d98:	61 e3       	ldi	r22, 0x31	; 49
     d9a:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     d9e:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <bgx1_termClear>:
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
     dac:	80 91 36 01 	lds	r24, 0x0136
     db0:	60 e3       	ldi	r22, 0x30	; 48
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	a9 01       	movw	r20, r18
     db8:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     dbc:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     dc0:	08 95       	ret

00000dc2 <bgx1_selectFont>:
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	9e 01       	movw	r18, r28
     dd0:	2f 5f       	subi	r18, 0xFF	; 255
     dd2:	3f 4f       	sbci	r19, 0xFF	; 255
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	80 91 36 01 	lds	r24, 0x0136
     ddc:	65 e1       	ldi	r22, 0x15	; 21
     dde:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     de2:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <bgx1_fillAll>:
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	0f 92       	push	r0
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	9e 01       	movw	r18, r28
     dfc:	2f 5f       	subi	r18, 0xFF	; 255
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	80 91 36 01 	lds	r24, 0x0136
     e08:	62 e1       	ldi	r22, 0x12	; 18
     e0a:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     e0e:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     e12:	0f 90       	pop	r0
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <bgx1_mode>:
// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	0f 92       	push	r0
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	9e 01       	movw	r18, r28
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	80 91 36 01 	lds	r24, 0x0136
     e34:	61 e1       	ldi	r22, 0x11	; 17
     e36:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     e3a:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     e3e:	0f 90       	pop	r0
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <bgx1_move_base>:

// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <bgx1_move_base+0x6>
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	9e 01       	movw	r18, r28
     e56:	2f 5f       	subi	r18, 0xFF	; 255
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	42 e0       	ldi	r20, 0x02	; 2
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	80 91 36 01 	lds	r24, 0x0136
     e62:	60 e1       	ldi	r22, 0x10	; 16
     e64:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     e68:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <bgx1_setStatus>:

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setStatus, CMD_SetStatus, uint8_t)
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	9e 01       	movw	r18, r28
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	80 91 36 01 	lds	r24, 0x0136
     e90:	63 e0       	ldi	r22, 0x03	; 3
     e92:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     e96:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <bgx1_reset>:
  
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
     ea2:	80 91 36 01 	lds	r24, 0x0136
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	a9 01       	movw	r20, r18
     eae:	0e 94 77 06 	call	0xcee	; 0xcee <twi_rpc_pseudo_oneway>
     eb2:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     eb6:	08 95       	ret

00000eb8 <twi_rpc>:

void twi_rpc(TWIDevice device, byte operation, TWIBuffer parameters, TWIBuffer resultBuffer) {
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	d8 2e       	mov	r13, r24
     ec4:	86 2f       	mov	r24, r22
     ec6:	ba 01       	movw	r22, r20
     ec8:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     eca:	0e 94 06 01 	call	0x20c	; 0x20c <fillSendBuffer>
	twiSendReceive(device, sendBuffer, resultBuffer);
     ece:	40 91 e1 01 	lds	r20, 0x01E1
     ed2:	50 91 e2 01 	lds	r21, 0x01E2
     ed6:	60 91 e3 01 	lds	r22, 0x01E3
     eda:	70 91 e4 01 	lds	r23, 0x01E4
     ede:	8d 2d       	mov	r24, r13
     ee0:	98 01       	movw	r18, r16
     ee2:	87 01       	movw	r16, r14
     ee4:	0e 94 c8 05 	call	0xb90	; 0xb90 <twiSendReceive>
}
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	08 95       	ret

00000ef4 <bgx1_syncInterface>:
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <bgx1_syncInterface+0xe>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8a 83       	std	Y+2, r24	; 0x02
     f08:	9e 01       	movw	r18, r28
     f0a:	2e 5f       	subi	r18, 0xFE	; 254
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	7e 01       	movw	r14, r28
     f14:	08 94       	sec
     f16:	e1 1c       	adc	r14, r1
     f18:	f1 1c       	adc	r15, r1
     f1a:	01 e0       	ldi	r16, 0x01	; 1
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	80 91 36 01 	lds	r24, 0x0136
     f22:	62 e4       	ldi	r22, 0x42	; 66
     f24:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
     f28:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	08 95       	ret

00000f40 <bgx1_getAnalog_base>:
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <bgx1_getAnalog_base+0xe>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	9e 01       	movw	r18, r28
     f58:	2d 5f       	subi	r18, 0xFD	; 253
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	7e 01       	movw	r14, r28
     f62:	08 94       	sec
     f64:	e1 1c       	adc	r14, r1
     f66:	f1 1c       	adc	r15, r1
     f68:	02 e0       	ldi	r16, 0x02	; 2
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	80 91 36 01 	lds	r24, 0x0136
     f70:	61 e4       	ldi	r22, 0x41	; 65
     f72:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
     f76:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	08 95       	ret

00000f92 <bgx1_syncPort_base>:
	uint8_t ddr;
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <bgx1_syncPort_base+0xe>
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	9b 83       	std	Y+3, r25	; 0x03
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	9e 01       	movw	r18, r28
     fac:	2e 5f       	subi	r18, 0xFE	; 254
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	42 e0       	ldi	r20, 0x02	; 2
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	7e 01       	movw	r14, r28
     fb6:	08 94       	sec
     fb8:	e1 1c       	adc	r14, r1
     fba:	f1 1c       	adc	r15, r1
     fbc:	01 e0       	ldi	r16, 0x01	; 1
     fbe:	10 e0       	ldi	r17, 0x00	; 0
     fc0:	80 91 36 01 	lds	r24, 0x0136
     fc4:	60 e4       	ldi	r22, 0x40	; 64
     fc6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
     fca:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	08 95       	ret

00000fe4 <bgx1_termPrint_base>:
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)

// The NIBObee lib receives an extra byte when executing this, don't know why
TWI_RPC_FUNCTION_VARARGS(bgx1_termPrint_base, CMD_TermPrint, StringArg, byte)
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	9c 01       	movw	r18, r24
     ff8:	ab 01       	movw	r20, r22
     ffa:	7e 01       	movw	r14, r28
     ffc:	08 94       	sec
     ffe:	e1 1c       	adc	r14, r1
    1000:	f1 1c       	adc	r15, r1
    1002:	01 e0       	ldi	r16, 0x01	; 1
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	80 91 36 01 	lds	r24, 0x0136
    100a:	63 e3       	ldi	r22, 0x33	; 51
    100c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    1010:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	08 95       	ret

00001026 <bgx1_lineTo_base>:
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <bgx1_lineTo_base+0xe>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <bgx1_lineTo_base+0x10>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9c 83       	std	Y+4, r25	; 0x04
    103c:	8b 83       	std	Y+3, r24	; 0x03
    103e:	9e 01       	movw	r18, r28
    1040:	2d 5f       	subi	r18, 0xFD	; 253
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	42 e0       	ldi	r20, 0x02	; 2
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	7e 01       	movw	r14, r28
    104a:	08 94       	sec
    104c:	e1 1c       	adc	r14, r1
    104e:	f1 1c       	adc	r15, r1
    1050:	02 e0       	ldi	r16, 0x02	; 2
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	80 91 36 01 	lds	r24, 0x0136
    1058:	6b e1       	ldi	r22, 0x1B	; 27
    105a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    105e:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	08 95       	ret

0000107c <bgx1_embeddedImage>:
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <bgx1_embeddedImage+0xe>
    108a:	0f 92       	push	r0
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	8b 83       	std	Y+3, r24	; 0x03
    1092:	9e 01       	movw	r18, r28
    1094:	2d 5f       	subi	r18, 0xFD	; 253
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	7e 01       	movw	r14, r28
    109e:	08 94       	sec
    10a0:	e1 1c       	adc	r14, r1
    10a2:	f1 1c       	adc	r15, r1
    10a4:	02 e0       	ldi	r16, 0x02	; 2
    10a6:	10 e0       	ldi	r17, 0x00	; 0
    10a8:	80 91 36 01 	lds	r24, 0x0136
    10ac:	6a e1       	ldi	r22, 0x1A	; 26
    10ae:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    10b2:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <bgx1_drawBitmap_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <bgx1_drawBitmap_base+0xe>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9c 01       	movw	r18, r24
    10e2:	ab 01       	movw	r20, r22
    10e4:	7e 01       	movw	r14, r28
    10e6:	08 94       	sec
    10e8:	e1 1c       	adc	r14, r1
    10ea:	f1 1c       	adc	r15, r1
    10ec:	02 e0       	ldi	r16, 0x02	; 2
    10ee:	10 e0       	ldi	r17, 0x00	; 0
    10f0:	80 91 36 01 	lds	r24, 0x0136
    10f4:	69 e1       	ldi	r22, 0x19	; 25
    10f6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    10fa:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	08 95       	ret

00001114 <bgx1_box_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <bgx1_box_base+0xe>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <bgx1_box_base+0x10>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	9e 01       	movw	r18, r28
    112e:	2d 5f       	subi	r18, 0xFD	; 253
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	42 e0       	ldi	r20, 0x02	; 2
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	7e 01       	movw	r14, r28
    1138:	08 94       	sec
    113a:	e1 1c       	adc	r14, r1
    113c:	f1 1c       	adc	r15, r1
    113e:	02 e0       	ldi	r16, 0x02	; 2
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	80 91 36 01 	lds	r24, 0x0136
    1146:	68 e1       	ldi	r22, 0x18	; 24
    1148:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    114c:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <bgx1_vLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <bgx1_vLine+0xe>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	9e 01       	movw	r18, r28
    1182:	2d 5f       	subi	r18, 0xFD	; 253
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	7e 01       	movw	r14, r28
    118c:	08 94       	sec
    118e:	e1 1c       	adc	r14, r1
    1190:	f1 1c       	adc	r15, r1
    1192:	02 e0       	ldi	r16, 0x02	; 2
    1194:	10 e0       	ldi	r17, 0x00	; 0
    1196:	80 91 36 01 	lds	r24, 0x0136
    119a:	67 e1       	ldi	r22, 0x17	; 23
    119c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    11a0:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	08 95       	ret

000011bc <bgx1_hLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <bgx1_hLine+0xe>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	9e 01       	movw	r18, r28
    11d4:	2d 5f       	subi	r18, 0xFD	; 253
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	7e 01       	movw	r14, r28
    11de:	08 94       	sec
    11e0:	e1 1c       	adc	r14, r1
    11e2:	f1 1c       	adc	r15, r1
    11e4:	02 e0       	ldi	r16, 0x02	; 2
    11e6:	10 e0       	ldi	r17, 0x00	; 0
    11e8:	80 91 36 01 	lds	r24, 0x0136
    11ec:	66 e1       	ldi	r22, 0x16	; 22
    11ee:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    11f2:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	ff 90       	pop	r15
    120a:	ef 90       	pop	r14
    120c:	08 95       	ret

0000120e <bgx1_textWidth_base>:
// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
    120e:	ef 92       	push	r14
    1210:	ff 92       	push	r15
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9c 01       	movw	r18, r24
    1222:	ab 01       	movw	r20, r22
    1224:	7e 01       	movw	r14, r28
    1226:	08 94       	sec
    1228:	e1 1c       	adc	r14, r1
    122a:	f1 1c       	adc	r15, r1
    122c:	01 e0       	ldi	r16, 0x01	; 1
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	80 91 36 01 	lds	r24, 0x0136
    1234:	64 e1       	ldi	r22, 0x14	; 20
    1236:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    123a:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <bgx1_print_base>:

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <bgx1_print_base+0xe>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9c 01       	movw	r18, r24
    1264:	ab 01       	movw	r20, r22
    1266:	7e 01       	movw	r14, r28
    1268:	08 94       	sec
    126a:	e1 1c       	adc	r14, r1
    126c:	f1 1c       	adc	r15, r1
    126e:	02 e0       	ldi	r16, 0x02	; 2
    1270:	10 e0       	ldi	r17, 0x00	; 0
    1272:	80 91 36 01 	lds	r24, 0x0136
    1276:	63 e1       	ldi	r22, 0x13	; 19
    1278:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    127c:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	08 95       	ret

00001296 <bgx1_getStatus>:
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	7e 01       	movw	r14, r28
    12aa:	08 94       	sec
    12ac:	e1 1c       	adc	r14, r1
    12ae:	f1 1c       	adc	r15, r1
    12b0:	01 e0       	ldi	r16, 0x01	; 1
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	80 91 36 01 	lds	r24, 0x0136
    12b8:	62 e0       	ldi	r22, 0x02	; 2
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    12c4:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <bgx1_getVersion_base>:
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <bgx1_getVersion_base+0xe>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	7e 01       	movw	r14, r28
    12ee:	08 94       	sec
    12f0:	e1 1c       	adc	r14, r1
    12f2:	f1 1c       	adc	r15, r1
    12f4:	02 e0       	ldi	r16, 0x02	; 2
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	80 91 36 01 	lds	r24, 0x0136
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <twi_rpc>
    1308:	0e 94 4b 06 	call	0xc96	; 0xc96 <WAIT_FOR_TWI>
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	9a 81       	ldd	r25, Y+2	; 0x02
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	08 95       	ret

00001322 <twi_handleRpcRequest>:

// The hash-structure used by the uthash implementation
PTwiFunction twiRpcFunctions = NULL;

// buffer containes the arguments and the result afterwards.
void twi_handleRpcRequest(byte operation, TWIBuffer *buffer) {
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6b 01       	movw	r12, r22
	PTwiFunction result;
	HASH_FIND_INT(twiRpcFunctions, &operation, result);
    1340:	e0 91 9c 03 	lds	r30, 0x039C
    1344:	f0 91 9d 03 	lds	r31, 0x039D
    1348:	30 97       	sbiw	r30, 0x00	; 0
    134a:	09 f4       	brne	.+2      	; 0x134e <twi_handleRpcRequest+0x2c>
    134c:	63 c0       	rjmp	.+198    	; 0x1414 <twi_handleRpcRequest+0xf2>
    134e:	28 2f       	mov	r18, r24
    1350:	33 27       	eor	r19, r19
    1352:	27 fd       	sbrc	r18, 7
    1354:	30 95       	com	r19
    1356:	e3 80       	ldd	r14, Z+3	; 0x03
    1358:	f4 80       	ldd	r15, Z+4	; 0x04
    135a:	c9 01       	movw	r24, r18
    135c:	96 95       	lsr	r25
    135e:	87 95       	ror	r24
    1360:	96 95       	lsr	r25
    1362:	87 95       	ror	r24
    1364:	a9 01       	movw	r20, r18
    1366:	75 e0       	ldi	r23, 0x05	; 5
    1368:	44 0f       	add	r20, r20
    136a:	55 1f       	adc	r21, r21
    136c:	7a 95       	dec	r23
    136e:	e1 f7       	brne	.-8      	; 0x1368 <twi_handleRpcRequest+0x46>
    1370:	84 0f       	add	r24, r20
    1372:	95 1f       	adc	r25, r21
    1374:	4a 81       	ldd	r20, Y+2	; 0x02
    1376:	55 27       	eor	r21, r21
    1378:	47 fd       	sbrc	r20, 7
    137a:	50 95       	com	r21
    137c:	84 0f       	add	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	82 27       	eor	r24, r18
    1382:	93 27       	eor	r25, r19
    1384:	d7 01       	movw	r26, r14
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	2d 91       	ld	r18, X+
    138a:	3c 91       	ld	r19, X
    138c:	13 97       	sbiw	r26, 0x03	; 3
    138e:	21 50       	subi	r18, 0x01	; 1
    1390:	30 40       	sbci	r19, 0x00	; 0
    1392:	82 23       	and	r24, r18
    1394:	93 23       	and	r25, r19
    1396:	9c 01       	movw	r18, r24
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	28 0f       	add	r18, r24
    139e:	39 1f       	adc	r19, r25
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	ed 91       	ld	r30, X+
    13a6:	fc 91       	ld	r31, X
    13a8:	11 97       	sbiw	r26, 0x01	; 1
    13aa:	e2 0f       	add	r30, r18
    13ac:	f3 1f       	adc	r31, r19
    13ae:	00 81       	ld	r16, Z
    13b0:	11 81       	ldd	r17, Z+1	; 0x01
    13b2:	01 15       	cp	r16, r1
    13b4:	11 05       	cpc	r17, r1
    13b6:	39 f0       	breq	.+14     	; 0x13c6 <twi_handleRpcRequest+0xa4>
    13b8:	1a 96       	adiw	r26, 0x0a	; 10
    13ba:	8d 91       	ld	r24, X+
    13bc:	9c 91       	ld	r25, X
    13be:	1b 97       	sbiw	r26, 0x0b	; 11
    13c0:	08 1b       	sub	r16, r24
    13c2:	19 0b       	sbc	r17, r25
    13c4:	20 c0       	rjmp	.+64     	; 0x1406 <twi_handleRpcRequest+0xe4>
    13c6:	00 e0       	ldi	r16, 0x00	; 0
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	1d c0       	rjmp	.+58     	; 0x1406 <twi_handleRpcRequest+0xe4>
    13cc:	f8 01       	movw	r30, r16
    13ce:	87 85       	ldd	r24, Z+15	; 0x0f
    13d0:	90 89       	ldd	r25, Z+16	; 0x10
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	91 05       	cpc	r25, r1
    13d6:	49 f4       	brne	.+18     	; 0x13ea <twi_handleRpcRequest+0xc8>
    13d8:	85 85       	ldd	r24, Z+13	; 0x0d
    13da:	96 85       	ldd	r25, Z+14	; 0x0e
    13dc:	b5 01       	movw	r22, r10
    13de:	42 e0       	ldi	r20, 0x02	; 2
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <memcmp>
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	d9 f0       	breq	.+54     	; 0x1420 <twi_handleRpcRequest+0xfe>
    13ea:	d8 01       	movw	r26, r16
    13ec:	1b 96       	adiw	r26, 0x0b	; 11
    13ee:	0d 91       	ld	r16, X+
    13f0:	1c 91       	ld	r17, X
    13f2:	1c 97       	sbiw	r26, 0x0c	; 12
    13f4:	01 15       	cp	r16, r1
    13f6:	11 05       	cpc	r17, r1
    13f8:	69 f0       	breq	.+26     	; 0x1414 <twi_handleRpcRequest+0xf2>
    13fa:	f7 01       	movw	r30, r14
    13fc:	82 85       	ldd	r24, Z+10	; 0x0a
    13fe:	93 85       	ldd	r25, Z+11	; 0x0b
    1400:	08 1b       	sub	r16, r24
    1402:	19 0b       	sbc	r17, r25
    1404:	04 c0       	rjmp	.+8      	; 0x140e <twi_handleRpcRequest+0xec>
    1406:	5e 01       	movw	r10, r28
    1408:	08 94       	sec
    140a:	a1 1c       	adc	r10, r1
    140c:	b1 1c       	adc	r11, r1
    140e:	01 15       	cp	r16, r1
    1410:	11 05       	cpc	r17, r1
    1412:	e1 f6       	brne	.-72     	; 0x13cc <twi_handleRpcRequest+0xaa>
	if (result)
		result->associatedFunction(buffer);
	else
		// Illegal operation... would be nice to have some error-handling.
		// Simply avoid sending random data.
		buffer->size = 0;
    1414:	d6 01       	movw	r26, r12
    1416:	13 96       	adiw	r26, 0x03	; 3
    1418:	1c 92       	st	X, r1
    141a:	1e 92       	st	-X, r1
    141c:	12 97       	sbiw	r26, 0x02	; 2
    141e:	07 c0       	rjmp	.+14     	; 0x142e <twi_handleRpcRequest+0x10c>
// buffer containes the arguments and the result afterwards.
void twi_handleRpcRequest(byte operation, TWIBuffer *buffer) {
	PTwiFunction result;
	HASH_FIND_INT(twiRpcFunctions, &operation, result);
	if (result)
		result->associatedFunction(buffer);
    1420:	d8 01       	movw	r26, r16
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	ed 91       	ld	r30, X+
    1426:	fc 91       	ld	r31, X
    1428:	12 97       	sbiw	r26, 0x02	; 2
    142a:	c6 01       	movw	r24, r12
    142c:	09 95       	icall
	else
		// Illegal operation... would be nice to have some error-handling.
		// Simply avoid sending random data.
		buffer->size = 0;
}
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	df 90       	pop	r13
    143e:	cf 90       	pop	r12
    1440:	bf 90       	pop	r11
    1442:	af 90       	pop	r10
    1444:	08 95       	ret

00001446 <twi_handleMasterTransmission>:
		// after the according twi_handleMasterTransmission, which
		// sets receiveBuffer to the result-value.
		return receiveBuffer;
	}

	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <twi_handleMasterTransmission+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <twi_handleMasterTransmission+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	69 83       	std	Y+1, r22	; 0x01
    1454:	7a 83       	std	Y+2, r23	; 0x02
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	9c 83       	std	Y+4, r25	; 0x04
		byte operation = twi_buffer.data[0];
    145a:	e6 2f       	mov	r30, r22
    145c:	f7 2f       	mov	r31, r23
    145e:	81 91       	ld	r24, Z+
		twi_buffer.data++; // Skip the operation-byte
    1460:	fa 83       	std	Y+2, r31	; 0x02
    1462:	e9 83       	std	Y+1, r30	; 0x01
		twi_buffer.size--;
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	21 50       	subi	r18, 0x01	; 1
    146a:	30 40       	sbci	r19, 0x00	; 0
    146c:	3c 83       	std	Y+4, r19	; 0x04
    146e:	2b 83       	std	Y+3, r18	; 0x03
		twi_handleRpcRequest(operation, &twi_buffer);
    1470:	be 01       	movw	r22, r28
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	0e 94 91 09 	call	0x1322	; 0x1322 <twi_handleRpcRequest>
		// The buffer has been modified, store it to be returned by
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	ab 81       	ldd	r26, Y+3	; 0x03
    1480:	bc 81       	ldd	r27, Y+4	; 0x04
    1482:	80 93 ab 06 	sts	0x06AB, r24
    1486:	90 93 ac 06 	sts	0x06AC, r25
    148a:	a0 93 ad 06 	sts	0x06AD, r26
    148e:	b0 93 ae 06 	sts	0x06AE, r27
	}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <__vector_26>:
	// buffer has no space at all reserved. Fix by skipping this byte).
	if (alreadyHandled < twi_buffer.size)
		twi_buffer.data[alreadyHandled++] = TWDR;
}

ISR(TWI_vect) {
    14a0:	1f 92       	push	r1
    14a2:	0f 92       	push	r0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	0f 92       	push	r0
    14a8:	0b b6       	in	r0, 0x3b	; 59
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
	TWI_DEBUG_INTERRUPT(TW_STATUS)
	
	switch(TW_STATUS) {
    14c6:	80 91 b9 00 	lds	r24, 0x00B9
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	88 7f       	andi	r24, 0xF8	; 248
    14ce:	90 70       	andi	r25, 0x00	; 0
    14d0:	88 36       	cpi	r24, 0x68	; 104
    14d2:	91 05       	cpc	r25, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <__vector_26+0x38>
    14d6:	0b c1       	rjmp	.+534    	; 0x16ee <__vector_26+0x24e>
    14d8:	89 36       	cpi	r24, 0x69	; 105
    14da:	91 05       	cpc	r25, r1
    14dc:	0c f0       	brlt	.+2      	; 0x14e0 <__vector_26+0x40>
    14de:	40 c0       	rjmp	.+128    	; 0x1560 <__vector_26+0xc0>
    14e0:	80 33       	cpi	r24, 0x30	; 48
    14e2:	91 05       	cpc	r25, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__vector_26+0x48>
    14e6:	a0 c0       	rjmp	.+320    	; 0x1628 <__vector_26+0x188>
    14e8:	81 33       	cpi	r24, 0x31	; 49
    14ea:	91 05       	cpc	r25, r1
    14ec:	e4 f4       	brge	.+56     	; 0x1526 <__vector_26+0x86>
    14ee:	80 31       	cpi	r24, 0x10	; 16
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <__vector_26+0x56>
    14f4:	76 c0       	rjmp	.+236    	; 0x15e2 <__vector_26+0x142>
    14f6:	81 31       	cpi	r24, 0x11	; 17
    14f8:	91 05       	cpc	r25, r1
    14fa:	44 f4       	brge	.+16     	; 0x150c <__vector_26+0x6c>
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__vector_26+0x62>
    1500:	11 c1       	rjmp	.+546    	; 0x1724 <__vector_26+0x284>
    1502:	88 30       	cpi	r24, 0x08	; 8
    1504:	91 05       	cpc	r25, r1
    1506:	09 f0       	breq	.+2      	; 0x150a <__vector_26+0x6a>
    1508:	10 c1       	rjmp	.+544    	; 0x172a <__vector_26+0x28a>
    150a:	6b c0       	rjmp	.+214    	; 0x15e2 <__vector_26+0x142>
    150c:	80 32       	cpi	r24, 0x20	; 32
    150e:	91 05       	cpc	r25, r1
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_26+0x74>
    1512:	8d c0       	rjmp	.+282    	; 0x162e <__vector_26+0x18e>
    1514:	88 32       	cpi	r24, 0x28	; 40
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <__vector_26+0x7c>
    151a:	69 c0       	rjmp	.+210    	; 0x15ee <__vector_26+0x14e>
    151c:	88 31       	cpi	r24, 0x18	; 24
    151e:	91 05       	cpc	r25, r1
    1520:	09 f0       	breq	.+2      	; 0x1524 <__vector_26+0x84>
    1522:	03 c1       	rjmp	.+518    	; 0x172a <__vector_26+0x28a>
    1524:	64 c0       	rjmp	.+200    	; 0x15ee <__vector_26+0x14e>
    1526:	88 34       	cpi	r24, 0x48	; 72
    1528:	91 05       	cpc	r25, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <__vector_26+0x8e>
    152c:	80 c0       	rjmp	.+256    	; 0x162e <__vector_26+0x18e>
    152e:	89 34       	cpi	r24, 0x49	; 73
    1530:	91 05       	cpc	r25, r1
    1532:	4c f4       	brge	.+18     	; 0x1546 <__vector_26+0xa6>
    1534:	88 33       	cpi	r24, 0x38	; 56
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <__vector_26+0x9c>
    153a:	56 c0       	rjmp	.+172    	; 0x15e8 <__vector_26+0x148>
    153c:	80 34       	cpi	r24, 0x40	; 64
    153e:	91 05       	cpc	r25, r1
    1540:	09 f0       	breq	.+2      	; 0x1544 <__vector_26+0xa4>
    1542:	f3 c0       	rjmp	.+486    	; 0x172a <__vector_26+0x28a>
    1544:	d4 c0       	rjmp	.+424    	; 0x16ee <__vector_26+0x24e>
    1546:	88 35       	cpi	r24, 0x58	; 88
    1548:	91 05       	cpc	r25, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <__vector_26+0xae>
    154c:	79 c0       	rjmp	.+242    	; 0x1640 <__vector_26+0x1a0>
    154e:	80 36       	cpi	r24, 0x60	; 96
    1550:	91 05       	cpc	r25, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <__vector_26+0xb6>
    1554:	cc c0       	rjmp	.+408    	; 0x16ee <__vector_26+0x24e>
    1556:	80 35       	cpi	r24, 0x50	; 80
    1558:	91 05       	cpc	r25, r1
    155a:	09 f0       	breq	.+2      	; 0x155e <__vector_26+0xbe>
    155c:	e6 c0       	rjmp	.+460    	; 0x172a <__vector_26+0x28a>
    155e:	c5 c0       	rjmp	.+394    	; 0x16ea <__vector_26+0x24a>
    1560:	80 3a       	cpi	r24, 0xA0	; 160
    1562:	91 05       	cpc	r25, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <__vector_26+0xc8>
    1566:	c6 c0       	rjmp	.+396    	; 0x16f4 <__vector_26+0x254>
    1568:	81 3a       	cpi	r24, 0xA1	; 161
    156a:	91 05       	cpc	r25, r1
    156c:	ec f4       	brge	.+58     	; 0x15a8 <__vector_26+0x108>
    156e:	80 38       	cpi	r24, 0x80	; 128
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <__vector_26+0xd6>
    1574:	ba c0       	rjmp	.+372    	; 0x16ea <__vector_26+0x24a>
    1576:	81 38       	cpi	r24, 0x81	; 129
    1578:	91 05       	cpc	r25, r1
    157a:	4c f4       	brge	.+18     	; 0x158e <__vector_26+0xee>
    157c:	80 37       	cpi	r24, 0x70	; 112
    157e:	91 05       	cpc	r25, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <__vector_26+0xe4>
    1582:	b5 c0       	rjmp	.+362    	; 0x16ee <__vector_26+0x24e>
    1584:	88 37       	cpi	r24, 0x78	; 120
    1586:	91 05       	cpc	r25, r1
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_26+0xec>
    158a:	cf c0       	rjmp	.+414    	; 0x172a <__vector_26+0x28a>
    158c:	b0 c0       	rjmp	.+352    	; 0x16ee <__vector_26+0x24e>
    158e:	80 39       	cpi	r24, 0x90	; 144
    1590:	91 05       	cpc	r25, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <__vector_26+0xf6>
    1594:	aa c0       	rjmp	.+340    	; 0x16ea <__vector_26+0x24a>
    1596:	88 39       	cpi	r24, 0x98	; 152
    1598:	91 05       	cpc	r25, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <__vector_26+0xfe>
    159c:	b1 c0       	rjmp	.+354    	; 0x1700 <__vector_26+0x260>
    159e:	88 38       	cpi	r24, 0x88	; 136
    15a0:	91 05       	cpc	r25, r1
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <__vector_26+0x106>
    15a4:	c2 c0       	rjmp	.+388    	; 0x172a <__vector_26+0x28a>
    15a6:	ac c0       	rjmp	.+344    	; 0x1700 <__vector_26+0x260>
    15a8:	88 3b       	cpi	r24, 0xB8	; 184
    15aa:	91 05       	cpc	r25, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <__vector_26+0x110>
    15ae:	5d c0       	rjmp	.+186    	; 0x166a <__vector_26+0x1ca>
    15b0:	89 3b       	cpi	r24, 0xB9	; 185
    15b2:	91 05       	cpc	r25, r1
    15b4:	4c f4       	brge	.+18     	; 0x15c8 <__vector_26+0x128>
    15b6:	88 3a       	cpi	r24, 0xA8	; 168
    15b8:	91 05       	cpc	r25, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <__vector_26+0x11e>
    15bc:	46 c0       	rjmp	.+140    	; 0x164a <__vector_26+0x1aa>
    15be:	80 3b       	cpi	r24, 0xB0	; 176
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <__vector_26+0x126>
    15c4:	b2 c0       	rjmp	.+356    	; 0x172a <__vector_26+0x28a>
    15c6:	41 c0       	rjmp	.+130    	; 0x164a <__vector_26+0x1aa>
    15c8:	88 3c       	cpi	r24, 0xC8	; 200
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__vector_26+0x130>
    15ce:	78 c0       	rjmp	.+240    	; 0x16c0 <__vector_26+0x220>
    15d0:	88 3f       	cpi	r24, 0xF8	; 248
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <__vector_26+0x138>
    15d6:	a3 c0       	rjmp	.+326    	; 0x171e <__vector_26+0x27e>
    15d8:	80 3c       	cpi	r24, 0xC0	; 192
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <__vector_26+0x140>
    15de:	a5 c0       	rjmp	.+330    	; 0x172a <__vector_26+0x28a>
    15e0:	72 c0       	rjmp	.+228    	; 0x16c6 <__vector_26+0x226>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
    15e2:	80 91 a9 03 	lds	r24, 0x03A9
    15e6:	69 c0       	rjmp	.+210    	; 0x16ba <__vector_26+0x21a>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			twi_error = TWI_Arbitration_Lost;
    15e8:	85 e0       	ldi	r24, 0x05	; 5
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	79 c0       	rjmp	.+242    	; 0x16e0 <__vector_26+0x240>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
    15ee:	80 91 1b 06 	lds	r24, 0x061B
    15f2:	90 91 1c 06 	lds	r25, 0x061C
    15f6:	20 91 6d 06 	lds	r18, 0x066D
    15fa:	30 91 6e 06 	lds	r19, 0x066E
    15fe:	82 17       	cp	r24, r18
    1600:	93 07       	cpc	r25, r19
    1602:	00 f5       	brcc	.+64     	; 0x1644 <__vector_26+0x1a4>
				twi_send(twi_buffer.data[alreadyHandled++]);
    1604:	e0 91 6b 06 	lds	r30, 0x066B
    1608:	f0 91 6c 06 	lds	r31, 0x066C
    160c:	e8 0f       	add	r30, r24
    160e:	f9 1f       	adc	r31, r25
    1610:	20 81       	ld	r18, Z
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	90 93 1c 06 	sts	0x061C, r25
    1618:	80 93 1b 06 	sts	0x061B, r24
#define twi_continue() twi_base
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_send(uint8_t data) {
	TWI_DEBUG_BYTE_SENT(data)
	TWDR = data;
    161c:	20 93 bb 00 	sts	0x00BB, r18
	twi_continue();
    1620:	85 e8       	ldi	r24, 0x85	; 133
    1622:	80 93 bc 00 	sts	0x00BC, r24
    1626:	89 c0       	rjmp	.+274    	; 0x173a <__vector_26+0x29a>
		case TW_MT_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			twi_error = TWI_Master_TooMuchDataTransmitted;
    1628:	86 e0       	ldi	r24, 0x06	; 6
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <__vector_26+0x192>
		case TW_MR_DATA_ACK:
			twi_read_byte();
			twi_ack_receive();
			break;
		case TW_MR_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
    162e:	84 e0       	ldi	r24, 0x04	; 4
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	90 93 1e 06 	sts	0x061E, r25
    1636:	80 93 1d 06 	sts	0x061D, r24
			twi_stop();
    163a:	0e 94 9c 00 	call	0x138	; 0x138 <twi_stop>
			break;
    163e:	7d c0       	rjmp	.+250    	; 0x173a <__vector_26+0x29a>
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_read_byte();
    1640:	0e 94 de 00 	call	0x1bc	; 0x1bc <twi_read_byte>
			twi_stop_or_next();
    1644:	0e 94 74 05 	call	0xae8	; 0xae8 <twi_stop_or_next>
			break;
    1648:	78 c0       	rjmp	.+240    	; 0x173a <__vector_26+0x29a>

	TWIBuffer twi_handleMasterRequest() {
		// We only operate in RPC-mode, so this call always arrives
		// after the according twi_handleMasterTransmission, which
		// sets receiveBuffer to the result-value.
		return receiveBuffer;
    164a:	30 91 ab 06 	lds	r19, 0x06AB
    164e:	20 91 ac 06 	lds	r18, 0x06AC
    1652:	90 91 ad 06 	lds	r25, 0x06AD
    1656:	80 91 ae 06 	lds	r24, 0x06AE
#ifdef TWI_Slave
// Slave Transmitter
		case TW_ST_SLA_ACK:
		case TW_ST_ARB_LOST_SLA_ACK:
			twi_buffer = twi_handleMasterRequest();
    165a:	30 93 6b 06 	sts	0x066B, r19
    165e:	20 93 6c 06 	sts	0x066C, r18
    1662:	90 93 6d 06 	sts	0x066D, r25
    1666:	80 93 6e 06 	sts	0x066E, r24
		case TW_ST_DATA_ACK:
			if (alreadyHandled < twi_buffer.size - 1) {
    166a:	80 91 1b 06 	lds	r24, 0x061B
    166e:	90 91 1c 06 	lds	r25, 0x061C
    1672:	20 91 6d 06 	lds	r18, 0x066D
    1676:	30 91 6e 06 	lds	r19, 0x066E
    167a:	21 50       	subi	r18, 0x01	; 1
    167c:	30 40       	sbci	r19, 0x00	; 0
    167e:	60 91 6b 06 	lds	r22, 0x066B
    1682:	70 91 6c 06 	lds	r23, 0x066C
    1686:	ac 01       	movw	r20, r24
    1688:	4f 5f       	subi	r20, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255
    168c:	82 17       	cp	r24, r18
    168e:	93 07       	cpc	r25, r19
    1690:	60 f4       	brcc	.+24     	; 0x16aa <__vector_26+0x20a>
				// At least one more byte after this one.
				twi_send_ack(twi_buffer.data[alreadyHandled++]);
    1692:	86 0f       	add	r24, r22
    1694:	97 1f       	adc	r25, r23
    1696:	fc 01       	movw	r30, r24
    1698:	80 81       	ld	r24, Z
    169a:	80 93 bb 00 	sts	0x00BB, r24
    169e:	50 93 1c 06 	sts	0x061C, r21
    16a2:	40 93 1b 06 	sts	0x061B, r20
    16a6:	85 ec       	ldi	r24, 0xC5	; 197
    16a8:	bc cf       	rjmp	.-136    	; 0x1622 <__vector_26+0x182>
			} else {
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
    16aa:	86 0f       	add	r24, r22
    16ac:	97 1f       	adc	r25, r23
    16ae:	fc 01       	movw	r30, r24
    16b0:	80 81       	ld	r24, Z
    16b2:	50 93 1c 06 	sts	0x061C, r21
    16b6:	40 93 1b 06 	sts	0x061B, r20
#define twi_continue() twi_base
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_send(uint8_t data) {
	TWI_DEBUG_BYTE_SENT(data)
	TWDR = data;
    16ba:	80 93 bb 00 	sts	0x00BB, r24
    16be:	b0 cf       	rjmp	.-160    	; 0x1620 <__vector_26+0x180>
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
			}				
			break;
		case TW_ST_LAST_DATA:
			twi_error = TWI_Slave_NotEnoughDataTransmitted;
    16c0:	87 e0       	ldi	r24, 0x07	; 7
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <__vector_26+0x240>
			twi_end();
			break;
		case TW_ST_DATA_NACK:
			if (alreadyHandled < twi_buffer.size) {
    16c6:	20 91 1b 06 	lds	r18, 0x061B
    16ca:	30 91 1c 06 	lds	r19, 0x061C
    16ce:	80 91 6d 06 	lds	r24, 0x066D
    16d2:	90 91 6e 06 	lds	r25, 0x066E
    16d6:	28 17       	cp	r18, r24
    16d8:	39 07       	cpc	r19, r25
    16da:	f0 f4       	brcc	.+60     	; 0x1718 <__vector_26+0x278>
				twi_error = TWI_Slave_TooMuchDataTransmitted;
    16dc:	88 e0       	ldi	r24, 0x08	; 8
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	90 93 1e 06 	sts	0x061E, r25
    16e4:	80 93 1d 06 	sts	0x061D, r24
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <__vector_26+0x278>
		case TW_SR_ARB_LOST_GCALL_ACK:
			twi_ack_receive();
			break;
		case TW_SR_DATA_ACK:
		case TW_SR_GCALL_DATA_ACK:
			twi_read_byte();
    16ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <twi_read_byte>
			twi_ack_receive();
    16ee:	0e 94 cc 00 	call	0x198	; 0x198 <twi_ack_receive>
			break;
    16f2:	23 c0       	rjmp	.+70     	; 0x173a <__vector_26+0x29a>
		case TW_SR_STOP:
			// Transmission ended early.
			twi_error = TWI_Slave_NotEnoughDataReceived;	
    16f4:	89 e0       	ldi	r24, 0x09	; 9
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	90 93 1e 06 	sts	0x061E, r25
    16fc:	80 93 1d 06 	sts	0x061D, r24
		case TW_SR_DATA_NACK:
		case TW_SR_GCALL_DATA_NACK:
			twi_read_byte();
    1700:	0e 94 de 00 	call	0x1bc	; 0x1bc <twi_read_byte>
			// Invoke application-code before releasing the bus. The twi_buffer should be copied quickly.
			twi_handleMasterTransmission((TWIBuffer) { twi_buffer.data, alreadyHandled } );
    1704:	60 91 6b 06 	lds	r22, 0x066B
    1708:	70 91 6c 06 	lds	r23, 0x066C
    170c:	80 91 1b 06 	lds	r24, 0x061B
    1710:	90 91 1c 06 	lds	r25, 0x061C
    1714:	0e 94 23 0a 	call	0x1446	; 0x1446 <twi_handleMasterTransmission>
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
    1718:	0e 94 b4 00 	call	0x168	; 0x168 <twi_end>
			break;
    171c:	0e c0       	rjmp	.+28     	; 0x173a <__vector_26+0x29a>
#endif
// Misc
		case TW_NO_INFO:
			twi_error = TWI_No_Info_Interrupt;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	05 c0       	rjmp	.+10     	; 0x172e <__vector_26+0x28e>
			twi_unexpectedCondition();
			break;
		case TW_BUS_ERROR:
			twi_error = TWI_Bus_Error;
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 c0       	rjmp	.+4      	; 0x172e <__vector_26+0x28e>
			twi_unexpectedCondition();
			break;
		default:
			twi_error = TWI_Illegal_Status;
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	90 93 1e 06 	sts	0x061E, r25
    1732:	80 93 1d 06 	sts	0x061D, r24
			twi_unexpectedCondition();
    1736:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <twi_unexpectedCondition>
			break;
	}
}
    173a:	ff 91       	pop	r31
    173c:	ef 91       	pop	r30
    173e:	bf 91       	pop	r27
    1740:	af 91       	pop	r26
    1742:	9f 91       	pop	r25
    1744:	8f 91       	pop	r24
    1746:	7f 91       	pop	r23
    1748:	6f 91       	pop	r22
    174a:	5f 91       	pop	r21
    174c:	4f 91       	pop	r20
    174e:	3f 91       	pop	r19
    1750:	2f 91       	pop	r18
    1752:	0f 90       	pop	r0
    1754:	0b be       	out	0x3b, r0	; 59
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <tankIO_system_initialized>:
#endif

byte initialized = 0;

void tankIO_system_initialized() {
	initialized = TANK_IO_INITIALIZED;
    1760:	86 ed       	ldi	r24, 0xD6	; 214
    1762:	80 93 9e 03 	sts	0x039E, r24
}
    1766:	08 95       	ret

00001768 <tankIO_server_reset>:
// ==
// System
// ==

void tankIO_server_reset() {
	initialized = FALSE; // In case the master queries this.
    1768:	10 92 9e 03 	sts	0x039E, r1
	HARDWARE_RESET();
    176c:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <HARDWARE_RESET>
}
    1770:	08 95       	ret

00001772 <tankIO_server_reset_handler>:
// This is declared ASYNC to cleanly terminate the current TWI-connection.
TWI_RPC_SERVER_FUNCTION_ASYNC_NOTIFY	(tankIO_server_reset, TANK_IO_reset)
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	ec 01       	movw	r28, r24
    1778:	0e 94 b4 0b 	call	0x1768	; 0x1768 <tankIO_server_reset>
    177c:	1b 82       	std	Y+3, r1	; 0x03
    177e:	1a 82       	std	Y+2, r1	; 0x02
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <tankIO_server_reset_register_function>:
    1786:	4f 92       	push	r4
    1788:	5f 92       	push	r5
    178a:	6f 92       	push	r6
    178c:	7f 92       	push	r7
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	10 92 ed 01 	sts	0x01ED, r1
    17aa:	10 92 ec 01 	sts	0x01EC, r1
    17ae:	e5 ee       	ldi	r30, 0xE5	; 229
    17b0:	f1 e0       	ldi	r31, 0x01	; 1
    17b2:	f0 93 f3 01 	sts	0x01F3, r31
    17b6:	e0 93 f2 01 	sts	0x01F2, r30
    17ba:	82 e0       	ldi	r24, 0x02	; 2
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	90 93 f5 01 	sts	0x01F5, r25
    17c2:	80 93 f4 01 	sts	0x01F4, r24
    17c6:	a0 91 9c 03 	lds	r26, 0x039C
    17ca:	b0 91 9d 03 	lds	r27, 0x039D
    17ce:	8f 01       	movw	r16, r30
    17d0:	0d 5f       	subi	r16, 0xFD	; 253
    17d2:	1f 4f       	sbci	r17, 0xFF	; 255
    17d4:	10 97       	sbiw	r26, 0x00	; 0
    17d6:	09 f0       	breq	.+2      	; 0x17da <tankIO_server_reset_register_function+0x54>
    17d8:	49 c0       	rjmp	.+146    	; 0x186c <tankIO_server_reset_register_function+0xe6>
    17da:	f0 93 9d 03 	sts	0x039D, r31
    17de:	e0 93 9c 03 	sts	0x039C, r30
    17e2:	10 92 eb 01 	sts	0x01EB, r1
    17e6:	10 92 ea 01 	sts	0x01EA, r1
    17ea:	88 e1       	ldi	r24, 0x18	; 24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    17f2:	90 93 e9 01 	sts	0x01E9, r25
    17f6:	80 93 e8 01 	sts	0x01E8, r24
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	09 f4       	brne	.+2      	; 0x1800 <tankIO_server_reset_register_function+0x7a>
    17fe:	d7 c0       	rjmp	.+430    	; 0x19ae <tankIO_server_reset_register_function+0x228>
    1800:	e8 2f       	mov	r30, r24
    1802:	f9 2f       	mov	r31, r25
    1804:	88 e1       	ldi	r24, 0x18	; 24
    1806:	df 01       	movw	r26, r30
    1808:	1d 92       	st	X+, r1
    180a:	8a 95       	dec	r24
    180c:	e9 f7       	brne	.-6      	; 0x1808 <tankIO_server_reset_register_function+0x82>
    180e:	c0 91 e8 01 	lds	r28, 0x01E8
    1812:	d0 91 e9 01 	lds	r29, 0x01E9
    1816:	19 87       	std	Y+9, r17	; 0x09
    1818:	08 87       	std	Y+8, r16	; 0x08
    181a:	80 e2       	ldi	r24, 0x20	; 32
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9b 83       	std	Y+3, r25	; 0x03
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	85 e0       	ldi	r24, 0x05	; 5
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9d 83       	std	Y+5, r25	; 0x05
    1828:	8c 83       	std	Y+4, r24	; 0x04
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9b 87       	std	Y+11, r25	; 0x0b
    1830:	8a 87       	std	Y+10, r24	; 0x0a
    1832:	80 ec       	ldi	r24, 0xC0	; 192
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    183a:	99 83       	std	Y+1, r25	; 0x01
    183c:	88 83       	st	Y, r24
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	09 f4       	brne	.+2      	; 0x1844 <tankIO_server_reset_register_function+0xbe>
    1842:	b5 c0       	rjmp	.+362    	; 0x19ae <tankIO_server_reset_register_function+0x228>
    1844:	e8 2f       	mov	r30, r24
    1846:	f9 2f       	mov	r31, r25
    1848:	80 ec       	ldi	r24, 0xC0	; 192
    184a:	df 01       	movw	r26, r30
    184c:	1d 92       	st	X+, r1
    184e:	8a 95       	dec	r24
    1850:	e9 f7       	brne	.-6      	; 0x184c <tankIO_server_reset_register_function+0xc6>
    1852:	e0 91 e8 01 	lds	r30, 0x01E8
    1856:	f0 91 e9 01 	lds	r31, 0x01E9
    185a:	81 ee       	ldi	r24, 0xE1	; 225
    185c:	9f e1       	ldi	r25, 0x1F	; 31
    185e:	a1 e1       	ldi	r26, 0x11	; 17
    1860:	b0 ea       	ldi	r27, 0xA0	; 160
    1862:	84 8b       	std	Z+20, r24	; 0x14
    1864:	95 8b       	std	Z+21, r25	; 0x15
    1866:	a6 8b       	std	Z+22, r26	; 0x16
    1868:	b7 8b       	std	Z+23, r27	; 0x17
    186a:	16 c0       	rjmp	.+44     	; 0x1898 <tankIO_server_reset_register_function+0x112>
    186c:	13 96       	adiw	r26, 0x03	; 3
    186e:	0d 90       	ld	r0, X+
    1870:	bc 91       	ld	r27, X
    1872:	a0 2d       	mov	r26, r0
    1874:	18 96       	adiw	r26, 0x08	; 8
    1876:	cd 91       	ld	r28, X+
    1878:	dc 91       	ld	r29, X
    187a:	19 97       	sbiw	r26, 0x09	; 9
    187c:	fd 83       	std	Y+5, r31	; 0x05
    187e:	ec 83       	std	Y+4, r30	; 0x04
    1880:	1a 96       	adiw	r26, 0x0a	; 10
    1882:	8d 91       	ld	r24, X+
    1884:	9c 91       	ld	r25, X
    1886:	1b 97       	sbiw	r26, 0x0b	; 11
    1888:	c8 1b       	sub	r28, r24
    188a:	d9 0b       	sbc	r29, r25
    188c:	d6 83       	std	Z+6, r29	; 0x06
    188e:	c5 83       	std	Z+5, r28	; 0x05
    1890:	19 96       	adiw	r26, 0x09	; 9
    1892:	1c 93       	st	X, r17
    1894:	0e 93       	st	-X, r16
    1896:	18 97       	sbiw	r26, 0x08	; 8
    1898:	e0 91 9c 03 	lds	r30, 0x039C
    189c:	f0 91 9d 03 	lds	r31, 0x039D
    18a0:	c3 81       	ldd	r28, Z+3	; 0x03
    18a2:	d4 81       	ldd	r29, Z+4	; 0x04
    18a4:	8e 81       	ldd	r24, Y+6	; 0x06
    18a6:	9f 81       	ldd	r25, Y+7	; 0x07
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	9f 83       	std	Y+7, r25	; 0x07
    18ac:	8e 83       	std	Y+6, r24	; 0x06
    18ae:	48 ee       	ldi	r20, 0xE8	; 232
    18b0:	51 e0       	ldi	r21, 0x01	; 1
    18b2:	d0 93 e9 01 	sts	0x01E9, r29
    18b6:	c0 93 e8 01 	sts	0x01E8, r28
    18ba:	da 01       	movw	r26, r20
    18bc:	13 97       	sbiw	r26, 0x03	; 3
    18be:	20 91 e5 01 	lds	r18, 0x01E5
    18c2:	33 27       	eor	r19, r19
    18c4:	27 fd       	sbrc	r18, 7
    18c6:	30 95       	com	r19
    18c8:	c9 01       	movw	r24, r18
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	96 95       	lsr	r25
    18d0:	87 95       	ror	r24
    18d2:	b9 01       	movw	r22, r18
    18d4:	15 e0       	ldi	r17, 0x05	; 5
    18d6:	66 0f       	add	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	1a 95       	dec	r17
    18dc:	e1 f7       	brne	.-8      	; 0x18d6 <tankIO_server_reset_register_function+0x150>
    18de:	86 0f       	add	r24, r22
    18e0:	97 1f       	adc	r25, r23
    18e2:	60 91 e6 01 	lds	r22, 0x01E6
    18e6:	77 27       	eor	r23, r23
    18e8:	67 fd       	sbrc	r22, 7
    18ea:	70 95       	com	r23
    18ec:	86 0f       	add	r24, r22
    18ee:	97 1f       	adc	r25, r23
    18f0:	82 27       	eor	r24, r18
    18f2:	93 27       	eor	r25, r19
    18f4:	52 96       	adiw	r26, 0x12	; 18
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
    18fa:	51 97       	sbiw	r26, 0x11	; 17
    18fc:	03 80       	ldd	r0, Z+3	; 0x03
    18fe:	f4 81       	ldd	r31, Z+4	; 0x04
    1900:	e0 2d       	mov	r30, r0
    1902:	22 81       	ldd	r18, Z+2	; 0x02
    1904:	33 81       	ldd	r19, Z+3	; 0x03
    1906:	21 50       	subi	r18, 0x01	; 1
    1908:	30 40       	sbci	r19, 0x00	; 0
    190a:	28 23       	and	r18, r24
    190c:	39 23       	and	r19, r25
    190e:	c9 01       	movw	r24, r18
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	82 0f       	add	r24, r18
    1916:	93 1f       	adc	r25, r19
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	01 90       	ld	r0, Z+
    191e:	f0 81       	ld	r31, Z
    1920:	e0 2d       	mov	r30, r0
    1922:	e8 0f       	add	r30, r24
    1924:	f9 1f       	adc	r31, r25
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	93 83       	std	Z+3, r25	; 0x03
    192e:	82 83       	std	Z+2, r24	; 0x02
    1930:	20 81       	ld	r18, Z
    1932:	31 81       	ldd	r19, Z+1	; 0x01
    1934:	1c 96       	adiw	r26, 0x0c	; 12
    1936:	3c 93       	st	X, r19
    1938:	2e 93       	st	-X, r18
    193a:	1b 97       	sbiw	r26, 0x0b	; 11
    193c:	1a 96       	adiw	r26, 0x0a	; 10
    193e:	1c 92       	st	X, r1
    1940:	1e 92       	st	-X, r1
    1942:	19 97       	sbiw	r26, 0x09	; 9
    1944:	21 15       	cp	r18, r1
    1946:	31 05       	cpc	r19, r1
    1948:	29 f0       	breq	.+10     	; 0x1954 <tankIO_server_reset_register_function+0x1ce>
    194a:	d9 01       	movw	r26, r18
    194c:	17 96       	adiw	r26, 0x07	; 7
    194e:	5c 93       	st	X, r21
    1950:	4e 93       	st	-X, r20
    1952:	16 97       	sbiw	r26, 0x06	; 6
    1954:	28 ee       	ldi	r18, 0xE8	; 232
    1956:	31 e0       	ldi	r19, 0x01	; 1
    1958:	31 83       	std	Z+1, r19	; 0x01
    195a:	20 83       	st	Z, r18
    195c:	24 81       	ldd	r18, Z+4	; 0x04
    195e:	35 81       	ldd	r19, Z+5	; 0x05
    1960:	2f 5f       	subi	r18, 0xFF	; 255
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	a9 01       	movw	r20, r18
    1966:	44 0f       	add	r20, r20
    1968:	55 1f       	adc	r21, r21
    196a:	e3 e0       	ldi	r30, 0x03	; 3
    196c:	22 0f       	add	r18, r18
    196e:	33 1f       	adc	r19, r19
    1970:	ea 95       	dec	r30
    1972:	e1 f7       	brne	.-8      	; 0x196c <tankIO_server_reset_register_function+0x1e6>
    1974:	42 0f       	add	r20, r18
    1976:	53 1f       	adc	r21, r19
    1978:	84 17       	cp	r24, r20
    197a:	95 07       	cpc	r25, r21
    197c:	08 f4       	brcc	.+2      	; 0x1980 <tankIO_server_reset_register_function+0x1fa>
    197e:	c8 c0       	rjmp	.+400    	; 0x1b10 <tankIO_server_reset_register_function+0x38a>
    1980:	8a 89       	ldd	r24, Y+18	; 0x12
    1982:	9b 89       	ldd	r25, Y+19	; 0x13
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	91 05       	cpc	r25, r1
    1988:	09 f4       	brne	.+2      	; 0x198c <tankIO_server_reset_register_function+0x206>
    198a:	c2 c0       	rjmp	.+388    	; 0x1b10 <tankIO_server_reset_register_function+0x38a>
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	8c 01       	movw	r16, r24
    1992:	00 0f       	add	r16, r16
    1994:	11 1f       	adc	r17, r17
    1996:	08 0f       	add	r16, r24
    1998:	19 1f       	adc	r17, r25
    199a:	00 0f       	add	r16, r16
    199c:	11 1f       	adc	r17, r17
    199e:	00 0f       	add	r16, r16
    19a0:	11 1f       	adc	r17, r17
    19a2:	c8 01       	movw	r24, r16
    19a4:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    19a8:	4c 01       	movw	r8, r24
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <tankIO_server_reset_register_function+0x230>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	9f ef       	ldi	r25, 0xFF	; 255
    19b2:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	a8 01       	movw	r20, r16
    19bc:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    19c0:	0e 81       	ldd	r16, Y+6	; 0x06
    19c2:	1f 81       	ldd	r17, Y+7	; 0x07
    19c4:	6a 80       	ldd	r6, Y+2	; 0x02
    19c6:	7b 80       	ldd	r7, Y+3	; 0x03
    19c8:	73 01       	movw	r14, r6
    19ca:	ee 0c       	add	r14, r14
    19cc:	ff 1c       	adc	r15, r15
    19ce:	08 94       	sec
    19d0:	e1 08       	sbc	r14, r1
    19d2:	f1 08       	sbc	r15, r1
    19d4:	c7 01       	movw	r24, r14
    19d6:	80 23       	and	r24, r16
    19d8:	91 23       	and	r25, r17
    19da:	21 e0       	ldi	r18, 0x01	; 1
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <tankIO_server_reset_register_function+0x260>
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <tankIO_server_reset_register_function+0x26c>
    19ee:	16 95       	lsr	r17
    19f0:	07 95       	ror	r16
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <tankIO_server_reset_register_function+0x268>
    19f6:	02 0f       	add	r16, r18
    19f8:	13 1f       	adc	r17, r19
    19fa:	1d 87       	std	Y+13, r17	; 0x0d
    19fc:	0c 87       	std	Y+12, r16	; 0x0c
    19fe:	1f 86       	std	Y+15, r1	; 0x0f
    1a00:	1e 86       	std	Y+14, r1	; 0x0e
    1a02:	cc 24       	eor	r12, r12
    1a04:	dd 24       	eor	r13, r13
    1a06:	aa 24       	eor	r10, r10
    1a08:	bb 24       	eor	r11, r11
    1a0a:	51 c0       	rjmp	.+162    	; 0x1aae <tankIO_server_reset_register_function+0x328>
    1a0c:	8c 0d       	add	r24, r12
    1a0e:	9d 1d       	adc	r25, r13
    1a10:	fc 01       	movw	r30, r24
    1a12:	20 81       	ld	r18, Z
    1a14:	31 81       	ldd	r19, Z+1	; 0x01
    1a16:	40 c0       	rjmp	.+128    	; 0x1a98 <tankIO_server_reset_register_function+0x312>
    1a18:	d9 01       	movw	r26, r18
    1a1a:	18 96       	adiw	r26, 0x08	; 8
    1a1c:	5c 90       	ld	r5, X
    1a1e:	18 97       	sbiw	r26, 0x08	; 8
    1a20:	19 96       	adiw	r26, 0x09	; 9
    1a22:	4c 90       	ld	r4, X
    1a24:	19 97       	sbiw	r26, 0x09	; 9
    1a26:	1e 96       	adiw	r26, 0x0e	; 14
    1a28:	8d 91       	ld	r24, X+
    1a2a:	9c 91       	ld	r25, X
    1a2c:	1f 97       	sbiw	r26, 0x0f	; 15
    1a2e:	8e 21       	and	r24, r14
    1a30:	9f 21       	and	r25, r15
    1a32:	fc 01       	movw	r30, r24
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e8 0f       	add	r30, r24
    1a3a:	f9 1f       	adc	r31, r25
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	e8 0d       	add	r30, r8
    1a42:	f9 1d       	adc	r31, r9
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	93 83       	std	Z+3, r25	; 0x03
    1a4c:	82 83       	std	Z+2, r24	; 0x02
    1a4e:	08 17       	cp	r16, r24
    1a50:	19 07       	cpc	r17, r25
    1a52:	58 f4       	brcc	.+22     	; 0x1a6a <tankIO_server_reset_register_function+0x2e4>
    1a54:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a56:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a58:	4f 5f       	subi	r20, 0xFF	; 255
    1a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5c:	5f 87       	std	Y+15, r21	; 0x0f
    1a5e:	4e 87       	std	Y+14, r20	; 0x0e
    1a60:	b8 01       	movw	r22, r16
    1a62:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    1a66:	75 83       	std	Z+5, r23	; 0x05
    1a68:	64 83       	std	Z+4, r22	; 0x04
    1a6a:	d9 01       	movw	r26, r18
    1a6c:	17 96       	adiw	r26, 0x07	; 7
    1a6e:	1c 92       	st	X, r1
    1a70:	1e 92       	st	-X, r1
    1a72:	16 97       	sbiw	r26, 0x06	; 6
    1a74:	80 81       	ld	r24, Z
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	19 96       	adiw	r26, 0x09	; 9
    1a7a:	9c 93       	st	X, r25
    1a7c:	8e 93       	st	-X, r24
    1a7e:	18 97       	sbiw	r26, 0x08	; 8
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <tankIO_server_reset_register_function+0x308>
    1a84:	dc 01       	movw	r26, r24
    1a86:	17 96       	adiw	r26, 0x07	; 7
    1a88:	3c 93       	st	X, r19
    1a8a:	2e 93       	st	-X, r18
    1a8c:	16 97       	sbiw	r26, 0x06	; 6
    1a8e:	31 83       	std	Z+1, r19	; 0x01
    1a90:	20 83       	st	Z, r18
    1a92:	c2 01       	movw	r24, r4
    1a94:	29 2f       	mov	r18, r25
    1a96:	34 2d       	mov	r19, r4
    1a98:	21 15       	cp	r18, r1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <tankIO_server_reset_register_function+0x31a>
    1a9e:	bc cf       	rjmp	.-136    	; 0x1a18 <tankIO_server_reset_register_function+0x292>
    1aa0:	08 94       	sec
    1aa2:	a1 1c       	adc	r10, r1
    1aa4:	b1 1c       	adc	r11, r1
    1aa6:	e6 e0       	ldi	r30, 0x06	; 6
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	ce 0e       	add	r12, r30
    1aac:	df 1e       	adc	r13, r31
    1aae:	88 81       	ld	r24, Y
    1ab0:	99 81       	ldd	r25, Y+1	; 0x01
    1ab2:	a6 14       	cp	r10, r6
    1ab4:	b7 04       	cpc	r11, r7
    1ab6:	08 f4       	brcc	.+2      	; 0x1aba <tankIO_server_reset_register_function+0x334>
    1ab8:	a9 cf       	rjmp	.-174    	; 0x1a0c <tankIO_server_reset_register_function+0x286>
    1aba:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    1abe:	e0 91 e8 01 	lds	r30, 0x01E8
    1ac2:	f0 91 e9 01 	lds	r31, 0x01E9
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	93 83       	std	Z+3, r25	; 0x03
    1ad0:	82 83       	std	Z+2, r24	; 0x02
    1ad2:	84 81       	ldd	r24, Z+4	; 0x04
    1ad4:	95 81       	ldd	r25, Z+5	; 0x05
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	95 83       	std	Z+5, r25	; 0x05
    1ada:	84 83       	std	Z+4, r24	; 0x04
    1adc:	91 82       	std	Z+1, r9	; 0x01
    1ade:	80 82       	st	Z, r8
    1ae0:	86 81       	ldd	r24, Z+6	; 0x06
    1ae2:	97 81       	ldd	r25, Z+7	; 0x07
    1ae4:	96 95       	lsr	r25
    1ae6:	87 95       	ror	r24
    1ae8:	26 85       	ldd	r18, Z+14	; 0x0e
    1aea:	37 85       	ldd	r19, Z+15	; 0x0f
    1aec:	82 17       	cp	r24, r18
    1aee:	93 07       	cpc	r25, r19
    1af0:	20 f4       	brcc	.+8      	; 0x1afa <tankIO_server_reset_register_function+0x374>
    1af2:	80 89       	ldd	r24, Z+16	; 0x10
    1af4:	91 89       	ldd	r25, Z+17	; 0x11
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <tankIO_server_reset_register_function+0x378>
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	91 8b       	std	Z+17, r25	; 0x11
    1b00:	80 8b       	std	Z+16, r24	; 0x10
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	91 05       	cpc	r25, r1
    1b06:	20 f0       	brcs	.+8      	; 0x1b10 <tankIO_server_reset_register_function+0x38a>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	93 8b       	std	Z+19, r25	; 0x13
    1b0e:	82 8b       	std	Z+18, r24	; 0x12
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	bf 90       	pop	r11
    1b22:	af 90       	pop	r10
    1b24:	9f 90       	pop	r9
    1b26:	8f 90       	pop	r8
    1b28:	7f 90       	pop	r7
    1b2a:	6f 90       	pop	r6
    1b2c:	5f 90       	pop	r5
    1b2e:	4f 90       	pop	r4
    1b30:	08 95       	ret

00001b32 <TANKIO_server_isInitialized>:

void TANKIO_server_isInitialized(TWIBuffer *result) {
    1b32:	fc 01       	movw	r30, r24
	FILL_RESULT(result, initialized, BOOL)
    1b34:	a0 81       	ld	r26, Z
    1b36:	b1 81       	ldd	r27, Z+1	; 0x01
    1b38:	80 91 9e 03 	lds	r24, 0x039E
    1b3c:	8c 93       	st	X, r24
    1b3e:	11 96       	adiw	r26, 0x01	; 1
    1b40:	1c 92       	st	X, r1
    1b42:	11 97       	sbiw	r26, 0x01	; 1
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	93 83       	std	Z+3, r25	; 0x03
    1b4a:	82 83       	std	Z+2, r24	; 0x02
}
    1b4c:	08 95       	ret

00001b4e <TANKIO_server_isInitialized_register_function>:
TWI_RPC_SERVER_FUNCTION_NOARGS	(TANKIO_server_isInitialized, TANK_IO_isInitialized, BOOL)
    1b4e:	4f 92       	push	r4
    1b50:	5f 92       	push	r5
    1b52:	6f 92       	push	r6
    1b54:	7f 92       	push	r7
    1b56:	8f 92       	push	r8
    1b58:	9f 92       	push	r9
    1b5a:	af 92       	push	r10
    1b5c:	bf 92       	push	r11
    1b5e:	cf 92       	push	r12
    1b60:	df 92       	push	r13
    1b62:	ef 92       	push	r14
    1b64:	ff 92       	push	r15
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	10 92 00 02 	sts	0x0200, r1
    1b72:	10 92 ff 01 	sts	0x01FF, r1
    1b76:	e8 ef       	ldi	r30, 0xF8	; 248
    1b78:	f1 e0       	ldi	r31, 0x01	; 1
    1b7a:	f0 93 06 02 	sts	0x0206, r31
    1b7e:	e0 93 05 02 	sts	0x0205, r30
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	90 93 08 02 	sts	0x0208, r25
    1b8a:	80 93 07 02 	sts	0x0207, r24
    1b8e:	a0 91 9c 03 	lds	r26, 0x039C
    1b92:	b0 91 9d 03 	lds	r27, 0x039D
    1b96:	8f 01       	movw	r16, r30
    1b98:	0d 5f       	subi	r16, 0xFD	; 253
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	10 97       	sbiw	r26, 0x00	; 0
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <TANKIO_server_isInitialized_register_function+0x54>
    1ba0:	49 c0       	rjmp	.+146    	; 0x1c34 <TANKIO_server_isInitialized_register_function+0xe6>
    1ba2:	f0 93 9d 03 	sts	0x039D, r31
    1ba6:	e0 93 9c 03 	sts	0x039C, r30
    1baa:	10 92 fe 01 	sts	0x01FE, r1
    1bae:	10 92 fd 01 	sts	0x01FD, r1
    1bb2:	88 e1       	ldi	r24, 0x18	; 24
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    1bba:	90 93 fc 01 	sts	0x01FC, r25
    1bbe:	80 93 fb 01 	sts	0x01FB, r24
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <TANKIO_server_isInitialized_register_function+0x7a>
    1bc6:	d7 c0       	rjmp	.+430    	; 0x1d76 <TANKIO_server_isInitialized_register_function+0x228>
    1bc8:	e8 2f       	mov	r30, r24
    1bca:	f9 2f       	mov	r31, r25
    1bcc:	88 e1       	ldi	r24, 0x18	; 24
    1bce:	df 01       	movw	r26, r30
    1bd0:	1d 92       	st	X+, r1
    1bd2:	8a 95       	dec	r24
    1bd4:	e9 f7       	brne	.-6      	; 0x1bd0 <TANKIO_server_isInitialized_register_function+0x82>
    1bd6:	c0 91 fb 01 	lds	r28, 0x01FB
    1bda:	d0 91 fc 01 	lds	r29, 0x01FC
    1bde:	19 87       	std	Y+9, r17	; 0x09
    1be0:	08 87       	std	Y+8, r16	; 0x08
    1be2:	80 e2       	ldi	r24, 0x20	; 32
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	8a 83       	std	Y+2, r24	; 0x02
    1bea:	85 e0       	ldi	r24, 0x05	; 5
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9d 83       	std	Y+5, r25	; 0x05
    1bf0:	8c 83       	std	Y+4, r24	; 0x04
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9b 87       	std	Y+11, r25	; 0x0b
    1bf8:	8a 87       	std	Y+10, r24	; 0x0a
    1bfa:	80 ec       	ldi	r24, 0xC0	; 192
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    1c02:	99 83       	std	Y+1, r25	; 0x01
    1c04:	88 83       	st	Y, r24
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <TANKIO_server_isInitialized_register_function+0xbe>
    1c0a:	b5 c0       	rjmp	.+362    	; 0x1d76 <TANKIO_server_isInitialized_register_function+0x228>
    1c0c:	e8 2f       	mov	r30, r24
    1c0e:	f9 2f       	mov	r31, r25
    1c10:	80 ec       	ldi	r24, 0xC0	; 192
    1c12:	df 01       	movw	r26, r30
    1c14:	1d 92       	st	X+, r1
    1c16:	8a 95       	dec	r24
    1c18:	e9 f7       	brne	.-6      	; 0x1c14 <TANKIO_server_isInitialized_register_function+0xc6>
    1c1a:	e0 91 fb 01 	lds	r30, 0x01FB
    1c1e:	f0 91 fc 01 	lds	r31, 0x01FC
    1c22:	81 ee       	ldi	r24, 0xE1	; 225
    1c24:	9f e1       	ldi	r25, 0x1F	; 31
    1c26:	a1 e1       	ldi	r26, 0x11	; 17
    1c28:	b0 ea       	ldi	r27, 0xA0	; 160
    1c2a:	84 8b       	std	Z+20, r24	; 0x14
    1c2c:	95 8b       	std	Z+21, r25	; 0x15
    1c2e:	a6 8b       	std	Z+22, r26	; 0x16
    1c30:	b7 8b       	std	Z+23, r27	; 0x17
    1c32:	16 c0       	rjmp	.+44     	; 0x1c60 <TANKIO_server_isInitialized_register_function+0x112>
    1c34:	13 96       	adiw	r26, 0x03	; 3
    1c36:	0d 90       	ld	r0, X+
    1c38:	bc 91       	ld	r27, X
    1c3a:	a0 2d       	mov	r26, r0
    1c3c:	18 96       	adiw	r26, 0x08	; 8
    1c3e:	cd 91       	ld	r28, X+
    1c40:	dc 91       	ld	r29, X
    1c42:	19 97       	sbiw	r26, 0x09	; 9
    1c44:	fd 83       	std	Y+5, r31	; 0x05
    1c46:	ec 83       	std	Y+4, r30	; 0x04
    1c48:	1a 96       	adiw	r26, 0x0a	; 10
    1c4a:	8d 91       	ld	r24, X+
    1c4c:	9c 91       	ld	r25, X
    1c4e:	1b 97       	sbiw	r26, 0x0b	; 11
    1c50:	c8 1b       	sub	r28, r24
    1c52:	d9 0b       	sbc	r29, r25
    1c54:	d6 83       	std	Z+6, r29	; 0x06
    1c56:	c5 83       	std	Z+5, r28	; 0x05
    1c58:	19 96       	adiw	r26, 0x09	; 9
    1c5a:	1c 93       	st	X, r17
    1c5c:	0e 93       	st	-X, r16
    1c5e:	18 97       	sbiw	r26, 0x08	; 8
    1c60:	e0 91 9c 03 	lds	r30, 0x039C
    1c64:	f0 91 9d 03 	lds	r31, 0x039D
    1c68:	c3 81       	ldd	r28, Z+3	; 0x03
    1c6a:	d4 81       	ldd	r29, Z+4	; 0x04
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c70:	01 96       	adiw	r24, 0x01	; 1
    1c72:	9f 83       	std	Y+7, r25	; 0x07
    1c74:	8e 83       	std	Y+6, r24	; 0x06
    1c76:	4b ef       	ldi	r20, 0xFB	; 251
    1c78:	51 e0       	ldi	r21, 0x01	; 1
    1c7a:	d0 93 fc 01 	sts	0x01FC, r29
    1c7e:	c0 93 fb 01 	sts	0x01FB, r28
    1c82:	da 01       	movw	r26, r20
    1c84:	13 97       	sbiw	r26, 0x03	; 3
    1c86:	20 91 f8 01 	lds	r18, 0x01F8
    1c8a:	33 27       	eor	r19, r19
    1c8c:	27 fd       	sbrc	r18, 7
    1c8e:	30 95       	com	r19
    1c90:	c9 01       	movw	r24, r18
    1c92:	96 95       	lsr	r25
    1c94:	87 95       	ror	r24
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	b9 01       	movw	r22, r18
    1c9c:	15 e0       	ldi	r17, 0x05	; 5
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	1a 95       	dec	r17
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <TANKIO_server_isInitialized_register_function+0x150>
    1ca6:	86 0f       	add	r24, r22
    1ca8:	97 1f       	adc	r25, r23
    1caa:	60 91 f9 01 	lds	r22, 0x01F9
    1cae:	77 27       	eor	r23, r23
    1cb0:	67 fd       	sbrc	r22, 7
    1cb2:	70 95       	com	r23
    1cb4:	86 0f       	add	r24, r22
    1cb6:	97 1f       	adc	r25, r23
    1cb8:	82 27       	eor	r24, r18
    1cba:	93 27       	eor	r25, r19
    1cbc:	52 96       	adiw	r26, 0x12	; 18
    1cbe:	9c 93       	st	X, r25
    1cc0:	8e 93       	st	-X, r24
    1cc2:	51 97       	sbiw	r26, 0x11	; 17
    1cc4:	03 80       	ldd	r0, Z+3	; 0x03
    1cc6:	f4 81       	ldd	r31, Z+4	; 0x04
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	22 81       	ldd	r18, Z+2	; 0x02
    1ccc:	33 81       	ldd	r19, Z+3	; 0x03
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	30 40       	sbci	r19, 0x00	; 0
    1cd2:	28 23       	and	r18, r24
    1cd4:	39 23       	and	r19, r25
    1cd6:	c9 01       	movw	r24, r18
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	82 0f       	add	r24, r18
    1cde:	93 1f       	adc	r25, r19
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	01 90       	ld	r0, Z+
    1ce6:	f0 81       	ld	r31, Z
    1ce8:	e0 2d       	mov	r30, r0
    1cea:	e8 0f       	add	r30, r24
    1cec:	f9 1f       	adc	r31, r25
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	93 83       	std	Z+3, r25	; 0x03
    1cf6:	82 83       	std	Z+2, r24	; 0x02
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	1c 96       	adiw	r26, 0x0c	; 12
    1cfe:	3c 93       	st	X, r19
    1d00:	2e 93       	st	-X, r18
    1d02:	1b 97       	sbiw	r26, 0x0b	; 11
    1d04:	1a 96       	adiw	r26, 0x0a	; 10
    1d06:	1c 92       	st	X, r1
    1d08:	1e 92       	st	-X, r1
    1d0a:	19 97       	sbiw	r26, 0x09	; 9
    1d0c:	21 15       	cp	r18, r1
    1d0e:	31 05       	cpc	r19, r1
    1d10:	29 f0       	breq	.+10     	; 0x1d1c <TANKIO_server_isInitialized_register_function+0x1ce>
    1d12:	d9 01       	movw	r26, r18
    1d14:	17 96       	adiw	r26, 0x07	; 7
    1d16:	5c 93       	st	X, r21
    1d18:	4e 93       	st	-X, r20
    1d1a:	16 97       	sbiw	r26, 0x06	; 6
    1d1c:	2b ef       	ldi	r18, 0xFB	; 251
    1d1e:	31 e0       	ldi	r19, 0x01	; 1
    1d20:	31 83       	std	Z+1, r19	; 0x01
    1d22:	20 83       	st	Z, r18
    1d24:	24 81       	ldd	r18, Z+4	; 0x04
    1d26:	35 81       	ldd	r19, Z+5	; 0x05
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	a9 01       	movw	r20, r18
    1d2e:	44 0f       	add	r20, r20
    1d30:	55 1f       	adc	r21, r21
    1d32:	f3 e0       	ldi	r31, 0x03	; 3
    1d34:	22 0f       	add	r18, r18
    1d36:	33 1f       	adc	r19, r19
    1d38:	fa 95       	dec	r31
    1d3a:	e1 f7       	brne	.-8      	; 0x1d34 <TANKIO_server_isInitialized_register_function+0x1e6>
    1d3c:	42 0f       	add	r20, r18
    1d3e:	53 1f       	adc	r21, r19
    1d40:	84 17       	cp	r24, r20
    1d42:	95 07       	cpc	r25, r21
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <TANKIO_server_isInitialized_register_function+0x1fa>
    1d46:	c8 c0       	rjmp	.+400    	; 0x1ed8 <TANKIO_server_isInitialized_register_function+0x38a>
    1d48:	8a 89       	ldd	r24, Y+18	; 0x12
    1d4a:	9b 89       	ldd	r25, Y+19	; 0x13
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <TANKIO_server_isInitialized_register_function+0x206>
    1d52:	c2 c0       	rjmp	.+388    	; 0x1ed8 <TANKIO_server_isInitialized_register_function+0x38a>
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	8c 01       	movw	r16, r24
    1d5a:	00 0f       	add	r16, r16
    1d5c:	11 1f       	adc	r17, r17
    1d5e:	08 0f       	add	r16, r24
    1d60:	19 1f       	adc	r17, r25
    1d62:	00 0f       	add	r16, r16
    1d64:	11 1f       	adc	r17, r17
    1d66:	00 0f       	add	r16, r16
    1d68:	11 1f       	adc	r17, r17
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    1d70:	4c 01       	movw	r8, r24
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	21 f4       	brne	.+8      	; 0x1d7e <TANKIO_server_isInitialized_register_function+0x230>
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	a8 01       	movw	r20, r16
    1d84:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    1d88:	0e 81       	ldd	r16, Y+6	; 0x06
    1d8a:	1f 81       	ldd	r17, Y+7	; 0x07
    1d8c:	6a 80       	ldd	r6, Y+2	; 0x02
    1d8e:	7b 80       	ldd	r7, Y+3	; 0x03
    1d90:	73 01       	movw	r14, r6
    1d92:	ee 0c       	add	r14, r14
    1d94:	ff 1c       	adc	r15, r15
    1d96:	08 94       	sec
    1d98:	e1 08       	sbc	r14, r1
    1d9a:	f1 08       	sbc	r15, r1
    1d9c:	c7 01       	movw	r24, r14
    1d9e:	80 23       	and	r24, r16
    1da0:	91 23       	and	r25, r17
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	11 f4       	brne	.+4      	; 0x1dae <TANKIO_server_isInitialized_register_function+0x260>
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	9d 81       	ldd	r25, Y+5	; 0x05
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <TANKIO_server_isInitialized_register_function+0x26c>
    1db6:	16 95       	lsr	r17
    1db8:	07 95       	ror	r16
    1dba:	8a 95       	dec	r24
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <TANKIO_server_isInitialized_register_function+0x268>
    1dbe:	02 0f       	add	r16, r18
    1dc0:	13 1f       	adc	r17, r19
    1dc2:	1d 87       	std	Y+13, r17	; 0x0d
    1dc4:	0c 87       	std	Y+12, r16	; 0x0c
    1dc6:	1f 86       	std	Y+15, r1	; 0x0f
    1dc8:	1e 86       	std	Y+14, r1	; 0x0e
    1dca:	cc 24       	eor	r12, r12
    1dcc:	dd 24       	eor	r13, r13
    1dce:	aa 24       	eor	r10, r10
    1dd0:	bb 24       	eor	r11, r11
    1dd2:	51 c0       	rjmp	.+162    	; 0x1e76 <TANKIO_server_isInitialized_register_function+0x328>
    1dd4:	8c 0d       	add	r24, r12
    1dd6:	9d 1d       	adc	r25, r13
    1dd8:	fc 01       	movw	r30, r24
    1dda:	20 81       	ld	r18, Z
    1ddc:	31 81       	ldd	r19, Z+1	; 0x01
    1dde:	40 c0       	rjmp	.+128    	; 0x1e60 <TANKIO_server_isInitialized_register_function+0x312>
    1de0:	d9 01       	movw	r26, r18
    1de2:	18 96       	adiw	r26, 0x08	; 8
    1de4:	5c 90       	ld	r5, X
    1de6:	18 97       	sbiw	r26, 0x08	; 8
    1de8:	19 96       	adiw	r26, 0x09	; 9
    1dea:	4c 90       	ld	r4, X
    1dec:	19 97       	sbiw	r26, 0x09	; 9
    1dee:	1e 96       	adiw	r26, 0x0e	; 14
    1df0:	8d 91       	ld	r24, X+
    1df2:	9c 91       	ld	r25, X
    1df4:	1f 97       	sbiw	r26, 0x0f	; 15
    1df6:	8e 21       	and	r24, r14
    1df8:	9f 21       	and	r25, r15
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	e8 0f       	add	r30, r24
    1e02:	f9 1f       	adc	r31, r25
    1e04:	ee 0f       	add	r30, r30
    1e06:	ff 1f       	adc	r31, r31
    1e08:	e8 0d       	add	r30, r8
    1e0a:	f9 1d       	adc	r31, r9
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	93 83       	std	Z+3, r25	; 0x03
    1e14:	82 83       	std	Z+2, r24	; 0x02
    1e16:	08 17       	cp	r16, r24
    1e18:	19 07       	cpc	r17, r25
    1e1a:	58 f4       	brcc	.+22     	; 0x1e32 <TANKIO_server_isInitialized_register_function+0x2e4>
    1e1c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e1e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e20:	4f 5f       	subi	r20, 0xFF	; 255
    1e22:	5f 4f       	sbci	r21, 0xFF	; 255
    1e24:	5f 87       	std	Y+15, r21	; 0x0f
    1e26:	4e 87       	std	Y+14, r20	; 0x0e
    1e28:	b8 01       	movw	r22, r16
    1e2a:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    1e2e:	75 83       	std	Z+5, r23	; 0x05
    1e30:	64 83       	std	Z+4, r22	; 0x04
    1e32:	d9 01       	movw	r26, r18
    1e34:	17 96       	adiw	r26, 0x07	; 7
    1e36:	1c 92       	st	X, r1
    1e38:	1e 92       	st	-X, r1
    1e3a:	16 97       	sbiw	r26, 0x06	; 6
    1e3c:	80 81       	ld	r24, Z
    1e3e:	91 81       	ldd	r25, Z+1	; 0x01
    1e40:	19 96       	adiw	r26, 0x09	; 9
    1e42:	9c 93       	st	X, r25
    1e44:	8e 93       	st	-X, r24
    1e46:	18 97       	sbiw	r26, 0x08	; 8
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	29 f0       	breq	.+10     	; 0x1e56 <TANKIO_server_isInitialized_register_function+0x308>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	17 96       	adiw	r26, 0x07	; 7
    1e50:	3c 93       	st	X, r19
    1e52:	2e 93       	st	-X, r18
    1e54:	16 97       	sbiw	r26, 0x06	; 6
    1e56:	31 83       	std	Z+1, r19	; 0x01
    1e58:	20 83       	st	Z, r18
    1e5a:	c2 01       	movw	r24, r4
    1e5c:	29 2f       	mov	r18, r25
    1e5e:	34 2d       	mov	r19, r4
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <TANKIO_server_isInitialized_register_function+0x31a>
    1e66:	bc cf       	rjmp	.-136    	; 0x1de0 <TANKIO_server_isInitialized_register_function+0x292>
    1e68:	08 94       	sec
    1e6a:	a1 1c       	adc	r10, r1
    1e6c:	b1 1c       	adc	r11, r1
    1e6e:	e6 e0       	ldi	r30, 0x06	; 6
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	ce 0e       	add	r12, r30
    1e74:	df 1e       	adc	r13, r31
    1e76:	88 81       	ld	r24, Y
    1e78:	99 81       	ldd	r25, Y+1	; 0x01
    1e7a:	a6 14       	cp	r10, r6
    1e7c:	b7 04       	cpc	r11, r7
    1e7e:	08 f4       	brcc	.+2      	; 0x1e82 <TANKIO_server_isInitialized_register_function+0x334>
    1e80:	a9 cf       	rjmp	.-174    	; 0x1dd4 <TANKIO_server_isInitialized_register_function+0x286>
    1e82:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    1e86:	e0 91 fb 01 	lds	r30, 0x01FB
    1e8a:	f0 91 fc 01 	lds	r31, 0x01FC
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	93 83       	std	Z+3, r25	; 0x03
    1e98:	82 83       	std	Z+2, r24	; 0x02
    1e9a:	84 81       	ldd	r24, Z+4	; 0x04
    1e9c:	95 81       	ldd	r25, Z+5	; 0x05
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	95 83       	std	Z+5, r25	; 0x05
    1ea2:	84 83       	std	Z+4, r24	; 0x04
    1ea4:	91 82       	std	Z+1, r9	; 0x01
    1ea6:	80 82       	st	Z, r8
    1ea8:	86 81       	ldd	r24, Z+6	; 0x06
    1eaa:	97 81       	ldd	r25, Z+7	; 0x07
    1eac:	96 95       	lsr	r25
    1eae:	87 95       	ror	r24
    1eb0:	26 85       	ldd	r18, Z+14	; 0x0e
    1eb2:	37 85       	ldd	r19, Z+15	; 0x0f
    1eb4:	82 17       	cp	r24, r18
    1eb6:	93 07       	cpc	r25, r19
    1eb8:	20 f4       	brcc	.+8      	; 0x1ec2 <TANKIO_server_isInitialized_register_function+0x374>
    1eba:	80 89       	ldd	r24, Z+16	; 0x10
    1ebc:	91 89       	ldd	r25, Z+17	; 0x11
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <TANKIO_server_isInitialized_register_function+0x378>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	91 8b       	std	Z+17, r25	; 0x11
    1ec8:	80 8b       	std	Z+16, r24	; 0x10
    1eca:	82 30       	cpi	r24, 0x02	; 2
    1ecc:	91 05       	cpc	r25, r1
    1ece:	20 f0       	brcs	.+8      	; 0x1ed8 <TANKIO_server_isInitialized_register_function+0x38a>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	93 8b       	std	Z+19, r25	; 0x13
    1ed6:	82 8b       	std	Z+18, r24	; 0x12
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	7f 90       	pop	r7
    1ef2:	6f 90       	pop	r6
    1ef4:	5f 90       	pop	r5
    1ef6:	4f 90       	pop	r4
    1ef8:	08 95       	ret

00001efa <tankIO_server_buttonStatus>:

// ==
// Input
// ==

void tankIO_server_buttonStatus(TWIBuffer *result) {
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	ec 01       	movw	r28, r24
	uint8_t buttons = buttonStatusMask();
    1f00:	0e 94 92 04 	call	0x924	; 0x924 <buttonStatusMask>
	FILL_RESULT(result, buttons, uint8_t)
    1f04:	e8 81       	ld	r30, Y
    1f06:	f9 81       	ldd	r31, Y+1	; 0x01
    1f08:	80 83       	st	Z, r24
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	9b 83       	std	Y+3, r25	; 0x03
    1f10:	8a 83       	std	Y+2, r24	; 0x02
}
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	08 95       	ret

00001f18 <tankIO_server_buttonStatus_handler>:
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_buttonStatus, TANK_IO_buttonStatus, uint8_t)
    1f18:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <tankIO_server_buttonStatus>
    1f1c:	08 95       	ret

00001f1e <tankIO_server_buttonStatus_register_function>:
    1f1e:	4f 92       	push	r4
    1f20:	5f 92       	push	r5
    1f22:	6f 92       	push	r6
    1f24:	7f 92       	push	r7
    1f26:	8f 92       	push	r8
    1f28:	9f 92       	push	r9
    1f2a:	af 92       	push	r10
    1f2c:	bf 92       	push	r11
    1f2e:	cf 92       	push	r12
    1f30:	df 92       	push	r13
    1f32:	ef 92       	push	r14
    1f34:	ff 92       	push	r15
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	10 92 13 02 	sts	0x0213, r1
    1f42:	10 92 12 02 	sts	0x0212, r1
    1f46:	eb e0       	ldi	r30, 0x0B	; 11
    1f48:	f2 e0       	ldi	r31, 0x02	; 2
    1f4a:	f0 93 19 02 	sts	0x0219, r31
    1f4e:	e0 93 18 02 	sts	0x0218, r30
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	90 93 1b 02 	sts	0x021B, r25
    1f5a:	80 93 1a 02 	sts	0x021A, r24
    1f5e:	a0 91 9c 03 	lds	r26, 0x039C
    1f62:	b0 91 9d 03 	lds	r27, 0x039D
    1f66:	8f 01       	movw	r16, r30
    1f68:	0d 5f       	subi	r16, 0xFD	; 253
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	10 97       	sbiw	r26, 0x00	; 0
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <tankIO_server_buttonStatus_register_function+0x54>
    1f70:	49 c0       	rjmp	.+146    	; 0x2004 <tankIO_server_buttonStatus_register_function+0xe6>
    1f72:	f0 93 9d 03 	sts	0x039D, r31
    1f76:	e0 93 9c 03 	sts	0x039C, r30
    1f7a:	10 92 11 02 	sts	0x0211, r1
    1f7e:	10 92 10 02 	sts	0x0210, r1
    1f82:	88 e1       	ldi	r24, 0x18	; 24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    1f8a:	90 93 0f 02 	sts	0x020F, r25
    1f8e:	80 93 0e 02 	sts	0x020E, r24
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <tankIO_server_buttonStatus_register_function+0x7a>
    1f96:	d7 c0       	rjmp	.+430    	; 0x2146 <tankIO_server_buttonStatus_register_function+0x228>
    1f98:	e8 2f       	mov	r30, r24
    1f9a:	f9 2f       	mov	r31, r25
    1f9c:	88 e1       	ldi	r24, 0x18	; 24
    1f9e:	df 01       	movw	r26, r30
    1fa0:	1d 92       	st	X+, r1
    1fa2:	8a 95       	dec	r24
    1fa4:	e9 f7       	brne	.-6      	; 0x1fa0 <tankIO_server_buttonStatus_register_function+0x82>
    1fa6:	c0 91 0e 02 	lds	r28, 0x020E
    1faa:	d0 91 0f 02 	lds	r29, 0x020F
    1fae:	19 87       	std	Y+9, r17	; 0x09
    1fb0:	08 87       	std	Y+8, r16	; 0x08
    1fb2:	80 e2       	ldi	r24, 0x20	; 32
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9b 83       	std	Y+3, r25	; 0x03
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
    1fba:	85 e0       	ldi	r24, 0x05	; 5
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9d 83       	std	Y+5, r25	; 0x05
    1fc0:	8c 83       	std	Y+4, r24	; 0x04
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	9b 87       	std	Y+11, r25	; 0x0b
    1fc8:	8a 87       	std	Y+10, r24	; 0x0a
    1fca:	80 ec       	ldi	r24, 0xC0	; 192
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    1fd2:	99 83       	std	Y+1, r25	; 0x01
    1fd4:	88 83       	st	Y, r24
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <tankIO_server_buttonStatus_register_function+0xbe>
    1fda:	b5 c0       	rjmp	.+362    	; 0x2146 <tankIO_server_buttonStatus_register_function+0x228>
    1fdc:	e8 2f       	mov	r30, r24
    1fde:	f9 2f       	mov	r31, r25
    1fe0:	80 ec       	ldi	r24, 0xC0	; 192
    1fe2:	df 01       	movw	r26, r30
    1fe4:	1d 92       	st	X+, r1
    1fe6:	8a 95       	dec	r24
    1fe8:	e9 f7       	brne	.-6      	; 0x1fe4 <tankIO_server_buttonStatus_register_function+0xc6>
    1fea:	e0 91 0e 02 	lds	r30, 0x020E
    1fee:	f0 91 0f 02 	lds	r31, 0x020F
    1ff2:	81 ee       	ldi	r24, 0xE1	; 225
    1ff4:	9f e1       	ldi	r25, 0x1F	; 31
    1ff6:	a1 e1       	ldi	r26, 0x11	; 17
    1ff8:	b0 ea       	ldi	r27, 0xA0	; 160
    1ffa:	84 8b       	std	Z+20, r24	; 0x14
    1ffc:	95 8b       	std	Z+21, r25	; 0x15
    1ffe:	a6 8b       	std	Z+22, r26	; 0x16
    2000:	b7 8b       	std	Z+23, r27	; 0x17
    2002:	16 c0       	rjmp	.+44     	; 0x2030 <tankIO_server_buttonStatus_register_function+0x112>
    2004:	13 96       	adiw	r26, 0x03	; 3
    2006:	0d 90       	ld	r0, X+
    2008:	bc 91       	ld	r27, X
    200a:	a0 2d       	mov	r26, r0
    200c:	18 96       	adiw	r26, 0x08	; 8
    200e:	cd 91       	ld	r28, X+
    2010:	dc 91       	ld	r29, X
    2012:	19 97       	sbiw	r26, 0x09	; 9
    2014:	fd 83       	std	Y+5, r31	; 0x05
    2016:	ec 83       	std	Y+4, r30	; 0x04
    2018:	1a 96       	adiw	r26, 0x0a	; 10
    201a:	8d 91       	ld	r24, X+
    201c:	9c 91       	ld	r25, X
    201e:	1b 97       	sbiw	r26, 0x0b	; 11
    2020:	c8 1b       	sub	r28, r24
    2022:	d9 0b       	sbc	r29, r25
    2024:	d6 83       	std	Z+6, r29	; 0x06
    2026:	c5 83       	std	Z+5, r28	; 0x05
    2028:	19 96       	adiw	r26, 0x09	; 9
    202a:	1c 93       	st	X, r17
    202c:	0e 93       	st	-X, r16
    202e:	18 97       	sbiw	r26, 0x08	; 8
    2030:	e0 91 9c 03 	lds	r30, 0x039C
    2034:	f0 91 9d 03 	lds	r31, 0x039D
    2038:	c3 81       	ldd	r28, Z+3	; 0x03
    203a:	d4 81       	ldd	r29, Z+4	; 0x04
    203c:	8e 81       	ldd	r24, Y+6	; 0x06
    203e:	9f 81       	ldd	r25, Y+7	; 0x07
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	9f 83       	std	Y+7, r25	; 0x07
    2044:	8e 83       	std	Y+6, r24	; 0x06
    2046:	4e e0       	ldi	r20, 0x0E	; 14
    2048:	52 e0       	ldi	r21, 0x02	; 2
    204a:	d0 93 0f 02 	sts	0x020F, r29
    204e:	c0 93 0e 02 	sts	0x020E, r28
    2052:	da 01       	movw	r26, r20
    2054:	13 97       	sbiw	r26, 0x03	; 3
    2056:	20 91 0b 02 	lds	r18, 0x020B
    205a:	33 27       	eor	r19, r19
    205c:	27 fd       	sbrc	r18, 7
    205e:	30 95       	com	r19
    2060:	c9 01       	movw	r24, r18
    2062:	96 95       	lsr	r25
    2064:	87 95       	ror	r24
    2066:	96 95       	lsr	r25
    2068:	87 95       	ror	r24
    206a:	b9 01       	movw	r22, r18
    206c:	15 e0       	ldi	r17, 0x05	; 5
    206e:	66 0f       	add	r22, r22
    2070:	77 1f       	adc	r23, r23
    2072:	1a 95       	dec	r17
    2074:	e1 f7       	brne	.-8      	; 0x206e <tankIO_server_buttonStatus_register_function+0x150>
    2076:	86 0f       	add	r24, r22
    2078:	97 1f       	adc	r25, r23
    207a:	60 91 0c 02 	lds	r22, 0x020C
    207e:	77 27       	eor	r23, r23
    2080:	67 fd       	sbrc	r22, 7
    2082:	70 95       	com	r23
    2084:	86 0f       	add	r24, r22
    2086:	97 1f       	adc	r25, r23
    2088:	82 27       	eor	r24, r18
    208a:	93 27       	eor	r25, r19
    208c:	52 96       	adiw	r26, 0x12	; 18
    208e:	9c 93       	st	X, r25
    2090:	8e 93       	st	-X, r24
    2092:	51 97       	sbiw	r26, 0x11	; 17
    2094:	03 80       	ldd	r0, Z+3	; 0x03
    2096:	f4 81       	ldd	r31, Z+4	; 0x04
    2098:	e0 2d       	mov	r30, r0
    209a:	22 81       	ldd	r18, Z+2	; 0x02
    209c:	33 81       	ldd	r19, Z+3	; 0x03
    209e:	21 50       	subi	r18, 0x01	; 1
    20a0:	30 40       	sbci	r19, 0x00	; 0
    20a2:	28 23       	and	r18, r24
    20a4:	39 23       	and	r19, r25
    20a6:	c9 01       	movw	r24, r18
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	82 0f       	add	r24, r18
    20ae:	93 1f       	adc	r25, r19
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	01 90       	ld	r0, Z+
    20b6:	f0 81       	ld	r31, Z
    20b8:	e0 2d       	mov	r30, r0
    20ba:	e8 0f       	add	r30, r24
    20bc:	f9 1f       	adc	r31, r25
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	93 83       	std	Z+3, r25	; 0x03
    20c6:	82 83       	std	Z+2, r24	; 0x02
    20c8:	20 81       	ld	r18, Z
    20ca:	31 81       	ldd	r19, Z+1	; 0x01
    20cc:	1c 96       	adiw	r26, 0x0c	; 12
    20ce:	3c 93       	st	X, r19
    20d0:	2e 93       	st	-X, r18
    20d2:	1b 97       	sbiw	r26, 0x0b	; 11
    20d4:	1a 96       	adiw	r26, 0x0a	; 10
    20d6:	1c 92       	st	X, r1
    20d8:	1e 92       	st	-X, r1
    20da:	19 97       	sbiw	r26, 0x09	; 9
    20dc:	21 15       	cp	r18, r1
    20de:	31 05       	cpc	r19, r1
    20e0:	29 f0       	breq	.+10     	; 0x20ec <tankIO_server_buttonStatus_register_function+0x1ce>
    20e2:	d9 01       	movw	r26, r18
    20e4:	17 96       	adiw	r26, 0x07	; 7
    20e6:	5c 93       	st	X, r21
    20e8:	4e 93       	st	-X, r20
    20ea:	16 97       	sbiw	r26, 0x06	; 6
    20ec:	2e e0       	ldi	r18, 0x0E	; 14
    20ee:	32 e0       	ldi	r19, 0x02	; 2
    20f0:	31 83       	std	Z+1, r19	; 0x01
    20f2:	20 83       	st	Z, r18
    20f4:	24 81       	ldd	r18, Z+4	; 0x04
    20f6:	35 81       	ldd	r19, Z+5	; 0x05
    20f8:	2f 5f       	subi	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	a9 01       	movw	r20, r18
    20fe:	44 0f       	add	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	f3 e0       	ldi	r31, 0x03	; 3
    2104:	22 0f       	add	r18, r18
    2106:	33 1f       	adc	r19, r19
    2108:	fa 95       	dec	r31
    210a:	e1 f7       	brne	.-8      	; 0x2104 <tankIO_server_buttonStatus_register_function+0x1e6>
    210c:	42 0f       	add	r20, r18
    210e:	53 1f       	adc	r21, r19
    2110:	84 17       	cp	r24, r20
    2112:	95 07       	cpc	r25, r21
    2114:	08 f4       	brcc	.+2      	; 0x2118 <tankIO_server_buttonStatus_register_function+0x1fa>
    2116:	c8 c0       	rjmp	.+400    	; 0x22a8 <tankIO_server_buttonStatus_register_function+0x38a>
    2118:	8a 89       	ldd	r24, Y+18	; 0x12
    211a:	9b 89       	ldd	r25, Y+19	; 0x13
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	91 05       	cpc	r25, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <tankIO_server_buttonStatus_register_function+0x206>
    2122:	c2 c0       	rjmp	.+388    	; 0x22a8 <tankIO_server_buttonStatus_register_function+0x38a>
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	8c 01       	movw	r16, r24
    212a:	00 0f       	add	r16, r16
    212c:	11 1f       	adc	r17, r17
    212e:	08 0f       	add	r16, r24
    2130:	19 1f       	adc	r17, r25
    2132:	00 0f       	add	r16, r16
    2134:	11 1f       	adc	r17, r17
    2136:	00 0f       	add	r16, r16
    2138:	11 1f       	adc	r17, r17
    213a:	c8 01       	movw	r24, r16
    213c:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2140:	4c 01       	movw	r8, r24
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	21 f4       	brne	.+8      	; 0x214e <tankIO_server_buttonStatus_register_function+0x230>
    2146:	8f ef       	ldi	r24, 0xFF	; 255
    2148:	9f ef       	ldi	r25, 0xFF	; 255
    214a:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	a8 01       	movw	r20, r16
    2154:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    2158:	0e 81       	ldd	r16, Y+6	; 0x06
    215a:	1f 81       	ldd	r17, Y+7	; 0x07
    215c:	6a 80       	ldd	r6, Y+2	; 0x02
    215e:	7b 80       	ldd	r7, Y+3	; 0x03
    2160:	73 01       	movw	r14, r6
    2162:	ee 0c       	add	r14, r14
    2164:	ff 1c       	adc	r15, r15
    2166:	08 94       	sec
    2168:	e1 08       	sbc	r14, r1
    216a:	f1 08       	sbc	r15, r1
    216c:	c7 01       	movw	r24, r14
    216e:	80 23       	and	r24, r16
    2170:	91 23       	and	r25, r17
    2172:	21 e0       	ldi	r18, 0x01	; 1
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	11 f4       	brne	.+4      	; 0x217e <tankIO_server_buttonStatus_register_function+0x260>
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	8c 81       	ldd	r24, Y+4	; 0x04
    2180:	9d 81       	ldd	r25, Y+5	; 0x05
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	02 c0       	rjmp	.+4      	; 0x218a <tankIO_server_buttonStatus_register_function+0x26c>
    2186:	16 95       	lsr	r17
    2188:	07 95       	ror	r16
    218a:	8a 95       	dec	r24
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <tankIO_server_buttonStatus_register_function+0x268>
    218e:	02 0f       	add	r16, r18
    2190:	13 1f       	adc	r17, r19
    2192:	1d 87       	std	Y+13, r17	; 0x0d
    2194:	0c 87       	std	Y+12, r16	; 0x0c
    2196:	1f 86       	std	Y+15, r1	; 0x0f
    2198:	1e 86       	std	Y+14, r1	; 0x0e
    219a:	cc 24       	eor	r12, r12
    219c:	dd 24       	eor	r13, r13
    219e:	aa 24       	eor	r10, r10
    21a0:	bb 24       	eor	r11, r11
    21a2:	51 c0       	rjmp	.+162    	; 0x2246 <tankIO_server_buttonStatus_register_function+0x328>
    21a4:	8c 0d       	add	r24, r12
    21a6:	9d 1d       	adc	r25, r13
    21a8:	fc 01       	movw	r30, r24
    21aa:	20 81       	ld	r18, Z
    21ac:	31 81       	ldd	r19, Z+1	; 0x01
    21ae:	40 c0       	rjmp	.+128    	; 0x2230 <tankIO_server_buttonStatus_register_function+0x312>
    21b0:	d9 01       	movw	r26, r18
    21b2:	18 96       	adiw	r26, 0x08	; 8
    21b4:	5c 90       	ld	r5, X
    21b6:	18 97       	sbiw	r26, 0x08	; 8
    21b8:	19 96       	adiw	r26, 0x09	; 9
    21ba:	4c 90       	ld	r4, X
    21bc:	19 97       	sbiw	r26, 0x09	; 9
    21be:	1e 96       	adiw	r26, 0x0e	; 14
    21c0:	8d 91       	ld	r24, X+
    21c2:	9c 91       	ld	r25, X
    21c4:	1f 97       	sbiw	r26, 0x0f	; 15
    21c6:	8e 21       	and	r24, r14
    21c8:	9f 21       	and	r25, r15
    21ca:	fc 01       	movw	r30, r24
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	e8 0f       	add	r30, r24
    21d2:	f9 1f       	adc	r31, r25
    21d4:	ee 0f       	add	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	e8 0d       	add	r30, r8
    21da:	f9 1d       	adc	r31, r9
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	93 83       	std	Z+3, r25	; 0x03
    21e4:	82 83       	std	Z+2, r24	; 0x02
    21e6:	08 17       	cp	r16, r24
    21e8:	19 07       	cpc	r17, r25
    21ea:	58 f4       	brcc	.+22     	; 0x2202 <tankIO_server_buttonStatus_register_function+0x2e4>
    21ec:	4e 85       	ldd	r20, Y+14	; 0x0e
    21ee:	5f 85       	ldd	r21, Y+15	; 0x0f
    21f0:	4f 5f       	subi	r20, 0xFF	; 255
    21f2:	5f 4f       	sbci	r21, 0xFF	; 255
    21f4:	5f 87       	std	Y+15, r21	; 0x0f
    21f6:	4e 87       	std	Y+14, r20	; 0x0e
    21f8:	b8 01       	movw	r22, r16
    21fa:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    21fe:	75 83       	std	Z+5, r23	; 0x05
    2200:	64 83       	std	Z+4, r22	; 0x04
    2202:	d9 01       	movw	r26, r18
    2204:	17 96       	adiw	r26, 0x07	; 7
    2206:	1c 92       	st	X, r1
    2208:	1e 92       	st	-X, r1
    220a:	16 97       	sbiw	r26, 0x06	; 6
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	19 96       	adiw	r26, 0x09	; 9
    2212:	9c 93       	st	X, r25
    2214:	8e 93       	st	-X, r24
    2216:	18 97       	sbiw	r26, 0x08	; 8
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	29 f0       	breq	.+10     	; 0x2226 <tankIO_server_buttonStatus_register_function+0x308>
    221c:	dc 01       	movw	r26, r24
    221e:	17 96       	adiw	r26, 0x07	; 7
    2220:	3c 93       	st	X, r19
    2222:	2e 93       	st	-X, r18
    2224:	16 97       	sbiw	r26, 0x06	; 6
    2226:	31 83       	std	Z+1, r19	; 0x01
    2228:	20 83       	st	Z, r18
    222a:	c2 01       	movw	r24, r4
    222c:	29 2f       	mov	r18, r25
    222e:	34 2d       	mov	r19, r4
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	09 f0       	breq	.+2      	; 0x2238 <tankIO_server_buttonStatus_register_function+0x31a>
    2236:	bc cf       	rjmp	.-136    	; 0x21b0 <tankIO_server_buttonStatus_register_function+0x292>
    2238:	08 94       	sec
    223a:	a1 1c       	adc	r10, r1
    223c:	b1 1c       	adc	r11, r1
    223e:	e6 e0       	ldi	r30, 0x06	; 6
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	ce 0e       	add	r12, r30
    2244:	df 1e       	adc	r13, r31
    2246:	88 81       	ld	r24, Y
    2248:	99 81       	ldd	r25, Y+1	; 0x01
    224a:	a6 14       	cp	r10, r6
    224c:	b7 04       	cpc	r11, r7
    224e:	08 f4       	brcc	.+2      	; 0x2252 <tankIO_server_buttonStatus_register_function+0x334>
    2250:	a9 cf       	rjmp	.-174    	; 0x21a4 <tankIO_server_buttonStatus_register_function+0x286>
    2252:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    2256:	e0 91 0e 02 	lds	r30, 0x020E
    225a:	f0 91 0f 02 	lds	r31, 0x020F
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	93 83       	std	Z+3, r25	; 0x03
    2268:	82 83       	std	Z+2, r24	; 0x02
    226a:	84 81       	ldd	r24, Z+4	; 0x04
    226c:	95 81       	ldd	r25, Z+5	; 0x05
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	95 83       	std	Z+5, r25	; 0x05
    2272:	84 83       	std	Z+4, r24	; 0x04
    2274:	91 82       	std	Z+1, r9	; 0x01
    2276:	80 82       	st	Z, r8
    2278:	86 81       	ldd	r24, Z+6	; 0x06
    227a:	97 81       	ldd	r25, Z+7	; 0x07
    227c:	96 95       	lsr	r25
    227e:	87 95       	ror	r24
    2280:	26 85       	ldd	r18, Z+14	; 0x0e
    2282:	37 85       	ldd	r19, Z+15	; 0x0f
    2284:	82 17       	cp	r24, r18
    2286:	93 07       	cpc	r25, r19
    2288:	20 f4       	brcc	.+8      	; 0x2292 <tankIO_server_buttonStatus_register_function+0x374>
    228a:	80 89       	ldd	r24, Z+16	; 0x10
    228c:	91 89       	ldd	r25, Z+17	; 0x11
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <tankIO_server_buttonStatus_register_function+0x378>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	91 8b       	std	Z+17, r25	; 0x11
    2298:	80 8b       	std	Z+16, r24	; 0x10
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	91 05       	cpc	r25, r1
    229e:	20 f0       	brcs	.+8      	; 0x22a8 <tankIO_server_buttonStatus_register_function+0x38a>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	93 8b       	std	Z+19, r25	; 0x13
    22a6:	82 8b       	std	Z+18, r24	; 0x12
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
    22b8:	bf 90       	pop	r11
    22ba:	af 90       	pop	r10
    22bc:	9f 90       	pop	r9
    22be:	8f 90       	pop	r8
    22c0:	7f 90       	pop	r7
    22c2:	6f 90       	pop	r6
    22c4:	5f 90       	pop	r5
    22c6:	4f 90       	pop	r4
    22c8:	08 95       	ret

000022ca <tankIO_server_pressedButtons>:

void tankIO_server_pressedButtons(TWIBuffer *result) {
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	ec 01       	movw	r28, r24
	uint8_t buttons = pressedButtons();
    22d0:	0e 94 ba 04 	call	0x974	; 0x974 <pressedButtons>
	FILL_RESULT(result, buttons, uint8_t)
    22d4:	e8 81       	ld	r30, Y
    22d6:	f9 81       	ldd	r31, Y+1	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9b 83       	std	Y+3, r25	; 0x03
    22e0:	8a 83       	std	Y+2, r24	; 0x02
}
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <tankIO_server_pressedButtons_handler>:
TWI_RPC_SERVER_FUNCTION_NOARGS	(tankIO_server_pressedButtons, TANK_IO_pressedButtons, uint8_t)
    22e8:	0e 94 65 11 	call	0x22ca	; 0x22ca <tankIO_server_pressedButtons>
    22ec:	08 95       	ret

000022ee <tankIO_server_pressedButtons_register_function>:
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	10 92 26 02 	sts	0x0226, r1
    2312:	10 92 25 02 	sts	0x0225, r1
    2316:	ee e1       	ldi	r30, 0x1E	; 30
    2318:	f2 e0       	ldi	r31, 0x02	; 2
    231a:	f0 93 2c 02 	sts	0x022C, r31
    231e:	e0 93 2b 02 	sts	0x022B, r30
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	90 93 2e 02 	sts	0x022E, r25
    232a:	80 93 2d 02 	sts	0x022D, r24
    232e:	a0 91 9c 03 	lds	r26, 0x039C
    2332:	b0 91 9d 03 	lds	r27, 0x039D
    2336:	8f 01       	movw	r16, r30
    2338:	0d 5f       	subi	r16, 0xFD	; 253
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	10 97       	sbiw	r26, 0x00	; 0
    233e:	09 f0       	breq	.+2      	; 0x2342 <tankIO_server_pressedButtons_register_function+0x54>
    2340:	49 c0       	rjmp	.+146    	; 0x23d4 <tankIO_server_pressedButtons_register_function+0xe6>
    2342:	f0 93 9d 03 	sts	0x039D, r31
    2346:	e0 93 9c 03 	sts	0x039C, r30
    234a:	10 92 24 02 	sts	0x0224, r1
    234e:	10 92 23 02 	sts	0x0223, r1
    2352:	88 e1       	ldi	r24, 0x18	; 24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    235a:	90 93 22 02 	sts	0x0222, r25
    235e:	80 93 21 02 	sts	0x0221, r24
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	09 f4       	brne	.+2      	; 0x2368 <tankIO_server_pressedButtons_register_function+0x7a>
    2366:	d7 c0       	rjmp	.+430    	; 0x2516 <tankIO_server_pressedButtons_register_function+0x228>
    2368:	e8 2f       	mov	r30, r24
    236a:	f9 2f       	mov	r31, r25
    236c:	88 e1       	ldi	r24, 0x18	; 24
    236e:	df 01       	movw	r26, r30
    2370:	1d 92       	st	X+, r1
    2372:	8a 95       	dec	r24
    2374:	e9 f7       	brne	.-6      	; 0x2370 <tankIO_server_pressedButtons_register_function+0x82>
    2376:	c0 91 21 02 	lds	r28, 0x0221
    237a:	d0 91 22 02 	lds	r29, 0x0222
    237e:	19 87       	std	Y+9, r17	; 0x09
    2380:	08 87       	std	Y+8, r16	; 0x08
    2382:	80 e2       	ldi	r24, 0x20	; 32
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9b 83       	std	Y+3, r25	; 0x03
    2388:	8a 83       	std	Y+2, r24	; 0x02
    238a:	85 e0       	ldi	r24, 0x05	; 5
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9d 83       	std	Y+5, r25	; 0x05
    2390:	8c 83       	std	Y+4, r24	; 0x04
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9b 87       	std	Y+11, r25	; 0x0b
    2398:	8a 87       	std	Y+10, r24	; 0x0a
    239a:	80 ec       	ldi	r24, 0xC0	; 192
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    23a2:	99 83       	std	Y+1, r25	; 0x01
    23a4:	88 83       	st	Y, r24
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	09 f4       	brne	.+2      	; 0x23ac <tankIO_server_pressedButtons_register_function+0xbe>
    23aa:	b5 c0       	rjmp	.+362    	; 0x2516 <tankIO_server_pressedButtons_register_function+0x228>
    23ac:	e8 2f       	mov	r30, r24
    23ae:	f9 2f       	mov	r31, r25
    23b0:	80 ec       	ldi	r24, 0xC0	; 192
    23b2:	df 01       	movw	r26, r30
    23b4:	1d 92       	st	X+, r1
    23b6:	8a 95       	dec	r24
    23b8:	e9 f7       	brne	.-6      	; 0x23b4 <tankIO_server_pressedButtons_register_function+0xc6>
    23ba:	e0 91 21 02 	lds	r30, 0x0221
    23be:	f0 91 22 02 	lds	r31, 0x0222
    23c2:	81 ee       	ldi	r24, 0xE1	; 225
    23c4:	9f e1       	ldi	r25, 0x1F	; 31
    23c6:	a1 e1       	ldi	r26, 0x11	; 17
    23c8:	b0 ea       	ldi	r27, 0xA0	; 160
    23ca:	84 8b       	std	Z+20, r24	; 0x14
    23cc:	95 8b       	std	Z+21, r25	; 0x15
    23ce:	a6 8b       	std	Z+22, r26	; 0x16
    23d0:	b7 8b       	std	Z+23, r27	; 0x17
    23d2:	16 c0       	rjmp	.+44     	; 0x2400 <tankIO_server_pressedButtons_register_function+0x112>
    23d4:	13 96       	adiw	r26, 0x03	; 3
    23d6:	0d 90       	ld	r0, X+
    23d8:	bc 91       	ld	r27, X
    23da:	a0 2d       	mov	r26, r0
    23dc:	18 96       	adiw	r26, 0x08	; 8
    23de:	cd 91       	ld	r28, X+
    23e0:	dc 91       	ld	r29, X
    23e2:	19 97       	sbiw	r26, 0x09	; 9
    23e4:	fd 83       	std	Y+5, r31	; 0x05
    23e6:	ec 83       	std	Y+4, r30	; 0x04
    23e8:	1a 96       	adiw	r26, 0x0a	; 10
    23ea:	8d 91       	ld	r24, X+
    23ec:	9c 91       	ld	r25, X
    23ee:	1b 97       	sbiw	r26, 0x0b	; 11
    23f0:	c8 1b       	sub	r28, r24
    23f2:	d9 0b       	sbc	r29, r25
    23f4:	d6 83       	std	Z+6, r29	; 0x06
    23f6:	c5 83       	std	Z+5, r28	; 0x05
    23f8:	19 96       	adiw	r26, 0x09	; 9
    23fa:	1c 93       	st	X, r17
    23fc:	0e 93       	st	-X, r16
    23fe:	18 97       	sbiw	r26, 0x08	; 8
    2400:	e0 91 9c 03 	lds	r30, 0x039C
    2404:	f0 91 9d 03 	lds	r31, 0x039D
    2408:	c3 81       	ldd	r28, Z+3	; 0x03
    240a:	d4 81       	ldd	r29, Z+4	; 0x04
    240c:	8e 81       	ldd	r24, Y+6	; 0x06
    240e:	9f 81       	ldd	r25, Y+7	; 0x07
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	9f 83       	std	Y+7, r25	; 0x07
    2414:	8e 83       	std	Y+6, r24	; 0x06
    2416:	41 e2       	ldi	r20, 0x21	; 33
    2418:	52 e0       	ldi	r21, 0x02	; 2
    241a:	d0 93 22 02 	sts	0x0222, r29
    241e:	c0 93 21 02 	sts	0x0221, r28
    2422:	da 01       	movw	r26, r20
    2424:	13 97       	sbiw	r26, 0x03	; 3
    2426:	20 91 1e 02 	lds	r18, 0x021E
    242a:	33 27       	eor	r19, r19
    242c:	27 fd       	sbrc	r18, 7
    242e:	30 95       	com	r19
    2430:	c9 01       	movw	r24, r18
    2432:	96 95       	lsr	r25
    2434:	87 95       	ror	r24
    2436:	96 95       	lsr	r25
    2438:	87 95       	ror	r24
    243a:	b9 01       	movw	r22, r18
    243c:	15 e0       	ldi	r17, 0x05	; 5
    243e:	66 0f       	add	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	1a 95       	dec	r17
    2444:	e1 f7       	brne	.-8      	; 0x243e <tankIO_server_pressedButtons_register_function+0x150>
    2446:	86 0f       	add	r24, r22
    2448:	97 1f       	adc	r25, r23
    244a:	60 91 1f 02 	lds	r22, 0x021F
    244e:	77 27       	eor	r23, r23
    2450:	67 fd       	sbrc	r22, 7
    2452:	70 95       	com	r23
    2454:	86 0f       	add	r24, r22
    2456:	97 1f       	adc	r25, r23
    2458:	82 27       	eor	r24, r18
    245a:	93 27       	eor	r25, r19
    245c:	52 96       	adiw	r26, 0x12	; 18
    245e:	9c 93       	st	X, r25
    2460:	8e 93       	st	-X, r24
    2462:	51 97       	sbiw	r26, 0x11	; 17
    2464:	03 80       	ldd	r0, Z+3	; 0x03
    2466:	f4 81       	ldd	r31, Z+4	; 0x04
    2468:	e0 2d       	mov	r30, r0
    246a:	22 81       	ldd	r18, Z+2	; 0x02
    246c:	33 81       	ldd	r19, Z+3	; 0x03
    246e:	21 50       	subi	r18, 0x01	; 1
    2470:	30 40       	sbci	r19, 0x00	; 0
    2472:	28 23       	and	r18, r24
    2474:	39 23       	and	r19, r25
    2476:	c9 01       	movw	r24, r18
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	82 0f       	add	r24, r18
    247e:	93 1f       	adc	r25, r19
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	01 90       	ld	r0, Z+
    2486:	f0 81       	ld	r31, Z
    2488:	e0 2d       	mov	r30, r0
    248a:	e8 0f       	add	r30, r24
    248c:	f9 1f       	adc	r31, r25
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	93 83       	std	Z+3, r25	; 0x03
    2496:	82 83       	std	Z+2, r24	; 0x02
    2498:	20 81       	ld	r18, Z
    249a:	31 81       	ldd	r19, Z+1	; 0x01
    249c:	1c 96       	adiw	r26, 0x0c	; 12
    249e:	3c 93       	st	X, r19
    24a0:	2e 93       	st	-X, r18
    24a2:	1b 97       	sbiw	r26, 0x0b	; 11
    24a4:	1a 96       	adiw	r26, 0x0a	; 10
    24a6:	1c 92       	st	X, r1
    24a8:	1e 92       	st	-X, r1
    24aa:	19 97       	sbiw	r26, 0x09	; 9
    24ac:	21 15       	cp	r18, r1
    24ae:	31 05       	cpc	r19, r1
    24b0:	29 f0       	breq	.+10     	; 0x24bc <tankIO_server_pressedButtons_register_function+0x1ce>
    24b2:	d9 01       	movw	r26, r18
    24b4:	17 96       	adiw	r26, 0x07	; 7
    24b6:	5c 93       	st	X, r21
    24b8:	4e 93       	st	-X, r20
    24ba:	16 97       	sbiw	r26, 0x06	; 6
    24bc:	21 e2       	ldi	r18, 0x21	; 33
    24be:	32 e0       	ldi	r19, 0x02	; 2
    24c0:	31 83       	std	Z+1, r19	; 0x01
    24c2:	20 83       	st	Z, r18
    24c4:	24 81       	ldd	r18, Z+4	; 0x04
    24c6:	35 81       	ldd	r19, Z+5	; 0x05
    24c8:	2f 5f       	subi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	a9 01       	movw	r20, r18
    24ce:	44 0f       	add	r20, r20
    24d0:	55 1f       	adc	r21, r21
    24d2:	f3 e0       	ldi	r31, 0x03	; 3
    24d4:	22 0f       	add	r18, r18
    24d6:	33 1f       	adc	r19, r19
    24d8:	fa 95       	dec	r31
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <tankIO_server_pressedButtons_register_function+0x1e6>
    24dc:	42 0f       	add	r20, r18
    24de:	53 1f       	adc	r21, r19
    24e0:	84 17       	cp	r24, r20
    24e2:	95 07       	cpc	r25, r21
    24e4:	08 f4       	brcc	.+2      	; 0x24e8 <tankIO_server_pressedButtons_register_function+0x1fa>
    24e6:	c8 c0       	rjmp	.+400    	; 0x2678 <tankIO_server_pressedButtons_register_function+0x38a>
    24e8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ea:	9b 89       	ldd	r25, Y+19	; 0x13
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	91 05       	cpc	r25, r1
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <tankIO_server_pressedButtons_register_function+0x206>
    24f2:	c2 c0       	rjmp	.+388    	; 0x2678 <tankIO_server_pressedButtons_register_function+0x38a>
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	8c 01       	movw	r16, r24
    24fa:	00 0f       	add	r16, r16
    24fc:	11 1f       	adc	r17, r17
    24fe:	08 0f       	add	r16, r24
    2500:	19 1f       	adc	r17, r25
    2502:	00 0f       	add	r16, r16
    2504:	11 1f       	adc	r17, r17
    2506:	00 0f       	add	r16, r16
    2508:	11 1f       	adc	r17, r17
    250a:	c8 01       	movw	r24, r16
    250c:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2510:	4c 01       	movw	r8, r24
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	21 f4       	brne	.+8      	; 0x251e <tankIO_server_pressedButtons_register_function+0x230>
    2516:	8f ef       	ldi	r24, 0xFF	; 255
    2518:	9f ef       	ldi	r25, 0xFF	; 255
    251a:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	a8 01       	movw	r20, r16
    2524:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    2528:	0e 81       	ldd	r16, Y+6	; 0x06
    252a:	1f 81       	ldd	r17, Y+7	; 0x07
    252c:	6a 80       	ldd	r6, Y+2	; 0x02
    252e:	7b 80       	ldd	r7, Y+3	; 0x03
    2530:	73 01       	movw	r14, r6
    2532:	ee 0c       	add	r14, r14
    2534:	ff 1c       	adc	r15, r15
    2536:	08 94       	sec
    2538:	e1 08       	sbc	r14, r1
    253a:	f1 08       	sbc	r15, r1
    253c:	c7 01       	movw	r24, r14
    253e:	80 23       	and	r24, r16
    2540:	91 23       	and	r25, r17
    2542:	21 e0       	ldi	r18, 0x01	; 1
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	11 f4       	brne	.+4      	; 0x254e <tankIO_server_pressedButtons_register_function+0x260>
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	9d 81       	ldd	r25, Y+5	; 0x05
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	02 c0       	rjmp	.+4      	; 0x255a <tankIO_server_pressedButtons_register_function+0x26c>
    2556:	16 95       	lsr	r17
    2558:	07 95       	ror	r16
    255a:	8a 95       	dec	r24
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <tankIO_server_pressedButtons_register_function+0x268>
    255e:	02 0f       	add	r16, r18
    2560:	13 1f       	adc	r17, r19
    2562:	1d 87       	std	Y+13, r17	; 0x0d
    2564:	0c 87       	std	Y+12, r16	; 0x0c
    2566:	1f 86       	std	Y+15, r1	; 0x0f
    2568:	1e 86       	std	Y+14, r1	; 0x0e
    256a:	cc 24       	eor	r12, r12
    256c:	dd 24       	eor	r13, r13
    256e:	aa 24       	eor	r10, r10
    2570:	bb 24       	eor	r11, r11
    2572:	51 c0       	rjmp	.+162    	; 0x2616 <tankIO_server_pressedButtons_register_function+0x328>
    2574:	8c 0d       	add	r24, r12
    2576:	9d 1d       	adc	r25, r13
    2578:	fc 01       	movw	r30, r24
    257a:	20 81       	ld	r18, Z
    257c:	31 81       	ldd	r19, Z+1	; 0x01
    257e:	40 c0       	rjmp	.+128    	; 0x2600 <tankIO_server_pressedButtons_register_function+0x312>
    2580:	d9 01       	movw	r26, r18
    2582:	18 96       	adiw	r26, 0x08	; 8
    2584:	5c 90       	ld	r5, X
    2586:	18 97       	sbiw	r26, 0x08	; 8
    2588:	19 96       	adiw	r26, 0x09	; 9
    258a:	4c 90       	ld	r4, X
    258c:	19 97       	sbiw	r26, 0x09	; 9
    258e:	1e 96       	adiw	r26, 0x0e	; 14
    2590:	8d 91       	ld	r24, X+
    2592:	9c 91       	ld	r25, X
    2594:	1f 97       	sbiw	r26, 0x0f	; 15
    2596:	8e 21       	and	r24, r14
    2598:	9f 21       	and	r25, r15
    259a:	fc 01       	movw	r30, r24
    259c:	ee 0f       	add	r30, r30
    259e:	ff 1f       	adc	r31, r31
    25a0:	e8 0f       	add	r30, r24
    25a2:	f9 1f       	adc	r31, r25
    25a4:	ee 0f       	add	r30, r30
    25a6:	ff 1f       	adc	r31, r31
    25a8:	e8 0d       	add	r30, r8
    25aa:	f9 1d       	adc	r31, r9
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	93 83       	std	Z+3, r25	; 0x03
    25b4:	82 83       	std	Z+2, r24	; 0x02
    25b6:	08 17       	cp	r16, r24
    25b8:	19 07       	cpc	r17, r25
    25ba:	58 f4       	brcc	.+22     	; 0x25d2 <tankIO_server_pressedButtons_register_function+0x2e4>
    25bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    25be:	5f 85       	ldd	r21, Y+15	; 0x0f
    25c0:	4f 5f       	subi	r20, 0xFF	; 255
    25c2:	5f 4f       	sbci	r21, 0xFF	; 255
    25c4:	5f 87       	std	Y+15, r21	; 0x0f
    25c6:	4e 87       	std	Y+14, r20	; 0x0e
    25c8:	b8 01       	movw	r22, r16
    25ca:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    25ce:	75 83       	std	Z+5, r23	; 0x05
    25d0:	64 83       	std	Z+4, r22	; 0x04
    25d2:	d9 01       	movw	r26, r18
    25d4:	17 96       	adiw	r26, 0x07	; 7
    25d6:	1c 92       	st	X, r1
    25d8:	1e 92       	st	-X, r1
    25da:	16 97       	sbiw	r26, 0x06	; 6
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	19 96       	adiw	r26, 0x09	; 9
    25e2:	9c 93       	st	X, r25
    25e4:	8e 93       	st	-X, r24
    25e6:	18 97       	sbiw	r26, 0x08	; 8
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	29 f0       	breq	.+10     	; 0x25f6 <tankIO_server_pressedButtons_register_function+0x308>
    25ec:	dc 01       	movw	r26, r24
    25ee:	17 96       	adiw	r26, 0x07	; 7
    25f0:	3c 93       	st	X, r19
    25f2:	2e 93       	st	-X, r18
    25f4:	16 97       	sbiw	r26, 0x06	; 6
    25f6:	31 83       	std	Z+1, r19	; 0x01
    25f8:	20 83       	st	Z, r18
    25fa:	c2 01       	movw	r24, r4
    25fc:	29 2f       	mov	r18, r25
    25fe:	34 2d       	mov	r19, r4
    2600:	21 15       	cp	r18, r1
    2602:	31 05       	cpc	r19, r1
    2604:	09 f0       	breq	.+2      	; 0x2608 <tankIO_server_pressedButtons_register_function+0x31a>
    2606:	bc cf       	rjmp	.-136    	; 0x2580 <tankIO_server_pressedButtons_register_function+0x292>
    2608:	08 94       	sec
    260a:	a1 1c       	adc	r10, r1
    260c:	b1 1c       	adc	r11, r1
    260e:	e6 e0       	ldi	r30, 0x06	; 6
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	ce 0e       	add	r12, r30
    2614:	df 1e       	adc	r13, r31
    2616:	88 81       	ld	r24, Y
    2618:	99 81       	ldd	r25, Y+1	; 0x01
    261a:	a6 14       	cp	r10, r6
    261c:	b7 04       	cpc	r11, r7
    261e:	08 f4       	brcc	.+2      	; 0x2622 <tankIO_server_pressedButtons_register_function+0x334>
    2620:	a9 cf       	rjmp	.-174    	; 0x2574 <tankIO_server_pressedButtons_register_function+0x286>
    2622:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    2626:	e0 91 21 02 	lds	r30, 0x0221
    262a:	f0 91 22 02 	lds	r31, 0x0222
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	93 83       	std	Z+3, r25	; 0x03
    2638:	82 83       	std	Z+2, r24	; 0x02
    263a:	84 81       	ldd	r24, Z+4	; 0x04
    263c:	95 81       	ldd	r25, Z+5	; 0x05
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	95 83       	std	Z+5, r25	; 0x05
    2642:	84 83       	std	Z+4, r24	; 0x04
    2644:	91 82       	std	Z+1, r9	; 0x01
    2646:	80 82       	st	Z, r8
    2648:	86 81       	ldd	r24, Z+6	; 0x06
    264a:	97 81       	ldd	r25, Z+7	; 0x07
    264c:	96 95       	lsr	r25
    264e:	87 95       	ror	r24
    2650:	26 85       	ldd	r18, Z+14	; 0x0e
    2652:	37 85       	ldd	r19, Z+15	; 0x0f
    2654:	82 17       	cp	r24, r18
    2656:	93 07       	cpc	r25, r19
    2658:	20 f4       	brcc	.+8      	; 0x2662 <tankIO_server_pressedButtons_register_function+0x374>
    265a:	80 89       	ldd	r24, Z+16	; 0x10
    265c:	91 89       	ldd	r25, Z+17	; 0x11
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <tankIO_server_pressedButtons_register_function+0x378>
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	91 8b       	std	Z+17, r25	; 0x11
    2668:	80 8b       	std	Z+16, r24	; 0x10
    266a:	82 30       	cpi	r24, 0x02	; 2
    266c:	91 05       	cpc	r25, r1
    266e:	20 f0       	brcs	.+8      	; 0x2678 <tankIO_server_pressedButtons_register_function+0x38a>
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	93 8b       	std	Z+19, r25	; 0x13
    2676:	82 8b       	std	Z+18, r24	; 0x12
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	8f 90       	pop	r8
    2690:	7f 90       	pop	r7
    2692:	6f 90       	pop	r6
    2694:	5f 90       	pop	r5
    2696:	4f 90       	pop	r4
    2698:	08 95       	ret

0000269a <toLedGroup>:

// ==
// Local converting functions
// ==

PLedGroup toLedGroup(TankIoLeds leds) {
    269a:	88 30       	cpi	r24, 0x08	; 8
    269c:	91 05       	cpc	r25, r1
    269e:	40 f4       	brcc	.+16     	; 0x26b0 <toLedGroup+0x16>
    26a0:	fc 01       	movw	r30, r24
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e2 59       	subi	r30, 0x92	; 146
    26a8:	fc 4f       	sbci	r31, 0xFC	; 252
    26aa:	20 81       	ld	r18, Z
    26ac:	31 81       	ldd	r19, Z+1	; 0x01
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <toLedGroup+0x1a>
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
		case LEDS_GREEN:
			return GreenLeds;
		default:
			return NULL;
	}
}
    26b4:	c9 01       	movw	r24, r18
    26b6:	08 95       	ret

000026b8 <toLed>:

PLed toLed(SingleLed led) {
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <toLed+0x6>
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	69 83       	std	Y+1, r22	; 0x01
    26c6:	7a 83       	std	Y+2, r23	; 0x02
    26c8:	8b 83       	std	Y+3, r24	; 0x03
	return toLedGroup(led.leds)->leds[led.index];
    26ca:	e9 81       	ldd	r30, Y+1	; 0x01
    26cc:	fa 81       	ldd	r31, Y+2	; 0x02
    26ce:	e8 30       	cpi	r30, 0x08	; 8
    26d0:	f1 05       	cpc	r31, r1
    26d2:	40 f4       	brcc	.+16     	; 0x26e4 <toLed+0x2c>
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	e2 59       	subi	r30, 0x92	; 146
    26da:	fc 4f       	sbci	r31, 0xFC	; 252
    26dc:	01 90       	ld	r0, Z+
    26de:	f0 81       	ld	r31, Z
    26e0:	e0 2d       	mov	r30, r0
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <toLed+0x30>
    26e4:	e0 e0       	ldi	r30, 0x00	; 0
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	01 90       	ld	r0, Z+
    26f2:	f0 81       	ld	r31, Z
    26f4:	e0 2d       	mov	r30, r0
    26f6:	e8 0f       	add	r30, r24
    26f8:	f9 1f       	adc	r31, r25
}
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <tankIO_server_enableLed>:

// ==
// **Led
// ==

void tankIO_server_enableLed(SingleLed *led, uint16_t size) {
    270a:	fc 01       	movw	r30, r24
	enableLed(toLed(*led));
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	82 81       	ldd	r24, Z+2	; 0x02
    2712:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <toLed>
    2716:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <enableLed>
}
    271a:	08 95       	ret

0000271c <tankIO_server_enableLed_handler>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_enableLed, TANK_IO_enableLed, SingleLed)
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	ec 01       	movw	r28, r24
    2722:	6a 81       	ldd	r22, Y+2	; 0x02
    2724:	7b 81       	ldd	r23, Y+3	; 0x03
    2726:	88 81       	ld	r24, Y
    2728:	99 81       	ldd	r25, Y+1	; 0x01
    272a:	0e 94 85 13 	call	0x270a	; 0x270a <tankIO_server_enableLed>
    272e:	1b 82       	std	Y+3, r1	; 0x03
    2730:	1a 82       	std	Y+2, r1	; 0x02
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <tankIO_server_enableLed_register_function>:
    2738:	4f 92       	push	r4
    273a:	5f 92       	push	r5
    273c:	6f 92       	push	r6
    273e:	7f 92       	push	r7
    2740:	8f 92       	push	r8
    2742:	9f 92       	push	r9
    2744:	af 92       	push	r10
    2746:	bf 92       	push	r11
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	10 92 39 02 	sts	0x0239, r1
    275c:	10 92 38 02 	sts	0x0238, r1
    2760:	e1 e3       	ldi	r30, 0x31	; 49
    2762:	f2 e0       	ldi	r31, 0x02	; 2
    2764:	f0 93 3f 02 	sts	0x023F, r31
    2768:	e0 93 3e 02 	sts	0x023E, r30
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	90 93 41 02 	sts	0x0241, r25
    2774:	80 93 40 02 	sts	0x0240, r24
    2778:	a0 91 9c 03 	lds	r26, 0x039C
    277c:	b0 91 9d 03 	lds	r27, 0x039D
    2780:	8f 01       	movw	r16, r30
    2782:	0d 5f       	subi	r16, 0xFD	; 253
    2784:	1f 4f       	sbci	r17, 0xFF	; 255
    2786:	10 97       	sbiw	r26, 0x00	; 0
    2788:	09 f0       	breq	.+2      	; 0x278c <tankIO_server_enableLed_register_function+0x54>
    278a:	49 c0       	rjmp	.+146    	; 0x281e <tankIO_server_enableLed_register_function+0xe6>
    278c:	f0 93 9d 03 	sts	0x039D, r31
    2790:	e0 93 9c 03 	sts	0x039C, r30
    2794:	10 92 37 02 	sts	0x0237, r1
    2798:	10 92 36 02 	sts	0x0236, r1
    279c:	88 e1       	ldi	r24, 0x18	; 24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    27a4:	90 93 35 02 	sts	0x0235, r25
    27a8:	80 93 34 02 	sts	0x0234, r24
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <tankIO_server_enableLed_register_function+0x7a>
    27b0:	d7 c0       	rjmp	.+430    	; 0x2960 <tankIO_server_enableLed_register_function+0x228>
    27b2:	e8 2f       	mov	r30, r24
    27b4:	f9 2f       	mov	r31, r25
    27b6:	88 e1       	ldi	r24, 0x18	; 24
    27b8:	df 01       	movw	r26, r30
    27ba:	1d 92       	st	X+, r1
    27bc:	8a 95       	dec	r24
    27be:	e9 f7       	brne	.-6      	; 0x27ba <tankIO_server_enableLed_register_function+0x82>
    27c0:	c0 91 34 02 	lds	r28, 0x0234
    27c4:	d0 91 35 02 	lds	r29, 0x0235
    27c8:	19 87       	std	Y+9, r17	; 0x09
    27ca:	08 87       	std	Y+8, r16	; 0x08
    27cc:	80 e2       	ldi	r24, 0x20	; 32
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	85 e0       	ldi	r24, 0x05	; 5
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	9d 83       	std	Y+5, r25	; 0x05
    27da:	8c 83       	std	Y+4, r24	; 0x04
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	9b 87       	std	Y+11, r25	; 0x0b
    27e2:	8a 87       	std	Y+10, r24	; 0x0a
    27e4:	80 ec       	ldi	r24, 0xC0	; 192
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    27ec:	99 83       	std	Y+1, r25	; 0x01
    27ee:	88 83       	st	Y, r24
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <tankIO_server_enableLed_register_function+0xbe>
    27f4:	b5 c0       	rjmp	.+362    	; 0x2960 <tankIO_server_enableLed_register_function+0x228>
    27f6:	e8 2f       	mov	r30, r24
    27f8:	f9 2f       	mov	r31, r25
    27fa:	80 ec       	ldi	r24, 0xC0	; 192
    27fc:	df 01       	movw	r26, r30
    27fe:	1d 92       	st	X+, r1
    2800:	8a 95       	dec	r24
    2802:	e9 f7       	brne	.-6      	; 0x27fe <tankIO_server_enableLed_register_function+0xc6>
    2804:	e0 91 34 02 	lds	r30, 0x0234
    2808:	f0 91 35 02 	lds	r31, 0x0235
    280c:	81 ee       	ldi	r24, 0xE1	; 225
    280e:	9f e1       	ldi	r25, 0x1F	; 31
    2810:	a1 e1       	ldi	r26, 0x11	; 17
    2812:	b0 ea       	ldi	r27, 0xA0	; 160
    2814:	84 8b       	std	Z+20, r24	; 0x14
    2816:	95 8b       	std	Z+21, r25	; 0x15
    2818:	a6 8b       	std	Z+22, r26	; 0x16
    281a:	b7 8b       	std	Z+23, r27	; 0x17
    281c:	16 c0       	rjmp	.+44     	; 0x284a <tankIO_server_enableLed_register_function+0x112>
    281e:	13 96       	adiw	r26, 0x03	; 3
    2820:	0d 90       	ld	r0, X+
    2822:	bc 91       	ld	r27, X
    2824:	a0 2d       	mov	r26, r0
    2826:	18 96       	adiw	r26, 0x08	; 8
    2828:	cd 91       	ld	r28, X+
    282a:	dc 91       	ld	r29, X
    282c:	19 97       	sbiw	r26, 0x09	; 9
    282e:	fd 83       	std	Y+5, r31	; 0x05
    2830:	ec 83       	std	Y+4, r30	; 0x04
    2832:	1a 96       	adiw	r26, 0x0a	; 10
    2834:	8d 91       	ld	r24, X+
    2836:	9c 91       	ld	r25, X
    2838:	1b 97       	sbiw	r26, 0x0b	; 11
    283a:	c8 1b       	sub	r28, r24
    283c:	d9 0b       	sbc	r29, r25
    283e:	d6 83       	std	Z+6, r29	; 0x06
    2840:	c5 83       	std	Z+5, r28	; 0x05
    2842:	19 96       	adiw	r26, 0x09	; 9
    2844:	1c 93       	st	X, r17
    2846:	0e 93       	st	-X, r16
    2848:	18 97       	sbiw	r26, 0x08	; 8
    284a:	e0 91 9c 03 	lds	r30, 0x039C
    284e:	f0 91 9d 03 	lds	r31, 0x039D
    2852:	c3 81       	ldd	r28, Z+3	; 0x03
    2854:	d4 81       	ldd	r29, Z+4	; 0x04
    2856:	8e 81       	ldd	r24, Y+6	; 0x06
    2858:	9f 81       	ldd	r25, Y+7	; 0x07
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	9f 83       	std	Y+7, r25	; 0x07
    285e:	8e 83       	std	Y+6, r24	; 0x06
    2860:	44 e3       	ldi	r20, 0x34	; 52
    2862:	52 e0       	ldi	r21, 0x02	; 2
    2864:	d0 93 35 02 	sts	0x0235, r29
    2868:	c0 93 34 02 	sts	0x0234, r28
    286c:	da 01       	movw	r26, r20
    286e:	13 97       	sbiw	r26, 0x03	; 3
    2870:	20 91 31 02 	lds	r18, 0x0231
    2874:	33 27       	eor	r19, r19
    2876:	27 fd       	sbrc	r18, 7
    2878:	30 95       	com	r19
    287a:	c9 01       	movw	r24, r18
    287c:	96 95       	lsr	r25
    287e:	87 95       	ror	r24
    2880:	96 95       	lsr	r25
    2882:	87 95       	ror	r24
    2884:	b9 01       	movw	r22, r18
    2886:	15 e0       	ldi	r17, 0x05	; 5
    2888:	66 0f       	add	r22, r22
    288a:	77 1f       	adc	r23, r23
    288c:	1a 95       	dec	r17
    288e:	e1 f7       	brne	.-8      	; 0x2888 <tankIO_server_enableLed_register_function+0x150>
    2890:	86 0f       	add	r24, r22
    2892:	97 1f       	adc	r25, r23
    2894:	60 91 32 02 	lds	r22, 0x0232
    2898:	77 27       	eor	r23, r23
    289a:	67 fd       	sbrc	r22, 7
    289c:	70 95       	com	r23
    289e:	86 0f       	add	r24, r22
    28a0:	97 1f       	adc	r25, r23
    28a2:	82 27       	eor	r24, r18
    28a4:	93 27       	eor	r25, r19
    28a6:	52 96       	adiw	r26, 0x12	; 18
    28a8:	9c 93       	st	X, r25
    28aa:	8e 93       	st	-X, r24
    28ac:	51 97       	sbiw	r26, 0x11	; 17
    28ae:	03 80       	ldd	r0, Z+3	; 0x03
    28b0:	f4 81       	ldd	r31, Z+4	; 0x04
    28b2:	e0 2d       	mov	r30, r0
    28b4:	22 81       	ldd	r18, Z+2	; 0x02
    28b6:	33 81       	ldd	r19, Z+3	; 0x03
    28b8:	21 50       	subi	r18, 0x01	; 1
    28ba:	30 40       	sbci	r19, 0x00	; 0
    28bc:	28 23       	and	r18, r24
    28be:	39 23       	and	r19, r25
    28c0:	c9 01       	movw	r24, r18
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	82 0f       	add	r24, r18
    28c8:	93 1f       	adc	r25, r19
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	01 90       	ld	r0, Z+
    28d0:	f0 81       	ld	r31, Z
    28d2:	e0 2d       	mov	r30, r0
    28d4:	e8 0f       	add	r30, r24
    28d6:	f9 1f       	adc	r31, r25
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	93 83       	std	Z+3, r25	; 0x03
    28e0:	82 83       	std	Z+2, r24	; 0x02
    28e2:	20 81       	ld	r18, Z
    28e4:	31 81       	ldd	r19, Z+1	; 0x01
    28e6:	1c 96       	adiw	r26, 0x0c	; 12
    28e8:	3c 93       	st	X, r19
    28ea:	2e 93       	st	-X, r18
    28ec:	1b 97       	sbiw	r26, 0x0b	; 11
    28ee:	1a 96       	adiw	r26, 0x0a	; 10
    28f0:	1c 92       	st	X, r1
    28f2:	1e 92       	st	-X, r1
    28f4:	19 97       	sbiw	r26, 0x09	; 9
    28f6:	21 15       	cp	r18, r1
    28f8:	31 05       	cpc	r19, r1
    28fa:	29 f0       	breq	.+10     	; 0x2906 <tankIO_server_enableLed_register_function+0x1ce>
    28fc:	d9 01       	movw	r26, r18
    28fe:	17 96       	adiw	r26, 0x07	; 7
    2900:	5c 93       	st	X, r21
    2902:	4e 93       	st	-X, r20
    2904:	16 97       	sbiw	r26, 0x06	; 6
    2906:	24 e3       	ldi	r18, 0x34	; 52
    2908:	32 e0       	ldi	r19, 0x02	; 2
    290a:	31 83       	std	Z+1, r19	; 0x01
    290c:	20 83       	st	Z, r18
    290e:	24 81       	ldd	r18, Z+4	; 0x04
    2910:	35 81       	ldd	r19, Z+5	; 0x05
    2912:	2f 5f       	subi	r18, 0xFF	; 255
    2914:	3f 4f       	sbci	r19, 0xFF	; 255
    2916:	a9 01       	movw	r20, r18
    2918:	44 0f       	add	r20, r20
    291a:	55 1f       	adc	r21, r21
    291c:	b3 e0       	ldi	r27, 0x03	; 3
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	ba 95       	dec	r27
    2924:	e1 f7       	brne	.-8      	; 0x291e <tankIO_server_enableLed_register_function+0x1e6>
    2926:	42 0f       	add	r20, r18
    2928:	53 1f       	adc	r21, r19
    292a:	84 17       	cp	r24, r20
    292c:	95 07       	cpc	r25, r21
    292e:	08 f4       	brcc	.+2      	; 0x2932 <tankIO_server_enableLed_register_function+0x1fa>
    2930:	c8 c0       	rjmp	.+400    	; 0x2ac2 <tankIO_server_enableLed_register_function+0x38a>
    2932:	8a 89       	ldd	r24, Y+18	; 0x12
    2934:	9b 89       	ldd	r25, Y+19	; 0x13
    2936:	81 30       	cpi	r24, 0x01	; 1
    2938:	91 05       	cpc	r25, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <tankIO_server_enableLed_register_function+0x206>
    293c:	c2 c0       	rjmp	.+388    	; 0x2ac2 <tankIO_server_enableLed_register_function+0x38a>
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	9b 81       	ldd	r25, Y+3	; 0x03
    2942:	8c 01       	movw	r16, r24
    2944:	00 0f       	add	r16, r16
    2946:	11 1f       	adc	r17, r17
    2948:	08 0f       	add	r16, r24
    294a:	19 1f       	adc	r17, r25
    294c:	00 0f       	add	r16, r16
    294e:	11 1f       	adc	r17, r17
    2950:	00 0f       	add	r16, r16
    2952:	11 1f       	adc	r17, r17
    2954:	c8 01       	movw	r24, r16
    2956:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    295a:	4c 01       	movw	r8, r24
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	21 f4       	brne	.+8      	; 0x2968 <tankIO_server_enableLed_register_function+0x230>
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	9f ef       	ldi	r25, 0xFF	; 255
    2964:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	70 e0       	ldi	r23, 0x00	; 0
    296c:	a8 01       	movw	r20, r16
    296e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    2972:	0e 81       	ldd	r16, Y+6	; 0x06
    2974:	1f 81       	ldd	r17, Y+7	; 0x07
    2976:	6a 80       	ldd	r6, Y+2	; 0x02
    2978:	7b 80       	ldd	r7, Y+3	; 0x03
    297a:	73 01       	movw	r14, r6
    297c:	ee 0c       	add	r14, r14
    297e:	ff 1c       	adc	r15, r15
    2980:	08 94       	sec
    2982:	e1 08       	sbc	r14, r1
    2984:	f1 08       	sbc	r15, r1
    2986:	c7 01       	movw	r24, r14
    2988:	80 23       	and	r24, r16
    298a:	91 23       	and	r25, r17
    298c:	21 e0       	ldi	r18, 0x01	; 1
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	11 f4       	brne	.+4      	; 0x2998 <tankIO_server_enableLed_register_function+0x260>
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	8c 81       	ldd	r24, Y+4	; 0x04
    299a:	9d 81       	ldd	r25, Y+5	; 0x05
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <tankIO_server_enableLed_register_function+0x26c>
    29a0:	16 95       	lsr	r17
    29a2:	07 95       	ror	r16
    29a4:	8a 95       	dec	r24
    29a6:	e2 f7       	brpl	.-8      	; 0x29a0 <tankIO_server_enableLed_register_function+0x268>
    29a8:	02 0f       	add	r16, r18
    29aa:	13 1f       	adc	r17, r19
    29ac:	1d 87       	std	Y+13, r17	; 0x0d
    29ae:	0c 87       	std	Y+12, r16	; 0x0c
    29b0:	1f 86       	std	Y+15, r1	; 0x0f
    29b2:	1e 86       	std	Y+14, r1	; 0x0e
    29b4:	cc 24       	eor	r12, r12
    29b6:	dd 24       	eor	r13, r13
    29b8:	aa 24       	eor	r10, r10
    29ba:	bb 24       	eor	r11, r11
    29bc:	51 c0       	rjmp	.+162    	; 0x2a60 <tankIO_server_enableLed_register_function+0x328>
    29be:	8c 0d       	add	r24, r12
    29c0:	9d 1d       	adc	r25, r13
    29c2:	fc 01       	movw	r30, r24
    29c4:	20 81       	ld	r18, Z
    29c6:	31 81       	ldd	r19, Z+1	; 0x01
    29c8:	40 c0       	rjmp	.+128    	; 0x2a4a <tankIO_server_enableLed_register_function+0x312>
    29ca:	d9 01       	movw	r26, r18
    29cc:	18 96       	adiw	r26, 0x08	; 8
    29ce:	5c 90       	ld	r5, X
    29d0:	18 97       	sbiw	r26, 0x08	; 8
    29d2:	19 96       	adiw	r26, 0x09	; 9
    29d4:	4c 90       	ld	r4, X
    29d6:	19 97       	sbiw	r26, 0x09	; 9
    29d8:	1e 96       	adiw	r26, 0x0e	; 14
    29da:	8d 91       	ld	r24, X+
    29dc:	9c 91       	ld	r25, X
    29de:	1f 97       	sbiw	r26, 0x0f	; 15
    29e0:	8e 21       	and	r24, r14
    29e2:	9f 21       	and	r25, r15
    29e4:	fc 01       	movw	r30, r24
    29e6:	ee 0f       	add	r30, r30
    29e8:	ff 1f       	adc	r31, r31
    29ea:	e8 0f       	add	r30, r24
    29ec:	f9 1f       	adc	r31, r25
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	e8 0d       	add	r30, r8
    29f4:	f9 1d       	adc	r31, r9
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	93 83       	std	Z+3, r25	; 0x03
    29fe:	82 83       	std	Z+2, r24	; 0x02
    2a00:	08 17       	cp	r16, r24
    2a02:	19 07       	cpc	r17, r25
    2a04:	58 f4       	brcc	.+22     	; 0x2a1c <tankIO_server_enableLed_register_function+0x2e4>
    2a06:	4e 85       	ldd	r20, Y+14	; 0x0e
    2a08:	5f 85       	ldd	r21, Y+15	; 0x0f
    2a0a:	4f 5f       	subi	r20, 0xFF	; 255
    2a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0e:	5f 87       	std	Y+15, r21	; 0x0f
    2a10:	4e 87       	std	Y+14, r20	; 0x0e
    2a12:	b8 01       	movw	r22, r16
    2a14:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    2a18:	75 83       	std	Z+5, r23	; 0x05
    2a1a:	64 83       	std	Z+4, r22	; 0x04
    2a1c:	d9 01       	movw	r26, r18
    2a1e:	17 96       	adiw	r26, 0x07	; 7
    2a20:	1c 92       	st	X, r1
    2a22:	1e 92       	st	-X, r1
    2a24:	16 97       	sbiw	r26, 0x06	; 6
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	19 96       	adiw	r26, 0x09	; 9
    2a2c:	9c 93       	st	X, r25
    2a2e:	8e 93       	st	-X, r24
    2a30:	18 97       	sbiw	r26, 0x08	; 8
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	29 f0       	breq	.+10     	; 0x2a40 <tankIO_server_enableLed_register_function+0x308>
    2a36:	dc 01       	movw	r26, r24
    2a38:	17 96       	adiw	r26, 0x07	; 7
    2a3a:	3c 93       	st	X, r19
    2a3c:	2e 93       	st	-X, r18
    2a3e:	16 97       	sbiw	r26, 0x06	; 6
    2a40:	31 83       	std	Z+1, r19	; 0x01
    2a42:	20 83       	st	Z, r18
    2a44:	c2 01       	movw	r24, r4
    2a46:	29 2f       	mov	r18, r25
    2a48:	34 2d       	mov	r19, r4
    2a4a:	21 15       	cp	r18, r1
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <tankIO_server_enableLed_register_function+0x31a>
    2a50:	bc cf       	rjmp	.-136    	; 0x29ca <tankIO_server_enableLed_register_function+0x292>
    2a52:	08 94       	sec
    2a54:	a1 1c       	adc	r10, r1
    2a56:	b1 1c       	adc	r11, r1
    2a58:	e6 e0       	ldi	r30, 0x06	; 6
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	ce 0e       	add	r12, r30
    2a5e:	df 1e       	adc	r13, r31
    2a60:	88 81       	ld	r24, Y
    2a62:	99 81       	ldd	r25, Y+1	; 0x01
    2a64:	a6 14       	cp	r10, r6
    2a66:	b7 04       	cpc	r11, r7
    2a68:	08 f4       	brcc	.+2      	; 0x2a6c <tankIO_server_enableLed_register_function+0x334>
    2a6a:	a9 cf       	rjmp	.-174    	; 0x29be <tankIO_server_enableLed_register_function+0x286>
    2a6c:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    2a70:	e0 91 34 02 	lds	r30, 0x0234
    2a74:	f0 91 35 02 	lds	r31, 0x0235
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	93 83       	std	Z+3, r25	; 0x03
    2a82:	82 83       	std	Z+2, r24	; 0x02
    2a84:	84 81       	ldd	r24, Z+4	; 0x04
    2a86:	95 81       	ldd	r25, Z+5	; 0x05
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	95 83       	std	Z+5, r25	; 0x05
    2a8c:	84 83       	std	Z+4, r24	; 0x04
    2a8e:	91 82       	std	Z+1, r9	; 0x01
    2a90:	80 82       	st	Z, r8
    2a92:	86 81       	ldd	r24, Z+6	; 0x06
    2a94:	97 81       	ldd	r25, Z+7	; 0x07
    2a96:	96 95       	lsr	r25
    2a98:	87 95       	ror	r24
    2a9a:	26 85       	ldd	r18, Z+14	; 0x0e
    2a9c:	37 85       	ldd	r19, Z+15	; 0x0f
    2a9e:	82 17       	cp	r24, r18
    2aa0:	93 07       	cpc	r25, r19
    2aa2:	20 f4       	brcc	.+8      	; 0x2aac <tankIO_server_enableLed_register_function+0x374>
    2aa4:	80 89       	ldd	r24, Z+16	; 0x10
    2aa6:	91 89       	ldd	r25, Z+17	; 0x11
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <tankIO_server_enableLed_register_function+0x378>
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	91 8b       	std	Z+17, r25	; 0x11
    2ab2:	80 8b       	std	Z+16, r24	; 0x10
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	20 f0       	brcs	.+8      	; 0x2ac2 <tankIO_server_enableLed_register_function+0x38a>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	93 8b       	std	Z+19, r25	; 0x13
    2ac0:	82 8b       	std	Z+18, r24	; 0x12
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	ff 90       	pop	r15
    2acc:	ef 90       	pop	r14
    2ace:	df 90       	pop	r13
    2ad0:	cf 90       	pop	r12
    2ad2:	bf 90       	pop	r11
    2ad4:	af 90       	pop	r10
    2ad6:	9f 90       	pop	r9
    2ad8:	8f 90       	pop	r8
    2ada:	7f 90       	pop	r7
    2adc:	6f 90       	pop	r6
    2ade:	5f 90       	pop	r5
    2ae0:	4f 90       	pop	r4
    2ae2:	08 95       	ret

00002ae4 <tankIO_server_disableLed>:

void tankIO_server_disableLed(SingleLed *led, uint16_t size) {
    2ae4:	fc 01       	movw	r30, r24
	disableLed(toLed(*led));
    2ae6:	60 81       	ld	r22, Z
    2ae8:	71 81       	ldd	r23, Z+1	; 0x01
    2aea:	82 81       	ldd	r24, Z+2	; 0x02
    2aec:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <toLed>
    2af0:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <disableLed>
}
    2af4:	08 95       	ret

00002af6 <tankIO_server_disableLed_handler>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_disableLed, TANK_IO_disableLed, SingleLed)
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	ec 01       	movw	r28, r24
    2afc:	6a 81       	ldd	r22, Y+2	; 0x02
    2afe:	7b 81       	ldd	r23, Y+3	; 0x03
    2b00:	88 81       	ld	r24, Y
    2b02:	99 81       	ldd	r25, Y+1	; 0x01
    2b04:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <tankIO_server_disableLed>
    2b08:	1b 82       	std	Y+3, r1	; 0x03
    2b0a:	1a 82       	std	Y+2, r1	; 0x02
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	08 95       	ret

00002b12 <tankIO_server_disableLed_register_function>:
    2b12:	4f 92       	push	r4
    2b14:	5f 92       	push	r5
    2b16:	6f 92       	push	r6
    2b18:	7f 92       	push	r7
    2b1a:	8f 92       	push	r8
    2b1c:	9f 92       	push	r9
    2b1e:	af 92       	push	r10
    2b20:	bf 92       	push	r11
    2b22:	cf 92       	push	r12
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	10 92 4c 02 	sts	0x024C, r1
    2b36:	10 92 4b 02 	sts	0x024B, r1
    2b3a:	e4 e4       	ldi	r30, 0x44	; 68
    2b3c:	f2 e0       	ldi	r31, 0x02	; 2
    2b3e:	f0 93 52 02 	sts	0x0252, r31
    2b42:	e0 93 51 02 	sts	0x0251, r30
    2b46:	82 e0       	ldi	r24, 0x02	; 2
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	90 93 54 02 	sts	0x0254, r25
    2b4e:	80 93 53 02 	sts	0x0253, r24
    2b52:	a0 91 9c 03 	lds	r26, 0x039C
    2b56:	b0 91 9d 03 	lds	r27, 0x039D
    2b5a:	8f 01       	movw	r16, r30
    2b5c:	0d 5f       	subi	r16, 0xFD	; 253
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	10 97       	sbiw	r26, 0x00	; 0
    2b62:	09 f0       	breq	.+2      	; 0x2b66 <tankIO_server_disableLed_register_function+0x54>
    2b64:	49 c0       	rjmp	.+146    	; 0x2bf8 <tankIO_server_disableLed_register_function+0xe6>
    2b66:	f0 93 9d 03 	sts	0x039D, r31
    2b6a:	e0 93 9c 03 	sts	0x039C, r30
    2b6e:	10 92 4a 02 	sts	0x024A, r1
    2b72:	10 92 49 02 	sts	0x0249, r1
    2b76:	88 e1       	ldi	r24, 0x18	; 24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2b7e:	90 93 48 02 	sts	0x0248, r25
    2b82:	80 93 47 02 	sts	0x0247, r24
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <tankIO_server_disableLed_register_function+0x7a>
    2b8a:	d7 c0       	rjmp	.+430    	; 0x2d3a <tankIO_server_disableLed_register_function+0x228>
    2b8c:	e8 2f       	mov	r30, r24
    2b8e:	f9 2f       	mov	r31, r25
    2b90:	88 e1       	ldi	r24, 0x18	; 24
    2b92:	df 01       	movw	r26, r30
    2b94:	1d 92       	st	X+, r1
    2b96:	8a 95       	dec	r24
    2b98:	e9 f7       	brne	.-6      	; 0x2b94 <tankIO_server_disableLed_register_function+0x82>
    2b9a:	c0 91 47 02 	lds	r28, 0x0247
    2b9e:	d0 91 48 02 	lds	r29, 0x0248
    2ba2:	19 87       	std	Y+9, r17	; 0x09
    2ba4:	08 87       	std	Y+8, r16	; 0x08
    2ba6:	80 e2       	ldi	r24, 0x20	; 32
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9b 83       	std	Y+3, r25	; 0x03
    2bac:	8a 83       	std	Y+2, r24	; 0x02
    2bae:	85 e0       	ldi	r24, 0x05	; 5
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9d 83       	std	Y+5, r25	; 0x05
    2bb4:	8c 83       	std	Y+4, r24	; 0x04
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9b 87       	std	Y+11, r25	; 0x0b
    2bbc:	8a 87       	std	Y+10, r24	; 0x0a
    2bbe:	80 ec       	ldi	r24, 0xC0	; 192
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2bc6:	99 83       	std	Y+1, r25	; 0x01
    2bc8:	88 83       	st	Y, r24
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <tankIO_server_disableLed_register_function+0xbe>
    2bce:	b5 c0       	rjmp	.+362    	; 0x2d3a <tankIO_server_disableLed_register_function+0x228>
    2bd0:	e8 2f       	mov	r30, r24
    2bd2:	f9 2f       	mov	r31, r25
    2bd4:	80 ec       	ldi	r24, 0xC0	; 192
    2bd6:	df 01       	movw	r26, r30
    2bd8:	1d 92       	st	X+, r1
    2bda:	8a 95       	dec	r24
    2bdc:	e9 f7       	brne	.-6      	; 0x2bd8 <tankIO_server_disableLed_register_function+0xc6>
    2bde:	e0 91 47 02 	lds	r30, 0x0247
    2be2:	f0 91 48 02 	lds	r31, 0x0248
    2be6:	81 ee       	ldi	r24, 0xE1	; 225
    2be8:	9f e1       	ldi	r25, 0x1F	; 31
    2bea:	a1 e1       	ldi	r26, 0x11	; 17
    2bec:	b0 ea       	ldi	r27, 0xA0	; 160
    2bee:	84 8b       	std	Z+20, r24	; 0x14
    2bf0:	95 8b       	std	Z+21, r25	; 0x15
    2bf2:	a6 8b       	std	Z+22, r26	; 0x16
    2bf4:	b7 8b       	std	Z+23, r27	; 0x17
    2bf6:	16 c0       	rjmp	.+44     	; 0x2c24 <tankIO_server_disableLed_register_function+0x112>
    2bf8:	13 96       	adiw	r26, 0x03	; 3
    2bfa:	0d 90       	ld	r0, X+
    2bfc:	bc 91       	ld	r27, X
    2bfe:	a0 2d       	mov	r26, r0
    2c00:	18 96       	adiw	r26, 0x08	; 8
    2c02:	cd 91       	ld	r28, X+
    2c04:	dc 91       	ld	r29, X
    2c06:	19 97       	sbiw	r26, 0x09	; 9
    2c08:	fd 83       	std	Y+5, r31	; 0x05
    2c0a:	ec 83       	std	Y+4, r30	; 0x04
    2c0c:	1a 96       	adiw	r26, 0x0a	; 10
    2c0e:	8d 91       	ld	r24, X+
    2c10:	9c 91       	ld	r25, X
    2c12:	1b 97       	sbiw	r26, 0x0b	; 11
    2c14:	c8 1b       	sub	r28, r24
    2c16:	d9 0b       	sbc	r29, r25
    2c18:	d6 83       	std	Z+6, r29	; 0x06
    2c1a:	c5 83       	std	Z+5, r28	; 0x05
    2c1c:	19 96       	adiw	r26, 0x09	; 9
    2c1e:	1c 93       	st	X, r17
    2c20:	0e 93       	st	-X, r16
    2c22:	18 97       	sbiw	r26, 0x08	; 8
    2c24:	e0 91 9c 03 	lds	r30, 0x039C
    2c28:	f0 91 9d 03 	lds	r31, 0x039D
    2c2c:	c3 81       	ldd	r28, Z+3	; 0x03
    2c2e:	d4 81       	ldd	r29, Z+4	; 0x04
    2c30:	8e 81       	ldd	r24, Y+6	; 0x06
    2c32:	9f 81       	ldd	r25, Y+7	; 0x07
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	9f 83       	std	Y+7, r25	; 0x07
    2c38:	8e 83       	std	Y+6, r24	; 0x06
    2c3a:	47 e4       	ldi	r20, 0x47	; 71
    2c3c:	52 e0       	ldi	r21, 0x02	; 2
    2c3e:	d0 93 48 02 	sts	0x0248, r29
    2c42:	c0 93 47 02 	sts	0x0247, r28
    2c46:	da 01       	movw	r26, r20
    2c48:	13 97       	sbiw	r26, 0x03	; 3
    2c4a:	20 91 44 02 	lds	r18, 0x0244
    2c4e:	33 27       	eor	r19, r19
    2c50:	27 fd       	sbrc	r18, 7
    2c52:	30 95       	com	r19
    2c54:	c9 01       	movw	r24, r18
    2c56:	96 95       	lsr	r25
    2c58:	87 95       	ror	r24
    2c5a:	96 95       	lsr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	b9 01       	movw	r22, r18
    2c60:	15 e0       	ldi	r17, 0x05	; 5
    2c62:	66 0f       	add	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	1a 95       	dec	r17
    2c68:	e1 f7       	brne	.-8      	; 0x2c62 <tankIO_server_disableLed_register_function+0x150>
    2c6a:	86 0f       	add	r24, r22
    2c6c:	97 1f       	adc	r25, r23
    2c6e:	60 91 45 02 	lds	r22, 0x0245
    2c72:	77 27       	eor	r23, r23
    2c74:	67 fd       	sbrc	r22, 7
    2c76:	70 95       	com	r23
    2c78:	86 0f       	add	r24, r22
    2c7a:	97 1f       	adc	r25, r23
    2c7c:	82 27       	eor	r24, r18
    2c7e:	93 27       	eor	r25, r19
    2c80:	52 96       	adiw	r26, 0x12	; 18
    2c82:	9c 93       	st	X, r25
    2c84:	8e 93       	st	-X, r24
    2c86:	51 97       	sbiw	r26, 0x11	; 17
    2c88:	03 80       	ldd	r0, Z+3	; 0x03
    2c8a:	f4 81       	ldd	r31, Z+4	; 0x04
    2c8c:	e0 2d       	mov	r30, r0
    2c8e:	22 81       	ldd	r18, Z+2	; 0x02
    2c90:	33 81       	ldd	r19, Z+3	; 0x03
    2c92:	21 50       	subi	r18, 0x01	; 1
    2c94:	30 40       	sbci	r19, 0x00	; 0
    2c96:	28 23       	and	r18, r24
    2c98:	39 23       	and	r19, r25
    2c9a:	c9 01       	movw	r24, r18
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	82 0f       	add	r24, r18
    2ca2:	93 1f       	adc	r25, r19
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	01 90       	ld	r0, Z+
    2caa:	f0 81       	ld	r31, Z
    2cac:	e0 2d       	mov	r30, r0
    2cae:	e8 0f       	add	r30, r24
    2cb0:	f9 1f       	adc	r31, r25
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	93 83       	std	Z+3, r25	; 0x03
    2cba:	82 83       	std	Z+2, r24	; 0x02
    2cbc:	20 81       	ld	r18, Z
    2cbe:	31 81       	ldd	r19, Z+1	; 0x01
    2cc0:	1c 96       	adiw	r26, 0x0c	; 12
    2cc2:	3c 93       	st	X, r19
    2cc4:	2e 93       	st	-X, r18
    2cc6:	1b 97       	sbiw	r26, 0x0b	; 11
    2cc8:	1a 96       	adiw	r26, 0x0a	; 10
    2cca:	1c 92       	st	X, r1
    2ccc:	1e 92       	st	-X, r1
    2cce:	19 97       	sbiw	r26, 0x09	; 9
    2cd0:	21 15       	cp	r18, r1
    2cd2:	31 05       	cpc	r19, r1
    2cd4:	29 f0       	breq	.+10     	; 0x2ce0 <tankIO_server_disableLed_register_function+0x1ce>
    2cd6:	d9 01       	movw	r26, r18
    2cd8:	17 96       	adiw	r26, 0x07	; 7
    2cda:	5c 93       	st	X, r21
    2cdc:	4e 93       	st	-X, r20
    2cde:	16 97       	sbiw	r26, 0x06	; 6
    2ce0:	27 e4       	ldi	r18, 0x47	; 71
    2ce2:	32 e0       	ldi	r19, 0x02	; 2
    2ce4:	31 83       	std	Z+1, r19	; 0x01
    2ce6:	20 83       	st	Z, r18
    2ce8:	24 81       	ldd	r18, Z+4	; 0x04
    2cea:	35 81       	ldd	r19, Z+5	; 0x05
    2cec:	2f 5f       	subi	r18, 0xFF	; 255
    2cee:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf0:	a9 01       	movw	r20, r18
    2cf2:	44 0f       	add	r20, r20
    2cf4:	55 1f       	adc	r21, r21
    2cf6:	f3 e0       	ldi	r31, 0x03	; 3
    2cf8:	22 0f       	add	r18, r18
    2cfa:	33 1f       	adc	r19, r19
    2cfc:	fa 95       	dec	r31
    2cfe:	e1 f7       	brne	.-8      	; 0x2cf8 <tankIO_server_disableLed_register_function+0x1e6>
    2d00:	42 0f       	add	r20, r18
    2d02:	53 1f       	adc	r21, r19
    2d04:	84 17       	cp	r24, r20
    2d06:	95 07       	cpc	r25, r21
    2d08:	08 f4       	brcc	.+2      	; 0x2d0c <tankIO_server_disableLed_register_function+0x1fa>
    2d0a:	c8 c0       	rjmp	.+400    	; 0x2e9c <tankIO_server_disableLed_register_function+0x38a>
    2d0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d0e:	9b 89       	ldd	r25, Y+19	; 0x13
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	91 05       	cpc	r25, r1
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <tankIO_server_disableLed_register_function+0x206>
    2d16:	c2 c0       	rjmp	.+388    	; 0x2e9c <tankIO_server_disableLed_register_function+0x38a>
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1c:	8c 01       	movw	r16, r24
    2d1e:	00 0f       	add	r16, r16
    2d20:	11 1f       	adc	r17, r17
    2d22:	08 0f       	add	r16, r24
    2d24:	19 1f       	adc	r17, r25
    2d26:	00 0f       	add	r16, r16
    2d28:	11 1f       	adc	r17, r17
    2d2a:	00 0f       	add	r16, r16
    2d2c:	11 1f       	adc	r17, r17
    2d2e:	c8 01       	movw	r24, r16
    2d30:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2d34:	4c 01       	movw	r8, r24
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	21 f4       	brne	.+8      	; 0x2d42 <tankIO_server_disableLed_register_function+0x230>
    2d3a:	8f ef       	ldi	r24, 0xFF	; 255
    2d3c:	9f ef       	ldi	r25, 0xFF	; 255
    2d3e:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	a8 01       	movw	r20, r16
    2d48:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    2d4c:	0e 81       	ldd	r16, Y+6	; 0x06
    2d4e:	1f 81       	ldd	r17, Y+7	; 0x07
    2d50:	6a 80       	ldd	r6, Y+2	; 0x02
    2d52:	7b 80       	ldd	r7, Y+3	; 0x03
    2d54:	73 01       	movw	r14, r6
    2d56:	ee 0c       	add	r14, r14
    2d58:	ff 1c       	adc	r15, r15
    2d5a:	08 94       	sec
    2d5c:	e1 08       	sbc	r14, r1
    2d5e:	f1 08       	sbc	r15, r1
    2d60:	c7 01       	movw	r24, r14
    2d62:	80 23       	and	r24, r16
    2d64:	91 23       	and	r25, r17
    2d66:	21 e0       	ldi	r18, 0x01	; 1
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <tankIO_server_disableLed_register_function+0x260>
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <tankIO_server_disableLed_register_function+0x26c>
    2d7a:	16 95       	lsr	r17
    2d7c:	07 95       	ror	r16
    2d7e:	8a 95       	dec	r24
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <tankIO_server_disableLed_register_function+0x268>
    2d82:	02 0f       	add	r16, r18
    2d84:	13 1f       	adc	r17, r19
    2d86:	1d 87       	std	Y+13, r17	; 0x0d
    2d88:	0c 87       	std	Y+12, r16	; 0x0c
    2d8a:	1f 86       	std	Y+15, r1	; 0x0f
    2d8c:	1e 86       	std	Y+14, r1	; 0x0e
    2d8e:	cc 24       	eor	r12, r12
    2d90:	dd 24       	eor	r13, r13
    2d92:	aa 24       	eor	r10, r10
    2d94:	bb 24       	eor	r11, r11
    2d96:	51 c0       	rjmp	.+162    	; 0x2e3a <tankIO_server_disableLed_register_function+0x328>
    2d98:	8c 0d       	add	r24, r12
    2d9a:	9d 1d       	adc	r25, r13
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	20 81       	ld	r18, Z
    2da0:	31 81       	ldd	r19, Z+1	; 0x01
    2da2:	40 c0       	rjmp	.+128    	; 0x2e24 <tankIO_server_disableLed_register_function+0x312>
    2da4:	d9 01       	movw	r26, r18
    2da6:	18 96       	adiw	r26, 0x08	; 8
    2da8:	5c 90       	ld	r5, X
    2daa:	18 97       	sbiw	r26, 0x08	; 8
    2dac:	19 96       	adiw	r26, 0x09	; 9
    2dae:	4c 90       	ld	r4, X
    2db0:	19 97       	sbiw	r26, 0x09	; 9
    2db2:	1e 96       	adiw	r26, 0x0e	; 14
    2db4:	8d 91       	ld	r24, X+
    2db6:	9c 91       	ld	r25, X
    2db8:	1f 97       	sbiw	r26, 0x0f	; 15
    2dba:	8e 21       	and	r24, r14
    2dbc:	9f 21       	and	r25, r15
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	ee 0f       	add	r30, r30
    2dc2:	ff 1f       	adc	r31, r31
    2dc4:	e8 0f       	add	r30, r24
    2dc6:	f9 1f       	adc	r31, r25
    2dc8:	ee 0f       	add	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	e8 0d       	add	r30, r8
    2dce:	f9 1d       	adc	r31, r9
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	93 83       	std	Z+3, r25	; 0x03
    2dd8:	82 83       	std	Z+2, r24	; 0x02
    2dda:	08 17       	cp	r16, r24
    2ddc:	19 07       	cpc	r17, r25
    2dde:	58 f4       	brcc	.+22     	; 0x2df6 <tankIO_server_disableLed_register_function+0x2e4>
    2de0:	4e 85       	ldd	r20, Y+14	; 0x0e
    2de2:	5f 85       	ldd	r21, Y+15	; 0x0f
    2de4:	4f 5f       	subi	r20, 0xFF	; 255
    2de6:	5f 4f       	sbci	r21, 0xFF	; 255
    2de8:	5f 87       	std	Y+15, r21	; 0x0f
    2dea:	4e 87       	std	Y+14, r20	; 0x0e
    2dec:	b8 01       	movw	r22, r16
    2dee:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    2df2:	75 83       	std	Z+5, r23	; 0x05
    2df4:	64 83       	std	Z+4, r22	; 0x04
    2df6:	d9 01       	movw	r26, r18
    2df8:	17 96       	adiw	r26, 0x07	; 7
    2dfa:	1c 92       	st	X, r1
    2dfc:	1e 92       	st	-X, r1
    2dfe:	16 97       	sbiw	r26, 0x06	; 6
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	19 96       	adiw	r26, 0x09	; 9
    2e06:	9c 93       	st	X, r25
    2e08:	8e 93       	st	-X, r24
    2e0a:	18 97       	sbiw	r26, 0x08	; 8
    2e0c:	00 97       	sbiw	r24, 0x00	; 0
    2e0e:	29 f0       	breq	.+10     	; 0x2e1a <tankIO_server_disableLed_register_function+0x308>
    2e10:	dc 01       	movw	r26, r24
    2e12:	17 96       	adiw	r26, 0x07	; 7
    2e14:	3c 93       	st	X, r19
    2e16:	2e 93       	st	-X, r18
    2e18:	16 97       	sbiw	r26, 0x06	; 6
    2e1a:	31 83       	std	Z+1, r19	; 0x01
    2e1c:	20 83       	st	Z, r18
    2e1e:	c2 01       	movw	r24, r4
    2e20:	29 2f       	mov	r18, r25
    2e22:	34 2d       	mov	r19, r4
    2e24:	21 15       	cp	r18, r1
    2e26:	31 05       	cpc	r19, r1
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <tankIO_server_disableLed_register_function+0x31a>
    2e2a:	bc cf       	rjmp	.-136    	; 0x2da4 <tankIO_server_disableLed_register_function+0x292>
    2e2c:	08 94       	sec
    2e2e:	a1 1c       	adc	r10, r1
    2e30:	b1 1c       	adc	r11, r1
    2e32:	e6 e0       	ldi	r30, 0x06	; 6
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	ce 0e       	add	r12, r30
    2e38:	df 1e       	adc	r13, r31
    2e3a:	88 81       	ld	r24, Y
    2e3c:	99 81       	ldd	r25, Y+1	; 0x01
    2e3e:	a6 14       	cp	r10, r6
    2e40:	b7 04       	cpc	r11, r7
    2e42:	08 f4       	brcc	.+2      	; 0x2e46 <tankIO_server_disableLed_register_function+0x334>
    2e44:	a9 cf       	rjmp	.-174    	; 0x2d98 <tankIO_server_disableLed_register_function+0x286>
    2e46:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    2e4a:	e0 91 47 02 	lds	r30, 0x0247
    2e4e:	f0 91 48 02 	lds	r31, 0x0248
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	93 83       	std	Z+3, r25	; 0x03
    2e5c:	82 83       	std	Z+2, r24	; 0x02
    2e5e:	84 81       	ldd	r24, Z+4	; 0x04
    2e60:	95 81       	ldd	r25, Z+5	; 0x05
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	95 83       	std	Z+5, r25	; 0x05
    2e66:	84 83       	std	Z+4, r24	; 0x04
    2e68:	91 82       	std	Z+1, r9	; 0x01
    2e6a:	80 82       	st	Z, r8
    2e6c:	86 81       	ldd	r24, Z+6	; 0x06
    2e6e:	97 81       	ldd	r25, Z+7	; 0x07
    2e70:	96 95       	lsr	r25
    2e72:	87 95       	ror	r24
    2e74:	26 85       	ldd	r18, Z+14	; 0x0e
    2e76:	37 85       	ldd	r19, Z+15	; 0x0f
    2e78:	82 17       	cp	r24, r18
    2e7a:	93 07       	cpc	r25, r19
    2e7c:	20 f4       	brcc	.+8      	; 0x2e86 <tankIO_server_disableLed_register_function+0x374>
    2e7e:	80 89       	ldd	r24, Z+16	; 0x10
    2e80:	91 89       	ldd	r25, Z+17	; 0x11
    2e82:	01 96       	adiw	r24, 0x01	; 1
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <tankIO_server_disableLed_register_function+0x378>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	91 8b       	std	Z+17, r25	; 0x11
    2e8c:	80 8b       	std	Z+16, r24	; 0x10
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	91 05       	cpc	r25, r1
    2e92:	20 f0       	brcs	.+8      	; 0x2e9c <tankIO_server_disableLed_register_function+0x38a>
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	93 8b       	std	Z+19, r25	; 0x13
    2e9a:	82 8b       	std	Z+18, r24	; 0x12
    2e9c:	df 91       	pop	r29
    2e9e:	cf 91       	pop	r28
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	ff 90       	pop	r15
    2ea6:	ef 90       	pop	r14
    2ea8:	df 90       	pop	r13
    2eaa:	cf 90       	pop	r12
    2eac:	bf 90       	pop	r11
    2eae:	af 90       	pop	r10
    2eb0:	9f 90       	pop	r9
    2eb2:	8f 90       	pop	r8
    2eb4:	7f 90       	pop	r7
    2eb6:	6f 90       	pop	r6
    2eb8:	5f 90       	pop	r5
    2eba:	4f 90       	pop	r4
    2ebc:	08 95       	ret

00002ebe <tankIO_server_setLed>:

void tankIO_server_setLed(SetLedParam *param, uint16_t size) {
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	ec 01       	movw	r28, r24
	setLed(toLed(param->led), param->value);
    2ec4:	68 81       	ld	r22, Y
    2ec6:	79 81       	ldd	r23, Y+1	; 0x01
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <toLed>
    2ece:	6b 81       	ldd	r22, Y+3	; 0x03
    2ed0:	7c 81       	ldd	r23, Y+4	; 0x04
    2ed2:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <setLed>
}
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	08 95       	ret

00002edc <tankIO_server_setLed_handler>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_setLed, TANK_IO_setLed, SetLedParam)
    2edc:	cf 93       	push	r28
    2ede:	df 93       	push	r29
    2ee0:	ec 01       	movw	r28, r24
    2ee2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ee4:	7b 81       	ldd	r23, Y+3	; 0x03
    2ee6:	88 81       	ld	r24, Y
    2ee8:	99 81       	ldd	r25, Y+1	; 0x01
    2eea:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <tankIO_server_setLed>
    2eee:	1b 82       	std	Y+3, r1	; 0x03
    2ef0:	1a 82       	std	Y+2, r1	; 0x02
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	08 95       	ret

00002ef8 <tankIO_server_setLed_register_function>:
    2ef8:	4f 92       	push	r4
    2efa:	5f 92       	push	r5
    2efc:	6f 92       	push	r6
    2efe:	7f 92       	push	r7
    2f00:	8f 92       	push	r8
    2f02:	9f 92       	push	r9
    2f04:	af 92       	push	r10
    2f06:	bf 92       	push	r11
    2f08:	cf 92       	push	r12
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	10 92 5f 02 	sts	0x025F, r1
    2f1c:	10 92 5e 02 	sts	0x025E, r1
    2f20:	e7 e5       	ldi	r30, 0x57	; 87
    2f22:	f2 e0       	ldi	r31, 0x02	; 2
    2f24:	f0 93 65 02 	sts	0x0265, r31
    2f28:	e0 93 64 02 	sts	0x0264, r30
    2f2c:	82 e0       	ldi	r24, 0x02	; 2
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	90 93 67 02 	sts	0x0267, r25
    2f34:	80 93 66 02 	sts	0x0266, r24
    2f38:	a0 91 9c 03 	lds	r26, 0x039C
    2f3c:	b0 91 9d 03 	lds	r27, 0x039D
    2f40:	8f 01       	movw	r16, r30
    2f42:	0d 5f       	subi	r16, 0xFD	; 253
    2f44:	1f 4f       	sbci	r17, 0xFF	; 255
    2f46:	10 97       	sbiw	r26, 0x00	; 0
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <tankIO_server_setLed_register_function+0x54>
    2f4a:	49 c0       	rjmp	.+146    	; 0x2fde <tankIO_server_setLed_register_function+0xe6>
    2f4c:	f0 93 9d 03 	sts	0x039D, r31
    2f50:	e0 93 9c 03 	sts	0x039C, r30
    2f54:	10 92 5d 02 	sts	0x025D, r1
    2f58:	10 92 5c 02 	sts	0x025C, r1
    2f5c:	88 e1       	ldi	r24, 0x18	; 24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2f64:	90 93 5b 02 	sts	0x025B, r25
    2f68:	80 93 5a 02 	sts	0x025A, r24
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <tankIO_server_setLed_register_function+0x7a>
    2f70:	d7 c0       	rjmp	.+430    	; 0x3120 <tankIO_server_setLed_register_function+0x228>
    2f72:	e8 2f       	mov	r30, r24
    2f74:	f9 2f       	mov	r31, r25
    2f76:	88 e1       	ldi	r24, 0x18	; 24
    2f78:	df 01       	movw	r26, r30
    2f7a:	1d 92       	st	X+, r1
    2f7c:	8a 95       	dec	r24
    2f7e:	e9 f7       	brne	.-6      	; 0x2f7a <tankIO_server_setLed_register_function+0x82>
    2f80:	c0 91 5a 02 	lds	r28, 0x025A
    2f84:	d0 91 5b 02 	lds	r29, 0x025B
    2f88:	19 87       	std	Y+9, r17	; 0x09
    2f8a:	08 87       	std	Y+8, r16	; 0x08
    2f8c:	80 e2       	ldi	r24, 0x20	; 32
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	9b 83       	std	Y+3, r25	; 0x03
    2f92:	8a 83       	std	Y+2, r24	; 0x02
    2f94:	85 e0       	ldi	r24, 0x05	; 5
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9d 83       	std	Y+5, r25	; 0x05
    2f9a:	8c 83       	std	Y+4, r24	; 0x04
    2f9c:	83 e0       	ldi	r24, 0x03	; 3
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	9b 87       	std	Y+11, r25	; 0x0b
    2fa2:	8a 87       	std	Y+10, r24	; 0x0a
    2fa4:	80 ec       	ldi	r24, 0xC0	; 192
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    2fac:	99 83       	std	Y+1, r25	; 0x01
    2fae:	88 83       	st	Y, r24
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <tankIO_server_setLed_register_function+0xbe>
    2fb4:	b5 c0       	rjmp	.+362    	; 0x3120 <tankIO_server_setLed_register_function+0x228>
    2fb6:	e8 2f       	mov	r30, r24
    2fb8:	f9 2f       	mov	r31, r25
    2fba:	80 ec       	ldi	r24, 0xC0	; 192
    2fbc:	df 01       	movw	r26, r30
    2fbe:	1d 92       	st	X+, r1
    2fc0:	8a 95       	dec	r24
    2fc2:	e9 f7       	brne	.-6      	; 0x2fbe <tankIO_server_setLed_register_function+0xc6>
    2fc4:	e0 91 5a 02 	lds	r30, 0x025A
    2fc8:	f0 91 5b 02 	lds	r31, 0x025B
    2fcc:	81 ee       	ldi	r24, 0xE1	; 225
    2fce:	9f e1       	ldi	r25, 0x1F	; 31
    2fd0:	a1 e1       	ldi	r26, 0x11	; 17
    2fd2:	b0 ea       	ldi	r27, 0xA0	; 160
    2fd4:	84 8b       	std	Z+20, r24	; 0x14
    2fd6:	95 8b       	std	Z+21, r25	; 0x15
    2fd8:	a6 8b       	std	Z+22, r26	; 0x16
    2fda:	b7 8b       	std	Z+23, r27	; 0x17
    2fdc:	16 c0       	rjmp	.+44     	; 0x300a <tankIO_server_setLed_register_function+0x112>
    2fde:	13 96       	adiw	r26, 0x03	; 3
    2fe0:	0d 90       	ld	r0, X+
    2fe2:	bc 91       	ld	r27, X
    2fe4:	a0 2d       	mov	r26, r0
    2fe6:	18 96       	adiw	r26, 0x08	; 8
    2fe8:	cd 91       	ld	r28, X+
    2fea:	dc 91       	ld	r29, X
    2fec:	19 97       	sbiw	r26, 0x09	; 9
    2fee:	fd 83       	std	Y+5, r31	; 0x05
    2ff0:	ec 83       	std	Y+4, r30	; 0x04
    2ff2:	1a 96       	adiw	r26, 0x0a	; 10
    2ff4:	8d 91       	ld	r24, X+
    2ff6:	9c 91       	ld	r25, X
    2ff8:	1b 97       	sbiw	r26, 0x0b	; 11
    2ffa:	c8 1b       	sub	r28, r24
    2ffc:	d9 0b       	sbc	r29, r25
    2ffe:	d6 83       	std	Z+6, r29	; 0x06
    3000:	c5 83       	std	Z+5, r28	; 0x05
    3002:	19 96       	adiw	r26, 0x09	; 9
    3004:	1c 93       	st	X, r17
    3006:	0e 93       	st	-X, r16
    3008:	18 97       	sbiw	r26, 0x08	; 8
    300a:	e0 91 9c 03 	lds	r30, 0x039C
    300e:	f0 91 9d 03 	lds	r31, 0x039D
    3012:	c3 81       	ldd	r28, Z+3	; 0x03
    3014:	d4 81       	ldd	r29, Z+4	; 0x04
    3016:	8e 81       	ldd	r24, Y+6	; 0x06
    3018:	9f 81       	ldd	r25, Y+7	; 0x07
    301a:	01 96       	adiw	r24, 0x01	; 1
    301c:	9f 83       	std	Y+7, r25	; 0x07
    301e:	8e 83       	std	Y+6, r24	; 0x06
    3020:	4a e5       	ldi	r20, 0x5A	; 90
    3022:	52 e0       	ldi	r21, 0x02	; 2
    3024:	d0 93 5b 02 	sts	0x025B, r29
    3028:	c0 93 5a 02 	sts	0x025A, r28
    302c:	da 01       	movw	r26, r20
    302e:	13 97       	sbiw	r26, 0x03	; 3
    3030:	20 91 57 02 	lds	r18, 0x0257
    3034:	33 27       	eor	r19, r19
    3036:	27 fd       	sbrc	r18, 7
    3038:	30 95       	com	r19
    303a:	c9 01       	movw	r24, r18
    303c:	96 95       	lsr	r25
    303e:	87 95       	ror	r24
    3040:	96 95       	lsr	r25
    3042:	87 95       	ror	r24
    3044:	b9 01       	movw	r22, r18
    3046:	15 e0       	ldi	r17, 0x05	; 5
    3048:	66 0f       	add	r22, r22
    304a:	77 1f       	adc	r23, r23
    304c:	1a 95       	dec	r17
    304e:	e1 f7       	brne	.-8      	; 0x3048 <tankIO_server_setLed_register_function+0x150>
    3050:	86 0f       	add	r24, r22
    3052:	97 1f       	adc	r25, r23
    3054:	60 91 58 02 	lds	r22, 0x0258
    3058:	77 27       	eor	r23, r23
    305a:	67 fd       	sbrc	r22, 7
    305c:	70 95       	com	r23
    305e:	86 0f       	add	r24, r22
    3060:	97 1f       	adc	r25, r23
    3062:	82 27       	eor	r24, r18
    3064:	93 27       	eor	r25, r19
    3066:	52 96       	adiw	r26, 0x12	; 18
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
    306c:	51 97       	sbiw	r26, 0x11	; 17
    306e:	03 80       	ldd	r0, Z+3	; 0x03
    3070:	f4 81       	ldd	r31, Z+4	; 0x04
    3072:	e0 2d       	mov	r30, r0
    3074:	22 81       	ldd	r18, Z+2	; 0x02
    3076:	33 81       	ldd	r19, Z+3	; 0x03
    3078:	21 50       	subi	r18, 0x01	; 1
    307a:	30 40       	sbci	r19, 0x00	; 0
    307c:	28 23       	and	r18, r24
    307e:	39 23       	and	r19, r25
    3080:	c9 01       	movw	r24, r18
    3082:	88 0f       	add	r24, r24
    3084:	99 1f       	adc	r25, r25
    3086:	82 0f       	add	r24, r18
    3088:	93 1f       	adc	r25, r19
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	01 90       	ld	r0, Z+
    3090:	f0 81       	ld	r31, Z
    3092:	e0 2d       	mov	r30, r0
    3094:	e8 0f       	add	r30, r24
    3096:	f9 1f       	adc	r31, r25
    3098:	82 81       	ldd	r24, Z+2	; 0x02
    309a:	93 81       	ldd	r25, Z+3	; 0x03
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	93 83       	std	Z+3, r25	; 0x03
    30a0:	82 83       	std	Z+2, r24	; 0x02
    30a2:	20 81       	ld	r18, Z
    30a4:	31 81       	ldd	r19, Z+1	; 0x01
    30a6:	1c 96       	adiw	r26, 0x0c	; 12
    30a8:	3c 93       	st	X, r19
    30aa:	2e 93       	st	-X, r18
    30ac:	1b 97       	sbiw	r26, 0x0b	; 11
    30ae:	1a 96       	adiw	r26, 0x0a	; 10
    30b0:	1c 92       	st	X, r1
    30b2:	1e 92       	st	-X, r1
    30b4:	19 97       	sbiw	r26, 0x09	; 9
    30b6:	21 15       	cp	r18, r1
    30b8:	31 05       	cpc	r19, r1
    30ba:	29 f0       	breq	.+10     	; 0x30c6 <tankIO_server_setLed_register_function+0x1ce>
    30bc:	d9 01       	movw	r26, r18
    30be:	17 96       	adiw	r26, 0x07	; 7
    30c0:	5c 93       	st	X, r21
    30c2:	4e 93       	st	-X, r20
    30c4:	16 97       	sbiw	r26, 0x06	; 6
    30c6:	2a e5       	ldi	r18, 0x5A	; 90
    30c8:	32 e0       	ldi	r19, 0x02	; 2
    30ca:	31 83       	std	Z+1, r19	; 0x01
    30cc:	20 83       	st	Z, r18
    30ce:	24 81       	ldd	r18, Z+4	; 0x04
    30d0:	35 81       	ldd	r19, Z+5	; 0x05
    30d2:	2f 5f       	subi	r18, 0xFF	; 255
    30d4:	3f 4f       	sbci	r19, 0xFF	; 255
    30d6:	a9 01       	movw	r20, r18
    30d8:	44 0f       	add	r20, r20
    30da:	55 1f       	adc	r21, r21
    30dc:	f3 e0       	ldi	r31, 0x03	; 3
    30de:	22 0f       	add	r18, r18
    30e0:	33 1f       	adc	r19, r19
    30e2:	fa 95       	dec	r31
    30e4:	e1 f7       	brne	.-8      	; 0x30de <tankIO_server_setLed_register_function+0x1e6>
    30e6:	42 0f       	add	r20, r18
    30e8:	53 1f       	adc	r21, r19
    30ea:	84 17       	cp	r24, r20
    30ec:	95 07       	cpc	r25, r21
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <tankIO_server_setLed_register_function+0x1fa>
    30f0:	c8 c0       	rjmp	.+400    	; 0x3282 <tankIO_server_setLed_register_function+0x38a>
    30f2:	8a 89       	ldd	r24, Y+18	; 0x12
    30f4:	9b 89       	ldd	r25, Y+19	; 0x13
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	91 05       	cpc	r25, r1
    30fa:	09 f4       	brne	.+2      	; 0x30fe <tankIO_server_setLed_register_function+0x206>
    30fc:	c2 c0       	rjmp	.+388    	; 0x3282 <tankIO_server_setLed_register_function+0x38a>
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	9b 81       	ldd	r25, Y+3	; 0x03
    3102:	8c 01       	movw	r16, r24
    3104:	00 0f       	add	r16, r16
    3106:	11 1f       	adc	r17, r17
    3108:	08 0f       	add	r16, r24
    310a:	19 1f       	adc	r17, r25
    310c:	00 0f       	add	r16, r16
    310e:	11 1f       	adc	r17, r17
    3110:	00 0f       	add	r16, r16
    3112:	11 1f       	adc	r17, r17
    3114:	c8 01       	movw	r24, r16
    3116:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    311a:	4c 01       	movw	r8, r24
    311c:	00 97       	sbiw	r24, 0x00	; 0
    311e:	21 f4       	brne	.+8      	; 0x3128 <tankIO_server_setLed_register_function+0x230>
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	9f ef       	ldi	r25, 0xFF	; 255
    3124:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	a8 01       	movw	r20, r16
    312e:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    3132:	0e 81       	ldd	r16, Y+6	; 0x06
    3134:	1f 81       	ldd	r17, Y+7	; 0x07
    3136:	6a 80       	ldd	r6, Y+2	; 0x02
    3138:	7b 80       	ldd	r7, Y+3	; 0x03
    313a:	73 01       	movw	r14, r6
    313c:	ee 0c       	add	r14, r14
    313e:	ff 1c       	adc	r15, r15
    3140:	08 94       	sec
    3142:	e1 08       	sbc	r14, r1
    3144:	f1 08       	sbc	r15, r1
    3146:	c7 01       	movw	r24, r14
    3148:	80 23       	and	r24, r16
    314a:	91 23       	and	r25, r17
    314c:	21 e0       	ldi	r18, 0x01	; 1
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	11 f4       	brne	.+4      	; 0x3158 <tankIO_server_setLed_register_function+0x260>
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	9d 81       	ldd	r25, Y+5	; 0x05
    315c:	01 96       	adiw	r24, 0x01	; 1
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <tankIO_server_setLed_register_function+0x26c>
    3160:	16 95       	lsr	r17
    3162:	07 95       	ror	r16
    3164:	8a 95       	dec	r24
    3166:	e2 f7       	brpl	.-8      	; 0x3160 <tankIO_server_setLed_register_function+0x268>
    3168:	02 0f       	add	r16, r18
    316a:	13 1f       	adc	r17, r19
    316c:	1d 87       	std	Y+13, r17	; 0x0d
    316e:	0c 87       	std	Y+12, r16	; 0x0c
    3170:	1f 86       	std	Y+15, r1	; 0x0f
    3172:	1e 86       	std	Y+14, r1	; 0x0e
    3174:	cc 24       	eor	r12, r12
    3176:	dd 24       	eor	r13, r13
    3178:	aa 24       	eor	r10, r10
    317a:	bb 24       	eor	r11, r11
    317c:	51 c0       	rjmp	.+162    	; 0x3220 <tankIO_server_setLed_register_function+0x328>
    317e:	8c 0d       	add	r24, r12
    3180:	9d 1d       	adc	r25, r13
    3182:	fc 01       	movw	r30, r24
    3184:	20 81       	ld	r18, Z
    3186:	31 81       	ldd	r19, Z+1	; 0x01
    3188:	40 c0       	rjmp	.+128    	; 0x320a <tankIO_server_setLed_register_function+0x312>
    318a:	d9 01       	movw	r26, r18
    318c:	18 96       	adiw	r26, 0x08	; 8
    318e:	5c 90       	ld	r5, X
    3190:	18 97       	sbiw	r26, 0x08	; 8
    3192:	19 96       	adiw	r26, 0x09	; 9
    3194:	4c 90       	ld	r4, X
    3196:	19 97       	sbiw	r26, 0x09	; 9
    3198:	1e 96       	adiw	r26, 0x0e	; 14
    319a:	8d 91       	ld	r24, X+
    319c:	9c 91       	ld	r25, X
    319e:	1f 97       	sbiw	r26, 0x0f	; 15
    31a0:	8e 21       	and	r24, r14
    31a2:	9f 21       	and	r25, r15
    31a4:	fc 01       	movw	r30, r24
    31a6:	ee 0f       	add	r30, r30
    31a8:	ff 1f       	adc	r31, r31
    31aa:	e8 0f       	add	r30, r24
    31ac:	f9 1f       	adc	r31, r25
    31ae:	ee 0f       	add	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	e8 0d       	add	r30, r8
    31b4:	f9 1d       	adc	r31, r9
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	93 81       	ldd	r25, Z+3	; 0x03
    31ba:	01 96       	adiw	r24, 0x01	; 1
    31bc:	93 83       	std	Z+3, r25	; 0x03
    31be:	82 83       	std	Z+2, r24	; 0x02
    31c0:	08 17       	cp	r16, r24
    31c2:	19 07       	cpc	r17, r25
    31c4:	58 f4       	brcc	.+22     	; 0x31dc <tankIO_server_setLed_register_function+0x2e4>
    31c6:	4e 85       	ldd	r20, Y+14	; 0x0e
    31c8:	5f 85       	ldd	r21, Y+15	; 0x0f
    31ca:	4f 5f       	subi	r20, 0xFF	; 255
    31cc:	5f 4f       	sbci	r21, 0xFF	; 255
    31ce:	5f 87       	std	Y+15, r21	; 0x0f
    31d0:	4e 87       	std	Y+14, r20	; 0x0e
    31d2:	b8 01       	movw	r22, r16
    31d4:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    31d8:	75 83       	std	Z+5, r23	; 0x05
    31da:	64 83       	std	Z+4, r22	; 0x04
    31dc:	d9 01       	movw	r26, r18
    31de:	17 96       	adiw	r26, 0x07	; 7
    31e0:	1c 92       	st	X, r1
    31e2:	1e 92       	st	-X, r1
    31e4:	16 97       	sbiw	r26, 0x06	; 6
    31e6:	80 81       	ld	r24, Z
    31e8:	91 81       	ldd	r25, Z+1	; 0x01
    31ea:	19 96       	adiw	r26, 0x09	; 9
    31ec:	9c 93       	st	X, r25
    31ee:	8e 93       	st	-X, r24
    31f0:	18 97       	sbiw	r26, 0x08	; 8
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	29 f0       	breq	.+10     	; 0x3200 <tankIO_server_setLed_register_function+0x308>
    31f6:	dc 01       	movw	r26, r24
    31f8:	17 96       	adiw	r26, 0x07	; 7
    31fa:	3c 93       	st	X, r19
    31fc:	2e 93       	st	-X, r18
    31fe:	16 97       	sbiw	r26, 0x06	; 6
    3200:	31 83       	std	Z+1, r19	; 0x01
    3202:	20 83       	st	Z, r18
    3204:	c2 01       	movw	r24, r4
    3206:	29 2f       	mov	r18, r25
    3208:	34 2d       	mov	r19, r4
    320a:	21 15       	cp	r18, r1
    320c:	31 05       	cpc	r19, r1
    320e:	09 f0       	breq	.+2      	; 0x3212 <tankIO_server_setLed_register_function+0x31a>
    3210:	bc cf       	rjmp	.-136    	; 0x318a <tankIO_server_setLed_register_function+0x292>
    3212:	08 94       	sec
    3214:	a1 1c       	adc	r10, r1
    3216:	b1 1c       	adc	r11, r1
    3218:	e6 e0       	ldi	r30, 0x06	; 6
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	ce 0e       	add	r12, r30
    321e:	df 1e       	adc	r13, r31
    3220:	88 81       	ld	r24, Y
    3222:	99 81       	ldd	r25, Y+1	; 0x01
    3224:	a6 14       	cp	r10, r6
    3226:	b7 04       	cpc	r11, r7
    3228:	08 f4       	brcc	.+2      	; 0x322c <tankIO_server_setLed_register_function+0x334>
    322a:	a9 cf       	rjmp	.-174    	; 0x317e <tankIO_server_setLed_register_function+0x286>
    322c:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    3230:	e0 91 5a 02 	lds	r30, 0x025A
    3234:	f0 91 5b 02 	lds	r31, 0x025B
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	93 81       	ldd	r25, Z+3	; 0x03
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	93 83       	std	Z+3, r25	; 0x03
    3242:	82 83       	std	Z+2, r24	; 0x02
    3244:	84 81       	ldd	r24, Z+4	; 0x04
    3246:	95 81       	ldd	r25, Z+5	; 0x05
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	95 83       	std	Z+5, r25	; 0x05
    324c:	84 83       	std	Z+4, r24	; 0x04
    324e:	91 82       	std	Z+1, r9	; 0x01
    3250:	80 82       	st	Z, r8
    3252:	86 81       	ldd	r24, Z+6	; 0x06
    3254:	97 81       	ldd	r25, Z+7	; 0x07
    3256:	96 95       	lsr	r25
    3258:	87 95       	ror	r24
    325a:	26 85       	ldd	r18, Z+14	; 0x0e
    325c:	37 85       	ldd	r19, Z+15	; 0x0f
    325e:	82 17       	cp	r24, r18
    3260:	93 07       	cpc	r25, r19
    3262:	20 f4       	brcc	.+8      	; 0x326c <tankIO_server_setLed_register_function+0x374>
    3264:	80 89       	ldd	r24, Z+16	; 0x10
    3266:	91 89       	ldd	r25, Z+17	; 0x11
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <tankIO_server_setLed_register_function+0x378>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	91 8b       	std	Z+17, r25	; 0x11
    3272:	80 8b       	std	Z+16, r24	; 0x10
    3274:	82 30       	cpi	r24, 0x02	; 2
    3276:	91 05       	cpc	r25, r1
    3278:	20 f0       	brcs	.+8      	; 0x3282 <tankIO_server_setLed_register_function+0x38a>
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	93 8b       	std	Z+19, r25	; 0x13
    3280:	82 8b       	std	Z+18, r24	; 0x12
    3282:	df 91       	pop	r29
    3284:	cf 91       	pop	r28
    3286:	1f 91       	pop	r17
    3288:	0f 91       	pop	r16
    328a:	ff 90       	pop	r15
    328c:	ef 90       	pop	r14
    328e:	df 90       	pop	r13
    3290:	cf 90       	pop	r12
    3292:	bf 90       	pop	r11
    3294:	af 90       	pop	r10
    3296:	9f 90       	pop	r9
    3298:	8f 90       	pop	r8
    329a:	7f 90       	pop	r7
    329c:	6f 90       	pop	r6
    329e:	5f 90       	pop	r5
    32a0:	4f 90       	pop	r4
    32a2:	08 95       	ret

000032a4 <tankIO_server_setLeds>:

// ==
// **Leds
// ==

void tankIO_server_setLeds(MaskedLeds *leds, uint16_t size) {
    32a4:	dc 01       	movw	r26, r24
	setLeds(toLedGroup(leds->leds), leds->mask);
    32a6:	ed 91       	ld	r30, X+
    32a8:	fc 91       	ld	r31, X
    32aa:	11 97       	sbiw	r26, 0x01	; 1
    32ac:	e8 30       	cpi	r30, 0x08	; 8
    32ae:	f1 05       	cpc	r31, r1
    32b0:	38 f4       	brcc	.+14     	; 0x32c0 <tankIO_server_setLeds+0x1c>
    32b2:	ee 0f       	add	r30, r30
    32b4:	ff 1f       	adc	r31, r31
    32b6:	e2 59       	subi	r30, 0x92	; 146
    32b8:	fc 4f       	sbci	r31, 0xFC	; 252
    32ba:	80 81       	ld	r24, Z
    32bc:	91 81       	ldd	r25, Z+1	; 0x01
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <tankIO_server_setLeds+0x20>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	12 96       	adiw	r26, 0x02	; 2
    32c6:	6d 91       	ld	r22, X+
    32c8:	7c 91       	ld	r23, X
    32ca:	13 97       	sbiw	r26, 0x03	; 3
    32cc:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
}
    32d0:	08 95       	ret

000032d2 <tankIO_server_setLeds_handler>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_setLeds, TANK_IO_setLeds, MaskedLeds)
    32d2:	cf 93       	push	r28
    32d4:	df 93       	push	r29
    32d6:	ec 01       	movw	r28, r24
    32d8:	6a 81       	ldd	r22, Y+2	; 0x02
    32da:	7b 81       	ldd	r23, Y+3	; 0x03
    32dc:	88 81       	ld	r24, Y
    32de:	99 81       	ldd	r25, Y+1	; 0x01
    32e0:	0e 94 52 19 	call	0x32a4	; 0x32a4 <tankIO_server_setLeds>
    32e4:	1b 82       	std	Y+3, r1	; 0x03
    32e6:	1a 82       	std	Y+2, r1	; 0x02
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	08 95       	ret

000032ee <tankIO_server_setLeds_register_function>:
    32ee:	4f 92       	push	r4
    32f0:	5f 92       	push	r5
    32f2:	6f 92       	push	r6
    32f4:	7f 92       	push	r7
    32f6:	8f 92       	push	r8
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	10 92 72 02 	sts	0x0272, r1
    3312:	10 92 71 02 	sts	0x0271, r1
    3316:	ea e6       	ldi	r30, 0x6A	; 106
    3318:	f2 e0       	ldi	r31, 0x02	; 2
    331a:	f0 93 78 02 	sts	0x0278, r31
    331e:	e0 93 77 02 	sts	0x0277, r30
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	90 93 7a 02 	sts	0x027A, r25
    332a:	80 93 79 02 	sts	0x0279, r24
    332e:	a0 91 9c 03 	lds	r26, 0x039C
    3332:	b0 91 9d 03 	lds	r27, 0x039D
    3336:	8f 01       	movw	r16, r30
    3338:	0d 5f       	subi	r16, 0xFD	; 253
    333a:	1f 4f       	sbci	r17, 0xFF	; 255
    333c:	10 97       	sbiw	r26, 0x00	; 0
    333e:	09 f0       	breq	.+2      	; 0x3342 <tankIO_server_setLeds_register_function+0x54>
    3340:	49 c0       	rjmp	.+146    	; 0x33d4 <tankIO_server_setLeds_register_function+0xe6>
    3342:	f0 93 9d 03 	sts	0x039D, r31
    3346:	e0 93 9c 03 	sts	0x039C, r30
    334a:	10 92 70 02 	sts	0x0270, r1
    334e:	10 92 6f 02 	sts	0x026F, r1
    3352:	88 e1       	ldi	r24, 0x18	; 24
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    335a:	90 93 6e 02 	sts	0x026E, r25
    335e:	80 93 6d 02 	sts	0x026D, r24
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	09 f4       	brne	.+2      	; 0x3368 <tankIO_server_setLeds_register_function+0x7a>
    3366:	d7 c0       	rjmp	.+430    	; 0x3516 <tankIO_server_setLeds_register_function+0x228>
    3368:	e8 2f       	mov	r30, r24
    336a:	f9 2f       	mov	r31, r25
    336c:	88 e1       	ldi	r24, 0x18	; 24
    336e:	df 01       	movw	r26, r30
    3370:	1d 92       	st	X+, r1
    3372:	8a 95       	dec	r24
    3374:	e9 f7       	brne	.-6      	; 0x3370 <tankIO_server_setLeds_register_function+0x82>
    3376:	c0 91 6d 02 	lds	r28, 0x026D
    337a:	d0 91 6e 02 	lds	r29, 0x026E
    337e:	19 87       	std	Y+9, r17	; 0x09
    3380:	08 87       	std	Y+8, r16	; 0x08
    3382:	80 e2       	ldi	r24, 0x20	; 32
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9b 83       	std	Y+3, r25	; 0x03
    3388:	8a 83       	std	Y+2, r24	; 0x02
    338a:	85 e0       	ldi	r24, 0x05	; 5
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	9d 83       	std	Y+5, r25	; 0x05
    3390:	8c 83       	std	Y+4, r24	; 0x04
    3392:	83 e0       	ldi	r24, 0x03	; 3
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	9b 87       	std	Y+11, r25	; 0x0b
    3398:	8a 87       	std	Y+10, r24	; 0x0a
    339a:	80 ec       	ldi	r24, 0xC0	; 192
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    33a2:	99 83       	std	Y+1, r25	; 0x01
    33a4:	88 83       	st	Y, r24
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	09 f4       	brne	.+2      	; 0x33ac <tankIO_server_setLeds_register_function+0xbe>
    33aa:	b5 c0       	rjmp	.+362    	; 0x3516 <tankIO_server_setLeds_register_function+0x228>
    33ac:	e8 2f       	mov	r30, r24
    33ae:	f9 2f       	mov	r31, r25
    33b0:	80 ec       	ldi	r24, 0xC0	; 192
    33b2:	df 01       	movw	r26, r30
    33b4:	1d 92       	st	X+, r1
    33b6:	8a 95       	dec	r24
    33b8:	e9 f7       	brne	.-6      	; 0x33b4 <tankIO_server_setLeds_register_function+0xc6>
    33ba:	e0 91 6d 02 	lds	r30, 0x026D
    33be:	f0 91 6e 02 	lds	r31, 0x026E
    33c2:	81 ee       	ldi	r24, 0xE1	; 225
    33c4:	9f e1       	ldi	r25, 0x1F	; 31
    33c6:	a1 e1       	ldi	r26, 0x11	; 17
    33c8:	b0 ea       	ldi	r27, 0xA0	; 160
    33ca:	84 8b       	std	Z+20, r24	; 0x14
    33cc:	95 8b       	std	Z+21, r25	; 0x15
    33ce:	a6 8b       	std	Z+22, r26	; 0x16
    33d0:	b7 8b       	std	Z+23, r27	; 0x17
    33d2:	16 c0       	rjmp	.+44     	; 0x3400 <tankIO_server_setLeds_register_function+0x112>
    33d4:	13 96       	adiw	r26, 0x03	; 3
    33d6:	0d 90       	ld	r0, X+
    33d8:	bc 91       	ld	r27, X
    33da:	a0 2d       	mov	r26, r0
    33dc:	18 96       	adiw	r26, 0x08	; 8
    33de:	cd 91       	ld	r28, X+
    33e0:	dc 91       	ld	r29, X
    33e2:	19 97       	sbiw	r26, 0x09	; 9
    33e4:	fd 83       	std	Y+5, r31	; 0x05
    33e6:	ec 83       	std	Y+4, r30	; 0x04
    33e8:	1a 96       	adiw	r26, 0x0a	; 10
    33ea:	8d 91       	ld	r24, X+
    33ec:	9c 91       	ld	r25, X
    33ee:	1b 97       	sbiw	r26, 0x0b	; 11
    33f0:	c8 1b       	sub	r28, r24
    33f2:	d9 0b       	sbc	r29, r25
    33f4:	d6 83       	std	Z+6, r29	; 0x06
    33f6:	c5 83       	std	Z+5, r28	; 0x05
    33f8:	19 96       	adiw	r26, 0x09	; 9
    33fa:	1c 93       	st	X, r17
    33fc:	0e 93       	st	-X, r16
    33fe:	18 97       	sbiw	r26, 0x08	; 8
    3400:	e0 91 9c 03 	lds	r30, 0x039C
    3404:	f0 91 9d 03 	lds	r31, 0x039D
    3408:	c3 81       	ldd	r28, Z+3	; 0x03
    340a:	d4 81       	ldd	r29, Z+4	; 0x04
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	9f 81       	ldd	r25, Y+7	; 0x07
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	9f 83       	std	Y+7, r25	; 0x07
    3414:	8e 83       	std	Y+6, r24	; 0x06
    3416:	4d e6       	ldi	r20, 0x6D	; 109
    3418:	52 e0       	ldi	r21, 0x02	; 2
    341a:	d0 93 6e 02 	sts	0x026E, r29
    341e:	c0 93 6d 02 	sts	0x026D, r28
    3422:	da 01       	movw	r26, r20
    3424:	13 97       	sbiw	r26, 0x03	; 3
    3426:	20 91 6a 02 	lds	r18, 0x026A
    342a:	33 27       	eor	r19, r19
    342c:	27 fd       	sbrc	r18, 7
    342e:	30 95       	com	r19
    3430:	c9 01       	movw	r24, r18
    3432:	96 95       	lsr	r25
    3434:	87 95       	ror	r24
    3436:	96 95       	lsr	r25
    3438:	87 95       	ror	r24
    343a:	b9 01       	movw	r22, r18
    343c:	15 e0       	ldi	r17, 0x05	; 5
    343e:	66 0f       	add	r22, r22
    3440:	77 1f       	adc	r23, r23
    3442:	1a 95       	dec	r17
    3444:	e1 f7       	brne	.-8      	; 0x343e <tankIO_server_setLeds_register_function+0x150>
    3446:	86 0f       	add	r24, r22
    3448:	97 1f       	adc	r25, r23
    344a:	60 91 6b 02 	lds	r22, 0x026B
    344e:	77 27       	eor	r23, r23
    3450:	67 fd       	sbrc	r22, 7
    3452:	70 95       	com	r23
    3454:	86 0f       	add	r24, r22
    3456:	97 1f       	adc	r25, r23
    3458:	82 27       	eor	r24, r18
    345a:	93 27       	eor	r25, r19
    345c:	52 96       	adiw	r26, 0x12	; 18
    345e:	9c 93       	st	X, r25
    3460:	8e 93       	st	-X, r24
    3462:	51 97       	sbiw	r26, 0x11	; 17
    3464:	03 80       	ldd	r0, Z+3	; 0x03
    3466:	f4 81       	ldd	r31, Z+4	; 0x04
    3468:	e0 2d       	mov	r30, r0
    346a:	22 81       	ldd	r18, Z+2	; 0x02
    346c:	33 81       	ldd	r19, Z+3	; 0x03
    346e:	21 50       	subi	r18, 0x01	; 1
    3470:	30 40       	sbci	r19, 0x00	; 0
    3472:	28 23       	and	r18, r24
    3474:	39 23       	and	r19, r25
    3476:	c9 01       	movw	r24, r18
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	82 0f       	add	r24, r18
    347e:	93 1f       	adc	r25, r19
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	01 90       	ld	r0, Z+
    3486:	f0 81       	ld	r31, Z
    3488:	e0 2d       	mov	r30, r0
    348a:	e8 0f       	add	r30, r24
    348c:	f9 1f       	adc	r31, r25
    348e:	82 81       	ldd	r24, Z+2	; 0x02
    3490:	93 81       	ldd	r25, Z+3	; 0x03
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	93 83       	std	Z+3, r25	; 0x03
    3496:	82 83       	std	Z+2, r24	; 0x02
    3498:	20 81       	ld	r18, Z
    349a:	31 81       	ldd	r19, Z+1	; 0x01
    349c:	1c 96       	adiw	r26, 0x0c	; 12
    349e:	3c 93       	st	X, r19
    34a0:	2e 93       	st	-X, r18
    34a2:	1b 97       	sbiw	r26, 0x0b	; 11
    34a4:	1a 96       	adiw	r26, 0x0a	; 10
    34a6:	1c 92       	st	X, r1
    34a8:	1e 92       	st	-X, r1
    34aa:	19 97       	sbiw	r26, 0x09	; 9
    34ac:	21 15       	cp	r18, r1
    34ae:	31 05       	cpc	r19, r1
    34b0:	29 f0       	breq	.+10     	; 0x34bc <tankIO_server_setLeds_register_function+0x1ce>
    34b2:	d9 01       	movw	r26, r18
    34b4:	17 96       	adiw	r26, 0x07	; 7
    34b6:	5c 93       	st	X, r21
    34b8:	4e 93       	st	-X, r20
    34ba:	16 97       	sbiw	r26, 0x06	; 6
    34bc:	2d e6       	ldi	r18, 0x6D	; 109
    34be:	32 e0       	ldi	r19, 0x02	; 2
    34c0:	31 83       	std	Z+1, r19	; 0x01
    34c2:	20 83       	st	Z, r18
    34c4:	24 81       	ldd	r18, Z+4	; 0x04
    34c6:	35 81       	ldd	r19, Z+5	; 0x05
    34c8:	2f 5f       	subi	r18, 0xFF	; 255
    34ca:	3f 4f       	sbci	r19, 0xFF	; 255
    34cc:	a9 01       	movw	r20, r18
    34ce:	44 0f       	add	r20, r20
    34d0:	55 1f       	adc	r21, r21
    34d2:	f3 e0       	ldi	r31, 0x03	; 3
    34d4:	22 0f       	add	r18, r18
    34d6:	33 1f       	adc	r19, r19
    34d8:	fa 95       	dec	r31
    34da:	e1 f7       	brne	.-8      	; 0x34d4 <tankIO_server_setLeds_register_function+0x1e6>
    34dc:	42 0f       	add	r20, r18
    34de:	53 1f       	adc	r21, r19
    34e0:	84 17       	cp	r24, r20
    34e2:	95 07       	cpc	r25, r21
    34e4:	08 f4       	brcc	.+2      	; 0x34e8 <tankIO_server_setLeds_register_function+0x1fa>
    34e6:	c8 c0       	rjmp	.+400    	; 0x3678 <tankIO_server_setLeds_register_function+0x38a>
    34e8:	8a 89       	ldd	r24, Y+18	; 0x12
    34ea:	9b 89       	ldd	r25, Y+19	; 0x13
    34ec:	81 30       	cpi	r24, 0x01	; 1
    34ee:	91 05       	cpc	r25, r1
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <tankIO_server_setLeds_register_function+0x206>
    34f2:	c2 c0       	rjmp	.+388    	; 0x3678 <tankIO_server_setLeds_register_function+0x38a>
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	9b 81       	ldd	r25, Y+3	; 0x03
    34f8:	8c 01       	movw	r16, r24
    34fa:	00 0f       	add	r16, r16
    34fc:	11 1f       	adc	r17, r17
    34fe:	08 0f       	add	r16, r24
    3500:	19 1f       	adc	r17, r25
    3502:	00 0f       	add	r16, r16
    3504:	11 1f       	adc	r17, r17
    3506:	00 0f       	add	r16, r16
    3508:	11 1f       	adc	r17, r17
    350a:	c8 01       	movw	r24, r16
    350c:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3510:	4c 01       	movw	r8, r24
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	21 f4       	brne	.+8      	; 0x351e <tankIO_server_setLeds_register_function+0x230>
    3516:	8f ef       	ldi	r24, 0xFF	; 255
    3518:	9f ef       	ldi	r25, 0xFF	; 255
    351a:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	70 e0       	ldi	r23, 0x00	; 0
    3522:	a8 01       	movw	r20, r16
    3524:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    3528:	0e 81       	ldd	r16, Y+6	; 0x06
    352a:	1f 81       	ldd	r17, Y+7	; 0x07
    352c:	6a 80       	ldd	r6, Y+2	; 0x02
    352e:	7b 80       	ldd	r7, Y+3	; 0x03
    3530:	73 01       	movw	r14, r6
    3532:	ee 0c       	add	r14, r14
    3534:	ff 1c       	adc	r15, r15
    3536:	08 94       	sec
    3538:	e1 08       	sbc	r14, r1
    353a:	f1 08       	sbc	r15, r1
    353c:	c7 01       	movw	r24, r14
    353e:	80 23       	and	r24, r16
    3540:	91 23       	and	r25, r17
    3542:	21 e0       	ldi	r18, 0x01	; 1
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	11 f4       	brne	.+4      	; 0x354e <tankIO_server_setLeds_register_function+0x260>
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	8c 81       	ldd	r24, Y+4	; 0x04
    3550:	9d 81       	ldd	r25, Y+5	; 0x05
    3552:	01 96       	adiw	r24, 0x01	; 1
    3554:	02 c0       	rjmp	.+4      	; 0x355a <tankIO_server_setLeds_register_function+0x26c>
    3556:	16 95       	lsr	r17
    3558:	07 95       	ror	r16
    355a:	8a 95       	dec	r24
    355c:	e2 f7       	brpl	.-8      	; 0x3556 <tankIO_server_setLeds_register_function+0x268>
    355e:	02 0f       	add	r16, r18
    3560:	13 1f       	adc	r17, r19
    3562:	1d 87       	std	Y+13, r17	; 0x0d
    3564:	0c 87       	std	Y+12, r16	; 0x0c
    3566:	1f 86       	std	Y+15, r1	; 0x0f
    3568:	1e 86       	std	Y+14, r1	; 0x0e
    356a:	cc 24       	eor	r12, r12
    356c:	dd 24       	eor	r13, r13
    356e:	aa 24       	eor	r10, r10
    3570:	bb 24       	eor	r11, r11
    3572:	51 c0       	rjmp	.+162    	; 0x3616 <tankIO_server_setLeds_register_function+0x328>
    3574:	8c 0d       	add	r24, r12
    3576:	9d 1d       	adc	r25, r13
    3578:	fc 01       	movw	r30, r24
    357a:	20 81       	ld	r18, Z
    357c:	31 81       	ldd	r19, Z+1	; 0x01
    357e:	40 c0       	rjmp	.+128    	; 0x3600 <tankIO_server_setLeds_register_function+0x312>
    3580:	d9 01       	movw	r26, r18
    3582:	18 96       	adiw	r26, 0x08	; 8
    3584:	5c 90       	ld	r5, X
    3586:	18 97       	sbiw	r26, 0x08	; 8
    3588:	19 96       	adiw	r26, 0x09	; 9
    358a:	4c 90       	ld	r4, X
    358c:	19 97       	sbiw	r26, 0x09	; 9
    358e:	1e 96       	adiw	r26, 0x0e	; 14
    3590:	8d 91       	ld	r24, X+
    3592:	9c 91       	ld	r25, X
    3594:	1f 97       	sbiw	r26, 0x0f	; 15
    3596:	8e 21       	and	r24, r14
    3598:	9f 21       	and	r25, r15
    359a:	fc 01       	movw	r30, r24
    359c:	ee 0f       	add	r30, r30
    359e:	ff 1f       	adc	r31, r31
    35a0:	e8 0f       	add	r30, r24
    35a2:	f9 1f       	adc	r31, r25
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	e8 0d       	add	r30, r8
    35aa:	f9 1d       	adc	r31, r9
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	93 83       	std	Z+3, r25	; 0x03
    35b4:	82 83       	std	Z+2, r24	; 0x02
    35b6:	08 17       	cp	r16, r24
    35b8:	19 07       	cpc	r17, r25
    35ba:	58 f4       	brcc	.+22     	; 0x35d2 <tankIO_server_setLeds_register_function+0x2e4>
    35bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    35be:	5f 85       	ldd	r21, Y+15	; 0x0f
    35c0:	4f 5f       	subi	r20, 0xFF	; 255
    35c2:	5f 4f       	sbci	r21, 0xFF	; 255
    35c4:	5f 87       	std	Y+15, r21	; 0x0f
    35c6:	4e 87       	std	Y+14, r20	; 0x0e
    35c8:	b8 01       	movw	r22, r16
    35ca:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    35ce:	75 83       	std	Z+5, r23	; 0x05
    35d0:	64 83       	std	Z+4, r22	; 0x04
    35d2:	d9 01       	movw	r26, r18
    35d4:	17 96       	adiw	r26, 0x07	; 7
    35d6:	1c 92       	st	X, r1
    35d8:	1e 92       	st	-X, r1
    35da:	16 97       	sbiw	r26, 0x06	; 6
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	19 96       	adiw	r26, 0x09	; 9
    35e2:	9c 93       	st	X, r25
    35e4:	8e 93       	st	-X, r24
    35e6:	18 97       	sbiw	r26, 0x08	; 8
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	29 f0       	breq	.+10     	; 0x35f6 <tankIO_server_setLeds_register_function+0x308>
    35ec:	dc 01       	movw	r26, r24
    35ee:	17 96       	adiw	r26, 0x07	; 7
    35f0:	3c 93       	st	X, r19
    35f2:	2e 93       	st	-X, r18
    35f4:	16 97       	sbiw	r26, 0x06	; 6
    35f6:	31 83       	std	Z+1, r19	; 0x01
    35f8:	20 83       	st	Z, r18
    35fa:	c2 01       	movw	r24, r4
    35fc:	29 2f       	mov	r18, r25
    35fe:	34 2d       	mov	r19, r4
    3600:	21 15       	cp	r18, r1
    3602:	31 05       	cpc	r19, r1
    3604:	09 f0       	breq	.+2      	; 0x3608 <tankIO_server_setLeds_register_function+0x31a>
    3606:	bc cf       	rjmp	.-136    	; 0x3580 <tankIO_server_setLeds_register_function+0x292>
    3608:	08 94       	sec
    360a:	a1 1c       	adc	r10, r1
    360c:	b1 1c       	adc	r11, r1
    360e:	e6 e0       	ldi	r30, 0x06	; 6
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	ce 0e       	add	r12, r30
    3614:	df 1e       	adc	r13, r31
    3616:	88 81       	ld	r24, Y
    3618:	99 81       	ldd	r25, Y+1	; 0x01
    361a:	a6 14       	cp	r10, r6
    361c:	b7 04       	cpc	r11, r7
    361e:	08 f4       	brcc	.+2      	; 0x3622 <tankIO_server_setLeds_register_function+0x334>
    3620:	a9 cf       	rjmp	.-174    	; 0x3574 <tankIO_server_setLeds_register_function+0x286>
    3622:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    3626:	e0 91 6d 02 	lds	r30, 0x026D
    362a:	f0 91 6e 02 	lds	r31, 0x026E
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	93 83       	std	Z+3, r25	; 0x03
    3638:	82 83       	std	Z+2, r24	; 0x02
    363a:	84 81       	ldd	r24, Z+4	; 0x04
    363c:	95 81       	ldd	r25, Z+5	; 0x05
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	95 83       	std	Z+5, r25	; 0x05
    3642:	84 83       	std	Z+4, r24	; 0x04
    3644:	91 82       	std	Z+1, r9	; 0x01
    3646:	80 82       	st	Z, r8
    3648:	86 81       	ldd	r24, Z+6	; 0x06
    364a:	97 81       	ldd	r25, Z+7	; 0x07
    364c:	96 95       	lsr	r25
    364e:	87 95       	ror	r24
    3650:	26 85       	ldd	r18, Z+14	; 0x0e
    3652:	37 85       	ldd	r19, Z+15	; 0x0f
    3654:	82 17       	cp	r24, r18
    3656:	93 07       	cpc	r25, r19
    3658:	20 f4       	brcc	.+8      	; 0x3662 <tankIO_server_setLeds_register_function+0x374>
    365a:	80 89       	ldd	r24, Z+16	; 0x10
    365c:	91 89       	ldd	r25, Z+17	; 0x11
    365e:	01 96       	adiw	r24, 0x01	; 1
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <tankIO_server_setLeds_register_function+0x378>
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	91 8b       	std	Z+17, r25	; 0x11
    3668:	80 8b       	std	Z+16, r24	; 0x10
    366a:	82 30       	cpi	r24, 0x02	; 2
    366c:	91 05       	cpc	r25, r1
    366e:	20 f0       	brcs	.+8      	; 0x3678 <tankIO_server_setLeds_register_function+0x38a>
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	93 8b       	std	Z+19, r25	; 0x13
    3676:	82 8b       	std	Z+18, r24	; 0x12
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	df 90       	pop	r13
    3686:	cf 90       	pop	r12
    3688:	bf 90       	pop	r11
    368a:	af 90       	pop	r10
    368c:	9f 90       	pop	r9
    368e:	8f 90       	pop	r8
    3690:	7f 90       	pop	r7
    3692:	6f 90       	pop	r6
    3694:	5f 90       	pop	r5
    3696:	4f 90       	pop	r4
    3698:	08 95       	ret

0000369a <tankIO_server_enableLeds>:

void tankIO_server_enableLeds(TankIoLeds *leds, uint16_t size) {
	enableLeds(toLedGroup(*leds));
    369a:	dc 01       	movw	r26, r24
    369c:	ed 91       	ld	r30, X+
    369e:	fc 91       	ld	r31, X
    36a0:	11 97       	sbiw	r26, 0x01	; 1
    36a2:	e8 30       	cpi	r30, 0x08	; 8
    36a4:	f1 05       	cpc	r31, r1
    36a6:	38 f4       	brcc	.+14     	; 0x36b6 <tankIO_server_enableLeds+0x1c>
    36a8:	ee 0f       	add	r30, r30
    36aa:	ff 1f       	adc	r31, r31
    36ac:	e2 59       	subi	r30, 0x92	; 146
    36ae:	fc 4f       	sbci	r31, 0xFC	; 252
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	02 c0       	rjmp	.+4      	; 0x36ba <tankIO_server_enableLeds+0x20>
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <enableLeds>
}
    36be:	08 95       	ret

000036c0 <tankIO_server_enableLeds_handler>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_enableLeds, TANK_IO_enableLeds, TankIoLeds)
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	ec 01       	movw	r28, r24
    36c6:	6a 81       	ldd	r22, Y+2	; 0x02
    36c8:	7b 81       	ldd	r23, Y+3	; 0x03
    36ca:	88 81       	ld	r24, Y
    36cc:	99 81       	ldd	r25, Y+1	; 0x01
    36ce:	0e 94 4d 1b 	call	0x369a	; 0x369a <tankIO_server_enableLeds>
    36d2:	1b 82       	std	Y+3, r1	; 0x03
    36d4:	1a 82       	std	Y+2, r1	; 0x02
    36d6:	df 91       	pop	r29
    36d8:	cf 91       	pop	r28
    36da:	08 95       	ret

000036dc <tankIO_server_enableLeds_register_function>:
    36dc:	4f 92       	push	r4
    36de:	5f 92       	push	r5
    36e0:	6f 92       	push	r6
    36e2:	7f 92       	push	r7
    36e4:	8f 92       	push	r8
    36e6:	9f 92       	push	r9
    36e8:	af 92       	push	r10
    36ea:	bf 92       	push	r11
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	ff 92       	push	r15
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	10 92 85 02 	sts	0x0285, r1
    3700:	10 92 84 02 	sts	0x0284, r1
    3704:	ed e7       	ldi	r30, 0x7D	; 125
    3706:	f2 e0       	ldi	r31, 0x02	; 2
    3708:	f0 93 8b 02 	sts	0x028B, r31
    370c:	e0 93 8a 02 	sts	0x028A, r30
    3710:	82 e0       	ldi	r24, 0x02	; 2
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	90 93 8d 02 	sts	0x028D, r25
    3718:	80 93 8c 02 	sts	0x028C, r24
    371c:	a0 91 9c 03 	lds	r26, 0x039C
    3720:	b0 91 9d 03 	lds	r27, 0x039D
    3724:	8f 01       	movw	r16, r30
    3726:	0d 5f       	subi	r16, 0xFD	; 253
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	10 97       	sbiw	r26, 0x00	; 0
    372c:	09 f0       	breq	.+2      	; 0x3730 <tankIO_server_enableLeds_register_function+0x54>
    372e:	49 c0       	rjmp	.+146    	; 0x37c2 <tankIO_server_enableLeds_register_function+0xe6>
    3730:	f0 93 9d 03 	sts	0x039D, r31
    3734:	e0 93 9c 03 	sts	0x039C, r30
    3738:	10 92 83 02 	sts	0x0283, r1
    373c:	10 92 82 02 	sts	0x0282, r1
    3740:	88 e1       	ldi	r24, 0x18	; 24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3748:	90 93 81 02 	sts	0x0281, r25
    374c:	80 93 80 02 	sts	0x0280, r24
    3750:	00 97       	sbiw	r24, 0x00	; 0
    3752:	09 f4       	brne	.+2      	; 0x3756 <tankIO_server_enableLeds_register_function+0x7a>
    3754:	d7 c0       	rjmp	.+430    	; 0x3904 <tankIO_server_enableLeds_register_function+0x228>
    3756:	e8 2f       	mov	r30, r24
    3758:	f9 2f       	mov	r31, r25
    375a:	88 e1       	ldi	r24, 0x18	; 24
    375c:	df 01       	movw	r26, r30
    375e:	1d 92       	st	X+, r1
    3760:	8a 95       	dec	r24
    3762:	e9 f7       	brne	.-6      	; 0x375e <tankIO_server_enableLeds_register_function+0x82>
    3764:	c0 91 80 02 	lds	r28, 0x0280
    3768:	d0 91 81 02 	lds	r29, 0x0281
    376c:	19 87       	std	Y+9, r17	; 0x09
    376e:	08 87       	std	Y+8, r16	; 0x08
    3770:	80 e2       	ldi	r24, 0x20	; 32
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	9b 83       	std	Y+3, r25	; 0x03
    3776:	8a 83       	std	Y+2, r24	; 0x02
    3778:	85 e0       	ldi	r24, 0x05	; 5
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	9d 83       	std	Y+5, r25	; 0x05
    377e:	8c 83       	std	Y+4, r24	; 0x04
    3780:	83 e0       	ldi	r24, 0x03	; 3
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9b 87       	std	Y+11, r25	; 0x0b
    3786:	8a 87       	std	Y+10, r24	; 0x0a
    3788:	80 ec       	ldi	r24, 0xC0	; 192
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3790:	99 83       	std	Y+1, r25	; 0x01
    3792:	88 83       	st	Y, r24
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	09 f4       	brne	.+2      	; 0x379a <tankIO_server_enableLeds_register_function+0xbe>
    3798:	b5 c0       	rjmp	.+362    	; 0x3904 <tankIO_server_enableLeds_register_function+0x228>
    379a:	e8 2f       	mov	r30, r24
    379c:	f9 2f       	mov	r31, r25
    379e:	80 ec       	ldi	r24, 0xC0	; 192
    37a0:	df 01       	movw	r26, r30
    37a2:	1d 92       	st	X+, r1
    37a4:	8a 95       	dec	r24
    37a6:	e9 f7       	brne	.-6      	; 0x37a2 <tankIO_server_enableLeds_register_function+0xc6>
    37a8:	e0 91 80 02 	lds	r30, 0x0280
    37ac:	f0 91 81 02 	lds	r31, 0x0281
    37b0:	81 ee       	ldi	r24, 0xE1	; 225
    37b2:	9f e1       	ldi	r25, 0x1F	; 31
    37b4:	a1 e1       	ldi	r26, 0x11	; 17
    37b6:	b0 ea       	ldi	r27, 0xA0	; 160
    37b8:	84 8b       	std	Z+20, r24	; 0x14
    37ba:	95 8b       	std	Z+21, r25	; 0x15
    37bc:	a6 8b       	std	Z+22, r26	; 0x16
    37be:	b7 8b       	std	Z+23, r27	; 0x17
    37c0:	16 c0       	rjmp	.+44     	; 0x37ee <tankIO_server_enableLeds_register_function+0x112>
    37c2:	13 96       	adiw	r26, 0x03	; 3
    37c4:	0d 90       	ld	r0, X+
    37c6:	bc 91       	ld	r27, X
    37c8:	a0 2d       	mov	r26, r0
    37ca:	18 96       	adiw	r26, 0x08	; 8
    37cc:	cd 91       	ld	r28, X+
    37ce:	dc 91       	ld	r29, X
    37d0:	19 97       	sbiw	r26, 0x09	; 9
    37d2:	fd 83       	std	Y+5, r31	; 0x05
    37d4:	ec 83       	std	Y+4, r30	; 0x04
    37d6:	1a 96       	adiw	r26, 0x0a	; 10
    37d8:	8d 91       	ld	r24, X+
    37da:	9c 91       	ld	r25, X
    37dc:	1b 97       	sbiw	r26, 0x0b	; 11
    37de:	c8 1b       	sub	r28, r24
    37e0:	d9 0b       	sbc	r29, r25
    37e2:	d6 83       	std	Z+6, r29	; 0x06
    37e4:	c5 83       	std	Z+5, r28	; 0x05
    37e6:	19 96       	adiw	r26, 0x09	; 9
    37e8:	1c 93       	st	X, r17
    37ea:	0e 93       	st	-X, r16
    37ec:	18 97       	sbiw	r26, 0x08	; 8
    37ee:	e0 91 9c 03 	lds	r30, 0x039C
    37f2:	f0 91 9d 03 	lds	r31, 0x039D
    37f6:	c3 81       	ldd	r28, Z+3	; 0x03
    37f8:	d4 81       	ldd	r29, Z+4	; 0x04
    37fa:	8e 81       	ldd	r24, Y+6	; 0x06
    37fc:	9f 81       	ldd	r25, Y+7	; 0x07
    37fe:	01 96       	adiw	r24, 0x01	; 1
    3800:	9f 83       	std	Y+7, r25	; 0x07
    3802:	8e 83       	std	Y+6, r24	; 0x06
    3804:	40 e8       	ldi	r20, 0x80	; 128
    3806:	52 e0       	ldi	r21, 0x02	; 2
    3808:	d0 93 81 02 	sts	0x0281, r29
    380c:	c0 93 80 02 	sts	0x0280, r28
    3810:	da 01       	movw	r26, r20
    3812:	13 97       	sbiw	r26, 0x03	; 3
    3814:	20 91 7d 02 	lds	r18, 0x027D
    3818:	33 27       	eor	r19, r19
    381a:	27 fd       	sbrc	r18, 7
    381c:	30 95       	com	r19
    381e:	c9 01       	movw	r24, r18
    3820:	96 95       	lsr	r25
    3822:	87 95       	ror	r24
    3824:	96 95       	lsr	r25
    3826:	87 95       	ror	r24
    3828:	b9 01       	movw	r22, r18
    382a:	15 e0       	ldi	r17, 0x05	; 5
    382c:	66 0f       	add	r22, r22
    382e:	77 1f       	adc	r23, r23
    3830:	1a 95       	dec	r17
    3832:	e1 f7       	brne	.-8      	; 0x382c <tankIO_server_enableLeds_register_function+0x150>
    3834:	86 0f       	add	r24, r22
    3836:	97 1f       	adc	r25, r23
    3838:	60 91 7e 02 	lds	r22, 0x027E
    383c:	77 27       	eor	r23, r23
    383e:	67 fd       	sbrc	r22, 7
    3840:	70 95       	com	r23
    3842:	86 0f       	add	r24, r22
    3844:	97 1f       	adc	r25, r23
    3846:	82 27       	eor	r24, r18
    3848:	93 27       	eor	r25, r19
    384a:	52 96       	adiw	r26, 0x12	; 18
    384c:	9c 93       	st	X, r25
    384e:	8e 93       	st	-X, r24
    3850:	51 97       	sbiw	r26, 0x11	; 17
    3852:	03 80       	ldd	r0, Z+3	; 0x03
    3854:	f4 81       	ldd	r31, Z+4	; 0x04
    3856:	e0 2d       	mov	r30, r0
    3858:	22 81       	ldd	r18, Z+2	; 0x02
    385a:	33 81       	ldd	r19, Z+3	; 0x03
    385c:	21 50       	subi	r18, 0x01	; 1
    385e:	30 40       	sbci	r19, 0x00	; 0
    3860:	28 23       	and	r18, r24
    3862:	39 23       	and	r19, r25
    3864:	c9 01       	movw	r24, r18
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	82 0f       	add	r24, r18
    386c:	93 1f       	adc	r25, r19
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	01 90       	ld	r0, Z+
    3874:	f0 81       	ld	r31, Z
    3876:	e0 2d       	mov	r30, r0
    3878:	e8 0f       	add	r30, r24
    387a:	f9 1f       	adc	r31, r25
    387c:	82 81       	ldd	r24, Z+2	; 0x02
    387e:	93 81       	ldd	r25, Z+3	; 0x03
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	93 83       	std	Z+3, r25	; 0x03
    3884:	82 83       	std	Z+2, r24	; 0x02
    3886:	20 81       	ld	r18, Z
    3888:	31 81       	ldd	r19, Z+1	; 0x01
    388a:	1c 96       	adiw	r26, 0x0c	; 12
    388c:	3c 93       	st	X, r19
    388e:	2e 93       	st	-X, r18
    3890:	1b 97       	sbiw	r26, 0x0b	; 11
    3892:	1a 96       	adiw	r26, 0x0a	; 10
    3894:	1c 92       	st	X, r1
    3896:	1e 92       	st	-X, r1
    3898:	19 97       	sbiw	r26, 0x09	; 9
    389a:	21 15       	cp	r18, r1
    389c:	31 05       	cpc	r19, r1
    389e:	29 f0       	breq	.+10     	; 0x38aa <tankIO_server_enableLeds_register_function+0x1ce>
    38a0:	d9 01       	movw	r26, r18
    38a2:	17 96       	adiw	r26, 0x07	; 7
    38a4:	5c 93       	st	X, r21
    38a6:	4e 93       	st	-X, r20
    38a8:	16 97       	sbiw	r26, 0x06	; 6
    38aa:	20 e8       	ldi	r18, 0x80	; 128
    38ac:	32 e0       	ldi	r19, 0x02	; 2
    38ae:	31 83       	std	Z+1, r19	; 0x01
    38b0:	20 83       	st	Z, r18
    38b2:	24 81       	ldd	r18, Z+4	; 0x04
    38b4:	35 81       	ldd	r19, Z+5	; 0x05
    38b6:	2f 5f       	subi	r18, 0xFF	; 255
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ba:	a9 01       	movw	r20, r18
    38bc:	44 0f       	add	r20, r20
    38be:	55 1f       	adc	r21, r21
    38c0:	f3 e0       	ldi	r31, 0x03	; 3
    38c2:	22 0f       	add	r18, r18
    38c4:	33 1f       	adc	r19, r19
    38c6:	fa 95       	dec	r31
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <tankIO_server_enableLeds_register_function+0x1e6>
    38ca:	42 0f       	add	r20, r18
    38cc:	53 1f       	adc	r21, r19
    38ce:	84 17       	cp	r24, r20
    38d0:	95 07       	cpc	r25, r21
    38d2:	08 f4       	brcc	.+2      	; 0x38d6 <tankIO_server_enableLeds_register_function+0x1fa>
    38d4:	c8 c0       	rjmp	.+400    	; 0x3a66 <tankIO_server_enableLeds_register_function+0x38a>
    38d6:	8a 89       	ldd	r24, Y+18	; 0x12
    38d8:	9b 89       	ldd	r25, Y+19	; 0x13
    38da:	81 30       	cpi	r24, 0x01	; 1
    38dc:	91 05       	cpc	r25, r1
    38de:	09 f4       	brne	.+2      	; 0x38e2 <tankIO_server_enableLeds_register_function+0x206>
    38e0:	c2 c0       	rjmp	.+388    	; 0x3a66 <tankIO_server_enableLeds_register_function+0x38a>
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	9b 81       	ldd	r25, Y+3	; 0x03
    38e6:	8c 01       	movw	r16, r24
    38e8:	00 0f       	add	r16, r16
    38ea:	11 1f       	adc	r17, r17
    38ec:	08 0f       	add	r16, r24
    38ee:	19 1f       	adc	r17, r25
    38f0:	00 0f       	add	r16, r16
    38f2:	11 1f       	adc	r17, r17
    38f4:	00 0f       	add	r16, r16
    38f6:	11 1f       	adc	r17, r17
    38f8:	c8 01       	movw	r24, r16
    38fa:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    38fe:	4c 01       	movw	r8, r24
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	21 f4       	brne	.+8      	; 0x390c <tankIO_server_enableLeds_register_function+0x230>
    3904:	8f ef       	ldi	r24, 0xFF	; 255
    3906:	9f ef       	ldi	r25, 0xFF	; 255
    3908:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	70 e0       	ldi	r23, 0x00	; 0
    3910:	a8 01       	movw	r20, r16
    3912:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    3916:	0e 81       	ldd	r16, Y+6	; 0x06
    3918:	1f 81       	ldd	r17, Y+7	; 0x07
    391a:	6a 80       	ldd	r6, Y+2	; 0x02
    391c:	7b 80       	ldd	r7, Y+3	; 0x03
    391e:	73 01       	movw	r14, r6
    3920:	ee 0c       	add	r14, r14
    3922:	ff 1c       	adc	r15, r15
    3924:	08 94       	sec
    3926:	e1 08       	sbc	r14, r1
    3928:	f1 08       	sbc	r15, r1
    392a:	c7 01       	movw	r24, r14
    392c:	80 23       	and	r24, r16
    392e:	91 23       	and	r25, r17
    3930:	21 e0       	ldi	r18, 0x01	; 1
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	11 f4       	brne	.+4      	; 0x393c <tankIO_server_enableLeds_register_function+0x260>
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	8c 81       	ldd	r24, Y+4	; 0x04
    393e:	9d 81       	ldd	r25, Y+5	; 0x05
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <tankIO_server_enableLeds_register_function+0x26c>
    3944:	16 95       	lsr	r17
    3946:	07 95       	ror	r16
    3948:	8a 95       	dec	r24
    394a:	e2 f7       	brpl	.-8      	; 0x3944 <tankIO_server_enableLeds_register_function+0x268>
    394c:	02 0f       	add	r16, r18
    394e:	13 1f       	adc	r17, r19
    3950:	1d 87       	std	Y+13, r17	; 0x0d
    3952:	0c 87       	std	Y+12, r16	; 0x0c
    3954:	1f 86       	std	Y+15, r1	; 0x0f
    3956:	1e 86       	std	Y+14, r1	; 0x0e
    3958:	cc 24       	eor	r12, r12
    395a:	dd 24       	eor	r13, r13
    395c:	aa 24       	eor	r10, r10
    395e:	bb 24       	eor	r11, r11
    3960:	51 c0       	rjmp	.+162    	; 0x3a04 <tankIO_server_enableLeds_register_function+0x328>
    3962:	8c 0d       	add	r24, r12
    3964:	9d 1d       	adc	r25, r13
    3966:	fc 01       	movw	r30, r24
    3968:	20 81       	ld	r18, Z
    396a:	31 81       	ldd	r19, Z+1	; 0x01
    396c:	40 c0       	rjmp	.+128    	; 0x39ee <tankIO_server_enableLeds_register_function+0x312>
    396e:	d9 01       	movw	r26, r18
    3970:	18 96       	adiw	r26, 0x08	; 8
    3972:	5c 90       	ld	r5, X
    3974:	18 97       	sbiw	r26, 0x08	; 8
    3976:	19 96       	adiw	r26, 0x09	; 9
    3978:	4c 90       	ld	r4, X
    397a:	19 97       	sbiw	r26, 0x09	; 9
    397c:	1e 96       	adiw	r26, 0x0e	; 14
    397e:	8d 91       	ld	r24, X+
    3980:	9c 91       	ld	r25, X
    3982:	1f 97       	sbiw	r26, 0x0f	; 15
    3984:	8e 21       	and	r24, r14
    3986:	9f 21       	and	r25, r15
    3988:	fc 01       	movw	r30, r24
    398a:	ee 0f       	add	r30, r30
    398c:	ff 1f       	adc	r31, r31
    398e:	e8 0f       	add	r30, r24
    3990:	f9 1f       	adc	r31, r25
    3992:	ee 0f       	add	r30, r30
    3994:	ff 1f       	adc	r31, r31
    3996:	e8 0d       	add	r30, r8
    3998:	f9 1d       	adc	r31, r9
    399a:	82 81       	ldd	r24, Z+2	; 0x02
    399c:	93 81       	ldd	r25, Z+3	; 0x03
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	93 83       	std	Z+3, r25	; 0x03
    39a2:	82 83       	std	Z+2, r24	; 0x02
    39a4:	08 17       	cp	r16, r24
    39a6:	19 07       	cpc	r17, r25
    39a8:	58 f4       	brcc	.+22     	; 0x39c0 <tankIO_server_enableLeds_register_function+0x2e4>
    39aa:	4e 85       	ldd	r20, Y+14	; 0x0e
    39ac:	5f 85       	ldd	r21, Y+15	; 0x0f
    39ae:	4f 5f       	subi	r20, 0xFF	; 255
    39b0:	5f 4f       	sbci	r21, 0xFF	; 255
    39b2:	5f 87       	std	Y+15, r21	; 0x0f
    39b4:	4e 87       	std	Y+14, r20	; 0x0e
    39b6:	b8 01       	movw	r22, r16
    39b8:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    39bc:	75 83       	std	Z+5, r23	; 0x05
    39be:	64 83       	std	Z+4, r22	; 0x04
    39c0:	d9 01       	movw	r26, r18
    39c2:	17 96       	adiw	r26, 0x07	; 7
    39c4:	1c 92       	st	X, r1
    39c6:	1e 92       	st	-X, r1
    39c8:	16 97       	sbiw	r26, 0x06	; 6
    39ca:	80 81       	ld	r24, Z
    39cc:	91 81       	ldd	r25, Z+1	; 0x01
    39ce:	19 96       	adiw	r26, 0x09	; 9
    39d0:	9c 93       	st	X, r25
    39d2:	8e 93       	st	-X, r24
    39d4:	18 97       	sbiw	r26, 0x08	; 8
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	29 f0       	breq	.+10     	; 0x39e4 <tankIO_server_enableLeds_register_function+0x308>
    39da:	dc 01       	movw	r26, r24
    39dc:	17 96       	adiw	r26, 0x07	; 7
    39de:	3c 93       	st	X, r19
    39e0:	2e 93       	st	-X, r18
    39e2:	16 97       	sbiw	r26, 0x06	; 6
    39e4:	31 83       	std	Z+1, r19	; 0x01
    39e6:	20 83       	st	Z, r18
    39e8:	c2 01       	movw	r24, r4
    39ea:	29 2f       	mov	r18, r25
    39ec:	34 2d       	mov	r19, r4
    39ee:	21 15       	cp	r18, r1
    39f0:	31 05       	cpc	r19, r1
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <tankIO_server_enableLeds_register_function+0x31a>
    39f4:	bc cf       	rjmp	.-136    	; 0x396e <tankIO_server_enableLeds_register_function+0x292>
    39f6:	08 94       	sec
    39f8:	a1 1c       	adc	r10, r1
    39fa:	b1 1c       	adc	r11, r1
    39fc:	e6 e0       	ldi	r30, 0x06	; 6
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	ce 0e       	add	r12, r30
    3a02:	df 1e       	adc	r13, r31
    3a04:	88 81       	ld	r24, Y
    3a06:	99 81       	ldd	r25, Y+1	; 0x01
    3a08:	a6 14       	cp	r10, r6
    3a0a:	b7 04       	cpc	r11, r7
    3a0c:	08 f4       	brcc	.+2      	; 0x3a10 <tankIO_server_enableLeds_register_function+0x334>
    3a0e:	a9 cf       	rjmp	.-174    	; 0x3962 <tankIO_server_enableLeds_register_function+0x286>
    3a10:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    3a14:	e0 91 80 02 	lds	r30, 0x0280
    3a18:	f0 91 81 02 	lds	r31, 0x0281
    3a1c:	82 81       	ldd	r24, Z+2	; 0x02
    3a1e:	93 81       	ldd	r25, Z+3	; 0x03
    3a20:	88 0f       	add	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	93 83       	std	Z+3, r25	; 0x03
    3a26:	82 83       	std	Z+2, r24	; 0x02
    3a28:	84 81       	ldd	r24, Z+4	; 0x04
    3a2a:	95 81       	ldd	r25, Z+5	; 0x05
    3a2c:	01 96       	adiw	r24, 0x01	; 1
    3a2e:	95 83       	std	Z+5, r25	; 0x05
    3a30:	84 83       	std	Z+4, r24	; 0x04
    3a32:	91 82       	std	Z+1, r9	; 0x01
    3a34:	80 82       	st	Z, r8
    3a36:	86 81       	ldd	r24, Z+6	; 0x06
    3a38:	97 81       	ldd	r25, Z+7	; 0x07
    3a3a:	96 95       	lsr	r25
    3a3c:	87 95       	ror	r24
    3a3e:	26 85       	ldd	r18, Z+14	; 0x0e
    3a40:	37 85       	ldd	r19, Z+15	; 0x0f
    3a42:	82 17       	cp	r24, r18
    3a44:	93 07       	cpc	r25, r19
    3a46:	20 f4       	brcc	.+8      	; 0x3a50 <tankIO_server_enableLeds_register_function+0x374>
    3a48:	80 89       	ldd	r24, Z+16	; 0x10
    3a4a:	91 89       	ldd	r25, Z+17	; 0x11
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	02 c0       	rjmp	.+4      	; 0x3a54 <tankIO_server_enableLeds_register_function+0x378>
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	91 8b       	std	Z+17, r25	; 0x11
    3a56:	80 8b       	std	Z+16, r24	; 0x10
    3a58:	82 30       	cpi	r24, 0x02	; 2
    3a5a:	91 05       	cpc	r25, r1
    3a5c:	20 f0       	brcs	.+8      	; 0x3a66 <tankIO_server_enableLeds_register_function+0x38a>
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	93 8b       	std	Z+19, r25	; 0x13
    3a64:	82 8b       	std	Z+18, r24	; 0x12
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	df 90       	pop	r13
    3a74:	cf 90       	pop	r12
    3a76:	bf 90       	pop	r11
    3a78:	af 90       	pop	r10
    3a7a:	9f 90       	pop	r9
    3a7c:	8f 90       	pop	r8
    3a7e:	7f 90       	pop	r7
    3a80:	6f 90       	pop	r6
    3a82:	5f 90       	pop	r5
    3a84:	4f 90       	pop	r4
    3a86:	08 95       	ret

00003a88 <tankIO_server_disableLeds>:

void tankIO_server_disableLeds(TankIoLeds *leds, uint16_t size) {
	disableLeds(toLedGroup(*leds));
    3a88:	dc 01       	movw	r26, r24
    3a8a:	ed 91       	ld	r30, X+
    3a8c:	fc 91       	ld	r31, X
    3a8e:	11 97       	sbiw	r26, 0x01	; 1
    3a90:	e8 30       	cpi	r30, 0x08	; 8
    3a92:	f1 05       	cpc	r31, r1
    3a94:	38 f4       	brcc	.+14     	; 0x3aa4 <tankIO_server_disableLeds+0x1c>
    3a96:	ee 0f       	add	r30, r30
    3a98:	ff 1f       	adc	r31, r31
    3a9a:	e2 59       	subi	r30, 0x92	; 146
    3a9c:	fc 4f       	sbci	r31, 0xFC	; 252
    3a9e:	80 81       	ld	r24, Z
    3aa0:	91 81       	ldd	r25, Z+1	; 0x01
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <tankIO_server_disableLeds+0x20>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <disableLeds>
}
    3aac:	08 95       	ret

00003aae <tankIO_server_disableLeds_handler>:
TWI_RPC_SERVER_FUNCTION_VOID	(tankIO_server_disableLeds, TANK_IO_disableLeds, TankIoLeds)
    3aae:	cf 93       	push	r28
    3ab0:	df 93       	push	r29
    3ab2:	ec 01       	movw	r28, r24
    3ab4:	6a 81       	ldd	r22, Y+2	; 0x02
    3ab6:	7b 81       	ldd	r23, Y+3	; 0x03
    3ab8:	88 81       	ld	r24, Y
    3aba:	99 81       	ldd	r25, Y+1	; 0x01
    3abc:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <tankIO_server_disableLeds>
    3ac0:	1b 82       	std	Y+3, r1	; 0x03
    3ac2:	1a 82       	std	Y+2, r1	; 0x02
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <tankIO_server_disableLeds_register_function>:
    3aca:	4f 92       	push	r4
    3acc:	5f 92       	push	r5
    3ace:	6f 92       	push	r6
    3ad0:	7f 92       	push	r7
    3ad2:	8f 92       	push	r8
    3ad4:	9f 92       	push	r9
    3ad6:	af 92       	push	r10
    3ad8:	bf 92       	push	r11
    3ada:	cf 92       	push	r12
    3adc:	df 92       	push	r13
    3ade:	ef 92       	push	r14
    3ae0:	ff 92       	push	r15
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	10 92 98 02 	sts	0x0298, r1
    3aee:	10 92 97 02 	sts	0x0297, r1
    3af2:	e0 e9       	ldi	r30, 0x90	; 144
    3af4:	f2 e0       	ldi	r31, 0x02	; 2
    3af6:	f0 93 9e 02 	sts	0x029E, r31
    3afa:	e0 93 9d 02 	sts	0x029D, r30
    3afe:	82 e0       	ldi	r24, 0x02	; 2
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	90 93 a0 02 	sts	0x02A0, r25
    3b06:	80 93 9f 02 	sts	0x029F, r24
    3b0a:	a0 91 9c 03 	lds	r26, 0x039C
    3b0e:	b0 91 9d 03 	lds	r27, 0x039D
    3b12:	8f 01       	movw	r16, r30
    3b14:	0d 5f       	subi	r16, 0xFD	; 253
    3b16:	1f 4f       	sbci	r17, 0xFF	; 255
    3b18:	10 97       	sbiw	r26, 0x00	; 0
    3b1a:	09 f0       	breq	.+2      	; 0x3b1e <tankIO_server_disableLeds_register_function+0x54>
    3b1c:	49 c0       	rjmp	.+146    	; 0x3bb0 <tankIO_server_disableLeds_register_function+0xe6>
    3b1e:	f0 93 9d 03 	sts	0x039D, r31
    3b22:	e0 93 9c 03 	sts	0x039C, r30
    3b26:	10 92 96 02 	sts	0x0296, r1
    3b2a:	10 92 95 02 	sts	0x0295, r1
    3b2e:	88 e1       	ldi	r24, 0x18	; 24
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3b36:	90 93 94 02 	sts	0x0294, r25
    3b3a:	80 93 93 02 	sts	0x0293, r24
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <tankIO_server_disableLeds_register_function+0x7a>
    3b42:	d7 c0       	rjmp	.+430    	; 0x3cf2 <tankIO_server_disableLeds_register_function+0x228>
    3b44:	e8 2f       	mov	r30, r24
    3b46:	f9 2f       	mov	r31, r25
    3b48:	88 e1       	ldi	r24, 0x18	; 24
    3b4a:	df 01       	movw	r26, r30
    3b4c:	1d 92       	st	X+, r1
    3b4e:	8a 95       	dec	r24
    3b50:	e9 f7       	brne	.-6      	; 0x3b4c <tankIO_server_disableLeds_register_function+0x82>
    3b52:	c0 91 93 02 	lds	r28, 0x0293
    3b56:	d0 91 94 02 	lds	r29, 0x0294
    3b5a:	19 87       	std	Y+9, r17	; 0x09
    3b5c:	08 87       	std	Y+8, r16	; 0x08
    3b5e:	80 e2       	ldi	r24, 0x20	; 32
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9b 83       	std	Y+3, r25	; 0x03
    3b64:	8a 83       	std	Y+2, r24	; 0x02
    3b66:	85 e0       	ldi	r24, 0x05	; 5
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	9d 83       	std	Y+5, r25	; 0x05
    3b6c:	8c 83       	std	Y+4, r24	; 0x04
    3b6e:	83 e0       	ldi	r24, 0x03	; 3
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	9b 87       	std	Y+11, r25	; 0x0b
    3b74:	8a 87       	std	Y+10, r24	; 0x0a
    3b76:	80 ec       	ldi	r24, 0xC0	; 192
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3b7e:	99 83       	std	Y+1, r25	; 0x01
    3b80:	88 83       	st	Y, r24
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	09 f4       	brne	.+2      	; 0x3b88 <tankIO_server_disableLeds_register_function+0xbe>
    3b86:	b5 c0       	rjmp	.+362    	; 0x3cf2 <tankIO_server_disableLeds_register_function+0x228>
    3b88:	e8 2f       	mov	r30, r24
    3b8a:	f9 2f       	mov	r31, r25
    3b8c:	80 ec       	ldi	r24, 0xC0	; 192
    3b8e:	df 01       	movw	r26, r30
    3b90:	1d 92       	st	X+, r1
    3b92:	8a 95       	dec	r24
    3b94:	e9 f7       	brne	.-6      	; 0x3b90 <tankIO_server_disableLeds_register_function+0xc6>
    3b96:	e0 91 93 02 	lds	r30, 0x0293
    3b9a:	f0 91 94 02 	lds	r31, 0x0294
    3b9e:	81 ee       	ldi	r24, 0xE1	; 225
    3ba0:	9f e1       	ldi	r25, 0x1F	; 31
    3ba2:	a1 e1       	ldi	r26, 0x11	; 17
    3ba4:	b0 ea       	ldi	r27, 0xA0	; 160
    3ba6:	84 8b       	std	Z+20, r24	; 0x14
    3ba8:	95 8b       	std	Z+21, r25	; 0x15
    3baa:	a6 8b       	std	Z+22, r26	; 0x16
    3bac:	b7 8b       	std	Z+23, r27	; 0x17
    3bae:	16 c0       	rjmp	.+44     	; 0x3bdc <tankIO_server_disableLeds_register_function+0x112>
    3bb0:	13 96       	adiw	r26, 0x03	; 3
    3bb2:	0d 90       	ld	r0, X+
    3bb4:	bc 91       	ld	r27, X
    3bb6:	a0 2d       	mov	r26, r0
    3bb8:	18 96       	adiw	r26, 0x08	; 8
    3bba:	cd 91       	ld	r28, X+
    3bbc:	dc 91       	ld	r29, X
    3bbe:	19 97       	sbiw	r26, 0x09	; 9
    3bc0:	fd 83       	std	Y+5, r31	; 0x05
    3bc2:	ec 83       	std	Y+4, r30	; 0x04
    3bc4:	1a 96       	adiw	r26, 0x0a	; 10
    3bc6:	8d 91       	ld	r24, X+
    3bc8:	9c 91       	ld	r25, X
    3bca:	1b 97       	sbiw	r26, 0x0b	; 11
    3bcc:	c8 1b       	sub	r28, r24
    3bce:	d9 0b       	sbc	r29, r25
    3bd0:	d6 83       	std	Z+6, r29	; 0x06
    3bd2:	c5 83       	std	Z+5, r28	; 0x05
    3bd4:	19 96       	adiw	r26, 0x09	; 9
    3bd6:	1c 93       	st	X, r17
    3bd8:	0e 93       	st	-X, r16
    3bda:	18 97       	sbiw	r26, 0x08	; 8
    3bdc:	e0 91 9c 03 	lds	r30, 0x039C
    3be0:	f0 91 9d 03 	lds	r31, 0x039D
    3be4:	c3 81       	ldd	r28, Z+3	; 0x03
    3be6:	d4 81       	ldd	r29, Z+4	; 0x04
    3be8:	8e 81       	ldd	r24, Y+6	; 0x06
    3bea:	9f 81       	ldd	r25, Y+7	; 0x07
    3bec:	01 96       	adiw	r24, 0x01	; 1
    3bee:	9f 83       	std	Y+7, r25	; 0x07
    3bf0:	8e 83       	std	Y+6, r24	; 0x06
    3bf2:	43 e9       	ldi	r20, 0x93	; 147
    3bf4:	52 e0       	ldi	r21, 0x02	; 2
    3bf6:	d0 93 94 02 	sts	0x0294, r29
    3bfa:	c0 93 93 02 	sts	0x0293, r28
    3bfe:	da 01       	movw	r26, r20
    3c00:	13 97       	sbiw	r26, 0x03	; 3
    3c02:	20 91 90 02 	lds	r18, 0x0290
    3c06:	33 27       	eor	r19, r19
    3c08:	27 fd       	sbrc	r18, 7
    3c0a:	30 95       	com	r19
    3c0c:	c9 01       	movw	r24, r18
    3c0e:	96 95       	lsr	r25
    3c10:	87 95       	ror	r24
    3c12:	96 95       	lsr	r25
    3c14:	87 95       	ror	r24
    3c16:	b9 01       	movw	r22, r18
    3c18:	15 e0       	ldi	r17, 0x05	; 5
    3c1a:	66 0f       	add	r22, r22
    3c1c:	77 1f       	adc	r23, r23
    3c1e:	1a 95       	dec	r17
    3c20:	e1 f7       	brne	.-8      	; 0x3c1a <tankIO_server_disableLeds_register_function+0x150>
    3c22:	86 0f       	add	r24, r22
    3c24:	97 1f       	adc	r25, r23
    3c26:	60 91 91 02 	lds	r22, 0x0291
    3c2a:	77 27       	eor	r23, r23
    3c2c:	67 fd       	sbrc	r22, 7
    3c2e:	70 95       	com	r23
    3c30:	86 0f       	add	r24, r22
    3c32:	97 1f       	adc	r25, r23
    3c34:	82 27       	eor	r24, r18
    3c36:	93 27       	eor	r25, r19
    3c38:	52 96       	adiw	r26, 0x12	; 18
    3c3a:	9c 93       	st	X, r25
    3c3c:	8e 93       	st	-X, r24
    3c3e:	51 97       	sbiw	r26, 0x11	; 17
    3c40:	03 80       	ldd	r0, Z+3	; 0x03
    3c42:	f4 81       	ldd	r31, Z+4	; 0x04
    3c44:	e0 2d       	mov	r30, r0
    3c46:	22 81       	ldd	r18, Z+2	; 0x02
    3c48:	33 81       	ldd	r19, Z+3	; 0x03
    3c4a:	21 50       	subi	r18, 0x01	; 1
    3c4c:	30 40       	sbci	r19, 0x00	; 0
    3c4e:	28 23       	and	r18, r24
    3c50:	39 23       	and	r19, r25
    3c52:	c9 01       	movw	r24, r18
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	82 0f       	add	r24, r18
    3c5a:	93 1f       	adc	r25, r19
    3c5c:	88 0f       	add	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	01 90       	ld	r0, Z+
    3c62:	f0 81       	ld	r31, Z
    3c64:	e0 2d       	mov	r30, r0
    3c66:	e8 0f       	add	r30, r24
    3c68:	f9 1f       	adc	r31, r25
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	93 83       	std	Z+3, r25	; 0x03
    3c72:	82 83       	std	Z+2, r24	; 0x02
    3c74:	20 81       	ld	r18, Z
    3c76:	31 81       	ldd	r19, Z+1	; 0x01
    3c78:	1c 96       	adiw	r26, 0x0c	; 12
    3c7a:	3c 93       	st	X, r19
    3c7c:	2e 93       	st	-X, r18
    3c7e:	1b 97       	sbiw	r26, 0x0b	; 11
    3c80:	1a 96       	adiw	r26, 0x0a	; 10
    3c82:	1c 92       	st	X, r1
    3c84:	1e 92       	st	-X, r1
    3c86:	19 97       	sbiw	r26, 0x09	; 9
    3c88:	21 15       	cp	r18, r1
    3c8a:	31 05       	cpc	r19, r1
    3c8c:	29 f0       	breq	.+10     	; 0x3c98 <tankIO_server_disableLeds_register_function+0x1ce>
    3c8e:	d9 01       	movw	r26, r18
    3c90:	17 96       	adiw	r26, 0x07	; 7
    3c92:	5c 93       	st	X, r21
    3c94:	4e 93       	st	-X, r20
    3c96:	16 97       	sbiw	r26, 0x06	; 6
    3c98:	23 e9       	ldi	r18, 0x93	; 147
    3c9a:	32 e0       	ldi	r19, 0x02	; 2
    3c9c:	31 83       	std	Z+1, r19	; 0x01
    3c9e:	20 83       	st	Z, r18
    3ca0:	24 81       	ldd	r18, Z+4	; 0x04
    3ca2:	35 81       	ldd	r19, Z+5	; 0x05
    3ca4:	2f 5f       	subi	r18, 0xFF	; 255
    3ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca8:	a9 01       	movw	r20, r18
    3caa:	44 0f       	add	r20, r20
    3cac:	55 1f       	adc	r21, r21
    3cae:	f3 e0       	ldi	r31, 0x03	; 3
    3cb0:	22 0f       	add	r18, r18
    3cb2:	33 1f       	adc	r19, r19
    3cb4:	fa 95       	dec	r31
    3cb6:	e1 f7       	brne	.-8      	; 0x3cb0 <tankIO_server_disableLeds_register_function+0x1e6>
    3cb8:	42 0f       	add	r20, r18
    3cba:	53 1f       	adc	r21, r19
    3cbc:	84 17       	cp	r24, r20
    3cbe:	95 07       	cpc	r25, r21
    3cc0:	08 f4       	brcc	.+2      	; 0x3cc4 <tankIO_server_disableLeds_register_function+0x1fa>
    3cc2:	c8 c0       	rjmp	.+400    	; 0x3e54 <tankIO_server_disableLeds_register_function+0x38a>
    3cc4:	8a 89       	ldd	r24, Y+18	; 0x12
    3cc6:	9b 89       	ldd	r25, Y+19	; 0x13
    3cc8:	81 30       	cpi	r24, 0x01	; 1
    3cca:	91 05       	cpc	r25, r1
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <tankIO_server_disableLeds_register_function+0x206>
    3cce:	c2 c0       	rjmp	.+388    	; 0x3e54 <tankIO_server_disableLeds_register_function+0x38a>
    3cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cd4:	8c 01       	movw	r16, r24
    3cd6:	00 0f       	add	r16, r16
    3cd8:	11 1f       	adc	r17, r17
    3cda:	08 0f       	add	r16, r24
    3cdc:	19 1f       	adc	r17, r25
    3cde:	00 0f       	add	r16, r16
    3ce0:	11 1f       	adc	r17, r17
    3ce2:	00 0f       	add	r16, r16
    3ce4:	11 1f       	adc	r17, r17
    3ce6:	c8 01       	movw	r24, r16
    3ce8:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3cec:	4c 01       	movw	r8, r24
    3cee:	00 97       	sbiw	r24, 0x00	; 0
    3cf0:	21 f4       	brne	.+8      	; 0x3cfa <tankIO_server_disableLeds_register_function+0x230>
    3cf2:	8f ef       	ldi	r24, 0xFF	; 255
    3cf4:	9f ef       	ldi	r25, 0xFF	; 255
    3cf6:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    3cfa:	60 e0       	ldi	r22, 0x00	; 0
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	a8 01       	movw	r20, r16
    3d00:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    3d04:	0e 81       	ldd	r16, Y+6	; 0x06
    3d06:	1f 81       	ldd	r17, Y+7	; 0x07
    3d08:	6a 80       	ldd	r6, Y+2	; 0x02
    3d0a:	7b 80       	ldd	r7, Y+3	; 0x03
    3d0c:	73 01       	movw	r14, r6
    3d0e:	ee 0c       	add	r14, r14
    3d10:	ff 1c       	adc	r15, r15
    3d12:	08 94       	sec
    3d14:	e1 08       	sbc	r14, r1
    3d16:	f1 08       	sbc	r15, r1
    3d18:	c7 01       	movw	r24, r14
    3d1a:	80 23       	and	r24, r16
    3d1c:	91 23       	and	r25, r17
    3d1e:	21 e0       	ldi	r18, 0x01	; 1
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	11 f4       	brne	.+4      	; 0x3d2a <tankIO_server_disableLeds_register_function+0x260>
    3d26:	20 e0       	ldi	r18, 0x00	; 0
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <tankIO_server_disableLeds_register_function+0x26c>
    3d32:	16 95       	lsr	r17
    3d34:	07 95       	ror	r16
    3d36:	8a 95       	dec	r24
    3d38:	e2 f7       	brpl	.-8      	; 0x3d32 <tankIO_server_disableLeds_register_function+0x268>
    3d3a:	02 0f       	add	r16, r18
    3d3c:	13 1f       	adc	r17, r19
    3d3e:	1d 87       	std	Y+13, r17	; 0x0d
    3d40:	0c 87       	std	Y+12, r16	; 0x0c
    3d42:	1f 86       	std	Y+15, r1	; 0x0f
    3d44:	1e 86       	std	Y+14, r1	; 0x0e
    3d46:	cc 24       	eor	r12, r12
    3d48:	dd 24       	eor	r13, r13
    3d4a:	aa 24       	eor	r10, r10
    3d4c:	bb 24       	eor	r11, r11
    3d4e:	51 c0       	rjmp	.+162    	; 0x3df2 <tankIO_server_disableLeds_register_function+0x328>
    3d50:	8c 0d       	add	r24, r12
    3d52:	9d 1d       	adc	r25, r13
    3d54:	fc 01       	movw	r30, r24
    3d56:	20 81       	ld	r18, Z
    3d58:	31 81       	ldd	r19, Z+1	; 0x01
    3d5a:	40 c0       	rjmp	.+128    	; 0x3ddc <tankIO_server_disableLeds_register_function+0x312>
    3d5c:	d9 01       	movw	r26, r18
    3d5e:	18 96       	adiw	r26, 0x08	; 8
    3d60:	5c 90       	ld	r5, X
    3d62:	18 97       	sbiw	r26, 0x08	; 8
    3d64:	19 96       	adiw	r26, 0x09	; 9
    3d66:	4c 90       	ld	r4, X
    3d68:	19 97       	sbiw	r26, 0x09	; 9
    3d6a:	1e 96       	adiw	r26, 0x0e	; 14
    3d6c:	8d 91       	ld	r24, X+
    3d6e:	9c 91       	ld	r25, X
    3d70:	1f 97       	sbiw	r26, 0x0f	; 15
    3d72:	8e 21       	and	r24, r14
    3d74:	9f 21       	and	r25, r15
    3d76:	fc 01       	movw	r30, r24
    3d78:	ee 0f       	add	r30, r30
    3d7a:	ff 1f       	adc	r31, r31
    3d7c:	e8 0f       	add	r30, r24
    3d7e:	f9 1f       	adc	r31, r25
    3d80:	ee 0f       	add	r30, r30
    3d82:	ff 1f       	adc	r31, r31
    3d84:	e8 0d       	add	r30, r8
    3d86:	f9 1d       	adc	r31, r9
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	93 81       	ldd	r25, Z+3	; 0x03
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	93 83       	std	Z+3, r25	; 0x03
    3d90:	82 83       	std	Z+2, r24	; 0x02
    3d92:	08 17       	cp	r16, r24
    3d94:	19 07       	cpc	r17, r25
    3d96:	58 f4       	brcc	.+22     	; 0x3dae <tankIO_server_disableLeds_register_function+0x2e4>
    3d98:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3d9c:	4f 5f       	subi	r20, 0xFF	; 255
    3d9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3da0:	5f 87       	std	Y+15, r21	; 0x0f
    3da2:	4e 87       	std	Y+14, r20	; 0x0e
    3da4:	b8 01       	movw	r22, r16
    3da6:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    3daa:	75 83       	std	Z+5, r23	; 0x05
    3dac:	64 83       	std	Z+4, r22	; 0x04
    3dae:	d9 01       	movw	r26, r18
    3db0:	17 96       	adiw	r26, 0x07	; 7
    3db2:	1c 92       	st	X, r1
    3db4:	1e 92       	st	-X, r1
    3db6:	16 97       	sbiw	r26, 0x06	; 6
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	19 96       	adiw	r26, 0x09	; 9
    3dbe:	9c 93       	st	X, r25
    3dc0:	8e 93       	st	-X, r24
    3dc2:	18 97       	sbiw	r26, 0x08	; 8
    3dc4:	00 97       	sbiw	r24, 0x00	; 0
    3dc6:	29 f0       	breq	.+10     	; 0x3dd2 <tankIO_server_disableLeds_register_function+0x308>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	17 96       	adiw	r26, 0x07	; 7
    3dcc:	3c 93       	st	X, r19
    3dce:	2e 93       	st	-X, r18
    3dd0:	16 97       	sbiw	r26, 0x06	; 6
    3dd2:	31 83       	std	Z+1, r19	; 0x01
    3dd4:	20 83       	st	Z, r18
    3dd6:	c2 01       	movw	r24, r4
    3dd8:	29 2f       	mov	r18, r25
    3dda:	34 2d       	mov	r19, r4
    3ddc:	21 15       	cp	r18, r1
    3dde:	31 05       	cpc	r19, r1
    3de0:	09 f0       	breq	.+2      	; 0x3de4 <tankIO_server_disableLeds_register_function+0x31a>
    3de2:	bc cf       	rjmp	.-136    	; 0x3d5c <tankIO_server_disableLeds_register_function+0x292>
    3de4:	08 94       	sec
    3de6:	a1 1c       	adc	r10, r1
    3de8:	b1 1c       	adc	r11, r1
    3dea:	e6 e0       	ldi	r30, 0x06	; 6
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	ce 0e       	add	r12, r30
    3df0:	df 1e       	adc	r13, r31
    3df2:	88 81       	ld	r24, Y
    3df4:	99 81       	ldd	r25, Y+1	; 0x01
    3df6:	a6 14       	cp	r10, r6
    3df8:	b7 04       	cpc	r11, r7
    3dfa:	08 f4       	brcc	.+2      	; 0x3dfe <tankIO_server_disableLeds_register_function+0x334>
    3dfc:	a9 cf       	rjmp	.-174    	; 0x3d50 <tankIO_server_disableLeds_register_function+0x286>
    3dfe:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    3e02:	e0 91 93 02 	lds	r30, 0x0293
    3e06:	f0 91 94 02 	lds	r31, 0x0294
    3e0a:	82 81       	ldd	r24, Z+2	; 0x02
    3e0c:	93 81       	ldd	r25, Z+3	; 0x03
    3e0e:	88 0f       	add	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	93 83       	std	Z+3, r25	; 0x03
    3e14:	82 83       	std	Z+2, r24	; 0x02
    3e16:	84 81       	ldd	r24, Z+4	; 0x04
    3e18:	95 81       	ldd	r25, Z+5	; 0x05
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	95 83       	std	Z+5, r25	; 0x05
    3e1e:	84 83       	std	Z+4, r24	; 0x04
    3e20:	91 82       	std	Z+1, r9	; 0x01
    3e22:	80 82       	st	Z, r8
    3e24:	86 81       	ldd	r24, Z+6	; 0x06
    3e26:	97 81       	ldd	r25, Z+7	; 0x07
    3e28:	96 95       	lsr	r25
    3e2a:	87 95       	ror	r24
    3e2c:	26 85       	ldd	r18, Z+14	; 0x0e
    3e2e:	37 85       	ldd	r19, Z+15	; 0x0f
    3e30:	82 17       	cp	r24, r18
    3e32:	93 07       	cpc	r25, r19
    3e34:	20 f4       	brcc	.+8      	; 0x3e3e <tankIO_server_disableLeds_register_function+0x374>
    3e36:	80 89       	ldd	r24, Z+16	; 0x10
    3e38:	91 89       	ldd	r25, Z+17	; 0x11
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	02 c0       	rjmp	.+4      	; 0x3e42 <tankIO_server_disableLeds_register_function+0x378>
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	91 8b       	std	Z+17, r25	; 0x11
    3e44:	80 8b       	std	Z+16, r24	; 0x10
    3e46:	82 30       	cpi	r24, 0x02	; 2
    3e48:	91 05       	cpc	r25, r1
    3e4a:	20 f0       	brcs	.+8      	; 0x3e54 <tankIO_server_disableLeds_register_function+0x38a>
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	93 8b       	std	Z+19, r25	; 0x13
    3e52:	82 8b       	std	Z+18, r24	; 0x12
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	ff 90       	pop	r15
    3e5e:	ef 90       	pop	r14
    3e60:	df 90       	pop	r13
    3e62:	cf 90       	pop	r12
    3e64:	bf 90       	pop	r11
    3e66:	af 90       	pop	r10
    3e68:	9f 90       	pop	r9
    3e6a:	8f 90       	pop	r8
    3e6c:	7f 90       	pop	r7
    3e6e:	6f 90       	pop	r6
    3e70:	5f 90       	pop	r5
    3e72:	4f 90       	pop	r4
    3e74:	08 95       	ret

00003e76 <tankIO_server_blinkLed>:

// ==
// blink**
// ==

void tankIO_server_blinkLed(BlinkLedParam *param, uint16_t size) {
    3e76:	cf 93       	push	r28
    3e78:	df 93       	push	r29
    3e7a:	ec 01       	movw	r28, r24
	blinkLed(toLed(param->led), param->times);
    3e7c:	68 81       	ld	r22, Y
    3e7e:	79 81       	ldd	r23, Y+1	; 0x01
    3e80:	8a 81       	ldd	r24, Y+2	; 0x02
    3e82:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <toLed>
    3e86:	6b 81       	ldd	r22, Y+3	; 0x03
    3e88:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <blinkLed>
}
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	08 95       	ret

00003e92 <tankIO_server_blinkLed_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	ec 01       	movw	r28, r24
    3e98:	6a 81       	ldd	r22, Y+2	; 0x02
    3e9a:	7b 81       	ldd	r23, Y+3	; 0x03
    3e9c:	88 81       	ld	r24, Y
    3e9e:	99 81       	ldd	r25, Y+1	; 0x01
    3ea0:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <tankIO_server_blinkLed>
    3ea4:	1b 82       	std	Y+3, r1	; 0x03
    3ea6:	1a 82       	std	Y+2, r1	; 0x02
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	08 95       	ret

00003eae <tankIO_server_blinkLed_register_function>:
    3eae:	4f 92       	push	r4
    3eb0:	5f 92       	push	r5
    3eb2:	6f 92       	push	r6
    3eb4:	7f 92       	push	r7
    3eb6:	8f 92       	push	r8
    3eb8:	9f 92       	push	r9
    3eba:	af 92       	push	r10
    3ebc:	bf 92       	push	r11
    3ebe:	cf 92       	push	r12
    3ec0:	df 92       	push	r13
    3ec2:	ef 92       	push	r14
    3ec4:	ff 92       	push	r15
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	cf 93       	push	r28
    3ecc:	df 93       	push	r29
    3ece:	10 92 ab 02 	sts	0x02AB, r1
    3ed2:	10 92 aa 02 	sts	0x02AA, r1
    3ed6:	e3 ea       	ldi	r30, 0xA3	; 163
    3ed8:	f2 e0       	ldi	r31, 0x02	; 2
    3eda:	f0 93 b1 02 	sts	0x02B1, r31
    3ede:	e0 93 b0 02 	sts	0x02B0, r30
    3ee2:	82 e0       	ldi	r24, 0x02	; 2
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	90 93 b3 02 	sts	0x02B3, r25
    3eea:	80 93 b2 02 	sts	0x02B2, r24
    3eee:	a0 91 9c 03 	lds	r26, 0x039C
    3ef2:	b0 91 9d 03 	lds	r27, 0x039D
    3ef6:	8f 01       	movw	r16, r30
    3ef8:	0d 5f       	subi	r16, 0xFD	; 253
    3efa:	1f 4f       	sbci	r17, 0xFF	; 255
    3efc:	10 97       	sbiw	r26, 0x00	; 0
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <tankIO_server_blinkLed_register_function+0x54>
    3f00:	49 c0       	rjmp	.+146    	; 0x3f94 <tankIO_server_blinkLed_register_function+0xe6>
    3f02:	f0 93 9d 03 	sts	0x039D, r31
    3f06:	e0 93 9c 03 	sts	0x039C, r30
    3f0a:	10 92 a9 02 	sts	0x02A9, r1
    3f0e:	10 92 a8 02 	sts	0x02A8, r1
    3f12:	88 e1       	ldi	r24, 0x18	; 24
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3f1a:	90 93 a7 02 	sts	0x02A7, r25
    3f1e:	80 93 a6 02 	sts	0x02A6, r24
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	09 f4       	brne	.+2      	; 0x3f28 <tankIO_server_blinkLed_register_function+0x7a>
    3f26:	d7 c0       	rjmp	.+430    	; 0x40d6 <tankIO_server_blinkLed_register_function+0x228>
    3f28:	e8 2f       	mov	r30, r24
    3f2a:	f9 2f       	mov	r31, r25
    3f2c:	88 e1       	ldi	r24, 0x18	; 24
    3f2e:	df 01       	movw	r26, r30
    3f30:	1d 92       	st	X+, r1
    3f32:	8a 95       	dec	r24
    3f34:	e9 f7       	brne	.-6      	; 0x3f30 <tankIO_server_blinkLed_register_function+0x82>
    3f36:	c0 91 a6 02 	lds	r28, 0x02A6
    3f3a:	d0 91 a7 02 	lds	r29, 0x02A7
    3f3e:	19 87       	std	Y+9, r17	; 0x09
    3f40:	08 87       	std	Y+8, r16	; 0x08
    3f42:	80 e2       	ldi	r24, 0x20	; 32
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	9b 83       	std	Y+3, r25	; 0x03
    3f48:	8a 83       	std	Y+2, r24	; 0x02
    3f4a:	85 e0       	ldi	r24, 0x05	; 5
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	9d 83       	std	Y+5, r25	; 0x05
    3f50:	8c 83       	std	Y+4, r24	; 0x04
    3f52:	83 e0       	ldi	r24, 0x03	; 3
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	9b 87       	std	Y+11, r25	; 0x0b
    3f58:	8a 87       	std	Y+10, r24	; 0x0a
    3f5a:	80 ec       	ldi	r24, 0xC0	; 192
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    3f62:	99 83       	std	Y+1, r25	; 0x01
    3f64:	88 83       	st	Y, r24
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <tankIO_server_blinkLed_register_function+0xbe>
    3f6a:	b5 c0       	rjmp	.+362    	; 0x40d6 <tankIO_server_blinkLed_register_function+0x228>
    3f6c:	e8 2f       	mov	r30, r24
    3f6e:	f9 2f       	mov	r31, r25
    3f70:	80 ec       	ldi	r24, 0xC0	; 192
    3f72:	df 01       	movw	r26, r30
    3f74:	1d 92       	st	X+, r1
    3f76:	8a 95       	dec	r24
    3f78:	e9 f7       	brne	.-6      	; 0x3f74 <tankIO_server_blinkLed_register_function+0xc6>
    3f7a:	e0 91 a6 02 	lds	r30, 0x02A6
    3f7e:	f0 91 a7 02 	lds	r31, 0x02A7
    3f82:	81 ee       	ldi	r24, 0xE1	; 225
    3f84:	9f e1       	ldi	r25, 0x1F	; 31
    3f86:	a1 e1       	ldi	r26, 0x11	; 17
    3f88:	b0 ea       	ldi	r27, 0xA0	; 160
    3f8a:	84 8b       	std	Z+20, r24	; 0x14
    3f8c:	95 8b       	std	Z+21, r25	; 0x15
    3f8e:	a6 8b       	std	Z+22, r26	; 0x16
    3f90:	b7 8b       	std	Z+23, r27	; 0x17
    3f92:	16 c0       	rjmp	.+44     	; 0x3fc0 <tankIO_server_blinkLed_register_function+0x112>
    3f94:	13 96       	adiw	r26, 0x03	; 3
    3f96:	0d 90       	ld	r0, X+
    3f98:	bc 91       	ld	r27, X
    3f9a:	a0 2d       	mov	r26, r0
    3f9c:	18 96       	adiw	r26, 0x08	; 8
    3f9e:	cd 91       	ld	r28, X+
    3fa0:	dc 91       	ld	r29, X
    3fa2:	19 97       	sbiw	r26, 0x09	; 9
    3fa4:	fd 83       	std	Y+5, r31	; 0x05
    3fa6:	ec 83       	std	Y+4, r30	; 0x04
    3fa8:	1a 96       	adiw	r26, 0x0a	; 10
    3faa:	8d 91       	ld	r24, X+
    3fac:	9c 91       	ld	r25, X
    3fae:	1b 97       	sbiw	r26, 0x0b	; 11
    3fb0:	c8 1b       	sub	r28, r24
    3fb2:	d9 0b       	sbc	r29, r25
    3fb4:	d6 83       	std	Z+6, r29	; 0x06
    3fb6:	c5 83       	std	Z+5, r28	; 0x05
    3fb8:	19 96       	adiw	r26, 0x09	; 9
    3fba:	1c 93       	st	X, r17
    3fbc:	0e 93       	st	-X, r16
    3fbe:	18 97       	sbiw	r26, 0x08	; 8
    3fc0:	e0 91 9c 03 	lds	r30, 0x039C
    3fc4:	f0 91 9d 03 	lds	r31, 0x039D
    3fc8:	c3 81       	ldd	r28, Z+3	; 0x03
    3fca:	d4 81       	ldd	r29, Z+4	; 0x04
    3fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    3fce:	9f 81       	ldd	r25, Y+7	; 0x07
    3fd0:	01 96       	adiw	r24, 0x01	; 1
    3fd2:	9f 83       	std	Y+7, r25	; 0x07
    3fd4:	8e 83       	std	Y+6, r24	; 0x06
    3fd6:	46 ea       	ldi	r20, 0xA6	; 166
    3fd8:	52 e0       	ldi	r21, 0x02	; 2
    3fda:	d0 93 a7 02 	sts	0x02A7, r29
    3fde:	c0 93 a6 02 	sts	0x02A6, r28
    3fe2:	da 01       	movw	r26, r20
    3fe4:	13 97       	sbiw	r26, 0x03	; 3
    3fe6:	20 91 a3 02 	lds	r18, 0x02A3
    3fea:	33 27       	eor	r19, r19
    3fec:	27 fd       	sbrc	r18, 7
    3fee:	30 95       	com	r19
    3ff0:	c9 01       	movw	r24, r18
    3ff2:	96 95       	lsr	r25
    3ff4:	87 95       	ror	r24
    3ff6:	96 95       	lsr	r25
    3ff8:	87 95       	ror	r24
    3ffa:	b9 01       	movw	r22, r18
    3ffc:	15 e0       	ldi	r17, 0x05	; 5
    3ffe:	66 0f       	add	r22, r22
    4000:	77 1f       	adc	r23, r23
    4002:	1a 95       	dec	r17
    4004:	e1 f7       	brne	.-8      	; 0x3ffe <tankIO_server_blinkLed_register_function+0x150>
    4006:	86 0f       	add	r24, r22
    4008:	97 1f       	adc	r25, r23
    400a:	60 91 a4 02 	lds	r22, 0x02A4
    400e:	77 27       	eor	r23, r23
    4010:	67 fd       	sbrc	r22, 7
    4012:	70 95       	com	r23
    4014:	86 0f       	add	r24, r22
    4016:	97 1f       	adc	r25, r23
    4018:	82 27       	eor	r24, r18
    401a:	93 27       	eor	r25, r19
    401c:	52 96       	adiw	r26, 0x12	; 18
    401e:	9c 93       	st	X, r25
    4020:	8e 93       	st	-X, r24
    4022:	51 97       	sbiw	r26, 0x11	; 17
    4024:	03 80       	ldd	r0, Z+3	; 0x03
    4026:	f4 81       	ldd	r31, Z+4	; 0x04
    4028:	e0 2d       	mov	r30, r0
    402a:	22 81       	ldd	r18, Z+2	; 0x02
    402c:	33 81       	ldd	r19, Z+3	; 0x03
    402e:	21 50       	subi	r18, 0x01	; 1
    4030:	30 40       	sbci	r19, 0x00	; 0
    4032:	28 23       	and	r18, r24
    4034:	39 23       	and	r19, r25
    4036:	c9 01       	movw	r24, r18
    4038:	88 0f       	add	r24, r24
    403a:	99 1f       	adc	r25, r25
    403c:	82 0f       	add	r24, r18
    403e:	93 1f       	adc	r25, r19
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	01 90       	ld	r0, Z+
    4046:	f0 81       	ld	r31, Z
    4048:	e0 2d       	mov	r30, r0
    404a:	e8 0f       	add	r30, r24
    404c:	f9 1f       	adc	r31, r25
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	01 96       	adiw	r24, 0x01	; 1
    4054:	93 83       	std	Z+3, r25	; 0x03
    4056:	82 83       	std	Z+2, r24	; 0x02
    4058:	20 81       	ld	r18, Z
    405a:	31 81       	ldd	r19, Z+1	; 0x01
    405c:	1c 96       	adiw	r26, 0x0c	; 12
    405e:	3c 93       	st	X, r19
    4060:	2e 93       	st	-X, r18
    4062:	1b 97       	sbiw	r26, 0x0b	; 11
    4064:	1a 96       	adiw	r26, 0x0a	; 10
    4066:	1c 92       	st	X, r1
    4068:	1e 92       	st	-X, r1
    406a:	19 97       	sbiw	r26, 0x09	; 9
    406c:	21 15       	cp	r18, r1
    406e:	31 05       	cpc	r19, r1
    4070:	29 f0       	breq	.+10     	; 0x407c <tankIO_server_blinkLed_register_function+0x1ce>
    4072:	d9 01       	movw	r26, r18
    4074:	17 96       	adiw	r26, 0x07	; 7
    4076:	5c 93       	st	X, r21
    4078:	4e 93       	st	-X, r20
    407a:	16 97       	sbiw	r26, 0x06	; 6
    407c:	26 ea       	ldi	r18, 0xA6	; 166
    407e:	32 e0       	ldi	r19, 0x02	; 2
    4080:	31 83       	std	Z+1, r19	; 0x01
    4082:	20 83       	st	Z, r18
    4084:	24 81       	ldd	r18, Z+4	; 0x04
    4086:	35 81       	ldd	r19, Z+5	; 0x05
    4088:	2f 5f       	subi	r18, 0xFF	; 255
    408a:	3f 4f       	sbci	r19, 0xFF	; 255
    408c:	a9 01       	movw	r20, r18
    408e:	44 0f       	add	r20, r20
    4090:	55 1f       	adc	r21, r21
    4092:	f3 e0       	ldi	r31, 0x03	; 3
    4094:	22 0f       	add	r18, r18
    4096:	33 1f       	adc	r19, r19
    4098:	fa 95       	dec	r31
    409a:	e1 f7       	brne	.-8      	; 0x4094 <tankIO_server_blinkLed_register_function+0x1e6>
    409c:	42 0f       	add	r20, r18
    409e:	53 1f       	adc	r21, r19
    40a0:	84 17       	cp	r24, r20
    40a2:	95 07       	cpc	r25, r21
    40a4:	08 f4       	brcc	.+2      	; 0x40a8 <tankIO_server_blinkLed_register_function+0x1fa>
    40a6:	c8 c0       	rjmp	.+400    	; 0x4238 <__stack+0x139>
    40a8:	8a 89       	ldd	r24, Y+18	; 0x12
    40aa:	9b 89       	ldd	r25, Y+19	; 0x13
    40ac:	81 30       	cpi	r24, 0x01	; 1
    40ae:	91 05       	cpc	r25, r1
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <tankIO_server_blinkLed_register_function+0x206>
    40b2:	c2 c0       	rjmp	.+388    	; 0x4238 <__stack+0x139>
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	9b 81       	ldd	r25, Y+3	; 0x03
    40b8:	8c 01       	movw	r16, r24
    40ba:	00 0f       	add	r16, r16
    40bc:	11 1f       	adc	r17, r17
    40be:	08 0f       	add	r16, r24
    40c0:	19 1f       	adc	r17, r25
    40c2:	00 0f       	add	r16, r16
    40c4:	11 1f       	adc	r17, r17
    40c6:	00 0f       	add	r16, r16
    40c8:	11 1f       	adc	r17, r17
    40ca:	c8 01       	movw	r24, r16
    40cc:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    40d0:	4c 01       	movw	r8, r24
    40d2:	00 97       	sbiw	r24, 0x00	; 0
    40d4:	21 f4       	brne	.+8      	; 0x40de <tankIO_server_blinkLed_register_function+0x230>
    40d6:	8f ef       	ldi	r24, 0xFF	; 255
    40d8:	9f ef       	ldi	r25, 0xFF	; 255
    40da:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    40de:	60 e0       	ldi	r22, 0x00	; 0
    40e0:	70 e0       	ldi	r23, 0x00	; 0
    40e2:	a8 01       	movw	r20, r16
    40e4:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    40e8:	0e 81       	ldd	r16, Y+6	; 0x06
    40ea:	1f 81       	ldd	r17, Y+7	; 0x07
    40ec:	6a 80       	ldd	r6, Y+2	; 0x02
    40ee:	7b 80       	ldd	r7, Y+3	; 0x03
    40f0:	73 01       	movw	r14, r6
    40f2:	ee 0c       	add	r14, r14
    40f4:	ff 1c       	adc	r15, r15
    40f6:	08 94       	sec
    40f8:	e1 08       	sbc	r14, r1
    40fa:	f1 08       	sbc	r15, r1
    40fc:	c7 01       	movw	r24, r14
    40fe:	80 23       	and	r24, r16
    4100:	91 23       	and	r25, r17
    4102:	21 e0       	ldi	r18, 0x01	; 1
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	00 97       	sbiw	r24, 0x00	; 0
    4108:	11 f4       	brne	.+4      	; 0x410e <__stack+0xf>
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	8c 81       	ldd	r24, Y+4	; 0x04
    4110:	9d 81       	ldd	r25, Y+5	; 0x05
    4112:	01 96       	adiw	r24, 0x01	; 1
    4114:	02 c0       	rjmp	.+4      	; 0x411a <__stack+0x1b>
    4116:	16 95       	lsr	r17
    4118:	07 95       	ror	r16
    411a:	8a 95       	dec	r24
    411c:	e2 f7       	brpl	.-8      	; 0x4116 <__stack+0x17>
    411e:	02 0f       	add	r16, r18
    4120:	13 1f       	adc	r17, r19
    4122:	1d 87       	std	Y+13, r17	; 0x0d
    4124:	0c 87       	std	Y+12, r16	; 0x0c
    4126:	1f 86       	std	Y+15, r1	; 0x0f
    4128:	1e 86       	std	Y+14, r1	; 0x0e
    412a:	cc 24       	eor	r12, r12
    412c:	dd 24       	eor	r13, r13
    412e:	aa 24       	eor	r10, r10
    4130:	bb 24       	eor	r11, r11
    4132:	51 c0       	rjmp	.+162    	; 0x41d6 <__stack+0xd7>
    4134:	8c 0d       	add	r24, r12
    4136:	9d 1d       	adc	r25, r13
    4138:	fc 01       	movw	r30, r24
    413a:	20 81       	ld	r18, Z
    413c:	31 81       	ldd	r19, Z+1	; 0x01
    413e:	40 c0       	rjmp	.+128    	; 0x41c0 <__stack+0xc1>
    4140:	d9 01       	movw	r26, r18
    4142:	18 96       	adiw	r26, 0x08	; 8
    4144:	5c 90       	ld	r5, X
    4146:	18 97       	sbiw	r26, 0x08	; 8
    4148:	19 96       	adiw	r26, 0x09	; 9
    414a:	4c 90       	ld	r4, X
    414c:	19 97       	sbiw	r26, 0x09	; 9
    414e:	1e 96       	adiw	r26, 0x0e	; 14
    4150:	8d 91       	ld	r24, X+
    4152:	9c 91       	ld	r25, X
    4154:	1f 97       	sbiw	r26, 0x0f	; 15
    4156:	8e 21       	and	r24, r14
    4158:	9f 21       	and	r25, r15
    415a:	fc 01       	movw	r30, r24
    415c:	ee 0f       	add	r30, r30
    415e:	ff 1f       	adc	r31, r31
    4160:	e8 0f       	add	r30, r24
    4162:	f9 1f       	adc	r31, r25
    4164:	ee 0f       	add	r30, r30
    4166:	ff 1f       	adc	r31, r31
    4168:	e8 0d       	add	r30, r8
    416a:	f9 1d       	adc	r31, r9
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	01 96       	adiw	r24, 0x01	; 1
    4172:	93 83       	std	Z+3, r25	; 0x03
    4174:	82 83       	std	Z+2, r24	; 0x02
    4176:	08 17       	cp	r16, r24
    4178:	19 07       	cpc	r17, r25
    417a:	58 f4       	brcc	.+22     	; 0x4192 <__stack+0x93>
    417c:	4e 85       	ldd	r20, Y+14	; 0x0e
    417e:	5f 85       	ldd	r21, Y+15	; 0x0f
    4180:	4f 5f       	subi	r20, 0xFF	; 255
    4182:	5f 4f       	sbci	r21, 0xFF	; 255
    4184:	5f 87       	std	Y+15, r21	; 0x0f
    4186:	4e 87       	std	Y+14, r20	; 0x0e
    4188:	b8 01       	movw	r22, r16
    418a:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    418e:	75 83       	std	Z+5, r23	; 0x05
    4190:	64 83       	std	Z+4, r22	; 0x04
    4192:	d9 01       	movw	r26, r18
    4194:	17 96       	adiw	r26, 0x07	; 7
    4196:	1c 92       	st	X, r1
    4198:	1e 92       	st	-X, r1
    419a:	16 97       	sbiw	r26, 0x06	; 6
    419c:	80 81       	ld	r24, Z
    419e:	91 81       	ldd	r25, Z+1	; 0x01
    41a0:	19 96       	adiw	r26, 0x09	; 9
    41a2:	9c 93       	st	X, r25
    41a4:	8e 93       	st	-X, r24
    41a6:	18 97       	sbiw	r26, 0x08	; 8
    41a8:	00 97       	sbiw	r24, 0x00	; 0
    41aa:	29 f0       	breq	.+10     	; 0x41b6 <__stack+0xb7>
    41ac:	dc 01       	movw	r26, r24
    41ae:	17 96       	adiw	r26, 0x07	; 7
    41b0:	3c 93       	st	X, r19
    41b2:	2e 93       	st	-X, r18
    41b4:	16 97       	sbiw	r26, 0x06	; 6
    41b6:	31 83       	std	Z+1, r19	; 0x01
    41b8:	20 83       	st	Z, r18
    41ba:	c2 01       	movw	r24, r4
    41bc:	29 2f       	mov	r18, r25
    41be:	34 2d       	mov	r19, r4
    41c0:	21 15       	cp	r18, r1
    41c2:	31 05       	cpc	r19, r1
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <__stack+0xc9>
    41c6:	bc cf       	rjmp	.-136    	; 0x4140 <__stack+0x41>
    41c8:	08 94       	sec
    41ca:	a1 1c       	adc	r10, r1
    41cc:	b1 1c       	adc	r11, r1
    41ce:	e6 e0       	ldi	r30, 0x06	; 6
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	ce 0e       	add	r12, r30
    41d4:	df 1e       	adc	r13, r31
    41d6:	88 81       	ld	r24, Y
    41d8:	99 81       	ldd	r25, Y+1	; 0x01
    41da:	a6 14       	cp	r10, r6
    41dc:	b7 04       	cpc	r11, r7
    41de:	08 f4       	brcc	.+2      	; 0x41e2 <__stack+0xe3>
    41e0:	a9 cf       	rjmp	.-174    	; 0x4134 <__stack+0x35>
    41e2:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    41e6:	e0 91 a6 02 	lds	r30, 0x02A6
    41ea:	f0 91 a7 02 	lds	r31, 0x02A7
    41ee:	82 81       	ldd	r24, Z+2	; 0x02
    41f0:	93 81       	ldd	r25, Z+3	; 0x03
    41f2:	88 0f       	add	r24, r24
    41f4:	99 1f       	adc	r25, r25
    41f6:	93 83       	std	Z+3, r25	; 0x03
    41f8:	82 83       	std	Z+2, r24	; 0x02
    41fa:	84 81       	ldd	r24, Z+4	; 0x04
    41fc:	95 81       	ldd	r25, Z+5	; 0x05
    41fe:	01 96       	adiw	r24, 0x01	; 1
    4200:	95 83       	std	Z+5, r25	; 0x05
    4202:	84 83       	std	Z+4, r24	; 0x04
    4204:	91 82       	std	Z+1, r9	; 0x01
    4206:	80 82       	st	Z, r8
    4208:	86 81       	ldd	r24, Z+6	; 0x06
    420a:	97 81       	ldd	r25, Z+7	; 0x07
    420c:	96 95       	lsr	r25
    420e:	87 95       	ror	r24
    4210:	26 85       	ldd	r18, Z+14	; 0x0e
    4212:	37 85       	ldd	r19, Z+15	; 0x0f
    4214:	82 17       	cp	r24, r18
    4216:	93 07       	cpc	r25, r19
    4218:	20 f4       	brcc	.+8      	; 0x4222 <__stack+0x123>
    421a:	80 89       	ldd	r24, Z+16	; 0x10
    421c:	91 89       	ldd	r25, Z+17	; 0x11
    421e:	01 96       	adiw	r24, 0x01	; 1
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <__stack+0x127>
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	91 8b       	std	Z+17, r25	; 0x11
    4228:	80 8b       	std	Z+16, r24	; 0x10
    422a:	82 30       	cpi	r24, 0x02	; 2
    422c:	91 05       	cpc	r25, r1
    422e:	20 f0       	brcs	.+8      	; 0x4238 <__stack+0x139>
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	93 8b       	std	Z+19, r25	; 0x13
    4236:	82 8b       	std	Z+18, r24	; 0x12
    4238:	df 91       	pop	r29
    423a:	cf 91       	pop	r28
    423c:	1f 91       	pop	r17
    423e:	0f 91       	pop	r16
    4240:	ff 90       	pop	r15
    4242:	ef 90       	pop	r14
    4244:	df 90       	pop	r13
    4246:	cf 90       	pop	r12
    4248:	bf 90       	pop	r11
    424a:	af 90       	pop	r10
    424c:	9f 90       	pop	r9
    424e:	8f 90       	pop	r8
    4250:	7f 90       	pop	r7
    4252:	6f 90       	pop	r6
    4254:	5f 90       	pop	r5
    4256:	4f 90       	pop	r4
    4258:	08 95       	ret

0000425a <tankIO_server_blinkLeds>:

void tankIO_server_blinkLeds(BlinkLedsParam *param, uint16_t size) {
    425a:	fc 01       	movw	r30, r24
	blinkLeds(toLedGroup(param->leds.leds), param->leds.mask, param->times);
    425c:	a0 81       	ld	r26, Z
    425e:	b1 81       	ldd	r27, Z+1	; 0x01
    4260:	a8 30       	cpi	r26, 0x08	; 8
    4262:	b1 05       	cpc	r27, r1
    4264:	40 f4       	brcc	.+16     	; 0x4276 <tankIO_server_blinkLeds+0x1c>
    4266:	aa 0f       	add	r26, r26
    4268:	bb 1f       	adc	r27, r27
    426a:	a2 59       	subi	r26, 0x92	; 146
    426c:	bc 4f       	sbci	r27, 0xFC	; 252
    426e:	8d 91       	ld	r24, X+
    4270:	9c 91       	ld	r25, X
    4272:	11 97       	sbiw	r26, 0x01	; 1
    4274:	02 c0       	rjmp	.+4      	; 0x427a <tankIO_server_blinkLeds+0x20>
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	62 81       	ldd	r22, Z+2	; 0x02
    427c:	73 81       	ldd	r23, Z+3	; 0x03
    427e:	44 81       	ldd	r20, Z+4	; 0x04
    4280:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <blinkLeds>
}
    4284:	08 95       	ret

00004286 <tankIO_server_blinkLeds_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	ec 01       	movw	r28, r24
    428c:	6a 81       	ldd	r22, Y+2	; 0x02
    428e:	7b 81       	ldd	r23, Y+3	; 0x03
    4290:	88 81       	ld	r24, Y
    4292:	99 81       	ldd	r25, Y+1	; 0x01
    4294:	0e 94 2d 21 	call	0x425a	; 0x425a <tankIO_server_blinkLeds>
    4298:	1b 82       	std	Y+3, r1	; 0x03
    429a:	1a 82       	std	Y+2, r1	; 0x02
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	08 95       	ret

000042a2 <tankIO_server_blinkLeds_register_function>:
    42a2:	4f 92       	push	r4
    42a4:	5f 92       	push	r5
    42a6:	6f 92       	push	r6
    42a8:	7f 92       	push	r7
    42aa:	8f 92       	push	r8
    42ac:	9f 92       	push	r9
    42ae:	af 92       	push	r10
    42b0:	bf 92       	push	r11
    42b2:	cf 92       	push	r12
    42b4:	df 92       	push	r13
    42b6:	ef 92       	push	r14
    42b8:	ff 92       	push	r15
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	10 92 be 02 	sts	0x02BE, r1
    42c6:	10 92 bd 02 	sts	0x02BD, r1
    42ca:	e6 eb       	ldi	r30, 0xB6	; 182
    42cc:	f2 e0       	ldi	r31, 0x02	; 2
    42ce:	f0 93 c4 02 	sts	0x02C4, r31
    42d2:	e0 93 c3 02 	sts	0x02C3, r30
    42d6:	82 e0       	ldi	r24, 0x02	; 2
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	90 93 c6 02 	sts	0x02C6, r25
    42de:	80 93 c5 02 	sts	0x02C5, r24
    42e2:	a0 91 9c 03 	lds	r26, 0x039C
    42e6:	b0 91 9d 03 	lds	r27, 0x039D
    42ea:	8f 01       	movw	r16, r30
    42ec:	0d 5f       	subi	r16, 0xFD	; 253
    42ee:	1f 4f       	sbci	r17, 0xFF	; 255
    42f0:	10 97       	sbiw	r26, 0x00	; 0
    42f2:	09 f0       	breq	.+2      	; 0x42f6 <tankIO_server_blinkLeds_register_function+0x54>
    42f4:	49 c0       	rjmp	.+146    	; 0x4388 <tankIO_server_blinkLeds_register_function+0xe6>
    42f6:	f0 93 9d 03 	sts	0x039D, r31
    42fa:	e0 93 9c 03 	sts	0x039C, r30
    42fe:	10 92 bc 02 	sts	0x02BC, r1
    4302:	10 92 bb 02 	sts	0x02BB, r1
    4306:	88 e1       	ldi	r24, 0x18	; 24
    4308:	90 e0       	ldi	r25, 0x00	; 0
    430a:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    430e:	90 93 ba 02 	sts	0x02BA, r25
    4312:	80 93 b9 02 	sts	0x02B9, r24
    4316:	00 97       	sbiw	r24, 0x00	; 0
    4318:	09 f4       	brne	.+2      	; 0x431c <tankIO_server_blinkLeds_register_function+0x7a>
    431a:	d7 c0       	rjmp	.+430    	; 0x44ca <tankIO_server_blinkLeds_register_function+0x228>
    431c:	e8 2f       	mov	r30, r24
    431e:	f9 2f       	mov	r31, r25
    4320:	88 e1       	ldi	r24, 0x18	; 24
    4322:	df 01       	movw	r26, r30
    4324:	1d 92       	st	X+, r1
    4326:	8a 95       	dec	r24
    4328:	e9 f7       	brne	.-6      	; 0x4324 <tankIO_server_blinkLeds_register_function+0x82>
    432a:	c0 91 b9 02 	lds	r28, 0x02B9
    432e:	d0 91 ba 02 	lds	r29, 0x02BA
    4332:	19 87       	std	Y+9, r17	; 0x09
    4334:	08 87       	std	Y+8, r16	; 0x08
    4336:	80 e2       	ldi	r24, 0x20	; 32
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	9b 83       	std	Y+3, r25	; 0x03
    433c:	8a 83       	std	Y+2, r24	; 0x02
    433e:	85 e0       	ldi	r24, 0x05	; 5
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	9d 83       	std	Y+5, r25	; 0x05
    4344:	8c 83       	std	Y+4, r24	; 0x04
    4346:	83 e0       	ldi	r24, 0x03	; 3
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	9b 87       	std	Y+11, r25	; 0x0b
    434c:	8a 87       	std	Y+10, r24	; 0x0a
    434e:	80 ec       	ldi	r24, 0xC0	; 192
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4356:	99 83       	std	Y+1, r25	; 0x01
    4358:	88 83       	st	Y, r24
    435a:	00 97       	sbiw	r24, 0x00	; 0
    435c:	09 f4       	brne	.+2      	; 0x4360 <tankIO_server_blinkLeds_register_function+0xbe>
    435e:	b5 c0       	rjmp	.+362    	; 0x44ca <tankIO_server_blinkLeds_register_function+0x228>
    4360:	e8 2f       	mov	r30, r24
    4362:	f9 2f       	mov	r31, r25
    4364:	80 ec       	ldi	r24, 0xC0	; 192
    4366:	df 01       	movw	r26, r30
    4368:	1d 92       	st	X+, r1
    436a:	8a 95       	dec	r24
    436c:	e9 f7       	brne	.-6      	; 0x4368 <tankIO_server_blinkLeds_register_function+0xc6>
    436e:	e0 91 b9 02 	lds	r30, 0x02B9
    4372:	f0 91 ba 02 	lds	r31, 0x02BA
    4376:	81 ee       	ldi	r24, 0xE1	; 225
    4378:	9f e1       	ldi	r25, 0x1F	; 31
    437a:	a1 e1       	ldi	r26, 0x11	; 17
    437c:	b0 ea       	ldi	r27, 0xA0	; 160
    437e:	84 8b       	std	Z+20, r24	; 0x14
    4380:	95 8b       	std	Z+21, r25	; 0x15
    4382:	a6 8b       	std	Z+22, r26	; 0x16
    4384:	b7 8b       	std	Z+23, r27	; 0x17
    4386:	16 c0       	rjmp	.+44     	; 0x43b4 <tankIO_server_blinkLeds_register_function+0x112>
    4388:	13 96       	adiw	r26, 0x03	; 3
    438a:	0d 90       	ld	r0, X+
    438c:	bc 91       	ld	r27, X
    438e:	a0 2d       	mov	r26, r0
    4390:	18 96       	adiw	r26, 0x08	; 8
    4392:	cd 91       	ld	r28, X+
    4394:	dc 91       	ld	r29, X
    4396:	19 97       	sbiw	r26, 0x09	; 9
    4398:	fd 83       	std	Y+5, r31	; 0x05
    439a:	ec 83       	std	Y+4, r30	; 0x04
    439c:	1a 96       	adiw	r26, 0x0a	; 10
    439e:	8d 91       	ld	r24, X+
    43a0:	9c 91       	ld	r25, X
    43a2:	1b 97       	sbiw	r26, 0x0b	; 11
    43a4:	c8 1b       	sub	r28, r24
    43a6:	d9 0b       	sbc	r29, r25
    43a8:	d6 83       	std	Z+6, r29	; 0x06
    43aa:	c5 83       	std	Z+5, r28	; 0x05
    43ac:	19 96       	adiw	r26, 0x09	; 9
    43ae:	1c 93       	st	X, r17
    43b0:	0e 93       	st	-X, r16
    43b2:	18 97       	sbiw	r26, 0x08	; 8
    43b4:	e0 91 9c 03 	lds	r30, 0x039C
    43b8:	f0 91 9d 03 	lds	r31, 0x039D
    43bc:	c3 81       	ldd	r28, Z+3	; 0x03
    43be:	d4 81       	ldd	r29, Z+4	; 0x04
    43c0:	8e 81       	ldd	r24, Y+6	; 0x06
    43c2:	9f 81       	ldd	r25, Y+7	; 0x07
    43c4:	01 96       	adiw	r24, 0x01	; 1
    43c6:	9f 83       	std	Y+7, r25	; 0x07
    43c8:	8e 83       	std	Y+6, r24	; 0x06
    43ca:	49 eb       	ldi	r20, 0xB9	; 185
    43cc:	52 e0       	ldi	r21, 0x02	; 2
    43ce:	d0 93 ba 02 	sts	0x02BA, r29
    43d2:	c0 93 b9 02 	sts	0x02B9, r28
    43d6:	da 01       	movw	r26, r20
    43d8:	13 97       	sbiw	r26, 0x03	; 3
    43da:	20 91 b6 02 	lds	r18, 0x02B6
    43de:	33 27       	eor	r19, r19
    43e0:	27 fd       	sbrc	r18, 7
    43e2:	30 95       	com	r19
    43e4:	c9 01       	movw	r24, r18
    43e6:	96 95       	lsr	r25
    43e8:	87 95       	ror	r24
    43ea:	96 95       	lsr	r25
    43ec:	87 95       	ror	r24
    43ee:	b9 01       	movw	r22, r18
    43f0:	15 e0       	ldi	r17, 0x05	; 5
    43f2:	66 0f       	add	r22, r22
    43f4:	77 1f       	adc	r23, r23
    43f6:	1a 95       	dec	r17
    43f8:	e1 f7       	brne	.-8      	; 0x43f2 <tankIO_server_blinkLeds_register_function+0x150>
    43fa:	86 0f       	add	r24, r22
    43fc:	97 1f       	adc	r25, r23
    43fe:	60 91 b7 02 	lds	r22, 0x02B7
    4402:	77 27       	eor	r23, r23
    4404:	67 fd       	sbrc	r22, 7
    4406:	70 95       	com	r23
    4408:	86 0f       	add	r24, r22
    440a:	97 1f       	adc	r25, r23
    440c:	82 27       	eor	r24, r18
    440e:	93 27       	eor	r25, r19
    4410:	52 96       	adiw	r26, 0x12	; 18
    4412:	9c 93       	st	X, r25
    4414:	8e 93       	st	-X, r24
    4416:	51 97       	sbiw	r26, 0x11	; 17
    4418:	03 80       	ldd	r0, Z+3	; 0x03
    441a:	f4 81       	ldd	r31, Z+4	; 0x04
    441c:	e0 2d       	mov	r30, r0
    441e:	22 81       	ldd	r18, Z+2	; 0x02
    4420:	33 81       	ldd	r19, Z+3	; 0x03
    4422:	21 50       	subi	r18, 0x01	; 1
    4424:	30 40       	sbci	r19, 0x00	; 0
    4426:	28 23       	and	r18, r24
    4428:	39 23       	and	r19, r25
    442a:	c9 01       	movw	r24, r18
    442c:	88 0f       	add	r24, r24
    442e:	99 1f       	adc	r25, r25
    4430:	82 0f       	add	r24, r18
    4432:	93 1f       	adc	r25, r19
    4434:	88 0f       	add	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	01 90       	ld	r0, Z+
    443a:	f0 81       	ld	r31, Z
    443c:	e0 2d       	mov	r30, r0
    443e:	e8 0f       	add	r30, r24
    4440:	f9 1f       	adc	r31, r25
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	93 81       	ldd	r25, Z+3	; 0x03
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	93 83       	std	Z+3, r25	; 0x03
    444a:	82 83       	std	Z+2, r24	; 0x02
    444c:	20 81       	ld	r18, Z
    444e:	31 81       	ldd	r19, Z+1	; 0x01
    4450:	1c 96       	adiw	r26, 0x0c	; 12
    4452:	3c 93       	st	X, r19
    4454:	2e 93       	st	-X, r18
    4456:	1b 97       	sbiw	r26, 0x0b	; 11
    4458:	1a 96       	adiw	r26, 0x0a	; 10
    445a:	1c 92       	st	X, r1
    445c:	1e 92       	st	-X, r1
    445e:	19 97       	sbiw	r26, 0x09	; 9
    4460:	21 15       	cp	r18, r1
    4462:	31 05       	cpc	r19, r1
    4464:	29 f0       	breq	.+10     	; 0x4470 <tankIO_server_blinkLeds_register_function+0x1ce>
    4466:	d9 01       	movw	r26, r18
    4468:	17 96       	adiw	r26, 0x07	; 7
    446a:	5c 93       	st	X, r21
    446c:	4e 93       	st	-X, r20
    446e:	16 97       	sbiw	r26, 0x06	; 6
    4470:	29 eb       	ldi	r18, 0xB9	; 185
    4472:	32 e0       	ldi	r19, 0x02	; 2
    4474:	31 83       	std	Z+1, r19	; 0x01
    4476:	20 83       	st	Z, r18
    4478:	24 81       	ldd	r18, Z+4	; 0x04
    447a:	35 81       	ldd	r19, Z+5	; 0x05
    447c:	2f 5f       	subi	r18, 0xFF	; 255
    447e:	3f 4f       	sbci	r19, 0xFF	; 255
    4480:	a9 01       	movw	r20, r18
    4482:	44 0f       	add	r20, r20
    4484:	55 1f       	adc	r21, r21
    4486:	f3 e0       	ldi	r31, 0x03	; 3
    4488:	22 0f       	add	r18, r18
    448a:	33 1f       	adc	r19, r19
    448c:	fa 95       	dec	r31
    448e:	e1 f7       	brne	.-8      	; 0x4488 <tankIO_server_blinkLeds_register_function+0x1e6>
    4490:	42 0f       	add	r20, r18
    4492:	53 1f       	adc	r21, r19
    4494:	84 17       	cp	r24, r20
    4496:	95 07       	cpc	r25, r21
    4498:	08 f4       	brcc	.+2      	; 0x449c <tankIO_server_blinkLeds_register_function+0x1fa>
    449a:	c8 c0       	rjmp	.+400    	; 0x462c <tankIO_server_blinkLeds_register_function+0x38a>
    449c:	8a 89       	ldd	r24, Y+18	; 0x12
    449e:	9b 89       	ldd	r25, Y+19	; 0x13
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	91 05       	cpc	r25, r1
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <tankIO_server_blinkLeds_register_function+0x206>
    44a6:	c2 c0       	rjmp	.+388    	; 0x462c <tankIO_server_blinkLeds_register_function+0x38a>
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	9b 81       	ldd	r25, Y+3	; 0x03
    44ac:	8c 01       	movw	r16, r24
    44ae:	00 0f       	add	r16, r16
    44b0:	11 1f       	adc	r17, r17
    44b2:	08 0f       	add	r16, r24
    44b4:	19 1f       	adc	r17, r25
    44b6:	00 0f       	add	r16, r16
    44b8:	11 1f       	adc	r17, r17
    44ba:	00 0f       	add	r16, r16
    44bc:	11 1f       	adc	r17, r17
    44be:	c8 01       	movw	r24, r16
    44c0:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    44c4:	4c 01       	movw	r8, r24
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	21 f4       	brne	.+8      	; 0x44d2 <tankIO_server_blinkLeds_register_function+0x230>
    44ca:	8f ef       	ldi	r24, 0xFF	; 255
    44cc:	9f ef       	ldi	r25, 0xFF	; 255
    44ce:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    44d2:	60 e0       	ldi	r22, 0x00	; 0
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	a8 01       	movw	r20, r16
    44d8:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    44dc:	0e 81       	ldd	r16, Y+6	; 0x06
    44de:	1f 81       	ldd	r17, Y+7	; 0x07
    44e0:	6a 80       	ldd	r6, Y+2	; 0x02
    44e2:	7b 80       	ldd	r7, Y+3	; 0x03
    44e4:	73 01       	movw	r14, r6
    44e6:	ee 0c       	add	r14, r14
    44e8:	ff 1c       	adc	r15, r15
    44ea:	08 94       	sec
    44ec:	e1 08       	sbc	r14, r1
    44ee:	f1 08       	sbc	r15, r1
    44f0:	c7 01       	movw	r24, r14
    44f2:	80 23       	and	r24, r16
    44f4:	91 23       	and	r25, r17
    44f6:	21 e0       	ldi	r18, 0x01	; 1
    44f8:	30 e0       	ldi	r19, 0x00	; 0
    44fa:	00 97       	sbiw	r24, 0x00	; 0
    44fc:	11 f4       	brne	.+4      	; 0x4502 <tankIO_server_blinkLeds_register_function+0x260>
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	8c 81       	ldd	r24, Y+4	; 0x04
    4504:	9d 81       	ldd	r25, Y+5	; 0x05
    4506:	01 96       	adiw	r24, 0x01	; 1
    4508:	02 c0       	rjmp	.+4      	; 0x450e <tankIO_server_blinkLeds_register_function+0x26c>
    450a:	16 95       	lsr	r17
    450c:	07 95       	ror	r16
    450e:	8a 95       	dec	r24
    4510:	e2 f7       	brpl	.-8      	; 0x450a <tankIO_server_blinkLeds_register_function+0x268>
    4512:	02 0f       	add	r16, r18
    4514:	13 1f       	adc	r17, r19
    4516:	1d 87       	std	Y+13, r17	; 0x0d
    4518:	0c 87       	std	Y+12, r16	; 0x0c
    451a:	1f 86       	std	Y+15, r1	; 0x0f
    451c:	1e 86       	std	Y+14, r1	; 0x0e
    451e:	cc 24       	eor	r12, r12
    4520:	dd 24       	eor	r13, r13
    4522:	aa 24       	eor	r10, r10
    4524:	bb 24       	eor	r11, r11
    4526:	51 c0       	rjmp	.+162    	; 0x45ca <tankIO_server_blinkLeds_register_function+0x328>
    4528:	8c 0d       	add	r24, r12
    452a:	9d 1d       	adc	r25, r13
    452c:	fc 01       	movw	r30, r24
    452e:	20 81       	ld	r18, Z
    4530:	31 81       	ldd	r19, Z+1	; 0x01
    4532:	40 c0       	rjmp	.+128    	; 0x45b4 <tankIO_server_blinkLeds_register_function+0x312>
    4534:	d9 01       	movw	r26, r18
    4536:	18 96       	adiw	r26, 0x08	; 8
    4538:	5c 90       	ld	r5, X
    453a:	18 97       	sbiw	r26, 0x08	; 8
    453c:	19 96       	adiw	r26, 0x09	; 9
    453e:	4c 90       	ld	r4, X
    4540:	19 97       	sbiw	r26, 0x09	; 9
    4542:	1e 96       	adiw	r26, 0x0e	; 14
    4544:	8d 91       	ld	r24, X+
    4546:	9c 91       	ld	r25, X
    4548:	1f 97       	sbiw	r26, 0x0f	; 15
    454a:	8e 21       	and	r24, r14
    454c:	9f 21       	and	r25, r15
    454e:	fc 01       	movw	r30, r24
    4550:	ee 0f       	add	r30, r30
    4552:	ff 1f       	adc	r31, r31
    4554:	e8 0f       	add	r30, r24
    4556:	f9 1f       	adc	r31, r25
    4558:	ee 0f       	add	r30, r30
    455a:	ff 1f       	adc	r31, r31
    455c:	e8 0d       	add	r30, r8
    455e:	f9 1d       	adc	r31, r9
    4560:	82 81       	ldd	r24, Z+2	; 0x02
    4562:	93 81       	ldd	r25, Z+3	; 0x03
    4564:	01 96       	adiw	r24, 0x01	; 1
    4566:	93 83       	std	Z+3, r25	; 0x03
    4568:	82 83       	std	Z+2, r24	; 0x02
    456a:	08 17       	cp	r16, r24
    456c:	19 07       	cpc	r17, r25
    456e:	58 f4       	brcc	.+22     	; 0x4586 <tankIO_server_blinkLeds_register_function+0x2e4>
    4570:	4e 85       	ldd	r20, Y+14	; 0x0e
    4572:	5f 85       	ldd	r21, Y+15	; 0x0f
    4574:	4f 5f       	subi	r20, 0xFF	; 255
    4576:	5f 4f       	sbci	r21, 0xFF	; 255
    4578:	5f 87       	std	Y+15, r21	; 0x0f
    457a:	4e 87       	std	Y+14, r20	; 0x0e
    457c:	b8 01       	movw	r22, r16
    457e:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    4582:	75 83       	std	Z+5, r23	; 0x05
    4584:	64 83       	std	Z+4, r22	; 0x04
    4586:	d9 01       	movw	r26, r18
    4588:	17 96       	adiw	r26, 0x07	; 7
    458a:	1c 92       	st	X, r1
    458c:	1e 92       	st	-X, r1
    458e:	16 97       	sbiw	r26, 0x06	; 6
    4590:	80 81       	ld	r24, Z
    4592:	91 81       	ldd	r25, Z+1	; 0x01
    4594:	19 96       	adiw	r26, 0x09	; 9
    4596:	9c 93       	st	X, r25
    4598:	8e 93       	st	-X, r24
    459a:	18 97       	sbiw	r26, 0x08	; 8
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	29 f0       	breq	.+10     	; 0x45aa <tankIO_server_blinkLeds_register_function+0x308>
    45a0:	dc 01       	movw	r26, r24
    45a2:	17 96       	adiw	r26, 0x07	; 7
    45a4:	3c 93       	st	X, r19
    45a6:	2e 93       	st	-X, r18
    45a8:	16 97       	sbiw	r26, 0x06	; 6
    45aa:	31 83       	std	Z+1, r19	; 0x01
    45ac:	20 83       	st	Z, r18
    45ae:	c2 01       	movw	r24, r4
    45b0:	29 2f       	mov	r18, r25
    45b2:	34 2d       	mov	r19, r4
    45b4:	21 15       	cp	r18, r1
    45b6:	31 05       	cpc	r19, r1
    45b8:	09 f0       	breq	.+2      	; 0x45bc <tankIO_server_blinkLeds_register_function+0x31a>
    45ba:	bc cf       	rjmp	.-136    	; 0x4534 <tankIO_server_blinkLeds_register_function+0x292>
    45bc:	08 94       	sec
    45be:	a1 1c       	adc	r10, r1
    45c0:	b1 1c       	adc	r11, r1
    45c2:	e6 e0       	ldi	r30, 0x06	; 6
    45c4:	f0 e0       	ldi	r31, 0x00	; 0
    45c6:	ce 0e       	add	r12, r30
    45c8:	df 1e       	adc	r13, r31
    45ca:	88 81       	ld	r24, Y
    45cc:	99 81       	ldd	r25, Y+1	; 0x01
    45ce:	a6 14       	cp	r10, r6
    45d0:	b7 04       	cpc	r11, r7
    45d2:	08 f4       	brcc	.+2      	; 0x45d6 <tankIO_server_blinkLeds_register_function+0x334>
    45d4:	a9 cf       	rjmp	.-174    	; 0x4528 <tankIO_server_blinkLeds_register_function+0x286>
    45d6:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    45da:	e0 91 b9 02 	lds	r30, 0x02B9
    45de:	f0 91 ba 02 	lds	r31, 0x02BA
    45e2:	82 81       	ldd	r24, Z+2	; 0x02
    45e4:	93 81       	ldd	r25, Z+3	; 0x03
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	93 83       	std	Z+3, r25	; 0x03
    45ec:	82 83       	std	Z+2, r24	; 0x02
    45ee:	84 81       	ldd	r24, Z+4	; 0x04
    45f0:	95 81       	ldd	r25, Z+5	; 0x05
    45f2:	01 96       	adiw	r24, 0x01	; 1
    45f4:	95 83       	std	Z+5, r25	; 0x05
    45f6:	84 83       	std	Z+4, r24	; 0x04
    45f8:	91 82       	std	Z+1, r9	; 0x01
    45fa:	80 82       	st	Z, r8
    45fc:	86 81       	ldd	r24, Z+6	; 0x06
    45fe:	97 81       	ldd	r25, Z+7	; 0x07
    4600:	96 95       	lsr	r25
    4602:	87 95       	ror	r24
    4604:	26 85       	ldd	r18, Z+14	; 0x0e
    4606:	37 85       	ldd	r19, Z+15	; 0x0f
    4608:	82 17       	cp	r24, r18
    460a:	93 07       	cpc	r25, r19
    460c:	20 f4       	brcc	.+8      	; 0x4616 <tankIO_server_blinkLeds_register_function+0x374>
    460e:	80 89       	ldd	r24, Z+16	; 0x10
    4610:	91 89       	ldd	r25, Z+17	; 0x11
    4612:	01 96       	adiw	r24, 0x01	; 1
    4614:	02 c0       	rjmp	.+4      	; 0x461a <tankIO_server_blinkLeds_register_function+0x378>
    4616:	80 e0       	ldi	r24, 0x00	; 0
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	91 8b       	std	Z+17, r25	; 0x11
    461c:	80 8b       	std	Z+16, r24	; 0x10
    461e:	82 30       	cpi	r24, 0x02	; 2
    4620:	91 05       	cpc	r25, r1
    4622:	20 f0       	brcs	.+8      	; 0x462c <tankIO_server_blinkLeds_register_function+0x38a>
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	93 8b       	std	Z+19, r25	; 0x13
    462a:	82 8b       	std	Z+18, r24	; 0x12
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	ff 90       	pop	r15
    4636:	ef 90       	pop	r14
    4638:	df 90       	pop	r13
    463a:	cf 90       	pop	r12
    463c:	bf 90       	pop	r11
    463e:	af 90       	pop	r10
    4640:	9f 90       	pop	r9
    4642:	8f 90       	pop	r8
    4644:	7f 90       	pop	r7
    4646:	6f 90       	pop	r6
    4648:	5f 90       	pop	r5
    464a:	4f 90       	pop	r4
    464c:	08 95       	ret

0000464e <tankIO_server_blinkAllLeds>:

void tankIO_server_blinkAllLeds(BlinkAllLedsParam *param, uint16_t size) {
    464e:	fc 01       	movw	r30, r24
	blinkAllLeds(toLedGroup(param->leds), param->times);
    4650:	a0 81       	ld	r26, Z
    4652:	b1 81       	ldd	r27, Z+1	; 0x01
    4654:	a8 30       	cpi	r26, 0x08	; 8
    4656:	b1 05       	cpc	r27, r1
    4658:	40 f4       	brcc	.+16     	; 0x466a <tankIO_server_blinkAllLeds+0x1c>
    465a:	aa 0f       	add	r26, r26
    465c:	bb 1f       	adc	r27, r27
    465e:	a2 59       	subi	r26, 0x92	; 146
    4660:	bc 4f       	sbci	r27, 0xFC	; 252
    4662:	8d 91       	ld	r24, X+
    4664:	9c 91       	ld	r25, X
    4666:	11 97       	sbiw	r26, 0x01	; 1
    4668:	02 c0       	rjmp	.+4      	; 0x466e <tankIO_server_blinkAllLeds+0x20>
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	62 81       	ldd	r22, Z+2	; 0x02
    4670:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <blinkAllLeds>
}
    4674:	08 95       	ret

00004676 <tankIO_server_blinkAllLeds_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkAllLeds, TANK_IO_blinkAllLeds, BlinkAllLedsParam)
    4676:	cf 93       	push	r28
    4678:	df 93       	push	r29
    467a:	ec 01       	movw	r28, r24
    467c:	6a 81       	ldd	r22, Y+2	; 0x02
    467e:	7b 81       	ldd	r23, Y+3	; 0x03
    4680:	88 81       	ld	r24, Y
    4682:	99 81       	ldd	r25, Y+1	; 0x01
    4684:	0e 94 27 23 	call	0x464e	; 0x464e <tankIO_server_blinkAllLeds>
    4688:	1b 82       	std	Y+3, r1	; 0x03
    468a:	1a 82       	std	Y+2, r1	; 0x02
    468c:	df 91       	pop	r29
    468e:	cf 91       	pop	r28
    4690:	08 95       	ret

00004692 <tankIO_server_blinkAllLeds_register_function>:
    4692:	4f 92       	push	r4
    4694:	5f 92       	push	r5
    4696:	6f 92       	push	r6
    4698:	7f 92       	push	r7
    469a:	8f 92       	push	r8
    469c:	9f 92       	push	r9
    469e:	af 92       	push	r10
    46a0:	bf 92       	push	r11
    46a2:	cf 92       	push	r12
    46a4:	df 92       	push	r13
    46a6:	ef 92       	push	r14
    46a8:	ff 92       	push	r15
    46aa:	0f 93       	push	r16
    46ac:	1f 93       	push	r17
    46ae:	cf 93       	push	r28
    46b0:	df 93       	push	r29
    46b2:	10 92 d1 02 	sts	0x02D1, r1
    46b6:	10 92 d0 02 	sts	0x02D0, r1
    46ba:	e9 ec       	ldi	r30, 0xC9	; 201
    46bc:	f2 e0       	ldi	r31, 0x02	; 2
    46be:	f0 93 d7 02 	sts	0x02D7, r31
    46c2:	e0 93 d6 02 	sts	0x02D6, r30
    46c6:	82 e0       	ldi	r24, 0x02	; 2
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	90 93 d9 02 	sts	0x02D9, r25
    46ce:	80 93 d8 02 	sts	0x02D8, r24
    46d2:	a0 91 9c 03 	lds	r26, 0x039C
    46d6:	b0 91 9d 03 	lds	r27, 0x039D
    46da:	8f 01       	movw	r16, r30
    46dc:	0d 5f       	subi	r16, 0xFD	; 253
    46de:	1f 4f       	sbci	r17, 0xFF	; 255
    46e0:	10 97       	sbiw	r26, 0x00	; 0
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <tankIO_server_blinkAllLeds_register_function+0x54>
    46e4:	49 c0       	rjmp	.+146    	; 0x4778 <tankIO_server_blinkAllLeds_register_function+0xe6>
    46e6:	f0 93 9d 03 	sts	0x039D, r31
    46ea:	e0 93 9c 03 	sts	0x039C, r30
    46ee:	10 92 cf 02 	sts	0x02CF, r1
    46f2:	10 92 ce 02 	sts	0x02CE, r1
    46f6:	88 e1       	ldi	r24, 0x18	; 24
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    46fe:	90 93 cd 02 	sts	0x02CD, r25
    4702:	80 93 cc 02 	sts	0x02CC, r24
    4706:	00 97       	sbiw	r24, 0x00	; 0
    4708:	09 f4       	brne	.+2      	; 0x470c <tankIO_server_blinkAllLeds_register_function+0x7a>
    470a:	d7 c0       	rjmp	.+430    	; 0x48ba <tankIO_server_blinkAllLeds_register_function+0x228>
    470c:	e8 2f       	mov	r30, r24
    470e:	f9 2f       	mov	r31, r25
    4710:	88 e1       	ldi	r24, 0x18	; 24
    4712:	df 01       	movw	r26, r30
    4714:	1d 92       	st	X+, r1
    4716:	8a 95       	dec	r24
    4718:	e9 f7       	brne	.-6      	; 0x4714 <tankIO_server_blinkAllLeds_register_function+0x82>
    471a:	c0 91 cc 02 	lds	r28, 0x02CC
    471e:	d0 91 cd 02 	lds	r29, 0x02CD
    4722:	19 87       	std	Y+9, r17	; 0x09
    4724:	08 87       	std	Y+8, r16	; 0x08
    4726:	80 e2       	ldi	r24, 0x20	; 32
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	9b 83       	std	Y+3, r25	; 0x03
    472c:	8a 83       	std	Y+2, r24	; 0x02
    472e:	85 e0       	ldi	r24, 0x05	; 5
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	9d 83       	std	Y+5, r25	; 0x05
    4734:	8c 83       	std	Y+4, r24	; 0x04
    4736:	83 e0       	ldi	r24, 0x03	; 3
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	9b 87       	std	Y+11, r25	; 0x0b
    473c:	8a 87       	std	Y+10, r24	; 0x0a
    473e:	80 ec       	ldi	r24, 0xC0	; 192
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4746:	99 83       	std	Y+1, r25	; 0x01
    4748:	88 83       	st	Y, r24
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	09 f4       	brne	.+2      	; 0x4750 <tankIO_server_blinkAllLeds_register_function+0xbe>
    474e:	b5 c0       	rjmp	.+362    	; 0x48ba <tankIO_server_blinkAllLeds_register_function+0x228>
    4750:	e8 2f       	mov	r30, r24
    4752:	f9 2f       	mov	r31, r25
    4754:	80 ec       	ldi	r24, 0xC0	; 192
    4756:	df 01       	movw	r26, r30
    4758:	1d 92       	st	X+, r1
    475a:	8a 95       	dec	r24
    475c:	e9 f7       	brne	.-6      	; 0x4758 <tankIO_server_blinkAllLeds_register_function+0xc6>
    475e:	e0 91 cc 02 	lds	r30, 0x02CC
    4762:	f0 91 cd 02 	lds	r31, 0x02CD
    4766:	81 ee       	ldi	r24, 0xE1	; 225
    4768:	9f e1       	ldi	r25, 0x1F	; 31
    476a:	a1 e1       	ldi	r26, 0x11	; 17
    476c:	b0 ea       	ldi	r27, 0xA0	; 160
    476e:	84 8b       	std	Z+20, r24	; 0x14
    4770:	95 8b       	std	Z+21, r25	; 0x15
    4772:	a6 8b       	std	Z+22, r26	; 0x16
    4774:	b7 8b       	std	Z+23, r27	; 0x17
    4776:	16 c0       	rjmp	.+44     	; 0x47a4 <tankIO_server_blinkAllLeds_register_function+0x112>
    4778:	13 96       	adiw	r26, 0x03	; 3
    477a:	0d 90       	ld	r0, X+
    477c:	bc 91       	ld	r27, X
    477e:	a0 2d       	mov	r26, r0
    4780:	18 96       	adiw	r26, 0x08	; 8
    4782:	cd 91       	ld	r28, X+
    4784:	dc 91       	ld	r29, X
    4786:	19 97       	sbiw	r26, 0x09	; 9
    4788:	fd 83       	std	Y+5, r31	; 0x05
    478a:	ec 83       	std	Y+4, r30	; 0x04
    478c:	1a 96       	adiw	r26, 0x0a	; 10
    478e:	8d 91       	ld	r24, X+
    4790:	9c 91       	ld	r25, X
    4792:	1b 97       	sbiw	r26, 0x0b	; 11
    4794:	c8 1b       	sub	r28, r24
    4796:	d9 0b       	sbc	r29, r25
    4798:	d6 83       	std	Z+6, r29	; 0x06
    479a:	c5 83       	std	Z+5, r28	; 0x05
    479c:	19 96       	adiw	r26, 0x09	; 9
    479e:	1c 93       	st	X, r17
    47a0:	0e 93       	st	-X, r16
    47a2:	18 97       	sbiw	r26, 0x08	; 8
    47a4:	e0 91 9c 03 	lds	r30, 0x039C
    47a8:	f0 91 9d 03 	lds	r31, 0x039D
    47ac:	c3 81       	ldd	r28, Z+3	; 0x03
    47ae:	d4 81       	ldd	r29, Z+4	; 0x04
    47b0:	8e 81       	ldd	r24, Y+6	; 0x06
    47b2:	9f 81       	ldd	r25, Y+7	; 0x07
    47b4:	01 96       	adiw	r24, 0x01	; 1
    47b6:	9f 83       	std	Y+7, r25	; 0x07
    47b8:	8e 83       	std	Y+6, r24	; 0x06
    47ba:	4c ec       	ldi	r20, 0xCC	; 204
    47bc:	52 e0       	ldi	r21, 0x02	; 2
    47be:	d0 93 cd 02 	sts	0x02CD, r29
    47c2:	c0 93 cc 02 	sts	0x02CC, r28
    47c6:	da 01       	movw	r26, r20
    47c8:	13 97       	sbiw	r26, 0x03	; 3
    47ca:	20 91 c9 02 	lds	r18, 0x02C9
    47ce:	33 27       	eor	r19, r19
    47d0:	27 fd       	sbrc	r18, 7
    47d2:	30 95       	com	r19
    47d4:	c9 01       	movw	r24, r18
    47d6:	96 95       	lsr	r25
    47d8:	87 95       	ror	r24
    47da:	96 95       	lsr	r25
    47dc:	87 95       	ror	r24
    47de:	b9 01       	movw	r22, r18
    47e0:	15 e0       	ldi	r17, 0x05	; 5
    47e2:	66 0f       	add	r22, r22
    47e4:	77 1f       	adc	r23, r23
    47e6:	1a 95       	dec	r17
    47e8:	e1 f7       	brne	.-8      	; 0x47e2 <tankIO_server_blinkAllLeds_register_function+0x150>
    47ea:	86 0f       	add	r24, r22
    47ec:	97 1f       	adc	r25, r23
    47ee:	60 91 ca 02 	lds	r22, 0x02CA
    47f2:	77 27       	eor	r23, r23
    47f4:	67 fd       	sbrc	r22, 7
    47f6:	70 95       	com	r23
    47f8:	86 0f       	add	r24, r22
    47fa:	97 1f       	adc	r25, r23
    47fc:	82 27       	eor	r24, r18
    47fe:	93 27       	eor	r25, r19
    4800:	52 96       	adiw	r26, 0x12	; 18
    4802:	9c 93       	st	X, r25
    4804:	8e 93       	st	-X, r24
    4806:	51 97       	sbiw	r26, 0x11	; 17
    4808:	03 80       	ldd	r0, Z+3	; 0x03
    480a:	f4 81       	ldd	r31, Z+4	; 0x04
    480c:	e0 2d       	mov	r30, r0
    480e:	22 81       	ldd	r18, Z+2	; 0x02
    4810:	33 81       	ldd	r19, Z+3	; 0x03
    4812:	21 50       	subi	r18, 0x01	; 1
    4814:	30 40       	sbci	r19, 0x00	; 0
    4816:	28 23       	and	r18, r24
    4818:	39 23       	and	r19, r25
    481a:	c9 01       	movw	r24, r18
    481c:	88 0f       	add	r24, r24
    481e:	99 1f       	adc	r25, r25
    4820:	82 0f       	add	r24, r18
    4822:	93 1f       	adc	r25, r19
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	01 90       	ld	r0, Z+
    482a:	f0 81       	ld	r31, Z
    482c:	e0 2d       	mov	r30, r0
    482e:	e8 0f       	add	r30, r24
    4830:	f9 1f       	adc	r31, r25
    4832:	82 81       	ldd	r24, Z+2	; 0x02
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	01 96       	adiw	r24, 0x01	; 1
    4838:	93 83       	std	Z+3, r25	; 0x03
    483a:	82 83       	std	Z+2, r24	; 0x02
    483c:	20 81       	ld	r18, Z
    483e:	31 81       	ldd	r19, Z+1	; 0x01
    4840:	1c 96       	adiw	r26, 0x0c	; 12
    4842:	3c 93       	st	X, r19
    4844:	2e 93       	st	-X, r18
    4846:	1b 97       	sbiw	r26, 0x0b	; 11
    4848:	1a 96       	adiw	r26, 0x0a	; 10
    484a:	1c 92       	st	X, r1
    484c:	1e 92       	st	-X, r1
    484e:	19 97       	sbiw	r26, 0x09	; 9
    4850:	21 15       	cp	r18, r1
    4852:	31 05       	cpc	r19, r1
    4854:	29 f0       	breq	.+10     	; 0x4860 <tankIO_server_blinkAllLeds_register_function+0x1ce>
    4856:	d9 01       	movw	r26, r18
    4858:	17 96       	adiw	r26, 0x07	; 7
    485a:	5c 93       	st	X, r21
    485c:	4e 93       	st	-X, r20
    485e:	16 97       	sbiw	r26, 0x06	; 6
    4860:	2c ec       	ldi	r18, 0xCC	; 204
    4862:	32 e0       	ldi	r19, 0x02	; 2
    4864:	31 83       	std	Z+1, r19	; 0x01
    4866:	20 83       	st	Z, r18
    4868:	24 81       	ldd	r18, Z+4	; 0x04
    486a:	35 81       	ldd	r19, Z+5	; 0x05
    486c:	2f 5f       	subi	r18, 0xFF	; 255
    486e:	3f 4f       	sbci	r19, 0xFF	; 255
    4870:	a9 01       	movw	r20, r18
    4872:	44 0f       	add	r20, r20
    4874:	55 1f       	adc	r21, r21
    4876:	f3 e0       	ldi	r31, 0x03	; 3
    4878:	22 0f       	add	r18, r18
    487a:	33 1f       	adc	r19, r19
    487c:	fa 95       	dec	r31
    487e:	e1 f7       	brne	.-8      	; 0x4878 <tankIO_server_blinkAllLeds_register_function+0x1e6>
    4880:	42 0f       	add	r20, r18
    4882:	53 1f       	adc	r21, r19
    4884:	84 17       	cp	r24, r20
    4886:	95 07       	cpc	r25, r21
    4888:	08 f4       	brcc	.+2      	; 0x488c <tankIO_server_blinkAllLeds_register_function+0x1fa>
    488a:	c8 c0       	rjmp	.+400    	; 0x4a1c <tankIO_server_blinkAllLeds_register_function+0x38a>
    488c:	8a 89       	ldd	r24, Y+18	; 0x12
    488e:	9b 89       	ldd	r25, Y+19	; 0x13
    4890:	81 30       	cpi	r24, 0x01	; 1
    4892:	91 05       	cpc	r25, r1
    4894:	09 f4       	brne	.+2      	; 0x4898 <tankIO_server_blinkAllLeds_register_function+0x206>
    4896:	c2 c0       	rjmp	.+388    	; 0x4a1c <tankIO_server_blinkAllLeds_register_function+0x38a>
    4898:	8a 81       	ldd	r24, Y+2	; 0x02
    489a:	9b 81       	ldd	r25, Y+3	; 0x03
    489c:	8c 01       	movw	r16, r24
    489e:	00 0f       	add	r16, r16
    48a0:	11 1f       	adc	r17, r17
    48a2:	08 0f       	add	r16, r24
    48a4:	19 1f       	adc	r17, r25
    48a6:	00 0f       	add	r16, r16
    48a8:	11 1f       	adc	r17, r17
    48aa:	00 0f       	add	r16, r16
    48ac:	11 1f       	adc	r17, r17
    48ae:	c8 01       	movw	r24, r16
    48b0:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    48b4:	4c 01       	movw	r8, r24
    48b6:	00 97       	sbiw	r24, 0x00	; 0
    48b8:	21 f4       	brne	.+8      	; 0x48c2 <tankIO_server_blinkAllLeds_register_function+0x230>
    48ba:	8f ef       	ldi	r24, 0xFF	; 255
    48bc:	9f ef       	ldi	r25, 0xFF	; 255
    48be:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    48c2:	60 e0       	ldi	r22, 0x00	; 0
    48c4:	70 e0       	ldi	r23, 0x00	; 0
    48c6:	a8 01       	movw	r20, r16
    48c8:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    48cc:	0e 81       	ldd	r16, Y+6	; 0x06
    48ce:	1f 81       	ldd	r17, Y+7	; 0x07
    48d0:	6a 80       	ldd	r6, Y+2	; 0x02
    48d2:	7b 80       	ldd	r7, Y+3	; 0x03
    48d4:	73 01       	movw	r14, r6
    48d6:	ee 0c       	add	r14, r14
    48d8:	ff 1c       	adc	r15, r15
    48da:	08 94       	sec
    48dc:	e1 08       	sbc	r14, r1
    48de:	f1 08       	sbc	r15, r1
    48e0:	c7 01       	movw	r24, r14
    48e2:	80 23       	and	r24, r16
    48e4:	91 23       	and	r25, r17
    48e6:	21 e0       	ldi	r18, 0x01	; 1
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	00 97       	sbiw	r24, 0x00	; 0
    48ec:	11 f4       	brne	.+4      	; 0x48f2 <tankIO_server_blinkAllLeds_register_function+0x260>
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	8c 81       	ldd	r24, Y+4	; 0x04
    48f4:	9d 81       	ldd	r25, Y+5	; 0x05
    48f6:	01 96       	adiw	r24, 0x01	; 1
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <tankIO_server_blinkAllLeds_register_function+0x26c>
    48fa:	16 95       	lsr	r17
    48fc:	07 95       	ror	r16
    48fe:	8a 95       	dec	r24
    4900:	e2 f7       	brpl	.-8      	; 0x48fa <tankIO_server_blinkAllLeds_register_function+0x268>
    4902:	02 0f       	add	r16, r18
    4904:	13 1f       	adc	r17, r19
    4906:	1d 87       	std	Y+13, r17	; 0x0d
    4908:	0c 87       	std	Y+12, r16	; 0x0c
    490a:	1f 86       	std	Y+15, r1	; 0x0f
    490c:	1e 86       	std	Y+14, r1	; 0x0e
    490e:	cc 24       	eor	r12, r12
    4910:	dd 24       	eor	r13, r13
    4912:	aa 24       	eor	r10, r10
    4914:	bb 24       	eor	r11, r11
    4916:	51 c0       	rjmp	.+162    	; 0x49ba <tankIO_server_blinkAllLeds_register_function+0x328>
    4918:	8c 0d       	add	r24, r12
    491a:	9d 1d       	adc	r25, r13
    491c:	fc 01       	movw	r30, r24
    491e:	20 81       	ld	r18, Z
    4920:	31 81       	ldd	r19, Z+1	; 0x01
    4922:	40 c0       	rjmp	.+128    	; 0x49a4 <tankIO_server_blinkAllLeds_register_function+0x312>
    4924:	d9 01       	movw	r26, r18
    4926:	18 96       	adiw	r26, 0x08	; 8
    4928:	5c 90       	ld	r5, X
    492a:	18 97       	sbiw	r26, 0x08	; 8
    492c:	19 96       	adiw	r26, 0x09	; 9
    492e:	4c 90       	ld	r4, X
    4930:	19 97       	sbiw	r26, 0x09	; 9
    4932:	1e 96       	adiw	r26, 0x0e	; 14
    4934:	8d 91       	ld	r24, X+
    4936:	9c 91       	ld	r25, X
    4938:	1f 97       	sbiw	r26, 0x0f	; 15
    493a:	8e 21       	and	r24, r14
    493c:	9f 21       	and	r25, r15
    493e:	fc 01       	movw	r30, r24
    4940:	ee 0f       	add	r30, r30
    4942:	ff 1f       	adc	r31, r31
    4944:	e8 0f       	add	r30, r24
    4946:	f9 1f       	adc	r31, r25
    4948:	ee 0f       	add	r30, r30
    494a:	ff 1f       	adc	r31, r31
    494c:	e8 0d       	add	r30, r8
    494e:	f9 1d       	adc	r31, r9
    4950:	82 81       	ldd	r24, Z+2	; 0x02
    4952:	93 81       	ldd	r25, Z+3	; 0x03
    4954:	01 96       	adiw	r24, 0x01	; 1
    4956:	93 83       	std	Z+3, r25	; 0x03
    4958:	82 83       	std	Z+2, r24	; 0x02
    495a:	08 17       	cp	r16, r24
    495c:	19 07       	cpc	r17, r25
    495e:	58 f4       	brcc	.+22     	; 0x4976 <tankIO_server_blinkAllLeds_register_function+0x2e4>
    4960:	4e 85       	ldd	r20, Y+14	; 0x0e
    4962:	5f 85       	ldd	r21, Y+15	; 0x0f
    4964:	4f 5f       	subi	r20, 0xFF	; 255
    4966:	5f 4f       	sbci	r21, 0xFF	; 255
    4968:	5f 87       	std	Y+15, r21	; 0x0f
    496a:	4e 87       	std	Y+14, r20	; 0x0e
    496c:	b8 01       	movw	r22, r16
    496e:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    4972:	75 83       	std	Z+5, r23	; 0x05
    4974:	64 83       	std	Z+4, r22	; 0x04
    4976:	d9 01       	movw	r26, r18
    4978:	17 96       	adiw	r26, 0x07	; 7
    497a:	1c 92       	st	X, r1
    497c:	1e 92       	st	-X, r1
    497e:	16 97       	sbiw	r26, 0x06	; 6
    4980:	80 81       	ld	r24, Z
    4982:	91 81       	ldd	r25, Z+1	; 0x01
    4984:	19 96       	adiw	r26, 0x09	; 9
    4986:	9c 93       	st	X, r25
    4988:	8e 93       	st	-X, r24
    498a:	18 97       	sbiw	r26, 0x08	; 8
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	29 f0       	breq	.+10     	; 0x499a <tankIO_server_blinkAllLeds_register_function+0x308>
    4990:	dc 01       	movw	r26, r24
    4992:	17 96       	adiw	r26, 0x07	; 7
    4994:	3c 93       	st	X, r19
    4996:	2e 93       	st	-X, r18
    4998:	16 97       	sbiw	r26, 0x06	; 6
    499a:	31 83       	std	Z+1, r19	; 0x01
    499c:	20 83       	st	Z, r18
    499e:	c2 01       	movw	r24, r4
    49a0:	29 2f       	mov	r18, r25
    49a2:	34 2d       	mov	r19, r4
    49a4:	21 15       	cp	r18, r1
    49a6:	31 05       	cpc	r19, r1
    49a8:	09 f0       	breq	.+2      	; 0x49ac <tankIO_server_blinkAllLeds_register_function+0x31a>
    49aa:	bc cf       	rjmp	.-136    	; 0x4924 <tankIO_server_blinkAllLeds_register_function+0x292>
    49ac:	08 94       	sec
    49ae:	a1 1c       	adc	r10, r1
    49b0:	b1 1c       	adc	r11, r1
    49b2:	e6 e0       	ldi	r30, 0x06	; 6
    49b4:	f0 e0       	ldi	r31, 0x00	; 0
    49b6:	ce 0e       	add	r12, r30
    49b8:	df 1e       	adc	r13, r31
    49ba:	88 81       	ld	r24, Y
    49bc:	99 81       	ldd	r25, Y+1	; 0x01
    49be:	a6 14       	cp	r10, r6
    49c0:	b7 04       	cpc	r11, r7
    49c2:	08 f4       	brcc	.+2      	; 0x49c6 <tankIO_server_blinkAllLeds_register_function+0x334>
    49c4:	a9 cf       	rjmp	.-174    	; 0x4918 <tankIO_server_blinkAllLeds_register_function+0x286>
    49c6:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    49ca:	e0 91 cc 02 	lds	r30, 0x02CC
    49ce:	f0 91 cd 02 	lds	r31, 0x02CD
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	88 0f       	add	r24, r24
    49d8:	99 1f       	adc	r25, r25
    49da:	93 83       	std	Z+3, r25	; 0x03
    49dc:	82 83       	std	Z+2, r24	; 0x02
    49de:	84 81       	ldd	r24, Z+4	; 0x04
    49e0:	95 81       	ldd	r25, Z+5	; 0x05
    49e2:	01 96       	adiw	r24, 0x01	; 1
    49e4:	95 83       	std	Z+5, r25	; 0x05
    49e6:	84 83       	std	Z+4, r24	; 0x04
    49e8:	91 82       	std	Z+1, r9	; 0x01
    49ea:	80 82       	st	Z, r8
    49ec:	86 81       	ldd	r24, Z+6	; 0x06
    49ee:	97 81       	ldd	r25, Z+7	; 0x07
    49f0:	96 95       	lsr	r25
    49f2:	87 95       	ror	r24
    49f4:	26 85       	ldd	r18, Z+14	; 0x0e
    49f6:	37 85       	ldd	r19, Z+15	; 0x0f
    49f8:	82 17       	cp	r24, r18
    49fa:	93 07       	cpc	r25, r19
    49fc:	20 f4       	brcc	.+8      	; 0x4a06 <tankIO_server_blinkAllLeds_register_function+0x374>
    49fe:	80 89       	ldd	r24, Z+16	; 0x10
    4a00:	91 89       	ldd	r25, Z+17	; 0x11
    4a02:	01 96       	adiw	r24, 0x01	; 1
    4a04:	02 c0       	rjmp	.+4      	; 0x4a0a <tankIO_server_blinkAllLeds_register_function+0x378>
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	91 8b       	std	Z+17, r25	; 0x11
    4a0c:	80 8b       	std	Z+16, r24	; 0x10
    4a0e:	82 30       	cpi	r24, 0x02	; 2
    4a10:	91 05       	cpc	r25, r1
    4a12:	20 f0       	brcs	.+8      	; 0x4a1c <tankIO_server_blinkAllLeds_register_function+0x38a>
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	93 8b       	std	Z+19, r25	; 0x13
    4a1a:	82 8b       	std	Z+18, r24	; 0x12
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	1f 91       	pop	r17
    4a22:	0f 91       	pop	r16
    4a24:	ff 90       	pop	r15
    4a26:	ef 90       	pop	r14
    4a28:	df 90       	pop	r13
    4a2a:	cf 90       	pop	r12
    4a2c:	bf 90       	pop	r11
    4a2e:	af 90       	pop	r10
    4a30:	9f 90       	pop	r9
    4a32:	8f 90       	pop	r8
    4a34:	7f 90       	pop	r7
    4a36:	6f 90       	pop	r6
    4a38:	5f 90       	pop	r5
    4a3a:	4f 90       	pop	r4
    4a3c:	08 95       	ret

00004a3e <tankIO_server_flashLed>:

// ==
// flash**
// ==

void tankIO_server_flashLed(FlashLedParam *param, uint16_t size) {
    4a3e:	cf 93       	push	r28
    4a40:	df 93       	push	r29
    4a42:	ec 01       	movw	r28, r24
	flashLed(toLed(param->led), param->milliseconds);
    4a44:	68 81       	ld	r22, Y
    4a46:	79 81       	ldd	r23, Y+1	; 0x01
    4a48:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <toLed>
    4a4e:	6b 81       	ldd	r22, Y+3	; 0x03
    4a50:	7c 81       	ldd	r23, Y+4	; 0x04
    4a52:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <flashLed>
}
    4a56:	df 91       	pop	r29
    4a58:	cf 91       	pop	r28
    4a5a:	08 95       	ret

00004a5c <tankIO_server_flashLed_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_flashLed, TANK_IO_flashLed, FlashLedParam)
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    4a60:	ec 01       	movw	r28, r24
    4a62:	6a 81       	ldd	r22, Y+2	; 0x02
    4a64:	7b 81       	ldd	r23, Y+3	; 0x03
    4a66:	88 81       	ld	r24, Y
    4a68:	99 81       	ldd	r25, Y+1	; 0x01
    4a6a:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <tankIO_server_flashLed>
    4a6e:	1b 82       	std	Y+3, r1	; 0x03
    4a70:	1a 82       	std	Y+2, r1	; 0x02
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	08 95       	ret

00004a78 <tankIO_server_flashLed_register_function>:
    4a78:	4f 92       	push	r4
    4a7a:	5f 92       	push	r5
    4a7c:	6f 92       	push	r6
    4a7e:	7f 92       	push	r7
    4a80:	8f 92       	push	r8
    4a82:	9f 92       	push	r9
    4a84:	af 92       	push	r10
    4a86:	bf 92       	push	r11
    4a88:	cf 92       	push	r12
    4a8a:	df 92       	push	r13
    4a8c:	ef 92       	push	r14
    4a8e:	ff 92       	push	r15
    4a90:	0f 93       	push	r16
    4a92:	1f 93       	push	r17
    4a94:	cf 93       	push	r28
    4a96:	df 93       	push	r29
    4a98:	10 92 e4 02 	sts	0x02E4, r1
    4a9c:	10 92 e3 02 	sts	0x02E3, r1
    4aa0:	ec ed       	ldi	r30, 0xDC	; 220
    4aa2:	f2 e0       	ldi	r31, 0x02	; 2
    4aa4:	f0 93 ea 02 	sts	0x02EA, r31
    4aa8:	e0 93 e9 02 	sts	0x02E9, r30
    4aac:	82 e0       	ldi	r24, 0x02	; 2
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	90 93 ec 02 	sts	0x02EC, r25
    4ab4:	80 93 eb 02 	sts	0x02EB, r24
    4ab8:	a0 91 9c 03 	lds	r26, 0x039C
    4abc:	b0 91 9d 03 	lds	r27, 0x039D
    4ac0:	8f 01       	movw	r16, r30
    4ac2:	0d 5f       	subi	r16, 0xFD	; 253
    4ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac6:	10 97       	sbiw	r26, 0x00	; 0
    4ac8:	09 f0       	breq	.+2      	; 0x4acc <tankIO_server_flashLed_register_function+0x54>
    4aca:	49 c0       	rjmp	.+146    	; 0x4b5e <tankIO_server_flashLed_register_function+0xe6>
    4acc:	f0 93 9d 03 	sts	0x039D, r31
    4ad0:	e0 93 9c 03 	sts	0x039C, r30
    4ad4:	10 92 e2 02 	sts	0x02E2, r1
    4ad8:	10 92 e1 02 	sts	0x02E1, r1
    4adc:	88 e1       	ldi	r24, 0x18	; 24
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4ae4:	90 93 e0 02 	sts	0x02E0, r25
    4ae8:	80 93 df 02 	sts	0x02DF, r24
    4aec:	00 97       	sbiw	r24, 0x00	; 0
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <tankIO_server_flashLed_register_function+0x7a>
    4af0:	d7 c0       	rjmp	.+430    	; 0x4ca0 <tankIO_server_flashLed_register_function+0x228>
    4af2:	e8 2f       	mov	r30, r24
    4af4:	f9 2f       	mov	r31, r25
    4af6:	88 e1       	ldi	r24, 0x18	; 24
    4af8:	df 01       	movw	r26, r30
    4afa:	1d 92       	st	X+, r1
    4afc:	8a 95       	dec	r24
    4afe:	e9 f7       	brne	.-6      	; 0x4afa <tankIO_server_flashLed_register_function+0x82>
    4b00:	c0 91 df 02 	lds	r28, 0x02DF
    4b04:	d0 91 e0 02 	lds	r29, 0x02E0
    4b08:	19 87       	std	Y+9, r17	; 0x09
    4b0a:	08 87       	std	Y+8, r16	; 0x08
    4b0c:	80 e2       	ldi	r24, 0x20	; 32
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	9b 83       	std	Y+3, r25	; 0x03
    4b12:	8a 83       	std	Y+2, r24	; 0x02
    4b14:	85 e0       	ldi	r24, 0x05	; 5
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	9d 83       	std	Y+5, r25	; 0x05
    4b1a:	8c 83       	std	Y+4, r24	; 0x04
    4b1c:	83 e0       	ldi	r24, 0x03	; 3
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	9b 87       	std	Y+11, r25	; 0x0b
    4b22:	8a 87       	std	Y+10, r24	; 0x0a
    4b24:	80 ec       	ldi	r24, 0xC0	; 192
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4b2c:	99 83       	std	Y+1, r25	; 0x01
    4b2e:	88 83       	st	Y, r24
    4b30:	00 97       	sbiw	r24, 0x00	; 0
    4b32:	09 f4       	brne	.+2      	; 0x4b36 <tankIO_server_flashLed_register_function+0xbe>
    4b34:	b5 c0       	rjmp	.+362    	; 0x4ca0 <tankIO_server_flashLed_register_function+0x228>
    4b36:	e8 2f       	mov	r30, r24
    4b38:	f9 2f       	mov	r31, r25
    4b3a:	80 ec       	ldi	r24, 0xC0	; 192
    4b3c:	df 01       	movw	r26, r30
    4b3e:	1d 92       	st	X+, r1
    4b40:	8a 95       	dec	r24
    4b42:	e9 f7       	brne	.-6      	; 0x4b3e <tankIO_server_flashLed_register_function+0xc6>
    4b44:	e0 91 df 02 	lds	r30, 0x02DF
    4b48:	f0 91 e0 02 	lds	r31, 0x02E0
    4b4c:	81 ee       	ldi	r24, 0xE1	; 225
    4b4e:	9f e1       	ldi	r25, 0x1F	; 31
    4b50:	a1 e1       	ldi	r26, 0x11	; 17
    4b52:	b0 ea       	ldi	r27, 0xA0	; 160
    4b54:	84 8b       	std	Z+20, r24	; 0x14
    4b56:	95 8b       	std	Z+21, r25	; 0x15
    4b58:	a6 8b       	std	Z+22, r26	; 0x16
    4b5a:	b7 8b       	std	Z+23, r27	; 0x17
    4b5c:	16 c0       	rjmp	.+44     	; 0x4b8a <tankIO_server_flashLed_register_function+0x112>
    4b5e:	13 96       	adiw	r26, 0x03	; 3
    4b60:	0d 90       	ld	r0, X+
    4b62:	bc 91       	ld	r27, X
    4b64:	a0 2d       	mov	r26, r0
    4b66:	18 96       	adiw	r26, 0x08	; 8
    4b68:	cd 91       	ld	r28, X+
    4b6a:	dc 91       	ld	r29, X
    4b6c:	19 97       	sbiw	r26, 0x09	; 9
    4b6e:	fd 83       	std	Y+5, r31	; 0x05
    4b70:	ec 83       	std	Y+4, r30	; 0x04
    4b72:	1a 96       	adiw	r26, 0x0a	; 10
    4b74:	8d 91       	ld	r24, X+
    4b76:	9c 91       	ld	r25, X
    4b78:	1b 97       	sbiw	r26, 0x0b	; 11
    4b7a:	c8 1b       	sub	r28, r24
    4b7c:	d9 0b       	sbc	r29, r25
    4b7e:	d6 83       	std	Z+6, r29	; 0x06
    4b80:	c5 83       	std	Z+5, r28	; 0x05
    4b82:	19 96       	adiw	r26, 0x09	; 9
    4b84:	1c 93       	st	X, r17
    4b86:	0e 93       	st	-X, r16
    4b88:	18 97       	sbiw	r26, 0x08	; 8
    4b8a:	e0 91 9c 03 	lds	r30, 0x039C
    4b8e:	f0 91 9d 03 	lds	r31, 0x039D
    4b92:	c3 81       	ldd	r28, Z+3	; 0x03
    4b94:	d4 81       	ldd	r29, Z+4	; 0x04
    4b96:	8e 81       	ldd	r24, Y+6	; 0x06
    4b98:	9f 81       	ldd	r25, Y+7	; 0x07
    4b9a:	01 96       	adiw	r24, 0x01	; 1
    4b9c:	9f 83       	std	Y+7, r25	; 0x07
    4b9e:	8e 83       	std	Y+6, r24	; 0x06
    4ba0:	4f ed       	ldi	r20, 0xDF	; 223
    4ba2:	52 e0       	ldi	r21, 0x02	; 2
    4ba4:	d0 93 e0 02 	sts	0x02E0, r29
    4ba8:	c0 93 df 02 	sts	0x02DF, r28
    4bac:	da 01       	movw	r26, r20
    4bae:	13 97       	sbiw	r26, 0x03	; 3
    4bb0:	20 91 dc 02 	lds	r18, 0x02DC
    4bb4:	33 27       	eor	r19, r19
    4bb6:	27 fd       	sbrc	r18, 7
    4bb8:	30 95       	com	r19
    4bba:	c9 01       	movw	r24, r18
    4bbc:	96 95       	lsr	r25
    4bbe:	87 95       	ror	r24
    4bc0:	96 95       	lsr	r25
    4bc2:	87 95       	ror	r24
    4bc4:	b9 01       	movw	r22, r18
    4bc6:	15 e0       	ldi	r17, 0x05	; 5
    4bc8:	66 0f       	add	r22, r22
    4bca:	77 1f       	adc	r23, r23
    4bcc:	1a 95       	dec	r17
    4bce:	e1 f7       	brne	.-8      	; 0x4bc8 <tankIO_server_flashLed_register_function+0x150>
    4bd0:	86 0f       	add	r24, r22
    4bd2:	97 1f       	adc	r25, r23
    4bd4:	60 91 dd 02 	lds	r22, 0x02DD
    4bd8:	77 27       	eor	r23, r23
    4bda:	67 fd       	sbrc	r22, 7
    4bdc:	70 95       	com	r23
    4bde:	86 0f       	add	r24, r22
    4be0:	97 1f       	adc	r25, r23
    4be2:	82 27       	eor	r24, r18
    4be4:	93 27       	eor	r25, r19
    4be6:	52 96       	adiw	r26, 0x12	; 18
    4be8:	9c 93       	st	X, r25
    4bea:	8e 93       	st	-X, r24
    4bec:	51 97       	sbiw	r26, 0x11	; 17
    4bee:	03 80       	ldd	r0, Z+3	; 0x03
    4bf0:	f4 81       	ldd	r31, Z+4	; 0x04
    4bf2:	e0 2d       	mov	r30, r0
    4bf4:	22 81       	ldd	r18, Z+2	; 0x02
    4bf6:	33 81       	ldd	r19, Z+3	; 0x03
    4bf8:	21 50       	subi	r18, 0x01	; 1
    4bfa:	30 40       	sbci	r19, 0x00	; 0
    4bfc:	28 23       	and	r18, r24
    4bfe:	39 23       	and	r19, r25
    4c00:	c9 01       	movw	r24, r18
    4c02:	88 0f       	add	r24, r24
    4c04:	99 1f       	adc	r25, r25
    4c06:	82 0f       	add	r24, r18
    4c08:	93 1f       	adc	r25, r19
    4c0a:	88 0f       	add	r24, r24
    4c0c:	99 1f       	adc	r25, r25
    4c0e:	01 90       	ld	r0, Z+
    4c10:	f0 81       	ld	r31, Z
    4c12:	e0 2d       	mov	r30, r0
    4c14:	e8 0f       	add	r30, r24
    4c16:	f9 1f       	adc	r31, r25
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	01 96       	adiw	r24, 0x01	; 1
    4c1e:	93 83       	std	Z+3, r25	; 0x03
    4c20:	82 83       	std	Z+2, r24	; 0x02
    4c22:	20 81       	ld	r18, Z
    4c24:	31 81       	ldd	r19, Z+1	; 0x01
    4c26:	1c 96       	adiw	r26, 0x0c	; 12
    4c28:	3c 93       	st	X, r19
    4c2a:	2e 93       	st	-X, r18
    4c2c:	1b 97       	sbiw	r26, 0x0b	; 11
    4c2e:	1a 96       	adiw	r26, 0x0a	; 10
    4c30:	1c 92       	st	X, r1
    4c32:	1e 92       	st	-X, r1
    4c34:	19 97       	sbiw	r26, 0x09	; 9
    4c36:	21 15       	cp	r18, r1
    4c38:	31 05       	cpc	r19, r1
    4c3a:	29 f0       	breq	.+10     	; 0x4c46 <tankIO_server_flashLed_register_function+0x1ce>
    4c3c:	d9 01       	movw	r26, r18
    4c3e:	17 96       	adiw	r26, 0x07	; 7
    4c40:	5c 93       	st	X, r21
    4c42:	4e 93       	st	-X, r20
    4c44:	16 97       	sbiw	r26, 0x06	; 6
    4c46:	2f ed       	ldi	r18, 0xDF	; 223
    4c48:	32 e0       	ldi	r19, 0x02	; 2
    4c4a:	31 83       	std	Z+1, r19	; 0x01
    4c4c:	20 83       	st	Z, r18
    4c4e:	24 81       	ldd	r18, Z+4	; 0x04
    4c50:	35 81       	ldd	r19, Z+5	; 0x05
    4c52:	2f 5f       	subi	r18, 0xFF	; 255
    4c54:	3f 4f       	sbci	r19, 0xFF	; 255
    4c56:	a9 01       	movw	r20, r18
    4c58:	44 0f       	add	r20, r20
    4c5a:	55 1f       	adc	r21, r21
    4c5c:	f3 e0       	ldi	r31, 0x03	; 3
    4c5e:	22 0f       	add	r18, r18
    4c60:	33 1f       	adc	r19, r19
    4c62:	fa 95       	dec	r31
    4c64:	e1 f7       	brne	.-8      	; 0x4c5e <tankIO_server_flashLed_register_function+0x1e6>
    4c66:	42 0f       	add	r20, r18
    4c68:	53 1f       	adc	r21, r19
    4c6a:	84 17       	cp	r24, r20
    4c6c:	95 07       	cpc	r25, r21
    4c6e:	08 f4       	brcc	.+2      	; 0x4c72 <tankIO_server_flashLed_register_function+0x1fa>
    4c70:	c8 c0       	rjmp	.+400    	; 0x4e02 <tankIO_server_flashLed_register_function+0x38a>
    4c72:	8a 89       	ldd	r24, Y+18	; 0x12
    4c74:	9b 89       	ldd	r25, Y+19	; 0x13
    4c76:	81 30       	cpi	r24, 0x01	; 1
    4c78:	91 05       	cpc	r25, r1
    4c7a:	09 f4       	brne	.+2      	; 0x4c7e <tankIO_server_flashLed_register_function+0x206>
    4c7c:	c2 c0       	rjmp	.+388    	; 0x4e02 <tankIO_server_flashLed_register_function+0x38a>
    4c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c80:	9b 81       	ldd	r25, Y+3	; 0x03
    4c82:	8c 01       	movw	r16, r24
    4c84:	00 0f       	add	r16, r16
    4c86:	11 1f       	adc	r17, r17
    4c88:	08 0f       	add	r16, r24
    4c8a:	19 1f       	adc	r17, r25
    4c8c:	00 0f       	add	r16, r16
    4c8e:	11 1f       	adc	r17, r17
    4c90:	00 0f       	add	r16, r16
    4c92:	11 1f       	adc	r17, r17
    4c94:	c8 01       	movw	r24, r16
    4c96:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4c9a:	4c 01       	movw	r8, r24
    4c9c:	00 97       	sbiw	r24, 0x00	; 0
    4c9e:	21 f4       	brne	.+8      	; 0x4ca8 <tankIO_server_flashLed_register_function+0x230>
    4ca0:	8f ef       	ldi	r24, 0xFF	; 255
    4ca2:	9f ef       	ldi	r25, 0xFF	; 255
    4ca4:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    4ca8:	60 e0       	ldi	r22, 0x00	; 0
    4caa:	70 e0       	ldi	r23, 0x00	; 0
    4cac:	a8 01       	movw	r20, r16
    4cae:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    4cb2:	0e 81       	ldd	r16, Y+6	; 0x06
    4cb4:	1f 81       	ldd	r17, Y+7	; 0x07
    4cb6:	6a 80       	ldd	r6, Y+2	; 0x02
    4cb8:	7b 80       	ldd	r7, Y+3	; 0x03
    4cba:	73 01       	movw	r14, r6
    4cbc:	ee 0c       	add	r14, r14
    4cbe:	ff 1c       	adc	r15, r15
    4cc0:	08 94       	sec
    4cc2:	e1 08       	sbc	r14, r1
    4cc4:	f1 08       	sbc	r15, r1
    4cc6:	c7 01       	movw	r24, r14
    4cc8:	80 23       	and	r24, r16
    4cca:	91 23       	and	r25, r17
    4ccc:	21 e0       	ldi	r18, 0x01	; 1
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	00 97       	sbiw	r24, 0x00	; 0
    4cd2:	11 f4       	brne	.+4      	; 0x4cd8 <tankIO_server_flashLed_register_function+0x260>
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    4cda:	9d 81       	ldd	r25, Y+5	; 0x05
    4cdc:	01 96       	adiw	r24, 0x01	; 1
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <tankIO_server_flashLed_register_function+0x26c>
    4ce0:	16 95       	lsr	r17
    4ce2:	07 95       	ror	r16
    4ce4:	8a 95       	dec	r24
    4ce6:	e2 f7       	brpl	.-8      	; 0x4ce0 <tankIO_server_flashLed_register_function+0x268>
    4ce8:	02 0f       	add	r16, r18
    4cea:	13 1f       	adc	r17, r19
    4cec:	1d 87       	std	Y+13, r17	; 0x0d
    4cee:	0c 87       	std	Y+12, r16	; 0x0c
    4cf0:	1f 86       	std	Y+15, r1	; 0x0f
    4cf2:	1e 86       	std	Y+14, r1	; 0x0e
    4cf4:	cc 24       	eor	r12, r12
    4cf6:	dd 24       	eor	r13, r13
    4cf8:	aa 24       	eor	r10, r10
    4cfa:	bb 24       	eor	r11, r11
    4cfc:	51 c0       	rjmp	.+162    	; 0x4da0 <tankIO_server_flashLed_register_function+0x328>
    4cfe:	8c 0d       	add	r24, r12
    4d00:	9d 1d       	adc	r25, r13
    4d02:	fc 01       	movw	r30, r24
    4d04:	20 81       	ld	r18, Z
    4d06:	31 81       	ldd	r19, Z+1	; 0x01
    4d08:	40 c0       	rjmp	.+128    	; 0x4d8a <tankIO_server_flashLed_register_function+0x312>
    4d0a:	d9 01       	movw	r26, r18
    4d0c:	18 96       	adiw	r26, 0x08	; 8
    4d0e:	5c 90       	ld	r5, X
    4d10:	18 97       	sbiw	r26, 0x08	; 8
    4d12:	19 96       	adiw	r26, 0x09	; 9
    4d14:	4c 90       	ld	r4, X
    4d16:	19 97       	sbiw	r26, 0x09	; 9
    4d18:	1e 96       	adiw	r26, 0x0e	; 14
    4d1a:	8d 91       	ld	r24, X+
    4d1c:	9c 91       	ld	r25, X
    4d1e:	1f 97       	sbiw	r26, 0x0f	; 15
    4d20:	8e 21       	and	r24, r14
    4d22:	9f 21       	and	r25, r15
    4d24:	fc 01       	movw	r30, r24
    4d26:	ee 0f       	add	r30, r30
    4d28:	ff 1f       	adc	r31, r31
    4d2a:	e8 0f       	add	r30, r24
    4d2c:	f9 1f       	adc	r31, r25
    4d2e:	ee 0f       	add	r30, r30
    4d30:	ff 1f       	adc	r31, r31
    4d32:	e8 0d       	add	r30, r8
    4d34:	f9 1d       	adc	r31, r9
    4d36:	82 81       	ldd	r24, Z+2	; 0x02
    4d38:	93 81       	ldd	r25, Z+3	; 0x03
    4d3a:	01 96       	adiw	r24, 0x01	; 1
    4d3c:	93 83       	std	Z+3, r25	; 0x03
    4d3e:	82 83       	std	Z+2, r24	; 0x02
    4d40:	08 17       	cp	r16, r24
    4d42:	19 07       	cpc	r17, r25
    4d44:	58 f4       	brcc	.+22     	; 0x4d5c <tankIO_server_flashLed_register_function+0x2e4>
    4d46:	4e 85       	ldd	r20, Y+14	; 0x0e
    4d48:	5f 85       	ldd	r21, Y+15	; 0x0f
    4d4a:	4f 5f       	subi	r20, 0xFF	; 255
    4d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d4e:	5f 87       	std	Y+15, r21	; 0x0f
    4d50:	4e 87       	std	Y+14, r20	; 0x0e
    4d52:	b8 01       	movw	r22, r16
    4d54:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    4d58:	75 83       	std	Z+5, r23	; 0x05
    4d5a:	64 83       	std	Z+4, r22	; 0x04
    4d5c:	d9 01       	movw	r26, r18
    4d5e:	17 96       	adiw	r26, 0x07	; 7
    4d60:	1c 92       	st	X, r1
    4d62:	1e 92       	st	-X, r1
    4d64:	16 97       	sbiw	r26, 0x06	; 6
    4d66:	80 81       	ld	r24, Z
    4d68:	91 81       	ldd	r25, Z+1	; 0x01
    4d6a:	19 96       	adiw	r26, 0x09	; 9
    4d6c:	9c 93       	st	X, r25
    4d6e:	8e 93       	st	-X, r24
    4d70:	18 97       	sbiw	r26, 0x08	; 8
    4d72:	00 97       	sbiw	r24, 0x00	; 0
    4d74:	29 f0       	breq	.+10     	; 0x4d80 <tankIO_server_flashLed_register_function+0x308>
    4d76:	dc 01       	movw	r26, r24
    4d78:	17 96       	adiw	r26, 0x07	; 7
    4d7a:	3c 93       	st	X, r19
    4d7c:	2e 93       	st	-X, r18
    4d7e:	16 97       	sbiw	r26, 0x06	; 6
    4d80:	31 83       	std	Z+1, r19	; 0x01
    4d82:	20 83       	st	Z, r18
    4d84:	c2 01       	movw	r24, r4
    4d86:	29 2f       	mov	r18, r25
    4d88:	34 2d       	mov	r19, r4
    4d8a:	21 15       	cp	r18, r1
    4d8c:	31 05       	cpc	r19, r1
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <tankIO_server_flashLed_register_function+0x31a>
    4d90:	bc cf       	rjmp	.-136    	; 0x4d0a <tankIO_server_flashLed_register_function+0x292>
    4d92:	08 94       	sec
    4d94:	a1 1c       	adc	r10, r1
    4d96:	b1 1c       	adc	r11, r1
    4d98:	e6 e0       	ldi	r30, 0x06	; 6
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	ce 0e       	add	r12, r30
    4d9e:	df 1e       	adc	r13, r31
    4da0:	88 81       	ld	r24, Y
    4da2:	99 81       	ldd	r25, Y+1	; 0x01
    4da4:	a6 14       	cp	r10, r6
    4da6:	b7 04       	cpc	r11, r7
    4da8:	08 f4       	brcc	.+2      	; 0x4dac <tankIO_server_flashLed_register_function+0x334>
    4daa:	a9 cf       	rjmp	.-174    	; 0x4cfe <tankIO_server_flashLed_register_function+0x286>
    4dac:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    4db0:	e0 91 df 02 	lds	r30, 0x02DF
    4db4:	f0 91 e0 02 	lds	r31, 0x02E0
    4db8:	82 81       	ldd	r24, Z+2	; 0x02
    4dba:	93 81       	ldd	r25, Z+3	; 0x03
    4dbc:	88 0f       	add	r24, r24
    4dbe:	99 1f       	adc	r25, r25
    4dc0:	93 83       	std	Z+3, r25	; 0x03
    4dc2:	82 83       	std	Z+2, r24	; 0x02
    4dc4:	84 81       	ldd	r24, Z+4	; 0x04
    4dc6:	95 81       	ldd	r25, Z+5	; 0x05
    4dc8:	01 96       	adiw	r24, 0x01	; 1
    4dca:	95 83       	std	Z+5, r25	; 0x05
    4dcc:	84 83       	std	Z+4, r24	; 0x04
    4dce:	91 82       	std	Z+1, r9	; 0x01
    4dd0:	80 82       	st	Z, r8
    4dd2:	86 81       	ldd	r24, Z+6	; 0x06
    4dd4:	97 81       	ldd	r25, Z+7	; 0x07
    4dd6:	96 95       	lsr	r25
    4dd8:	87 95       	ror	r24
    4dda:	26 85       	ldd	r18, Z+14	; 0x0e
    4ddc:	37 85       	ldd	r19, Z+15	; 0x0f
    4dde:	82 17       	cp	r24, r18
    4de0:	93 07       	cpc	r25, r19
    4de2:	20 f4       	brcc	.+8      	; 0x4dec <tankIO_server_flashLed_register_function+0x374>
    4de4:	80 89       	ldd	r24, Z+16	; 0x10
    4de6:	91 89       	ldd	r25, Z+17	; 0x11
    4de8:	01 96       	adiw	r24, 0x01	; 1
    4dea:	02 c0       	rjmp	.+4      	; 0x4df0 <tankIO_server_flashLed_register_function+0x378>
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	91 8b       	std	Z+17, r25	; 0x11
    4df2:	80 8b       	std	Z+16, r24	; 0x10
    4df4:	82 30       	cpi	r24, 0x02	; 2
    4df6:	91 05       	cpc	r25, r1
    4df8:	20 f0       	brcs	.+8      	; 0x4e02 <tankIO_server_flashLed_register_function+0x38a>
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	93 8b       	std	Z+19, r25	; 0x13
    4e00:	82 8b       	std	Z+18, r24	; 0x12
    4e02:	df 91       	pop	r29
    4e04:	cf 91       	pop	r28
    4e06:	1f 91       	pop	r17
    4e08:	0f 91       	pop	r16
    4e0a:	ff 90       	pop	r15
    4e0c:	ef 90       	pop	r14
    4e0e:	df 90       	pop	r13
    4e10:	cf 90       	pop	r12
    4e12:	bf 90       	pop	r11
    4e14:	af 90       	pop	r10
    4e16:	9f 90       	pop	r9
    4e18:	8f 90       	pop	r8
    4e1a:	7f 90       	pop	r7
    4e1c:	6f 90       	pop	r6
    4e1e:	5f 90       	pop	r5
    4e20:	4f 90       	pop	r4
    4e22:	08 95       	ret

00004e24 <tankIO_server_flashLeds>:

void tankIO_server_flashLeds(FlashLedsParam *param, uint16_t size) {
    4e24:	fc 01       	movw	r30, r24
	flashLeds(toLedGroup(param->leds.leds), param->leds.mask, param->milliseconds);
    4e26:	a0 81       	ld	r26, Z
    4e28:	b1 81       	ldd	r27, Z+1	; 0x01
    4e2a:	a8 30       	cpi	r26, 0x08	; 8
    4e2c:	b1 05       	cpc	r27, r1
    4e2e:	40 f4       	brcc	.+16     	; 0x4e40 <tankIO_server_flashLeds+0x1c>
    4e30:	aa 0f       	add	r26, r26
    4e32:	bb 1f       	adc	r27, r27
    4e34:	a2 59       	subi	r26, 0x92	; 146
    4e36:	bc 4f       	sbci	r27, 0xFC	; 252
    4e38:	8d 91       	ld	r24, X+
    4e3a:	9c 91       	ld	r25, X
    4e3c:	11 97       	sbiw	r26, 0x01	; 1
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <tankIO_server_flashLeds+0x20>
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	62 81       	ldd	r22, Z+2	; 0x02
    4e46:	73 81       	ldd	r23, Z+3	; 0x03
    4e48:	44 81       	ldd	r20, Z+4	; 0x04
    4e4a:	55 81       	ldd	r21, Z+5	; 0x05
    4e4c:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <flashLeds>
}
    4e50:	08 95       	ret

00004e52 <tankIO_server_flashLeds_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_flashLeds, TANK_IO_flashLeds, FlashLedsParam)
    4e52:	cf 93       	push	r28
    4e54:	df 93       	push	r29
    4e56:	ec 01       	movw	r28, r24
    4e58:	6a 81       	ldd	r22, Y+2	; 0x02
    4e5a:	7b 81       	ldd	r23, Y+3	; 0x03
    4e5c:	88 81       	ld	r24, Y
    4e5e:	99 81       	ldd	r25, Y+1	; 0x01
    4e60:	0e 94 12 27 	call	0x4e24	; 0x4e24 <tankIO_server_flashLeds>
    4e64:	1b 82       	std	Y+3, r1	; 0x03
    4e66:	1a 82       	std	Y+2, r1	; 0x02
    4e68:	df 91       	pop	r29
    4e6a:	cf 91       	pop	r28
    4e6c:	08 95       	ret

00004e6e <tankIO_server_flashLeds_register_function>:
    4e6e:	4f 92       	push	r4
    4e70:	5f 92       	push	r5
    4e72:	6f 92       	push	r6
    4e74:	7f 92       	push	r7
    4e76:	8f 92       	push	r8
    4e78:	9f 92       	push	r9
    4e7a:	af 92       	push	r10
    4e7c:	bf 92       	push	r11
    4e7e:	cf 92       	push	r12
    4e80:	df 92       	push	r13
    4e82:	ef 92       	push	r14
    4e84:	ff 92       	push	r15
    4e86:	0f 93       	push	r16
    4e88:	1f 93       	push	r17
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
    4e8e:	10 92 f7 02 	sts	0x02F7, r1
    4e92:	10 92 f6 02 	sts	0x02F6, r1
    4e96:	ef ee       	ldi	r30, 0xEF	; 239
    4e98:	f2 e0       	ldi	r31, 0x02	; 2
    4e9a:	f0 93 fd 02 	sts	0x02FD, r31
    4e9e:	e0 93 fc 02 	sts	0x02FC, r30
    4ea2:	82 e0       	ldi	r24, 0x02	; 2
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	90 93 ff 02 	sts	0x02FF, r25
    4eaa:	80 93 fe 02 	sts	0x02FE, r24
    4eae:	a0 91 9c 03 	lds	r26, 0x039C
    4eb2:	b0 91 9d 03 	lds	r27, 0x039D
    4eb6:	8f 01       	movw	r16, r30
    4eb8:	0d 5f       	subi	r16, 0xFD	; 253
    4eba:	1f 4f       	sbci	r17, 0xFF	; 255
    4ebc:	10 97       	sbiw	r26, 0x00	; 0
    4ebe:	09 f0       	breq	.+2      	; 0x4ec2 <tankIO_server_flashLeds_register_function+0x54>
    4ec0:	49 c0       	rjmp	.+146    	; 0x4f54 <tankIO_server_flashLeds_register_function+0xe6>
    4ec2:	f0 93 9d 03 	sts	0x039D, r31
    4ec6:	e0 93 9c 03 	sts	0x039C, r30
    4eca:	10 92 f5 02 	sts	0x02F5, r1
    4ece:	10 92 f4 02 	sts	0x02F4, r1
    4ed2:	88 e1       	ldi	r24, 0x18	; 24
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4eda:	90 93 f3 02 	sts	0x02F3, r25
    4ede:	80 93 f2 02 	sts	0x02F2, r24
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <tankIO_server_flashLeds_register_function+0x7a>
    4ee6:	d7 c0       	rjmp	.+430    	; 0x5096 <tankIO_server_flashLeds_register_function+0x228>
    4ee8:	e8 2f       	mov	r30, r24
    4eea:	f9 2f       	mov	r31, r25
    4eec:	88 e1       	ldi	r24, 0x18	; 24
    4eee:	df 01       	movw	r26, r30
    4ef0:	1d 92       	st	X+, r1
    4ef2:	8a 95       	dec	r24
    4ef4:	e9 f7       	brne	.-6      	; 0x4ef0 <tankIO_server_flashLeds_register_function+0x82>
    4ef6:	c0 91 f2 02 	lds	r28, 0x02F2
    4efa:	d0 91 f3 02 	lds	r29, 0x02F3
    4efe:	19 87       	std	Y+9, r17	; 0x09
    4f00:	08 87       	std	Y+8, r16	; 0x08
    4f02:	80 e2       	ldi	r24, 0x20	; 32
    4f04:	90 e0       	ldi	r25, 0x00	; 0
    4f06:	9b 83       	std	Y+3, r25	; 0x03
    4f08:	8a 83       	std	Y+2, r24	; 0x02
    4f0a:	85 e0       	ldi	r24, 0x05	; 5
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	9d 83       	std	Y+5, r25	; 0x05
    4f10:	8c 83       	std	Y+4, r24	; 0x04
    4f12:	83 e0       	ldi	r24, 0x03	; 3
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	9b 87       	std	Y+11, r25	; 0x0b
    4f18:	8a 87       	std	Y+10, r24	; 0x0a
    4f1a:	80 ec       	ldi	r24, 0xC0	; 192
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    4f22:	99 83       	std	Y+1, r25	; 0x01
    4f24:	88 83       	st	Y, r24
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <tankIO_server_flashLeds_register_function+0xbe>
    4f2a:	b5 c0       	rjmp	.+362    	; 0x5096 <tankIO_server_flashLeds_register_function+0x228>
    4f2c:	e8 2f       	mov	r30, r24
    4f2e:	f9 2f       	mov	r31, r25
    4f30:	80 ec       	ldi	r24, 0xC0	; 192
    4f32:	df 01       	movw	r26, r30
    4f34:	1d 92       	st	X+, r1
    4f36:	8a 95       	dec	r24
    4f38:	e9 f7       	brne	.-6      	; 0x4f34 <tankIO_server_flashLeds_register_function+0xc6>
    4f3a:	e0 91 f2 02 	lds	r30, 0x02F2
    4f3e:	f0 91 f3 02 	lds	r31, 0x02F3
    4f42:	81 ee       	ldi	r24, 0xE1	; 225
    4f44:	9f e1       	ldi	r25, 0x1F	; 31
    4f46:	a1 e1       	ldi	r26, 0x11	; 17
    4f48:	b0 ea       	ldi	r27, 0xA0	; 160
    4f4a:	84 8b       	std	Z+20, r24	; 0x14
    4f4c:	95 8b       	std	Z+21, r25	; 0x15
    4f4e:	a6 8b       	std	Z+22, r26	; 0x16
    4f50:	b7 8b       	std	Z+23, r27	; 0x17
    4f52:	16 c0       	rjmp	.+44     	; 0x4f80 <tankIO_server_flashLeds_register_function+0x112>
    4f54:	13 96       	adiw	r26, 0x03	; 3
    4f56:	0d 90       	ld	r0, X+
    4f58:	bc 91       	ld	r27, X
    4f5a:	a0 2d       	mov	r26, r0
    4f5c:	18 96       	adiw	r26, 0x08	; 8
    4f5e:	cd 91       	ld	r28, X+
    4f60:	dc 91       	ld	r29, X
    4f62:	19 97       	sbiw	r26, 0x09	; 9
    4f64:	fd 83       	std	Y+5, r31	; 0x05
    4f66:	ec 83       	std	Y+4, r30	; 0x04
    4f68:	1a 96       	adiw	r26, 0x0a	; 10
    4f6a:	8d 91       	ld	r24, X+
    4f6c:	9c 91       	ld	r25, X
    4f6e:	1b 97       	sbiw	r26, 0x0b	; 11
    4f70:	c8 1b       	sub	r28, r24
    4f72:	d9 0b       	sbc	r29, r25
    4f74:	d6 83       	std	Z+6, r29	; 0x06
    4f76:	c5 83       	std	Z+5, r28	; 0x05
    4f78:	19 96       	adiw	r26, 0x09	; 9
    4f7a:	1c 93       	st	X, r17
    4f7c:	0e 93       	st	-X, r16
    4f7e:	18 97       	sbiw	r26, 0x08	; 8
    4f80:	e0 91 9c 03 	lds	r30, 0x039C
    4f84:	f0 91 9d 03 	lds	r31, 0x039D
    4f88:	c3 81       	ldd	r28, Z+3	; 0x03
    4f8a:	d4 81       	ldd	r29, Z+4	; 0x04
    4f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4f90:	01 96       	adiw	r24, 0x01	; 1
    4f92:	9f 83       	std	Y+7, r25	; 0x07
    4f94:	8e 83       	std	Y+6, r24	; 0x06
    4f96:	42 ef       	ldi	r20, 0xF2	; 242
    4f98:	52 e0       	ldi	r21, 0x02	; 2
    4f9a:	d0 93 f3 02 	sts	0x02F3, r29
    4f9e:	c0 93 f2 02 	sts	0x02F2, r28
    4fa2:	da 01       	movw	r26, r20
    4fa4:	13 97       	sbiw	r26, 0x03	; 3
    4fa6:	20 91 ef 02 	lds	r18, 0x02EF
    4faa:	33 27       	eor	r19, r19
    4fac:	27 fd       	sbrc	r18, 7
    4fae:	30 95       	com	r19
    4fb0:	c9 01       	movw	r24, r18
    4fb2:	96 95       	lsr	r25
    4fb4:	87 95       	ror	r24
    4fb6:	96 95       	lsr	r25
    4fb8:	87 95       	ror	r24
    4fba:	b9 01       	movw	r22, r18
    4fbc:	15 e0       	ldi	r17, 0x05	; 5
    4fbe:	66 0f       	add	r22, r22
    4fc0:	77 1f       	adc	r23, r23
    4fc2:	1a 95       	dec	r17
    4fc4:	e1 f7       	brne	.-8      	; 0x4fbe <tankIO_server_flashLeds_register_function+0x150>
    4fc6:	86 0f       	add	r24, r22
    4fc8:	97 1f       	adc	r25, r23
    4fca:	60 91 f0 02 	lds	r22, 0x02F0
    4fce:	77 27       	eor	r23, r23
    4fd0:	67 fd       	sbrc	r22, 7
    4fd2:	70 95       	com	r23
    4fd4:	86 0f       	add	r24, r22
    4fd6:	97 1f       	adc	r25, r23
    4fd8:	82 27       	eor	r24, r18
    4fda:	93 27       	eor	r25, r19
    4fdc:	52 96       	adiw	r26, 0x12	; 18
    4fde:	9c 93       	st	X, r25
    4fe0:	8e 93       	st	-X, r24
    4fe2:	51 97       	sbiw	r26, 0x11	; 17
    4fe4:	03 80       	ldd	r0, Z+3	; 0x03
    4fe6:	f4 81       	ldd	r31, Z+4	; 0x04
    4fe8:	e0 2d       	mov	r30, r0
    4fea:	22 81       	ldd	r18, Z+2	; 0x02
    4fec:	33 81       	ldd	r19, Z+3	; 0x03
    4fee:	21 50       	subi	r18, 0x01	; 1
    4ff0:	30 40       	sbci	r19, 0x00	; 0
    4ff2:	28 23       	and	r18, r24
    4ff4:	39 23       	and	r19, r25
    4ff6:	c9 01       	movw	r24, r18
    4ff8:	88 0f       	add	r24, r24
    4ffa:	99 1f       	adc	r25, r25
    4ffc:	82 0f       	add	r24, r18
    4ffe:	93 1f       	adc	r25, r19
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	01 90       	ld	r0, Z+
    5006:	f0 81       	ld	r31, Z
    5008:	e0 2d       	mov	r30, r0
    500a:	e8 0f       	add	r30, r24
    500c:	f9 1f       	adc	r31, r25
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	93 81       	ldd	r25, Z+3	; 0x03
    5012:	01 96       	adiw	r24, 0x01	; 1
    5014:	93 83       	std	Z+3, r25	; 0x03
    5016:	82 83       	std	Z+2, r24	; 0x02
    5018:	20 81       	ld	r18, Z
    501a:	31 81       	ldd	r19, Z+1	; 0x01
    501c:	1c 96       	adiw	r26, 0x0c	; 12
    501e:	3c 93       	st	X, r19
    5020:	2e 93       	st	-X, r18
    5022:	1b 97       	sbiw	r26, 0x0b	; 11
    5024:	1a 96       	adiw	r26, 0x0a	; 10
    5026:	1c 92       	st	X, r1
    5028:	1e 92       	st	-X, r1
    502a:	19 97       	sbiw	r26, 0x09	; 9
    502c:	21 15       	cp	r18, r1
    502e:	31 05       	cpc	r19, r1
    5030:	29 f0       	breq	.+10     	; 0x503c <tankIO_server_flashLeds_register_function+0x1ce>
    5032:	d9 01       	movw	r26, r18
    5034:	17 96       	adiw	r26, 0x07	; 7
    5036:	5c 93       	st	X, r21
    5038:	4e 93       	st	-X, r20
    503a:	16 97       	sbiw	r26, 0x06	; 6
    503c:	22 ef       	ldi	r18, 0xF2	; 242
    503e:	32 e0       	ldi	r19, 0x02	; 2
    5040:	31 83       	std	Z+1, r19	; 0x01
    5042:	20 83       	st	Z, r18
    5044:	24 81       	ldd	r18, Z+4	; 0x04
    5046:	35 81       	ldd	r19, Z+5	; 0x05
    5048:	2f 5f       	subi	r18, 0xFF	; 255
    504a:	3f 4f       	sbci	r19, 0xFF	; 255
    504c:	a9 01       	movw	r20, r18
    504e:	44 0f       	add	r20, r20
    5050:	55 1f       	adc	r21, r21
    5052:	f3 e0       	ldi	r31, 0x03	; 3
    5054:	22 0f       	add	r18, r18
    5056:	33 1f       	adc	r19, r19
    5058:	fa 95       	dec	r31
    505a:	e1 f7       	brne	.-8      	; 0x5054 <tankIO_server_flashLeds_register_function+0x1e6>
    505c:	42 0f       	add	r20, r18
    505e:	53 1f       	adc	r21, r19
    5060:	84 17       	cp	r24, r20
    5062:	95 07       	cpc	r25, r21
    5064:	08 f4       	brcc	.+2      	; 0x5068 <tankIO_server_flashLeds_register_function+0x1fa>
    5066:	c8 c0       	rjmp	.+400    	; 0x51f8 <tankIO_server_flashLeds_register_function+0x38a>
    5068:	8a 89       	ldd	r24, Y+18	; 0x12
    506a:	9b 89       	ldd	r25, Y+19	; 0x13
    506c:	81 30       	cpi	r24, 0x01	; 1
    506e:	91 05       	cpc	r25, r1
    5070:	09 f4       	brne	.+2      	; 0x5074 <tankIO_server_flashLeds_register_function+0x206>
    5072:	c2 c0       	rjmp	.+388    	; 0x51f8 <tankIO_server_flashLeds_register_function+0x38a>
    5074:	8a 81       	ldd	r24, Y+2	; 0x02
    5076:	9b 81       	ldd	r25, Y+3	; 0x03
    5078:	8c 01       	movw	r16, r24
    507a:	00 0f       	add	r16, r16
    507c:	11 1f       	adc	r17, r17
    507e:	08 0f       	add	r16, r24
    5080:	19 1f       	adc	r17, r25
    5082:	00 0f       	add	r16, r16
    5084:	11 1f       	adc	r17, r17
    5086:	00 0f       	add	r16, r16
    5088:	11 1f       	adc	r17, r17
    508a:	c8 01       	movw	r24, r16
    508c:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    5090:	4c 01       	movw	r8, r24
    5092:	00 97       	sbiw	r24, 0x00	; 0
    5094:	21 f4       	brne	.+8      	; 0x509e <tankIO_server_flashLeds_register_function+0x230>
    5096:	8f ef       	ldi	r24, 0xFF	; 255
    5098:	9f ef       	ldi	r25, 0xFF	; 255
    509a:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    509e:	60 e0       	ldi	r22, 0x00	; 0
    50a0:	70 e0       	ldi	r23, 0x00	; 0
    50a2:	a8 01       	movw	r20, r16
    50a4:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    50a8:	0e 81       	ldd	r16, Y+6	; 0x06
    50aa:	1f 81       	ldd	r17, Y+7	; 0x07
    50ac:	6a 80       	ldd	r6, Y+2	; 0x02
    50ae:	7b 80       	ldd	r7, Y+3	; 0x03
    50b0:	73 01       	movw	r14, r6
    50b2:	ee 0c       	add	r14, r14
    50b4:	ff 1c       	adc	r15, r15
    50b6:	08 94       	sec
    50b8:	e1 08       	sbc	r14, r1
    50ba:	f1 08       	sbc	r15, r1
    50bc:	c7 01       	movw	r24, r14
    50be:	80 23       	and	r24, r16
    50c0:	91 23       	and	r25, r17
    50c2:	21 e0       	ldi	r18, 0x01	; 1
    50c4:	30 e0       	ldi	r19, 0x00	; 0
    50c6:	00 97       	sbiw	r24, 0x00	; 0
    50c8:	11 f4       	brne	.+4      	; 0x50ce <tankIO_server_flashLeds_register_function+0x260>
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	8c 81       	ldd	r24, Y+4	; 0x04
    50d0:	9d 81       	ldd	r25, Y+5	; 0x05
    50d2:	01 96       	adiw	r24, 0x01	; 1
    50d4:	02 c0       	rjmp	.+4      	; 0x50da <tankIO_server_flashLeds_register_function+0x26c>
    50d6:	16 95       	lsr	r17
    50d8:	07 95       	ror	r16
    50da:	8a 95       	dec	r24
    50dc:	e2 f7       	brpl	.-8      	; 0x50d6 <tankIO_server_flashLeds_register_function+0x268>
    50de:	02 0f       	add	r16, r18
    50e0:	13 1f       	adc	r17, r19
    50e2:	1d 87       	std	Y+13, r17	; 0x0d
    50e4:	0c 87       	std	Y+12, r16	; 0x0c
    50e6:	1f 86       	std	Y+15, r1	; 0x0f
    50e8:	1e 86       	std	Y+14, r1	; 0x0e
    50ea:	cc 24       	eor	r12, r12
    50ec:	dd 24       	eor	r13, r13
    50ee:	aa 24       	eor	r10, r10
    50f0:	bb 24       	eor	r11, r11
    50f2:	51 c0       	rjmp	.+162    	; 0x5196 <tankIO_server_flashLeds_register_function+0x328>
    50f4:	8c 0d       	add	r24, r12
    50f6:	9d 1d       	adc	r25, r13
    50f8:	fc 01       	movw	r30, r24
    50fa:	20 81       	ld	r18, Z
    50fc:	31 81       	ldd	r19, Z+1	; 0x01
    50fe:	40 c0       	rjmp	.+128    	; 0x5180 <tankIO_server_flashLeds_register_function+0x312>
    5100:	d9 01       	movw	r26, r18
    5102:	18 96       	adiw	r26, 0x08	; 8
    5104:	5c 90       	ld	r5, X
    5106:	18 97       	sbiw	r26, 0x08	; 8
    5108:	19 96       	adiw	r26, 0x09	; 9
    510a:	4c 90       	ld	r4, X
    510c:	19 97       	sbiw	r26, 0x09	; 9
    510e:	1e 96       	adiw	r26, 0x0e	; 14
    5110:	8d 91       	ld	r24, X+
    5112:	9c 91       	ld	r25, X
    5114:	1f 97       	sbiw	r26, 0x0f	; 15
    5116:	8e 21       	and	r24, r14
    5118:	9f 21       	and	r25, r15
    511a:	fc 01       	movw	r30, r24
    511c:	ee 0f       	add	r30, r30
    511e:	ff 1f       	adc	r31, r31
    5120:	e8 0f       	add	r30, r24
    5122:	f9 1f       	adc	r31, r25
    5124:	ee 0f       	add	r30, r30
    5126:	ff 1f       	adc	r31, r31
    5128:	e8 0d       	add	r30, r8
    512a:	f9 1d       	adc	r31, r9
    512c:	82 81       	ldd	r24, Z+2	; 0x02
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	01 96       	adiw	r24, 0x01	; 1
    5132:	93 83       	std	Z+3, r25	; 0x03
    5134:	82 83       	std	Z+2, r24	; 0x02
    5136:	08 17       	cp	r16, r24
    5138:	19 07       	cpc	r17, r25
    513a:	58 f4       	brcc	.+22     	; 0x5152 <tankIO_server_flashLeds_register_function+0x2e4>
    513c:	4e 85       	ldd	r20, Y+14	; 0x0e
    513e:	5f 85       	ldd	r21, Y+15	; 0x0f
    5140:	4f 5f       	subi	r20, 0xFF	; 255
    5142:	5f 4f       	sbci	r21, 0xFF	; 255
    5144:	5f 87       	std	Y+15, r21	; 0x0f
    5146:	4e 87       	std	Y+14, r20	; 0x0e
    5148:	b8 01       	movw	r22, r16
    514a:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    514e:	75 83       	std	Z+5, r23	; 0x05
    5150:	64 83       	std	Z+4, r22	; 0x04
    5152:	d9 01       	movw	r26, r18
    5154:	17 96       	adiw	r26, 0x07	; 7
    5156:	1c 92       	st	X, r1
    5158:	1e 92       	st	-X, r1
    515a:	16 97       	sbiw	r26, 0x06	; 6
    515c:	80 81       	ld	r24, Z
    515e:	91 81       	ldd	r25, Z+1	; 0x01
    5160:	19 96       	adiw	r26, 0x09	; 9
    5162:	9c 93       	st	X, r25
    5164:	8e 93       	st	-X, r24
    5166:	18 97       	sbiw	r26, 0x08	; 8
    5168:	00 97       	sbiw	r24, 0x00	; 0
    516a:	29 f0       	breq	.+10     	; 0x5176 <tankIO_server_flashLeds_register_function+0x308>
    516c:	dc 01       	movw	r26, r24
    516e:	17 96       	adiw	r26, 0x07	; 7
    5170:	3c 93       	st	X, r19
    5172:	2e 93       	st	-X, r18
    5174:	16 97       	sbiw	r26, 0x06	; 6
    5176:	31 83       	std	Z+1, r19	; 0x01
    5178:	20 83       	st	Z, r18
    517a:	c2 01       	movw	r24, r4
    517c:	29 2f       	mov	r18, r25
    517e:	34 2d       	mov	r19, r4
    5180:	21 15       	cp	r18, r1
    5182:	31 05       	cpc	r19, r1
    5184:	09 f0       	breq	.+2      	; 0x5188 <tankIO_server_flashLeds_register_function+0x31a>
    5186:	bc cf       	rjmp	.-136    	; 0x5100 <tankIO_server_flashLeds_register_function+0x292>
    5188:	08 94       	sec
    518a:	a1 1c       	adc	r10, r1
    518c:	b1 1c       	adc	r11, r1
    518e:	e6 e0       	ldi	r30, 0x06	; 6
    5190:	f0 e0       	ldi	r31, 0x00	; 0
    5192:	ce 0e       	add	r12, r30
    5194:	df 1e       	adc	r13, r31
    5196:	88 81       	ld	r24, Y
    5198:	99 81       	ldd	r25, Y+1	; 0x01
    519a:	a6 14       	cp	r10, r6
    519c:	b7 04       	cpc	r11, r7
    519e:	08 f4       	brcc	.+2      	; 0x51a2 <tankIO_server_flashLeds_register_function+0x334>
    51a0:	a9 cf       	rjmp	.-174    	; 0x50f4 <tankIO_server_flashLeds_register_function+0x286>
    51a2:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    51a6:	e0 91 f2 02 	lds	r30, 0x02F2
    51aa:	f0 91 f3 02 	lds	r31, 0x02F3
    51ae:	82 81       	ldd	r24, Z+2	; 0x02
    51b0:	93 81       	ldd	r25, Z+3	; 0x03
    51b2:	88 0f       	add	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	93 83       	std	Z+3, r25	; 0x03
    51b8:	82 83       	std	Z+2, r24	; 0x02
    51ba:	84 81       	ldd	r24, Z+4	; 0x04
    51bc:	95 81       	ldd	r25, Z+5	; 0x05
    51be:	01 96       	adiw	r24, 0x01	; 1
    51c0:	95 83       	std	Z+5, r25	; 0x05
    51c2:	84 83       	std	Z+4, r24	; 0x04
    51c4:	91 82       	std	Z+1, r9	; 0x01
    51c6:	80 82       	st	Z, r8
    51c8:	86 81       	ldd	r24, Z+6	; 0x06
    51ca:	97 81       	ldd	r25, Z+7	; 0x07
    51cc:	96 95       	lsr	r25
    51ce:	87 95       	ror	r24
    51d0:	26 85       	ldd	r18, Z+14	; 0x0e
    51d2:	37 85       	ldd	r19, Z+15	; 0x0f
    51d4:	82 17       	cp	r24, r18
    51d6:	93 07       	cpc	r25, r19
    51d8:	20 f4       	brcc	.+8      	; 0x51e2 <tankIO_server_flashLeds_register_function+0x374>
    51da:	80 89       	ldd	r24, Z+16	; 0x10
    51dc:	91 89       	ldd	r25, Z+17	; 0x11
    51de:	01 96       	adiw	r24, 0x01	; 1
    51e0:	02 c0       	rjmp	.+4      	; 0x51e6 <tankIO_server_flashLeds_register_function+0x378>
    51e2:	80 e0       	ldi	r24, 0x00	; 0
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	91 8b       	std	Z+17, r25	; 0x11
    51e8:	80 8b       	std	Z+16, r24	; 0x10
    51ea:	82 30       	cpi	r24, 0x02	; 2
    51ec:	91 05       	cpc	r25, r1
    51ee:	20 f0       	brcs	.+8      	; 0x51f8 <tankIO_server_flashLeds_register_function+0x38a>
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	93 8b       	std	Z+19, r25	; 0x13
    51f6:	82 8b       	std	Z+18, r24	; 0x12
    51f8:	df 91       	pop	r29
    51fa:	cf 91       	pop	r28
    51fc:	1f 91       	pop	r17
    51fe:	0f 91       	pop	r16
    5200:	ff 90       	pop	r15
    5202:	ef 90       	pop	r14
    5204:	df 90       	pop	r13
    5206:	cf 90       	pop	r12
    5208:	bf 90       	pop	r11
    520a:	af 90       	pop	r10
    520c:	9f 90       	pop	r9
    520e:	8f 90       	pop	r8
    5210:	7f 90       	pop	r7
    5212:	6f 90       	pop	r6
    5214:	5f 90       	pop	r5
    5216:	4f 90       	pop	r4
    5218:	08 95       	ret

0000521a <tankIO_server_flashAllLeds>:

void tankIO_server_flashAllLeds(FlashAllLedsParam *param, uint16_t size) {
    521a:	dc 01       	movw	r26, r24
	flashAllLeds(toLedGroup(param->leds), param->milliseconds);
    521c:	ed 91       	ld	r30, X+
    521e:	fc 91       	ld	r31, X
    5220:	11 97       	sbiw	r26, 0x01	; 1
    5222:	e8 30       	cpi	r30, 0x08	; 8
    5224:	f1 05       	cpc	r31, r1
    5226:	38 f4       	brcc	.+14     	; 0x5236 <tankIO_server_flashAllLeds+0x1c>
    5228:	ee 0f       	add	r30, r30
    522a:	ff 1f       	adc	r31, r31
    522c:	e2 59       	subi	r30, 0x92	; 146
    522e:	fc 4f       	sbci	r31, 0xFC	; 252
    5230:	80 81       	ld	r24, Z
    5232:	91 81       	ldd	r25, Z+1	; 0x01
    5234:	02 c0       	rjmp	.+4      	; 0x523a <tankIO_server_flashAllLeds+0x20>
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	12 96       	adiw	r26, 0x02	; 2
    523c:	6d 91       	ld	r22, X+
    523e:	7c 91       	ld	r23, X
    5240:	13 97       	sbiw	r26, 0x03	; 3
    5242:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <flashAllLeds>
}
    5246:	08 95       	ret

00005248 <tankIO_server_flashAllLeds_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_flashAllLeds, TANK_IO_flashAllLeds, FlashAllLedsParam)
    5248:	cf 93       	push	r28
    524a:	df 93       	push	r29
    524c:	ec 01       	movw	r28, r24
    524e:	6a 81       	ldd	r22, Y+2	; 0x02
    5250:	7b 81       	ldd	r23, Y+3	; 0x03
    5252:	88 81       	ld	r24, Y
    5254:	99 81       	ldd	r25, Y+1	; 0x01
    5256:	0e 94 0d 29 	call	0x521a	; 0x521a <tankIO_server_flashAllLeds>
    525a:	1b 82       	std	Y+3, r1	; 0x03
    525c:	1a 82       	std	Y+2, r1	; 0x02
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	08 95       	ret

00005264 <tankIO_server_flashAllLeds_register_function>:
    5264:	4f 92       	push	r4
    5266:	5f 92       	push	r5
    5268:	6f 92       	push	r6
    526a:	7f 92       	push	r7
    526c:	8f 92       	push	r8
    526e:	9f 92       	push	r9
    5270:	af 92       	push	r10
    5272:	bf 92       	push	r11
    5274:	cf 92       	push	r12
    5276:	df 92       	push	r13
    5278:	ef 92       	push	r14
    527a:	ff 92       	push	r15
    527c:	0f 93       	push	r16
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
    5284:	10 92 0a 03 	sts	0x030A, r1
    5288:	10 92 09 03 	sts	0x0309, r1
    528c:	e2 e0       	ldi	r30, 0x02	; 2
    528e:	f3 e0       	ldi	r31, 0x03	; 3
    5290:	f0 93 10 03 	sts	0x0310, r31
    5294:	e0 93 0f 03 	sts	0x030F, r30
    5298:	82 e0       	ldi	r24, 0x02	; 2
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	90 93 12 03 	sts	0x0312, r25
    52a0:	80 93 11 03 	sts	0x0311, r24
    52a4:	a0 91 9c 03 	lds	r26, 0x039C
    52a8:	b0 91 9d 03 	lds	r27, 0x039D
    52ac:	8f 01       	movw	r16, r30
    52ae:	0d 5f       	subi	r16, 0xFD	; 253
    52b0:	1f 4f       	sbci	r17, 0xFF	; 255
    52b2:	10 97       	sbiw	r26, 0x00	; 0
    52b4:	09 f0       	breq	.+2      	; 0x52b8 <tankIO_server_flashAllLeds_register_function+0x54>
    52b6:	49 c0       	rjmp	.+146    	; 0x534a <tankIO_server_flashAllLeds_register_function+0xe6>
    52b8:	f0 93 9d 03 	sts	0x039D, r31
    52bc:	e0 93 9c 03 	sts	0x039C, r30
    52c0:	10 92 08 03 	sts	0x0308, r1
    52c4:	10 92 07 03 	sts	0x0307, r1
    52c8:	88 e1       	ldi	r24, 0x18	; 24
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    52d0:	90 93 06 03 	sts	0x0306, r25
    52d4:	80 93 05 03 	sts	0x0305, r24
    52d8:	00 97       	sbiw	r24, 0x00	; 0
    52da:	09 f4       	brne	.+2      	; 0x52de <tankIO_server_flashAllLeds_register_function+0x7a>
    52dc:	d7 c0       	rjmp	.+430    	; 0x548c <tankIO_server_flashAllLeds_register_function+0x228>
    52de:	e8 2f       	mov	r30, r24
    52e0:	f9 2f       	mov	r31, r25
    52e2:	88 e1       	ldi	r24, 0x18	; 24
    52e4:	df 01       	movw	r26, r30
    52e6:	1d 92       	st	X+, r1
    52e8:	8a 95       	dec	r24
    52ea:	e9 f7       	brne	.-6      	; 0x52e6 <tankIO_server_flashAllLeds_register_function+0x82>
    52ec:	c0 91 05 03 	lds	r28, 0x0305
    52f0:	d0 91 06 03 	lds	r29, 0x0306
    52f4:	19 87       	std	Y+9, r17	; 0x09
    52f6:	08 87       	std	Y+8, r16	; 0x08
    52f8:	80 e2       	ldi	r24, 0x20	; 32
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	9b 83       	std	Y+3, r25	; 0x03
    52fe:	8a 83       	std	Y+2, r24	; 0x02
    5300:	85 e0       	ldi	r24, 0x05	; 5
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	9d 83       	std	Y+5, r25	; 0x05
    5306:	8c 83       	std	Y+4, r24	; 0x04
    5308:	83 e0       	ldi	r24, 0x03	; 3
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	9b 87       	std	Y+11, r25	; 0x0b
    530e:	8a 87       	std	Y+10, r24	; 0x0a
    5310:	80 ec       	ldi	r24, 0xC0	; 192
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    5318:	99 83       	std	Y+1, r25	; 0x01
    531a:	88 83       	st	Y, r24
    531c:	00 97       	sbiw	r24, 0x00	; 0
    531e:	09 f4       	brne	.+2      	; 0x5322 <tankIO_server_flashAllLeds_register_function+0xbe>
    5320:	b5 c0       	rjmp	.+362    	; 0x548c <tankIO_server_flashAllLeds_register_function+0x228>
    5322:	e8 2f       	mov	r30, r24
    5324:	f9 2f       	mov	r31, r25
    5326:	80 ec       	ldi	r24, 0xC0	; 192
    5328:	df 01       	movw	r26, r30
    532a:	1d 92       	st	X+, r1
    532c:	8a 95       	dec	r24
    532e:	e9 f7       	brne	.-6      	; 0x532a <tankIO_server_flashAllLeds_register_function+0xc6>
    5330:	e0 91 05 03 	lds	r30, 0x0305
    5334:	f0 91 06 03 	lds	r31, 0x0306
    5338:	81 ee       	ldi	r24, 0xE1	; 225
    533a:	9f e1       	ldi	r25, 0x1F	; 31
    533c:	a1 e1       	ldi	r26, 0x11	; 17
    533e:	b0 ea       	ldi	r27, 0xA0	; 160
    5340:	84 8b       	std	Z+20, r24	; 0x14
    5342:	95 8b       	std	Z+21, r25	; 0x15
    5344:	a6 8b       	std	Z+22, r26	; 0x16
    5346:	b7 8b       	std	Z+23, r27	; 0x17
    5348:	16 c0       	rjmp	.+44     	; 0x5376 <tankIO_server_flashAllLeds_register_function+0x112>
    534a:	13 96       	adiw	r26, 0x03	; 3
    534c:	0d 90       	ld	r0, X+
    534e:	bc 91       	ld	r27, X
    5350:	a0 2d       	mov	r26, r0
    5352:	18 96       	adiw	r26, 0x08	; 8
    5354:	cd 91       	ld	r28, X+
    5356:	dc 91       	ld	r29, X
    5358:	19 97       	sbiw	r26, 0x09	; 9
    535a:	fd 83       	std	Y+5, r31	; 0x05
    535c:	ec 83       	std	Y+4, r30	; 0x04
    535e:	1a 96       	adiw	r26, 0x0a	; 10
    5360:	8d 91       	ld	r24, X+
    5362:	9c 91       	ld	r25, X
    5364:	1b 97       	sbiw	r26, 0x0b	; 11
    5366:	c8 1b       	sub	r28, r24
    5368:	d9 0b       	sbc	r29, r25
    536a:	d6 83       	std	Z+6, r29	; 0x06
    536c:	c5 83       	std	Z+5, r28	; 0x05
    536e:	19 96       	adiw	r26, 0x09	; 9
    5370:	1c 93       	st	X, r17
    5372:	0e 93       	st	-X, r16
    5374:	18 97       	sbiw	r26, 0x08	; 8
    5376:	e0 91 9c 03 	lds	r30, 0x039C
    537a:	f0 91 9d 03 	lds	r31, 0x039D
    537e:	c3 81       	ldd	r28, Z+3	; 0x03
    5380:	d4 81       	ldd	r29, Z+4	; 0x04
    5382:	8e 81       	ldd	r24, Y+6	; 0x06
    5384:	9f 81       	ldd	r25, Y+7	; 0x07
    5386:	01 96       	adiw	r24, 0x01	; 1
    5388:	9f 83       	std	Y+7, r25	; 0x07
    538a:	8e 83       	std	Y+6, r24	; 0x06
    538c:	45 e0       	ldi	r20, 0x05	; 5
    538e:	53 e0       	ldi	r21, 0x03	; 3
    5390:	d0 93 06 03 	sts	0x0306, r29
    5394:	c0 93 05 03 	sts	0x0305, r28
    5398:	da 01       	movw	r26, r20
    539a:	13 97       	sbiw	r26, 0x03	; 3
    539c:	20 91 02 03 	lds	r18, 0x0302
    53a0:	33 27       	eor	r19, r19
    53a2:	27 fd       	sbrc	r18, 7
    53a4:	30 95       	com	r19
    53a6:	c9 01       	movw	r24, r18
    53a8:	96 95       	lsr	r25
    53aa:	87 95       	ror	r24
    53ac:	96 95       	lsr	r25
    53ae:	87 95       	ror	r24
    53b0:	b9 01       	movw	r22, r18
    53b2:	15 e0       	ldi	r17, 0x05	; 5
    53b4:	66 0f       	add	r22, r22
    53b6:	77 1f       	adc	r23, r23
    53b8:	1a 95       	dec	r17
    53ba:	e1 f7       	brne	.-8      	; 0x53b4 <tankIO_server_flashAllLeds_register_function+0x150>
    53bc:	86 0f       	add	r24, r22
    53be:	97 1f       	adc	r25, r23
    53c0:	60 91 03 03 	lds	r22, 0x0303
    53c4:	77 27       	eor	r23, r23
    53c6:	67 fd       	sbrc	r22, 7
    53c8:	70 95       	com	r23
    53ca:	86 0f       	add	r24, r22
    53cc:	97 1f       	adc	r25, r23
    53ce:	82 27       	eor	r24, r18
    53d0:	93 27       	eor	r25, r19
    53d2:	52 96       	adiw	r26, 0x12	; 18
    53d4:	9c 93       	st	X, r25
    53d6:	8e 93       	st	-X, r24
    53d8:	51 97       	sbiw	r26, 0x11	; 17
    53da:	03 80       	ldd	r0, Z+3	; 0x03
    53dc:	f4 81       	ldd	r31, Z+4	; 0x04
    53de:	e0 2d       	mov	r30, r0
    53e0:	22 81       	ldd	r18, Z+2	; 0x02
    53e2:	33 81       	ldd	r19, Z+3	; 0x03
    53e4:	21 50       	subi	r18, 0x01	; 1
    53e6:	30 40       	sbci	r19, 0x00	; 0
    53e8:	28 23       	and	r18, r24
    53ea:	39 23       	and	r19, r25
    53ec:	c9 01       	movw	r24, r18
    53ee:	88 0f       	add	r24, r24
    53f0:	99 1f       	adc	r25, r25
    53f2:	82 0f       	add	r24, r18
    53f4:	93 1f       	adc	r25, r19
    53f6:	88 0f       	add	r24, r24
    53f8:	99 1f       	adc	r25, r25
    53fa:	01 90       	ld	r0, Z+
    53fc:	f0 81       	ld	r31, Z
    53fe:	e0 2d       	mov	r30, r0
    5400:	e8 0f       	add	r30, r24
    5402:	f9 1f       	adc	r31, r25
    5404:	82 81       	ldd	r24, Z+2	; 0x02
    5406:	93 81       	ldd	r25, Z+3	; 0x03
    5408:	01 96       	adiw	r24, 0x01	; 1
    540a:	93 83       	std	Z+3, r25	; 0x03
    540c:	82 83       	std	Z+2, r24	; 0x02
    540e:	20 81       	ld	r18, Z
    5410:	31 81       	ldd	r19, Z+1	; 0x01
    5412:	1c 96       	adiw	r26, 0x0c	; 12
    5414:	3c 93       	st	X, r19
    5416:	2e 93       	st	-X, r18
    5418:	1b 97       	sbiw	r26, 0x0b	; 11
    541a:	1a 96       	adiw	r26, 0x0a	; 10
    541c:	1c 92       	st	X, r1
    541e:	1e 92       	st	-X, r1
    5420:	19 97       	sbiw	r26, 0x09	; 9
    5422:	21 15       	cp	r18, r1
    5424:	31 05       	cpc	r19, r1
    5426:	29 f0       	breq	.+10     	; 0x5432 <tankIO_server_flashAllLeds_register_function+0x1ce>
    5428:	d9 01       	movw	r26, r18
    542a:	17 96       	adiw	r26, 0x07	; 7
    542c:	5c 93       	st	X, r21
    542e:	4e 93       	st	-X, r20
    5430:	16 97       	sbiw	r26, 0x06	; 6
    5432:	25 e0       	ldi	r18, 0x05	; 5
    5434:	33 e0       	ldi	r19, 0x03	; 3
    5436:	31 83       	std	Z+1, r19	; 0x01
    5438:	20 83       	st	Z, r18
    543a:	24 81       	ldd	r18, Z+4	; 0x04
    543c:	35 81       	ldd	r19, Z+5	; 0x05
    543e:	2f 5f       	subi	r18, 0xFF	; 255
    5440:	3f 4f       	sbci	r19, 0xFF	; 255
    5442:	a9 01       	movw	r20, r18
    5444:	44 0f       	add	r20, r20
    5446:	55 1f       	adc	r21, r21
    5448:	f3 e0       	ldi	r31, 0x03	; 3
    544a:	22 0f       	add	r18, r18
    544c:	33 1f       	adc	r19, r19
    544e:	fa 95       	dec	r31
    5450:	e1 f7       	brne	.-8      	; 0x544a <tankIO_server_flashAllLeds_register_function+0x1e6>
    5452:	42 0f       	add	r20, r18
    5454:	53 1f       	adc	r21, r19
    5456:	84 17       	cp	r24, r20
    5458:	95 07       	cpc	r25, r21
    545a:	08 f4       	brcc	.+2      	; 0x545e <tankIO_server_flashAllLeds_register_function+0x1fa>
    545c:	c8 c0       	rjmp	.+400    	; 0x55ee <tankIO_server_flashAllLeds_register_function+0x38a>
    545e:	8a 89       	ldd	r24, Y+18	; 0x12
    5460:	9b 89       	ldd	r25, Y+19	; 0x13
    5462:	81 30       	cpi	r24, 0x01	; 1
    5464:	91 05       	cpc	r25, r1
    5466:	09 f4       	brne	.+2      	; 0x546a <tankIO_server_flashAllLeds_register_function+0x206>
    5468:	c2 c0       	rjmp	.+388    	; 0x55ee <tankIO_server_flashAllLeds_register_function+0x38a>
    546a:	8a 81       	ldd	r24, Y+2	; 0x02
    546c:	9b 81       	ldd	r25, Y+3	; 0x03
    546e:	8c 01       	movw	r16, r24
    5470:	00 0f       	add	r16, r16
    5472:	11 1f       	adc	r17, r17
    5474:	08 0f       	add	r16, r24
    5476:	19 1f       	adc	r17, r25
    5478:	00 0f       	add	r16, r16
    547a:	11 1f       	adc	r17, r17
    547c:	00 0f       	add	r16, r16
    547e:	11 1f       	adc	r17, r17
    5480:	c8 01       	movw	r24, r16
    5482:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    5486:	4c 01       	movw	r8, r24
    5488:	00 97       	sbiw	r24, 0x00	; 0
    548a:	21 f4       	brne	.+8      	; 0x5494 <tankIO_server_flashAllLeds_register_function+0x230>
    548c:	8f ef       	ldi	r24, 0xFF	; 255
    548e:	9f ef       	ldi	r25, 0xFF	; 255
    5490:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    5494:	60 e0       	ldi	r22, 0x00	; 0
    5496:	70 e0       	ldi	r23, 0x00	; 0
    5498:	a8 01       	movw	r20, r16
    549a:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    549e:	0e 81       	ldd	r16, Y+6	; 0x06
    54a0:	1f 81       	ldd	r17, Y+7	; 0x07
    54a2:	6a 80       	ldd	r6, Y+2	; 0x02
    54a4:	7b 80       	ldd	r7, Y+3	; 0x03
    54a6:	73 01       	movw	r14, r6
    54a8:	ee 0c       	add	r14, r14
    54aa:	ff 1c       	adc	r15, r15
    54ac:	08 94       	sec
    54ae:	e1 08       	sbc	r14, r1
    54b0:	f1 08       	sbc	r15, r1
    54b2:	c7 01       	movw	r24, r14
    54b4:	80 23       	and	r24, r16
    54b6:	91 23       	and	r25, r17
    54b8:	21 e0       	ldi	r18, 0x01	; 1
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	00 97       	sbiw	r24, 0x00	; 0
    54be:	11 f4       	brne	.+4      	; 0x54c4 <tankIO_server_flashAllLeds_register_function+0x260>
    54c0:	20 e0       	ldi	r18, 0x00	; 0
    54c2:	30 e0       	ldi	r19, 0x00	; 0
    54c4:	8c 81       	ldd	r24, Y+4	; 0x04
    54c6:	9d 81       	ldd	r25, Y+5	; 0x05
    54c8:	01 96       	adiw	r24, 0x01	; 1
    54ca:	02 c0       	rjmp	.+4      	; 0x54d0 <tankIO_server_flashAllLeds_register_function+0x26c>
    54cc:	16 95       	lsr	r17
    54ce:	07 95       	ror	r16
    54d0:	8a 95       	dec	r24
    54d2:	e2 f7       	brpl	.-8      	; 0x54cc <tankIO_server_flashAllLeds_register_function+0x268>
    54d4:	02 0f       	add	r16, r18
    54d6:	13 1f       	adc	r17, r19
    54d8:	1d 87       	std	Y+13, r17	; 0x0d
    54da:	0c 87       	std	Y+12, r16	; 0x0c
    54dc:	1f 86       	std	Y+15, r1	; 0x0f
    54de:	1e 86       	std	Y+14, r1	; 0x0e
    54e0:	cc 24       	eor	r12, r12
    54e2:	dd 24       	eor	r13, r13
    54e4:	aa 24       	eor	r10, r10
    54e6:	bb 24       	eor	r11, r11
    54e8:	51 c0       	rjmp	.+162    	; 0x558c <tankIO_server_flashAllLeds_register_function+0x328>
    54ea:	8c 0d       	add	r24, r12
    54ec:	9d 1d       	adc	r25, r13
    54ee:	fc 01       	movw	r30, r24
    54f0:	20 81       	ld	r18, Z
    54f2:	31 81       	ldd	r19, Z+1	; 0x01
    54f4:	40 c0       	rjmp	.+128    	; 0x5576 <tankIO_server_flashAllLeds_register_function+0x312>
    54f6:	d9 01       	movw	r26, r18
    54f8:	18 96       	adiw	r26, 0x08	; 8
    54fa:	5c 90       	ld	r5, X
    54fc:	18 97       	sbiw	r26, 0x08	; 8
    54fe:	19 96       	adiw	r26, 0x09	; 9
    5500:	4c 90       	ld	r4, X
    5502:	19 97       	sbiw	r26, 0x09	; 9
    5504:	1e 96       	adiw	r26, 0x0e	; 14
    5506:	8d 91       	ld	r24, X+
    5508:	9c 91       	ld	r25, X
    550a:	1f 97       	sbiw	r26, 0x0f	; 15
    550c:	8e 21       	and	r24, r14
    550e:	9f 21       	and	r25, r15
    5510:	fc 01       	movw	r30, r24
    5512:	ee 0f       	add	r30, r30
    5514:	ff 1f       	adc	r31, r31
    5516:	e8 0f       	add	r30, r24
    5518:	f9 1f       	adc	r31, r25
    551a:	ee 0f       	add	r30, r30
    551c:	ff 1f       	adc	r31, r31
    551e:	e8 0d       	add	r30, r8
    5520:	f9 1d       	adc	r31, r9
    5522:	82 81       	ldd	r24, Z+2	; 0x02
    5524:	93 81       	ldd	r25, Z+3	; 0x03
    5526:	01 96       	adiw	r24, 0x01	; 1
    5528:	93 83       	std	Z+3, r25	; 0x03
    552a:	82 83       	std	Z+2, r24	; 0x02
    552c:	08 17       	cp	r16, r24
    552e:	19 07       	cpc	r17, r25
    5530:	58 f4       	brcc	.+22     	; 0x5548 <tankIO_server_flashAllLeds_register_function+0x2e4>
    5532:	4e 85       	ldd	r20, Y+14	; 0x0e
    5534:	5f 85       	ldd	r21, Y+15	; 0x0f
    5536:	4f 5f       	subi	r20, 0xFF	; 255
    5538:	5f 4f       	sbci	r21, 0xFF	; 255
    553a:	5f 87       	std	Y+15, r21	; 0x0f
    553c:	4e 87       	std	Y+14, r20	; 0x0e
    553e:	b8 01       	movw	r22, r16
    5540:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    5544:	75 83       	std	Z+5, r23	; 0x05
    5546:	64 83       	std	Z+4, r22	; 0x04
    5548:	d9 01       	movw	r26, r18
    554a:	17 96       	adiw	r26, 0x07	; 7
    554c:	1c 92       	st	X, r1
    554e:	1e 92       	st	-X, r1
    5550:	16 97       	sbiw	r26, 0x06	; 6
    5552:	80 81       	ld	r24, Z
    5554:	91 81       	ldd	r25, Z+1	; 0x01
    5556:	19 96       	adiw	r26, 0x09	; 9
    5558:	9c 93       	st	X, r25
    555a:	8e 93       	st	-X, r24
    555c:	18 97       	sbiw	r26, 0x08	; 8
    555e:	00 97       	sbiw	r24, 0x00	; 0
    5560:	29 f0       	breq	.+10     	; 0x556c <tankIO_server_flashAllLeds_register_function+0x308>
    5562:	dc 01       	movw	r26, r24
    5564:	17 96       	adiw	r26, 0x07	; 7
    5566:	3c 93       	st	X, r19
    5568:	2e 93       	st	-X, r18
    556a:	16 97       	sbiw	r26, 0x06	; 6
    556c:	31 83       	std	Z+1, r19	; 0x01
    556e:	20 83       	st	Z, r18
    5570:	c2 01       	movw	r24, r4
    5572:	29 2f       	mov	r18, r25
    5574:	34 2d       	mov	r19, r4
    5576:	21 15       	cp	r18, r1
    5578:	31 05       	cpc	r19, r1
    557a:	09 f0       	breq	.+2      	; 0x557e <tankIO_server_flashAllLeds_register_function+0x31a>
    557c:	bc cf       	rjmp	.-136    	; 0x54f6 <tankIO_server_flashAllLeds_register_function+0x292>
    557e:	08 94       	sec
    5580:	a1 1c       	adc	r10, r1
    5582:	b1 1c       	adc	r11, r1
    5584:	e6 e0       	ldi	r30, 0x06	; 6
    5586:	f0 e0       	ldi	r31, 0x00	; 0
    5588:	ce 0e       	add	r12, r30
    558a:	df 1e       	adc	r13, r31
    558c:	88 81       	ld	r24, Y
    558e:	99 81       	ldd	r25, Y+1	; 0x01
    5590:	a6 14       	cp	r10, r6
    5592:	b7 04       	cpc	r11, r7
    5594:	08 f4       	brcc	.+2      	; 0x5598 <tankIO_server_flashAllLeds_register_function+0x334>
    5596:	a9 cf       	rjmp	.-174    	; 0x54ea <tankIO_server_flashAllLeds_register_function+0x286>
    5598:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    559c:	e0 91 05 03 	lds	r30, 0x0305
    55a0:	f0 91 06 03 	lds	r31, 0x0306
    55a4:	82 81       	ldd	r24, Z+2	; 0x02
    55a6:	93 81       	ldd	r25, Z+3	; 0x03
    55a8:	88 0f       	add	r24, r24
    55aa:	99 1f       	adc	r25, r25
    55ac:	93 83       	std	Z+3, r25	; 0x03
    55ae:	82 83       	std	Z+2, r24	; 0x02
    55b0:	84 81       	ldd	r24, Z+4	; 0x04
    55b2:	95 81       	ldd	r25, Z+5	; 0x05
    55b4:	01 96       	adiw	r24, 0x01	; 1
    55b6:	95 83       	std	Z+5, r25	; 0x05
    55b8:	84 83       	std	Z+4, r24	; 0x04
    55ba:	91 82       	std	Z+1, r9	; 0x01
    55bc:	80 82       	st	Z, r8
    55be:	86 81       	ldd	r24, Z+6	; 0x06
    55c0:	97 81       	ldd	r25, Z+7	; 0x07
    55c2:	96 95       	lsr	r25
    55c4:	87 95       	ror	r24
    55c6:	26 85       	ldd	r18, Z+14	; 0x0e
    55c8:	37 85       	ldd	r19, Z+15	; 0x0f
    55ca:	82 17       	cp	r24, r18
    55cc:	93 07       	cpc	r25, r19
    55ce:	20 f4       	brcc	.+8      	; 0x55d8 <tankIO_server_flashAllLeds_register_function+0x374>
    55d0:	80 89       	ldd	r24, Z+16	; 0x10
    55d2:	91 89       	ldd	r25, Z+17	; 0x11
    55d4:	01 96       	adiw	r24, 0x01	; 1
    55d6:	02 c0       	rjmp	.+4      	; 0x55dc <tankIO_server_flashAllLeds_register_function+0x378>
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	90 e0       	ldi	r25, 0x00	; 0
    55dc:	91 8b       	std	Z+17, r25	; 0x11
    55de:	80 8b       	std	Z+16, r24	; 0x10
    55e0:	82 30       	cpi	r24, 0x02	; 2
    55e2:	91 05       	cpc	r25, r1
    55e4:	20 f0       	brcs	.+8      	; 0x55ee <tankIO_server_flashAllLeds_register_function+0x38a>
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	93 8b       	std	Z+19, r25	; 0x13
    55ec:	82 8b       	std	Z+18, r24	; 0x12
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	1f 91       	pop	r17
    55f4:	0f 91       	pop	r16
    55f6:	ff 90       	pop	r15
    55f8:	ef 90       	pop	r14
    55fa:	df 90       	pop	r13
    55fc:	cf 90       	pop	r12
    55fe:	bf 90       	pop	r11
    5600:	af 90       	pop	r10
    5602:	9f 90       	pop	r9
    5604:	8f 90       	pop	r8
    5606:	7f 90       	pop	r7
    5608:	6f 90       	pop	r6
    560a:	5f 90       	pop	r5
    560c:	4f 90       	pop	r4
    560e:	08 95       	ret

00005610 <tankIO_server_blinkByte>:

// ==
// Other
// ==

void tankIO_server_blinkByte(BlinkByteParam *param, uint16_t size) {
    5610:	fc 01       	movw	r30, r24
	blinkByte(toLedGroup(param->display), toLedGroup(param->notifier), param->data);
    5612:	a0 81       	ld	r26, Z
    5614:	b1 81       	ldd	r27, Z+1	; 0x01
    5616:	a8 30       	cpi	r26, 0x08	; 8
    5618:	b1 05       	cpc	r27, r1
    561a:	40 f4       	brcc	.+16     	; 0x562c <tankIO_server_blinkByte+0x1c>
    561c:	aa 0f       	add	r26, r26
    561e:	bb 1f       	adc	r27, r27
    5620:	a2 59       	subi	r26, 0x92	; 146
    5622:	bc 4f       	sbci	r27, 0xFC	; 252
    5624:	8d 91       	ld	r24, X+
    5626:	9c 91       	ld	r25, X
    5628:	11 97       	sbiw	r26, 0x01	; 1
    562a:	02 c0       	rjmp	.+4      	; 0x5630 <tankIO_server_blinkByte+0x20>
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	a2 81       	ldd	r26, Z+2	; 0x02
    5632:	b3 81       	ldd	r27, Z+3	; 0x03
    5634:	a8 30       	cpi	r26, 0x08	; 8
    5636:	b1 05       	cpc	r27, r1
    5638:	40 f4       	brcc	.+16     	; 0x564a <tankIO_server_blinkByte+0x3a>
    563a:	aa 0f       	add	r26, r26
    563c:	bb 1f       	adc	r27, r27
    563e:	a2 59       	subi	r26, 0x92	; 146
    5640:	bc 4f       	sbci	r27, 0xFC	; 252
    5642:	6d 91       	ld	r22, X+
    5644:	7c 91       	ld	r23, X
    5646:	11 97       	sbiw	r26, 0x01	; 1
    5648:	02 c0       	rjmp	.+4      	; 0x564e <tankIO_server_blinkByte+0x3e>
    564a:	60 e0       	ldi	r22, 0x00	; 0
    564c:	70 e0       	ldi	r23, 0x00	; 0
    564e:	44 81       	ldd	r20, Z+4	; 0x04
    5650:	0e 94 2c 2f 	call	0x5e58	; 0x5e58 <blinkByte>
}
    5654:	08 95       	ret

00005656 <tankIO_server_blinkByte_handler>:
TWI_RPC_SERVER_FUNCTION_ASYNC_VOID(tankIO_server_blinkByte, TANK_IO_blinkByte, BlinkByteParam)
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	ec 01       	movw	r28, r24
    565c:	6a 81       	ldd	r22, Y+2	; 0x02
    565e:	7b 81       	ldd	r23, Y+3	; 0x03
    5660:	88 81       	ld	r24, Y
    5662:	99 81       	ldd	r25, Y+1	; 0x01
    5664:	0e 94 08 2b 	call	0x5610	; 0x5610 <tankIO_server_blinkByte>
    5668:	1b 82       	std	Y+3, r1	; 0x03
    566a:	1a 82       	std	Y+2, r1	; 0x02
    566c:	df 91       	pop	r29
    566e:	cf 91       	pop	r28
    5670:	08 95       	ret

00005672 <tankIO_server_blinkByte_register_function>:
    5672:	4f 92       	push	r4
    5674:	5f 92       	push	r5
    5676:	6f 92       	push	r6
    5678:	7f 92       	push	r7
    567a:	8f 92       	push	r8
    567c:	9f 92       	push	r9
    567e:	af 92       	push	r10
    5680:	bf 92       	push	r11
    5682:	cf 92       	push	r12
    5684:	df 92       	push	r13
    5686:	ef 92       	push	r14
    5688:	ff 92       	push	r15
    568a:	0f 93       	push	r16
    568c:	1f 93       	push	r17
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	10 92 1d 03 	sts	0x031D, r1
    5696:	10 92 1c 03 	sts	0x031C, r1
    569a:	e5 e1       	ldi	r30, 0x15	; 21
    569c:	f3 e0       	ldi	r31, 0x03	; 3
    569e:	f0 93 23 03 	sts	0x0323, r31
    56a2:	e0 93 22 03 	sts	0x0322, r30
    56a6:	82 e0       	ldi	r24, 0x02	; 2
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	90 93 25 03 	sts	0x0325, r25
    56ae:	80 93 24 03 	sts	0x0324, r24
    56b2:	a0 91 9c 03 	lds	r26, 0x039C
    56b6:	b0 91 9d 03 	lds	r27, 0x039D
    56ba:	8f 01       	movw	r16, r30
    56bc:	0d 5f       	subi	r16, 0xFD	; 253
    56be:	1f 4f       	sbci	r17, 0xFF	; 255
    56c0:	10 97       	sbiw	r26, 0x00	; 0
    56c2:	09 f0       	breq	.+2      	; 0x56c6 <tankIO_server_blinkByte_register_function+0x54>
    56c4:	49 c0       	rjmp	.+146    	; 0x5758 <tankIO_server_blinkByte_register_function+0xe6>
    56c6:	f0 93 9d 03 	sts	0x039D, r31
    56ca:	e0 93 9c 03 	sts	0x039C, r30
    56ce:	10 92 1b 03 	sts	0x031B, r1
    56d2:	10 92 1a 03 	sts	0x031A, r1
    56d6:	88 e1       	ldi	r24, 0x18	; 24
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    56de:	90 93 19 03 	sts	0x0319, r25
    56e2:	80 93 18 03 	sts	0x0318, r24
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	09 f4       	brne	.+2      	; 0x56ec <tankIO_server_blinkByte_register_function+0x7a>
    56ea:	d7 c0       	rjmp	.+430    	; 0x589a <tankIO_server_blinkByte_register_function+0x228>
    56ec:	e8 2f       	mov	r30, r24
    56ee:	f9 2f       	mov	r31, r25
    56f0:	88 e1       	ldi	r24, 0x18	; 24
    56f2:	df 01       	movw	r26, r30
    56f4:	1d 92       	st	X+, r1
    56f6:	8a 95       	dec	r24
    56f8:	e9 f7       	brne	.-6      	; 0x56f4 <tankIO_server_blinkByte_register_function+0x82>
    56fa:	c0 91 18 03 	lds	r28, 0x0318
    56fe:	d0 91 19 03 	lds	r29, 0x0319
    5702:	19 87       	std	Y+9, r17	; 0x09
    5704:	08 87       	std	Y+8, r16	; 0x08
    5706:	80 e2       	ldi	r24, 0x20	; 32
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	9b 83       	std	Y+3, r25	; 0x03
    570c:	8a 83       	std	Y+2, r24	; 0x02
    570e:	85 e0       	ldi	r24, 0x05	; 5
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	9d 83       	std	Y+5, r25	; 0x05
    5714:	8c 83       	std	Y+4, r24	; 0x04
    5716:	83 e0       	ldi	r24, 0x03	; 3
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	9b 87       	std	Y+11, r25	; 0x0b
    571c:	8a 87       	std	Y+10, r24	; 0x0a
    571e:	80 ec       	ldi	r24, 0xC0	; 192
    5720:	90 e0       	ldi	r25, 0x00	; 0
    5722:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    5726:	99 83       	std	Y+1, r25	; 0x01
    5728:	88 83       	st	Y, r24
    572a:	00 97       	sbiw	r24, 0x00	; 0
    572c:	09 f4       	brne	.+2      	; 0x5730 <tankIO_server_blinkByte_register_function+0xbe>
    572e:	b5 c0       	rjmp	.+362    	; 0x589a <tankIO_server_blinkByte_register_function+0x228>
    5730:	e8 2f       	mov	r30, r24
    5732:	f9 2f       	mov	r31, r25
    5734:	80 ec       	ldi	r24, 0xC0	; 192
    5736:	df 01       	movw	r26, r30
    5738:	1d 92       	st	X+, r1
    573a:	8a 95       	dec	r24
    573c:	e9 f7       	brne	.-6      	; 0x5738 <tankIO_server_blinkByte_register_function+0xc6>
    573e:	e0 91 18 03 	lds	r30, 0x0318
    5742:	f0 91 19 03 	lds	r31, 0x0319
    5746:	81 ee       	ldi	r24, 0xE1	; 225
    5748:	9f e1       	ldi	r25, 0x1F	; 31
    574a:	a1 e1       	ldi	r26, 0x11	; 17
    574c:	b0 ea       	ldi	r27, 0xA0	; 160
    574e:	84 8b       	std	Z+20, r24	; 0x14
    5750:	95 8b       	std	Z+21, r25	; 0x15
    5752:	a6 8b       	std	Z+22, r26	; 0x16
    5754:	b7 8b       	std	Z+23, r27	; 0x17
    5756:	16 c0       	rjmp	.+44     	; 0x5784 <tankIO_server_blinkByte_register_function+0x112>
    5758:	13 96       	adiw	r26, 0x03	; 3
    575a:	0d 90       	ld	r0, X+
    575c:	bc 91       	ld	r27, X
    575e:	a0 2d       	mov	r26, r0
    5760:	18 96       	adiw	r26, 0x08	; 8
    5762:	cd 91       	ld	r28, X+
    5764:	dc 91       	ld	r29, X
    5766:	19 97       	sbiw	r26, 0x09	; 9
    5768:	fd 83       	std	Y+5, r31	; 0x05
    576a:	ec 83       	std	Y+4, r30	; 0x04
    576c:	1a 96       	adiw	r26, 0x0a	; 10
    576e:	8d 91       	ld	r24, X+
    5770:	9c 91       	ld	r25, X
    5772:	1b 97       	sbiw	r26, 0x0b	; 11
    5774:	c8 1b       	sub	r28, r24
    5776:	d9 0b       	sbc	r29, r25
    5778:	d6 83       	std	Z+6, r29	; 0x06
    577a:	c5 83       	std	Z+5, r28	; 0x05
    577c:	19 96       	adiw	r26, 0x09	; 9
    577e:	1c 93       	st	X, r17
    5780:	0e 93       	st	-X, r16
    5782:	18 97       	sbiw	r26, 0x08	; 8
    5784:	e0 91 9c 03 	lds	r30, 0x039C
    5788:	f0 91 9d 03 	lds	r31, 0x039D
    578c:	c3 81       	ldd	r28, Z+3	; 0x03
    578e:	d4 81       	ldd	r29, Z+4	; 0x04
    5790:	8e 81       	ldd	r24, Y+6	; 0x06
    5792:	9f 81       	ldd	r25, Y+7	; 0x07
    5794:	01 96       	adiw	r24, 0x01	; 1
    5796:	9f 83       	std	Y+7, r25	; 0x07
    5798:	8e 83       	std	Y+6, r24	; 0x06
    579a:	48 e1       	ldi	r20, 0x18	; 24
    579c:	53 e0       	ldi	r21, 0x03	; 3
    579e:	d0 93 19 03 	sts	0x0319, r29
    57a2:	c0 93 18 03 	sts	0x0318, r28
    57a6:	da 01       	movw	r26, r20
    57a8:	13 97       	sbiw	r26, 0x03	; 3
    57aa:	20 91 15 03 	lds	r18, 0x0315
    57ae:	33 27       	eor	r19, r19
    57b0:	27 fd       	sbrc	r18, 7
    57b2:	30 95       	com	r19
    57b4:	c9 01       	movw	r24, r18
    57b6:	96 95       	lsr	r25
    57b8:	87 95       	ror	r24
    57ba:	96 95       	lsr	r25
    57bc:	87 95       	ror	r24
    57be:	b9 01       	movw	r22, r18
    57c0:	15 e0       	ldi	r17, 0x05	; 5
    57c2:	66 0f       	add	r22, r22
    57c4:	77 1f       	adc	r23, r23
    57c6:	1a 95       	dec	r17
    57c8:	e1 f7       	brne	.-8      	; 0x57c2 <tankIO_server_blinkByte_register_function+0x150>
    57ca:	86 0f       	add	r24, r22
    57cc:	97 1f       	adc	r25, r23
    57ce:	60 91 16 03 	lds	r22, 0x0316
    57d2:	77 27       	eor	r23, r23
    57d4:	67 fd       	sbrc	r22, 7
    57d6:	70 95       	com	r23
    57d8:	86 0f       	add	r24, r22
    57da:	97 1f       	adc	r25, r23
    57dc:	82 27       	eor	r24, r18
    57de:	93 27       	eor	r25, r19
    57e0:	52 96       	adiw	r26, 0x12	; 18
    57e2:	9c 93       	st	X, r25
    57e4:	8e 93       	st	-X, r24
    57e6:	51 97       	sbiw	r26, 0x11	; 17
    57e8:	03 80       	ldd	r0, Z+3	; 0x03
    57ea:	f4 81       	ldd	r31, Z+4	; 0x04
    57ec:	e0 2d       	mov	r30, r0
    57ee:	22 81       	ldd	r18, Z+2	; 0x02
    57f0:	33 81       	ldd	r19, Z+3	; 0x03
    57f2:	21 50       	subi	r18, 0x01	; 1
    57f4:	30 40       	sbci	r19, 0x00	; 0
    57f6:	28 23       	and	r18, r24
    57f8:	39 23       	and	r19, r25
    57fa:	c9 01       	movw	r24, r18
    57fc:	88 0f       	add	r24, r24
    57fe:	99 1f       	adc	r25, r25
    5800:	82 0f       	add	r24, r18
    5802:	93 1f       	adc	r25, r19
    5804:	88 0f       	add	r24, r24
    5806:	99 1f       	adc	r25, r25
    5808:	01 90       	ld	r0, Z+
    580a:	f0 81       	ld	r31, Z
    580c:	e0 2d       	mov	r30, r0
    580e:	e8 0f       	add	r30, r24
    5810:	f9 1f       	adc	r31, r25
    5812:	82 81       	ldd	r24, Z+2	; 0x02
    5814:	93 81       	ldd	r25, Z+3	; 0x03
    5816:	01 96       	adiw	r24, 0x01	; 1
    5818:	93 83       	std	Z+3, r25	; 0x03
    581a:	82 83       	std	Z+2, r24	; 0x02
    581c:	20 81       	ld	r18, Z
    581e:	31 81       	ldd	r19, Z+1	; 0x01
    5820:	1c 96       	adiw	r26, 0x0c	; 12
    5822:	3c 93       	st	X, r19
    5824:	2e 93       	st	-X, r18
    5826:	1b 97       	sbiw	r26, 0x0b	; 11
    5828:	1a 96       	adiw	r26, 0x0a	; 10
    582a:	1c 92       	st	X, r1
    582c:	1e 92       	st	-X, r1
    582e:	19 97       	sbiw	r26, 0x09	; 9
    5830:	21 15       	cp	r18, r1
    5832:	31 05       	cpc	r19, r1
    5834:	29 f0       	breq	.+10     	; 0x5840 <tankIO_server_blinkByte_register_function+0x1ce>
    5836:	d9 01       	movw	r26, r18
    5838:	17 96       	adiw	r26, 0x07	; 7
    583a:	5c 93       	st	X, r21
    583c:	4e 93       	st	-X, r20
    583e:	16 97       	sbiw	r26, 0x06	; 6
    5840:	28 e1       	ldi	r18, 0x18	; 24
    5842:	33 e0       	ldi	r19, 0x03	; 3
    5844:	31 83       	std	Z+1, r19	; 0x01
    5846:	20 83       	st	Z, r18
    5848:	24 81       	ldd	r18, Z+4	; 0x04
    584a:	35 81       	ldd	r19, Z+5	; 0x05
    584c:	2f 5f       	subi	r18, 0xFF	; 255
    584e:	3f 4f       	sbci	r19, 0xFF	; 255
    5850:	a9 01       	movw	r20, r18
    5852:	44 0f       	add	r20, r20
    5854:	55 1f       	adc	r21, r21
    5856:	b3 e0       	ldi	r27, 0x03	; 3
    5858:	22 0f       	add	r18, r18
    585a:	33 1f       	adc	r19, r19
    585c:	ba 95       	dec	r27
    585e:	e1 f7       	brne	.-8      	; 0x5858 <tankIO_server_blinkByte_register_function+0x1e6>
    5860:	42 0f       	add	r20, r18
    5862:	53 1f       	adc	r21, r19
    5864:	84 17       	cp	r24, r20
    5866:	95 07       	cpc	r25, r21
    5868:	08 f4       	brcc	.+2      	; 0x586c <tankIO_server_blinkByte_register_function+0x1fa>
    586a:	c8 c0       	rjmp	.+400    	; 0x59fc <tankIO_server_blinkByte_register_function+0x38a>
    586c:	8a 89       	ldd	r24, Y+18	; 0x12
    586e:	9b 89       	ldd	r25, Y+19	; 0x13
    5870:	81 30       	cpi	r24, 0x01	; 1
    5872:	91 05       	cpc	r25, r1
    5874:	09 f4       	brne	.+2      	; 0x5878 <tankIO_server_blinkByte_register_function+0x206>
    5876:	c2 c0       	rjmp	.+388    	; 0x59fc <tankIO_server_blinkByte_register_function+0x38a>
    5878:	8a 81       	ldd	r24, Y+2	; 0x02
    587a:	9b 81       	ldd	r25, Y+3	; 0x03
    587c:	8c 01       	movw	r16, r24
    587e:	00 0f       	add	r16, r16
    5880:	11 1f       	adc	r17, r17
    5882:	08 0f       	add	r16, r24
    5884:	19 1f       	adc	r17, r25
    5886:	00 0f       	add	r16, r16
    5888:	11 1f       	adc	r17, r17
    588a:	00 0f       	add	r16, r16
    588c:	11 1f       	adc	r17, r17
    588e:	c8 01       	movw	r24, r16
    5890:	0e 94 27 32 	call	0x644e	; 0x644e <malloc>
    5894:	4c 01       	movw	r8, r24
    5896:	00 97       	sbiw	r24, 0x00	; 0
    5898:	21 f4       	brne	.+8      	; 0x58a2 <tankIO_server_blinkByte_register_function+0x230>
    589a:	8f ef       	ldi	r24, 0xFF	; 255
    589c:	9f ef       	ldi	r25, 0xFF	; 255
    589e:	0e 94 77 33 	call	0x66ee	; 0x66ee <MainProcessEnd>
    58a2:	60 e0       	ldi	r22, 0x00	; 0
    58a4:	70 e0       	ldi	r23, 0x00	; 0
    58a6:	a8 01       	movw	r20, r16
    58a8:	0e 94 70 33 	call	0x66e0	; 0x66e0 <memset>
    58ac:	0e 81       	ldd	r16, Y+6	; 0x06
    58ae:	1f 81       	ldd	r17, Y+7	; 0x07
    58b0:	6a 80       	ldd	r6, Y+2	; 0x02
    58b2:	7b 80       	ldd	r7, Y+3	; 0x03
    58b4:	73 01       	movw	r14, r6
    58b6:	ee 0c       	add	r14, r14
    58b8:	ff 1c       	adc	r15, r15
    58ba:	08 94       	sec
    58bc:	e1 08       	sbc	r14, r1
    58be:	f1 08       	sbc	r15, r1
    58c0:	c7 01       	movw	r24, r14
    58c2:	80 23       	and	r24, r16
    58c4:	91 23       	and	r25, r17
    58c6:	21 e0       	ldi	r18, 0x01	; 1
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	00 97       	sbiw	r24, 0x00	; 0
    58cc:	11 f4       	brne	.+4      	; 0x58d2 <tankIO_server_blinkByte_register_function+0x260>
    58ce:	20 e0       	ldi	r18, 0x00	; 0
    58d0:	30 e0       	ldi	r19, 0x00	; 0
    58d2:	8c 81       	ldd	r24, Y+4	; 0x04
    58d4:	9d 81       	ldd	r25, Y+5	; 0x05
    58d6:	01 96       	adiw	r24, 0x01	; 1
    58d8:	02 c0       	rjmp	.+4      	; 0x58de <tankIO_server_blinkByte_register_function+0x26c>
    58da:	16 95       	lsr	r17
    58dc:	07 95       	ror	r16
    58de:	8a 95       	dec	r24
    58e0:	e2 f7       	brpl	.-8      	; 0x58da <tankIO_server_blinkByte_register_function+0x268>
    58e2:	02 0f       	add	r16, r18
    58e4:	13 1f       	adc	r17, r19
    58e6:	1d 87       	std	Y+13, r17	; 0x0d
    58e8:	0c 87       	std	Y+12, r16	; 0x0c
    58ea:	1f 86       	std	Y+15, r1	; 0x0f
    58ec:	1e 86       	std	Y+14, r1	; 0x0e
    58ee:	cc 24       	eor	r12, r12
    58f0:	dd 24       	eor	r13, r13
    58f2:	aa 24       	eor	r10, r10
    58f4:	bb 24       	eor	r11, r11
    58f6:	51 c0       	rjmp	.+162    	; 0x599a <tankIO_server_blinkByte_register_function+0x328>
    58f8:	8c 0d       	add	r24, r12
    58fa:	9d 1d       	adc	r25, r13
    58fc:	fc 01       	movw	r30, r24
    58fe:	20 81       	ld	r18, Z
    5900:	31 81       	ldd	r19, Z+1	; 0x01
    5902:	40 c0       	rjmp	.+128    	; 0x5984 <tankIO_server_blinkByte_register_function+0x312>
    5904:	d9 01       	movw	r26, r18
    5906:	18 96       	adiw	r26, 0x08	; 8
    5908:	5c 90       	ld	r5, X
    590a:	18 97       	sbiw	r26, 0x08	; 8
    590c:	19 96       	adiw	r26, 0x09	; 9
    590e:	4c 90       	ld	r4, X
    5910:	19 97       	sbiw	r26, 0x09	; 9
    5912:	1e 96       	adiw	r26, 0x0e	; 14
    5914:	8d 91       	ld	r24, X+
    5916:	9c 91       	ld	r25, X
    5918:	1f 97       	sbiw	r26, 0x0f	; 15
    591a:	8e 21       	and	r24, r14
    591c:	9f 21       	and	r25, r15
    591e:	fc 01       	movw	r30, r24
    5920:	ee 0f       	add	r30, r30
    5922:	ff 1f       	adc	r31, r31
    5924:	e8 0f       	add	r30, r24
    5926:	f9 1f       	adc	r31, r25
    5928:	ee 0f       	add	r30, r30
    592a:	ff 1f       	adc	r31, r31
    592c:	e8 0d       	add	r30, r8
    592e:	f9 1d       	adc	r31, r9
    5930:	82 81       	ldd	r24, Z+2	; 0x02
    5932:	93 81       	ldd	r25, Z+3	; 0x03
    5934:	01 96       	adiw	r24, 0x01	; 1
    5936:	93 83       	std	Z+3, r25	; 0x03
    5938:	82 83       	std	Z+2, r24	; 0x02
    593a:	08 17       	cp	r16, r24
    593c:	19 07       	cpc	r17, r25
    593e:	58 f4       	brcc	.+22     	; 0x5956 <tankIO_server_blinkByte_register_function+0x2e4>
    5940:	4e 85       	ldd	r20, Y+14	; 0x0e
    5942:	5f 85       	ldd	r21, Y+15	; 0x0f
    5944:	4f 5f       	subi	r20, 0xFF	; 255
    5946:	5f 4f       	sbci	r21, 0xFF	; 255
    5948:	5f 87       	std	Y+15, r21	; 0x0f
    594a:	4e 87       	std	Y+14, r20	; 0x0e
    594c:	b8 01       	movw	r22, r16
    594e:	0e 94 00 32 	call	0x6400	; 0x6400 <__udivmodhi4>
    5952:	75 83       	std	Z+5, r23	; 0x05
    5954:	64 83       	std	Z+4, r22	; 0x04
    5956:	d9 01       	movw	r26, r18
    5958:	17 96       	adiw	r26, 0x07	; 7
    595a:	1c 92       	st	X, r1
    595c:	1e 92       	st	-X, r1
    595e:	16 97       	sbiw	r26, 0x06	; 6
    5960:	80 81       	ld	r24, Z
    5962:	91 81       	ldd	r25, Z+1	; 0x01
    5964:	19 96       	adiw	r26, 0x09	; 9
    5966:	9c 93       	st	X, r25
    5968:	8e 93       	st	-X, r24
    596a:	18 97       	sbiw	r26, 0x08	; 8
    596c:	00 97       	sbiw	r24, 0x00	; 0
    596e:	29 f0       	breq	.+10     	; 0x597a <tankIO_server_blinkByte_register_function+0x308>
    5970:	dc 01       	movw	r26, r24
    5972:	17 96       	adiw	r26, 0x07	; 7
    5974:	3c 93       	st	X, r19
    5976:	2e 93       	st	-X, r18
    5978:	16 97       	sbiw	r26, 0x06	; 6
    597a:	31 83       	std	Z+1, r19	; 0x01
    597c:	20 83       	st	Z, r18
    597e:	c2 01       	movw	r24, r4
    5980:	29 2f       	mov	r18, r25
    5982:	34 2d       	mov	r19, r4
    5984:	21 15       	cp	r18, r1
    5986:	31 05       	cpc	r19, r1
    5988:	09 f0       	breq	.+2      	; 0x598c <tankIO_server_blinkByte_register_function+0x31a>
    598a:	bc cf       	rjmp	.-136    	; 0x5904 <tankIO_server_blinkByte_register_function+0x292>
    598c:	08 94       	sec
    598e:	a1 1c       	adc	r10, r1
    5990:	b1 1c       	adc	r11, r1
    5992:	e6 e0       	ldi	r30, 0x06	; 6
    5994:	f0 e0       	ldi	r31, 0x00	; 0
    5996:	ce 0e       	add	r12, r30
    5998:	df 1e       	adc	r13, r31
    599a:	88 81       	ld	r24, Y
    599c:	99 81       	ldd	r25, Y+1	; 0x01
    599e:	a6 14       	cp	r10, r6
    59a0:	b7 04       	cpc	r11, r7
    59a2:	08 f4       	brcc	.+2      	; 0x59a6 <tankIO_server_blinkByte_register_function+0x334>
    59a4:	a9 cf       	rjmp	.-174    	; 0x58f8 <tankIO_server_blinkByte_register_function+0x286>
    59a6:	0e 94 c1 32 	call	0x6582	; 0x6582 <free>
    59aa:	e0 91 18 03 	lds	r30, 0x0318
    59ae:	f0 91 19 03 	lds	r31, 0x0319
    59b2:	82 81       	ldd	r24, Z+2	; 0x02
    59b4:	93 81       	ldd	r25, Z+3	; 0x03
    59b6:	88 0f       	add	r24, r24
    59b8:	99 1f       	adc	r25, r25
    59ba:	93 83       	std	Z+3, r25	; 0x03
    59bc:	82 83       	std	Z+2, r24	; 0x02
    59be:	84 81       	ldd	r24, Z+4	; 0x04
    59c0:	95 81       	ldd	r25, Z+5	; 0x05
    59c2:	01 96       	adiw	r24, 0x01	; 1
    59c4:	95 83       	std	Z+5, r25	; 0x05
    59c6:	84 83       	std	Z+4, r24	; 0x04
    59c8:	91 82       	std	Z+1, r9	; 0x01
    59ca:	80 82       	st	Z, r8
    59cc:	86 81       	ldd	r24, Z+6	; 0x06
    59ce:	97 81       	ldd	r25, Z+7	; 0x07
    59d0:	96 95       	lsr	r25
    59d2:	87 95       	ror	r24
    59d4:	26 85       	ldd	r18, Z+14	; 0x0e
    59d6:	37 85       	ldd	r19, Z+15	; 0x0f
    59d8:	82 17       	cp	r24, r18
    59da:	93 07       	cpc	r25, r19
    59dc:	20 f4       	brcc	.+8      	; 0x59e6 <tankIO_server_blinkByte_register_function+0x374>
    59de:	80 89       	ldd	r24, Z+16	; 0x10
    59e0:	91 89       	ldd	r25, Z+17	; 0x11
    59e2:	01 96       	adiw	r24, 0x01	; 1
    59e4:	02 c0       	rjmp	.+4      	; 0x59ea <tankIO_server_blinkByte_register_function+0x378>
    59e6:	80 e0       	ldi	r24, 0x00	; 0
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	91 8b       	std	Z+17, r25	; 0x11
    59ec:	80 8b       	std	Z+16, r24	; 0x10
    59ee:	82 30       	cpi	r24, 0x02	; 2
    59f0:	91 05       	cpc	r25, r1
    59f2:	20 f0       	brcs	.+8      	; 0x59fc <tankIO_server_blinkByte_register_function+0x38a>
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	93 8b       	std	Z+19, r25	; 0x13
    59fa:	82 8b       	std	Z+18, r24	; 0x12
    59fc:	df 91       	pop	r29
    59fe:	cf 91       	pop	r28
    5a00:	1f 91       	pop	r17
    5a02:	0f 91       	pop	r16
    5a04:	ff 90       	pop	r15
    5a06:	ef 90       	pop	r14
    5a08:	df 90       	pop	r13
    5a0a:	cf 90       	pop	r12
    5a0c:	bf 90       	pop	r11
    5a0e:	af 90       	pop	r10
    5a10:	9f 90       	pop	r9
    5a12:	8f 90       	pop	r8
    5a14:	7f 90       	pop	r7
    5a16:	6f 90       	pop	r6
    5a18:	5f 90       	pop	r5
    5a1a:	4f 90       	pop	r4
    5a1c:	08 95       	ret

00005a1e <before_timer>:
#define _BASE_AFTER_KERNEL_

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
    5a1e:	08 95       	ret

00005a20 <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
    5a20:	80 b7       	in	r24, 0x30	; 48
    5a22:	80 68       	ori	r24, 0x80	; 128
    5a24:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
    5a26:	e4 e6       	ldi	r30, 0x64	; 100
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	80 81       	ld	r24, Z
    5a2c:	80 66       	ori	r24, 0x60	; 96
    5a2e:	80 83       	st	Z, r24
	// BOD - TODO configure?
	
	// Final initialization-sequence.
	// AFTER other modules modified __default_stack_size and __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
    5a30:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <before_timer>
	#ifdef TIMER_INTERRUPT_A
	enableTimerInterrupt(CLOCKTIMER_A);
    5a34:	81 ed       	ldi	r24, 0xD1	; 209
    5a36:	95 e0       	ldi	r25, 0x05	; 5
    5a38:	0e 94 57 31 	call	0x62ae	; 0x62ae <enableTimerInterrupt>
	#endif
	#ifdef TIMER_INTERRUPT_B
	enableTimerInterrupt(CLOCKTIMER_B);
	#endif
	sei();
    5a3c:	78 94       	sei
}
    5a3e:	08 95       	ret

00005a40 <run_leds>:
#include "LedOperations.h"

// #define USE_ISR
#define TICK_AFTER_MS 300

void run_leds() {
    5a40:	0f 93       	push	r16
    5a42:	1f 93       	push	r17
    5a44:	cf 93       	push	r28
    5a46:	df 93       	push	r29
	int i = 0;
    5a48:	c0 e0       	ldi	r28, 0x00	; 0
    5a4a:	d0 e0       	ldi	r29, 0x00	; 0
	while (1) {
		flashLed(AllLeds->leds[i], 200);
    5a4c:	00 91 34 01 	lds	r16, 0x0134
    5a50:	10 91 35 01 	lds	r17, 0x0135
    5a54:	ce 01       	movw	r24, r28
    5a56:	88 0f       	add	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	d8 01       	movw	r26, r16
    5a5c:	ed 91       	ld	r30, X+
    5a5e:	fc 91       	ld	r31, X
    5a60:	e8 0f       	add	r30, r24
    5a62:	f9 1f       	adc	r31, r25
    5a64:	80 81       	ld	r24, Z
    5a66:	91 81       	ldd	r25, Z+1	; 0x01
    5a68:	68 ec       	ldi	r22, 0xC8	; 200
    5a6a:	70 e0       	ldi	r23, 0x00	; 0
    5a6c:	0e 94 00 2f 	call	0x5e00	; 0x5e00 <flashLed>
		i++;
    5a70:	ce 01       	movw	r24, r28
    5a72:	01 96       	adiw	r24, 0x01	; 1
		i %= AllLeds->count;
    5a74:	f8 01       	movw	r30, r16
    5a76:	62 81       	ldd	r22, Z+2	; 0x02
    5a78:	70 e0       	ldi	r23, 0x00	; 0
    5a7a:	0e 94 14 32 	call	0x6428	; 0x6428 <__divmodhi4>
    5a7e:	ec 01       	movw	r28, r24
    5a80:	e9 cf       	rjmp	.-46     	; 0x5a54 <run_leds+0x14>

00005a82 <leds_special>:
	}
}

void leds_special() {
	led_operation_1();
    5a82:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <led_operation_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5a86:	8f e7       	ldi	r24, 0x7F	; 127
    5a88:	9f e4       	ldi	r25, 0x4F	; 79
    5a8a:	a2 e1       	ldi	r26, 0x12	; 18
    5a8c:	81 50       	subi	r24, 0x01	; 1
    5a8e:	90 40       	sbci	r25, 0x00	; 0
    5a90:	a0 40       	sbci	r26, 0x00	; 0
    5a92:	e1 f7       	brne	.-8      	; 0x5a8c <leds_special+0xa>
    5a94:	00 c0       	rjmp	.+0      	; 0x5a96 <leds_special+0x14>
    5a96:	00 00       	nop
	#ifndef USE_ISR
		while (1) {
			_delay_ms(TICK_AFTER_MS);
			led_operation_tick();
    5a98:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <led_operation_tick>
    5a9c:	f4 cf       	rjmp	.-24     	; 0x5a86 <leds_special+0x4>

00005a9e <test_buttons>:
		}
	#endif
}

void test_buttons() {
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
	while (1) {
		setLeds(AllLeds, AS_WORD(buttonStatusMask()));
    5aa2:	c0 91 34 01 	lds	r28, 0x0134
    5aa6:	d0 91 35 01 	lds	r29, 0x0135
    5aaa:	0e 94 92 04 	call	0x924	; 0x924 <buttonStatusMask>
    5aae:	78 2f       	mov	r23, r24
    5ab0:	ce 01       	movw	r24, r28
    5ab2:	60 e0       	ldi	r22, 0x00	; 0
    5ab4:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
    5ab8:	f8 cf       	rjmp	.-16     	; 0x5aaa <test_buttons+0xc>

00005aba <all_leds>:
	}
}

void all_leds() {
	enableLeds(AllLeds);
    5aba:	80 91 34 01 	lds	r24, 0x0134
    5abe:	90 91 35 01 	lds	r25, 0x0135
    5ac2:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <enableLeds>
}
    5ac6:	08 95       	ret

00005ac8 <test_communication_raw>:
}
#endif

void test_communication_raw() {
	
	DDRD = 0xff;
    5ac8:	8f ef       	ldi	r24, 0xFF	; 255
    5aca:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;
    5acc:	84 b9       	out	0x04, r24	; 4
	DDRA = 0;
    5ace:	11 b8       	out	0x01, r1	; 1
	DDRC = 0;
    5ad0:	17 b8       	out	0x07, r1	; 7
	while (1) {
		uint8_t c = PINC;
		uint8_t c0 = (c & (1 << PINC0)) != 0;
		uint8_t c1 = (c & (1 << PINC1)) != 0;
		if (c0) {
			PORTB = 0xff;
    5ad2:	2f ef       	ldi	r18, 0xFF	; 255
	DDRB = 0xff;
	DDRA = 0;
	DDRC = 0;
	
	while (1) {
		uint8_t c = PINC;
    5ad4:	36 b1       	in	r19, 0x06	; 6
		uint8_t c0 = (c & (1 << PINC0)) != 0;
		uint8_t c1 = (c & (1 << PINC1)) != 0;
    5ad6:	83 2f       	mov	r24, r19
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	82 70       	andi	r24, 0x02	; 2
    5adc:	90 70       	andi	r25, 0x00	; 0
		if (c0) {
    5ade:	30 ff       	sbrs	r19, 0
    5ae0:	02 c0       	rjmp	.+4      	; 0x5ae6 <test_communication_raw+0x1e>
			PORTB = 0xff;
    5ae2:	25 b9       	out	0x05, r18	; 5
    5ae4:	01 c0       	rjmp	.+2      	; 0x5ae8 <test_communication_raw+0x20>
		} else {
			PORTB = 0;
    5ae6:	15 b8       	out	0x05, r1	; 5
		}			
		if (c1) {
    5ae8:	00 97       	sbiw	r24, 0x00	; 0
    5aea:	11 f0       	breq	.+4      	; 0x5af0 <test_communication_raw+0x28>
			PORTD = 0xff;
    5aec:	2b b9       	out	0x0b, r18	; 11
    5aee:	f2 cf       	rjmp	.-28     	; 0x5ad4 <test_communication_raw+0xc>
		} else {
			PORTD = 0;
    5af0:	1b b8       	out	0x0b, r1	; 11
    5af2:	f0 cf       	rjmp	.-32     	; 0x5ad4 <test_communication_raw+0xc>

00005af4 <main>:
int main() {
	//run_leds();
	// leds_special(); // Maybe run this also with USE_ISR.
	//test_buttons();
	
	test_communication_raw();
    5af4:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <test_communication_raw>
}
    5af8:	80 e0       	ldi	r24, 0x00	; 0
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	08 95       	ret

00005afe <led_operation_tick>:
uint16_t leds_left;
uint16_t leds_middle;
uint16_t leds_right;

void led_operation_tick() {
	if (running) {
    5afe:	80 91 00 01 	lds	r24, 0x0100
    5b02:	90 91 01 01 	lds	r25, 0x0101
    5b06:	00 97       	sbiw	r24, 0x00	; 0
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <led_operation_tick+0xe>
    5b0a:	50 c0       	rjmp	.+160    	; 0x5bac <led_operation_tick+0xae>
		ROL(leds_left);
    5b0c:	20 91 a3 03 	lds	r18, 0x03A3
    5b10:	30 91 a4 03 	lds	r19, 0x03A4
    5b14:	c9 01       	movw	r24, r18
    5b16:	88 0f       	add	r24, r24
    5b18:	89 2f       	mov	r24, r25
    5b1a:	88 1f       	adc	r24, r24
    5b1c:	99 0b       	sbc	r25, r25
    5b1e:	91 95       	neg	r25
    5b20:	22 0f       	add	r18, r18
    5b22:	33 1f       	adc	r19, r19
    5b24:	82 2b       	or	r24, r18
    5b26:	93 2b       	or	r25, r19
    5b28:	90 93 a4 03 	sts	0x03A4, r25
    5b2c:	80 93 a3 03 	sts	0x03A3, r24
		ROL(leds_middle);
    5b30:	20 91 a1 03 	lds	r18, 0x03A1
    5b34:	30 91 a2 03 	lds	r19, 0x03A2
    5b38:	c9 01       	movw	r24, r18
    5b3a:	88 0f       	add	r24, r24
    5b3c:	89 2f       	mov	r24, r25
    5b3e:	88 1f       	adc	r24, r24
    5b40:	99 0b       	sbc	r25, r25
    5b42:	91 95       	neg	r25
    5b44:	22 0f       	add	r18, r18
    5b46:	33 1f       	adc	r19, r19
    5b48:	82 2b       	or	r24, r18
    5b4a:	93 2b       	or	r25, r19
    5b4c:	90 93 a2 03 	sts	0x03A2, r25
    5b50:	80 93 a1 03 	sts	0x03A1, r24
		ROL(leds_right);
    5b54:	80 91 9f 03 	lds	r24, 0x039F
    5b58:	90 91 a0 03 	lds	r25, 0x03A0
    5b5c:	9c 01       	movw	r18, r24
    5b5e:	22 0f       	add	r18, r18
    5b60:	23 2f       	mov	r18, r19
    5b62:	22 1f       	adc	r18, r18
    5b64:	33 0b       	sbc	r19, r19
    5b66:	31 95       	neg	r19
    5b68:	88 0f       	add	r24, r24
    5b6a:	99 1f       	adc	r25, r25
    5b6c:	28 2b       	or	r18, r24
    5b6e:	39 2b       	or	r19, r25
    5b70:	30 93 a0 03 	sts	0x03A0, r19
    5b74:	20 93 9f 03 	sts	0x039F, r18
		setLeds(RightLeds, MAKE_WORD(leds_right, 0));
    5b78:	80 91 2a 01 	lds	r24, 0x012A
    5b7c:	90 91 2b 01 	lds	r25, 0x012B
    5b80:	60 e0       	ldi	r22, 0x00	; 0
    5b82:	72 2f       	mov	r23, r18
    5b84:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
		setLeds(MiddleLeds, MAKE_WORD(leds_middle, 0));
    5b88:	70 91 a1 03 	lds	r23, 0x03A1
    5b8c:	80 91 32 01 	lds	r24, 0x0132
    5b90:	90 91 33 01 	lds	r25, 0x0133
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
		setLeds(LeftLeds, MAKE_WORD(leds_left, 0));
    5b9a:	70 91 a3 03 	lds	r23, 0x03A3
    5b9e:	80 91 2e 01 	lds	r24, 0x012E
    5ba2:	90 91 2f 01 	lds	r25, 0x012F
    5ba6:	60 e0       	ldi	r22, 0x00	; 0
    5ba8:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
    5bac:	08 95       	ret

00005bae <led_operation_off>:
	}
}

void led_operation_off() {
	running = FALSE;
    5bae:	10 92 01 01 	sts	0x0101, r1
    5bb2:	10 92 00 01 	sts	0x0100, r1
}
    5bb6:	08 95       	ret

00005bb8 <led_operation_1>:

void led_operation_1() {
	leds_right = 3;
    5bb8:	83 e0       	ldi	r24, 0x03	; 3
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	90 93 a0 03 	sts	0x03A0, r25
    5bc0:	80 93 9f 03 	sts	0x039F, r24
	leds_middle = 3 << 1;
    5bc4:	26 e0       	ldi	r18, 0x06	; 6
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	30 93 a2 03 	sts	0x03A2, r19
    5bcc:	20 93 a1 03 	sts	0x03A1, r18
	leds_left = 3;
    5bd0:	90 93 a4 03 	sts	0x03A4, r25
    5bd4:	80 93 a3 03 	sts	0x03A3, r24
	running = TRUE;
    5bd8:	81 e0       	ldi	r24, 0x01	; 1
    5bda:	90 e0       	ldi	r25, 0x00	; 0
    5bdc:	90 93 01 01 	sts	0x0101, r25
    5be0:	80 93 00 01 	sts	0x0100, r24
}
    5be4:	08 95       	ret

00005be6 <DELAY_MS>:
	}
}

static inline void BLINK_DELAY() { _delay_ms(200); }
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
    5be6:	07 c0       	rjmp	.+14     	; 0x5bf6 <DELAY_MS+0x10>
    5be8:	e7 e8       	ldi	r30, 0x87	; 135
    5bea:	f3 e1       	ldi	r31, 0x13	; 19
    5bec:	31 97       	sbiw	r30, 0x01	; 1
    5bee:	f1 f7       	brne	.-4      	; 0x5bec <DELAY_MS+0x6>
    5bf0:	00 c0       	rjmp	.+0      	; 0x5bf2 <DELAY_MS+0xc>
    5bf2:	00 00       	nop
    5bf4:	01 97       	sbiw	r24, 0x01	; 1
    5bf6:	00 97       	sbiw	r24, 0x00	; 0
    5bf8:	b9 f7       	brne	.-18     	; 0x5be8 <DELAY_MS+0x2>
}
    5bfa:	08 95       	ret

00005bfc <BLINK_DELAY>:
    5bfc:	8f ef       	ldi	r24, 0xFF	; 255
    5bfe:	94 e3       	ldi	r25, 0x34	; 52
    5c00:	ac e0       	ldi	r26, 0x0C	; 12
    5c02:	81 50       	subi	r24, 0x01	; 1
    5c04:	90 40       	sbci	r25, 0x00	; 0
    5c06:	a0 40       	sbci	r26, 0x00	; 0
    5c08:	e1 f7       	brne	.-8      	; 0x5c02 <BLINK_DELAY+0x6>
    5c0a:	00 c0       	rjmp	.+0      	; 0x5c0c <BLINK_DELAY+0x10>
    5c0c:	00 00       	nop
	for (int i = 0, max = leds->count; i < max; i++) {
		disableLed(leds->leds[i]);
	}
}

static inline void BLINK_DELAY() { _delay_ms(200); }
    5c0e:	08 95       	ret

00005c10 <enableLed>:
#include "led.h"
#include "port.h"
#include <util/delay.h>

void enableLed(PLed led) {
	writePin(led->pin, TRUE);
    5c10:	fc 01       	movw	r30, r24
    5c12:	80 81       	ld	r24, Z
    5c14:	91 81       	ldd	r25, Z+1	; 0x01
    5c16:	61 e0       	ldi	r22, 0x01	; 1
    5c18:	70 e0       	ldi	r23, 0x00	; 0
    5c1a:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <writePin>
}
    5c1e:	08 95       	ret

00005c20 <disableLed>:

void disableLed(PLed led) {
	writePin(led->pin, FALSE);
    5c20:	fc 01       	movw	r30, r24
    5c22:	80 81       	ld	r24, Z
    5c24:	91 81       	ldd	r25, Z+1	; 0x01
    5c26:	60 e0       	ldi	r22, 0x00	; 0
    5c28:	70 e0       	ldi	r23, 0x00	; 0
    5c2a:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <writePin>
}
    5c2e:	08 95       	ret

00005c30 <setLed>:

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    5c30:	fc 01       	movw	r30, r24
    5c32:	80 81       	ld	r24, Z
    5c34:	91 81       	ldd	r25, Z+1	; 0x01
    5c36:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <writePin>
}
    5c3a:	08 95       	ret

00005c3c <setLeds>:

void setLeds(PLedGroup leds, uint16_t mask) {
    5c3c:	af 92       	push	r10
    5c3e:	bf 92       	push	r11
    5c40:	cf 92       	push	r12
    5c42:	df 92       	push	r13
    5c44:	ef 92       	push	r14
    5c46:	ff 92       	push	r15
    5c48:	0f 93       	push	r16
    5c4a:	1f 93       	push	r17
    5c4c:	cf 93       	push	r28
    5c4e:	df 93       	push	r29
    5c50:	6c 01       	movw	r12, r24
    5c52:	5b 01       	movw	r10, r22
	uint16_t iMask = 1 << (16 - leds->count);
    5c54:	dc 01       	movw	r26, r24
    5c56:	12 96       	adiw	r26, 0x02	; 2
    5c58:	0c 91       	ld	r16, X
    5c5a:	12 97       	sbiw	r26, 0x02	; 2
    5c5c:	10 e0       	ldi	r17, 0x00	; 0
    5c5e:	80 e1       	ldi	r24, 0x10	; 16
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	80 1b       	sub	r24, r16
    5c64:	91 0b       	sbc	r25, r17
    5c66:	c1 e0       	ldi	r28, 0x01	; 1
    5c68:	d0 e0       	ldi	r29, 0x00	; 0
    5c6a:	02 c0       	rjmp	.+4      	; 0x5c70 <setLeds+0x34>
    5c6c:	cc 0f       	add	r28, r28
    5c6e:	dd 1f       	adc	r29, r29
    5c70:	8a 95       	dec	r24
    5c72:	e2 f7       	brpl	.-8      	; 0x5c6c <setLeds+0x30>
	for (int i = leds->count - 1; i >= 0; i--) {
    5c74:	01 50       	subi	r16, 0x01	; 1
    5c76:	10 40       	sbci	r17, 0x00	; 0
    5c78:	78 01       	movw	r14, r16
    5c7a:	ee 0c       	add	r14, r14
    5c7c:	ff 1c       	adc	r15, r15
    5c7e:	17 c0       	rjmp	.+46     	; 0x5cae <setLeds+0x72>
		setLed(leds->leds[i], iMask & mask);
    5c80:	d6 01       	movw	r26, r12
    5c82:	ed 91       	ld	r30, X+
    5c84:	fc 91       	ld	r31, X
    5c86:	ee 0d       	add	r30, r14
    5c88:	ff 1d       	adc	r31, r15
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    5c8a:	01 90       	ld	r0, Z+
    5c8c:	f0 81       	ld	r31, Z
    5c8e:	e0 2d       	mov	r30, r0
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
    5c90:	be 01       	movw	r22, r28
    5c92:	6a 21       	and	r22, r10
    5c94:	7b 21       	and	r23, r11
void disableLed(PLed led) {
	writePin(led->pin, FALSE);
}

void setLed(PLed led, BOOL value) {
	writePin(led->pin, value);
    5c96:	80 81       	ld	r24, Z
    5c98:	91 81       	ldd	r25, Z+1	; 0x01
    5c9a:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <writePin>

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
    5c9e:	cc 0f       	add	r28, r28
    5ca0:	dd 1f       	adc	r29, r29
	writePin(led->pin, value);
}

void setLeds(PLedGroup leds, uint16_t mask) {
	uint16_t iMask = 1 << (16 - leds->count);
	for (int i = leds->count - 1; i >= 0; i--) {
    5ca2:	01 50       	subi	r16, 0x01	; 1
    5ca4:	10 40       	sbci	r17, 0x00	; 0
    5ca6:	ee ef       	ldi	r30, 0xFE	; 254
    5ca8:	ff ef       	ldi	r31, 0xFF	; 255
    5caa:	ee 0e       	add	r14, r30
    5cac:	ff 1e       	adc	r15, r31
    5cae:	ff ef       	ldi	r31, 0xFF	; 255
    5cb0:	0f 3f       	cpi	r16, 0xFF	; 255
    5cb2:	1f 07       	cpc	r17, r31
    5cb4:	29 f7       	brne	.-54     	; 0x5c80 <setLeds+0x44>
		setLed(leds->leds[i], iMask & mask);
		iMask = iMask << 1;
	}
}
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	1f 91       	pop	r17
    5cbc:	0f 91       	pop	r16
    5cbe:	ff 90       	pop	r15
    5cc0:	ef 90       	pop	r14
    5cc2:	df 90       	pop	r13
    5cc4:	cf 90       	pop	r12
    5cc6:	bf 90       	pop	r11
    5cc8:	af 90       	pop	r10
    5cca:	08 95       	ret

00005ccc <enableLeds>:

void enableLeds(PLedGroup leds) {
    5ccc:	ef 92       	push	r14
    5cce:	ff 92       	push	r15
    5cd0:	0f 93       	push	r16
    5cd2:	1f 93       	push	r17
    5cd4:	cf 93       	push	r28
    5cd6:	df 93       	push	r29
    5cd8:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    5cda:	dc 01       	movw	r26, r24
    5cdc:	12 96       	adiw	r26, 0x02	; 2
    5cde:	ec 90       	ld	r14, X
    5ce0:	12 97       	sbiw	r26, 0x02	; 2
    5ce2:	ff 24       	eor	r15, r15
    5ce4:	c0 e0       	ldi	r28, 0x00	; 0
    5ce6:	d0 e0       	ldi	r29, 0x00	; 0
    5ce8:	0d c0       	rjmp	.+26     	; 0x5d04 <enableLeds+0x38>
		enableLed(leds->leds[i]);
    5cea:	ce 01       	movw	r24, r28
    5cec:	88 0f       	add	r24, r24
    5cee:	99 1f       	adc	r25, r25
    5cf0:	d8 01       	movw	r26, r16
    5cf2:	ed 91       	ld	r30, X+
    5cf4:	fc 91       	ld	r31, X
    5cf6:	e8 0f       	add	r30, r24
    5cf8:	f9 1f       	adc	r31, r25
    5cfa:	80 81       	ld	r24, Z
    5cfc:	91 81       	ldd	r25, Z+1	; 0x01
    5cfe:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <enableLed>
		iMask = iMask << 1;
	}
}

void enableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    5d02:	21 96       	adiw	r28, 0x01	; 1
    5d04:	ce 15       	cp	r28, r14
    5d06:	df 05       	cpc	r29, r15
    5d08:	84 f3       	brlt	.-32     	; 0x5cea <enableLeds+0x1e>
		enableLed(leds->leds[i]);
	}
}
    5d0a:	df 91       	pop	r29
    5d0c:	cf 91       	pop	r28
    5d0e:	1f 91       	pop	r17
    5d10:	0f 91       	pop	r16
    5d12:	ff 90       	pop	r15
    5d14:	ef 90       	pop	r14
    5d16:	08 95       	ret

00005d18 <disableLeds>:

void disableLeds(PLedGroup leds) {
    5d18:	ef 92       	push	r14
    5d1a:	ff 92       	push	r15
    5d1c:	0f 93       	push	r16
    5d1e:	1f 93       	push	r17
    5d20:	cf 93       	push	r28
    5d22:	df 93       	push	r29
    5d24:	8c 01       	movw	r16, r24
	for (int i = 0, max = leds->count; i < max; i++) {
    5d26:	dc 01       	movw	r26, r24
    5d28:	12 96       	adiw	r26, 0x02	; 2
    5d2a:	ec 90       	ld	r14, X
    5d2c:	12 97       	sbiw	r26, 0x02	; 2
    5d2e:	ff 24       	eor	r15, r15
    5d30:	c0 e0       	ldi	r28, 0x00	; 0
    5d32:	d0 e0       	ldi	r29, 0x00	; 0
    5d34:	0d c0       	rjmp	.+26     	; 0x5d50 <disableLeds+0x38>
		disableLed(leds->leds[i]);
    5d36:	ce 01       	movw	r24, r28
    5d38:	88 0f       	add	r24, r24
    5d3a:	99 1f       	adc	r25, r25
    5d3c:	d8 01       	movw	r26, r16
    5d3e:	ed 91       	ld	r30, X+
    5d40:	fc 91       	ld	r31, X
    5d42:	e8 0f       	add	r30, r24
    5d44:	f9 1f       	adc	r31, r25
    5d46:	80 81       	ld	r24, Z
    5d48:	91 81       	ldd	r25, Z+1	; 0x01
    5d4a:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <disableLed>
		enableLed(leds->leds[i]);
	}
}

void disableLeds(PLedGroup leds) {
	for (int i = 0, max = leds->count; i < max; i++) {
    5d4e:	21 96       	adiw	r28, 0x01	; 1
    5d50:	ce 15       	cp	r28, r14
    5d52:	df 05       	cpc	r29, r15
    5d54:	84 f3       	brlt	.-32     	; 0x5d36 <disableLeds+0x1e>
		disableLed(leds->leds[i]);
	}
}
    5d56:	df 91       	pop	r29
    5d58:	cf 91       	pop	r28
    5d5a:	1f 91       	pop	r17
    5d5c:	0f 91       	pop	r16
    5d5e:	ff 90       	pop	r15
    5d60:	ef 90       	pop	r14
    5d62:	08 95       	ret

00005d64 <blinkLeds>:
static inline void BLINK_DELAY() { _delay_ms(200); }
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, uint8_t times) {
    5d64:	cf 92       	push	r12
    5d66:	df 92       	push	r13
    5d68:	ff 92       	push	r15
    5d6a:	0f 93       	push	r16
    5d6c:	1f 93       	push	r17
    5d6e:	df 93       	push	r29
    5d70:	cf 93       	push	r28
    5d72:	0f 92       	push	r0
    5d74:	cd b7       	in	r28, 0x3d	; 61
    5d76:	de b7       	in	r29, 0x3e	; 62
    5d78:	6c 01       	movw	r12, r24
    5d7a:	8b 01       	movw	r16, r22
	for (uint8_t i = 0; i < times; i++) {
    5d7c:	ff 24       	eor	r15, r15
    5d7e:	0e c0       	rjmp	.+28     	; 0x5d9c <blinkLeds+0x38>
		setLeds(leds, ledMask);
    5d80:	c6 01       	movw	r24, r12
    5d82:	b8 01       	movw	r22, r16
    5d84:	49 83       	std	Y+1, r20	; 0x01
    5d86:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
		BLINK_DELAY();
    5d8a:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <BLINK_DELAY>
		disableLeds(leds);
    5d8e:	c6 01       	movw	r24, r12
    5d90:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <disableLeds>
		BLINK_DELAY();
    5d94:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <BLINK_DELAY>
static inline void DELAY_MS(uint16_t millis) {
	while (millis--) _delay_ms(1);
}

void blinkLeds(PLedGroup leds, uint16_t ledMask, uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    5d98:	f3 94       	inc	r15
    5d9a:	49 81       	ldd	r20, Y+1	; 0x01
    5d9c:	f4 16       	cp	r15, r20
    5d9e:	80 f3       	brcs	.-32     	; 0x5d80 <blinkLeds+0x1c>
		setLeds(leds, ledMask);
		BLINK_DELAY();
		disableLeds(leds);
		BLINK_DELAY();
	}
}
    5da0:	0f 90       	pop	r0
    5da2:	cf 91       	pop	r28
    5da4:	df 91       	pop	r29
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	df 90       	pop	r13
    5dae:	cf 90       	pop	r12
    5db0:	08 95       	ret

00005db2 <blinkAllLeds>:

void blinkAllLeds(PLedGroup leds, uint8_t times) {
    5db2:	46 2f       	mov	r20, r22
	blinkLeds(leds, 0xFFFF, times);
    5db4:	6f ef       	ldi	r22, 0xFF	; 255
    5db6:	7f ef       	ldi	r23, 0xFF	; 255
    5db8:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <blinkLeds>
}
    5dbc:	08 95       	ret

00005dbe <blinkLed>:

void blinkLed(PLed led, uint8_t times) {
    5dbe:	ef 92       	push	r14
    5dc0:	ff 92       	push	r15
    5dc2:	1f 93       	push	r17
    5dc4:	df 93       	push	r29
    5dc6:	cf 93       	push	r28
    5dc8:	0f 92       	push	r0
    5dca:	cd b7       	in	r28, 0x3d	; 61
    5dcc:	de b7       	in	r29, 0x3e	; 62
    5dce:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < times; i++) {
    5dd0:	10 e0       	ldi	r17, 0x00	; 0
    5dd2:	0d c0       	rjmp	.+26     	; 0x5dee <blinkLed+0x30>
		enableLed(led);
    5dd4:	c7 01       	movw	r24, r14
    5dd6:	69 83       	std	Y+1, r22	; 0x01
    5dd8:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <enableLed>
		BLINK_DELAY();
    5ddc:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <BLINK_DELAY>
		disableLed(led);
    5de0:	c7 01       	movw	r24, r14
    5de2:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <disableLed>
		BLINK_DELAY();
    5de6:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <BLINK_DELAY>
void blinkAllLeds(PLedGroup leds, uint8_t times) {
	blinkLeds(leds, 0xFFFF, times);
}

void blinkLed(PLed led, uint8_t times) {
	for (uint8_t i = 0; i < times; i++) {
    5dea:	1f 5f       	subi	r17, 0xFF	; 255
    5dec:	69 81       	ldd	r22, Y+1	; 0x01
    5dee:	16 17       	cp	r17, r22
    5df0:	88 f3       	brcs	.-30     	; 0x5dd4 <blinkLed+0x16>
		enableLed(led);
		BLINK_DELAY();
		disableLed(led);
		BLINK_DELAY();
	}
}
    5df2:	0f 90       	pop	r0
    5df4:	cf 91       	pop	r28
    5df6:	df 91       	pop	r29
    5df8:	1f 91       	pop	r17
    5dfa:	ff 90       	pop	r15
    5dfc:	ef 90       	pop	r14
    5dfe:	08 95       	ret

00005e00 <flashLed>:

void flashLed(PLed led, const uint16_t millis) {
    5e00:	0f 93       	push	r16
    5e02:	1f 93       	push	r17
    5e04:	cf 93       	push	r28
    5e06:	df 93       	push	r29
    5e08:	ec 01       	movw	r28, r24
    5e0a:	8b 01       	movw	r16, r22
	enableLed(led);
    5e0c:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <enableLed>
	DELAY_MS(millis);
    5e10:	c8 01       	movw	r24, r16
    5e12:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <DELAY_MS>
	disableLed(led);
    5e16:	ce 01       	movw	r24, r28
    5e18:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <disableLed>
}
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	1f 91       	pop	r17
    5e22:	0f 91       	pop	r16
    5e24:	08 95       	ret

00005e26 <flashLeds>:

void flashLeds(PLedGroup leds, uint16_t ledMask, uint16_t millis) {
    5e26:	0f 93       	push	r16
    5e28:	1f 93       	push	r17
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	ec 01       	movw	r28, r24
    5e30:	8a 01       	movw	r16, r20
	setLeds(leds, ledMask);
    5e32:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <setLeds>
	DELAY_MS(millis);
    5e36:	c8 01       	movw	r24, r16
    5e38:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <DELAY_MS>
	disableLeds(leds);
    5e3c:	ce 01       	movw	r24, r28
    5e3e:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <disableLeds>
}
    5e42:	df 91       	pop	r29
    5e44:	cf 91       	pop	r28
    5e46:	1f 91       	pop	r17
    5e48:	0f 91       	pop	r16
    5e4a:	08 95       	ret

00005e4c <flashAllLeds>:

void flashAllLeds(PLedGroup leds, uint16_t millis) {
    5e4c:	ab 01       	movw	r20, r22
	flashLeds(leds, 0xFFFF, millis);
    5e4e:	6f ef       	ldi	r22, 0xFF	; 255
    5e50:	7f ef       	ldi	r23, 0xFF	; 255
    5e52:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <flashLeds>
}
    5e56:	08 95       	ret

00005e58 <blinkByte>:

void blinkByte(PLedGroup display, PLedGroup notifier, byte data) {
    5e58:	af 92       	push	r10
    5e5a:	bf 92       	push	r11
    5e5c:	cf 92       	push	r12
    5e5e:	df 92       	push	r13
    5e60:	ef 92       	push	r14
    5e62:	ff 92       	push	r15
    5e64:	0f 93       	push	r16
    5e66:	1f 93       	push	r17
    5e68:	df 93       	push	r29
    5e6a:	cf 93       	push	r28
    5e6c:	0f 92       	push	r0
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
    5e72:	8c 01       	movw	r16, r24
    5e74:	7b 01       	movw	r14, r22
	flashAllLeds(notifier, 1500);
    5e76:	cb 01       	movw	r24, r22
    5e78:	6c ed       	ldi	r22, 0xDC	; 220
    5e7a:	75 e0       	ldi	r23, 0x05	; 5
    5e7c:	49 83       	std	Y+1, r20	; 0x01
    5e7e:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <flashAllLeds>
	uint16_t word = AS_WORD(data);
    5e82:	49 81       	ldd	r20, Y+1	; 0x01
    5e84:	b4 2e       	mov	r11, r20
    5e86:	aa 24       	eor	r10, r10
	blinkLeds(display, word, 3);
    5e88:	c8 01       	movw	r24, r16
    5e8a:	b5 01       	movw	r22, r10
    5e8c:	43 e0       	ldi	r20, 0x03	; 3
    5e8e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <blinkLeds>
	if (display->count < 8) {
    5e92:	f8 01       	movw	r30, r16
    5e94:	d2 80       	ldd	r13, Z+2	; 0x02
    5e96:	fd 2d       	mov	r31, r13
    5e98:	f8 30       	cpi	r31, 0x08	; 8
    5e9a:	78 f4       	brcc	.+30     	; 0x5eba <blinkByte+0x62>
		// max one shift
		word = word << display->count;
		flashAllLeds(notifier, 700);
    5e9c:	c7 01       	movw	r24, r14
    5e9e:	6c eb       	ldi	r22, 0xBC	; 188
    5ea0:	72 e0       	ldi	r23, 0x02	; 2
    5ea2:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <flashAllLeds>
	flashAllLeds(notifier, 1500);
	uint16_t word = AS_WORD(data);
	blinkLeds(display, word, 3);
	if (display->count < 8) {
		// max one shift
		word = word << display->count;
    5ea6:	b5 01       	movw	r22, r10
    5ea8:	02 c0       	rjmp	.+4      	; 0x5eae <blinkByte+0x56>
    5eaa:	66 0f       	add	r22, r22
    5eac:	77 1f       	adc	r23, r23
    5eae:	da 94       	dec	r13
    5eb0:	e2 f7       	brpl	.-8      	; 0x5eaa <blinkByte+0x52>
		flashAllLeds(notifier, 700);
		blinkLeds(display, word, 3);
    5eb2:	c8 01       	movw	r24, r16
    5eb4:	43 e0       	ldi	r20, 0x03	; 3
    5eb6:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <blinkLeds>
	}
}
    5eba:	0f 90       	pop	r0
    5ebc:	cf 91       	pop	r28
    5ebe:	df 91       	pop	r29
    5ec0:	1f 91       	pop	r17
    5ec2:	0f 91       	pop	r16
    5ec4:	ff 90       	pop	r15
    5ec6:	ef 90       	pop	r14
    5ec8:	df 90       	pop	r13
    5eca:	cf 90       	pop	r12
    5ecc:	bf 90       	pop	r11
    5ece:	af 90       	pop	r10
    5ed0:	08 95       	ret

00005ed2 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    5ed2:	dc 01       	movw	r26, r24
    5ed4:	14 96       	adiw	r26, 0x04	; 4
    5ed6:	ed 91       	ld	r30, X+
    5ed8:	fc 91       	ld	r31, X
    5eda:	15 97       	sbiw	r26, 0x05	; 5
    5edc:	8f ef       	ldi	r24, 0xFF	; 255
    5ede:	80 83       	st	Z, r24
}
    5ee0:	08 95       	ret

00005ee2 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	14 96       	adiw	r26, 0x04	; 4
    5ee6:	ed 91       	ld	r30, X+
    5ee8:	fc 91       	ld	r31, X
    5eea:	15 97       	sbiw	r26, 0x05	; 5
    5eec:	10 82       	st	Z, r1
}
    5eee:	08 95       	ret

00005ef0 <setPinOutput>:

void setPinOutput(PPin pin) {
    5ef0:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    5ef2:	ed 91       	ld	r30, X+
    5ef4:	fc 91       	ld	r31, X
    5ef6:	11 97       	sbiw	r26, 0x01	; 1
    5ef8:	04 80       	ldd	r0, Z+4	; 0x04
    5efa:	f5 81       	ldd	r31, Z+5	; 0x05
    5efc:	e0 2d       	mov	r30, r0
    5efe:	80 81       	ld	r24, Z
    5f00:	12 96       	adiw	r26, 0x02	; 2
    5f02:	9c 91       	ld	r25, X
    5f04:	12 97       	sbiw	r26, 0x02	; 2
    5f06:	89 2b       	or	r24, r25
    5f08:	80 83       	st	Z, r24
}
    5f0a:	08 95       	ret

00005f0c <setPinInput>:

void setPinInput(PPin pin) {
    5f0c:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    5f0e:	ed 91       	ld	r30, X+
    5f10:	fc 91       	ld	r31, X
    5f12:	11 97       	sbiw	r26, 0x01	; 1
    5f14:	04 80       	ldd	r0, Z+4	; 0x04
    5f16:	f5 81       	ldd	r31, Z+5	; 0x05
    5f18:	e0 2d       	mov	r30, r0
    5f1a:	90 81       	ld	r25, Z
    5f1c:	12 96       	adiw	r26, 0x02	; 2
    5f1e:	8c 91       	ld	r24, X
    5f20:	12 97       	sbiw	r26, 0x02	; 2
    5f22:	80 95       	com	r24
    5f24:	89 23       	and	r24, r25
    5f26:	80 83       	st	Z, r24
}
    5f28:	08 95       	ret

00005f2a <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    5f2a:	dc 01       	movw	r26, r24
    5f2c:	ed 91       	ld	r30, X+
    5f2e:	fc 91       	ld	r31, X
    5f30:	11 97       	sbiw	r26, 0x01	; 1
    5f32:	60 83       	st	Z, r22
}
    5f34:	08 95       	ret

00005f36 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    5f36:	dc 01       	movw	r26, r24
    5f38:	12 96       	adiw	r26, 0x02	; 2
    5f3a:	ed 91       	ld	r30, X+
    5f3c:	fc 91       	ld	r31, X
    5f3e:	13 97       	sbiw	r26, 0x03	; 3
    5f40:	80 81       	ld	r24, Z
}
    5f42:	08 95       	ret

00005f44 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    5f44:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    5f46:	ed 91       	ld	r30, X+
    5f48:	fc 91       	ld	r31, X
    5f4a:	11 97       	sbiw	r26, 0x01	; 1
    5f4c:	01 90       	ld	r0, Z+
    5f4e:	f0 81       	ld	r31, Z
    5f50:	e0 2d       	mov	r30, r0
    5f52:	80 81       	ld	r24, Z
    5f54:	12 96       	adiw	r26, 0x02	; 2
    5f56:	9c 91       	ld	r25, X
    5f58:	12 97       	sbiw	r26, 0x02	; 2
    5f5a:	89 2b       	or	r24, r25
    5f5c:	80 83       	st	Z, r24
}
    5f5e:	08 95       	ret

00005f60 <setPinZero>:

void setPinZero(PPin pin) {
    5f60:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    5f62:	ed 91       	ld	r30, X+
    5f64:	fc 91       	ld	r31, X
    5f66:	11 97       	sbiw	r26, 0x01	; 1
    5f68:	01 90       	ld	r0, Z+
    5f6a:	f0 81       	ld	r31, Z
    5f6c:	e0 2d       	mov	r30, r0
    5f6e:	90 81       	ld	r25, Z
    5f70:	12 96       	adiw	r26, 0x02	; 2
    5f72:	8c 91       	ld	r24, X
    5f74:	12 97       	sbiw	r26, 0x02	; 2
    5f76:	80 95       	com	r24
    5f78:	89 23       	and	r24, r25
    5f7a:	80 83       	st	Z, r24
}
    5f7c:	08 95       	ret

00005f7e <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    5f7e:	61 15       	cp	r22, r1
    5f80:	71 05       	cpc	r23, r1
    5f82:	19 f0       	breq	.+6      	; 0x5f8a <writePin+0xc>
    5f84:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <setPinOne>
    5f88:	08 95       	ret
	else setPinZero(pin);
    5f8a:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <setPinZero>
    5f8e:	08 95       	ret

00005f90 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    5f90:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    5f92:	a0 81       	ld	r26, Z
    5f94:	b1 81       	ldd	r27, Z+1	; 0x01
    5f96:	12 96       	adiw	r26, 0x02	; 2
    5f98:	0d 90       	ld	r0, X+
    5f9a:	bc 91       	ld	r27, X
    5f9c:	a0 2d       	mov	r26, r0
    5f9e:	8c 91       	ld	r24, X
    5fa0:	92 81       	ldd	r25, Z+2	; 0x02
    5fa2:	89 23       	and	r24, r25
		return TRUE;
    5fa4:	21 e0       	ldi	r18, 0x01	; 1
    5fa6:	30 e0       	ldi	r19, 0x00	; 0
    5fa8:	11 f4       	brne	.+4      	; 0x5fae <readPin+0x1e>
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    5fae:	c9 01       	movw	r24, r18
    5fb0:	08 95       	ret

00005fb2 <buttonStatus>:
 */ 

#include "button.h"
#include "port.h"

BOOL buttonStatus(PButton button) {
    5fb2:	cf 93       	push	r28
    5fb4:	df 93       	push	r29
    5fb6:	ec 01       	movw	r28, r24
	BOOL val = readPin(button->pin);
    5fb8:	89 81       	ldd	r24, Y+1	; 0x01
    5fba:	9a 81       	ldd	r25, Y+2	; 0x02
    5fbc:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <readPin>
    5fc0:	9c 01       	movw	r18, r24
	if (button->flags & BUTTON_INVERTED) val = !val;
    5fc2:	88 81       	ld	r24, Y
    5fc4:	80 ff       	sbrs	r24, 0
    5fc6:	08 c0       	rjmp	.+16     	; 0x5fd8 <buttonStatus+0x26>
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	21 15       	cp	r18, r1
    5fce:	31 05       	cpc	r19, r1
    5fd0:	11 f0       	breq	.+4      	; 0x5fd6 <buttonStatus+0x24>
    5fd2:	80 e0       	ldi	r24, 0x00	; 0
    5fd4:	90 e0       	ldi	r25, 0x00	; 0
    5fd6:	9c 01       	movw	r18, r24
	return val;
}
    5fd8:	c9 01       	movw	r24, r18
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	08 95       	ret

00005fe0 <enablePinChangeInterrupt>:
#include "external_interrupts.h"

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    5fe0:	80 32       	cpi	r24, 0x20	; 32
    5fe2:	18 f5       	brcc	.+70     	; 0x602a <enablePinChangeInterrupt+0x4a>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    5fe4:	58 2f       	mov	r21, r24
    5fe6:	56 95       	lsr	r21
    5fe8:	56 95       	lsr	r21
    5fea:	56 95       	lsr	r21
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    5fec:	e5 2f       	mov	r30, r21
    5fee:	f0 e0       	ldi	r31, 0x00	; 0
    5ff0:	ee 0f       	add	r30, r30
    5ff2:	ff 1f       	adc	r31, r31
    5ff4:	e2 58       	subi	r30, 0x82	; 130
    5ff6:	fc 4f       	sbci	r31, 0xFC	; 252
    5ff8:	01 90       	ld	r0, Z+
    5ffa:	f0 81       	ld	r31, Z
    5ffc:	e0 2d       	mov	r30, r0
    5ffe:	40 81       	ld	r20, Z

volatile uint8_t *maskRegisters[] = { &PCMSK0, &PCMSK1, &PCMSK2, &PCMSK3 };

void enablePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    6000:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) |= _BV(maskRegisterBit);
    6002:	21 e0       	ldi	r18, 0x01	; 1
    6004:	30 e0       	ldi	r19, 0x00	; 0
    6006:	b9 01       	movw	r22, r18
    6008:	02 c0       	rjmp	.+4      	; 0x600e <enablePinChangeInterrupt+0x2e>
    600a:	66 0f       	add	r22, r22
    600c:	77 1f       	adc	r23, r23
    600e:	8a 95       	dec	r24
    6010:	e2 f7       	brpl	.-8      	; 0x600a <enablePinChangeInterrupt+0x2a>
    6012:	46 2b       	or	r20, r22
    6014:	40 83       	st	Z, r20
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
    6016:	80 91 68 00 	lds	r24, 0x0068
    601a:	02 c0       	rjmp	.+4      	; 0x6020 <enablePinChangeInterrupt+0x40>
    601c:	22 0f       	add	r18, r18
    601e:	33 1f       	adc	r19, r19
    6020:	5a 95       	dec	r21
    6022:	e2 f7       	brpl	.-8      	; 0x601c <enablePinChangeInterrupt+0x3c>
    6024:	82 2b       	or	r24, r18
    6026:	80 93 68 00 	sts	0x0068, r24
    602a:	08 95       	ret

0000602c <disblePinChangeInterrupt>:
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
    602c:	80 32       	cpi	r24, 0x20	; 32
    602e:	c0 f4       	brcc	.+48     	; 0x6060 <disblePinChangeInterrupt+0x34>
	uint8_t maskRegisterBit = pcNumber % 8;
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
    6030:	e8 2f       	mov	r30, r24
    6032:	e6 95       	lsr	r30
    6034:	e6 95       	lsr	r30
    6036:	e6 95       	lsr	r30
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    6038:	f0 e0       	ldi	r31, 0x00	; 0
    603a:	ee 0f       	add	r30, r30
    603c:	ff 1f       	adc	r31, r31
    603e:	e2 58       	subi	r30, 0x82	; 130
    6040:	fc 4f       	sbci	r31, 0xFC	; 252
    6042:	01 90       	ld	r0, Z+
    6044:	f0 81       	ld	r31, Z
    6046:	e0 2d       	mov	r30, r0
    6048:	90 81       	ld	r25, Z
	PCICR |= _BV(maskRegisterNumber); // This will be redundant, after one PCI in a 8-bit port has been enabled.
}

void disblePinChangeInterrupt(uint8_t pcNumber) {
	if (pcNumber > 31) return;
	uint8_t maskRegisterBit = pcNumber % 8;
    604a:	87 70       	andi	r24, 0x07	; 7
	uint8_t maskRegisterNumber = pcNumber / 8; // Always rounded down
	*(maskRegisters[maskRegisterNumber]) &= ~_BV(maskRegisterBit);
    604c:	21 e0       	ldi	r18, 0x01	; 1
    604e:	30 e0       	ldi	r19, 0x00	; 0
    6050:	02 c0       	rjmp	.+4      	; 0x6056 <disblePinChangeInterrupt+0x2a>
    6052:	22 0f       	add	r18, r18
    6054:	33 1f       	adc	r19, r19
    6056:	8a 95       	dec	r24
    6058:	e2 f7       	brpl	.-8      	; 0x6052 <disblePinChangeInterrupt+0x26>
    605a:	20 95       	com	r18
    605c:	29 23       	and	r18, r25
    605e:	20 83       	st	Z, r18
    6060:	08 95       	ret

00006062 <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    6062:	fc 01       	movw	r30, r24
    6064:	64 30       	cpi	r22, 0x04	; 4
    6066:	71 05       	cpc	r23, r1
    6068:	48 f4       	brcc	.+18     	; 0x607c <setCompareMatchOutputMode+0x1a>
    606a:	db 01       	movw	r26, r22
    606c:	aa 57       	subi	r26, 0x7A	; 122
    606e:	bc 4f       	sbci	r27, 0xFC	; 252
    6070:	2c 91       	ld	r18, X
    6072:	66 57       	subi	r22, 0x76	; 118
    6074:	7c 4f       	sbci	r23, 0xFC	; 252
    6076:	db 01       	movw	r26, r22
    6078:	3c 91       	ld	r19, X
    607a:	02 c0       	rjmp	.+4      	; 0x6080 <setCompareMatchOutputMode+0x1e>
    607c:	30 e0       	ldi	r19, 0x00	; 0
    607e:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0B1) | _BV(COM0B0);
			break;
	}
	if (timer->type == TIMER_A) {
    6080:	84 81       	ldd	r24, Z+4	; 0x04
    6082:	95 81       	ldd	r25, Z+5	; 0x05
    6084:	00 97       	sbiw	r24, 0x00	; 0
    6086:	21 f4       	brne	.+8      	; 0x6090 <setCompareMatchOutputMode+0x2e>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		// Use left shift to avoid the arithmetic shift.
		oneBits = oneBits << 2;
    6088:	33 0f       	add	r19, r19
    608a:	33 0f       	add	r19, r19
		zeroBits = zeroBits << 2;
    608c:	22 0f       	add	r18, r18
    608e:	22 0f       	add	r18, r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    6090:	a0 81       	ld	r26, Z
    6092:	b1 81       	ldd	r27, Z+1	; 0x01
    6094:	11 96       	adiw	r26, 0x01	; 1
    6096:	0d 90       	ld	r0, X+
    6098:	bc 91       	ld	r27, X
    609a:	a0 2d       	mov	r26, r0
    609c:	8c 91       	ld	r24, X
    609e:	83 2b       	or	r24, r19
    60a0:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    60a2:	01 90       	ld	r0, Z+
    60a4:	f0 81       	ld	r31, Z
    60a6:	e0 2d       	mov	r30, r0
    60a8:	01 80       	ldd	r0, Z+1	; 0x01
    60aa:	f2 81       	ldd	r31, Z+2	; 0x02
    60ac:	e0 2d       	mov	r30, r0
    60ae:	80 81       	ld	r24, Z
    60b0:	20 95       	com	r18
    60b2:	28 23       	and	r18, r24
    60b4:	20 83       	st	Z, r18
}
    60b6:	08 95       	ret

000060b8 <setTimerClockSelect>:

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
    60b8:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    60ba:	80 81       	ld	r24, Z
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	82 70       	andi	r24, 0x02	; 2
    60c0:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    60c2:	64 30       	cpi	r22, 0x04	; 4
    60c4:	71 05       	cpc	r23, r1
    60c6:	71 f1       	breq	.+92     	; 0x6124 <setTimerClockSelect+0x6c>
    60c8:	65 30       	cpi	r22, 0x05	; 5
    60ca:	71 05       	cpc	r23, r1
    60cc:	68 f4       	brcc	.+26     	; 0x60e8 <setTimerClockSelect+0x30>
    60ce:	61 30       	cpi	r22, 0x01	; 1
    60d0:	71 05       	cpc	r23, r1
    60d2:	f9 f0       	breq	.+62     	; 0x6112 <setTimerClockSelect+0x5a>
    60d4:	61 30       	cpi	r22, 0x01	; 1
    60d6:	71 05       	cpc	r23, r1
    60d8:	d8 f1       	brcs	.+118    	; 0x6150 <setTimerClockSelect+0x98>
    60da:	62 30       	cpi	r22, 0x02	; 2
    60dc:	71 05       	cpc	r23, r1
    60de:	e1 f0       	breq	.+56     	; 0x6118 <setTimerClockSelect+0x60>
    60e0:	63 30       	cpi	r22, 0x03	; 3
    60e2:	71 05       	cpc	r23, r1
    60e4:	a1 f4       	brne	.+40     	; 0x610e <setTimerClockSelect+0x56>
    60e6:	1b c0       	rjmp	.+54     	; 0x611e <setTimerClockSelect+0x66>
    60e8:	67 30       	cpi	r22, 0x07	; 7
    60ea:	71 05       	cpc	r23, r1
    60ec:	21 f1       	breq	.+72     	; 0x6136 <setTimerClockSelect+0x7e>
    60ee:	68 30       	cpi	r22, 0x08	; 8
    60f0:	71 05       	cpc	r23, r1
    60f2:	38 f4       	brcc	.+14     	; 0x6102 <setTimerClockSelect+0x4a>
    60f4:	65 30       	cpi	r22, 0x05	; 5
    60f6:	71 05       	cpc	r23, r1
    60f8:	c1 f0       	breq	.+48     	; 0x612a <setTimerClockSelect+0x72>
    60fa:	66 30       	cpi	r22, 0x06	; 6
    60fc:	71 05       	cpc	r23, r1
    60fe:	39 f4       	brne	.+14     	; 0x610e <setTimerClockSelect+0x56>
    6100:	17 c0       	rjmp	.+46     	; 0x6130 <setTimerClockSelect+0x78>
    6102:	68 30       	cpi	r22, 0x08	; 8
    6104:	71 05       	cpc	r23, r1
    6106:	d1 f0       	breq	.+52     	; 0x613c <setTimerClockSelect+0x84>
    6108:	69 30       	cpi	r22, 0x09	; 9
    610a:	71 05       	cpc	r23, r1
    610c:	e1 f0       	breq	.+56     	; 0x6146 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	1d c0       	rjmp	.+58     	; 0x614c <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    6112:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    6114:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    6116:	27 c0       	rjmp	.+78     	; 0x6166 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    6118:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    611a:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    611c:	24 c0       	rjmp	.+72     	; 0x6166 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    611e:	00 97       	sbiw	r24, 0x00	; 0
    6120:	e9 f4       	brne	.+58     	; 0x615c <setTimerClockSelect+0xa4>
    6122:	2d c0       	rjmp	.+90     	; 0x617e <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    6124:	00 97       	sbiw	r24, 0x00	; 0
    6126:	b9 f0       	breq	.+46     	; 0x6156 <setTimerClockSelect+0x9e>
    6128:	19 c0       	rjmp	.+50     	; 0x615c <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    612a:	00 97       	sbiw	r24, 0x00	; 0
    612c:	d1 f4       	brne	.+52     	; 0x6162 <setTimerClockSelect+0xaa>
    612e:	27 c0       	rjmp	.+78     	; 0x617e <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    6130:	00 97       	sbiw	r24, 0x00	; 0
    6132:	a1 f0       	breq	.+40     	; 0x615c <setTimerClockSelect+0xa4>
    6134:	05 c0       	rjmp	.+10     	; 0x6140 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	a1 f0       	breq	.+40     	; 0x6162 <setTimerClockSelect+0xaa>
    613a:	07 c0       	rjmp	.+14     	; 0x614a <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    613c:	00 97       	sbiw	r24, 0x00	; 0
    613e:	f9 f4       	brne	.+62     	; 0x617e <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    6140:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    6142:	81 e0       	ldi	r24, 0x01	; 1
    6144:	10 c0       	rjmp	.+32     	; 0x6166 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    6146:	00 97       	sbiw	r24, 0x00	; 0
    6148:	d1 f4       	brne	.+52     	; 0x617e <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    614a:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    614c:	80 e0       	ldi	r24, 0x00	; 0
    614e:	0b c0       	rjmp	.+22     	; 0x6166 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    6150:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    6152:	87 e0       	ldi	r24, 0x07	; 7
    6154:	08 c0       	rjmp	.+16     	; 0x6166 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    6156:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    6158:	84 e0       	ldi	r24, 0x04	; 4
    615a:	05 c0       	rjmp	.+10     	; 0x6166 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    615c:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    615e:	83 e0       	ldi	r24, 0x03	; 3
    6160:	02 c0       	rjmp	.+4      	; 0x6166 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    6162:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    6164:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    6166:	a3 81       	ldd	r26, Z+3	; 0x03
    6168:	b4 81       	ldd	r27, Z+4	; 0x04
    616a:	2c 91       	ld	r18, X
    616c:	29 2b       	or	r18, r25
    616e:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    6170:	03 80       	ldd	r0, Z+3	; 0x03
    6172:	f4 81       	ldd	r31, Z+4	; 0x04
    6174:	e0 2d       	mov	r30, r0
    6176:	90 81       	ld	r25, Z
    6178:	80 95       	com	r24
    617a:	89 23       	and	r24, r25
    617c:	80 83       	st	Z, r24
    617e:	08 95       	ret

00006180 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
    6180:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    6182:	80 81       	ld	r24, Z
    6184:	82 ff       	sbrs	r24, 2
    6186:	37 c0       	rjmp	.+110    	; 0x61f6 <setWaveformGenerationMode+0x76>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    6188:	63 30       	cpi	r22, 0x03	; 3
    618a:	71 05       	cpc	r23, r1
    618c:	31 f1       	breq	.+76     	; 0x61da <setWaveformGenerationMode+0x5a>
    618e:	64 30       	cpi	r22, 0x04	; 4
    6190:	71 05       	cpc	r23, r1
    6192:	40 f4       	brcc	.+16     	; 0x61a4 <setWaveformGenerationMode+0x24>
    6194:	61 30       	cpi	r22, 0x01	; 1
    6196:	71 05       	cpc	r23, r1
    6198:	09 f4       	brne	.+2      	; 0x619c <setWaveformGenerationMode+0x1c>
    619a:	57 c0       	rjmp	.+174    	; 0x624a <setWaveformGenerationMode+0xca>
    619c:	62 30       	cpi	r22, 0x02	; 2
    619e:	71 05       	cpc	r23, r1
    61a0:	80 f4       	brcc	.+32     	; 0x61c2 <setWaveformGenerationMode+0x42>
    61a2:	0b c0       	rjmp	.+22     	; 0x61ba <setWaveformGenerationMode+0x3a>
    61a4:	65 30       	cpi	r22, 0x05	; 5
    61a6:	71 05       	cpc	r23, r1
    61a8:	81 f0       	breq	.+32     	; 0x61ca <setWaveformGenerationMode+0x4a>
    61aa:	65 30       	cpi	r22, 0x05	; 5
    61ac:	71 05       	cpc	r23, r1
    61ae:	c8 f0       	brcs	.+50     	; 0x61e2 <setWaveformGenerationMode+0x62>
    61b0:	66 30       	cpi	r22, 0x06	; 6
    61b2:	71 05       	cpc	r23, r1
    61b4:	09 f0       	breq	.+2      	; 0x61b8 <setWaveformGenerationMode+0x38>
    61b6:	7a c0       	rjmp	.+244    	; 0x62ac <setWaveformGenerationMode+0x12c>
    61b8:	1c c0       	rjmp	.+56     	; 0x61f2 <setWaveformGenerationMode+0x72>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    61ba:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    61bc:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    61be:	88 e1       	ldi	r24, 0x18	; 24
    61c0:	47 c0       	rjmp	.+142    	; 0x6250 <setWaveformGenerationMode+0xd0>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    61c2:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    61c4:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    61c6:	80 e1       	ldi	r24, 0x10	; 16
    61c8:	3e c0       	rjmp	.+124    	; 0x6246 <setWaveformGenerationMode+0xc6>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
    61ca:	84 fd       	sbrc	r24, 4
    61cc:	43 c0       	rjmp	.+134    	; 0x6254 <setWaveformGenerationMode+0xd4>
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
    61ce:	85 ff       	sbrs	r24, 5
    61d0:	45 c0       	rjmp	.+138    	; 0x625c <setWaveformGenerationMode+0xdc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
    61d2:	98 e0       	ldi	r25, 0x08	; 8
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    61d4:	33 e0       	ldi	r19, 0x03	; 3
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    61d6:	80 e1       	ldi	r24, 0x10	; 16
    61d8:	4c c0       	rjmp	.+152    	; 0x6272 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    61da:	90 e0       	ldi	r25, 0x00	; 0
					oneBitsB = _BV(WGM13) | _BV(WGM12);
				}
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    61dc:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    61de:	88 e1       	ldi	r24, 0x18	; 24
    61e0:	32 c0       	rjmp	.+100    	; 0x6246 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
    61e2:	84 fd       	sbrc	r24, 4
    61e4:	3f c0       	rjmp	.+126    	; 0x6264 <setWaveformGenerationMode+0xe4>
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
    61e6:	85 ff       	sbrs	r24, 5
    61e8:	41 c0       	rjmp	.+130    	; 0x626c <setWaveformGenerationMode+0xec>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    61ea:	90 e0       	ldi	r25, 0x00	; 0
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    61ec:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    61ee:	88 e1       	ldi	r24, 0x18	; 24
    61f0:	40 c0       	rjmp	.+128    	; 0x6272 <setWaveformGenerationMode+0xf2>
				}
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    61f2:	90 e1       	ldi	r25, 0x10	; 16
    61f4:	22 c0       	rjmp	.+68     	; 0x623a <setWaveformGenerationMode+0xba>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    61f6:	62 30       	cpi	r22, 0x02	; 2
    61f8:	71 05       	cpc	r23, r1
    61fa:	d1 f0       	breq	.+52     	; 0x6230 <setWaveformGenerationMode+0xb0>
    61fc:	63 30       	cpi	r22, 0x03	; 3
    61fe:	71 05       	cpc	r23, r1
    6200:	40 f4       	brcc	.+16     	; 0x6212 <setWaveformGenerationMode+0x92>
    6202:	61 15       	cp	r22, r1
    6204:	71 05       	cpc	r23, r1
    6206:	81 f0       	breq	.+32     	; 0x6228 <setWaveformGenerationMode+0xa8>
    6208:	61 30       	cpi	r22, 0x01	; 1
    620a:	71 05       	cpc	r23, r1
    620c:	09 f0       	breq	.+2      	; 0x6210 <setWaveformGenerationMode+0x90>
    620e:	4e c0       	rjmp	.+156    	; 0x62ac <setWaveformGenerationMode+0x12c>
    6210:	32 c0       	rjmp	.+100    	; 0x6276 <setWaveformGenerationMode+0xf6>
    6212:	64 30       	cpi	r22, 0x04	; 4
    6214:	71 05       	cpc	r23, r1
    6216:	a1 f0       	breq	.+40     	; 0x6240 <setWaveformGenerationMode+0xc0>
    6218:	64 30       	cpi	r22, 0x04	; 4
    621a:	71 05       	cpc	r23, r1
    621c:	68 f0       	brcs	.+26     	; 0x6238 <setWaveformGenerationMode+0xb8>
    621e:	65 30       	cpi	r22, 0x05	; 5
    6220:	71 05       	cpc	r23, r1
    6222:	09 f0       	breq	.+2      	; 0x6226 <setWaveformGenerationMode+0xa6>
    6224:	43 c0       	rjmp	.+134    	; 0x62ac <setWaveformGenerationMode+0x12c>
    6226:	06 c0       	rjmp	.+12     	; 0x6234 <setWaveformGenerationMode+0xb4>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    6228:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    622a:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    622c:	88 e0       	ldi	r24, 0x08	; 8
    622e:	10 c0       	rjmp	.+32     	; 0x6250 <setWaveformGenerationMode+0xd0>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	1d c0       	rjmp	.+58     	; 0x626e <setWaveformGenerationMode+0xee>
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    6234:	98 e0       	ldi	r25, 0x08	; 8
    6236:	13 c0       	rjmp	.+38     	; 0x625e <setWaveformGenerationMode+0xde>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    6238:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    623a:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    623c:	88 e0       	ldi	r24, 0x08	; 8
    623e:	03 c0       	rjmp	.+6      	; 0x6246 <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    6240:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    6242:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    6244:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    6246:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    6248:	1a c0       	rjmp	.+52     	; 0x627e <setWaveformGenerationMode+0xfe>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    624a:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    624c:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    624e:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    6250:	23 e0       	ldi	r18, 0x03	; 3
    6252:	15 c0       	rjmp	.+42     	; 0x627e <setWaveformGenerationMode+0xfe>
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
    6254:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
    6256:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    6258:	80 e1       	ldi	r24, 0x10	; 16
    625a:	10 c0       	rjmp	.+32     	; 0x627c <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					oneBitsB = _BV(WGM13) | _BV(WGM12);
    625c:	98 e1       	ldi	r25, 0x18	; 24
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    625e:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    6260:	80 e0       	ldi	r24, 0x00	; 0
    6262:	07 c0       	rjmp	.+14     	; 0x6272 <setWaveformGenerationMode+0xf2>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    6264:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
    6266:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    6268:	88 e1       	ldi	r24, 0x18	; 24
    626a:	08 c0       	rjmp	.+16     	; 0x627c <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					zeroBitsB = _BV(WGM12);
					oneBitsB = _BV(WGM13);
    626c:	90 e1       	ldi	r25, 0x10	; 16
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    626e:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM12);
    6270:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    6272:	20 e0       	ldi	r18, 0x00	; 0
    6274:	04 c0       	rjmp	.+8      	; 0x627e <setWaveformGenerationMode+0xfe>
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    6276:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    6278:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    627a:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    627c:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    627e:	a1 81       	ldd	r26, Z+1	; 0x01
    6280:	b2 81       	ldd	r27, Z+2	; 0x02
    6282:	4c 91       	ld	r20, X
    6284:	43 2b       	or	r20, r19
    6286:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    6288:	a1 81       	ldd	r26, Z+1	; 0x01
    628a:	b2 81       	ldd	r27, Z+2	; 0x02
    628c:	3c 91       	ld	r19, X
    628e:	20 95       	com	r18
    6290:	23 23       	and	r18, r19
    6292:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    6294:	a3 81       	ldd	r26, Z+3	; 0x03
    6296:	b4 81       	ldd	r27, Z+4	; 0x04
    6298:	2c 91       	ld	r18, X
    629a:	29 2b       	or	r18, r25
    629c:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    629e:	03 80       	ldd	r0, Z+3	; 0x03
    62a0:	f4 81       	ldd	r31, Z+4	; 0x04
    62a2:	e0 2d       	mov	r30, r0
    62a4:	90 81       	ld	r25, Z
    62a6:	80 95       	com	r24
    62a8:	89 23       	and	r24, r25
    62aa:	80 83       	st	Z, r24
    62ac:	08 95       	ret

000062ae <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    62ae:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative macro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    62b0:	ed 91       	ld	r30, X+
    62b2:	fc 91       	ld	r31, X
    62b4:	11 97       	sbiw	r26, 0x01	; 1
    62b6:	05 80       	ldd	r0, Z+5	; 0x05
    62b8:	f6 81       	ldd	r31, Z+6	; 0x06
    62ba:	e0 2d       	mov	r30, r0
    62bc:	20 81       	ld	r18, Z
    62be:	14 96       	adiw	r26, 0x04	; 4
    62c0:	8d 91       	ld	r24, X+
    62c2:	9c 91       	ld	r25, X
    62c4:	15 97       	sbiw	r26, 0x05	; 5
    62c6:	00 97       	sbiw	r24, 0x00	; 0
    62c8:	11 f4       	brne	.+4      	; 0x62ce <enableTimerInterrupt+0x20>
    62ca:	82 e0       	ldi	r24, 0x02	; 2
    62cc:	01 c0       	rjmp	.+2      	; 0x62d0 <enableTimerInterrupt+0x22>
    62ce:	84 e0       	ldi	r24, 0x04	; 4
    62d0:	82 2b       	or	r24, r18
    62d2:	80 83       	st	Z, r24
}
    62d4:	08 95       	ret

000062d6 <disableTimerInterrupt>:

void disableTimerInterrupt(PTimer timer) {
    62d6:	dc 01       	movw	r26, r24
	*timer->timer->interruptMaskRegister &= ~_BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    62d8:	ed 91       	ld	r30, X+
    62da:	fc 91       	ld	r31, X
    62dc:	11 97       	sbiw	r26, 0x01	; 1
    62de:	05 80       	ldd	r0, Z+5	; 0x05
    62e0:	f6 81       	ldd	r31, Z+6	; 0x06
    62e2:	e0 2d       	mov	r30, r0
    62e4:	20 81       	ld	r18, Z
    62e6:	14 96       	adiw	r26, 0x04	; 4
    62e8:	8d 91       	ld	r24, X+
    62ea:	9c 91       	ld	r25, X
    62ec:	15 97       	sbiw	r26, 0x05	; 5
    62ee:	00 97       	sbiw	r24, 0x00	; 0
    62f0:	11 f4       	brne	.+4      	; 0x62f6 <disableTimerInterrupt+0x20>
    62f2:	8d ef       	ldi	r24, 0xFD	; 253
    62f4:	01 c0       	rjmp	.+2      	; 0x62f8 <disableTimerInterrupt+0x22>
    62f6:	8b ef       	ldi	r24, 0xFB	; 251
    62f8:	82 23       	and	r24, r18
    62fa:	80 83       	st	Z, r24
}
    62fc:	08 95       	ret

000062fe <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    62fe:	cf 93       	push	r28
    6300:	df 93       	push	r29
    6302:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    6304:	8e 81       	ldd	r24, Y+6	; 0x06
    6306:	9f 81       	ldd	r25, Y+7	; 0x07
    6308:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <setPinOutput>
	// TODO set_on_match is used, because its used for motors, and we want
	// the timer-compare-value to reflect the voltage.
	// Should be configured somewhere else.
	setCompareMatchOutputMode(timer, set_on_match);
    630c:	ce 01       	movw	r24, r28
    630e:	63 e0       	ldi	r22, 0x03	; 3
    6310:	70 e0       	ldi	r23, 0x00	; 0
    6312:	0e 94 31 30 	call	0x6062	; 0x6062 <setCompareMatchOutputMode>
}
    6316:	df 91       	pop	r29
    6318:	cf 91       	pop	r28
    631a:	08 95       	ret

0000631c <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    631c:	60 e0       	ldi	r22, 0x00	; 0
    631e:	70 e0       	ldi	r23, 0x00	; 0
    6320:	0e 94 31 30 	call	0x6062	; 0x6062 <setCompareMatchOutputMode>
}
    6324:	08 95       	ret

00006326 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    6326:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    6328:	a0 81       	ld	r26, Z
    632a:	b1 81       	ldd	r27, Z+1	; 0x01
    632c:	8c 91       	ld	r24, X
    632e:	82 ff       	sbrs	r24, 2
    6330:	1c c0       	rjmp	.+56     	; 0x636a <setTimerCompareValue+0x44>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    6332:	9f b7       	in	r25, 0x3f	; 63
		// Use as many significant bits as possible.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    6334:	84 ff       	sbrs	r24, 4
    6336:	06 c0       	rjmp	.+12     	; 0x6344 <setTimerCompareValue+0x1e>
			value = value >> (16 - 9);
    6338:	66 0f       	add	r22, r22
    633a:	67 2f       	mov	r22, r23
    633c:	66 1f       	adc	r22, r22
    633e:	77 0b       	sbc	r23, r23
    6340:	71 95       	neg	r23
    6342:	07 c0       	rjmp	.+14     	; 0x6352 <setTimerCompareValue+0x2c>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    6344:	85 ff       	sbrs	r24, 5
    6346:	05 c0       	rjmp	.+10     	; 0x6352 <setTimerCompareValue+0x2c>
			value = value >> (16 - 10);
    6348:	86 e0       	ldi	r24, 0x06	; 6
    634a:	76 95       	lsr	r23
    634c:	67 95       	ror	r22
    634e:	8a 95       	dec	r24
    6350:	e1 f7       	brne	.-8      	; 0x634a <setTimerCompareValue+0x24>
		}
		cli();
    6352:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    6354:	a2 81       	ldd	r26, Z+2	; 0x02
    6356:	b3 81       	ldd	r27, Z+3	; 0x03
    6358:	11 96       	adiw	r26, 0x01	; 1
    635a:	7c 93       	st	X, r23
    635c:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    635e:	02 80       	ldd	r0, Z+2	; 0x02
    6360:	f3 81       	ldd	r31, Z+3	; 0x03
    6362:	e0 2d       	mov	r30, r0
    6364:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    6366:	9f bf       	out	0x3f, r25	; 63
    6368:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    636a:	02 80       	ldd	r0, Z+2	; 0x02
    636c:	f3 81       	ldd	r31, Z+3	; 0x03
    636e:	e0 2d       	mov	r30, r0
    6370:	70 83       	st	Z, r23
    6372:	08 95       	ret

00006374 <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    6374:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    6376:	a0 81       	ld	r26, Z
    6378:	b1 81       	ldd	r27, Z+1	; 0x01
    637a:	8c 91       	ld	r24, X
    637c:	82 ff       	sbrs	r24, 2
    637e:	1c c0       	rjmp	.+56     	; 0x63b8 <getTimerCompareValue+0x44>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    6380:	8f b7       	in	r24, 0x3f	; 63
		cli();
    6382:	f8 94       	cli
		// Reading OCR-register does not require any particular ordering of reading the bytes.
		result = *((uint16_t*) timer->outputCompareRegister);
    6384:	a2 81       	ldd	r26, Z+2	; 0x02
    6386:	b3 81       	ldd	r27, Z+3	; 0x03
    6388:	2d 91       	ld	r18, X+
    638a:	3c 91       	ld	r19, X
    638c:	11 97       	sbiw	r26, 0x01	; 1
		SREG = sreg; // re-enable interrupts
    638e:	8f bf       	out	0x3f, r24	; 63
		
		// Shift the value back. Non-significant bits are lost.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    6390:	01 90       	ld	r0, Z+
    6392:	f0 81       	ld	r31, Z
    6394:	e0 2d       	mov	r30, r0
    6396:	80 81       	ld	r24, Z
    6398:	84 ff       	sbrs	r24, 4
    639a:	06 c0       	rjmp	.+12     	; 0x63a8 <getTimerCompareValue+0x34>
			result = result << (16 - 9);
    639c:	36 95       	lsr	r19
    639e:	32 2f       	mov	r19, r18
    63a0:	22 27       	eor	r18, r18
    63a2:	37 95       	ror	r19
    63a4:	27 95       	ror	r18
    63a6:	0e c0       	rjmp	.+28     	; 0x63c4 <getTimerCompareValue+0x50>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    63a8:	85 ff       	sbrs	r24, 5
    63aa:	0c c0       	rjmp	.+24     	; 0x63c4 <getTimerCompareValue+0x50>
			result = result << (16 - 10);
    63ac:	46 e0       	ldi	r20, 0x06	; 6
    63ae:	22 0f       	add	r18, r18
    63b0:	33 1f       	adc	r19, r19
    63b2:	4a 95       	dec	r20
    63b4:	e1 f7       	brne	.-8      	; 0x63ae <getTimerCompareValue+0x3a>
    63b6:	06 c0       	rjmp	.+12     	; 0x63c4 <getTimerCompareValue+0x50>
		}
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    63b8:	02 80       	ldd	r0, Z+2	; 0x02
    63ba:	f3 81       	ldd	r31, Z+3	; 0x03
    63bc:	e0 2d       	mov	r30, r0
    63be:	80 81       	ld	r24, Z
    63c0:	38 2f       	mov	r19, r24
    63c2:	20 e0       	ldi	r18, 0x00	; 0
	}
	return result;
}
    63c4:	c9 01       	movw	r24, r18
    63c6:	08 95       	ret

000063c8 <HARDWARE_RESET>:
#include "../anton_std.h"
#include "hardware_reset.h"
#include <avr/wdt.h>

void HARDWARE_RESET() {
	cli();
    63c8:	f8 94       	cli
	// Clear this bit to enable WDE. Should already be 0, but make sure.
	MCUSR &= ~_BV(WDRF);
    63ca:	84 b7       	in	r24, 0x34	; 52
    63cc:	87 7f       	andi	r24, 0xF7	; 247
    63ce:	84 bf       	out	0x34, r24	; 52
	wdt_enable(WDTO_15MS); // Shortest possilbe value.
    63d0:	28 e0       	ldi	r18, 0x08	; 8
    63d2:	88 e1       	ldi	r24, 0x18	; 24
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	0f b6       	in	r0, 0x3f	; 63
    63d8:	f8 94       	cli
    63da:	a8 95       	wdr
    63dc:	80 93 60 00 	sts	0x0060, r24
    63e0:	0f be       	out	0x3f, r0	; 63
    63e2:	20 93 60 00 	sts	0x0060, r18
    63e6:	ff cf       	rjmp	.-2      	; 0x63e6 <HARDWARE_RESET+0x1e>

000063e8 <processor_idle>:
#include "idle.h"
#include <avr/sleep.h>
#include "../anton_std.h"

void processor_idle() {
	sleep_enable();
    63e8:	83 b7       	in	r24, 0x33	; 51
    63ea:	81 60       	ori	r24, 0x01	; 1
    63ec:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
    63ee:	83 b7       	in	r24, 0x33	; 51
    63f0:	81 7f       	andi	r24, 0xF1	; 241
    63f2:	83 bf       	out	0x33, r24	; 51
	sei(); // Just in case, if this is called form an ISR
    63f4:	78 94       	sei
	sleep_cpu();
    63f6:	88 95       	sleep
}
    63f8:	08 95       	ret

000063fa <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
    63fa:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <processor_idle>
    63fe:	fd cf       	rjmp	.-6      	; 0x63fa <processor_loop_idle>

00006400 <__udivmodhi4>:
    6400:	aa 1b       	sub	r26, r26
    6402:	bb 1b       	sub	r27, r27
    6404:	51 e1       	ldi	r21, 0x11	; 17
    6406:	07 c0       	rjmp	.+14     	; 0x6416 <__udivmodhi4_ep>

00006408 <__udivmodhi4_loop>:
    6408:	aa 1f       	adc	r26, r26
    640a:	bb 1f       	adc	r27, r27
    640c:	a6 17       	cp	r26, r22
    640e:	b7 07       	cpc	r27, r23
    6410:	10 f0       	brcs	.+4      	; 0x6416 <__udivmodhi4_ep>
    6412:	a6 1b       	sub	r26, r22
    6414:	b7 0b       	sbc	r27, r23

00006416 <__udivmodhi4_ep>:
    6416:	88 1f       	adc	r24, r24
    6418:	99 1f       	adc	r25, r25
    641a:	5a 95       	dec	r21
    641c:	a9 f7       	brne	.-22     	; 0x6408 <__udivmodhi4_loop>
    641e:	80 95       	com	r24
    6420:	90 95       	com	r25
    6422:	bc 01       	movw	r22, r24
    6424:	cd 01       	movw	r24, r26
    6426:	08 95       	ret

00006428 <__divmodhi4>:
    6428:	97 fb       	bst	r25, 7
    642a:	09 2e       	mov	r0, r25
    642c:	07 26       	eor	r0, r23
    642e:	0a d0       	rcall	.+20     	; 0x6444 <__divmodhi4_neg1>
    6430:	77 fd       	sbrc	r23, 7
    6432:	04 d0       	rcall	.+8      	; 0x643c <__divmodhi4_neg2>
    6434:	e5 df       	rcall	.-54     	; 0x6400 <__udivmodhi4>
    6436:	06 d0       	rcall	.+12     	; 0x6444 <__divmodhi4_neg1>
    6438:	00 20       	and	r0, r0
    643a:	1a f4       	brpl	.+6      	; 0x6442 <__divmodhi4_exit>

0000643c <__divmodhi4_neg2>:
    643c:	70 95       	com	r23
    643e:	61 95       	neg	r22
    6440:	7f 4f       	sbci	r23, 0xFF	; 255

00006442 <__divmodhi4_exit>:
    6442:	08 95       	ret

00006444 <__divmodhi4_neg1>:
    6444:	f6 f7       	brtc	.-4      	; 0x6442 <__divmodhi4_exit>
    6446:	90 95       	com	r25
    6448:	81 95       	neg	r24
    644a:	9f 4f       	sbci	r25, 0xFF	; 255
    644c:	08 95       	ret

0000644e <malloc>:
    644e:	cf 93       	push	r28
    6450:	df 93       	push	r29
    6452:	82 30       	cpi	r24, 0x02	; 2
    6454:	91 05       	cpc	r25, r1
    6456:	10 f4       	brcc	.+4      	; 0x645c <malloc+0xe>
    6458:	82 e0       	ldi	r24, 0x02	; 2
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	e0 91 e5 06 	lds	r30, 0x06E5
    6460:	f0 91 e6 06 	lds	r31, 0x06E6
    6464:	40 e0       	ldi	r20, 0x00	; 0
    6466:	50 e0       	ldi	r21, 0x00	; 0
    6468:	20 e0       	ldi	r18, 0x00	; 0
    646a:	30 e0       	ldi	r19, 0x00	; 0
    646c:	26 c0       	rjmp	.+76     	; 0x64ba <malloc+0x6c>
    646e:	60 81       	ld	r22, Z
    6470:	71 81       	ldd	r23, Z+1	; 0x01
    6472:	68 17       	cp	r22, r24
    6474:	79 07       	cpc	r23, r25
    6476:	e0 f0       	brcs	.+56     	; 0x64b0 <malloc+0x62>
    6478:	68 17       	cp	r22, r24
    647a:	79 07       	cpc	r23, r25
    647c:	81 f4       	brne	.+32     	; 0x649e <malloc+0x50>
    647e:	82 81       	ldd	r24, Z+2	; 0x02
    6480:	93 81       	ldd	r25, Z+3	; 0x03
    6482:	21 15       	cp	r18, r1
    6484:	31 05       	cpc	r19, r1
    6486:	31 f0       	breq	.+12     	; 0x6494 <malloc+0x46>
    6488:	d9 01       	movw	r26, r18
    648a:	13 96       	adiw	r26, 0x03	; 3
    648c:	9c 93       	st	X, r25
    648e:	8e 93       	st	-X, r24
    6490:	12 97       	sbiw	r26, 0x02	; 2
    6492:	2b c0       	rjmp	.+86     	; 0x64ea <malloc+0x9c>
    6494:	90 93 e6 06 	sts	0x06E6, r25
    6498:	80 93 e5 06 	sts	0x06E5, r24
    649c:	26 c0       	rjmp	.+76     	; 0x64ea <malloc+0x9c>
    649e:	41 15       	cp	r20, r1
    64a0:	51 05       	cpc	r21, r1
    64a2:	19 f0       	breq	.+6      	; 0x64aa <malloc+0x5c>
    64a4:	64 17       	cp	r22, r20
    64a6:	75 07       	cpc	r23, r21
    64a8:	18 f4       	brcc	.+6      	; 0x64b0 <malloc+0x62>
    64aa:	ab 01       	movw	r20, r22
    64ac:	e9 01       	movw	r28, r18
    64ae:	df 01       	movw	r26, r30
    64b0:	9f 01       	movw	r18, r30
    64b2:	72 81       	ldd	r23, Z+2	; 0x02
    64b4:	63 81       	ldd	r22, Z+3	; 0x03
    64b6:	e7 2f       	mov	r30, r23
    64b8:	f6 2f       	mov	r31, r22
    64ba:	30 97       	sbiw	r30, 0x00	; 0
    64bc:	c1 f6       	brne	.-80     	; 0x646e <malloc+0x20>
    64be:	41 15       	cp	r20, r1
    64c0:	51 05       	cpc	r21, r1
    64c2:	01 f1       	breq	.+64     	; 0x6504 <malloc+0xb6>
    64c4:	48 1b       	sub	r20, r24
    64c6:	59 0b       	sbc	r21, r25
    64c8:	44 30       	cpi	r20, 0x04	; 4
    64ca:	51 05       	cpc	r21, r1
    64cc:	80 f4       	brcc	.+32     	; 0x64ee <malloc+0xa0>
    64ce:	12 96       	adiw	r26, 0x02	; 2
    64d0:	8d 91       	ld	r24, X+
    64d2:	9c 91       	ld	r25, X
    64d4:	13 97       	sbiw	r26, 0x03	; 3
    64d6:	20 97       	sbiw	r28, 0x00	; 0
    64d8:	19 f0       	breq	.+6      	; 0x64e0 <malloc+0x92>
    64da:	9b 83       	std	Y+3, r25	; 0x03
    64dc:	8a 83       	std	Y+2, r24	; 0x02
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <malloc+0x9a>
    64e0:	90 93 e6 06 	sts	0x06E6, r25
    64e4:	80 93 e5 06 	sts	0x06E5, r24
    64e8:	fd 01       	movw	r30, r26
    64ea:	32 96       	adiw	r30, 0x02	; 2
    64ec:	46 c0       	rjmp	.+140    	; 0x657a <malloc+0x12c>
    64ee:	fd 01       	movw	r30, r26
    64f0:	e4 0f       	add	r30, r20
    64f2:	f5 1f       	adc	r31, r21
    64f4:	81 93       	st	Z+, r24
    64f6:	91 93       	st	Z+, r25
    64f8:	42 50       	subi	r20, 0x02	; 2
    64fa:	50 40       	sbci	r21, 0x00	; 0
    64fc:	11 96       	adiw	r26, 0x01	; 1
    64fe:	5c 93       	st	X, r21
    6500:	4e 93       	st	-X, r20
    6502:	3b c0       	rjmp	.+118    	; 0x657a <malloc+0x12c>
    6504:	20 91 e3 06 	lds	r18, 0x06E3
    6508:	30 91 e4 06 	lds	r19, 0x06E4
    650c:	21 15       	cp	r18, r1
    650e:	31 05       	cpc	r19, r1
    6510:	41 f4       	brne	.+16     	; 0x6522 <malloc+0xd4>
    6512:	20 91 90 03 	lds	r18, 0x0390
    6516:	30 91 91 03 	lds	r19, 0x0391
    651a:	30 93 e4 06 	sts	0x06E4, r19
    651e:	20 93 e3 06 	sts	0x06E3, r18
    6522:	20 91 92 03 	lds	r18, 0x0392
    6526:	30 91 93 03 	lds	r19, 0x0393
    652a:	21 15       	cp	r18, r1
    652c:	31 05       	cpc	r19, r1
    652e:	41 f4       	brne	.+16     	; 0x6540 <malloc+0xf2>
    6530:	2d b7       	in	r18, 0x3d	; 61
    6532:	3e b7       	in	r19, 0x3e	; 62
    6534:	40 91 8e 03 	lds	r20, 0x038E
    6538:	50 91 8f 03 	lds	r21, 0x038F
    653c:	24 1b       	sub	r18, r20
    653e:	35 0b       	sbc	r19, r21
    6540:	e0 91 e3 06 	lds	r30, 0x06E3
    6544:	f0 91 e4 06 	lds	r31, 0x06E4
    6548:	e2 17       	cp	r30, r18
    654a:	f3 07       	cpc	r31, r19
    654c:	a0 f4       	brcc	.+40     	; 0x6576 <malloc+0x128>
    654e:	2e 1b       	sub	r18, r30
    6550:	3f 0b       	sbc	r19, r31
    6552:	28 17       	cp	r18, r24
    6554:	39 07       	cpc	r19, r25
    6556:	78 f0       	brcs	.+30     	; 0x6576 <malloc+0x128>
    6558:	ac 01       	movw	r20, r24
    655a:	4e 5f       	subi	r20, 0xFE	; 254
    655c:	5f 4f       	sbci	r21, 0xFF	; 255
    655e:	24 17       	cp	r18, r20
    6560:	35 07       	cpc	r19, r21
    6562:	48 f0       	brcs	.+18     	; 0x6576 <malloc+0x128>
    6564:	4e 0f       	add	r20, r30
    6566:	5f 1f       	adc	r21, r31
    6568:	50 93 e4 06 	sts	0x06E4, r21
    656c:	40 93 e3 06 	sts	0x06E3, r20
    6570:	81 93       	st	Z+, r24
    6572:	91 93       	st	Z+, r25
    6574:	02 c0       	rjmp	.+4      	; 0x657a <malloc+0x12c>
    6576:	e0 e0       	ldi	r30, 0x00	; 0
    6578:	f0 e0       	ldi	r31, 0x00	; 0
    657a:	cf 01       	movw	r24, r30
    657c:	df 91       	pop	r29
    657e:	cf 91       	pop	r28
    6580:	08 95       	ret

00006582 <free>:
    6582:	cf 93       	push	r28
    6584:	df 93       	push	r29
    6586:	00 97       	sbiw	r24, 0x00	; 0
    6588:	09 f4       	brne	.+2      	; 0x658c <free+0xa>
    658a:	91 c0       	rjmp	.+290    	; 0x66ae <free+0x12c>
    658c:	fc 01       	movw	r30, r24
    658e:	32 97       	sbiw	r30, 0x02	; 2
    6590:	13 82       	std	Z+3, r1	; 0x03
    6592:	12 82       	std	Z+2, r1	; 0x02
    6594:	60 91 e5 06 	lds	r22, 0x06E5
    6598:	70 91 e6 06 	lds	r23, 0x06E6
    659c:	61 15       	cp	r22, r1
    659e:	71 05       	cpc	r23, r1
    65a0:	81 f4       	brne	.+32     	; 0x65c2 <free+0x40>
    65a2:	20 81       	ld	r18, Z
    65a4:	31 81       	ldd	r19, Z+1	; 0x01
    65a6:	28 0f       	add	r18, r24
    65a8:	39 1f       	adc	r19, r25
    65aa:	80 91 e3 06 	lds	r24, 0x06E3
    65ae:	90 91 e4 06 	lds	r25, 0x06E4
    65b2:	82 17       	cp	r24, r18
    65b4:	93 07       	cpc	r25, r19
    65b6:	99 f5       	brne	.+102    	; 0x661e <free+0x9c>
    65b8:	f0 93 e4 06 	sts	0x06E4, r31
    65bc:	e0 93 e3 06 	sts	0x06E3, r30
    65c0:	76 c0       	rjmp	.+236    	; 0x66ae <free+0x12c>
    65c2:	db 01       	movw	r26, r22
    65c4:	80 e0       	ldi	r24, 0x00	; 0
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	02 c0       	rjmp	.+4      	; 0x65ce <free+0x4c>
    65ca:	cd 01       	movw	r24, r26
    65cc:	d9 01       	movw	r26, r18
    65ce:	ae 17       	cp	r26, r30
    65d0:	bf 07       	cpc	r27, r31
    65d2:	48 f4       	brcc	.+18     	; 0x65e6 <free+0x64>
    65d4:	12 96       	adiw	r26, 0x02	; 2
    65d6:	2d 91       	ld	r18, X+
    65d8:	3c 91       	ld	r19, X
    65da:	13 97       	sbiw	r26, 0x03	; 3
    65dc:	21 15       	cp	r18, r1
    65de:	31 05       	cpc	r19, r1
    65e0:	a1 f7       	brne	.-24     	; 0x65ca <free+0x48>
    65e2:	cd 01       	movw	r24, r26
    65e4:	21 c0       	rjmp	.+66     	; 0x6628 <free+0xa6>
    65e6:	b3 83       	std	Z+3, r27	; 0x03
    65e8:	a2 83       	std	Z+2, r26	; 0x02
    65ea:	ef 01       	movw	r28, r30
    65ec:	49 91       	ld	r20, Y+
    65ee:	59 91       	ld	r21, Y+
    65f0:	9e 01       	movw	r18, r28
    65f2:	24 0f       	add	r18, r20
    65f4:	35 1f       	adc	r19, r21
    65f6:	a2 17       	cp	r26, r18
    65f8:	b3 07       	cpc	r27, r19
    65fa:	79 f4       	brne	.+30     	; 0x661a <free+0x98>
    65fc:	2d 91       	ld	r18, X+
    65fe:	3c 91       	ld	r19, X
    6600:	11 97       	sbiw	r26, 0x01	; 1
    6602:	24 0f       	add	r18, r20
    6604:	35 1f       	adc	r19, r21
    6606:	2e 5f       	subi	r18, 0xFE	; 254
    6608:	3f 4f       	sbci	r19, 0xFF	; 255
    660a:	31 83       	std	Z+1, r19	; 0x01
    660c:	20 83       	st	Z, r18
    660e:	12 96       	adiw	r26, 0x02	; 2
    6610:	2d 91       	ld	r18, X+
    6612:	3c 91       	ld	r19, X
    6614:	13 97       	sbiw	r26, 0x03	; 3
    6616:	33 83       	std	Z+3, r19	; 0x03
    6618:	22 83       	std	Z+2, r18	; 0x02
    661a:	00 97       	sbiw	r24, 0x00	; 0
    661c:	29 f4       	brne	.+10     	; 0x6628 <free+0xa6>
    661e:	f0 93 e6 06 	sts	0x06E6, r31
    6622:	e0 93 e5 06 	sts	0x06E5, r30
    6626:	43 c0       	rjmp	.+134    	; 0x66ae <free+0x12c>
    6628:	dc 01       	movw	r26, r24
    662a:	13 96       	adiw	r26, 0x03	; 3
    662c:	fc 93       	st	X, r31
    662e:	ee 93       	st	-X, r30
    6630:	12 97       	sbiw	r26, 0x02	; 2
    6632:	4d 91       	ld	r20, X+
    6634:	5d 91       	ld	r21, X+
    6636:	a4 0f       	add	r26, r20
    6638:	b5 1f       	adc	r27, r21
    663a:	ea 17       	cp	r30, r26
    663c:	fb 07       	cpc	r31, r27
    663e:	69 f4       	brne	.+26     	; 0x665a <free+0xd8>
    6640:	20 81       	ld	r18, Z
    6642:	31 81       	ldd	r19, Z+1	; 0x01
    6644:	24 0f       	add	r18, r20
    6646:	35 1f       	adc	r19, r21
    6648:	2e 5f       	subi	r18, 0xFE	; 254
    664a:	3f 4f       	sbci	r19, 0xFF	; 255
    664c:	ec 01       	movw	r28, r24
    664e:	39 83       	std	Y+1, r19	; 0x01
    6650:	28 83       	st	Y, r18
    6652:	22 81       	ldd	r18, Z+2	; 0x02
    6654:	33 81       	ldd	r19, Z+3	; 0x03
    6656:	3b 83       	std	Y+3, r19	; 0x03
    6658:	2a 83       	std	Y+2, r18	; 0x02
    665a:	e0 e0       	ldi	r30, 0x00	; 0
    665c:	f0 e0       	ldi	r31, 0x00	; 0
    665e:	02 c0       	rjmp	.+4      	; 0x6664 <free+0xe2>
    6660:	fb 01       	movw	r30, r22
    6662:	bc 01       	movw	r22, r24
    6664:	db 01       	movw	r26, r22
    6666:	12 96       	adiw	r26, 0x02	; 2
    6668:	8d 91       	ld	r24, X+
    666a:	9c 91       	ld	r25, X
    666c:	13 97       	sbiw	r26, 0x03	; 3
    666e:	00 97       	sbiw	r24, 0x00	; 0
    6670:	b9 f7       	brne	.-18     	; 0x6660 <free+0xde>
    6672:	9b 01       	movw	r18, r22
    6674:	2e 5f       	subi	r18, 0xFE	; 254
    6676:	3f 4f       	sbci	r19, 0xFF	; 255
    6678:	8d 91       	ld	r24, X+
    667a:	9c 91       	ld	r25, X
    667c:	11 97       	sbiw	r26, 0x01	; 1
    667e:	82 0f       	add	r24, r18
    6680:	93 1f       	adc	r25, r19
    6682:	40 91 e3 06 	lds	r20, 0x06E3
    6686:	50 91 e4 06 	lds	r21, 0x06E4
    668a:	48 17       	cp	r20, r24
    668c:	59 07       	cpc	r21, r25
    668e:	79 f4       	brne	.+30     	; 0x66ae <free+0x12c>
    6690:	30 97       	sbiw	r30, 0x00	; 0
    6692:	29 f4       	brne	.+10     	; 0x669e <free+0x11c>
    6694:	10 92 e6 06 	sts	0x06E6, r1
    6698:	10 92 e5 06 	sts	0x06E5, r1
    669c:	02 c0       	rjmp	.+4      	; 0x66a2 <free+0x120>
    669e:	13 82       	std	Z+3, r1	; 0x03
    66a0:	12 82       	std	Z+2, r1	; 0x02
    66a2:	22 50       	subi	r18, 0x02	; 2
    66a4:	30 40       	sbci	r19, 0x00	; 0
    66a6:	30 93 e4 06 	sts	0x06E4, r19
    66aa:	20 93 e3 06 	sts	0x06E3, r18
    66ae:	df 91       	pop	r29
    66b0:	cf 91       	pop	r28
    66b2:	08 95       	ret

000066b4 <memcmp>:
    66b4:	fb 01       	movw	r30, r22
    66b6:	dc 01       	movw	r26, r24
    66b8:	04 c0       	rjmp	.+8      	; 0x66c2 <memcmp+0xe>
    66ba:	8d 91       	ld	r24, X+
    66bc:	01 90       	ld	r0, Z+
    66be:	80 19       	sub	r24, r0
    66c0:	21 f4       	brne	.+8      	; 0x66ca <memcmp+0x16>
    66c2:	41 50       	subi	r20, 0x01	; 1
    66c4:	50 40       	sbci	r21, 0x00	; 0
    66c6:	c8 f7       	brcc	.-14     	; 0x66ba <memcmp+0x6>
    66c8:	88 1b       	sub	r24, r24
    66ca:	99 0b       	sbc	r25, r25
    66cc:	08 95       	ret

000066ce <memcpy>:
    66ce:	fb 01       	movw	r30, r22
    66d0:	dc 01       	movw	r26, r24
    66d2:	02 c0       	rjmp	.+4      	; 0x66d8 <memcpy+0xa>
    66d4:	01 90       	ld	r0, Z+
    66d6:	0d 92       	st	X+, r0
    66d8:	41 50       	subi	r20, 0x01	; 1
    66da:	50 40       	sbci	r21, 0x00	; 0
    66dc:	d8 f7       	brcc	.-10     	; 0x66d4 <memcpy+0x6>
    66de:	08 95       	ret

000066e0 <memset>:
    66e0:	dc 01       	movw	r26, r24
    66e2:	01 c0       	rjmp	.+2      	; 0x66e6 <memset+0x6>
    66e4:	6d 93       	st	X+, r22
    66e6:	41 50       	subi	r20, 0x01	; 1
    66e8:	50 40       	sbci	r21, 0x00	; 0
    66ea:	e0 f7       	brcc	.-8      	; 0x66e4 <memset+0x4>
    66ec:	08 95       	ret

000066ee <MainProcessEnd>:
#include "../misc/idle.h"

// This makes the initial main()-process idle when finishing (like all other processes).
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	processor_loop_idle();
    66ee:	0e 94 fd 31 	call	0x63fa	; 0x63fa <processor_loop_idle>
}
    66f2:	08 95       	ret
    66f4:	f8 94       	cli

000066f6 <__stop_program>:
    66f6:	ff cf       	rjmp	.-2      	; 0x66f6 <__stop_program>
