
Main-Tank-MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00001ba8  00001c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000189  008001f8  008001f8  00001d34  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00001d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  0000246c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f8  00000000  00000000  00002577  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000cf3  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003203  00000000  00000000  00003562  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c0d  00000000  00000000  00006765  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004408  00000000  00000000  00007372  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000740  00000000  00000000  0000b77c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000140a  00000000  00000000  0000bebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b15  00000000  00000000  0000d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000486b9  00000000  00000000  0000eddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000585  00000000  00000000  00057494  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000290  00000000  00000000  00057a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_26>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      80:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_32>
      84:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ea       	ldi	r30, 0xA8	; 168
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3f       	cpi	r26, 0xF8	; 248
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a8 ef       	ldi	r26, 0xF8	; 248
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 38       	cpi	r26, 0x81	; 129
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
	MCUSR = 0;
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 df 00 	call	0x1be	; 0x1be <init_ports_m1284P>

000000ca <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      ca:	0e 94 24 02 	call	0x448	; 0x448 <init_timer_m1284P>

000000ce <init_tank_motors_kernel_init>:
	// TODO assign correct pins, correct motor-properties
	
	INIT_2DirPins_MOTOR(LeftMotor, MOTOR_NORMAL, PinA1, Timer1A, PinA1)
	INIT_2DirPins_MOTOR(RightMotor, MOTOR_NORMAL, PinA1, Timer1B, PinA1)
}
KERNEL_INIT(init_tank_motors)
      ce:	0e 94 b6 02 	call	0x56c	; 0x56c <init_tank_motors>

000000d2 <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      d2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <init_twi>

000000d6 <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      d6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <init_idle_scheduler>

000000da <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 2500);
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      da:	0e 94 32 06 	call	0xc64	; 0xc64 <init_scheduler>

000000de <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      de:	0e 94 dd 06 	call	0xdba	; 0xdba <init_kernel>
      e2:	0e 94 47 07 	call	0xe8e	; 0xe8e <main>
      e6:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <MainProcessEnd>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <twi_stop>:
#define twi_send(data) TWDR = data; twi_continue()
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
      ee:	85 ed       	ldi	r24, 0xD5	; 213
      f0:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
      f4:	80 91 00 01 	lds	r24, 0x0100
      f8:	90 91 01 01 	lds	r25, 0x0101
      fc:	a0 91 02 01 	lds	r26, 0x0102
     100:	b0 91 03 01 	lds	r27, 0x0103
     104:	80 93 ea 02 	sts	0x02EA, r24
     108:	90 93 eb 02 	sts	0x02EB, r25
     10c:	a0 93 ec 02 	sts	0x02EC, r26
     110:	b0 93 ed 02 	sts	0x02ED, r27
	#else
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
     114:	10 92 ef 02 	sts	0x02EF, r1
     118:	10 92 ee 02 	sts	0x02EE, r1
}
     11c:	08 95       	ret

0000011e <twi_end>:
	}
}

static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
     11e:	85 ec       	ldi	r24, 0xC5	; 197
     120:	80 93 bc 00 	sts	0x00BC, r24
		twi_buffer = twi_defaultSlaveBuffer;
     124:	80 91 00 01 	lds	r24, 0x0100
     128:	90 91 01 01 	lds	r25, 0x0101
     12c:	a0 91 02 01 	lds	r26, 0x0102
     130:	b0 91 03 01 	lds	r27, 0x0103
     134:	80 93 ea 02 	sts	0x02EA, r24
     138:	90 93 eb 02 	sts	0x02EB, r25
     13c:	a0 93 ec 02 	sts	0x02EC, r26
     140:	b0 93 ed 02 	sts	0x02ED, r27
	#else
		twi_base;
	#endif
	twi_running = FALSE;
     144:	10 92 ef 02 	sts	0x02EF, r1
     148:	10 92 ee 02 	sts	0x02EE, r1
}
     14c:	08 95       	ret

0000014e <twi_receive_byte>:
	next_twi_operation();
}

static inline void twi_receive_byte() {
	// received data-byte. Read into receive-twi_buffer, acknowledge, if more bytes expected.
	twi_buffer.data[alreadyHandled++] = TWDR;
     14e:	20 91 ba 02 	lds	r18, 0x02BA
     152:	30 91 bb 02 	lds	r19, 0x02BB
     156:	80 91 bb 00 	lds	r24, 0x00BB
     15a:	e0 91 ea 02 	lds	r30, 0x02EA
     15e:	f0 91 eb 02 	lds	r31, 0x02EB
     162:	e2 0f       	add	r30, r18
     164:	f3 1f       	adc	r31, r19
     166:	80 83       	st	Z, r24
     168:	2f 5f       	subi	r18, 0xFF	; 255
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	30 93 bb 02 	sts	0x02BB, r19
     170:	20 93 ba 02 	sts	0x02BA, r18
	if (alreadyHandled < twi_buffer.size - 1) {
     174:	80 91 ec 02 	lds	r24, 0x02EC
     178:	90 91 ed 02 	lds	r25, 0x02ED
     17c:	01 97       	sbiw	r24, 0x01	; 1
     17e:	28 17       	cp	r18, r24
     180:	39 07       	cpc	r19, r25
     182:	10 f4       	brcc	.+4      	; 0x188 <twi_receive_byte+0x3a>
		twi_ack(); // Still more than one byte to go.
     184:	85 ec       	ldi	r24, 0xC5	; 197
     186:	01 c0       	rjmp	.+2      	; 0x18a <twi_receive_byte+0x3c>
	} else {
		twi_continue(); // Want to receive one more byte. Next byte will get NOT ACK.
     188:	85 e8       	ldi	r24, 0x85	; 133
     18a:	80 93 bc 00 	sts	0x00BC, r24
     18e:	08 95       	ret

00000190 <twi_init_receive>:
	}
}

static inline void twi_init_receive() {
	if (twi_buffer.size > 0) {
     190:	80 91 ec 02 	lds	r24, 0x02EC
     194:	90 91 ed 02 	lds	r25, 0x02ED
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	11 f0       	breq	.+4      	; 0x1a0 <twi_init_receive+0x10>
		twi_ack(); // Acknowledge, if want to receive at least one byte
     19c:	85 ec       	ldi	r24, 0xC5	; 197
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <twi_init_receive+0x12>
	} else {
		twi_continue();
     1a0:	85 e8       	ldi	r24, 0x85	; 133
     1a2:	80 93 bc 00 	sts	0x00BC, r24
     1a6:	08 95       	ret

000001a8 <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
     1a8:	0e 94 b9 08 	call	0x1172	; 0x1172 <processor_loop_idle>
}
     1ac:	08 95       	ret

000001ae <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     1ae:	84 b7       	in	r24, 0x34	; 52
     1b0:	80 93 08 02 	sts	0x0208, r24
	MCUSR = 0;
     1b4:	14 be       	out	0x34, r1	; 52
}
     1b6:	08 95       	ret

000001b8 <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     1b8:	80 91 08 02 	lds	r24, 0x0208
     1bc:	08 95       	ret

000001be <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1be:	ac ed       	ldi	r26, 0xDC	; 220
     1c0:	b2 e0       	ldi	r27, 0x02	; 2
     1c2:	e4 ee       	ldi	r30, 0xE4	; 228
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	01 90       	ld	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	81 50       	subi	r24, 0x01	; 1
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <init_ports_m1284P+0xa>
     1d0:	a9 ed       	ldi	r26, 0xD9	; 217
     1d2:	b2 e0       	ldi	r27, 0x02	; 2
     1d4:	e1 ee       	ldi	r30, 0xE1	; 225
     1d6:	f1 e0       	ldi	r31, 0x01	; 1
     1d8:	83 e0       	ldi	r24, 0x03	; 3
     1da:	01 90       	ld	r0, Z+
     1dc:	0d 92       	st	X+, r0
     1de:	81 50       	subi	r24, 0x01	; 1
     1e0:	e1 f7       	brne	.-8      	; 0x1da <init_ports_m1284P+0x1c>
     1e2:	ae e4       	ldi	r26, 0x4E	; 78
     1e4:	b3 e0       	ldi	r27, 0x03	; 3
     1e6:	ee ed       	ldi	r30, 0xDE	; 222
     1e8:	f1 e0       	ldi	r31, 0x01	; 1
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	01 90       	ld	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	81 50       	subi	r24, 0x01	; 1
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <init_ports_m1284P+0x2e>
     1f4:	a4 eb       	ldi	r26, 0xB4	; 180
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	eb ed       	ldi	r30, 0xDB	; 219
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	83 e0       	ldi	r24, 0x03	; 3
     1fe:	01 90       	ld	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	81 50       	subi	r24, 0x01	; 1
     204:	e1 f7       	brne	.-8      	; 0x1fe <init_ports_m1284P+0x40>
     206:	a7 ec       	ldi	r26, 0xC7	; 199
     208:	b2 e0       	ldi	r27, 0x02	; 2
     20a:	e8 ed       	ldi	r30, 0xD8	; 216
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	01 90       	ld	r0, Z+
     212:	0d 92       	st	X+, r0
     214:	81 50       	subi	r24, 0x01	; 1
     216:	e1 f7       	brne	.-8      	; 0x210 <init_ports_m1284P+0x52>
     218:	ae e3       	ldi	r26, 0x3E	; 62
     21a:	b2 e0       	ldi	r27, 0x02	; 2
     21c:	e5 ed       	ldi	r30, 0xD5	; 213
     21e:	f1 e0       	ldi	r31, 0x01	; 1
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	01 90       	ld	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	81 50       	subi	r24, 0x01	; 1
     228:	e1 f7       	brne	.-8      	; 0x222 <init_ports_m1284P+0x64>
     22a:	aa ea       	ldi	r26, 0xAA	; 170
     22c:	b2 e0       	ldi	r27, 0x02	; 2
     22e:	e2 ed       	ldi	r30, 0xD2	; 210
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	01 90       	ld	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	e1 f7       	brne	.-8      	; 0x234 <init_ports_m1284P+0x76>
     23c:	ac e2       	ldi	r26, 0x2C	; 44
     23e:	b3 e0       	ldi	r27, 0x03	; 3
     240:	ef ec       	ldi	r30, 0xCF	; 207
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	01 90       	ld	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	81 50       	subi	r24, 0x01	; 1
     24c:	e1 f7       	brne	.-8      	; 0x246 <init_ports_m1284P+0x88>
     24e:	a7 ee       	ldi	r26, 0xE7	; 231
     250:	b2 e0       	ldi	r27, 0x02	; 2
     252:	ec ec       	ldi	r30, 0xCC	; 204
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	01 90       	ld	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	81 50       	subi	r24, 0x01	; 1
     25e:	e1 f7       	brne	.-8      	; 0x258 <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     260:	a4 e5       	ldi	r26, 0x54	; 84
     262:	b3 e0       	ldi	r27, 0x03	; 3
     264:	e6 ec       	ldi	r30, 0xC6	; 198
     266:	f1 e0       	ldi	r31, 0x01	; 1
     268:	86 e0       	ldi	r24, 0x06	; 6
     26a:	01 90       	ld	r0, Z+
     26c:	0d 92       	st	X+, r0
     26e:	81 50       	subi	r24, 0x01	; 1
     270:	e1 f7       	brne	.-8      	; 0x26a <init_ports_m1284P+0xac>
     272:	a0 ed       	ldi	r26, 0xD0	; 208
     274:	b2 e0       	ldi	r27, 0x02	; 2
     276:	e3 ec       	ldi	r30, 0xC3	; 195
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	81 50       	subi	r24, 0x01	; 1
     282:	e1 f7       	brne	.-8      	; 0x27c <init_ports_m1284P+0xbe>
     284:	a1 e5       	ldi	r26, 0x51	; 81
     286:	b3 e0       	ldi	r27, 0x03	; 3
     288:	e0 ec       	ldi	r30, 0xC0	; 192
     28a:	f1 e0       	ldi	r31, 0x01	; 1
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	01 90       	ld	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	81 50       	subi	r24, 0x01	; 1
     294:	e1 f7       	brne	.-8      	; 0x28e <init_ports_m1284P+0xd0>
     296:	a7 e2       	ldi	r26, 0x27	; 39
     298:	b2 e0       	ldi	r27, 0x02	; 2
     29a:	ed eb       	ldi	r30, 0xBD	; 189
     29c:	f1 e0       	ldi	r31, 0x01	; 1
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	01 90       	ld	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	81 50       	subi	r24, 0x01	; 1
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <init_ports_m1284P+0xe2>
     2a8:	a2 ee       	ldi	r26, 0xE2	; 226
     2aa:	b2 e0       	ldi	r27, 0x02	; 2
     2ac:	ea eb       	ldi	r30, 0xBA	; 186
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	01 90       	ld	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	81 50       	subi	r24, 0x01	; 1
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <init_ports_m1284P+0xf4>
     2ba:	a9 ef       	ldi	r26, 0xF9	; 249
     2bc:	b2 e0       	ldi	r27, 0x02	; 2
     2be:	e7 eb       	ldi	r30, 0xB7	; 183
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	01 90       	ld	r0, Z+
     2c6:	0d 92       	st	X+, r0
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <init_ports_m1284P+0x106>
     2cc:	a9 e9       	ldi	r26, 0x99	; 153
     2ce:	b2 e0       	ldi	r27, 0x02	; 2
     2d0:	e4 eb       	ldi	r30, 0xB4	; 180
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	81 50       	subi	r24, 0x01	; 1
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <init_ports_m1284P+0x118>
     2de:	aa e2       	ldi	r26, 0x2A	; 42
     2e0:	b2 e0       	ldi	r27, 0x02	; 2
     2e2:	e1 eb       	ldi	r30, 0xB1	; 177
     2e4:	f1 e0       	ldi	r31, 0x01	; 1
     2e6:	83 e0       	ldi	r24, 0x03	; 3
     2e8:	01 90       	ld	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	81 50       	subi	r24, 0x01	; 1
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <init_ports_m1284P+0x12a>
     2f0:	a6 e9       	ldi	r26, 0x96	; 150
     2f2:	b2 e0       	ldi	r27, 0x02	; 2
     2f4:	ee ea       	ldi	r30, 0xAE	; 174
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	01 90       	ld	r0, Z+
     2fc:	0d 92       	st	X+, r0
     2fe:	81 50       	subi	r24, 0x01	; 1
     300:	e1 f7       	brne	.-8      	; 0x2fa <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     302:	a3 ed       	ldi	r26, 0xD3	; 211
     304:	b2 e0       	ldi	r27, 0x02	; 2
     306:	e8 ea       	ldi	r30, 0xA8	; 168
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	86 e0       	ldi	r24, 0x06	; 6
     30c:	01 90       	ld	r0, Z+
     30e:	0d 92       	st	X+, r0
     310:	81 50       	subi	r24, 0x01	; 1
     312:	e1 f7       	brne	.-8      	; 0x30c <init_ports_m1284P+0x14e>
     314:	ab e0       	ldi	r26, 0x0B	; 11
     316:	b3 e0       	ldi	r27, 0x03	; 3
     318:	e5 ea       	ldi	r30, 0xA5	; 165
     31a:	f1 e0       	ldi	r31, 0x01	; 1
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	01 90       	ld	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	81 50       	subi	r24, 0x01	; 1
     324:	e1 f7       	brne	.-8      	; 0x31e <init_ports_m1284P+0x160>
     326:	ad ec       	ldi	r26, 0xCD	; 205
     328:	b2 e0       	ldi	r27, 0x02	; 2
     32a:	e2 ea       	ldi	r30, 0xA2	; 162
     32c:	f1 e0       	ldi	r31, 0x01	; 1
     32e:	83 e0       	ldi	r24, 0x03	; 3
     330:	01 90       	ld	r0, Z+
     332:	0d 92       	st	X+, r0
     334:	81 50       	subi	r24, 0x01	; 1
     336:	e1 f7       	brne	.-8      	; 0x330 <init_ports_m1284P+0x172>
     338:	a3 e0       	ldi	r26, 0x03	; 3
     33a:	b3 e0       	ldi	r27, 0x03	; 3
     33c:	ef e9       	ldi	r30, 0x9F	; 159
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	01 90       	ld	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	81 50       	subi	r24, 0x01	; 1
     348:	e1 f7       	brne	.-8      	; 0x342 <init_ports_m1284P+0x184>
     34a:	ac e8       	ldi	r26, 0x8C	; 140
     34c:	b2 e0       	ldi	r27, 0x02	; 2
     34e:	ec e9       	ldi	r30, 0x9C	; 156
     350:	f1 e0       	ldi	r31, 0x01	; 1
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	01 90       	ld	r0, Z+
     356:	0d 92       	st	X+, r0
     358:	81 50       	subi	r24, 0x01	; 1
     35a:	e1 f7       	brne	.-8      	; 0x354 <init_ports_m1284P+0x196>
     35c:	ab e3       	ldi	r26, 0x3B	; 59
     35e:	b2 e0       	ldi	r27, 0x02	; 2
     360:	e9 e9       	ldi	r30, 0x99	; 153
     362:	f1 e0       	ldi	r31, 0x01	; 1
     364:	83 e0       	ldi	r24, 0x03	; 3
     366:	01 90       	ld	r0, Z+
     368:	0d 92       	st	X+, r0
     36a:	81 50       	subi	r24, 0x01	; 1
     36c:	e1 f7       	brne	.-8      	; 0x366 <init_ports_m1284P+0x1a8>
     36e:	aa ec       	ldi	r26, 0xCA	; 202
     370:	b2 e0       	ldi	r27, 0x02	; 2
     372:	e6 e9       	ldi	r30, 0x96	; 150
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	01 90       	ld	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	81 50       	subi	r24, 0x01	; 1
     37e:	e1 f7       	brne	.-8      	; 0x378 <init_ports_m1284P+0x1ba>
     380:	ac eb       	ldi	r26, 0xBC	; 188
     382:	b2 e0       	ldi	r27, 0x02	; 2
     384:	e3 e9       	ldi	r30, 0x93	; 147
     386:	f1 e0       	ldi	r31, 0x01	; 1
     388:	83 e0       	ldi	r24, 0x03	; 3
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	81 50       	subi	r24, 0x01	; 1
     390:	e1 f7       	brne	.-8      	; 0x38a <init_ports_m1284P+0x1cc>
     392:	ad e1       	ldi	r26, 0x1D	; 29
     394:	b2 e0       	ldi	r27, 0x02	; 2
     396:	e0 e9       	ldi	r30, 0x90	; 144
     398:	f1 e0       	ldi	r31, 0x01	; 1
     39a:	83 e0       	ldi	r24, 0x03	; 3
     39c:	01 90       	ld	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	81 50       	subi	r24, 0x01	; 1
     3a2:	e1 f7       	brne	.-8      	; 0x39c <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     3a4:	a4 ea       	ldi	r26, 0xA4	; 164
     3a6:	b2 e0       	ldi	r27, 0x02	; 2
     3a8:	ea e8       	ldi	r30, 0x8A	; 138
     3aa:	f1 e0       	ldi	r31, 0x01	; 1
     3ac:	86 e0       	ldi	r24, 0x06	; 6
     3ae:	01 90       	ld	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	81 50       	subi	r24, 0x01	; 1
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <init_ports_m1284P+0x1f0>
     3b6:	a8 e3       	ldi	r26, 0x38	; 56
     3b8:	b2 e0       	ldi	r27, 0x02	; 2
     3ba:	e7 e8       	ldi	r30, 0x87	; 135
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	01 90       	ld	r0, Z+
     3c2:	0d 92       	st	X+, r0
     3c4:	81 50       	subi	r24, 0x01	; 1
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <init_ports_m1284P+0x202>
     3c8:	a1 e4       	ldi	r26, 0x41	; 65
     3ca:	b2 e0       	ldi	r27, 0x02	; 2
     3cc:	e4 e8       	ldi	r30, 0x84	; 132
     3ce:	f1 e0       	ldi	r31, 0x01	; 1
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	01 90       	ld	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <init_ports_m1284P+0x214>
     3da:	a5 e3       	ldi	r26, 0x35	; 53
     3dc:	b2 e0       	ldi	r27, 0x02	; 2
     3de:	e1 e8       	ldi	r30, 0x81	; 129
     3e0:	f1 e0       	ldi	r31, 0x01	; 1
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	01 90       	ld	r0, Z+
     3e6:	0d 92       	st	X+, r0
     3e8:	81 50       	subi	r24, 0x01	; 1
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <init_ports_m1284P+0x226>
     3ec:	a7 eb       	ldi	r26, 0xB7	; 183
     3ee:	b2 e0       	ldi	r27, 0x02	; 2
     3f0:	ee e7       	ldi	r30, 0x7E	; 126
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	01 90       	ld	r0, Z+
     3f8:	0d 92       	st	X+, r0
     3fa:	81 50       	subi	r24, 0x01	; 1
     3fc:	e1 f7       	brne	.-8      	; 0x3f6 <init_ports_m1284P+0x238>
     3fe:	a1 e2       	ldi	r26, 0x21	; 33
     400:	b3 e0       	ldi	r27, 0x03	; 3
     402:	eb e7       	ldi	r30, 0x7B	; 123
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	83 e0       	ldi	r24, 0x03	; 3
     408:	01 90       	ld	r0, Z+
     40a:	0d 92       	st	X+, r0
     40c:	81 50       	subi	r24, 0x01	; 1
     40e:	e1 f7       	brne	.-8      	; 0x408 <init_ports_m1284P+0x24a>
     410:	a6 e0       	ldi	r26, 0x06	; 6
     412:	b3 e0       	ldi	r27, 0x03	; 3
     414:	e8 e7       	ldi	r30, 0x78	; 120
     416:	f1 e0       	ldi	r31, 0x01	; 1
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	01 90       	ld	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	81 50       	subi	r24, 0x01	; 1
     420:	e1 f7       	brne	.-8      	; 0x41a <init_ports_m1284P+0x25c>
     422:	ab e4       	ldi	r26, 0x4B	; 75
     424:	b3 e0       	ldi	r27, 0x03	; 3
     426:	e5 e7       	ldi	r30, 0x75	; 117
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	01 90       	ld	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	81 50       	subi	r24, 0x01	; 1
     432:	e1 f7       	brne	.-8      	; 0x42c <init_ports_m1284P+0x26e>
     434:	ae e0       	ldi	r26, 0x0E	; 14
     436:	b3 e0       	ldi	r27, 0x03	; 3
     438:	e2 e7       	ldi	r30, 0x72	; 114
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	01 90       	ld	r0, Z+
     440:	0d 92       	st	X+, r0
     442:	81 50       	subi	r24, 0x01	; 1
     444:	e1 f7       	brne	.-8      	; 0x43e <init_ports_m1284P+0x280>
}
     446:	08 95       	ret

00000448 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     448:	af e8       	ldi	r26, 0x8F	; 143
     44a:	b2 e0       	ldi	r27, 0x02	; 2
     44c:	eb e6       	ldi	r30, 0x6B	; 107
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	87 e0       	ldi	r24, 0x07	; 7
     452:	01 90       	ld	r0, Z+
     454:	0d 92       	st	X+, r0
     456:	81 50       	subi	r24, 0x01	; 1
     458:	e1 f7       	brne	.-8      	; 0x452 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     45a:	af e2       	ldi	r26, 0x2F	; 47
     45c:	b3 e0       	ldi	r27, 0x03	; 3
     45e:	e4 e6       	ldi	r30, 0x64	; 100
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	87 e0       	ldi	r24, 0x07	; 7
     464:	01 90       	ld	r0, Z+
     466:	0d 92       	st	X+, r0
     468:	81 50       	subi	r24, 0x01	; 1
     46a:	e1 f7       	brne	.-8      	; 0x464 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     46c:	a0 ef       	ldi	r26, 0xF0	; 240
     46e:	b2 e0       	ldi	r27, 0x02	; 2
     470:	ed e5       	ldi	r30, 0x5D	; 93
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	81 50       	subi	r24, 0x01	; 1
     47c:	e1 f7       	brne	.-8      	; 0x476 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     47e:	a0 e2       	ldi	r26, 0x20	; 32
     480:	b2 e0       	ldi	r27, 0x02	; 2
     482:	e6 e5       	ldi	r30, 0x56	; 86
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	87 e0       	ldi	r24, 0x07	; 7
     488:	01 90       	ld	r0, Z+
     48a:	0d 92       	st	X+, r0
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	e1 f7       	brne	.-8      	; 0x488 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     490:	af eb       	ldi	r26, 0xBF	; 191
     492:	b2 e0       	ldi	r27, 0x02	; 2
     494:	ee e4       	ldi	r30, 0x4E	; 78
     496:	f1 e0       	ldi	r31, 0x01	; 1
     498:	88 e0       	ldi	r24, 0x08	; 8
     49a:	01 90       	ld	r0, Z+
     49c:	0d 92       	st	X+, r0
     49e:	81 50       	subi	r24, 0x01	; 1
     4a0:	e1 f7       	brne	.-8      	; 0x49a <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     4a2:	a4 e2       	ldi	r26, 0x24	; 36
     4a4:	b3 e0       	ldi	r27, 0x03	; 3
     4a6:	e6 e4       	ldi	r30, 0x46	; 70
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	88 e0       	ldi	r24, 0x08	; 8
     4ac:	01 90       	ld	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     4b4:	ad e2       	ldi	r26, 0x2D	; 45
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	ee e3       	ldi	r30, 0x3E	; 62
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	88 e0       	ldi	r24, 0x08	; 8
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	81 50       	subi	r24, 0x01	; 1
     4c4:	e1 f7       	brne	.-8      	; 0x4be <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     4c6:	a9 e1       	ldi	r26, 0x19	; 25
     4c8:	b3 e0       	ldi	r27, 0x03	; 3
     4ca:	e6 e3       	ldi	r30, 0x36	; 54
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	01 90       	ld	r0, Z+
     4d2:	0d 92       	st	X+, r0
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     4d8:	ac e9       	ldi	r26, 0x9C	; 156
     4da:	b2 e0       	ldi	r27, 0x02	; 2
     4dc:	ee e2       	ldi	r30, 0x2E	; 46
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	88 e0       	ldi	r24, 0x08	; 8
     4e2:	01 90       	ld	r0, Z+
     4e4:	0d 92       	st	X+, r0
     4e6:	81 50       	subi	r24, 0x01	; 1
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     4ea:	a1 e1       	ldi	r26, 0x11	; 17
     4ec:	b3 e0       	ldi	r27, 0x03	; 3
     4ee:	e6 e2       	ldi	r30, 0x26	; 38
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	88 e0       	ldi	r24, 0x08	; 8
     4f4:	01 90       	ld	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     4fc:	a4 e4       	ldi	r26, 0x44	; 68
     4fe:	b2 e0       	ldi	r27, 0x02	; 2
     500:	ee e1       	ldi	r30, 0x1E	; 30
     502:	f1 e0       	ldi	r31, 0x01	; 1
     504:	88 e0       	ldi	r24, 0x08	; 8
     506:	01 90       	ld	r0, Z+
     508:	0d 92       	st	X+, r0
     50a:	81 50       	subi	r24, 0x01	; 1
     50c:	e1 f7       	brne	.-8      	; 0x506 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     50e:	a4 e1       	ldi	r26, 0x14	; 20
     510:	b2 e0       	ldi	r27, 0x02	; 2
     512:	e6 e1       	ldi	r30, 0x16	; 22
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	88 e0       	ldi	r24, 0x08	; 8
     518:	01 90       	ld	r0, Z+
     51a:	0d 92       	st	X+, r0
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	e1 f7       	brne	.-8      	; 0x518 <init_timer_m1284P+0xd0>
}
     520:	08 95       	ret

00000522 <initMotor>:

#include "../kernel_init.h"
#include "motor.h"

// This must be called from another init-routine, after the motors have been initialized.
void initMotor(PMotor motor) {
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
	setTimerCompareValue(motor->pwmTimer, 0);
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <setTimerCompareValue>
	setPinOutput(motor->direction);
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	9a 81       	ldd	r25, Y+2	; 0x02
     538:	0e 94 a3 09 	call	0x1346	; 0x1346 <setPinOutput>
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     54c:	7e 01       	movw	r14, r28
     54e:	9f 2d       	mov	r25, r15
     550:	0e 94 91 02 	call	0x522	; 0x522 <initMotor>
	setPinOutput(motor->direction2);
     554:	8d 81       	ldd	r24, Y+5	; 0x05
     556:	9e 81       	ldd	r25, Y+6	; 0x06
     558:	0e 94 a3 09 	call	0x1346	; 0x1346 <setPinOutput>
	stopMotor((PMotor) motor); // For the sake of setting both direction pins to zero. Not necessary for 1-pin-motors.
     55c:	ce 01       	movw	r24, r28
     55e:	0e 94 bc 08 	call	0x1178	; 0x1178 <stopMotor>
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	08 95       	ret

0000056c <init_tank_motors>:

void init_tank_motors() {
	
	// TODO assign correct pins, correct motor-properties
	
	INIT_2DirPins_MOTOR(LeftMotor, MOTOR_NORMAL, PinA1, Timer1A, PinA1)
     56c:	ad ea       	ldi	r26, 0xAD	; 173
     56e:	b2 e0       	ldi	r27, 0x02	; 2
     570:	ef e0       	ldi	r30, 0x0F	; 15
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	87 e0       	ldi	r24, 0x07	; 7
     576:	01 90       	ld	r0, Z+
     578:	0d 92       	st	X+, r0
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	e1 f7       	brne	.-8      	; 0x576 <init_tank_motors+0xa>
     57e:	8d ea       	ldi	r24, 0xAD	; 173
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 a1 02 	call	0x542	; 0x542 <initMotor2Pins>
	INIT_2DirPins_MOTOR(RightMotor, MOTOR_NORMAL, PinA1, Timer1B, PinA1)
     586:	ac ef       	ldi	r26, 0xFC	; 252
     588:	b2 e0       	ldi	r27, 0x02	; 2
     58a:	e8 e0       	ldi	r30, 0x08	; 8
     58c:	f1 e0       	ldi	r31, 0x01	; 1
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	01 90       	ld	r0, Z+
     592:	0d 92       	st	X+, r0
     594:	81 50       	subi	r24, 0x01	; 1
     596:	e1 f7       	brne	.-8      	; 0x590 <init_tank_motors+0x24>
     598:	8c ef       	ldi	r24, 0xFC	; 252
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	0e 94 a1 02 	call	0x542	; 0x542 <initMotor2Pins>
}
     5a0:	08 95       	ret

000005a2 <twi_unexpectedCondition>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
#endif

// This can be implemented by the application code to handle unexpected conditions in TWI traffic.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() { }
     5a2:	08 95       	ret

000005a4 <init_twi>:
TWIError error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     5aa:	8f ef       	ldi	r24, 0xFF	; 255
     5ac:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     5b0:	81 e1       	ldi	r24, 0x11	; 17
     5b2:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     5b6:	10 92 b9 00 	sts	0x00B9, r1
	// TODO uncovered: TWAMR (slave address mask register)
	#ifdef TWI_Slave
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	80 93 ba 00 	sts	0x00BA, r24
	#endif
}
     5c0:	08 95       	ret

000005c2 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     5c2:	df 93       	push	r29
     5c4:	cf 93       	push	r28
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	27 97       	sbiw	r28, 0x07	; 7
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
     5d6:	ae 01       	movw	r20, r28
     5d8:	4f 5f       	subi	r20, 0xFF	; 255
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	80 91 e5 02 	lds	r24, 0x02E5
     5e0:	90 91 e6 02 	lds	r25, 0x02E6
     5e4:	fc 01       	movw	r30, r24
     5e6:	33 e0       	ldi	r19, 0x03	; 3
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	3a 95       	dec	r19
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <next_twi_operation+0x26>
     5f0:	e8 1b       	sub	r30, r24
     5f2:	f9 0b       	sbc	r31, r25
     5f4:	da 01       	movw	r26, r20
     5f6:	ea 5c       	subi	r30, 0xCA	; 202
     5f8:	fc 4f       	sbci	r31, 0xFC	; 252
     5fa:	27 e0       	ldi	r18, 0x07	; 7
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	21 50       	subi	r18, 0x01	; 1
     602:	e1 f7       	brne	.-8      	; 0x5fc <next_twi_operation+0x3a>
     604:	fc 01       	movw	r30, r24
     606:	23 e0       	ldi	r18, 0x03	; 3
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	2a 95       	dec	r18
     60e:	e1 f7       	brne	.-8      	; 0x608 <next_twi_operation+0x46>
     610:	e8 1b       	sub	r30, r24
     612:	f9 0b       	sbc	r31, r25
     614:	ea 5c       	subi	r30, 0xCA	; 202
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	64 81       	ldd	r22, Z+4	; 0x04
     61a:	25 81       	ldd	r18, Z+5	; 0x05
     61c:	36 81       	ldd	r19, Z+6	; 0x06
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	90 93 e6 02 	sts	0x02E6, r25
     624:	80 93 e5 02 	sts	0x02E5, r24
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
     628:	83 30       	cpi	r24, 0x03	; 3
     62a:	91 05       	cpc	r25, r1
     62c:	ec f4       	brge	.+58     	; 0x668 <next_twi_operation+0xa6>
     62e:	21 15       	cp	r18, r1
     630:	31 05       	cpc	r19, r1
     632:	a1 f2       	breq	.-88     	; 0x5dc <next_twi_operation+0x1a>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	if (current.operationMode == TWI_Send) {
     634:	22 30       	cpi	r18, 0x02	; 2
     636:	31 05       	cpc	r19, r1
     638:	21 f4       	brne	.+8      	; 0x642 <next_twi_operation+0x80>
		twi_address.address = current.device.address & ~_BV(TW_READ);
     63a:	86 2f       	mov	r24, r22
     63c:	8d 7f       	andi	r24, 0xFD	; 253
     63e:	80 93 1c 02 	sts	0x021C, r24
	} else if (current.operationMode == TWI_Send) {
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
     642:	10 92 bb 02 	sts	0x02BB, r1
     646:	10 92 ba 02 	sts	0x02BA, r1
	twi_buffer = current.buffer;
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	9a 81       	ldd	r25, Y+2	; 0x02
     64e:	ab 81       	ldd	r26, Y+3	; 0x03
     650:	bc 81       	ldd	r27, Y+4	; 0x04
     652:	80 93 ea 02 	sts	0x02EA, r24
     656:	90 93 eb 02 	sts	0x02EB, r25
     65a:	a0 93 ec 02 	sts	0x02EC, r26
     65e:	b0 93 ed 02 	sts	0x02ED, r27
	return TRUE;
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	02 c0       	rjmp	.+4      	; 0x66c <next_twi_operation+0xaa>
BOOL next_twi_operation() {
	TWIOperation current;
	do {
		current = furtherOperations[nextTwiOperation++];
	} while (nextTwiOperation < NUM_TWI_OPERATIONS && current.operationMode == TWI_IllegalOperation);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(TW_READ);;
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     66c:	c9 01       	movw	r24, r18
     66e:	27 96       	adiw	r28, 0x07	; 7
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	cf 91       	pop	r28
     67c:	df 91       	pop	r29
     67e:	08 95       	ret

00000680 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (nextTwiOperation >= NUM_TWI_OPERATIONS || !next_twi_operation()) {
     680:	80 91 e5 02 	lds	r24, 0x02E5
     684:	90 91 e6 02 	lds	r25, 0x02E6
     688:	83 30       	cpi	r24, 0x03	; 3
     68a:	91 05       	cpc	r25, r1
     68c:	24 f4       	brge	.+8      	; 0x696 <twi_stop_or_next+0x16>
     68e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <next_twi_operation>
     692:	00 97       	sbiw	r24, 0x00	; 0
     694:	11 f4       	brne	.+4      	; 0x69a <twi_stop_or_next+0x1a>
		twi_stop();
     696:	0e 94 77 00 	call	0xee	; 0xee <twi_stop>
     69a:	08 95       	ret

0000069c <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	error = TWI_No_Error;
     69c:	10 92 f8 02 	sts	0x02F8, r1
     6a0:	10 92 f7 02 	sts	0x02F7, r1
	twi_running = TRUE;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	90 93 ef 02 	sts	0x02EF, r25
     6ac:	80 93 ee 02 	sts	0x02EE, r24
	nextTwiOperation = 0;
     6b0:	10 92 e6 02 	sts	0x02E6, r1
     6b4:	10 92 e5 02 	sts	0x02E5, r1
	next_twi_operation();
     6b8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <next_twi_operation>
}
     6bc:	08 95       	ret

000006be <__vector_26>:
	} else {
		twi_continue();
	}
}

ISR(TWI_vect) {
     6be:	1f 92       	push	r1
     6c0:	0f 92       	push	r0
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	0f 92       	push	r0
     6c6:	0b b6       	in	r0, 0x3b	; 59
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	switch(TW_STATUS) {
     6e4:	80 91 b9 00 	lds	r24, 0x00B9
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	88 7f       	andi	r24, 0xF8	; 248
     6ec:	90 70       	andi	r25, 0x00	; 0
     6ee:	88 36       	cpi	r24, 0x68	; 104
     6f0:	91 05       	cpc	r25, r1
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <__vector_26+0x38>
     6f4:	f5 c0       	rjmp	.+490    	; 0x8e0 <__vector_26+0x222>
     6f6:	89 36       	cpi	r24, 0x69	; 105
     6f8:	91 05       	cpc	r25, r1
     6fa:	ec f5       	brge	.+122    	; 0x776 <__vector_26+0xb8>
     6fc:	80 33       	cpi	r24, 0x30	; 48
     6fe:	91 05       	cpc	r25, r1
     700:	09 f4       	brne	.+2      	; 0x704 <__vector_26+0x46>
     702:	9b c0       	rjmp	.+310    	; 0x83a <__vector_26+0x17c>
     704:	81 33       	cpi	r24, 0x31	; 49
     706:	91 05       	cpc	r25, r1
     708:	cc f4       	brge	.+50     	; 0x73c <__vector_26+0x7e>
     70a:	88 31       	cpi	r24, 0x18	; 24
     70c:	91 05       	cpc	r25, r1
     70e:	09 f4       	brne	.+2      	; 0x712 <__vector_26+0x54>
     710:	77 c0       	rjmp	.+238    	; 0x800 <__vector_26+0x142>
     712:	89 31       	cpi	r24, 0x19	; 25
     714:	91 05       	cpc	r25, r1
     716:	4c f4       	brge	.+18     	; 0x72a <__vector_26+0x6c>
     718:	88 30       	cpi	r24, 0x08	; 8
     71a:	91 05       	cpc	r25, r1
     71c:	09 f4       	brne	.+2      	; 0x720 <__vector_26+0x62>
     71e:	68 c0       	rjmp	.+208    	; 0x7f0 <__vector_26+0x132>
     720:	80 31       	cpi	r24, 0x10	; 16
     722:	91 05       	cpc	r25, r1
     724:	09 f0       	breq	.+2      	; 0x728 <__vector_26+0x6a>
     726:	eb c0       	rjmp	.+470    	; 0x8fe <__vector_26+0x240>
     728:	63 c0       	rjmp	.+198    	; 0x7f0 <__vector_26+0x132>
     72a:	80 32       	cpi	r24, 0x20	; 32
     72c:	91 05       	cpc	r25, r1
     72e:	09 f4       	brne	.+2      	; 0x732 <__vector_26+0x74>
     730:	8d c0       	rjmp	.+282    	; 0x84c <__vector_26+0x18e>
     732:	88 32       	cpi	r24, 0x28	; 40
     734:	91 05       	cpc	r25, r1
     736:	09 f0       	breq	.+2      	; 0x73a <__vector_26+0x7c>
     738:	e2 c0       	rjmp	.+452    	; 0x8fe <__vector_26+0x240>
     73a:	62 c0       	rjmp	.+196    	; 0x800 <__vector_26+0x142>
     73c:	88 34       	cpi	r24, 0x48	; 72
     73e:	91 05       	cpc	r25, r1
     740:	09 f4       	brne	.+2      	; 0x744 <__vector_26+0x86>
     742:	84 c0       	rjmp	.+264    	; 0x84c <__vector_26+0x18e>
     744:	89 34       	cpi	r24, 0x49	; 73
     746:	91 05       	cpc	r25, r1
     748:	4c f4       	brge	.+18     	; 0x75c <__vector_26+0x9e>
     74a:	88 33       	cpi	r24, 0x38	; 56
     74c:	91 05       	cpc	r25, r1
     74e:	09 f4       	brne	.+2      	; 0x752 <__vector_26+0x94>
     750:	54 c0       	rjmp	.+168    	; 0x7fa <__vector_26+0x13c>
     752:	80 34       	cpi	r24, 0x40	; 64
     754:	91 05       	cpc	r25, r1
     756:	09 f0       	breq	.+2      	; 0x75a <__vector_26+0x9c>
     758:	d2 c0       	rjmp	.+420    	; 0x8fe <__vector_26+0x240>
     75a:	c2 c0       	rjmp	.+388    	; 0x8e0 <__vector_26+0x222>
     75c:	88 35       	cpi	r24, 0x58	; 88
     75e:	91 05       	cpc	r25, r1
     760:	09 f4       	brne	.+2      	; 0x764 <__vector_26+0xa6>
     762:	77 c0       	rjmp	.+238    	; 0x852 <__vector_26+0x194>
     764:	80 36       	cpi	r24, 0x60	; 96
     766:	91 05       	cpc	r25, r1
     768:	09 f4       	brne	.+2      	; 0x76c <__vector_26+0xae>
     76a:	ba c0       	rjmp	.+372    	; 0x8e0 <__vector_26+0x222>
     76c:	80 35       	cpi	r24, 0x50	; 80
     76e:	91 05       	cpc	r25, r1
     770:	09 f0       	breq	.+2      	; 0x774 <__vector_26+0xb6>
     772:	c5 c0       	rjmp	.+394    	; 0x8fe <__vector_26+0x240>
     774:	b8 c0       	rjmp	.+368    	; 0x8e6 <__vector_26+0x228>
     776:	88 39       	cpi	r24, 0x98	; 152
     778:	91 05       	cpc	r25, r1
     77a:	09 f4       	brne	.+2      	; 0x77e <__vector_26+0xc0>
     77c:	bd c0       	rjmp	.+378    	; 0x8f8 <__vector_26+0x23a>
     77e:	89 39       	cpi	r24, 0x99	; 153
     780:	91 05       	cpc	r25, r1
     782:	cc f4       	brge	.+50     	; 0x7b6 <__vector_26+0xf8>
     784:	80 38       	cpi	r24, 0x80	; 128
     786:	91 05       	cpc	r25, r1
     788:	09 f4       	brne	.+2      	; 0x78c <__vector_26+0xce>
     78a:	ad c0       	rjmp	.+346    	; 0x8e6 <__vector_26+0x228>
     78c:	81 38       	cpi	r24, 0x81	; 129
     78e:	91 05       	cpc	r25, r1
     790:	4c f4       	brge	.+18     	; 0x7a4 <__vector_26+0xe6>
     792:	80 37       	cpi	r24, 0x70	; 112
     794:	91 05       	cpc	r25, r1
     796:	09 f4       	brne	.+2      	; 0x79a <__vector_26+0xdc>
     798:	a3 c0       	rjmp	.+326    	; 0x8e0 <__vector_26+0x222>
     79a:	88 37       	cpi	r24, 0x78	; 120
     79c:	91 05       	cpc	r25, r1
     79e:	09 f0       	breq	.+2      	; 0x7a2 <__vector_26+0xe4>
     7a0:	ae c0       	rjmp	.+348    	; 0x8fe <__vector_26+0x240>
     7a2:	9e c0       	rjmp	.+316    	; 0x8e0 <__vector_26+0x222>
     7a4:	88 38       	cpi	r24, 0x88	; 136
     7a6:	91 05       	cpc	r25, r1
     7a8:	09 f4       	brne	.+2      	; 0x7ac <__vector_26+0xee>
     7aa:	a6 c0       	rjmp	.+332    	; 0x8f8 <__vector_26+0x23a>
     7ac:	80 39       	cpi	r24, 0x90	; 144
     7ae:	91 05       	cpc	r25, r1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <__vector_26+0xf6>
     7b2:	a5 c0       	rjmp	.+330    	; 0x8fe <__vector_26+0x240>
     7b4:	98 c0       	rjmp	.+304    	; 0x8e6 <__vector_26+0x228>
     7b6:	80 3b       	cpi	r24, 0xB0	; 176
     7b8:	91 05       	cpc	r25, r1
     7ba:	09 f4       	brne	.+2      	; 0x7be <__vector_26+0x100>
     7bc:	4d c0       	rjmp	.+154    	; 0x858 <__vector_26+0x19a>
     7be:	81 3b       	cpi	r24, 0xB1	; 177
     7c0:	91 05       	cpc	r25, r1
     7c2:	4c f4       	brge	.+18     	; 0x7d6 <__vector_26+0x118>
     7c4:	80 3a       	cpi	r24, 0xA0	; 160
     7c6:	91 05       	cpc	r25, r1
     7c8:	09 f4       	brne	.+2      	; 0x7cc <__vector_26+0x10e>
     7ca:	90 c0       	rjmp	.+288    	; 0x8ec <__vector_26+0x22e>
     7cc:	88 3a       	cpi	r24, 0xA8	; 168
     7ce:	91 05       	cpc	r25, r1
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_26+0x116>
     7d2:	95 c0       	rjmp	.+298    	; 0x8fe <__vector_26+0x240>
     7d4:	41 c0       	rjmp	.+130    	; 0x858 <__vector_26+0x19a>
     7d6:	80 3c       	cpi	r24, 0xC0	; 192
     7d8:	91 05       	cpc	r25, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_26+0x120>
     7dc:	73 c0       	rjmp	.+230    	; 0x8c4 <__vector_26+0x206>
     7de:	88 3c       	cpi	r24, 0xC8	; 200
     7e0:	91 05       	cpc	r25, r1
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <__vector_26+0x128>
     7e4:	6c c0       	rjmp	.+216    	; 0x8be <__vector_26+0x200>
     7e6:	88 3b       	cpi	r24, 0xB8	; 184
     7e8:	91 05       	cpc	r25, r1
     7ea:	09 f0       	breq	.+2      	; 0x7ee <__vector_26+0x130>
     7ec:	88 c0       	rjmp	.+272    	; 0x8fe <__vector_26+0x240>
     7ee:	3c c0       	rjmp	.+120    	; 0x868 <__vector_26+0x1aa>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     7f0:	80 91 1c 02 	lds	r24, 0x021C
     7f4:	80 93 bb 00 	sts	0x00BB, r24
     7f8:	1c c0       	rjmp	.+56     	; 0x832 <__vector_26+0x174>
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			error = TWI_Arbitration_Lost;
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	78 c0       	rjmp	.+240    	; 0x8f0 <__vector_26+0x232>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     800:	80 91 ba 02 	lds	r24, 0x02BA
     804:	90 91 bb 02 	lds	r25, 0x02BB
     808:	20 91 ec 02 	lds	r18, 0x02EC
     80c:	30 91 ed 02 	lds	r19, 0x02ED
     810:	82 17       	cp	r24, r18
     812:	93 07       	cpc	r25, r19
     814:	f0 f4       	brcc	.+60     	; 0x852 <__vector_26+0x194>
				twi_send(twi_buffer.data[alreadyHandled++]);
     816:	e0 91 ea 02 	lds	r30, 0x02EA
     81a:	f0 91 eb 02 	lds	r31, 0x02EB
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	20 81       	ld	r18, Z
     824:	20 93 bb 00 	sts	0x00BB, r18
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	90 93 bb 02 	sts	0x02BB, r25
     82e:	80 93 ba 02 	sts	0x02BA, r24
     832:	85 e8       	ldi	r24, 0x85	; 133
     834:	80 93 bc 00 	sts	0x00BC, r24
     838:	6a c0       	rjmp	.+212    	; 0x90e <__vector_26+0x250>
		case TW_MT_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			error = TWI_Master_TooMuchDataTransmitted;
     83a:	86 e0       	ldi	r24, 0x06	; 6
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	90 93 f8 02 	sts	0x02F8, r25
     842:	80 93 f7 02 	sts	0x02F7, r24
			twi_stop();
     846:	0e 94 77 00 	call	0xee	; 0xee <twi_stop>
			break;
     84a:	61 c0       	rjmp	.+194    	; 0x90e <__vector_26+0x250>
			break;
		case TW_MR_DATA_ACK:
			twi_receive_byte();
			break;
		case TW_MR_SLA_NACK:
			error = TWI_SlaveAddress_NoAck;
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	f6 cf       	rjmp	.-20     	; 0x83e <__vector_26+0x180>
			twi_stop();
			break;
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_stop_or_next();
     852:	0e 94 40 03 	call	0x680	; 0x680 <twi_stop_or_next>
			break;
     856:	5b c0       	rjmp	.+182    	; 0x90e <__vector_26+0x250>
#ifdef TWI_Slave
// Slave Transmitter
		case TW_ST_SLA_ACK:
		case TW_ST_ARB_LOST_SLA_ACK:
			twi_buffer = twi_handleMasterRequest();
     858:	10 92 ea 02 	sts	0x02EA, r1
     85c:	10 92 eb 02 	sts	0x02EB, r1
     860:	10 92 ec 02 	sts	0x02EC, r1
     864:	10 92 ed 02 	sts	0x02ED, r1
		case TW_ST_DATA_ACK:
			if (alreadyHandled < twi_buffer.size - 1) {
     868:	80 91 ba 02 	lds	r24, 0x02BA
     86c:	90 91 bb 02 	lds	r25, 0x02BB
     870:	20 91 ec 02 	lds	r18, 0x02EC
     874:	30 91 ed 02 	lds	r19, 0x02ED
     878:	21 50       	subi	r18, 0x01	; 1
     87a:	30 40       	sbci	r19, 0x00	; 0
     87c:	60 91 ea 02 	lds	r22, 0x02EA
     880:	70 91 eb 02 	lds	r23, 0x02EB
     884:	ac 01       	movw	r20, r24
     886:	4f 5f       	subi	r20, 0xFF	; 255
     888:	5f 4f       	sbci	r21, 0xFF	; 255
     88a:	82 17       	cp	r24, r18
     88c:	93 07       	cpc	r25, r19
     88e:	60 f4       	brcc	.+24     	; 0x8a8 <__vector_26+0x1ea>
				// At least one more byte after this one.
				twi_send_ack(twi_buffer.data[alreadyHandled++]);
     890:	86 0f       	add	r24, r22
     892:	97 1f       	adc	r25, r23
     894:	fc 01       	movw	r30, r24
     896:	80 81       	ld	r24, Z
     898:	80 93 bb 00 	sts	0x00BB, r24
     89c:	50 93 bb 02 	sts	0x02BB, r21
     8a0:	40 93 ba 02 	sts	0x02BA, r20
     8a4:	85 ec       	ldi	r24, 0xC5	; 197
     8a6:	c6 cf       	rjmp	.-116    	; 0x834 <__vector_26+0x176>
			} else {
				// Sending last byte!
				twi_send(twi_buffer.data[alreadyHandled++]);
     8a8:	86 0f       	add	r24, r22
     8aa:	97 1f       	adc	r25, r23
     8ac:	fc 01       	movw	r30, r24
     8ae:	80 81       	ld	r24, Z
     8b0:	80 93 bb 00 	sts	0x00BB, r24
     8b4:	50 93 bb 02 	sts	0x02BB, r21
     8b8:	40 93 ba 02 	sts	0x02BA, r20
     8bc:	ba cf       	rjmp	.-140    	; 0x832 <__vector_26+0x174>
			}				
			break;
		case TW_ST_LAST_DATA:
			error = TWI_Slave_NotEnoughDataTransmitted;
     8be:	87 e0       	ldi	r24, 0x07	; 7
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <__vector_26+0x232>
			twi_end();
			break;
		case TW_ST_DATA_NACK:
			if (alreadyHandled < twi_buffer.size) {
     8c4:	20 91 ba 02 	lds	r18, 0x02BA
     8c8:	30 91 bb 02 	lds	r19, 0x02BB
     8cc:	80 91 ec 02 	lds	r24, 0x02EC
     8d0:	90 91 ed 02 	lds	r25, 0x02ED
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	78 f4       	brcc	.+30     	; 0x8f8 <__vector_26+0x23a>
				error = TWI_Slave_TooMuchDataTransmitted;
     8da:	88 e0       	ldi	r24, 0x08	; 8
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <__vector_26+0x232>
// Slave Receiver
		case TW_SR_SLA_ACK:
		case TW_SR_ARB_LOST_SLA_ACK:
		case TW_SR_GCALL_ACK:
		case TW_SR_ARB_LOST_GCALL_ACK:
			twi_init_receive();
     8e0:	0e 94 c8 00 	call	0x190	; 0x190 <twi_init_receive>
			break;
     8e4:	14 c0       	rjmp	.+40     	; 0x90e <__vector_26+0x250>
		case TW_SR_DATA_ACK:
		case TW_SR_GCALL_DATA_ACK:
			twi_receive_byte();
     8e6:	0e 94 a7 00 	call	0x14e	; 0x14e <twi_receive_byte>
			break;
     8ea:	11 c0       	rjmp	.+34     	; 0x90e <__vector_26+0x250>
		case TW_SR_STOP:
			// Transmission ended early.
			error = TWI_Slave_NotEnoughDataReceived;	
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	90 93 f8 02 	sts	0x02F8, r25
     8f4:	80 93 f7 02 	sts	0x02F7, r24
		case TW_SR_DATA_NACK:
		case TW_SR_GCALL_DATA_NACK:
			// Invoke application-code before releasing the bus. The twi_buffer should be copied quickly.
			twi_handleMasterTransmission((TWIBuffer) { twi_buffer.data, alreadyHandled } );
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
     8f8:	0e 94 8f 00 	call	0x11e	; 0x11e <twi_end>
			break;
     8fc:	08 c0       	rjmp	.+16     	; 0x90e <__vector_26+0x250>
		case TW_NO_INFO:
			error = TWI_No_Info_Interrupt;
		case TW_BUS_ERROR:
			error = TWI_Bus_Error;
		default:
			error = TWI_Illegal_Status;
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	90 93 f8 02 	sts	0x02F8, r25
     906:	80 93 f7 02 	sts	0x02F7, r24
			twi_unexpectedCondition();
     90a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <twi_unexpectedCondition>
	}
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	0f 90       	pop	r0
     928:	0b be       	out	0x3b, r0	; 59
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <twi_handleMasterRequest>:
#include <kernel/TWI/twi_raw.kernel.h>

TWIBuffer twi_handleMasterRequest() {
	TWIBuffer buf;
	return buf;
}
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret

0000093e <twi_handleMasterTransmission>:

void twi_handleMasterTransmission(TWIBuffer twi_buffer) {
	
}
     93e:	08 95       	ret

00000940 <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	90 e4       	ldi	r25, 0x40	; 64
     944:	20 91 04 01 	lds	r18, 0x0104
     948:	30 91 05 01 	lds	r19, 0x0105
     94c:	82 1b       	sub	r24, r18
     94e:	93 0b       	sbc	r25, r19
     950:	90 93 f7 01 	sts	0x01F7, r25
     954:	80 93 f6 01 	sts	0x01F6, r24
	__malloc_margin = 0;
     958:	10 92 f3 01 	sts	0x01F3, r1
     95c:	10 92 f2 01 	sts	0x01F2, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     960:	60 91 09 02 	lds	r22, 0x0209
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	6e 5f       	subi	r22, 0xFE	; 254
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <calloc>
     972:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	19 f0       	breq	.+6      	; 0x97e <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     978:	11 82       	std	Z+1, r1	; 0x01
     97a:	10 82       	st	Z, r1
     97c:	02 c0       	rjmp	.+4      	; 0x982 <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     97e:	e0 e0       	ldi	r30, 0x00	; 0
     980:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     982:	f0 93 0b 02 	sts	0x020B, r31
     986:	e0 93 0a 02 	sts	0x020A, r30
}
     98a:	08 95       	ret

0000098c <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <createProcessBase3+0x16>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	d8 2e       	mov	r13, r24
     9a8:	c9 2e       	mov	r12, r25
     9aa:	7b 01       	movw	r14, r22
     9ac:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     9ae:	ca 01       	movw	r24, r20
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	29 83       	std	Y+1, r18	; 0x01
     9b6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <calloc>
     9ba:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     9bc:	29 81       	ldd	r18, Y+1	; 0x01
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	b1 f1       	breq	.+108    	; 0xa2e <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     9c2:	a5 01       	movw	r20, r10
     9c4:	41 50       	subi	r20, 0x01	; 1
     9c6:	50 40       	sbci	r21, 0x00	; 0
     9c8:	48 0f       	add	r20, r24
     9ca:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     9cc:	84 ed       	ldi	r24, 0xD4	; 212
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	fa 01       	movw	r30, r20
     9d2:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     9d8:	fa 01       	movw	r30, r20
     9da:	32 97       	sbiw	r30, 0x02	; 2
     9dc:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     9de:	fa 01       	movw	r30, r20
     9e0:	33 97       	sbiw	r30, 0x03	; 3
     9e2:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     9e4:	62 2f       	mov	r22, r18
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	6e 5f       	subi	r22, 0xFE	; 254
     9ea:	7f 4f       	sbci	r23, 0xFF	; 255
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	49 83       	std	Y+1, r20	; 0x01
     9f2:	5a 83       	std	Y+2, r21	; 0x02
     9f4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <calloc>
     9f8:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     9fa:	49 81       	ldd	r20, Y+1	; 0x01
     9fc:	5a 81       	ldd	r21, Y+2	; 0x02
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	49 f0       	breq	.+18     	; 0xa14 <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     a02:	ca 01       	movw	r24, r20
     a04:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     a06:	f9 01       	movw	r30, r18
     a08:	91 83       	std	Z+1, r25	; 0x01
     a0a:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     a0c:	e1 14       	cp	r14, r1
     a0e:	f1 04       	cpc	r15, r1
     a10:	31 f4       	brne	.+12     	; 0xa1e <createProcessBase3+0x92>
     a12:	04 c0       	rjmp	.+8      	; 0xa1c <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     a14:	c8 01       	movw	r24, r16
     a16:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <free>
     a1a:	09 c0       	rjmp	.+18     	; 0xa2e <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     a1c:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     a1e:	fa 01       	movw	r30, r20
     a20:	7e 97       	sbiw	r30, 0x1e	; 30
     a22:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     a24:	4f 51       	subi	r20, 0x1F	; 31
     a26:	50 40       	sbci	r21, 0x00	; 0
     a28:	fa 01       	movw	r30, r20
     a2a:	f0 82       	st	Z, r15
	return result;
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     a32:	c9 01       	movw	r24, r18
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	df 90       	pop	r13
     a46:	cf 90       	pop	r12
     a48:	bf 90       	pop	r11
     a4a:	af 90       	pop	r10
     a4c:	08 95       	ret

00000a4e <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
     a4e:	40 91 04 01 	lds	r20, 0x0104
     a52:	50 91 05 01 	lds	r21, 0x0105
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	0e 94 c6 04 	call	0x98c	; 0x98c <createProcessBase3>
}
     a5c:	08 95       	ret

00000a5e <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	0e 94 27 05 	call	0xa4e	; 0xa4e <createProcessBase2>
}
     a66:	08 95       	ret

00000a68 <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
	PushProcessContext()
     a68:	0f 92       	push	r0
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	0f 92       	push	r0
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	1f 92       	push	r1
     a76:	11 24       	eor	r1, r1
     a78:	2f 92       	push	r2
     a7a:	3f 92       	push	r3
     a7c:	4f 92       	push	r4
     a7e:	5f 92       	push	r5
     a80:	6f 92       	push	r6
     a82:	7f 92       	push	r7
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     ab4:	dc 01       	movw	r26, r24
	StoreContextStack()
     ab6:	0d b6       	in	r0, 0x3d	; 61
     ab8:	0d 92       	st	X+, r0
     aba:	0e b6       	in	r0, 0x3e	; 62
     abc:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     abe:	db 01       	movw	r26, r22
	RestoreContextStack()
     ac0:	0d 90       	ld	r0, X+
     ac2:	0d be       	out	0x3d, r0	; 61
     ac4:	0d 90       	ld	r0, X+
     ac6:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	bf 90       	pop	r11
     af2:	af 90       	pop	r10
     af4:	9f 90       	pop	r9
     af6:	8f 90       	pop	r8
     af8:	7f 90       	pop	r7
     afa:	6f 90       	pop	r6
     afc:	5f 90       	pop	r5
     afe:	4f 90       	pop	r4
     b00:	3f 90       	pop	r3
     b02:	2f 90       	pop	r2
     b04:	1f 90       	pop	r1
     b06:	0f 90       	pop	r0
     b08:	0b be       	out	0x3b, r0	; 59
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0

	sei();
     b10:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     b12:	08 95       	ret

00000b14 <getCurrentProcess>:

inline Process getCurrentProcess() {
	return (Process) __current_process;
}
     b14:	80 91 0a 02 	lds	r24, 0x020A
     b18:	90 91 0b 02 	lds	r25, 0x020B
     b1c:	08 95       	ret

00000b1e <switchProcess>:

void switchProcess(Process newProcess) {
     b1e:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     b20:	80 91 0a 02 	lds	r24, 0x020A
     b24:	90 91 0b 02 	lds	r25, 0x020B
	__current_process = newProcess;
     b28:	70 93 0b 02 	sts	0x020B, r23
     b2c:	60 93 0a 02 	sts	0x020A, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     b30:	0e 94 34 05 	call	0xa68	; 0xa68 <switchContext>
}
     b34:	08 95       	ret

00000b36 <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     b3c:	2a 5f       	subi	r18, 0xFA	; 250
     b3e:	0e 94 c6 04 	call	0x98c	; 0x98c <createProcessBase3>
     b42:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	e9 f0       	breq	.+58     	; 0xb82 <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     b48:	dc 01       	movw	r26, r24
     b4a:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     b4c:	80 91 06 01 	lds	r24, 0x0106
     b50:	90 91 07 01 	lds	r25, 0x0107
     b54:	95 83       	std	Z+5, r25	; 0x05
     b56:	84 83       	std	Z+4, r24	; 0x04
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	90 93 07 01 	sts	0x0107, r25
     b5e:	80 93 06 01 	sts	0x0106, r24
	ext->stackSize = stackSize;
     b62:	13 96       	adiw	r26, 0x03	; 3
     b64:	dc 93       	st	X, r29
     b66:	ce 93       	st	-X, r28
     b68:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     b6a:	27 e2       	ldi	r18, 0x27	; 39
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	2c 1b       	sub	r18, r28
     b70:	3d 0b       	sbc	r19, r29
     b72:	80 81       	ld	r24, Z
     b74:	91 81       	ldd	r25, Z+1	; 0x01
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	15 96       	adiw	r26, 0x05	; 5
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     b82:	cf 01       	movw	r24, r30
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
     b8a:	40 91 04 01 	lds	r20, 0x0104
     b8e:	50 91 05 01 	lds	r21, 0x0105
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	0e 94 9b 05 	call	0xb36	; 0xb36 <createProcess3>
}
     b98:	08 95       	ret

00000b9a <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <createProcess2>
}
     ba2:	08 95       	ret

00000ba4 <freeProcess>:

void freeProcess(Process process) {
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     baa:	80 91 0a 02 	lds	r24, 0x020A
     bae:	90 91 0b 02 	lds	r25, 0x020B
     bb2:	c8 17       	cp	r28, r24
     bb4:	d9 07       	cpc	r29, r25
     bb6:	69 f0       	breq	.+26     	; 0xbd2 <freeProcess+0x2e>
     bb8:	fe 01       	movw	r30, r28
     bba:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	21 f0       	breq	.+8      	; 0xbcc <freeProcess+0x28>
		free(pcb->stackTop);
     bc4:	84 81       	ldd	r24, Z+4	; 0x04
     bc6:	95 81       	ldd	r25, Z+5	; 0x05
     bc8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <free>
	}
	free(process);
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <free>
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
	return ProcMem(process)->stackSize;
}
     bd8:	fc 01       	movw	r30, r24
     bda:	86 81       	ldd	r24, Z+6	; 0x06
     bdc:	08 95       	ret

00000bde <getFreeProcessStackSize>:

uint16_t getFreeProcessStackSize(Process process) {
     bde:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     be0:	20 85       	ldd	r18, Z+8	; 0x08
     be2:	31 85       	ldd	r19, Z+9	; 0x09
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	28 1b       	sub	r18, r24
     bea:	39 0b       	sbc	r19, r25
}
     bec:	c9 01       	movw	r24, r18
     bee:	08 95       	ret

00000bf0 <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     bf0:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     bf2:	84 81       	ldd	r24, Z+4	; 0x04
     bf4:	95 81       	ldd	r25, Z+5	; 0x05
     bf6:	08 95       	ret

00000bf8 <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
	return ProcMem(proc) + ADDITIONAL_MEMORY;
     bf8:	9c 01       	movw	r18, r24
     bfa:	28 5d       	subi	r18, 0xD8	; 216
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
}
     bfe:	c9 01       	movw	r24, r18
     c00:	08 95       	ret

00000c02 <init_process>:
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
     c02:	80 91 09 02 	lds	r24, 0x0209
     c06:	8a 5f       	subi	r24, 0xFA	; 250
     c08:	80 93 09 02 	sts	0x0209, r24
	init_process_base();
     c0c:	0e 94 a0 04 	call	0x940	; 0x940 <init_process_base>
     c10:	a0 91 0a 02 	lds	r26, 0x020A
     c14:	b0 91 0b 02 	lds	r27, 0x020B
     c18:	fd 01       	movw	r30, r26
     c1a:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     c1c:	15 96       	adiw	r26, 0x05	; 5
     c1e:	1c 92       	st	X, r1
     c20:	1e 92       	st	-X, r1
     c22:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     c24:	80 91 04 01 	lds	r24, 0x0104
     c28:	90 91 05 01 	lds	r25, 0x0105
     c2c:	93 83       	std	Z+3, r25	; 0x03
     c2e:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     c30:	80 91 f6 01 	lds	r24, 0x01F6
     c34:	90 91 f7 01 	lds	r25, 0x01F7
     c38:	95 83       	std	Z+5, r25	; 0x05
     c3a:	84 83       	std	Z+4, r24	; 0x04
}
     c3c:	08 95       	ret

00000c3e <init_idle_scheduler>:

Process __idle_process;

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
     c3e:	84 ed       	ldi	r24, 0xD4	; 212
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	40 e4       	ldi	r20, 0x40	; 64
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	0e 94 9b 05 	call	0xb36	; 0xb36 <createProcess3>
     c50:	90 93 0a 03 	sts	0x030A, r25
     c54:	80 93 09 03 	sts	0x0309, r24
}
     c58:	08 95       	ret

00000c5a <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
}
     c5a:	80 91 09 03 	lds	r24, 0x0309
     c5e:	90 91 0a 03 	lds	r25, 0x030A
     c62:	08 95       	ret

00000c64 <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     c68:	c0 e2       	ldi	r28, 0x20	; 32
     c6a:	d2 e0       	ldi	r29, 0x02	; 2
     c6c:	ce 01       	movw	r24, r28
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 94 0a 	call	0x1528	; 0x1528 <setWaveformGenerationMode>
	setTimerCompareValue(timer, 2500);
     c76:	84 e4       	ldi	r24, 0x44	; 68
     c78:	92 e0       	ldi	r25, 0x02	; 2
     c7a:	64 ec       	ldi	r22, 0xC4	; 196
     c7c:	79 e0       	ldi	r23, 0x09	; 9
     c7e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     c82:	ce 01       	movw	r24, r28
     c84:	62 e0       	ldi	r22, 0x02	; 2
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	0e 94 30 0a 	call	0x1460	; 0x1460 <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
     c92:	84 e4       	ldi	r24, 0x44	; 68
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 3b 0b 	call	0x1676	; 0x1676 <enableTimerInterrupt>
	sei();
     c9a:	78 94       	sei
}
     c9c:	08 95       	ret
#include "scheduler.kernel.h"

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     c9e:	08 95       	ret

00000ca0 <schedule>:

// Regular header-files
#include "../kernel.h"

Process schedule(BOOL fromTimer) {
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     ca6:	0e 94 7e 07 	call	0xefc	; 0xefc <dms_schedule>
     caa:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	51 f4       	brne	.+20     	; 0xcc4 <schedule+0x24>
     cb0:	ce 01       	movw	r24, r28
     cb2:	0e 94 11 0c 	call	0x1822	; 0x1822 <rr_schedule>
     cb6:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	21 f4       	brne	.+8      	; 0xcc4 <schedule+0x24>
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
     cbc:	20 91 09 03 	lds	r18, 0x0309
     cc0:	30 91 0a 03 	lds	r19, 0x030A
	return p;
}
     cc4:	c9 01       	movw	r24, r18
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <__vector_32>:
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
#endif
	// First push the current context, before any register may be modified.
	PushProcessContext()
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	0f 92       	push	r0
     cd4:	0b b6       	in	r0, 0x3b	; 59
     cd6:	0f 92       	push	r0
     cd8:	1f 92       	push	r1
     cda:	11 24       	eor	r1, r1
     cdc:	2f 92       	push	r2
     cde:	3f 92       	push	r3
     ce0:	4f 92       	push	r4
     ce2:	5f 92       	push	r5
     ce4:	6f 92       	push	r6
     ce6:	7f 92       	push	r7
     ce8:	8f 92       	push	r8
     cea:	9f 92       	push	r9
     cec:	af 92       	push	r10
     cee:	bf 92       	push	r11
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	ef 93       	push	r30
     d16:	ff 93       	push	r31

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     d18:	80 91 0c 02 	lds	r24, 0x020C
     d1c:	90 91 0d 02 	lds	r25, 0x020D
     d20:	a0 91 0e 02 	lds	r26, 0x020E
     d24:	b0 91 0f 02 	lds	r27, 0x020F
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	a1 1d       	adc	r26, r1
     d2c:	b1 1d       	adc	r27, r1
     d2e:	80 93 0c 02 	sts	0x020C, r24
     d32:	90 93 0d 02 	sts	0x020D, r25
     d36:	a0 93 0e 02 	sts	0x020E, r26
     d3a:	b0 93 0f 02 	sts	0x020F, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     d3e:	a0 91 0a 02 	lds	r26, 0x020A
	asm volatile("lds r27, __current_process + 1");
     d42:	b0 91 0b 02 	lds	r27, 0x020B
	StoreContextStack()
     d46:	0d b6       	in	r0, 0x3d	; 61
     d48:	0d 92       	st	X+, r0
     d4a:	0e b6       	in	r0, 0x3e	; 62
     d4c:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 50 06 	call	0xca0	; 0xca0 <schedule>
     d56:	90 93 0b 02 	sts	0x020B, r25
     d5a:	80 93 0a 02 	sts	0x020A, r24
	if (__current_process == InvalidProcess) {
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	11 f4       	brne	.+4      	; 0xd66 <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     d62:	0e 94 65 0c 	call	0x18ca	; 0x18ca <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     d66:	dc 01       	movw	r26, r24
	RestoreContextStack()
     d68:	0d 90       	ld	r0, X+
     d6a:	0d be       	out	0x3d, r0	; 61
     d6c:	0d 90       	ld	r0, X+
     d6e:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     d70:	ff 91       	pop	r31
     d72:	ef 91       	pop	r30
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	7f 91       	pop	r23
     d82:	6f 91       	pop	r22
     d84:	5f 91       	pop	r21
     d86:	4f 91       	pop	r20
     d88:	3f 91       	pop	r19
     d8a:	2f 91       	pop	r18
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	df 90       	pop	r13
     d96:	cf 90       	pop	r12
     d98:	bf 90       	pop	r11
     d9a:	af 90       	pop	r10
     d9c:	9f 90       	pop	r9
     d9e:	8f 90       	pop	r8
     da0:	7f 90       	pop	r7
     da2:	6f 90       	pop	r6
     da4:	5f 90       	pop	r5
     da6:	4f 90       	pop	r4
     da8:	3f 90       	pop	r3
     daa:	2f 90       	pop	r2
     dac:	1f 90       	pop	r1
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     db8:	18 95       	reti

00000dba <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
     dba:	80 b7       	in	r24, 0x30	; 48
     dbc:	80 68       	ori	r24, 0x80	; 128
     dbe:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
     dc0:	e4 e6       	ldi	r30, 0x64	; 100
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	80 66       	ori	r24, 0x60	; 96
     dc8:	80 83       	st	Z, r24
	
	// Watchdog-timer
	// Enabled through the WDTON-fuse-bit. Explicitely disable here.
	// Configure the prescaler -- WDT system-reset after 0,5 s without wdt-instruction.
	WDTCSR = _BV(WDCE);
     dca:	e0 e6       	ldi	r30, 0x60	; 96
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 e1       	ldi	r24, 0x10	; 16
     dd0:	80 83       	st	Z, r24
	// WDP3:0 = 0101 - 0,5s timeout
	WDTCSR |= // _BV(WDP3) |
     dd2:	80 81       	ld	r24, Z
     dd4:	85 60       	ori	r24, 0x05	; 5
     dd6:	80 83       	st	Z, r24
			_BV(WDP0);
	
	// BOD - TODO configure?
	
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
     dd8:	0e 94 01 06 	call	0xc02	; 0xc02 <init_process>
	rr_captureMainProcess(PrioNormal);
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <rr_captureMainProcess>
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     de4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <before_scheduler>
	start_scheduler();
     de8:	0e 94 49 06 	call	0xc92	; 0xc92 <start_scheduler>
}
     dec:	08 95       	ret

00000dee <MyPeriodicJob>:

volatile long long counter = 0;
volatile long long main_counter = 0;

void MyPeriodicJob() {
	counter++;
     dee:	40 91 f8 01 	lds	r20, 0x01F8
     df2:	30 91 f9 01 	lds	r19, 0x01F9
     df6:	20 91 fa 01 	lds	r18, 0x01FA
     dfa:	90 91 fb 01 	lds	r25, 0x01FB
     dfe:	80 91 fc 01 	lds	r24, 0x01FC
     e02:	f0 91 fd 01 	lds	r31, 0x01FD
     e06:	e0 91 fe 01 	lds	r30, 0x01FE
     e0a:	a0 91 ff 01 	lds	r26, 0x01FF
     e0e:	64 2f       	mov	r22, r20
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	51 e0       	ldi	r21, 0x01	; 1
     e14:	64 17       	cp	r22, r20
     e16:	08 f0       	brcs	.+2      	; 0xe1a <MyPeriodicJob+0x2c>
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	53 0f       	add	r21, r19
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	53 17       	cp	r21, r19
     e20:	08 f0       	brcs	.+2      	; 0xe24 <MyPeriodicJob+0x36>
     e22:	40 e0       	ldi	r20, 0x00	; 0
     e24:	42 0f       	add	r20, r18
     e26:	31 e0       	ldi	r19, 0x01	; 1
     e28:	42 17       	cp	r20, r18
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <MyPeriodicJob+0x40>
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	39 0f       	add	r19, r25
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	39 17       	cp	r19, r25
     e34:	08 f0       	brcs	.+2      	; 0xe38 <MyPeriodicJob+0x4a>
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	28 0f       	add	r18, r24
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	28 17       	cp	r18, r24
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <MyPeriodicJob+0x54>
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9f 0f       	add	r25, r31
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	9f 17       	cp	r25, r31
     e48:	08 f0       	brcs	.+2      	; 0xe4c <MyPeriodicJob+0x5e>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	8e 0f       	add	r24, r30
     e4e:	71 e0       	ldi	r23, 0x01	; 1
     e50:	8e 17       	cp	r24, r30
     e52:	08 f0       	brcs	.+2      	; 0xe56 <MyPeriodicJob+0x68>
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	7a 0f       	add	r23, r26
     e58:	60 93 f8 01 	sts	0x01F8, r22
     e5c:	50 93 f9 01 	sts	0x01F9, r21
     e60:	40 93 fa 01 	sts	0x01FA, r20
     e64:	30 93 fb 01 	sts	0x01FB, r19
     e68:	20 93 fc 01 	sts	0x01FC, r18
     e6c:	90 93 fd 01 	sts	0x01FD, r25
     e70:	80 93 fe 01 	sts	0x01FE, r24
     e74:	70 93 ff 01 	sts	0x01FF, r23
}
     e78:	08 95       	ret

00000e7a <before_scheduler>:

void before_scheduler() {
	createPeriodicJob(&MyPeriodicJob, 50, 0);
     e7a:	87 ef       	ldi	r24, 0xF7	; 247
     e7c:	96 e0       	ldi	r25, 0x06	; 6
     e7e:	42 e3       	ldi	r20, 0x32	; 50
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	0e 94 2f 08 	call	0x105e	; 0x105e <createPeriodicJob>
}
     e8c:	08 95       	ret

00000e8e <main>:

int main() {
	// Just let the main pass. Will enter ProcessGraveyard.
	// This is not really the idle-thread, but the infinite sleep-loop inside has the same effect.
	// To really get the idle-thread, comment out the rr_captureMainThread() in the kernel-setup.
}
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	08 95       	ret

00000e94 <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
	PJob job = JobMem(process);
     e9c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
     ea0:	e8 2e       	mov	r14, r24
     ea2:	e7 01       	movw	r28, r14
     ea4:	7e 01       	movw	r14, r28
     ea6:	f9 2e       	mov	r15, r25
     ea8:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
     eaa:	e9 81       	ldd	r30, Y+1	; 0x01
     eac:	fa 81       	ldd	r31, Y+2	; 0x02
     eae:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
     eb0:	1c 86       	std	Y+12, r1	; 0x0c
     eb2:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
     eb4:	0e 94 a7 08 	call	0x114e	; 0x114e <schedule_next>
     eb8:	f8 cf       	rjmp	.-16     	; 0xeaa <AperiodicJobWrapper+0x16>

00000eba <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
	PJob job = JobMem(process);
     ec2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
     ec6:	e8 2e       	mov	r14, r24
     ec8:	e7 01       	movw	r28, r14
     eca:	7e 01       	movw	r14, r28
     ecc:	f9 2e       	mov	r15, r25
     ece:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
     ed0:	e9 81       	ldd	r30, Y+1	; 0x01
     ed2:	fa 81       	ldd	r31, Y+2	; 0x02
     ed4:	09 95       	icall
		periodicJob->nextPeriod += job->period;
     ed6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ed8:	9c 85       	ldd	r25, Y+12	; 0x0c
     eda:	ad 85       	ldd	r26, Y+13	; 0x0d
     edc:	be 85       	ldd	r27, Y+14	; 0x0e
     ede:	2d 81       	ldd	r18, Y+5	; 0x05
     ee0:	3e 81       	ldd	r19, Y+6	; 0x06
     ee2:	4f 81       	ldd	r20, Y+7	; 0x07
     ee4:	58 85       	ldd	r21, Y+8	; 0x08
     ee6:	82 0f       	add	r24, r18
     ee8:	93 1f       	adc	r25, r19
     eea:	a4 1f       	adc	r26, r20
     eec:	b5 1f       	adc	r27, r21
     eee:	8b 87       	std	Y+11, r24	; 0x0b
     ef0:	9c 87       	std	Y+12, r25	; 0x0c
     ef2:	ad 87       	std	Y+13, r26	; 0x0d
     ef4:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
     ef6:	0e 94 a7 08 	call	0x114e	; 0x114e <schedule_next>
     efa:	ea cf       	rjmp	.-44     	; 0xed0 <PeriodicJobWrapper+0x16>

00000efc <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
     f04:	c0 91 12 02 	lds	r28, 0x0212
     f08:	d0 91 13 02 	lds	r29, 0x0213
	while (current) {
     f0c:	25 c0       	rjmp	.+74     	; 0xf58 <dms_schedule+0x5c>
		PJob job = JobMem(current);
     f0e:	ce 01       	movw	r24, r28
     f10:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
     f14:	fc 01       	movw	r30, r24
		switch(job->jobType) {
     f16:	81 85       	ldd	r24, Z+9	; 0x09
     f18:	92 85       	ldd	r25, Z+10	; 0x0a
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	21 f0       	breq	.+8      	; 0xf26 <dms_schedule+0x2a>
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	91 05       	cpc	r25, r1
     f22:	c1 f4       	brne	.+48     	; 0xf54 <dms_schedule+0x58>
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
     f26:	63 85       	ldd	r22, Z+11	; 0x0b
     f28:	74 85       	ldd	r23, Z+12	; 0x0c
     f2a:	85 85       	ldd	r24, Z+13	; 0x0d
     f2c:	96 85       	ldd	r25, Z+14	; 0x0e
     f2e:	20 91 0c 02 	lds	r18, 0x020C
     f32:	30 91 0d 02 	lds	r19, 0x020D
     f36:	40 91 0e 02 	lds	r20, 0x020E
     f3a:	50 91 0f 02 	lds	r21, 0x020F
     f3e:	26 17       	cp	r18, r22
     f40:	37 07       	cpc	r19, r23
     f42:	48 07       	cpc	r20, r24
     f44:	59 07       	cpc	r21, r25
     f46:	30 f0       	brcs	.+12     	; 0xf54 <dms_schedule+0x58>
     f48:	09 c0       	rjmp	.+18     	; 0xf5c <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
     f4a:	83 85       	ldd	r24, Z+11	; 0x0b
     f4c:	94 85       	ldd	r25, Z+12	; 0x0c
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	21 f0       	breq	.+8      	; 0xf5c <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
     f54:	c3 81       	ldd	r28, Z+3	; 0x03
     f56:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
     f58:	20 97       	sbiw	r28, 0x00	; 0
     f5a:	c9 f6       	brne	.-78     	; 0xf0e <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
     f5c:	ce 01       	movw	r24, r28
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	08 95       	ret

00000f68 <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	8c 01       	movw	r16, r24
     f72:	eb 01       	movw	r28, r22
	if (!processListHead) {
     f74:	80 91 12 02 	lds	r24, 0x0212
     f78:	90 91 13 02 	lds	r25, 0x0213
     f7c:	00 97       	sbiw	r24, 0x00	; 0
     f7e:	39 f4       	brne	.+14     	; 0xf8e <insertJobIntoList+0x26>
		processListHead = process;
     f80:	10 93 13 02 	sts	0x0213, r17
     f84:	00 93 12 02 	sts	0x0212, r16
		job->nextJob = NULL;
     f88:	1c 82       	std	Y+4, r1	; 0x04
     f8a:	1b 82       	std	Y+3, r1	; 0x03
     f8c:	2d c0       	rjmp	.+90     	; 0xfe8 <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
     f8e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
     f92:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
     f94:	65 81       	ldd	r22, Z+5	; 0x05
     f96:	76 81       	ldd	r23, Z+6	; 0x06
     f98:	87 81       	ldd	r24, Z+7	; 0x07
     f9a:	90 85       	ldd	r25, Z+8	; 0x08
     f9c:	2d 81       	ldd	r18, Y+5	; 0x05
     f9e:	3e 81       	ldd	r19, Y+6	; 0x06
     fa0:	4f 81       	ldd	r20, Y+7	; 0x07
     fa2:	58 85       	ldd	r21, Y+8	; 0x08
     fa4:	26 17       	cp	r18, r22
     fa6:	37 07       	cpc	r19, r23
     fa8:	48 07       	cpc	r20, r24
     faa:	59 07       	cpc	r21, r25
     fac:	68 f0       	brcs	.+26     	; 0xfc8 <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
     fae:	62 17       	cp	r22, r18
     fb0:	73 07       	cpc	r23, r19
     fb2:	84 07       	cpc	r24, r20
     fb4:	95 07       	cpc	r25, r21
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <insertJobIntoList+0x58>
     fb8:	90 81       	ld	r25, Z
     fba:	88 81       	ld	r24, Y
     fbc:	98 17       	cp	r25, r24
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
     fc0:	83 81       	ldd	r24, Z+3	; 0x03
     fc2:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	19 f7       	brne	.-58     	; 0xf8e <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
     fd0:	fc 01       	movw	r30, r24
     fd2:	83 81       	ldd	r24, Z+3	; 0x03
     fd4:	94 81       	ldd	r25, Z+4	; 0x04
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
     fe2:	fc 01       	movw	r30, r24
     fe4:	14 83       	std	Z+4, r17	; 0x04
     fe6:	03 83       	std	Z+3, r16	; 0x03
	}
}
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     ff2:	6f 92       	push	r6
     ff4:	7f 92       	push	r7
     ff6:	8f 92       	push	r8
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	5c 01       	movw	r10, r24
    1010:	4b 01       	movw	r8, r22
    1012:	69 01       	movw	r12, r18
    1014:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
    1016:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
    101a:	19 2f       	mov	r17, r25
    101c:	68 2e       	mov	r6, r24
    101e:	e3 01       	movw	r28, r6
    1020:	3e 01       	movw	r6, r28
    1022:	79 2e       	mov	r7, r25
    1024:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
    1026:	9a 82       	std	Y+2, r9	; 0x02
    1028:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
    102a:	08 83       	st	Y, r16
	job->period = period;
    102c:	cd 82       	std	Y+5, r12	; 0x05
    102e:	de 82       	std	Y+6, r13	; 0x06
    1030:	ef 82       	std	Y+7, r14	; 0x07
    1032:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
    1034:	c5 01       	movw	r24, r10
    1036:	b3 01       	movw	r22, r6
    1038:	0e 94 b4 07 	call	0xf68	; 0xf68 <insertJobIntoList>
	return job;
}
    103c:	86 2d       	mov	r24, r6
    103e:	91 2f       	mov	r25, r17
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	9f 90       	pop	r9
    1056:	8f 90       	pop	r8
    1058:	7f 90       	pop	r7
    105a:	6f 90       	pop	r6
    105c:	08 95       	ret

0000105e <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    1072:	5a 01       	movw	r10, r20
    1074:	6b 01       	movw	r12, r22
    1076:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
    1078:	40 91 04 01 	lds	r20, 0x0104
    107c:	50 91 05 01 	lds	r21, 0x0105
    1080:	8d e5       	ldi	r24, 0x5D	; 93
    1082:	97 e0       	ldi	r25, 0x07	; 7
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	2f e0       	ldi	r18, 0x0F	; 15
    108a:	0e 94 9b 05 	call	0xb36	; 0xb36 <createProcess3>
    108e:	f8 2e       	mov	r15, r24
    1090:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
    1092:	be 01       	movw	r22, r28
    1094:	a6 01       	movw	r20, r12
    1096:	95 01       	movw	r18, r10
    1098:	0e 94 f9 07 	call	0xff2	; 0xff2 <initializeJob>
    109c:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
    109e:	12 86       	std	Z+10, r1	; 0x0a
    10a0:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
    10a2:	20 91 0c 02 	lds	r18, 0x020C
    10a6:	30 91 0d 02 	lds	r19, 0x020D
    10aa:	40 91 0e 02 	lds	r20, 0x020E
    10ae:	50 91 0f 02 	lds	r21, 0x020F
    10b2:	2a 0d       	add	r18, r10
    10b4:	3b 1d       	adc	r19, r11
    10b6:	4c 1d       	adc	r20, r12
    10b8:	5d 1d       	adc	r21, r13
    10ba:	23 87       	std	Z+11, r18	; 0x0b
    10bc:	34 87       	std	Z+12, r19	; 0x0c
    10be:	45 87       	std	Z+13, r20	; 0x0d
    10c0:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
    10c2:	8f 2d       	mov	r24, r15
    10c4:	91 2f       	mov	r25, r17
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	08 95       	ret

000010da <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
    10ee:	5a 01       	movw	r10, r20
    10f0:	6b 01       	movw	r12, r22
    10f2:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
    10f4:	40 91 04 01 	lds	r20, 0x0104
    10f8:	50 91 05 01 	lds	r21, 0x0105
    10fc:	8a e4       	ldi	r24, 0x4A	; 74
    10fe:	97 e0       	ldi	r25, 0x07	; 7
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	2d e0       	ldi	r18, 0x0D	; 13
    1106:	0e 94 9b 05 	call	0xb36	; 0xb36 <createProcess3>
    110a:	f8 2e       	mov	r15, r24
    110c:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
    110e:	be 01       	movw	r22, r28
    1110:	a6 01       	movw	r20, r12
    1112:	95 01       	movw	r18, r10
    1114:	0e 94 f9 07 	call	0xff2	; 0xff2 <initializeJob>
    1118:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	92 87       	std	Z+10, r25	; 0x0a
    1120:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
    1122:	14 86       	std	Z+12, r1	; 0x0c
    1124:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
    1126:	8f 2d       	mov	r24, r15
    1128:	91 2f       	mov	r25, r17
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	08 95       	ret

0000113e <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
    113e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <getProcessMemory>
    1142:	21 e0       	ldi	r18, 0x01	; 1
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	fc 01       	movw	r30, r24
    1148:	34 87       	std	Z+12, r19	; 0x0c
    114a:	23 87       	std	Z+11, r18	; 0x0b
}
    114c:	08 95       	ret

0000114e <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 50 06 	call	0xca0	; 0xca0 <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	11 f0       	breq	.+4      	; 0x115e <schedule_next+0x10>
	switchProcess(next); // Will not return here.
    115a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <switchProcess>
    115e:	08 95       	ret

00001160 <processor_idle>:
}

void processor_idle() {
	sleep_enable();
    1160:	83 b7       	in	r24, 0x33	; 51
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
    1166:	83 b7       	in	r24, 0x33	; 51
    1168:	81 7f       	andi	r24, 0xF1	; 241
    116a:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
    116c:	78 94       	sei
	sleep_cpu();
    116e:	88 95       	sleep
}
    1170:	08 95       	ret

00001172 <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
    1172:	0e 94 b0 08 	call	0x1160	; 0x1160 <processor_idle>
    1176:	fd cf       	rjmp	.-6      	; 0x1172 <processor_loop_idle>

00001178 <stopMotor>:
#include "motor.h"
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

void stopMotor(PMotor motor) {
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
	disableOutputCompare(motor->pwmTimer);
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <disableOutputCompare>
	// This is mainly to still read the speed as zero.
	setTimerCompareValue(motor->pwmTimer, 0);
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <setTimerCompareValue>
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1192:	88 81       	ld	r24, Y
    1194:	83 ff       	sbrs	r24, 3
    1196:	08 c0       	rjmp	.+16     	; 0x11a8 <stopMotor+0x30>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <setPinZero>
		setPinZero(Dir2(motor));
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <setPinZero>
	}
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    11ae:	fc 01       	movw	r30, r24
    11b0:	83 81       	ldd	r24, Z+3	; 0x03
    11b2:	94 81       	ldd	r25, Z+4	; 0x04
    11b4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <getTimerCompareValue>
}
    11b8:	08 95       	ret

000011ba <getDirection>:

MotorDirection getDirection(PMotor motor) {
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    11c4:	28 81       	ld	r18, Y
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	23 ff       	sbrs	r18, 3
    11cc:	12 c0       	rjmp	.+36     	; 0x11f2 <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
    11ce:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <readPin>
    11d2:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <readPin>
		if (dir1 && !dir2) val = FORWARD;
    11dc:	01 15       	cp	r16, r1
    11de:	11 05       	cpc	r17, r1
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <getDirection+0x2e>
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	e9 f0       	breq	.+58     	; 0x1220 <getDirection+0x66>
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	e9 f4       	brne	.+58     	; 0x1226 <getDirection+0x6c>
    11ec:	22 e0       	ldi	r18, 0x02	; 2
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	11 c0       	rjmp	.+34     	; 0x1214 <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
    11f2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <readPin>
    11f6:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	91 05       	cpc	r25, r1
    11fc:	59 f0       	breq	.+22     	; 0x1214 <getDirection+0x5a>
    11fe:	88 81       	ld	r24, Y
    1200:	82 ff       	sbrs	r24, 2
    1202:	08 c0       	rjmp	.+16     	; 0x1214 <getDirection+0x5a>
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	21 15       	cp	r18, r1
    120a:	31 05       	cpc	r19, r1
    120c:	11 f0       	breq	.+4      	; 0x1212 <getDirection+0x58>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 01       	movw	r18, r24
	return val;
}
    1214:	c9 01       	movw	r24, r18
    1216:	df 91       	pop	r29
    1218:	cf 91       	pop	r28
    121a:	1f 91       	pop	r17
    121c:	0f 91       	pop	r16
    121e:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	ec cf       	rjmp	.-40     	; 0x11fe <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	e9 cf       	rjmp	.-46     	; 0x11fe <getDirection+0x44>

0000122c <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ec 01       	movw	r28, r24
    1236:	8b 01       	movw	r16, r22
    1238:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
    123a:	42 30       	cpi	r20, 0x02	; 2
    123c:	51 05       	cpc	r21, r1
    123e:	19 f0       	breq	.+6      	; 0x1246 <setSpeed+0x1a>
    1240:	01 15       	cp	r16, r1
    1242:	11 05       	cpc	r17, r1
    1244:	21 f4       	brne	.+8      	; 0x124e <setSpeed+0x22>
		stopMotor(motor);
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 bc 08 	call	0x1178	; 0x1178 <stopMotor>
		return;
    124c:	2d c0       	rjmp	.+90     	; 0x12a8 <setSpeed+0x7c>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
    124e:	28 81       	ld	r18, Y
    1250:	22 ff       	sbrs	r18, 2
    1252:	08 c0       	rjmp	.+16     	; 0x1264 <setSpeed+0x38>
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	41 15       	cp	r20, r1
    125a:	51 05       	cpc	r21, r1
    125c:	11 f0       	breq	.+4      	; 0x1262 <setSpeed+0x36>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1264:	23 ff       	sbrs	r18, 3
    1266:	13 c0       	rjmp	.+38     	; 0x128e <setSpeed+0x62>
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
    126c:	61 15       	cp	r22, r1
    126e:	71 05       	cpc	r23, r1
    1270:	39 f4       	brne	.+14     	; 0x1280 <setSpeed+0x54>
			setPinOne(motor->direction);
    1272:	0e 94 cd 09 	call	0x139a	; 0x139a <setPinOne>
			setPinZero(Dir2(motor));
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <setPinZero>
    127e:	0b c0       	rjmp	.+22     	; 0x1296 <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
    1280:	0e 94 db 09 	call	0x13b6	; 0x13b6 <setPinZero>
			setPinOne(Dir2(motor));
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	0e 94 cd 09 	call	0x139a	; 0x139a <setPinOne>
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <writePin>
	}
	setTimerCompareValue(motor->pwmTimer, speed);
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	b8 01       	movw	r22, r16
    129c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <setTimerCompareValue>
	enableOutputCompare(motor->pwmTimer);
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	0e 94 4f 0b 	call	0x169e	; 0x169e <enableOutputCompare>
}
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	08 95       	ret

000012b2 <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	0e 94 16 09 	call	0x122c	; 0x122c <setSpeed>
}
    12ba:	08 95       	ret

000012bc <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	0e 94 16 09 	call	0x122c	; 0x122c <setSpeed>
}
    12c4:	08 95       	ret

000012c6 <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
    12d0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <getDirection>
    12d4:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	91 05       	cpc	r25, r1
    12da:	79 f0       	breq	.+30     	; 0x12fa <getDirSpeed+0x34>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    12dc:	f8 01       	movw	r30, r16
    12de:	83 81       	ldd	r24, Z+3	; 0x03
    12e0:	94 81       	ldd	r25, Z+4	; 0x04
    12e2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
    12e6:	9c 01       	movw	r18, r24
    12e8:	36 95       	lsr	r19
    12ea:	27 95       	ror	r18
	if (dir == BACKWARD)
    12ec:	c1 30       	cpi	r28, 0x01	; 1
    12ee:	d1 05       	cpc	r29, r1
    12f0:	31 f4       	brne	.+12     	; 0x12fe <getDirSpeed+0x38>
		val *= -1; // Should be optimized away by compiler.
    12f2:	30 95       	com	r19
    12f4:	21 95       	neg	r18
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <getDirSpeed+0x38>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
    12fe:	c9 01       	movw	r24, r18
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
    130a:	47 2f       	mov	r20, r23
	uint16_t absv = abs(speed);
    130c:	77 ff       	sbrs	r23, 7
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <setDirSpeed+0xc>
    1310:	70 95       	com	r23
    1312:	61 95       	neg	r22
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
	setSpeed(motor, absv, speed < 0 ? BACKWARD : FORWARD);
    131a:	44 1f       	adc	r20, r20
    131c:	44 27       	eor	r20, r20
    131e:	44 1f       	adc	r20, r20
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	0e 94 16 09 	call	0x122c	; 0x122c <setSpeed>
}
    1326:	08 95       	ret

00001328 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1328:	dc 01       	movw	r26, r24
    132a:	14 96       	adiw	r26, 0x04	; 4
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	15 97       	sbiw	r26, 0x05	; 5
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	80 83       	st	Z, r24
}
    1336:	08 95       	ret

00001338 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1338:	dc 01       	movw	r26, r24
    133a:	14 96       	adiw	r26, 0x04	; 4
    133c:	ed 91       	ld	r30, X+
    133e:	fc 91       	ld	r31, X
    1340:	15 97       	sbiw	r26, 0x05	; 5
    1342:	10 82       	st	Z, r1
}
    1344:	08 95       	ret

00001346 <setPinOutput>:

void setPinOutput(PPin pin) {
    1346:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1348:	ed 91       	ld	r30, X+
    134a:	fc 91       	ld	r31, X
    134c:	11 97       	sbiw	r26, 0x01	; 1
    134e:	04 80       	ldd	r0, Z+4	; 0x04
    1350:	f5 81       	ldd	r31, Z+5	; 0x05
    1352:	e0 2d       	mov	r30, r0
    1354:	80 81       	ld	r24, Z
    1356:	12 96       	adiw	r26, 0x02	; 2
    1358:	9c 91       	ld	r25, X
    135a:	12 97       	sbiw	r26, 0x02	; 2
    135c:	89 2b       	or	r24, r25
    135e:	80 83       	st	Z, r24
}
    1360:	08 95       	ret

00001362 <setPinInput>:

void setPinInput(PPin pin) {
    1362:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1364:	ed 91       	ld	r30, X+
    1366:	fc 91       	ld	r31, X
    1368:	11 97       	sbiw	r26, 0x01	; 1
    136a:	04 80       	ldd	r0, Z+4	; 0x04
    136c:	f5 81       	ldd	r31, Z+5	; 0x05
    136e:	e0 2d       	mov	r30, r0
    1370:	90 81       	ld	r25, Z
    1372:	12 96       	adiw	r26, 0x02	; 2
    1374:	8c 91       	ld	r24, X
    1376:	12 97       	sbiw	r26, 0x02	; 2
    1378:	80 95       	com	r24
    137a:	89 23       	and	r24, r25
    137c:	80 83       	st	Z, r24
}
    137e:	08 95       	ret

00001380 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    1380:	dc 01       	movw	r26, r24
    1382:	ed 91       	ld	r30, X+
    1384:	fc 91       	ld	r31, X
    1386:	11 97       	sbiw	r26, 0x01	; 1
    1388:	60 83       	st	Z, r22
}
    138a:	08 95       	ret

0000138c <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    138c:	dc 01       	movw	r26, r24
    138e:	12 96       	adiw	r26, 0x02	; 2
    1390:	ed 91       	ld	r30, X+
    1392:	fc 91       	ld	r31, X
    1394:	13 97       	sbiw	r26, 0x03	; 3
    1396:	80 81       	ld	r24, Z
}
    1398:	08 95       	ret

0000139a <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    139a:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	11 97       	sbiw	r26, 0x01	; 1
    13a2:	01 90       	ld	r0, Z+
    13a4:	f0 81       	ld	r31, Z
    13a6:	e0 2d       	mov	r30, r0
    13a8:	80 81       	ld	r24, Z
    13aa:	12 96       	adiw	r26, 0x02	; 2
    13ac:	9c 91       	ld	r25, X
    13ae:	12 97       	sbiw	r26, 0x02	; 2
    13b0:	89 2b       	or	r24, r25
    13b2:	80 83       	st	Z, r24
}
    13b4:	08 95       	ret

000013b6 <setPinZero>:

void setPinZero(PPin pin) {
    13b6:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    13b8:	ed 91       	ld	r30, X+
    13ba:	fc 91       	ld	r31, X
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	01 90       	ld	r0, Z+
    13c0:	f0 81       	ld	r31, Z
    13c2:	e0 2d       	mov	r30, r0
    13c4:	90 81       	ld	r25, Z
    13c6:	12 96       	adiw	r26, 0x02	; 2
    13c8:	8c 91       	ld	r24, X
    13ca:	12 97       	sbiw	r26, 0x02	; 2
    13cc:	80 95       	com	r24
    13ce:	89 23       	and	r24, r25
    13d0:	80 83       	st	Z, r24
}
    13d2:	08 95       	ret

000013d4 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    13d4:	61 15       	cp	r22, r1
    13d6:	71 05       	cpc	r23, r1
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <writePin+0xc>
    13da:	0e 94 cd 09 	call	0x139a	; 0x139a <setPinOne>
    13de:	08 95       	ret
	else setPinZero(pin);
    13e0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <setPinZero>
    13e4:	08 95       	ret

000013e6 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    13e6:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    13e8:	a0 81       	ld	r26, Z
    13ea:	b1 81       	ldd	r27, Z+1	; 0x01
    13ec:	12 96       	adiw	r26, 0x02	; 2
    13ee:	0d 90       	ld	r0, X+
    13f0:	bc 91       	ld	r27, X
    13f2:	a0 2d       	mov	r26, r0
    13f4:	8c 91       	ld	r24, X
    13f6:	92 81       	ldd	r25, Z+2	; 0x02
    13f8:	89 23       	and	r24, r25
		return TRUE;
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	11 f4       	brne	.+4      	; 0x1404 <readPin+0x1e>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1404:	c9 01       	movw	r24, r18
    1406:	08 95       	ret

00001408 <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    1408:	fc 01       	movw	r30, r24
    140a:	64 30       	cpi	r22, 0x04	; 4
    140c:	71 05       	cpc	r23, r1
    140e:	48 f4       	brcc	.+18     	; 0x1422 <setCompareMatchOutputMode+0x1a>
    1410:	db 01       	movw	r26, r22
    1412:	a6 51       	subi	r26, 0x16	; 22
    1414:	be 4f       	sbci	r27, 0xFE	; 254
    1416:	2c 91       	ld	r18, X
    1418:	62 51       	subi	r22, 0x12	; 18
    141a:	7e 4f       	sbci	r23, 0xFE	; 254
    141c:	db 01       	movw	r26, r22
    141e:	3c 91       	ld	r19, X
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <setCompareMatchOutputMode+0x1e>
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
    1426:	84 81       	ldd	r24, Z+4	; 0x04
    1428:	95 81       	ldd	r25, Z+5	; 0x05
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	21 f4       	brne	.+8      	; 0x1438 <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
    1430:	36 95       	lsr	r19
    1432:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
    1434:	26 95       	lsr	r18
    1436:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    1438:	a0 81       	ld	r26, Z
    143a:	b1 81       	ldd	r27, Z+1	; 0x01
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	0d 90       	ld	r0, X+
    1440:	bc 91       	ld	r27, X
    1442:	a0 2d       	mov	r26, r0
    1444:	8c 91       	ld	r24, X
    1446:	83 2b       	or	r24, r19
    1448:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    144a:	01 90       	ld	r0, Z+
    144c:	f0 81       	ld	r31, Z
    144e:	e0 2d       	mov	r30, r0
    1450:	01 80       	ldd	r0, Z+1	; 0x01
    1452:	f2 81       	ldd	r31, Z+2	; 0x02
    1454:	e0 2d       	mov	r30, r0
    1456:	80 81       	ld	r24, Z
    1458:	20 95       	com	r18
    145a:	28 23       	and	r18, r24
    145c:	20 83       	st	Z, r18
}
    145e:	08 95       	ret

00001460 <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
    1460:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    1462:	80 81       	ld	r24, Z
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	82 70       	andi	r24, 0x02	; 2
    1468:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    146a:	64 30       	cpi	r22, 0x04	; 4
    146c:	71 05       	cpc	r23, r1
    146e:	71 f1       	breq	.+92     	; 0x14cc <setTimerClockSelect+0x6c>
    1470:	65 30       	cpi	r22, 0x05	; 5
    1472:	71 05       	cpc	r23, r1
    1474:	68 f4       	brcc	.+26     	; 0x1490 <setTimerClockSelect+0x30>
    1476:	61 30       	cpi	r22, 0x01	; 1
    1478:	71 05       	cpc	r23, r1
    147a:	f9 f0       	breq	.+62     	; 0x14ba <setTimerClockSelect+0x5a>
    147c:	61 30       	cpi	r22, 0x01	; 1
    147e:	71 05       	cpc	r23, r1
    1480:	d8 f1       	brcs	.+118    	; 0x14f8 <setTimerClockSelect+0x98>
    1482:	62 30       	cpi	r22, 0x02	; 2
    1484:	71 05       	cpc	r23, r1
    1486:	e1 f0       	breq	.+56     	; 0x14c0 <setTimerClockSelect+0x60>
    1488:	63 30       	cpi	r22, 0x03	; 3
    148a:	71 05       	cpc	r23, r1
    148c:	a1 f4       	brne	.+40     	; 0x14b6 <setTimerClockSelect+0x56>
    148e:	1b c0       	rjmp	.+54     	; 0x14c6 <setTimerClockSelect+0x66>
    1490:	67 30       	cpi	r22, 0x07	; 7
    1492:	71 05       	cpc	r23, r1
    1494:	21 f1       	breq	.+72     	; 0x14de <setTimerClockSelect+0x7e>
    1496:	68 30       	cpi	r22, 0x08	; 8
    1498:	71 05       	cpc	r23, r1
    149a:	38 f4       	brcc	.+14     	; 0x14aa <setTimerClockSelect+0x4a>
    149c:	65 30       	cpi	r22, 0x05	; 5
    149e:	71 05       	cpc	r23, r1
    14a0:	c1 f0       	breq	.+48     	; 0x14d2 <setTimerClockSelect+0x72>
    14a2:	66 30       	cpi	r22, 0x06	; 6
    14a4:	71 05       	cpc	r23, r1
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <setTimerClockSelect+0x56>
    14a8:	17 c0       	rjmp	.+46     	; 0x14d8 <setTimerClockSelect+0x78>
    14aa:	68 30       	cpi	r22, 0x08	; 8
    14ac:	71 05       	cpc	r23, r1
    14ae:	d1 f0       	breq	.+52     	; 0x14e4 <setTimerClockSelect+0x84>
    14b0:	69 30       	cpi	r22, 0x09	; 9
    14b2:	71 05       	cpc	r23, r1
    14b4:	e1 f0       	breq	.+56     	; 0x14ee <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	1d c0       	rjmp	.+58     	; 0x14f4 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    14ba:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    14bc:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    14be:	27 c0       	rjmp	.+78     	; 0x150e <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    14c0:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    14c2:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    14c4:	24 c0       	rjmp	.+72     	; 0x150e <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	e9 f4       	brne	.+58     	; 0x1504 <setTimerClockSelect+0xa4>
    14ca:	2d c0       	rjmp	.+90     	; 0x1526 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	b9 f0       	breq	.+46     	; 0x14fe <setTimerClockSelect+0x9e>
    14d0:	19 c0       	rjmp	.+50     	; 0x1504 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	d1 f4       	brne	.+52     	; 0x150a <setTimerClockSelect+0xaa>
    14d6:	27 c0       	rjmp	.+78     	; 0x1526 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	a1 f0       	breq	.+40     	; 0x1504 <setTimerClockSelect+0xa4>
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	a1 f0       	breq	.+40     	; 0x150a <setTimerClockSelect+0xaa>
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	f9 f4       	brne	.+62     	; 0x1526 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    14e8:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	10 c0       	rjmp	.+32     	; 0x150e <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	d1 f4       	brne	.+52     	; 0x1526 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    14f2:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    14f8:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    14fa:	87 e0       	ldi	r24, 0x07	; 7
    14fc:	08 c0       	rjmp	.+16     	; 0x150e <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    14fe:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    1500:	84 e0       	ldi	r24, 0x04	; 4
    1502:	05 c0       	rjmp	.+10     	; 0x150e <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    1504:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	02 c0       	rjmp	.+4      	; 0x150e <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    150a:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    150c:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    150e:	a3 81       	ldd	r26, Z+3	; 0x03
    1510:	b4 81       	ldd	r27, Z+4	; 0x04
    1512:	2c 91       	ld	r18, X
    1514:	29 2b       	or	r18, r25
    1516:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    1518:	03 80       	ldd	r0, Z+3	; 0x03
    151a:	f4 81       	ldd	r31, Z+4	; 0x04
    151c:	e0 2d       	mov	r30, r0
    151e:	90 81       	ld	r25, Z
    1520:	80 95       	com	r24
    1522:	89 23       	and	r24, r25
    1524:	80 83       	st	Z, r24
    1526:	08 95       	ret

00001528 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
    1528:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    152a:	80 81       	ld	r24, Z
    152c:	82 ff       	sbrs	r24, 2
    152e:	54 c0       	rjmp	.+168    	; 0x15d8 <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    1530:	65 30       	cpi	r22, 0x05	; 5
    1532:	71 05       	cpc	r23, r1
    1534:	b9 f1       	breq	.+110    	; 0x15a4 <setWaveformGenerationMode+0x7c>
    1536:	66 30       	cpi	r22, 0x06	; 6
    1538:	71 05       	cpc	r23, r1
    153a:	b0 f4       	brcc	.+44     	; 0x1568 <setWaveformGenerationMode+0x40>
    153c:	62 30       	cpi	r22, 0x02	; 2
    153e:	71 05       	cpc	r23, r1
    1540:	69 f1       	breq	.+90     	; 0x159c <setWaveformGenerationMode+0x74>
    1542:	63 30       	cpi	r22, 0x03	; 3
    1544:	71 05       	cpc	r23, r1
    1546:	40 f4       	brcc	.+16     	; 0x1558 <setWaveformGenerationMode+0x30>
    1548:	61 15       	cp	r22, r1
    154a:	71 05       	cpc	r23, r1
    154c:	19 f1       	breq	.+70     	; 0x1594 <setWaveformGenerationMode+0x6c>
    154e:	61 30       	cpi	r22, 0x01	; 1
    1550:	71 05       	cpc	r23, r1
    1552:	09 f0       	breq	.+2      	; 0x1556 <setWaveformGenerationMode+0x2e>
    1554:	8f c0       	rjmp	.+286    	; 0x1674 <setWaveformGenerationMode+0x14c>
    1556:	6e c0       	rjmp	.+220    	; 0x1634 <setWaveformGenerationMode+0x10c>
    1558:	63 30       	cpi	r22, 0x03	; 3
    155a:	71 05       	cpc	r23, r1
    155c:	29 f1       	breq	.+74     	; 0x15a8 <setWaveformGenerationMode+0x80>
    155e:	64 30       	cpi	r22, 0x04	; 4
    1560:	71 05       	cpc	r23, r1
    1562:	09 f0       	breq	.+2      	; 0x1566 <setWaveformGenerationMode+0x3e>
    1564:	87 c0       	rjmp	.+270    	; 0x1674 <setWaveformGenerationMode+0x14c>
    1566:	24 c0       	rjmp	.+72     	; 0x15b0 <setWaveformGenerationMode+0x88>
    1568:	68 30       	cpi	r22, 0x08	; 8
    156a:	71 05       	cpc	r23, r1
    156c:	29 f1       	breq	.+74     	; 0x15b8 <setWaveformGenerationMode+0x90>
    156e:	69 30       	cpi	r22, 0x09	; 9
    1570:	71 05       	cpc	r23, r1
    1572:	40 f4       	brcc	.+16     	; 0x1584 <setWaveformGenerationMode+0x5c>
    1574:	66 30       	cpi	r22, 0x06	; 6
    1576:	71 05       	cpc	r23, r1
    1578:	39 f1       	breq	.+78     	; 0x15c8 <setWaveformGenerationMode+0xa0>
    157a:	67 30       	cpi	r22, 0x07	; 7
    157c:	71 05       	cpc	r23, r1
    157e:	09 f0       	breq	.+2      	; 0x1582 <setWaveformGenerationMode+0x5a>
    1580:	79 c0       	rjmp	.+242    	; 0x1674 <setWaveformGenerationMode+0x14c>
    1582:	26 c0       	rjmp	.+76     	; 0x15d0 <setWaveformGenerationMode+0xa8>
    1584:	69 30       	cpi	r22, 0x09	; 9
    1586:	71 05       	cpc	r23, r1
    1588:	d9 f0       	breq	.+54     	; 0x15c0 <setWaveformGenerationMode+0x98>
    158a:	6a 30       	cpi	r22, 0x0A	; 10
    158c:	71 05       	cpc	r23, r1
    158e:	09 f0       	breq	.+2      	; 0x1592 <setWaveformGenerationMode+0x6a>
    1590:	71 c0       	rjmp	.+226    	; 0x1674 <setWaveformGenerationMode+0x14c>
    1592:	10 c0       	rjmp	.+32     	; 0x15b4 <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1594:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1596:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1598:	88 e1       	ldi	r24, 0x18	; 24
    159a:	4f c0       	rjmp	.+158    	; 0x163a <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    159c:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    159e:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    15a0:	80 e1       	ldi	r24, 0x10	; 16
    15a2:	46 c0       	rjmp	.+140    	; 0x1630 <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
    15a4:	98 e1       	ldi	r25, 0x18	; 24
    15a6:	3a c0       	rjmp	.+116    	; 0x161c <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    15a8:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    15aa:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    15ac:	88 e1       	ldi	r24, 0x18	; 24
    15ae:	40 c0       	rjmp	.+128    	; 0x1630 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
    15b0:	90 e1       	ldi	r25, 0x10	; 16
    15b2:	2f c0       	rjmp	.+94     	; 0x1612 <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    15b4:	90 e1       	ldi	r25, 0x10	; 16
    15b6:	36 c0       	rjmp	.+108    	; 0x1624 <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
    15b8:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
    15ba:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    15bc:	80 e1       	ldi	r24, 0x10	; 16
    15be:	42 c0       	rjmp	.+132    	; 0x1644 <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
    15c0:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
    15c2:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    15c4:	80 e1       	ldi	r24, 0x10	; 16
    15c6:	27 c0       	rjmp	.+78     	; 0x1616 <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    15c8:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
    15ca:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    15cc:	88 e1       	ldi	r24, 0x18	; 24
    15ce:	3a c0       	rjmp	.+116    	; 0x1644 <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    15d0:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
    15d2:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    15d4:	88 e1       	ldi	r24, 0x18	; 24
    15d6:	1f c0       	rjmp	.+62     	; 0x1616 <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    15d8:	62 30       	cpi	r22, 0x02	; 2
    15da:	71 05       	cpc	r23, r1
    15dc:	c9 f0       	breq	.+50     	; 0x1610 <setWaveformGenerationMode+0xe8>
    15de:	63 30       	cpi	r22, 0x03	; 3
    15e0:	71 05       	cpc	r23, r1
    15e2:	40 f4       	brcc	.+16     	; 0x15f4 <setWaveformGenerationMode+0xcc>
    15e4:	61 15       	cp	r22, r1
    15e6:	71 05       	cpc	r23, r1
    15e8:	79 f0       	breq	.+30     	; 0x1608 <setWaveformGenerationMode+0xe0>
    15ea:	61 30       	cpi	r22, 0x01	; 1
    15ec:	71 05       	cpc	r23, r1
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <setWaveformGenerationMode+0xca>
    15f0:	41 c0       	rjmp	.+130    	; 0x1674 <setWaveformGenerationMode+0x14c>
    15f2:	25 c0       	rjmp	.+74     	; 0x163e <setWaveformGenerationMode+0x116>
    15f4:	64 30       	cpi	r22, 0x04	; 4
    15f6:	71 05       	cpc	r23, r1
    15f8:	c1 f0       	breq	.+48     	; 0x162a <setWaveformGenerationMode+0x102>
    15fa:	64 30       	cpi	r22, 0x04	; 4
    15fc:	71 05       	cpc	r23, r1
    15fe:	88 f0       	brcs	.+34     	; 0x1622 <setWaveformGenerationMode+0xfa>
    1600:	65 30       	cpi	r22, 0x05	; 5
    1602:	71 05       	cpc	r23, r1
    1604:	b9 f5       	brne	.+110    	; 0x1674 <setWaveformGenerationMode+0x14c>
    1606:	09 c0       	rjmp	.+18     	; 0x161a <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1608:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    160a:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    160c:	88 e0       	ldi	r24, 0x08	; 8
    160e:	15 c0       	rjmp	.+42     	; 0x163a <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1610:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
    1612:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
    1614:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    1616:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    161a:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
    161c:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	fa cf       	rjmp	.-12     	; 0x1616 <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1622:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    1624:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    1626:	88 e0       	ldi	r24, 0x08	; 8
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    162a:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    162c:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    162e:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    1630:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1634:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1636:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    1638:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    163a:	23 e0       	ldi	r18, 0x03	; 3
    163c:	04 c0       	rjmp	.+8      	; 0x1646 <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    163e:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    1640:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1642:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    1644:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    1646:	a1 81       	ldd	r26, Z+1	; 0x01
    1648:	b2 81       	ldd	r27, Z+2	; 0x02
    164a:	4c 91       	ld	r20, X
    164c:	43 2b       	or	r20, r19
    164e:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    1650:	a1 81       	ldd	r26, Z+1	; 0x01
    1652:	b2 81       	ldd	r27, Z+2	; 0x02
    1654:	3c 91       	ld	r19, X
    1656:	20 95       	com	r18
    1658:	23 23       	and	r18, r19
    165a:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    165c:	a3 81       	ldd	r26, Z+3	; 0x03
    165e:	b4 81       	ldd	r27, Z+4	; 0x04
    1660:	2c 91       	ld	r18, X
    1662:	29 2b       	or	r18, r25
    1664:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    1666:	03 80       	ldd	r0, Z+3	; 0x03
    1668:	f4 81       	ldd	r31, Z+4	; 0x04
    166a:	e0 2d       	mov	r30, r0
    166c:	90 81       	ld	r25, Z
    166e:	80 95       	com	r24
    1670:	89 23       	and	r24, r25
    1672:	80 83       	st	Z, r24
    1674:	08 95       	ret

00001676 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    1676:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    1678:	ed 91       	ld	r30, X+
    167a:	fc 91       	ld	r31, X
    167c:	11 97       	sbiw	r26, 0x01	; 1
    167e:	05 80       	ldd	r0, Z+5	; 0x05
    1680:	f6 81       	ldd	r31, Z+6	; 0x06
    1682:	e0 2d       	mov	r30, r0
    1684:	20 81       	ld	r18, Z
    1686:	14 96       	adiw	r26, 0x04	; 4
    1688:	8d 91       	ld	r24, X+
    168a:	9c 91       	ld	r25, X
    168c:	15 97       	sbiw	r26, 0x05	; 5
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	11 f4       	brne	.+4      	; 0x1696 <enableTimerInterrupt+0x20>
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <enableTimerInterrupt+0x22>
    1696:	84 e0       	ldi	r24, 0x04	; 4
    1698:	82 2b       	or	r24, r18
    169a:	80 83       	st	Z, r24
}
    169c:	08 95       	ret

0000169e <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    16a4:	8e 81       	ldd	r24, Y+6	; 0x06
    16a6:	9f 81       	ldd	r25, Y+7	; 0x07
    16a8:	0e 94 a3 09 	call	0x1346	; 0x1346 <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
    16ac:	ce 01       	movw	r24, r28
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	0e 94 04 0a 	call	0x1408	; 0x1408 <setCompareMatchOutputMode>
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	0e 94 04 0a 	call	0x1408	; 0x1408 <setCompareMatchOutputMode>
}
    16c4:	08 95       	ret

000016c6 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    16c6:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    16c8:	a0 81       	ld	r26, Z
    16ca:	b1 81       	ldd	r27, Z+1	; 0x01
    16cc:	8c 91       	ld	r24, X
    16ce:	82 ff       	sbrs	r24, 2
    16d0:	0d c0       	rjmp	.+26     	; 0x16ec <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    16d2:	8f b7       	in	r24, 0x3f	; 63
		cli();
    16d4:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    16d6:	a2 81       	ldd	r26, Z+2	; 0x02
    16d8:	b3 81       	ldd	r27, Z+3	; 0x03
    16da:	11 96       	adiw	r26, 0x01	; 1
    16dc:	7c 93       	st	X, r23
    16de:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    16e0:	02 80       	ldd	r0, Z+2	; 0x02
    16e2:	f3 81       	ldd	r31, Z+3	; 0x03
    16e4:	e0 2d       	mov	r30, r0
    16e6:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    16e8:	8f bf       	out	0x3f, r24	; 63
    16ea:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    16ec:	02 80       	ldd	r0, Z+2	; 0x02
    16ee:	f3 81       	ldd	r31, Z+3	; 0x03
    16f0:	e0 2d       	mov	r30, r0
    16f2:	70 83       	st	Z, r23
    16f4:	08 95       	ret

000016f6 <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    16f6:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    16f8:	a0 81       	ld	r26, Z
    16fa:	b1 81       	ldd	r27, Z+1	; 0x01
    16fc:	8c 91       	ld	r24, X
    16fe:	82 ff       	sbrs	r24, 2
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    1702:	2f b7       	in	r18, 0x3f	; 63
		cli();
    1704:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
    1706:	02 80       	ldd	r0, Z+2	; 0x02
    1708:	f3 81       	ldd	r31, Z+3	; 0x03
    170a:	e0 2d       	mov	r30, r0
    170c:	80 81       	ld	r24, Z
    170e:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
    1710:	2f bf       	out	0x3f, r18	; 63
    1712:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    1714:	02 80       	ldd	r0, Z+2	; 0x02
    1716:	f3 81       	ldd	r31, Z+3	; 0x03
    1718:	e0 2d       	mov	r30, r0
    171a:	90 81       	ld	r25, Z
    171c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
    171e:	08 95       	ret

00001720 <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	8c 01       	movw	r16, r24
    172a:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	64 e0       	ldi	r22, 0x04	; 4
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <calloc>
    1738:	fc 01       	movw	r30, r24
	elem->thread = thread;
    173a:	11 83       	std	Z+1, r17	; 0x01
    173c:	00 83       	st	Z, r16
	elem->next = queue->first;
    173e:	de 01       	movw	r26, r28
    1740:	aa 0f       	add	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	aa 0f       	add	r26, r26
    1746:	bb 1f       	adc	r27, r27
    1748:	ac 0f       	add	r26, r28
    174a:	bd 1f       	adc	r27, r29
    174c:	a6 5a       	subi	r26, 0xA6	; 166
    174e:	bc 4f       	sbci	r27, 0xFC	; 252
    1750:	8d 91       	ld	r24, X+
    1752:	9c 91       	ld	r25, X
    1754:	11 97       	sbiw	r26, 0x01	; 1
    1756:	93 83       	std	Z+3, r25	; 0x03
    1758:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	fc 93       	st	X, r31
    175e:	ee 93       	st	-X, r30
	if (queue->count == 0)
    1760:	14 96       	adiw	r26, 0x04	; 4
    1762:	8c 91       	ld	r24, X
    1764:	14 97       	sbiw	r26, 0x04	; 4
    1766:	88 23       	and	r24, r24
    1768:	21 f4       	brne	.+8      	; 0x1772 <insertThreadIntoQueue+0x52>
		queue->current = elem;
    176a:	13 96       	adiw	r26, 0x03	; 3
    176c:	fc 93       	st	X, r31
    176e:	ee 93       	st	-X, r30
    1770:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
    1772:	fe 01       	movw	r30, r28
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	ec 0f       	add	r30, r28
    177e:	fd 1f       	adc	r31, r29
    1780:	e6 5a       	subi	r30, 0xA6	; 166
    1782:	fc 4f       	sbci	r31, 0xFC	; 252
    1784:	84 81       	ldd	r24, Z+4	; 0x04
    1786:	8f 5f       	subi	r24, 0xFF	; 255
    1788:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
    178a:	80 91 10 02 	lds	r24, 0x0210
    178e:	90 91 11 02 	lds	r25, 0x0211
    1792:	8c 17       	cp	r24, r28
    1794:	9d 07       	cpc	r25, r29
    1796:	20 f4       	brcc	.+8      	; 0x17a0 <insertThreadIntoQueue+0x80>
    1798:	d0 93 11 02 	sts	0x0211, r29
    179c:	c0 93 10 02 	sts	0x0210, r28
}
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
    17b4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <createProcess>
    17b8:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    17ba:	be 01       	movw	r22, r28
    17bc:	0e 94 90 0b 	call	0x1720	; 0x1720 <insertThreadIntoQueue>
	return thread;
}
    17c0:	c8 01       	movw	r24, r16
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
    17cc:	63 e0       	ldi	r22, 0x03	; 3
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <createThread2>
}
    17d4:	08 95       	ret

000017d6 <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	eb 01       	movw	r28, r22
    17e0:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
    17e2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <createProcess2>
    17e6:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    17e8:	be 01       	movw	r22, r28
    17ea:	0e 94 90 0b 	call	0x1720	; 0x1720 <insertThreadIntoQueue>
	return thread;
}
    17ee:	c8 01       	movw	r24, r16
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	eb 01       	movw	r28, r22
    1804:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
    1806:	a9 01       	movw	r20, r18
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	0e 94 9b 05 	call	0xb36	; 0xb36 <createProcess3>
    180e:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1810:	be 01       	movw	r22, r28
    1812:	0e 94 90 0b 	call	0x1720	; 0x1720 <insertThreadIntoQueue>
	return thread;
}
    1816:	c8 01       	movw	r24, r16
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    1822:	80 91 10 02 	lds	r24, 0x0210
    1826:	90 91 11 02 	lds	r25, 0x0211
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    182a:	01 c0       	rjmp	.+2      	; 0x182e <rr_schedule+0xc>
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	29 f4       	brne	.+10     	; 0x183c <rr_schedule+0x1a>
    1832:	10 92 10 02 	sts	0x0210, r1
    1836:	10 92 11 02 	sts	0x0211, r1
    183a:	10 c0       	rjmp	.+32     	; 0x185c <rr_schedule+0x3a>
    183c:	fc 01       	movw	r30, r24
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	e8 0f       	add	r30, r24
    1848:	f9 1f       	adc	r31, r25
    184a:	e6 5a       	subi	r30, 0xA6	; 166
    184c:	fc 4f       	sbci	r31, 0xFC	; 252
    184e:	24 81       	ldd	r18, Z+4	; 0x04
    1850:	22 23       	and	r18, r18
    1852:	61 f3       	breq	.-40     	; 0x182c <rr_schedule+0xa>
    1854:	80 93 10 02 	sts	0x0210, r24
    1858:	90 93 11 02 	sts	0x0211, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    185c:	fc 01       	movw	r30, r24
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	ee 0f       	add	r30, r30
    1864:	ff 1f       	adc	r31, r31
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	e6 5a       	subi	r30, 0xA6	; 166
    186c:	fc 4f       	sbci	r31, 0xFC	; 252
    186e:	24 81       	ldd	r18, Z+4	; 0x04
    1870:	22 23       	and	r18, r18
    1872:	c9 f0       	breq	.+50     	; 0x18a6 <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    1874:	a2 81       	ldd	r26, Z+2	; 0x02
    1876:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    1878:	12 96       	adiw	r26, 0x02	; 2
    187a:	0d 90       	ld	r0, X+
    187c:	bc 91       	ld	r27, X
    187e:	a0 2d       	mov	r26, r0
    1880:	10 97       	sbiw	r26, 0x00	; 0
    1882:	11 f4       	brne	.+4      	; 0x1888 <rr_schedule+0x66>
    1884:	a0 81       	ld	r26, Z
    1886:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    1888:	fc 01       	movw	r30, r24
    188a:	ee 0f       	add	r30, r30
    188c:	ff 1f       	adc	r31, r31
    188e:	ee 0f       	add	r30, r30
    1890:	ff 1f       	adc	r31, r31
    1892:	e8 0f       	add	r30, r24
    1894:	f9 1f       	adc	r31, r25
    1896:	e6 5a       	subi	r30, 0xA6	; 166
    1898:	fc 4f       	sbci	r31, 0xFC	; 252
    189a:	b3 83       	std	Z+3, r27	; 0x03
    189c:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    189e:	2d 91       	ld	r18, X+
    18a0:	3c 91       	ld	r19, X
    18a2:	11 97       	sbiw	r26, 0x01	; 1
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    18aa:	c9 01       	movw	r24, r18
    18ac:	08 95       	ret

000018ae <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    18b4:	0e 94 8a 05 	call	0xb14	; 0xb14 <getCurrentProcess>
    18b8:	be 01       	movw	r22, r28
    18ba:	0e 94 90 0b 	call	0x1720	; 0x1720 <insertThreadIntoQueue>
}
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    18c4:	0e 94 8a 05 	call	0xb14	; 0xb14 <getCurrentProcess>
}
    18c8:	08 95       	ret

000018ca <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    18ca:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    18cc:	84 b7       	in	r24, 0x34	; 52
    18ce:	88 70       	andi	r24, 0x08	; 8
    18d0:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    18d2:	80 e1       	ldi	r24, 0x10	; 16
    18d4:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    18d8:	88 e0       	ldi	r24, 0x08	; 8
    18da:	80 93 60 00 	sts	0x0060, r24
    18de:	ff cf       	rjmp	.-2      	; 0x18de <HARDWARE_RESET+0x14>

000018e0 <calloc>:
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	68 9f       	mul	r22, r24
    18ee:	80 01       	movw	r16, r0
    18f0:	69 9f       	mul	r22, r25
    18f2:	10 0d       	add	r17, r0
    18f4:	78 9f       	mul	r23, r24
    18f6:	10 0d       	add	r17, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	c8 01       	movw	r24, r16
    18fc:	0e 94 95 0c 	call	0x192a	; 0x192a <malloc>
    1900:	e8 2e       	mov	r14, r24
    1902:	e7 01       	movw	r28, r14
    1904:	7e 01       	movw	r14, r28
    1906:	f9 2e       	mov	r15, r25
    1908:	e7 01       	movw	r28, r14
    190a:	20 97       	sbiw	r28, 0x00	; 0
    190c:	31 f0       	breq	.+12     	; 0x191a <calloc+0x3a>
    190e:	8e 2d       	mov	r24, r14
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	a8 01       	movw	r20, r16
    1916:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <memset>
    191a:	ce 01       	movw	r24, r28
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	08 95       	ret

0000192a <malloc>:
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	91 05       	cpc	r25, r1
    1932:	10 f4       	brcc	.+4      	; 0x1938 <malloc+0xe>
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	e0 91 7f 03 	lds	r30, 0x037F
    193c:	f0 91 80 03 	lds	r31, 0x0380
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	26 c0       	rjmp	.+76     	; 0x1996 <malloc+0x6c>
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	68 17       	cp	r22, r24
    1950:	79 07       	cpc	r23, r25
    1952:	e0 f0       	brcs	.+56     	; 0x198c <malloc+0x62>
    1954:	68 17       	cp	r22, r24
    1956:	79 07       	cpc	r23, r25
    1958:	81 f4       	brne	.+32     	; 0x197a <malloc+0x50>
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	21 15       	cp	r18, r1
    1960:	31 05       	cpc	r19, r1
    1962:	31 f0       	breq	.+12     	; 0x1970 <malloc+0x46>
    1964:	d9 01       	movw	r26, r18
    1966:	13 96       	adiw	r26, 0x03	; 3
    1968:	9c 93       	st	X, r25
    196a:	8e 93       	st	-X, r24
    196c:	12 97       	sbiw	r26, 0x02	; 2
    196e:	2b c0       	rjmp	.+86     	; 0x19c6 <malloc+0x9c>
    1970:	90 93 80 03 	sts	0x0380, r25
    1974:	80 93 7f 03 	sts	0x037F, r24
    1978:	26 c0       	rjmp	.+76     	; 0x19c6 <malloc+0x9c>
    197a:	41 15       	cp	r20, r1
    197c:	51 05       	cpc	r21, r1
    197e:	19 f0       	breq	.+6      	; 0x1986 <malloc+0x5c>
    1980:	64 17       	cp	r22, r20
    1982:	75 07       	cpc	r23, r21
    1984:	18 f4       	brcc	.+6      	; 0x198c <malloc+0x62>
    1986:	ab 01       	movw	r20, r22
    1988:	e9 01       	movw	r28, r18
    198a:	df 01       	movw	r26, r30
    198c:	9f 01       	movw	r18, r30
    198e:	72 81       	ldd	r23, Z+2	; 0x02
    1990:	63 81       	ldd	r22, Z+3	; 0x03
    1992:	e7 2f       	mov	r30, r23
    1994:	f6 2f       	mov	r31, r22
    1996:	30 97       	sbiw	r30, 0x00	; 0
    1998:	c1 f6       	brne	.-80     	; 0x194a <malloc+0x20>
    199a:	41 15       	cp	r20, r1
    199c:	51 05       	cpc	r21, r1
    199e:	01 f1       	breq	.+64     	; 0x19e0 <malloc+0xb6>
    19a0:	48 1b       	sub	r20, r24
    19a2:	59 0b       	sbc	r21, r25
    19a4:	44 30       	cpi	r20, 0x04	; 4
    19a6:	51 05       	cpc	r21, r1
    19a8:	80 f4       	brcc	.+32     	; 0x19ca <malloc+0xa0>
    19aa:	12 96       	adiw	r26, 0x02	; 2
    19ac:	8d 91       	ld	r24, X+
    19ae:	9c 91       	ld	r25, X
    19b0:	13 97       	sbiw	r26, 0x03	; 3
    19b2:	20 97       	sbiw	r28, 0x00	; 0
    19b4:	19 f0       	breq	.+6      	; 0x19bc <malloc+0x92>
    19b6:	9b 83       	std	Y+3, r25	; 0x03
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	04 c0       	rjmp	.+8      	; 0x19c4 <malloc+0x9a>
    19bc:	90 93 80 03 	sts	0x0380, r25
    19c0:	80 93 7f 03 	sts	0x037F, r24
    19c4:	fd 01       	movw	r30, r26
    19c6:	32 96       	adiw	r30, 0x02	; 2
    19c8:	46 c0       	rjmp	.+140    	; 0x1a56 <malloc+0x12c>
    19ca:	fd 01       	movw	r30, r26
    19cc:	e4 0f       	add	r30, r20
    19ce:	f5 1f       	adc	r31, r21
    19d0:	81 93       	st	Z+, r24
    19d2:	91 93       	st	Z+, r25
    19d4:	42 50       	subi	r20, 0x02	; 2
    19d6:	50 40       	sbci	r21, 0x00	; 0
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	5c 93       	st	X, r21
    19dc:	4e 93       	st	-X, r20
    19de:	3b c0       	rjmp	.+118    	; 0x1a56 <malloc+0x12c>
    19e0:	20 91 7d 03 	lds	r18, 0x037D
    19e4:	30 91 7e 03 	lds	r19, 0x037E
    19e8:	21 15       	cp	r18, r1
    19ea:	31 05       	cpc	r19, r1
    19ec:	41 f4       	brne	.+16     	; 0x19fe <malloc+0xd4>
    19ee:	20 91 f4 01 	lds	r18, 0x01F4
    19f2:	30 91 f5 01 	lds	r19, 0x01F5
    19f6:	30 93 7e 03 	sts	0x037E, r19
    19fa:	20 93 7d 03 	sts	0x037D, r18
    19fe:	20 91 f6 01 	lds	r18, 0x01F6
    1a02:	30 91 f7 01 	lds	r19, 0x01F7
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <malloc+0xf2>
    1a0c:	2d b7       	in	r18, 0x3d	; 61
    1a0e:	3e b7       	in	r19, 0x3e	; 62
    1a10:	40 91 f2 01 	lds	r20, 0x01F2
    1a14:	50 91 f3 01 	lds	r21, 0x01F3
    1a18:	24 1b       	sub	r18, r20
    1a1a:	35 0b       	sbc	r19, r21
    1a1c:	e0 91 7d 03 	lds	r30, 0x037D
    1a20:	f0 91 7e 03 	lds	r31, 0x037E
    1a24:	e2 17       	cp	r30, r18
    1a26:	f3 07       	cpc	r31, r19
    1a28:	a0 f4       	brcc	.+40     	; 0x1a52 <malloc+0x128>
    1a2a:	2e 1b       	sub	r18, r30
    1a2c:	3f 0b       	sbc	r19, r31
    1a2e:	28 17       	cp	r18, r24
    1a30:	39 07       	cpc	r19, r25
    1a32:	78 f0       	brcs	.+30     	; 0x1a52 <malloc+0x128>
    1a34:	ac 01       	movw	r20, r24
    1a36:	4e 5f       	subi	r20, 0xFE	; 254
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	24 17       	cp	r18, r20
    1a3c:	35 07       	cpc	r19, r21
    1a3e:	48 f0       	brcs	.+18     	; 0x1a52 <malloc+0x128>
    1a40:	4e 0f       	add	r20, r30
    1a42:	5f 1f       	adc	r21, r31
    1a44:	50 93 7e 03 	sts	0x037E, r21
    1a48:	40 93 7d 03 	sts	0x037D, r20
    1a4c:	81 93       	st	Z+, r24
    1a4e:	91 93       	st	Z+, r25
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <malloc+0x12c>
    1a52:	e0 e0       	ldi	r30, 0x00	; 0
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	cf 01       	movw	r24, r30
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <free>:
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <free+0xa>
    1a66:	91 c0       	rjmp	.+290    	; 0x1b8a <free+0x12c>
    1a68:	fc 01       	movw	r30, r24
    1a6a:	32 97       	sbiw	r30, 0x02	; 2
    1a6c:	13 82       	std	Z+3, r1	; 0x03
    1a6e:	12 82       	std	Z+2, r1	; 0x02
    1a70:	60 91 7f 03 	lds	r22, 0x037F
    1a74:	70 91 80 03 	lds	r23, 0x0380
    1a78:	61 15       	cp	r22, r1
    1a7a:	71 05       	cpc	r23, r1
    1a7c:	81 f4       	brne	.+32     	; 0x1a9e <free+0x40>
    1a7e:	20 81       	ld	r18, Z
    1a80:	31 81       	ldd	r19, Z+1	; 0x01
    1a82:	28 0f       	add	r18, r24
    1a84:	39 1f       	adc	r19, r25
    1a86:	80 91 7d 03 	lds	r24, 0x037D
    1a8a:	90 91 7e 03 	lds	r25, 0x037E
    1a8e:	82 17       	cp	r24, r18
    1a90:	93 07       	cpc	r25, r19
    1a92:	99 f5       	brne	.+102    	; 0x1afa <free+0x9c>
    1a94:	f0 93 7e 03 	sts	0x037E, r31
    1a98:	e0 93 7d 03 	sts	0x037D, r30
    1a9c:	76 c0       	rjmp	.+236    	; 0x1b8a <free+0x12c>
    1a9e:	db 01       	movw	r26, r22
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <free+0x4c>
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	d9 01       	movw	r26, r18
    1aaa:	ae 17       	cp	r26, r30
    1aac:	bf 07       	cpc	r27, r31
    1aae:	48 f4       	brcc	.+18     	; 0x1ac2 <free+0x64>
    1ab0:	12 96       	adiw	r26, 0x02	; 2
    1ab2:	2d 91       	ld	r18, X+
    1ab4:	3c 91       	ld	r19, X
    1ab6:	13 97       	sbiw	r26, 0x03	; 3
    1ab8:	21 15       	cp	r18, r1
    1aba:	31 05       	cpc	r19, r1
    1abc:	a1 f7       	brne	.-24     	; 0x1aa6 <free+0x48>
    1abe:	cd 01       	movw	r24, r26
    1ac0:	21 c0       	rjmp	.+66     	; 0x1b04 <free+0xa6>
    1ac2:	b3 83       	std	Z+3, r27	; 0x03
    1ac4:	a2 83       	std	Z+2, r26	; 0x02
    1ac6:	ef 01       	movw	r28, r30
    1ac8:	49 91       	ld	r20, Y+
    1aca:	59 91       	ld	r21, Y+
    1acc:	9e 01       	movw	r18, r28
    1ace:	24 0f       	add	r18, r20
    1ad0:	35 1f       	adc	r19, r21
    1ad2:	a2 17       	cp	r26, r18
    1ad4:	b3 07       	cpc	r27, r19
    1ad6:	79 f4       	brne	.+30     	; 0x1af6 <free+0x98>
    1ad8:	2d 91       	ld	r18, X+
    1ada:	3c 91       	ld	r19, X
    1adc:	11 97       	sbiw	r26, 0x01	; 1
    1ade:	24 0f       	add	r18, r20
    1ae0:	35 1f       	adc	r19, r21
    1ae2:	2e 5f       	subi	r18, 0xFE	; 254
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	31 83       	std	Z+1, r19	; 0x01
    1ae8:	20 83       	st	Z, r18
    1aea:	12 96       	adiw	r26, 0x02	; 2
    1aec:	2d 91       	ld	r18, X+
    1aee:	3c 91       	ld	r19, X
    1af0:	13 97       	sbiw	r26, 0x03	; 3
    1af2:	33 83       	std	Z+3, r19	; 0x03
    1af4:	22 83       	std	Z+2, r18	; 0x02
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	29 f4       	brne	.+10     	; 0x1b04 <free+0xa6>
    1afa:	f0 93 80 03 	sts	0x0380, r31
    1afe:	e0 93 7f 03 	sts	0x037F, r30
    1b02:	43 c0       	rjmp	.+134    	; 0x1b8a <free+0x12c>
    1b04:	dc 01       	movw	r26, r24
    1b06:	13 96       	adiw	r26, 0x03	; 3
    1b08:	fc 93       	st	X, r31
    1b0a:	ee 93       	st	-X, r30
    1b0c:	12 97       	sbiw	r26, 0x02	; 2
    1b0e:	4d 91       	ld	r20, X+
    1b10:	5d 91       	ld	r21, X+
    1b12:	a4 0f       	add	r26, r20
    1b14:	b5 1f       	adc	r27, r21
    1b16:	ea 17       	cp	r30, r26
    1b18:	fb 07       	cpc	r31, r27
    1b1a:	69 f4       	brne	.+26     	; 0x1b36 <free+0xd8>
    1b1c:	20 81       	ld	r18, Z
    1b1e:	31 81       	ldd	r19, Z+1	; 0x01
    1b20:	24 0f       	add	r18, r20
    1b22:	35 1f       	adc	r19, r21
    1b24:	2e 5f       	subi	r18, 0xFE	; 254
    1b26:	3f 4f       	sbci	r19, 0xFF	; 255
    1b28:	ec 01       	movw	r28, r24
    1b2a:	39 83       	std	Y+1, r19	; 0x01
    1b2c:	28 83       	st	Y, r18
    1b2e:	22 81       	ldd	r18, Z+2	; 0x02
    1b30:	33 81       	ldd	r19, Z+3	; 0x03
    1b32:	3b 83       	std	Y+3, r19	; 0x03
    1b34:	2a 83       	std	Y+2, r18	; 0x02
    1b36:	e0 e0       	ldi	r30, 0x00	; 0
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <free+0xe2>
    1b3c:	fb 01       	movw	r30, r22
    1b3e:	bc 01       	movw	r22, r24
    1b40:	db 01       	movw	r26, r22
    1b42:	12 96       	adiw	r26, 0x02	; 2
    1b44:	8d 91       	ld	r24, X+
    1b46:	9c 91       	ld	r25, X
    1b48:	13 97       	sbiw	r26, 0x03	; 3
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	b9 f7       	brne	.-18     	; 0x1b3c <free+0xde>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	2e 5f       	subi	r18, 0xFE	; 254
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	8d 91       	ld	r24, X+
    1b56:	9c 91       	ld	r25, X
    1b58:	11 97       	sbiw	r26, 0x01	; 1
    1b5a:	82 0f       	add	r24, r18
    1b5c:	93 1f       	adc	r25, r19
    1b5e:	40 91 7d 03 	lds	r20, 0x037D
    1b62:	50 91 7e 03 	lds	r21, 0x037E
    1b66:	48 17       	cp	r20, r24
    1b68:	59 07       	cpc	r21, r25
    1b6a:	79 f4       	brne	.+30     	; 0x1b8a <free+0x12c>
    1b6c:	30 97       	sbiw	r30, 0x00	; 0
    1b6e:	29 f4       	brne	.+10     	; 0x1b7a <free+0x11c>
    1b70:	10 92 80 03 	sts	0x0380, r1
    1b74:	10 92 7f 03 	sts	0x037F, r1
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <free+0x120>
    1b7a:	13 82       	std	Z+3, r1	; 0x03
    1b7c:	12 82       	std	Z+2, r1	; 0x02
    1b7e:	22 50       	subi	r18, 0x02	; 2
    1b80:	30 40       	sbci	r19, 0x00	; 0
    1b82:	30 93 7e 03 	sts	0x037E, r19
    1b86:	20 93 7d 03 	sts	0x037D, r18
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <memset>:
    1b90:	dc 01       	movw	r26, r24
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <memset+0x6>
    1b94:	6d 93       	st	X+, r22
    1b96:	41 50       	subi	r20, 0x01	; 1
    1b98:	50 40       	sbci	r21, 0x00	; 0
    1b9a:	e0 f7       	brcc	.-8      	; 0x1b94 <memset+0x4>
    1b9c:	08 95       	ret

00001b9e <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    1b9e:	0e 94 b9 08 	call	0x1172	; 0x1172 <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    1ba2:	08 95       	ret
    1ba4:	f8 94       	cli

00001ba6 <__stop_program>:
    1ba6:	ff cf       	rjmp	.-2      	; 0x1ba6 <__stop_program>
