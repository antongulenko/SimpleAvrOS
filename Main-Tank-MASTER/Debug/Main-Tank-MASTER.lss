
Main-Tank-MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800100  000016e2  00001776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  008001f4  008001f4  0000186a  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f0  00000000  00000000  000020af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b7d  00000000  00000000  0000239f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e46  00000000  00000000  00002f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ba6  00000000  00000000  00005d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f73  00000000  00000000  00006908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000670  00000000  00000000  0000a87c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001130  00000000  00000000  0000aeec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001af8  00000000  00000000  0000c01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00048130  00000000  00000000  0000db14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000054f  00000000  00000000  00055c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000288  00000000  00000000  00056193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_32>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ee       	ldi	r30, 0xE2	; 226
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3f       	cpi	r26, 0xF4	; 244
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a4 ef       	ldi	r26, 0xF4	; 244
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 30       	cpi	r26, 0x0F	; 15
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
	MCUSR = 0;
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 78 00 	call	0xf0	; 0xf0 <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 80 00 	call	0x100	; 0x100 <init_ports_m1284P>

000000ca <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      ca:	0e 94 c5 01 	call	0x38a	; 0x38a <init_timer_m1284P>

000000ce <init_tank_motors_kernel_init>:
	// TODO assign correct pins, correct motor-properties

	INIT_2DirPins_MOTOR(LeftMotor, MOTOR_NORMAL, PinA1, Timer1A, PinA1)
	INIT_2DirPins_MOTOR(RightMotor, MOTOR_NORMAL, PinA1, Timer1B, PinA1)
}
KERNEL_INIT(init_tank_motors)
      ce:	0e 94 57 02 	call	0x4ae	; 0x4ae <init_tank_motors>

000000d2 <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      d2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <init_idle_scheduler>

000000d6 <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 2500);
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      d6:	0e 94 04 04 	call	0x808	; 0x808 <init_scheduler>

000000da <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      da:	0e 94 af 04 	call	0x95e	; 0x95e <init_kernel>
      de:	0e 94 dd 04 	call	0x9ba	; 0x9ba <main>
      e2:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <MainProcessEnd>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
      ea:	0e 94 56 06 	call	0xcac	; 0xcac <processor_loop_idle>
}
      ee:	08 95       	ret

000000f0 <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
      f0:	84 b7       	in	r24, 0x34	; 52
      f2:	80 93 f8 01 	sts	0x01F8, r24
	MCUSR = 0;
      f6:	14 be       	out	0x34, r1	; 52
}
      f8:	08 95       	ret

000000fa <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
      fa:	80 91 f8 01 	lds	r24, 0x01F8
      fe:	08 95       	ret

00000100 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     100:	a9 e8       	ldi	r26, 0x89	; 137
     102:	b2 e0       	ldi	r27, 0x02	; 2
     104:	e0 ee       	ldi	r30, 0xE0	; 224
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	86 e0       	ldi	r24, 0x06	; 6
     10a:	01 90       	ld	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	81 50       	subi	r24, 0x01	; 1
     110:	e1 f7       	brne	.-8      	; 0x10a <init_ports_m1284P+0xa>
     112:	a6 e8       	ldi	r26, 0x86	; 134
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	ed ed       	ldi	r30, 0xDD	; 221
     118:	f1 e0       	ldi	r31, 0x01	; 1
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	01 90       	ld	r0, Z+
     11e:	0d 92       	st	X+, r0
     120:	81 50       	subi	r24, 0x01	; 1
     122:	e1 f7       	brne	.-8      	; 0x11c <init_ports_m1284P+0x1c>
     124:	ac ed       	ldi	r26, 0xDC	; 220
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ea ed       	ldi	r30, 0xDA	; 218
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	83 e0       	ldi	r24, 0x03	; 3
     12e:	01 90       	ld	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	81 50       	subi	r24, 0x01	; 1
     134:	e1 f7       	brne	.-8      	; 0x12e <init_ports_m1284P+0x2e>
     136:	a3 e6       	ldi	r26, 0x63	; 99
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	e7 ed       	ldi	r30, 0xD7	; 215
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	83 e0       	ldi	r24, 0x03	; 3
     140:	01 90       	ld	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	81 50       	subi	r24, 0x01	; 1
     146:	e1 f7       	brne	.-8      	; 0x140 <init_ports_m1284P+0x40>
     148:	a4 e7       	ldi	r26, 0x74	; 116
     14a:	b2 e0       	ldi	r27, 0x02	; 2
     14c:	e4 ed       	ldi	r30, 0xD4	; 212
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	83 e0       	ldi	r24, 0x03	; 3
     152:	01 90       	ld	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	81 50       	subi	r24, 0x01	; 1
     158:	e1 f7       	brne	.-8      	; 0x152 <init_ports_m1284P+0x52>
     15a:	ad e2       	ldi	r26, 0x2D	; 45
     15c:	b2 e0       	ldi	r27, 0x02	; 2
     15e:	e1 ed       	ldi	r30, 0xD1	; 209
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	01 90       	ld	r0, Z+
     166:	0d 92       	st	X+, r0
     168:	81 50       	subi	r24, 0x01	; 1
     16a:	e1 f7       	brne	.-8      	; 0x164 <init_ports_m1284P+0x64>
     16c:	a9 e5       	ldi	r26, 0x59	; 89
     16e:	b2 e0       	ldi	r27, 0x02	; 2
     170:	ee ec       	ldi	r30, 0xCE	; 206
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	01 90       	ld	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	81 50       	subi	r24, 0x01	; 1
     17c:	e1 f7       	brne	.-8      	; 0x176 <init_ports_m1284P+0x76>
     17e:	af ec       	ldi	r26, 0xCF	; 207
     180:	b2 e0       	ldi	r27, 0x02	; 2
     182:	eb ec       	ldi	r30, 0xCB	; 203
     184:	f1 e0       	ldi	r31, 0x01	; 1
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	01 90       	ld	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	81 50       	subi	r24, 0x01	; 1
     18e:	e1 f7       	brne	.-8      	; 0x188 <init_ports_m1284P+0x88>
     190:	a2 e9       	ldi	r26, 0x92	; 146
     192:	b2 e0       	ldi	r27, 0x02	; 2
     194:	e8 ec       	ldi	r30, 0xC8	; 200
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	01 90       	ld	r0, Z+
     19c:	0d 92       	st	X+, r0
     19e:	81 50       	subi	r24, 0x01	; 1
     1a0:	e1 f7       	brne	.-8      	; 0x19a <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     1a2:	a2 ee       	ldi	r26, 0xE2	; 226
     1a4:	b2 e0       	ldi	r27, 0x02	; 2
     1a6:	e2 ec       	ldi	r30, 0xC2	; 194
     1a8:	f1 e0       	ldi	r31, 0x01	; 1
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	01 90       	ld	r0, Z+
     1ae:	0d 92       	st	X+, r0
     1b0:	81 50       	subi	r24, 0x01	; 1
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <init_ports_m1284P+0xac>
     1b4:	ad e7       	ldi	r26, 0x7D	; 125
     1b6:	b2 e0       	ldi	r27, 0x02	; 2
     1b8:	ef eb       	ldi	r30, 0xBF	; 191
     1ba:	f1 e0       	ldi	r31, 0x01	; 1
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	01 90       	ld	r0, Z+
     1c0:	0d 92       	st	X+, r0
     1c2:	81 50       	subi	r24, 0x01	; 1
     1c4:	e1 f7       	brne	.-8      	; 0x1be <init_ports_m1284P+0xbe>
     1c6:	af ed       	ldi	r26, 0xDF	; 223
     1c8:	b2 e0       	ldi	r27, 0x02	; 2
     1ca:	ec eb       	ldi	r30, 0xBC	; 188
     1cc:	f1 e0       	ldi	r31, 0x01	; 1
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	01 90       	ld	r0, Z+
     1d2:	0d 92       	st	X+, r0
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	e1 f7       	brne	.-8      	; 0x1d0 <init_ports_m1284P+0xd0>
     1d8:	a6 e1       	ldi	r26, 0x16	; 22
     1da:	b2 e0       	ldi	r27, 0x02	; 2
     1dc:	e9 eb       	ldi	r30, 0xB9	; 185
     1de:	f1 e0       	ldi	r31, 0x01	; 1
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <init_ports_m1284P+0xe2>
     1ea:	af e8       	ldi	r26, 0x8F	; 143
     1ec:	b2 e0       	ldi	r27, 0x02	; 2
     1ee:	e6 eb       	ldi	r30, 0xB6	; 182
     1f0:	f1 e0       	ldi	r31, 0x01	; 1
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	01 90       	ld	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	81 50       	subi	r24, 0x01	; 1
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <init_ports_m1284P+0xf4>
     1fc:	ac e9       	ldi	r26, 0x9C	; 156
     1fe:	b2 e0       	ldi	r27, 0x02	; 2
     200:	e3 eb       	ldi	r30, 0xB3	; 179
     202:	f1 e0       	ldi	r31, 0x01	; 1
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	01 90       	ld	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	81 50       	subi	r24, 0x01	; 1
     20c:	e1 f7       	brne	.-8      	; 0x206 <init_ports_m1284P+0x106>
     20e:	a8 e4       	ldi	r26, 0x48	; 72
     210:	b2 e0       	ldi	r27, 0x02	; 2
     212:	e0 eb       	ldi	r30, 0xB0	; 176
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	01 90       	ld	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	81 50       	subi	r24, 0x01	; 1
     21e:	e1 f7       	brne	.-8      	; 0x218 <init_ports_m1284P+0x118>
     220:	a9 e1       	ldi	r26, 0x19	; 25
     222:	b2 e0       	ldi	r27, 0x02	; 2
     224:	ed ea       	ldi	r30, 0xAD	; 173
     226:	f1 e0       	ldi	r31, 0x01	; 1
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	01 90       	ld	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	81 50       	subi	r24, 0x01	; 1
     230:	e1 f7       	brne	.-8      	; 0x22a <init_ports_m1284P+0x12a>
     232:	a5 e4       	ldi	r26, 0x45	; 69
     234:	b2 e0       	ldi	r27, 0x02	; 2
     236:	ea ea       	ldi	r30, 0xAA	; 170
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	01 90       	ld	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	81 50       	subi	r24, 0x01	; 1
     242:	e1 f7       	brne	.-8      	; 0x23c <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     244:	a0 e8       	ldi	r26, 0x80	; 128
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e4 ea       	ldi	r30, 0xA4	; 164
     24a:	f1 e0       	ldi	r31, 0x01	; 1
     24c:	86 e0       	ldi	r24, 0x06	; 6
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	81 50       	subi	r24, 0x01	; 1
     254:	e1 f7       	brne	.-8      	; 0x24e <init_ports_m1284P+0x14e>
     256:	ae ea       	ldi	r26, 0xAE	; 174
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	e1 ea       	ldi	r30, 0xA1	; 161
     25c:	f1 e0       	ldi	r31, 0x01	; 1
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	81 50       	subi	r24, 0x01	; 1
     266:	e1 f7       	brne	.-8      	; 0x260 <init_ports_m1284P+0x160>
     268:	aa e7       	ldi	r26, 0x7A	; 122
     26a:	b2 e0       	ldi	r27, 0x02	; 2
     26c:	ee e9       	ldi	r30, 0x9E	; 158
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	83 e0       	ldi	r24, 0x03	; 3
     272:	01 90       	ld	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	81 50       	subi	r24, 0x01	; 1
     278:	e1 f7       	brne	.-8      	; 0x272 <init_ports_m1284P+0x172>
     27a:	a6 ea       	ldi	r26, 0xA6	; 166
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	eb e9       	ldi	r30, 0x9B	; 155
     280:	f1 e0       	ldi	r31, 0x01	; 1
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	01 90       	ld	r0, Z+
     286:	0d 92       	st	X+, r0
     288:	81 50       	subi	r24, 0x01	; 1
     28a:	e1 f7       	brne	.-8      	; 0x284 <init_ports_m1284P+0x184>
     28c:	ab e3       	ldi	r26, 0x3B	; 59
     28e:	b2 e0       	ldi	r27, 0x02	; 2
     290:	e8 e9       	ldi	r30, 0x98	; 152
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	01 90       	ld	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	81 50       	subi	r24, 0x01	; 1
     29c:	e1 f7       	brne	.-8      	; 0x296 <init_ports_m1284P+0x196>
     29e:	aa e2       	ldi	r26, 0x2A	; 42
     2a0:	b2 e0       	ldi	r27, 0x02	; 2
     2a2:	e5 e9       	ldi	r30, 0x95	; 149
     2a4:	f1 e0       	ldi	r31, 0x01	; 1
     2a6:	83 e0       	ldi	r24, 0x03	; 3
     2a8:	01 90       	ld	r0, Z+
     2aa:	0d 92       	st	X+, r0
     2ac:	81 50       	subi	r24, 0x01	; 1
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <init_ports_m1284P+0x1a8>
     2b0:	a7 e7       	ldi	r26, 0x77	; 119
     2b2:	b2 e0       	ldi	r27, 0x02	; 2
     2b4:	e2 e9       	ldi	r30, 0x92	; 146
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <init_ports_m1284P+0x1ba>
     2c2:	a9 e6       	ldi	r26, 0x69	; 105
     2c4:	b2 e0       	ldi	r27, 0x02	; 2
     2c6:	ef e8       	ldi	r30, 0x8F	; 143
     2c8:	f1 e0       	ldi	r31, 0x01	; 1
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	01 90       	ld	r0, Z+
     2ce:	0d 92       	st	X+, r0
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <init_ports_m1284P+0x1cc>
     2d4:	ac e0       	ldi	r26, 0x0C	; 12
     2d6:	b2 e0       	ldi	r27, 0x02	; 2
     2d8:	ec e8       	ldi	r30, 0x8C	; 140
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	83 e0       	ldi	r24, 0x03	; 3
     2de:	01 90       	ld	r0, Z+
     2e0:	0d 92       	st	X+, r0
     2e2:	81 50       	subi	r24, 0x01	; 1
     2e4:	e1 f7       	brne	.-8      	; 0x2de <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     2e6:	a3 e5       	ldi	r26, 0x53	; 83
     2e8:	b2 e0       	ldi	r27, 0x02	; 2
     2ea:	e6 e8       	ldi	r30, 0x86	; 134
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	86 e0       	ldi	r24, 0x06	; 6
     2f0:	01 90       	ld	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	81 50       	subi	r24, 0x01	; 1
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <init_ports_m1284P+0x1f0>
     2f8:	a7 e2       	ldi	r26, 0x27	; 39
     2fa:	b2 e0       	ldi	r27, 0x02	; 2
     2fc:	e3 e8       	ldi	r30, 0x83	; 131
     2fe:	f1 e0       	ldi	r31, 0x01	; 1
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	01 90       	ld	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	81 50       	subi	r24, 0x01	; 1
     308:	e1 f7       	brne	.-8      	; 0x302 <init_ports_m1284P+0x202>
     30a:	a0 e3       	ldi	r26, 0x30	; 48
     30c:	b2 e0       	ldi	r27, 0x02	; 2
     30e:	e0 e8       	ldi	r30, 0x80	; 128
     310:	f1 e0       	ldi	r31, 0x01	; 1
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	01 90       	ld	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	81 50       	subi	r24, 0x01	; 1
     31a:	e1 f7       	brne	.-8      	; 0x314 <init_ports_m1284P+0x214>
     31c:	a4 e2       	ldi	r26, 0x24	; 36
     31e:	b2 e0       	ldi	r27, 0x02	; 2
     320:	ed e7       	ldi	r30, 0x7D	; 125
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	01 90       	ld	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	81 50       	subi	r24, 0x01	; 1
     32c:	e1 f7       	brne	.-8      	; 0x326 <init_ports_m1284P+0x226>
     32e:	a6 e6       	ldi	r26, 0x66	; 102
     330:	b2 e0       	ldi	r27, 0x02	; 2
     332:	ea e7       	ldi	r30, 0x7A	; 122
     334:	f1 e0       	ldi	r31, 0x01	; 1
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	01 90       	ld	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	81 50       	subi	r24, 0x01	; 1
     33e:	e1 f7       	brne	.-8      	; 0x338 <init_ports_m1284P+0x238>
     340:	a4 ec       	ldi	r26, 0xC4	; 196
     342:	b2 e0       	ldi	r27, 0x02	; 2
     344:	e7 e7       	ldi	r30, 0x77	; 119
     346:	f1 e0       	ldi	r31, 0x01	; 1
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	e1 f7       	brne	.-8      	; 0x34a <init_ports_m1284P+0x24a>
     352:	a9 ea       	ldi	r26, 0xA9	; 169
     354:	b2 e0       	ldi	r27, 0x02	; 2
     356:	e4 e7       	ldi	r30, 0x74	; 116
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	01 90       	ld	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	81 50       	subi	r24, 0x01	; 1
     362:	e1 f7       	brne	.-8      	; 0x35c <init_ports_m1284P+0x25c>
     364:	a9 ed       	ldi	r26, 0xD9	; 217
     366:	b2 e0       	ldi	r27, 0x02	; 2
     368:	e1 e7       	ldi	r30, 0x71	; 113
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	01 90       	ld	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	81 50       	subi	r24, 0x01	; 1
     374:	e1 f7       	brne	.-8      	; 0x36e <init_ports_m1284P+0x26e>
     376:	a1 eb       	ldi	r26, 0xB1	; 177
     378:	b2 e0       	ldi	r27, 0x02	; 2
     37a:	ee e6       	ldi	r30, 0x6E	; 110
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	01 90       	ld	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	81 50       	subi	r24, 0x01	; 1
     386:	e1 f7       	brne	.-8      	; 0x380 <init_ports_m1284P+0x280>
}
     388:	08 95       	ret

0000038a <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     38a:	ae e3       	ldi	r26, 0x3E	; 62
     38c:	b2 e0       	ldi	r27, 0x02	; 2
     38e:	e7 e6       	ldi	r30, 0x67	; 103
     390:	f1 e0       	ldi	r31, 0x01	; 1
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	01 90       	ld	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	81 50       	subi	r24, 0x01	; 1
     39a:	e1 f7       	brne	.-8      	; 0x394 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     39c:	a2 ed       	ldi	r26, 0xD2	; 210
     39e:	b2 e0       	ldi	r27, 0x02	; 2
     3a0:	e0 e6       	ldi	r30, 0x60	; 96
     3a2:	f1 e0       	ldi	r31, 0x01	; 1
     3a4:	87 e0       	ldi	r24, 0x07	; 7
     3a6:	01 90       	ld	r0, Z+
     3a8:	0d 92       	st	X+, r0
     3aa:	81 50       	subi	r24, 0x01	; 1
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     3ae:	a5 e9       	ldi	r26, 0x95	; 149
     3b0:	b2 e0       	ldi	r27, 0x02	; 2
     3b2:	e9 e5       	ldi	r30, 0x59	; 89
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
     3b6:	87 e0       	ldi	r24, 0x07	; 7
     3b8:	01 90       	ld	r0, Z+
     3ba:	0d 92       	st	X+, r0
     3bc:	81 50       	subi	r24, 0x01	; 1
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     3c0:	af e0       	ldi	r26, 0x0F	; 15
     3c2:	b2 e0       	ldi	r27, 0x02	; 2
     3c4:	e2 e5       	ldi	r30, 0x52	; 82
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	87 e0       	ldi	r24, 0x07	; 7
     3ca:	01 90       	ld	r0, Z+
     3cc:	0d 92       	st	X+, r0
     3ce:	81 50       	subi	r24, 0x01	; 1
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     3d2:	ac e6       	ldi	r26, 0x6C	; 108
     3d4:	b2 e0       	ldi	r27, 0x02	; 2
     3d6:	ea e4       	ldi	r30, 0x4A	; 74
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	01 90       	ld	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	81 50       	subi	r24, 0x01	; 1
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     3e4:	a7 ec       	ldi	r26, 0xC7	; 199
     3e6:	b2 e0       	ldi	r27, 0x02	; 2
     3e8:	e2 e4       	ldi	r30, 0x42	; 66
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	88 e0       	ldi	r24, 0x08	; 8
     3ee:	01 90       	ld	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	81 50       	subi	r24, 0x01	; 1
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     3f6:	ac e1       	ldi	r26, 0x1C	; 28
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	ea e3       	ldi	r30, 0x3A	; 58
     3fc:	f1 e0       	ldi	r31, 0x01	; 1
     3fe:	88 e0       	ldi	r24, 0x08	; 8
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	81 50       	subi	r24, 0x01	; 1
     406:	e1 f7       	brne	.-8      	; 0x400 <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     408:	ac eb       	ldi	r26, 0xBC	; 188
     40a:	b2 e0       	ldi	r27, 0x02	; 2
     40c:	e2 e3       	ldi	r30, 0x32	; 50
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	01 90       	ld	r0, Z+
     414:	0d 92       	st	X+, r0
     416:	81 50       	subi	r24, 0x01	; 1
     418:	e1 f7       	brne	.-8      	; 0x412 <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     41a:	ab e4       	ldi	r26, 0x4B	; 75
     41c:	b2 e0       	ldi	r27, 0x02	; 2
     41e:	ea e2       	ldi	r30, 0x2A	; 42
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	88 e0       	ldi	r24, 0x08	; 8
     424:	01 90       	ld	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	e1 f7       	brne	.-8      	; 0x424 <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     42c:	a4 eb       	ldi	r26, 0xB4	; 180
     42e:	b2 e0       	ldi	r27, 0x02	; 2
     430:	e2 e2       	ldi	r30, 0x22	; 34
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	01 90       	ld	r0, Z+
     438:	0d 92       	st	X+, r0
     43a:	81 50       	subi	r24, 0x01	; 1
     43c:	e1 f7       	brne	.-8      	; 0x436 <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     43e:	a3 e3       	ldi	r26, 0x33	; 51
     440:	b2 e0       	ldi	r27, 0x02	; 2
     442:	ea e1       	ldi	r30, 0x1A	; 26
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	88 e0       	ldi	r24, 0x08	; 8
     448:	01 90       	ld	r0, Z+
     44a:	0d 92       	st	X+, r0
     44c:	81 50       	subi	r24, 0x01	; 1
     44e:	e1 f7       	brne	.-8      	; 0x448 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     450:	a4 e0       	ldi	r26, 0x04	; 4
     452:	b2 e0       	ldi	r27, 0x02	; 2
     454:	e2 e1       	ldi	r30, 0x12	; 18
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	88 e0       	ldi	r24, 0x08	; 8
     45a:	01 90       	ld	r0, Z+
     45c:	0d 92       	st	X+, r0
     45e:	81 50       	subi	r24, 0x01	; 1
     460:	e1 f7       	brne	.-8      	; 0x45a <init_timer_m1284P+0xd0>
}
     462:	08 95       	ret

00000464 <initMotor>:

#include "../kernel_init.h"
#include "motor.h"

// This must be called from another init-routine, after the motors have been initialized.
void initMotor(PMotor motor) {
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	ec 01       	movw	r28, r24
	setTimerCompareValue(motor->pwmTimer, 0);
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	9c 81       	ldd	r25, Y+4	; 0x04
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	0e 94 00 09 	call	0x1200	; 0x1200 <setTimerCompareValue>
	setPinOutput(motor->direction);
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	0e 94 40 07 	call	0xe80	; 0xe80 <setPinOutput>
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     48e:	7e 01       	movw	r14, r28
     490:	9f 2d       	mov	r25, r15
     492:	0e 94 32 02 	call	0x464	; 0x464 <initMotor>
	setPinOutput(motor->direction2);
     496:	8d 81       	ldd	r24, Y+5	; 0x05
     498:	9e 81       	ldd	r25, Y+6	; 0x06
     49a:	0e 94 40 07 	call	0xe80	; 0xe80 <setPinOutput>
	stopMotor((PMotor) motor); // For the sake of setting both direction pins to zero. Not necessary for 1-pin-motors.
     49e:	ce 01       	movw	r24, r28
     4a0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <stopMotor>
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	08 95       	ret

000004ae <init_tank_motors>:

void init_tank_motors() {
	
	// TODO assign correct pins, correct motor-properties

	INIT_2DirPins_MOTOR(LeftMotor, MOTOR_NORMAL, PinA1, Timer1A, PinA1)
     4ae:	ac e5       	ldi	r26, 0x5C	; 92
     4b0:	b2 e0       	ldi	r27, 0x02	; 2
     4b2:	eb e0       	ldi	r30, 0x0B	; 11
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	01 90       	ld	r0, Z+
     4ba:	0d 92       	st	X+, r0
     4bc:	81 50       	subi	r24, 0x01	; 1
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <init_tank_motors+0xa>
     4c0:	8c e5       	ldi	r24, 0x5C	; 92
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 42 02 	call	0x484	; 0x484 <initMotor2Pins>
	INIT_2DirPins_MOTOR(RightMotor, MOTOR_NORMAL, PinA1, Timer1B, PinA1)
     4c8:	af e9       	ldi	r26, 0x9F	; 159
     4ca:	b2 e0       	ldi	r27, 0x02	; 2
     4cc:	e4 e0       	ldi	r30, 0x04	; 4
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	01 90       	ld	r0, Z+
     4d4:	0d 92       	st	X+, r0
     4d6:	81 50       	subi	r24, 0x01	; 1
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <init_tank_motors+0x24>
     4da:	8f e9       	ldi	r24, 0x9F	; 159
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	0e 94 42 02 	call	0x484	; 0x484 <initMotor2Pins>
}
     4e2:	08 95       	ret

000004e4 <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	90 e4       	ldi	r25, 0x40	; 64
     4e8:	20 91 00 01 	lds	r18, 0x0100
     4ec:	30 91 01 01 	lds	r19, 0x0101
     4f0:	82 1b       	sub	r24, r18
     4f2:	93 0b       	sbc	r25, r19
     4f4:	90 93 f3 01 	sts	0x01F3, r25
     4f8:	80 93 f2 01 	sts	0x01F2, r24
	__malloc_margin = 0;
     4fc:	10 92 ef 01 	sts	0x01EF, r1
     500:	10 92 ee 01 	sts	0x01EE, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     504:	60 91 f9 01 	lds	r22, 0x01F9
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	6e 5f       	subi	r22, 0xFE	; 254
     50c:	7f 4f       	sbci	r23, 0xFF	; 255
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 0d 0a 	call	0x141a	; 0x141a <calloc>
     516:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	19 f0       	breq	.+6      	; 0x522 <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     51c:	11 82       	std	Z+1, r1	; 0x01
     51e:	10 82       	st	Z, r1
     520:	02 c0       	rjmp	.+4      	; 0x526 <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     522:	e0 e0       	ldi	r30, 0x00	; 0
     524:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     526:	f0 93 fb 01 	sts	0x01FB, r31
     52a:	e0 93 fa 01 	sts	0x01FA, r30
}
     52e:	08 95       	ret

00000530 <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <createProcessBase3+0x16>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	d8 2e       	mov	r13, r24
     54c:	c9 2e       	mov	r12, r25
     54e:	7b 01       	movw	r14, r22
     550:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     552:	ca 01       	movw	r24, r20
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	29 83       	std	Y+1, r18	; 0x01
     55a:	0e 94 0d 0a 	call	0x141a	; 0x141a <calloc>
     55e:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     560:	29 81       	ldd	r18, Y+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	b1 f1       	breq	.+108    	; 0x5d2 <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     566:	a5 01       	movw	r20, r10
     568:	41 50       	subi	r20, 0x01	; 1
     56a:	50 40       	sbci	r21, 0x00	; 0
     56c:	48 0f       	add	r20, r24
     56e:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     570:	85 e7       	ldi	r24, 0x75	; 117
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	fa 01       	movw	r30, r20
     576:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     57c:	fa 01       	movw	r30, r20
     57e:	32 97       	sbiw	r30, 0x02	; 2
     580:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     582:	fa 01       	movw	r30, r20
     584:	33 97       	sbiw	r30, 0x03	; 3
     586:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     588:	62 2f       	mov	r22, r18
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	6e 5f       	subi	r22, 0xFE	; 254
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	49 83       	std	Y+1, r20	; 0x01
     596:	5a 83       	std	Y+2, r21	; 0x02
     598:	0e 94 0d 0a 	call	0x141a	; 0x141a <calloc>
     59c:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     59e:	49 81       	ldd	r20, Y+1	; 0x01
     5a0:	5a 81       	ldd	r21, Y+2	; 0x02
     5a2:	00 97       	sbiw	r24, 0x00	; 0
     5a4:	49 f0       	breq	.+18     	; 0x5b8 <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     5a6:	ca 01       	movw	r24, r20
     5a8:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     5aa:	f9 01       	movw	r30, r18
     5ac:	91 83       	std	Z+1, r25	; 0x01
     5ae:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     5b0:	e1 14       	cp	r14, r1
     5b2:	f1 04       	cpc	r15, r1
     5b4:	31 f4       	brne	.+12     	; 0x5c2 <createProcessBase3+0x92>
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     5b8:	c8 01       	movw	r24, r16
     5ba:	0e 94 cc 0a 	call	0x1598	; 0x1598 <free>
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     5c0:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     5c2:	fa 01       	movw	r30, r20
     5c4:	7e 97       	sbiw	r30, 0x1e	; 30
     5c6:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     5c8:	4f 51       	subi	r20, 0x1F	; 31
     5ca:	50 40       	sbci	r21, 0x00	; 0
     5cc:	fa 01       	movw	r30, r20
     5ce:	f0 82       	st	Z, r15
	return result;
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     5d6:	c9 01       	movw	r24, r18
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	08 95       	ret

000005f2 <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
     5f2:	40 91 00 01 	lds	r20, 0x0100
     5f6:	50 91 01 01 	lds	r21, 0x0101
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	0e 94 98 02 	call	0x530	; 0x530 <createProcessBase3>
}
     600:	08 95       	ret

00000602 <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <createProcessBase2>
}
     60a:	08 95       	ret

0000060c <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
	PushProcessContext()
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	0f 92       	push	r0
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1f 92       	push	r1
     61a:	11 24       	eor	r1, r1
     61c:	2f 92       	push	r2
     61e:	3f 92       	push	r3
     620:	4f 92       	push	r4
     622:	5f 92       	push	r5
     624:	6f 92       	push	r6
     626:	7f 92       	push	r7
     628:	8f 92       	push	r8
     62a:	9f 92       	push	r9
     62c:	af 92       	push	r10
     62e:	bf 92       	push	r11
     630:	cf 92       	push	r12
     632:	df 92       	push	r13
     634:	ef 92       	push	r14
     636:	ff 92       	push	r15
     638:	0f 93       	push	r16
     63a:	1f 93       	push	r17
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	4f 93       	push	r20
     642:	5f 93       	push	r21
     644:	6f 93       	push	r22
     646:	7f 93       	push	r23
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     658:	dc 01       	movw	r26, r24
	StoreContextStack()
     65a:	0d b6       	in	r0, 0x3d	; 61
     65c:	0d 92       	st	X+, r0
     65e:	0e b6       	in	r0, 0x3e	; 62
     660:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     662:	db 01       	movw	r26, r22
	RestoreContextStack()
     664:	0d 90       	ld	r0, X+
     666:	0d be       	out	0x3d, r0	; 61
     668:	0d 90       	ld	r0, X+
     66a:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     66c:	ff 91       	pop	r31
     66e:	ef 91       	pop	r30
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	7f 90       	pop	r7
     69e:	6f 90       	pop	r6
     6a0:	5f 90       	pop	r5
     6a2:	4f 90       	pop	r4
     6a4:	3f 90       	pop	r3
     6a6:	2f 90       	pop	r2
     6a8:	1f 90       	pop	r1
     6aa:	0f 90       	pop	r0
     6ac:	0b be       	out	0x3b, r0	; 59
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0

	sei();
     6b4:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     6b6:	08 95       	ret

000006b8 <getCurrentProcess>:

inline Process getCurrentProcess() {
	return (Process) __current_process;
}
     6b8:	80 91 fa 01 	lds	r24, 0x01FA
     6bc:	90 91 fb 01 	lds	r25, 0x01FB
     6c0:	08 95       	ret

000006c2 <switchProcess>:

void switchProcess(Process newProcess) {
     6c2:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     6c4:	80 91 fa 01 	lds	r24, 0x01FA
     6c8:	90 91 fb 01 	lds	r25, 0x01FB
	__current_process = newProcess;
     6cc:	70 93 fb 01 	sts	0x01FB, r23
     6d0:	60 93 fa 01 	sts	0x01FA, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     6d4:	0e 94 06 03 	call	0x60c	; 0x60c <switchContext>
}
     6d8:	08 95       	ret

000006da <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     6e0:	2a 5f       	subi	r18, 0xFA	; 250
     6e2:	0e 94 98 02 	call	0x530	; 0x530 <createProcessBase3>
     6e6:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     6e8:	00 97       	sbiw	r24, 0x00	; 0
     6ea:	e9 f0       	breq	.+58     	; 0x726 <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     6ec:	dc 01       	movw	r26, r24
     6ee:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     6f0:	80 91 02 01 	lds	r24, 0x0102
     6f4:	90 91 03 01 	lds	r25, 0x0103
     6f8:	95 83       	std	Z+5, r25	; 0x05
     6fa:	84 83       	std	Z+4, r24	; 0x04
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	90 93 03 01 	sts	0x0103, r25
     702:	80 93 02 01 	sts	0x0102, r24
	ext->stackSize = stackSize;
     706:	13 96       	adiw	r26, 0x03	; 3
     708:	dc 93       	st	X, r29
     70a:	ce 93       	st	-X, r28
     70c:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     70e:	27 e2       	ldi	r18, 0x27	; 39
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	2c 1b       	sub	r18, r28
     714:	3d 0b       	sbc	r19, r29
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	82 0f       	add	r24, r18
     71c:	93 1f       	adc	r25, r19
     71e:	15 96       	adiw	r26, 0x05	; 5
     720:	9c 93       	st	X, r25
     722:	8e 93       	st	-X, r24
     724:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     726:	cf 01       	movw	r24, r30
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
     72e:	40 91 00 01 	lds	r20, 0x0100
     732:	50 91 01 01 	lds	r21, 0x0101
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	0e 94 6d 03 	call	0x6da	; 0x6da <createProcess3>
}
     73c:	08 95       	ret

0000073e <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
	return createProcess2(entryPoint, NULL);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	0e 94 97 03 	call	0x72e	; 0x72e <createProcess2>
}
     746:	08 95       	ret

00000748 <freeProcess>:

void freeProcess(Process process) {
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     74e:	80 91 fa 01 	lds	r24, 0x01FA
     752:	90 91 fb 01 	lds	r25, 0x01FB
     756:	c8 17       	cp	r28, r24
     758:	d9 07       	cpc	r29, r25
     75a:	69 f0       	breq	.+26     	; 0x776 <freeProcess+0x2e>
     75c:	fe 01       	movw	r30, r28
     75e:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     760:	8c 81       	ldd	r24, Y+4	; 0x04
     762:	9d 81       	ldd	r25, Y+5	; 0x05
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	21 f0       	breq	.+8      	; 0x770 <freeProcess+0x28>
		free(pcb->stackTop);
     768:	84 81       	ldd	r24, Z+4	; 0x04
     76a:	95 81       	ldd	r25, Z+5	; 0x05
     76c:	0e 94 cc 0a 	call	0x1598	; 0x1598 <free>
	}
	free(process);
     770:	ce 01       	movw	r24, r28
     772:	0e 94 cc 0a 	call	0x1598	; 0x1598 <free>
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
	return ProcMem(process)->stackSize;
}
     77c:	fc 01       	movw	r30, r24
     77e:	86 81       	ldd	r24, Z+6	; 0x06
     780:	08 95       	ret

00000782 <getFreeProcessStackSize>:

uint16_t getFreeProcessStackSize(Process process) {
     782:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     784:	20 85       	ldd	r18, Z+8	; 0x08
     786:	31 85       	ldd	r19, Z+9	; 0x09
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01
     78c:	28 1b       	sub	r18, r24
     78e:	39 0b       	sbc	r19, r25
}
     790:	c9 01       	movw	r24, r18
     792:	08 95       	ret

00000794 <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     794:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     796:	84 81       	ldd	r24, Z+4	; 0x04
     798:	95 81       	ldd	r25, Z+5	; 0x05
     79a:	08 95       	ret

0000079c <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
	return ProcMem(proc) + ADDITIONAL_MEMORY;
     79c:	9c 01       	movw	r18, r24
     79e:	28 5d       	subi	r18, 0xD8	; 216
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
}
     7a2:	c9 01       	movw	r24, r18
     7a4:	08 95       	ret

000007a6 <init_process>:
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
     7a6:	80 91 f9 01 	lds	r24, 0x01F9
     7aa:	8a 5f       	subi	r24, 0xFA	; 250
     7ac:	80 93 f9 01 	sts	0x01F9, r24
	init_process_base();
     7b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <init_process_base>
     7b4:	a0 91 fa 01 	lds	r26, 0x01FA
     7b8:	b0 91 fb 01 	lds	r27, 0x01FB
     7bc:	fd 01       	movw	r30, r26
     7be:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     7c0:	15 96       	adiw	r26, 0x05	; 5
     7c2:	1c 92       	st	X, r1
     7c4:	1e 92       	st	-X, r1
     7c6:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     7c8:	80 91 00 01 	lds	r24, 0x0100
     7cc:	90 91 01 01 	lds	r25, 0x0101
     7d0:	93 83       	std	Z+3, r25	; 0x03
     7d2:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     7d4:	80 91 f2 01 	lds	r24, 0x01F2
     7d8:	90 91 f3 01 	lds	r25, 0x01F3
     7dc:	95 83       	std	Z+5, r25	; 0x05
     7de:	84 83       	std	Z+4, r24	; 0x04
}
     7e0:	08 95       	ret

000007e2 <init_idle_scheduler>:

Process __idle_process;

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
     7e2:	85 e7       	ldi	r24, 0x75	; 117
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	40 e4       	ldi	r20, 0x40	; 64
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	0e 94 6d 03 	call	0x6da	; 0x6da <createProcess3>
     7f4:	90 93 ad 02 	sts	0x02AD, r25
     7f8:	80 93 ac 02 	sts	0x02AC, r24
}
     7fc:	08 95       	ret

000007fe <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
}
     7fe:	80 91 ac 02 	lds	r24, 0x02AC
     802:	90 91 ad 02 	lds	r25, 0x02AD
     806:	08 95       	ret

00000808 <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     80c:	cf e0       	ldi	r28, 0x0F	; 15
     80e:	d2 e0       	ldi	r29, 0x02	; 2
     810:	ce 01       	movw	r24, r28
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 31 08 	call	0x1062	; 0x1062 <setWaveformGenerationMode>
	setTimerCompareValue(timer, 2500);
     81a:	83 e3       	ldi	r24, 0x33	; 51
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	64 ec       	ldi	r22, 0xC4	; 196
     820:	79 e0       	ldi	r23, 0x09	; 9
     822:	0e 94 00 09 	call	0x1200	; 0x1200 <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     826:	ce 01       	movw	r24, r28
     828:	62 e0       	ldi	r22, 0x02	; 2
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
     836:	83 e3       	ldi	r24, 0x33	; 51
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <enableTimerInterrupt>
	sei();
     83e:	78 94       	sei
}
     840:	08 95       	ret
#include "scheduler.kernel.h"

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     842:	08 95       	ret

00000844 <schedule>:

// Regular header-files
#include "../kernel.h"

Process schedule(BOOL fromTimer) {
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     84a:	0e 94 1b 05 	call	0xa36	; 0xa36 <dms_schedule>
     84e:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	51 f4       	brne	.+20     	; 0x868 <schedule+0x24>
     854:	ce 01       	movw	r24, r28
     856:	0e 94 ae 09 	call	0x135c	; 0x135c <rr_schedule>
     85a:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	21 f4       	brne	.+8      	; 0x868 <schedule+0x24>
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
	return __idle_process;
     860:	20 91 ac 02 	lds	r18, 0x02AC
     864:	30 91 ad 02 	lds	r19, 0x02AD
	return p;
}
     868:	c9 01       	movw	r24, r18
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <__vector_32>:
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
#endif
	// First push the current context, before any register may be modified.
	PushProcessContext()
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	0f 92       	push	r0
     878:	0b b6       	in	r0, 0x3b	; 59
     87a:	0f 92       	push	r0
     87c:	1f 92       	push	r1
     87e:	11 24       	eor	r1, r1
     880:	2f 92       	push	r2
     882:	3f 92       	push	r3
     884:	4f 92       	push	r4
     886:	5f 92       	push	r5
     888:	6f 92       	push	r6
     88a:	7f 92       	push	r7
     88c:	8f 92       	push	r8
     88e:	9f 92       	push	r9
     890:	af 92       	push	r10
     892:	bf 92       	push	r11
     894:	cf 92       	push	r12
     896:	df 92       	push	r13
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     8bc:	80 91 fc 01 	lds	r24, 0x01FC
     8c0:	90 91 fd 01 	lds	r25, 0x01FD
     8c4:	a0 91 fe 01 	lds	r26, 0x01FE
     8c8:	b0 91 ff 01 	lds	r27, 0x01FF
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	a1 1d       	adc	r26, r1
     8d0:	b1 1d       	adc	r27, r1
     8d2:	80 93 fc 01 	sts	0x01FC, r24
     8d6:	90 93 fd 01 	sts	0x01FD, r25
     8da:	a0 93 fe 01 	sts	0x01FE, r26
     8de:	b0 93 ff 01 	sts	0x01FF, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     8e2:	a0 91 fa 01 	lds	r26, 0x01FA
	asm volatile("lds r27, __current_process + 1");
     8e6:	b0 91 fb 01 	lds	r27, 0x01FB
	StoreContextStack()
     8ea:	0d b6       	in	r0, 0x3d	; 61
     8ec:	0d 92       	st	X+, r0
     8ee:	0e b6       	in	r0, 0x3e	; 62
     8f0:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 22 04 	call	0x844	; 0x844 <schedule>
     8fa:	90 93 fb 01 	sts	0x01FB, r25
     8fe:	80 93 fa 01 	sts	0x01FA, r24
	if (__current_process == InvalidProcess) {
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	11 f4       	brne	.+4      	; 0x90a <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     906:	0e 94 02 0a 	call	0x1404	; 0x1404 <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     90a:	dc 01       	movw	r26, r24
	RestoreContextStack()
     90c:	0d 90       	ld	r0, X+
     90e:	0d be       	out	0x3d, r0	; 61
     910:	0d 90       	ld	r0, X+
     912:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	3f 90       	pop	r3
     94e:	2f 90       	pop	r2
     950:	1f 90       	pop	r1
     952:	0f 90       	pop	r0
     954:	0b be       	out	0x3b, r0	; 59
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     95c:	18 95       	reti

0000095e <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
     95e:	80 b7       	in	r24, 0x30	; 48
     960:	80 68       	ori	r24, 0x80	; 128
     962:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
     964:	e4 e6       	ldi	r30, 0x64	; 100
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	80 66       	ori	r24, 0x60	; 96
     96c:	80 83       	st	Z, r24
	
	// Watchdog-timer
	// Enabled through the WDTON-fuse-bit. Explicitely disable here.
	// Configure the prescaler -- WDT system-reset after 0,5 s without wdt-instruction.
	WDTCSR = _BV(WDCE);
     96e:	e0 e6       	ldi	r30, 0x60	; 96
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	80 83       	st	Z, r24
	// WDP3:0 = 0101 - 0,5s timeout
	WDTCSR |= // _BV(WDP3) |
     976:	80 81       	ld	r24, Z
     978:	85 60       	ori	r24, 0x05	; 5
     97a:	80 83       	st	Z, r24
			_BV(WDP0);
	
	// BOD - TODO configure?
	
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
     97c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <init_process>
	rr_captureMainProcess(PrioNormal);
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <rr_captureMainProcess>
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     988:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <before_scheduler>
	start_scheduler();
     98c:	0e 94 1b 04 	call	0x836	; 0x836 <start_scheduler>
}
     990:	08 95       	ret

00000992 <MyPeriodicJob>:

volatile uint16_t counter = 0;
volatile uint16_t main_counter = 0;

void MyPeriodicJob() {
	counter++;
     992:	80 91 f4 01 	lds	r24, 0x01F4
     996:	90 91 f5 01 	lds	r25, 0x01F5
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	90 93 f5 01 	sts	0x01F5, r25
     9a0:	80 93 f4 01 	sts	0x01F4, r24
}
     9a4:	08 95       	ret

000009a6 <before_scheduler>:

void before_scheduler() {
	createPeriodicJob(&MyPeriodicJob, 50, 0);
     9a6:	89 ec       	ldi	r24, 0xC9	; 201
     9a8:	94 e0       	ldi	r25, 0x04	; 4
     9aa:	42 e3       	ldi	r20, 0x32	; 50
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	0e 94 cc 05 	call	0xb98	; 0xb98 <createPeriodicJob>
}
     9b8:	08 95       	ret

000009ba <main>:

int main() {
	// This will continue as rr-thread.
	while (1) {
		main_counter++;
     9ba:	80 91 f6 01 	lds	r24, 0x01F6
     9be:	90 91 f7 01 	lds	r25, 0x01F7
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	90 93 f7 01 	sts	0x01F7, r25
     9c8:	80 93 f6 01 	sts	0x01F6, r24
     9cc:	f6 cf       	rjmp	.-20     	; 0x9ba <main>

000009ce <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
	PJob job = JobMem(process);
     9d6:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     9da:	e8 2e       	mov	r14, r24
     9dc:	e7 01       	movw	r28, r14
     9de:	7e 01       	movw	r14, r28
     9e0:	f9 2e       	mov	r15, r25
     9e2:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
     9e4:	e9 81       	ldd	r30, Y+1	; 0x01
     9e6:	fa 81       	ldd	r31, Y+2	; 0x02
     9e8:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
     9ea:	1c 86       	std	Y+12, r1	; 0x0c
     9ec:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
     9ee:	0e 94 44 06 	call	0xc88	; 0xc88 <schedule_next>
     9f2:	f8 cf       	rjmp	.-16     	; 0x9e4 <AperiodicJobWrapper+0x16>

000009f4 <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	PJob job = JobMem(process);
     9fc:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     a00:	e8 2e       	mov	r14, r24
     a02:	e7 01       	movw	r28, r14
     a04:	7e 01       	movw	r14, r28
     a06:	f9 2e       	mov	r15, r25
     a08:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
     a0a:	e9 81       	ldd	r30, Y+1	; 0x01
     a0c:	fa 81       	ldd	r31, Y+2	; 0x02
     a0e:	09 95       	icall
		periodicJob->nextPeriod += job->period;
     a10:	8b 85       	ldd	r24, Y+11	; 0x0b
     a12:	9c 85       	ldd	r25, Y+12	; 0x0c
     a14:	ad 85       	ldd	r26, Y+13	; 0x0d
     a16:	be 85       	ldd	r27, Y+14	; 0x0e
     a18:	2d 81       	ldd	r18, Y+5	; 0x05
     a1a:	3e 81       	ldd	r19, Y+6	; 0x06
     a1c:	4f 81       	ldd	r20, Y+7	; 0x07
     a1e:	58 85       	ldd	r21, Y+8	; 0x08
     a20:	82 0f       	add	r24, r18
     a22:	93 1f       	adc	r25, r19
     a24:	a4 1f       	adc	r26, r20
     a26:	b5 1f       	adc	r27, r21
     a28:	8b 87       	std	Y+11, r24	; 0x0b
     a2a:	9c 87       	std	Y+12, r25	; 0x0c
     a2c:	ad 87       	std	Y+13, r26	; 0x0d
     a2e:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
     a30:	0e 94 44 06 	call	0xc88	; 0xc88 <schedule_next>
     a34:	ea cf       	rjmp	.-44     	; 0xa0a <PeriodicJobWrapper+0x16>

00000a36 <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
     a3e:	c0 91 02 02 	lds	r28, 0x0202
     a42:	d0 91 03 02 	lds	r29, 0x0203
	while (current) {
     a46:	25 c0       	rjmp	.+74     	; 0xa92 <dms_schedule+0x5c>
		PJob job = JobMem(current);
     a48:	ce 01       	movw	r24, r28
     a4a:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     a4e:	fc 01       	movw	r30, r24
		switch(job->jobType) {
     a50:	81 85       	ldd	r24, Z+9	; 0x09
     a52:	92 85       	ldd	r25, Z+10	; 0x0a
     a54:	00 97       	sbiw	r24, 0x00	; 0
     a56:	21 f0       	breq	.+8      	; 0xa60 <dms_schedule+0x2a>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	91 05       	cpc	r25, r1
     a5c:	c1 f4       	brne	.+48     	; 0xa8e <dms_schedule+0x58>
     a5e:	12 c0       	rjmp	.+36     	; 0xa84 <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
     a60:	63 85       	ldd	r22, Z+11	; 0x0b
     a62:	74 85       	ldd	r23, Z+12	; 0x0c
     a64:	85 85       	ldd	r24, Z+13	; 0x0d
     a66:	96 85       	ldd	r25, Z+14	; 0x0e
     a68:	20 91 fc 01 	lds	r18, 0x01FC
     a6c:	30 91 fd 01 	lds	r19, 0x01FD
     a70:	40 91 fe 01 	lds	r20, 0x01FE
     a74:	50 91 ff 01 	lds	r21, 0x01FF
     a78:	26 17       	cp	r18, r22
     a7a:	37 07       	cpc	r19, r23
     a7c:	48 07       	cpc	r20, r24
     a7e:	59 07       	cpc	r21, r25
     a80:	30 f0       	brcs	.+12     	; 0xa8e <dms_schedule+0x58>
     a82:	09 c0       	rjmp	.+18     	; 0xa96 <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
     a84:	83 85       	ldd	r24, Z+11	; 0x0b
     a86:	94 85       	ldd	r25, Z+12	; 0x0c
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	91 05       	cpc	r25, r1
     a8c:	21 f0       	breq	.+8      	; 0xa96 <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
     a8e:	c3 81       	ldd	r28, Z+3	; 0x03
     a90:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
     a92:	20 97       	sbiw	r28, 0x00	; 0
     a94:	c9 f6       	brne	.-78     	; 0xa48 <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
     a96:	ce 01       	movw	r24, r28
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	08 95       	ret

00000aa2 <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	8c 01       	movw	r16, r24
     aac:	eb 01       	movw	r28, r22
	if (!processListHead) {
     aae:	80 91 02 02 	lds	r24, 0x0202
     ab2:	90 91 03 02 	lds	r25, 0x0203
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	39 f4       	brne	.+14     	; 0xac8 <insertJobIntoList+0x26>
		processListHead = process;
     aba:	10 93 03 02 	sts	0x0203, r17
     abe:	00 93 02 02 	sts	0x0202, r16
		job->nextJob = NULL;
     ac2:	1c 82       	std	Y+4, r1	; 0x04
     ac4:	1b 82       	std	Y+3, r1	; 0x03
     ac6:	2d c0       	rjmp	.+90     	; 0xb22 <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
     ac8:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     acc:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
     ace:	65 81       	ldd	r22, Z+5	; 0x05
     ad0:	76 81       	ldd	r23, Z+6	; 0x06
     ad2:	87 81       	ldd	r24, Z+7	; 0x07
     ad4:	90 85       	ldd	r25, Z+8	; 0x08
     ad6:	2d 81       	ldd	r18, Y+5	; 0x05
     ad8:	3e 81       	ldd	r19, Y+6	; 0x06
     ada:	4f 81       	ldd	r20, Y+7	; 0x07
     adc:	58 85       	ldd	r21, Y+8	; 0x08
     ade:	26 17       	cp	r18, r22
     ae0:	37 07       	cpc	r19, r23
     ae2:	48 07       	cpc	r20, r24
     ae4:	59 07       	cpc	r21, r25
     ae6:	68 f0       	brcs	.+26     	; 0xb02 <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
     ae8:	62 17       	cp	r22, r18
     aea:	73 07       	cpc	r23, r19
     aec:	84 07       	cpc	r24, r20
     aee:	95 07       	cpc	r25, r21
     af0:	21 f4       	brne	.+8      	; 0xafa <insertJobIntoList+0x58>
     af2:	90 81       	ld	r25, Z
     af4:	88 81       	ld	r24, Y
     af6:	98 17       	cp	r25, r24
     af8:	20 f0       	brcs	.+8      	; 0xb02 <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
     afa:	83 81       	ldd	r24, Z+3	; 0x03
     afc:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	19 f7       	brne	.-58     	; 0xac8 <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     b0a:	fc 01       	movw	r30, r24
     b0c:	83 81       	ldd	r24, Z+3	; 0x03
     b0e:	94 81       	ldd	r25, Z+4	; 0x04
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     b1c:	fc 01       	movw	r30, r24
     b1e:	14 83       	std	Z+4, r17	; 0x04
     b20:	03 83       	std	Z+3, r16	; 0x03
	}
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	0f 91       	pop	r16
     b2a:	08 95       	ret

00000b2c <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     b2c:	6f 92       	push	r6
     b2e:	7f 92       	push	r7
     b30:	8f 92       	push	r8
     b32:	9f 92       	push	r9
     b34:	af 92       	push	r10
     b36:	bf 92       	push	r11
     b38:	cf 92       	push	r12
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	5c 01       	movw	r10, r24
     b4a:	4b 01       	movw	r8, r22
     b4c:	69 01       	movw	r12, r18
     b4e:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
     b50:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     b54:	19 2f       	mov	r17, r25
     b56:	68 2e       	mov	r6, r24
     b58:	e3 01       	movw	r28, r6
     b5a:	3e 01       	movw	r6, r28
     b5c:	79 2e       	mov	r7, r25
     b5e:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
     b60:	9a 82       	std	Y+2, r9	; 0x02
     b62:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
     b64:	08 83       	st	Y, r16
	job->period = period;
     b66:	cd 82       	std	Y+5, r12	; 0x05
     b68:	de 82       	std	Y+6, r13	; 0x06
     b6a:	ef 82       	std	Y+7, r14	; 0x07
     b6c:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
     b6e:	c5 01       	movw	r24, r10
     b70:	b3 01       	movw	r22, r6
     b72:	0e 94 51 05 	call	0xaa2	; 0xaa2 <insertJobIntoList>
	return job;
}
     b76:	86 2d       	mov	r24, r6
     b78:	91 2f       	mov	r25, r17
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	df 90       	pop	r13
     b88:	cf 90       	pop	r12
     b8a:	bf 90       	pop	r11
     b8c:	af 90       	pop	r10
     b8e:	9f 90       	pop	r9
     b90:	8f 90       	pop	r8
     b92:	7f 90       	pop	r7
     b94:	6f 90       	pop	r6
     b96:	08 95       	ret

00000b98 <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
     bac:	5a 01       	movw	r10, r20
     bae:	6b 01       	movw	r12, r22
     bb0:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
     bb2:	40 91 00 01 	lds	r20, 0x0100
     bb6:	50 91 01 01 	lds	r21, 0x0101
     bba:	8a ef       	ldi	r24, 0xFA	; 250
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	2f e0       	ldi	r18, 0x0F	; 15
     bc4:	0e 94 6d 03 	call	0x6da	; 0x6da <createProcess3>
     bc8:	f8 2e       	mov	r15, r24
     bca:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
     bcc:	be 01       	movw	r22, r28
     bce:	a6 01       	movw	r20, r12
     bd0:	95 01       	movw	r18, r10
     bd2:	0e 94 96 05 	call	0xb2c	; 0xb2c <initializeJob>
     bd6:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
     bd8:	12 86       	std	Z+10, r1	; 0x0a
     bda:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
     bdc:	20 91 fc 01 	lds	r18, 0x01FC
     be0:	30 91 fd 01 	lds	r19, 0x01FD
     be4:	40 91 fe 01 	lds	r20, 0x01FE
     be8:	50 91 ff 01 	lds	r21, 0x01FF
     bec:	2a 0d       	add	r18, r10
     bee:	3b 1d       	adc	r19, r11
     bf0:	4c 1d       	adc	r20, r12
     bf2:	5d 1d       	adc	r21, r13
     bf4:	23 87       	std	Z+11, r18	; 0x0b
     bf6:	34 87       	std	Z+12, r19	; 0x0c
     bf8:	45 87       	std	Z+13, r20	; 0x0d
     bfa:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
     bfc:	8f 2d       	mov	r24, r15
     bfe:	91 2f       	mov	r25, r17
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	08 95       	ret

00000c14 <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
     c14:	af 92       	push	r10
     c16:	bf 92       	push	r11
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
     c28:	5a 01       	movw	r10, r20
     c2a:	6b 01       	movw	r12, r22
     c2c:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
     c2e:	40 91 00 01 	lds	r20, 0x0100
     c32:	50 91 01 01 	lds	r21, 0x0101
     c36:	87 ee       	ldi	r24, 0xE7	; 231
     c38:	94 e0       	ldi	r25, 0x04	; 4
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	2d e0       	ldi	r18, 0x0D	; 13
     c40:	0e 94 6d 03 	call	0x6da	; 0x6da <createProcess3>
     c44:	f8 2e       	mov	r15, r24
     c46:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
     c48:	be 01       	movw	r22, r28
     c4a:	a6 01       	movw	r20, r12
     c4c:	95 01       	movw	r18, r10
     c4e:	0e 94 96 05 	call	0xb2c	; 0xb2c <initializeJob>
     c52:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	92 87       	std	Z+10, r25	; 0x0a
     c5a:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
     c5c:	14 86       	std	Z+12, r1	; 0x0c
     c5e:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
     c60:	8f 2d       	mov	r24, r15
     c62:	91 2f       	mov	r25, r17
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	df 90       	pop	r13
     c70:	cf 90       	pop	r12
     c72:	bf 90       	pop	r11
     c74:	af 90       	pop	r10
     c76:	08 95       	ret

00000c78 <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
     c78:	0e 94 ce 03 	call	0x79c	; 0x79c <getProcessMemory>
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	fc 01       	movw	r30, r24
     c82:	34 87       	std	Z+12, r19	; 0x0c
     c84:	23 87       	std	Z+11, r18	; 0x0b
}
     c86:	08 95       	ret

00000c88 <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 22 04 	call	0x844	; 0x844 <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	11 f0       	breq	.+4      	; 0xc98 <schedule_next+0x10>
	switchProcess(next); // Will not return here.
     c94:	0e 94 61 03 	call	0x6c2	; 0x6c2 <switchProcess>
     c98:	08 95       	ret

00000c9a <processor_idle>:
}

void processor_idle() {
	sleep_enable();
     c9a:	83 b7       	in	r24, 0x33	; 51
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
     ca0:	83 b7       	in	r24, 0x33	; 51
     ca2:	81 7f       	andi	r24, 0xF1	; 241
     ca4:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
     ca6:	78 94       	sei
	sleep_cpu();
     ca8:	88 95       	sleep
}
     caa:	08 95       	ret

00000cac <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
     cac:	0e 94 4d 06 	call	0xc9a	; 0xc9a <processor_idle>
     cb0:	fd cf       	rjmp	.-6      	; 0xcac <processor_loop_idle>

00000cb2 <stopMotor>:
#include "motor.h"
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

void stopMotor(PMotor motor) {
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	ec 01       	movw	r28, r24
	disableOutputCompare(motor->pwmTimer);
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <disableOutputCompare>
	// This is mainly to still read the speed as zero.
	setTimerCompareValue(motor->pwmTimer, 0);
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	0e 94 00 09 	call	0x1200	; 0x1200 <setTimerCompareValue>
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
     ccc:	88 81       	ld	r24, Y
     cce:	83 ff       	sbrs	r24, 3
     cd0:	08 c0       	rjmp	.+16     	; 0xce2 <stopMotor+0x30>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	0e 94 78 07 	call	0xef0	; 0xef0 <setPinZero>
		setPinZero(Dir2(motor));
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	0e 94 78 07 	call	0xef0	; 0xef0 <setPinZero>
	}
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
     ce8:	fc 01       	movw	r30, r24
     cea:	83 81       	ldd	r24, Z+3	; 0x03
     cec:	94 81       	ldd	r25, Z+4	; 0x04
     cee:	0e 94 18 09 	call	0x1230	; 0x1230 <getTimerCompareValue>
}
     cf2:	08 95       	ret

00000cf4 <getDirection>:

MotorDirection getDirection(PMotor motor) {
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
     cfe:	28 81       	ld	r18, Y
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	23 ff       	sbrs	r18, 3
     d06:	12 c0       	rjmp	.+36     	; 0xd2c <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
     d08:	0e 94 90 07 	call	0xf20	; 0xf20 <readPin>
     d0c:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	0e 94 90 07 	call	0xf20	; 0xf20 <readPin>
		if (dir1 && !dir2) val = FORWARD;
     d16:	01 15       	cp	r16, r1
     d18:	11 05       	cpc	r17, r1
     d1a:	19 f0       	breq	.+6      	; 0xd22 <getDirection+0x2e>
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	e9 f0       	breq	.+58     	; 0xd5a <getDirection+0x66>
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	e9 f4       	brne	.+58     	; 0xd60 <getDirection+0x6c>
     d26:	22 e0       	ldi	r18, 0x02	; 2
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	11 c0       	rjmp	.+34     	; 0xd4e <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
     d2c:	0e 94 90 07 	call	0xf20	; 0xf20 <readPin>
     d30:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	91 05       	cpc	r25, r1
     d36:	59 f0       	breq	.+22     	; 0xd4e <getDirection+0x5a>
     d38:	88 81       	ld	r24, Y
     d3a:	82 ff       	sbrs	r24, 2
     d3c:	08 c0       	rjmp	.+16     	; 0xd4e <getDirection+0x5a>
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	11 f0       	breq	.+4      	; 0xd4c <getDirection+0x58>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9c 01       	movw	r18, r24
	return val;
}
     d4e:	c9 01       	movw	r24, r18
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	ec cf       	rjmp	.-40     	; 0xd38 <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	e9 cf       	rjmp	.-46     	; 0xd38 <getDirection+0x44>

00000d66 <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
     d70:	8b 01       	movw	r16, r22
     d72:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
     d74:	42 30       	cpi	r20, 0x02	; 2
     d76:	51 05       	cpc	r21, r1
     d78:	19 f0       	breq	.+6      	; 0xd80 <setSpeed+0x1a>
     d7a:	01 15       	cp	r16, r1
     d7c:	11 05       	cpc	r17, r1
     d7e:	21 f4       	brne	.+8      	; 0xd88 <setSpeed+0x22>
		stopMotor(motor);
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 59 06 	call	0xcb2	; 0xcb2 <stopMotor>
		return;
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <setSpeed+0x7c>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
     d88:	28 81       	ld	r18, Y
     d8a:	22 ff       	sbrs	r18, 2
     d8c:	08 c0       	rjmp	.+16     	; 0xd9e <setSpeed+0x38>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	41 15       	cp	r20, r1
     d94:	51 05       	cpc	r21, r1
     d96:	11 f0       	breq	.+4      	; 0xd9c <setSpeed+0x36>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change... maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
     d9e:	23 ff       	sbrs	r18, 3
     da0:	13 c0       	rjmp	.+38     	; 0xdc8 <setSpeed+0x62>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
     da6:	61 15       	cp	r22, r1
     da8:	71 05       	cpc	r23, r1
     daa:	39 f4       	brne	.+14     	; 0xdba <setSpeed+0x54>
			setPinOne(motor->direction);
     dac:	0e 94 6a 07 	call	0xed4	; 0xed4 <setPinOne>
			setPinZero(Dir2(motor));
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	0e 94 78 07 	call	0xef0	; 0xef0 <setPinZero>
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
     dba:	0e 94 78 07 	call	0xef0	; 0xef0 <setPinZero>
			setPinOne(Dir2(motor));
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	0e 94 6a 07 	call	0xed4	; 0xed4 <setPinOne>
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	0e 94 87 07 	call	0xf0e	; 0xf0e <writePin>
	}
	setTimerCompareValue(motor->pwmTimer, speed);
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	b8 01       	movw	r22, r16
     dd6:	0e 94 00 09 	call	0x1200	; 0x1200 <setTimerCompareValue>
	enableOutputCompare(motor->pwmTimer);
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <enableOutputCompare>
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	0e 94 b3 06 	call	0xd66	; 0xd66 <setSpeed>
}
     df4:	08 95       	ret

00000df6 <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
     df6:	41 e0       	ldi	r20, 0x01	; 1
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	0e 94 b3 06 	call	0xd66	; 0xd66 <setSpeed>
}
     dfe:	08 95       	ret

00000e00 <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
     e0a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <getDirection>
     e0e:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	91 05       	cpc	r25, r1
     e14:	79 f0       	breq	.+30     	; 0xe34 <getDirSpeed+0x34>
		setPinZero(Dir2(motor));
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
     e16:	f8 01       	movw	r30, r16
     e18:	83 81       	ldd	r24, Z+3	; 0x03
     e1a:	94 81       	ldd	r25, Z+4	; 0x04
     e1c:	0e 94 18 09 	call	0x1230	; 0x1230 <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
     e20:	9c 01       	movw	r18, r24
     e22:	36 95       	lsr	r19
     e24:	27 95       	ror	r18
	if (dir == BACKWARD)
     e26:	c1 30       	cpi	r28, 0x01	; 1
     e28:	d1 05       	cpc	r29, r1
     e2a:	31 f4       	brne	.+12     	; 0xe38 <getDirSpeed+0x38>
		val *= -1; // Should be optimized away by compiler.
     e2c:	30 95       	com	r19
     e2e:	21 95       	neg	r18
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <getDirSpeed+0x38>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
     e38:	c9 01       	movw	r24, r18
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
     e44:	47 2f       	mov	r20, r23
	uint16_t absv = abs(speed);
     e46:	77 ff       	sbrs	r23, 7
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <setDirSpeed+0xc>
     e4a:	70 95       	com	r23
     e4c:	61 95       	neg	r22
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
	setSpeed(motor, absv, speed < 0 ? BACKWARD : FORWARD);
     e54:	44 1f       	adc	r20, r20
     e56:	44 27       	eor	r20, r20
     e58:	44 1f       	adc	r20, r20
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	0e 94 b3 06 	call	0xd66	; 0xd66 <setSpeed>
}
     e60:	08 95       	ret

00000e62 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
     e62:	dc 01       	movw	r26, r24
     e64:	14 96       	adiw	r26, 0x04	; 4
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	15 97       	sbiw	r26, 0x05	; 5
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	80 83       	st	Z, r24
}
     e70:	08 95       	ret

00000e72 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
     e72:	dc 01       	movw	r26, r24
     e74:	14 96       	adiw	r26, 0x04	; 4
     e76:	ed 91       	ld	r30, X+
     e78:	fc 91       	ld	r31, X
     e7a:	15 97       	sbiw	r26, 0x05	; 5
     e7c:	10 82       	st	Z, r1
}
     e7e:	08 95       	ret

00000e80 <setPinOutput>:

void setPinOutput(PPin pin) {
     e80:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
     e82:	ed 91       	ld	r30, X+
     e84:	fc 91       	ld	r31, X
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	04 80       	ldd	r0, Z+4	; 0x04
     e8a:	f5 81       	ldd	r31, Z+5	; 0x05
     e8c:	e0 2d       	mov	r30, r0
     e8e:	80 81       	ld	r24, Z
     e90:	12 96       	adiw	r26, 0x02	; 2
     e92:	9c 91       	ld	r25, X
     e94:	12 97       	sbiw	r26, 0x02	; 2
     e96:	89 2b       	or	r24, r25
     e98:	80 83       	st	Z, r24
}
     e9a:	08 95       	ret

00000e9c <setPinInput>:

void setPinInput(PPin pin) {
     e9c:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	11 97       	sbiw	r26, 0x01	; 1
     ea4:	04 80       	ldd	r0, Z+4	; 0x04
     ea6:	f5 81       	ldd	r31, Z+5	; 0x05
     ea8:	e0 2d       	mov	r30, r0
     eaa:	90 81       	ld	r25, Z
     eac:	12 96       	adiw	r26, 0x02	; 2
     eae:	8c 91       	ld	r24, X
     eb0:	12 97       	sbiw	r26, 0x02	; 2
     eb2:	80 95       	com	r24
     eb4:	89 23       	and	r24, r25
     eb6:	80 83       	st	Z, r24
}
     eb8:	08 95       	ret

00000eba <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
     eba:	dc 01       	movw	r26, r24
     ebc:	ed 91       	ld	r30, X+
     ebe:	fc 91       	ld	r31, X
     ec0:	11 97       	sbiw	r26, 0x01	; 1
     ec2:	60 83       	st	Z, r22
}
     ec4:	08 95       	ret

00000ec6 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
     ec6:	dc 01       	movw	r26, r24
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	ed 91       	ld	r30, X+
     ecc:	fc 91       	ld	r31, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	80 81       	ld	r24, Z
}
     ed2:	08 95       	ret

00000ed4 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
     ed4:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	11 97       	sbiw	r26, 0x01	; 1
     edc:	01 90       	ld	r0, Z+
     ede:	f0 81       	ld	r31, Z
     ee0:	e0 2d       	mov	r30, r0
     ee2:	80 81       	ld	r24, Z
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	9c 91       	ld	r25, X
     ee8:	12 97       	sbiw	r26, 0x02	; 2
     eea:	89 2b       	or	r24, r25
     eec:	80 83       	st	Z, r24
}
     eee:	08 95       	ret

00000ef0 <setPinZero>:

void setPinZero(PPin pin) {
     ef0:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
     ef2:	ed 91       	ld	r30, X+
     ef4:	fc 91       	ld	r31, X
     ef6:	11 97       	sbiw	r26, 0x01	; 1
     ef8:	01 90       	ld	r0, Z+
     efa:	f0 81       	ld	r31, Z
     efc:	e0 2d       	mov	r30, r0
     efe:	90 81       	ld	r25, Z
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	8c 91       	ld	r24, X
     f04:	12 97       	sbiw	r26, 0x02	; 2
     f06:	80 95       	com	r24
     f08:	89 23       	and	r24, r25
     f0a:	80 83       	st	Z, r24
}
     f0c:	08 95       	ret

00000f0e <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
     f0e:	61 15       	cp	r22, r1
     f10:	71 05       	cpc	r23, r1
     f12:	19 f0       	breq	.+6      	; 0xf1a <writePin+0xc>
     f14:	0e 94 6a 07 	call	0xed4	; 0xed4 <setPinOne>
     f18:	08 95       	ret
	else setPinZero(pin);
     f1a:	0e 94 78 07 	call	0xef0	; 0xef0 <setPinZero>
     f1e:	08 95       	ret

00000f20 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
     f20:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
     f22:	a0 81       	ld	r26, Z
     f24:	b1 81       	ldd	r27, Z+1	; 0x01
     f26:	12 96       	adiw	r26, 0x02	; 2
     f28:	0d 90       	ld	r0, X+
     f2a:	bc 91       	ld	r27, X
     f2c:	a0 2d       	mov	r26, r0
     f2e:	8c 91       	ld	r24, X
     f30:	92 81       	ldd	r25, Z+2	; 0x02
     f32:	89 23       	and	r24, r25
		return TRUE;
     f34:	21 e0       	ldi	r18, 0x01	; 1
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	11 f4       	brne	.+4      	; 0xf3e <readPin+0x1e>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
     f3e:	c9 01       	movw	r24, r18
     f40:	08 95       	ret

00000f42 <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
     f42:	fc 01       	movw	r30, r24
     f44:	64 30       	cpi	r22, 0x04	; 4
     f46:	71 05       	cpc	r23, r1
     f48:	48 f4       	brcc	.+18     	; 0xf5c <setCompareMatchOutputMode+0x1a>
     f4a:	db 01       	movw	r26, r22
     f4c:	aa 51       	subi	r26, 0x1A	; 26
     f4e:	be 4f       	sbci	r27, 0xFE	; 254
     f50:	2c 91       	ld	r18, X
     f52:	66 51       	subi	r22, 0x16	; 22
     f54:	7e 4f       	sbci	r23, 0xFE	; 254
     f56:	db 01       	movw	r26, r22
     f58:	3c 91       	ld	r19, X
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <setCompareMatchOutputMode+0x1e>
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
     f60:	84 81       	ldd	r24, Z+4	; 0x04
     f62:	95 81       	ldd	r25, Z+5	; 0x05
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	21 f4       	brne	.+8      	; 0xf72 <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
     f6a:	36 95       	lsr	r19
     f6c:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
     f6e:	26 95       	lsr	r18
     f70:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
     f72:	a0 81       	ld	r26, Z
     f74:	b1 81       	ldd	r27, Z+1	; 0x01
     f76:	11 96       	adiw	r26, 0x01	; 1
     f78:	0d 90       	ld	r0, X+
     f7a:	bc 91       	ld	r27, X
     f7c:	a0 2d       	mov	r26, r0
     f7e:	8c 91       	ld	r24, X
     f80:	83 2b       	or	r24, r19
     f82:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
     f84:	01 90       	ld	r0, Z+
     f86:	f0 81       	ld	r31, Z
     f88:	e0 2d       	mov	r30, r0
     f8a:	01 80       	ldd	r0, Z+1	; 0x01
     f8c:	f2 81       	ldd	r31, Z+2	; 0x02
     f8e:	e0 2d       	mov	r30, r0
     f90:	80 81       	ld	r24, Z
     f92:	20 95       	com	r18
     f94:	28 23       	and	r18, r24
     f96:	20 83       	st	Z, r18
}
     f98:	08 95       	ret

00000f9a <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
     f9a:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
     f9c:	80 81       	ld	r24, Z
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	82 70       	andi	r24, 0x02	; 2
     fa2:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
     fa4:	64 30       	cpi	r22, 0x04	; 4
     fa6:	71 05       	cpc	r23, r1
     fa8:	71 f1       	breq	.+92     	; 0x1006 <setTimerClockSelect+0x6c>
     faa:	65 30       	cpi	r22, 0x05	; 5
     fac:	71 05       	cpc	r23, r1
     fae:	68 f4       	brcc	.+26     	; 0xfca <setTimerClockSelect+0x30>
     fb0:	61 30       	cpi	r22, 0x01	; 1
     fb2:	71 05       	cpc	r23, r1
     fb4:	f9 f0       	breq	.+62     	; 0xff4 <setTimerClockSelect+0x5a>
     fb6:	61 30       	cpi	r22, 0x01	; 1
     fb8:	71 05       	cpc	r23, r1
     fba:	d8 f1       	brcs	.+118    	; 0x1032 <setTimerClockSelect+0x98>
     fbc:	62 30       	cpi	r22, 0x02	; 2
     fbe:	71 05       	cpc	r23, r1
     fc0:	e1 f0       	breq	.+56     	; 0xffa <setTimerClockSelect+0x60>
     fc2:	63 30       	cpi	r22, 0x03	; 3
     fc4:	71 05       	cpc	r23, r1
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <setTimerClockSelect+0x56>
     fc8:	1b c0       	rjmp	.+54     	; 0x1000 <setTimerClockSelect+0x66>
     fca:	67 30       	cpi	r22, 0x07	; 7
     fcc:	71 05       	cpc	r23, r1
     fce:	21 f1       	breq	.+72     	; 0x1018 <setTimerClockSelect+0x7e>
     fd0:	68 30       	cpi	r22, 0x08	; 8
     fd2:	71 05       	cpc	r23, r1
     fd4:	38 f4       	brcc	.+14     	; 0xfe4 <setTimerClockSelect+0x4a>
     fd6:	65 30       	cpi	r22, 0x05	; 5
     fd8:	71 05       	cpc	r23, r1
     fda:	c1 f0       	breq	.+48     	; 0x100c <setTimerClockSelect+0x72>
     fdc:	66 30       	cpi	r22, 0x06	; 6
     fde:	71 05       	cpc	r23, r1
     fe0:	39 f4       	brne	.+14     	; 0xff0 <setTimerClockSelect+0x56>
     fe2:	17 c0       	rjmp	.+46     	; 0x1012 <setTimerClockSelect+0x78>
     fe4:	68 30       	cpi	r22, 0x08	; 8
     fe6:	71 05       	cpc	r23, r1
     fe8:	d1 f0       	breq	.+52     	; 0x101e <setTimerClockSelect+0x84>
     fea:	69 30       	cpi	r22, 0x09	; 9
     fec:	71 05       	cpc	r23, r1
     fee:	e1 f0       	breq	.+56     	; 0x1028 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	1d c0       	rjmp	.+58     	; 0x102e <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
     ff4:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
     ff6:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
     ff8:	27 c0       	rjmp	.+78     	; 0x1048 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
     ffa:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
     ffc:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
     ffe:	24 c0       	rjmp	.+72     	; 0x1048 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	e9 f4       	brne	.+58     	; 0x103e <setTimerClockSelect+0xa4>
    1004:	2d c0       	rjmp	.+90     	; 0x1060 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	b9 f0       	breq	.+46     	; 0x1038 <setTimerClockSelect+0x9e>
    100a:	19 c0       	rjmp	.+50     	; 0x103e <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	d1 f4       	brne	.+52     	; 0x1044 <setTimerClockSelect+0xaa>
    1010:	27 c0       	rjmp	.+78     	; 0x1060 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	a1 f0       	breq	.+40     	; 0x103e <setTimerClockSelect+0xa4>
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	a1 f0       	breq	.+40     	; 0x1044 <setTimerClockSelect+0xaa>
    101c:	07 c0       	rjmp	.+14     	; 0x102c <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	f9 f4       	brne	.+62     	; 0x1060 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    1022:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	10 c0       	rjmp	.+32     	; 0x1048 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	d1 f4       	brne	.+52     	; 0x1060 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    102c:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	0b c0       	rjmp	.+22     	; 0x1048 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    1032:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1034:	87 e0       	ldi	r24, 0x07	; 7
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    1038:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    103e:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    1044:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    1046:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    1048:	a3 81       	ldd	r26, Z+3	; 0x03
    104a:	b4 81       	ldd	r27, Z+4	; 0x04
    104c:	2c 91       	ld	r18, X
    104e:	29 2b       	or	r18, r25
    1050:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    1052:	03 80       	ldd	r0, Z+3	; 0x03
    1054:	f4 81       	ldd	r31, Z+4	; 0x04
    1056:	e0 2d       	mov	r30, r0
    1058:	90 81       	ld	r25, Z
    105a:	80 95       	com	r24
    105c:	89 23       	and	r24, r25
    105e:	80 83       	st	Z, r24
    1060:	08 95       	ret

00001062 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
    1062:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    1064:	80 81       	ld	r24, Z
    1066:	82 ff       	sbrs	r24, 2
    1068:	54 c0       	rjmp	.+168    	; 0x1112 <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    106a:	65 30       	cpi	r22, 0x05	; 5
    106c:	71 05       	cpc	r23, r1
    106e:	b9 f1       	breq	.+110    	; 0x10de <setWaveformGenerationMode+0x7c>
    1070:	66 30       	cpi	r22, 0x06	; 6
    1072:	71 05       	cpc	r23, r1
    1074:	b0 f4       	brcc	.+44     	; 0x10a2 <setWaveformGenerationMode+0x40>
    1076:	62 30       	cpi	r22, 0x02	; 2
    1078:	71 05       	cpc	r23, r1
    107a:	69 f1       	breq	.+90     	; 0x10d6 <setWaveformGenerationMode+0x74>
    107c:	63 30       	cpi	r22, 0x03	; 3
    107e:	71 05       	cpc	r23, r1
    1080:	40 f4       	brcc	.+16     	; 0x1092 <setWaveformGenerationMode+0x30>
    1082:	61 15       	cp	r22, r1
    1084:	71 05       	cpc	r23, r1
    1086:	19 f1       	breq	.+70     	; 0x10ce <setWaveformGenerationMode+0x6c>
    1088:	61 30       	cpi	r22, 0x01	; 1
    108a:	71 05       	cpc	r23, r1
    108c:	09 f0       	breq	.+2      	; 0x1090 <setWaveformGenerationMode+0x2e>
    108e:	8f c0       	rjmp	.+286    	; 0x11ae <setWaveformGenerationMode+0x14c>
    1090:	6e c0       	rjmp	.+220    	; 0x116e <setWaveformGenerationMode+0x10c>
    1092:	63 30       	cpi	r22, 0x03	; 3
    1094:	71 05       	cpc	r23, r1
    1096:	29 f1       	breq	.+74     	; 0x10e2 <setWaveformGenerationMode+0x80>
    1098:	64 30       	cpi	r22, 0x04	; 4
    109a:	71 05       	cpc	r23, r1
    109c:	09 f0       	breq	.+2      	; 0x10a0 <setWaveformGenerationMode+0x3e>
    109e:	87 c0       	rjmp	.+270    	; 0x11ae <setWaveformGenerationMode+0x14c>
    10a0:	24 c0       	rjmp	.+72     	; 0x10ea <setWaveformGenerationMode+0x88>
    10a2:	68 30       	cpi	r22, 0x08	; 8
    10a4:	71 05       	cpc	r23, r1
    10a6:	29 f1       	breq	.+74     	; 0x10f2 <setWaveformGenerationMode+0x90>
    10a8:	69 30       	cpi	r22, 0x09	; 9
    10aa:	71 05       	cpc	r23, r1
    10ac:	40 f4       	brcc	.+16     	; 0x10be <setWaveformGenerationMode+0x5c>
    10ae:	66 30       	cpi	r22, 0x06	; 6
    10b0:	71 05       	cpc	r23, r1
    10b2:	39 f1       	breq	.+78     	; 0x1102 <setWaveformGenerationMode+0xa0>
    10b4:	67 30       	cpi	r22, 0x07	; 7
    10b6:	71 05       	cpc	r23, r1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <setWaveformGenerationMode+0x5a>
    10ba:	79 c0       	rjmp	.+242    	; 0x11ae <setWaveformGenerationMode+0x14c>
    10bc:	26 c0       	rjmp	.+76     	; 0x110a <setWaveformGenerationMode+0xa8>
    10be:	69 30       	cpi	r22, 0x09	; 9
    10c0:	71 05       	cpc	r23, r1
    10c2:	d9 f0       	breq	.+54     	; 0x10fa <setWaveformGenerationMode+0x98>
    10c4:	6a 30       	cpi	r22, 0x0A	; 10
    10c6:	71 05       	cpc	r23, r1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <setWaveformGenerationMode+0x6a>
    10ca:	71 c0       	rjmp	.+226    	; 0x11ae <setWaveformGenerationMode+0x14c>
    10cc:	10 c0       	rjmp	.+32     	; 0x10ee <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    10ce:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    10d0:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    10d2:	88 e1       	ldi	r24, 0x18	; 24
    10d4:	4f c0       	rjmp	.+158    	; 0x1174 <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    10d6:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    10d8:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    10da:	80 e1       	ldi	r24, 0x10	; 16
    10dc:	46 c0       	rjmp	.+140    	; 0x116a <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
    10de:	98 e1       	ldi	r25, 0x18	; 24
    10e0:	3a c0       	rjmp	.+116    	; 0x1156 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    10e2:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    10e4:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    10e6:	88 e1       	ldi	r24, 0x18	; 24
    10e8:	40 c0       	rjmp	.+128    	; 0x116a <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
    10ea:	90 e1       	ldi	r25, 0x10	; 16
    10ec:	2f c0       	rjmp	.+94     	; 0x114c <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    10ee:	90 e1       	ldi	r25, 0x10	; 16
    10f0:	36 c0       	rjmp	.+108    	; 0x115e <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
    10f2:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
    10f4:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    10f6:	80 e1       	ldi	r24, 0x10	; 16
    10f8:	42 c0       	rjmp	.+132    	; 0x117e <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
    10fa:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
    10fc:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
    10fe:	80 e1       	ldi	r24, 0x10	; 16
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1102:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
    1104:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1106:	88 e1       	ldi	r24, 0x18	; 24
    1108:	3a c0       	rjmp	.+116    	; 0x117e <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    110a:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
    110c:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    110e:	88 e1       	ldi	r24, 0x18	; 24
    1110:	1f c0       	rjmp	.+62     	; 0x1150 <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    1112:	62 30       	cpi	r22, 0x02	; 2
    1114:	71 05       	cpc	r23, r1
    1116:	c9 f0       	breq	.+50     	; 0x114a <setWaveformGenerationMode+0xe8>
    1118:	63 30       	cpi	r22, 0x03	; 3
    111a:	71 05       	cpc	r23, r1
    111c:	40 f4       	brcc	.+16     	; 0x112e <setWaveformGenerationMode+0xcc>
    111e:	61 15       	cp	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	79 f0       	breq	.+30     	; 0x1142 <setWaveformGenerationMode+0xe0>
    1124:	61 30       	cpi	r22, 0x01	; 1
    1126:	71 05       	cpc	r23, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <setWaveformGenerationMode+0xca>
    112a:	41 c0       	rjmp	.+130    	; 0x11ae <setWaveformGenerationMode+0x14c>
    112c:	25 c0       	rjmp	.+74     	; 0x1178 <setWaveformGenerationMode+0x116>
    112e:	64 30       	cpi	r22, 0x04	; 4
    1130:	71 05       	cpc	r23, r1
    1132:	c1 f0       	breq	.+48     	; 0x1164 <setWaveformGenerationMode+0x102>
    1134:	64 30       	cpi	r22, 0x04	; 4
    1136:	71 05       	cpc	r23, r1
    1138:	88 f0       	brcs	.+34     	; 0x115c <setWaveformGenerationMode+0xfa>
    113a:	65 30       	cpi	r22, 0x05	; 5
    113c:	71 05       	cpc	r23, r1
    113e:	b9 f5       	brne	.+110    	; 0x11ae <setWaveformGenerationMode+0x14c>
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1142:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1144:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1146:	88 e0       	ldi	r24, 0x08	; 8
    1148:	15 c0       	rjmp	.+42     	; 0x1174 <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    114a:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
    114c:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
    114e:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    1150:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
    1152:	16 c0       	rjmp	.+44     	; 0x1180 <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    1154:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
    1156:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	fa cf       	rjmp	.-12     	; 0x1150 <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    115c:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    115e:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	03 c0       	rjmp	.+6      	; 0x116a <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    1164:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    1166:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1168:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    116a:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    116e:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1170:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    1172:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    1174:	23 e0       	ldi	r18, 0x03	; 3
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1178:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    117a:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    117c:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    117e:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    1180:	a1 81       	ldd	r26, Z+1	; 0x01
    1182:	b2 81       	ldd	r27, Z+2	; 0x02
    1184:	4c 91       	ld	r20, X
    1186:	43 2b       	or	r20, r19
    1188:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    118a:	a1 81       	ldd	r26, Z+1	; 0x01
    118c:	b2 81       	ldd	r27, Z+2	; 0x02
    118e:	3c 91       	ld	r19, X
    1190:	20 95       	com	r18
    1192:	23 23       	and	r18, r19
    1194:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    1196:	a3 81       	ldd	r26, Z+3	; 0x03
    1198:	b4 81       	ldd	r27, Z+4	; 0x04
    119a:	2c 91       	ld	r18, X
    119c:	29 2b       	or	r18, r25
    119e:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    11a0:	03 80       	ldd	r0, Z+3	; 0x03
    11a2:	f4 81       	ldd	r31, Z+4	; 0x04
    11a4:	e0 2d       	mov	r30, r0
    11a6:	90 81       	ld	r25, Z
    11a8:	80 95       	com	r24
    11aa:	89 23       	and	r24, r25
    11ac:	80 83       	st	Z, r24
    11ae:	08 95       	ret

000011b0 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    11b0:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    11b2:	ed 91       	ld	r30, X+
    11b4:	fc 91       	ld	r31, X
    11b6:	11 97       	sbiw	r26, 0x01	; 1
    11b8:	05 80       	ldd	r0, Z+5	; 0x05
    11ba:	f6 81       	ldd	r31, Z+6	; 0x06
    11bc:	e0 2d       	mov	r30, r0
    11be:	20 81       	ld	r18, Z
    11c0:	14 96       	adiw	r26, 0x04	; 4
    11c2:	8d 91       	ld	r24, X+
    11c4:	9c 91       	ld	r25, X
    11c6:	15 97       	sbiw	r26, 0x05	; 5
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <enableTimerInterrupt+0x20>
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <enableTimerInterrupt+0x22>
    11d0:	84 e0       	ldi	r24, 0x04	; 4
    11d2:	82 2b       	or	r24, r18
    11d4:	80 83       	st	Z, r24
}
    11d6:	08 95       	ret

000011d8 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	0e 94 40 07 	call	0xe80	; 0xe80 <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
    11e6:	ce 01       	movw	r24, r28
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	0e 94 a1 07 	call	0xf42	; 0xf42 <setCompareMatchOutputMode>
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	0e 94 a1 07 	call	0xf42	; 0xf42 <setCompareMatchOutputMode>
}
    11fe:	08 95       	ret

00001200 <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    1200:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    1202:	a0 81       	ld	r26, Z
    1204:	b1 81       	ldd	r27, Z+1	; 0x01
    1206:	8c 91       	ld	r24, X
    1208:	82 ff       	sbrs	r24, 2
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    120c:	8f b7       	in	r24, 0x3f	; 63
		cli();
    120e:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    1210:	a2 81       	ldd	r26, Z+2	; 0x02
    1212:	b3 81       	ldd	r27, Z+3	; 0x03
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	7c 93       	st	X, r23
    1218:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    121a:	02 80       	ldd	r0, Z+2	; 0x02
    121c:	f3 81       	ldd	r31, Z+3	; 0x03
    121e:	e0 2d       	mov	r30, r0
    1220:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    1222:	8f bf       	out	0x3f, r24	; 63
    1224:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    1226:	02 80       	ldd	r0, Z+2	; 0x02
    1228:	f3 81       	ldd	r31, Z+3	; 0x03
    122a:	e0 2d       	mov	r30, r0
    122c:	70 83       	st	Z, r23
    122e:	08 95       	ret

00001230 <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    1230:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    1232:	a0 81       	ld	r26, Z
    1234:	b1 81       	ldd	r27, Z+1	; 0x01
    1236:	8c 91       	ld	r24, X
    1238:	82 ff       	sbrs	r24, 2
    123a:	09 c0       	rjmp	.+18     	; 0x124e <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    123c:	2f b7       	in	r18, 0x3f	; 63
		cli();
    123e:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
    1240:	02 80       	ldd	r0, Z+2	; 0x02
    1242:	f3 81       	ldd	r31, Z+3	; 0x03
    1244:	e0 2d       	mov	r30, r0
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
    124a:	2f bf       	out	0x3f, r18	; 63
    124c:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    124e:	02 80       	ldd	r0, Z+2	; 0x02
    1250:	f3 81       	ldd	r31, Z+3	; 0x03
    1252:	e0 2d       	mov	r30, r0
    1254:	90 81       	ld	r25, Z
    1256:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
    1258:	08 95       	ret

0000125a <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	8c 01       	movw	r16, r24
    1264:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	64 e0       	ldi	r22, 0x04	; 4
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	0e 94 0d 0a 	call	0x141a	; 0x141a <calloc>
    1272:	fc 01       	movw	r30, r24
	elem->thread = thread;
    1274:	11 83       	std	Z+1, r17	; 0x01
    1276:	00 83       	st	Z, r16
	elem->next = queue->first;
    1278:	de 01       	movw	r26, r28
    127a:	aa 0f       	add	r26, r26
    127c:	bb 1f       	adc	r27, r27
    127e:	aa 0f       	add	r26, r26
    1280:	bb 1f       	adc	r27, r27
    1282:	ac 0f       	add	r26, r28
    1284:	bd 1f       	adc	r27, r29
    1286:	a8 51       	subi	r26, 0x18	; 24
    1288:	bd 4f       	sbci	r27, 0xFD	; 253
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	11 97       	sbiw	r26, 0x01	; 1
    1290:	93 83       	std	Z+3, r25	; 0x03
    1292:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	fc 93       	st	X, r31
    1298:	ee 93       	st	-X, r30
	if (queue->count == 0)
    129a:	14 96       	adiw	r26, 0x04	; 4
    129c:	8c 91       	ld	r24, X
    129e:	14 97       	sbiw	r26, 0x04	; 4
    12a0:	88 23       	and	r24, r24
    12a2:	21 f4       	brne	.+8      	; 0x12ac <insertThreadIntoQueue+0x52>
		queue->current = elem;
    12a4:	13 96       	adiw	r26, 0x03	; 3
    12a6:	fc 93       	st	X, r31
    12a8:	ee 93       	st	-X, r30
    12aa:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
    12ac:	fe 01       	movw	r30, r28
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	ec 0f       	add	r30, r28
    12b8:	fd 1f       	adc	r31, r29
    12ba:	e8 51       	subi	r30, 0x18	; 24
    12bc:	fd 4f       	sbci	r31, 0xFD	; 253
    12be:	84 81       	ldd	r24, Z+4	; 0x04
    12c0:	8f 5f       	subi	r24, 0xFF	; 255
    12c2:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
    12c4:	80 91 00 02 	lds	r24, 0x0200
    12c8:	90 91 01 02 	lds	r25, 0x0201
    12cc:	8c 17       	cp	r24, r28
    12ce:	9d 07       	cpc	r25, r29
    12d0:	20 f4       	brcc	.+8      	; 0x12da <insertThreadIntoQueue+0x80>
    12d2:	d0 93 01 02 	sts	0x0201, r29
    12d6:	c0 93 00 02 	sts	0x0200, r28
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	08 95       	ret

000012e4 <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
    12ee:	0e 94 9f 03 	call	0x73e	; 0x73e <createProcess>
    12f2:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    12f4:	be 01       	movw	r22, r28
    12f6:	0e 94 2d 09 	call	0x125a	; 0x125a <insertThreadIntoQueue>
	return thread;
}
    12fa:	c8 01       	movw	r24, r16
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
    1306:	63 e0       	ldi	r22, 0x03	; 3
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <createThread2>
}
    130e:	08 95       	ret

00001310 <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	eb 01       	movw	r28, r22
    131a:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
    131c:	0e 94 97 03 	call	0x72e	; 0x72e <createProcess2>
    1320:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1322:	be 01       	movw	r22, r28
    1324:	0e 94 2d 09 	call	0x125a	; 0x125a <insertThreadIntoQueue>
	return thread;
}
    1328:	c8 01       	movw	r24, r16
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	08 95       	ret

00001334 <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	eb 01       	movw	r28, r22
    133e:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
    1340:	a9 01       	movw	r20, r18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	0e 94 6d 03 	call	0x6da	; 0x6da <createProcess3>
    1348:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    134a:	be 01       	movw	r22, r28
    134c:	0e 94 2d 09 	call	0x125a	; 0x125a <insertThreadIntoQueue>
	return thread;
}
    1350:	c8 01       	movw	r24, r16
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    135c:	80 91 00 02 	lds	r24, 0x0200
    1360:	90 91 01 02 	lds	r25, 0x0201
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <rr_schedule+0xc>
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	29 f4       	brne	.+10     	; 0x1376 <rr_schedule+0x1a>
    136c:	10 92 00 02 	sts	0x0200, r1
    1370:	10 92 01 02 	sts	0x0201, r1
    1374:	10 c0       	rjmp	.+32     	; 0x1396 <rr_schedule+0x3a>
    1376:	fc 01       	movw	r30, r24
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	e8 0f       	add	r30, r24
    1382:	f9 1f       	adc	r31, r25
    1384:	e8 51       	subi	r30, 0x18	; 24
    1386:	fd 4f       	sbci	r31, 0xFD	; 253
    1388:	24 81       	ldd	r18, Z+4	; 0x04
    138a:	22 23       	and	r18, r18
    138c:	61 f3       	breq	.-40     	; 0x1366 <rr_schedule+0xa>
    138e:	80 93 00 02 	sts	0x0200, r24
    1392:	90 93 01 02 	sts	0x0201, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    1396:	fc 01       	movw	r30, r24
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	e8 0f       	add	r30, r24
    13a2:	f9 1f       	adc	r31, r25
    13a4:	e8 51       	subi	r30, 0x18	; 24
    13a6:	fd 4f       	sbci	r31, 0xFD	; 253
    13a8:	24 81       	ldd	r18, Z+4	; 0x04
    13aa:	22 23       	and	r18, r18
    13ac:	c9 f0       	breq	.+50     	; 0x13e0 <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    13ae:	a2 81       	ldd	r26, Z+2	; 0x02
    13b0:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    13b2:	12 96       	adiw	r26, 0x02	; 2
    13b4:	0d 90       	ld	r0, X+
    13b6:	bc 91       	ld	r27, X
    13b8:	a0 2d       	mov	r26, r0
    13ba:	10 97       	sbiw	r26, 0x00	; 0
    13bc:	11 f4       	brne	.+4      	; 0x13c2 <rr_schedule+0x66>
    13be:	a0 81       	ld	r26, Z
    13c0:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    13c2:	fc 01       	movw	r30, r24
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	e8 0f       	add	r30, r24
    13ce:	f9 1f       	adc	r31, r25
    13d0:	e8 51       	subi	r30, 0x18	; 24
    13d2:	fd 4f       	sbci	r31, 0xFD	; 253
    13d4:	b3 83       	std	Z+3, r27	; 0x03
    13d6:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    13d8:	2d 91       	ld	r18, X+
    13da:	3c 91       	ld	r19, X
    13dc:	11 97       	sbiw	r26, 0x01	; 1
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    13e4:	c9 01       	movw	r24, r18
    13e6:	08 95       	ret

000013e8 <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    13ee:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <getCurrentProcess>
    13f2:	be 01       	movw	r22, r28
    13f4:	0e 94 2d 09 	call	0x125a	; 0x125a <insertThreadIntoQueue>
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    13fe:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <getCurrentProcess>
}
    1402:	08 95       	ret

00001404 <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    1404:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    1406:	84 b7       	in	r24, 0x34	; 52
    1408:	88 70       	andi	r24, 0x08	; 8
    140a:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    140c:	80 e1       	ldi	r24, 0x10	; 16
    140e:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    1412:	88 e0       	ldi	r24, 0x08	; 8
    1414:	80 93 60 00 	sts	0x0060, r24
    1418:	ff cf       	rjmp	.-2      	; 0x1418 <HARDWARE_RESET+0x14>

0000141a <calloc>:
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	68 9f       	mul	r22, r24
    1428:	80 01       	movw	r16, r0
    142a:	69 9f       	mul	r22, r25
    142c:	10 0d       	add	r17, r0
    142e:	78 9f       	mul	r23, r24
    1430:	10 0d       	add	r17, r0
    1432:	11 24       	eor	r1, r1
    1434:	c8 01       	movw	r24, r16
    1436:	0e 94 32 0a 	call	0x1464	; 0x1464 <malloc>
    143a:	e8 2e       	mov	r14, r24
    143c:	e7 01       	movw	r28, r14
    143e:	7e 01       	movw	r14, r28
    1440:	f9 2e       	mov	r15, r25
    1442:	e7 01       	movw	r28, r14
    1444:	20 97       	sbiw	r28, 0x00	; 0
    1446:	31 f0       	breq	.+12     	; 0x1454 <calloc+0x3a>
    1448:	8e 2d       	mov	r24, r14
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	a8 01       	movw	r20, r16
    1450:	0e 94 65 0b 	call	0x16ca	; 0x16ca <memset>
    1454:	ce 01       	movw	r24, r28
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	08 95       	ret

00001464 <malloc>:
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	91 05       	cpc	r25, r1
    146c:	10 f4       	brcc	.+4      	; 0x1472 <malloc+0xe>
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	e0 91 0d 03 	lds	r30, 0x030D
    1476:	f0 91 0e 03 	lds	r31, 0x030E
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	26 c0       	rjmp	.+76     	; 0x14d0 <malloc+0x6c>
    1484:	60 81       	ld	r22, Z
    1486:	71 81       	ldd	r23, Z+1	; 0x01
    1488:	68 17       	cp	r22, r24
    148a:	79 07       	cpc	r23, r25
    148c:	e0 f0       	brcs	.+56     	; 0x14c6 <malloc+0x62>
    148e:	68 17       	cp	r22, r24
    1490:	79 07       	cpc	r23, r25
    1492:	81 f4       	brne	.+32     	; 0x14b4 <malloc+0x50>
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	21 15       	cp	r18, r1
    149a:	31 05       	cpc	r19, r1
    149c:	31 f0       	breq	.+12     	; 0x14aa <malloc+0x46>
    149e:	d9 01       	movw	r26, r18
    14a0:	13 96       	adiw	r26, 0x03	; 3
    14a2:	9c 93       	st	X, r25
    14a4:	8e 93       	st	-X, r24
    14a6:	12 97       	sbiw	r26, 0x02	; 2
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <malloc+0x9c>
    14aa:	90 93 0e 03 	sts	0x030E, r25
    14ae:	80 93 0d 03 	sts	0x030D, r24
    14b2:	26 c0       	rjmp	.+76     	; 0x1500 <malloc+0x9c>
    14b4:	41 15       	cp	r20, r1
    14b6:	51 05       	cpc	r21, r1
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <malloc+0x5c>
    14ba:	64 17       	cp	r22, r20
    14bc:	75 07       	cpc	r23, r21
    14be:	18 f4       	brcc	.+6      	; 0x14c6 <malloc+0x62>
    14c0:	ab 01       	movw	r20, r22
    14c2:	e9 01       	movw	r28, r18
    14c4:	df 01       	movw	r26, r30
    14c6:	9f 01       	movw	r18, r30
    14c8:	72 81       	ldd	r23, Z+2	; 0x02
    14ca:	63 81       	ldd	r22, Z+3	; 0x03
    14cc:	e7 2f       	mov	r30, r23
    14ce:	f6 2f       	mov	r31, r22
    14d0:	30 97       	sbiw	r30, 0x00	; 0
    14d2:	c1 f6       	brne	.-80     	; 0x1484 <malloc+0x20>
    14d4:	41 15       	cp	r20, r1
    14d6:	51 05       	cpc	r21, r1
    14d8:	01 f1       	breq	.+64     	; 0x151a <malloc+0xb6>
    14da:	48 1b       	sub	r20, r24
    14dc:	59 0b       	sbc	r21, r25
    14de:	44 30       	cpi	r20, 0x04	; 4
    14e0:	51 05       	cpc	r21, r1
    14e2:	80 f4       	brcc	.+32     	; 0x1504 <malloc+0xa0>
    14e4:	12 96       	adiw	r26, 0x02	; 2
    14e6:	8d 91       	ld	r24, X+
    14e8:	9c 91       	ld	r25, X
    14ea:	13 97       	sbiw	r26, 0x03	; 3
    14ec:	20 97       	sbiw	r28, 0x00	; 0
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <malloc+0x92>
    14f0:	9b 83       	std	Y+3, r25	; 0x03
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <malloc+0x9a>
    14f6:	90 93 0e 03 	sts	0x030E, r25
    14fa:	80 93 0d 03 	sts	0x030D, r24
    14fe:	fd 01       	movw	r30, r26
    1500:	32 96       	adiw	r30, 0x02	; 2
    1502:	46 c0       	rjmp	.+140    	; 0x1590 <malloc+0x12c>
    1504:	fd 01       	movw	r30, r26
    1506:	e4 0f       	add	r30, r20
    1508:	f5 1f       	adc	r31, r21
    150a:	81 93       	st	Z+, r24
    150c:	91 93       	st	Z+, r25
    150e:	42 50       	subi	r20, 0x02	; 2
    1510:	50 40       	sbci	r21, 0x00	; 0
    1512:	11 96       	adiw	r26, 0x01	; 1
    1514:	5c 93       	st	X, r21
    1516:	4e 93       	st	-X, r20
    1518:	3b c0       	rjmp	.+118    	; 0x1590 <malloc+0x12c>
    151a:	20 91 0b 03 	lds	r18, 0x030B
    151e:	30 91 0c 03 	lds	r19, 0x030C
    1522:	21 15       	cp	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	41 f4       	brne	.+16     	; 0x1538 <malloc+0xd4>
    1528:	20 91 f0 01 	lds	r18, 0x01F0
    152c:	30 91 f1 01 	lds	r19, 0x01F1
    1530:	30 93 0c 03 	sts	0x030C, r19
    1534:	20 93 0b 03 	sts	0x030B, r18
    1538:	20 91 f2 01 	lds	r18, 0x01F2
    153c:	30 91 f3 01 	lds	r19, 0x01F3
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	41 f4       	brne	.+16     	; 0x1556 <malloc+0xf2>
    1546:	2d b7       	in	r18, 0x3d	; 61
    1548:	3e b7       	in	r19, 0x3e	; 62
    154a:	40 91 ee 01 	lds	r20, 0x01EE
    154e:	50 91 ef 01 	lds	r21, 0x01EF
    1552:	24 1b       	sub	r18, r20
    1554:	35 0b       	sbc	r19, r21
    1556:	e0 91 0b 03 	lds	r30, 0x030B
    155a:	f0 91 0c 03 	lds	r31, 0x030C
    155e:	e2 17       	cp	r30, r18
    1560:	f3 07       	cpc	r31, r19
    1562:	a0 f4       	brcc	.+40     	; 0x158c <malloc+0x128>
    1564:	2e 1b       	sub	r18, r30
    1566:	3f 0b       	sbc	r19, r31
    1568:	28 17       	cp	r18, r24
    156a:	39 07       	cpc	r19, r25
    156c:	78 f0       	brcs	.+30     	; 0x158c <malloc+0x128>
    156e:	ac 01       	movw	r20, r24
    1570:	4e 5f       	subi	r20, 0xFE	; 254
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	24 17       	cp	r18, r20
    1576:	35 07       	cpc	r19, r21
    1578:	48 f0       	brcs	.+18     	; 0x158c <malloc+0x128>
    157a:	4e 0f       	add	r20, r30
    157c:	5f 1f       	adc	r21, r31
    157e:	50 93 0c 03 	sts	0x030C, r21
    1582:	40 93 0b 03 	sts	0x030B, r20
    1586:	81 93       	st	Z+, r24
    1588:	91 93       	st	Z+, r25
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <malloc+0x12c>
    158c:	e0 e0       	ldi	r30, 0x00	; 0
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	cf 01       	movw	r24, r30
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <free>:
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	09 f4       	brne	.+2      	; 0x15a2 <free+0xa>
    15a0:	91 c0       	rjmp	.+290    	; 0x16c4 <free+0x12c>
    15a2:	fc 01       	movw	r30, r24
    15a4:	32 97       	sbiw	r30, 0x02	; 2
    15a6:	13 82       	std	Z+3, r1	; 0x03
    15a8:	12 82       	std	Z+2, r1	; 0x02
    15aa:	60 91 0d 03 	lds	r22, 0x030D
    15ae:	70 91 0e 03 	lds	r23, 0x030E
    15b2:	61 15       	cp	r22, r1
    15b4:	71 05       	cpc	r23, r1
    15b6:	81 f4       	brne	.+32     	; 0x15d8 <free+0x40>
    15b8:	20 81       	ld	r18, Z
    15ba:	31 81       	ldd	r19, Z+1	; 0x01
    15bc:	28 0f       	add	r18, r24
    15be:	39 1f       	adc	r19, r25
    15c0:	80 91 0b 03 	lds	r24, 0x030B
    15c4:	90 91 0c 03 	lds	r25, 0x030C
    15c8:	82 17       	cp	r24, r18
    15ca:	93 07       	cpc	r25, r19
    15cc:	99 f5       	brne	.+102    	; 0x1634 <free+0x9c>
    15ce:	f0 93 0c 03 	sts	0x030C, r31
    15d2:	e0 93 0b 03 	sts	0x030B, r30
    15d6:	76 c0       	rjmp	.+236    	; 0x16c4 <free+0x12c>
    15d8:	db 01       	movw	r26, r22
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <free+0x4c>
    15e0:	cd 01       	movw	r24, r26
    15e2:	d9 01       	movw	r26, r18
    15e4:	ae 17       	cp	r26, r30
    15e6:	bf 07       	cpc	r27, r31
    15e8:	48 f4       	brcc	.+18     	; 0x15fc <free+0x64>
    15ea:	12 96       	adiw	r26, 0x02	; 2
    15ec:	2d 91       	ld	r18, X+
    15ee:	3c 91       	ld	r19, X
    15f0:	13 97       	sbiw	r26, 0x03	; 3
    15f2:	21 15       	cp	r18, r1
    15f4:	31 05       	cpc	r19, r1
    15f6:	a1 f7       	brne	.-24     	; 0x15e0 <free+0x48>
    15f8:	cd 01       	movw	r24, r26
    15fa:	21 c0       	rjmp	.+66     	; 0x163e <free+0xa6>
    15fc:	b3 83       	std	Z+3, r27	; 0x03
    15fe:	a2 83       	std	Z+2, r26	; 0x02
    1600:	ef 01       	movw	r28, r30
    1602:	49 91       	ld	r20, Y+
    1604:	59 91       	ld	r21, Y+
    1606:	9e 01       	movw	r18, r28
    1608:	24 0f       	add	r18, r20
    160a:	35 1f       	adc	r19, r21
    160c:	a2 17       	cp	r26, r18
    160e:	b3 07       	cpc	r27, r19
    1610:	79 f4       	brne	.+30     	; 0x1630 <free+0x98>
    1612:	2d 91       	ld	r18, X+
    1614:	3c 91       	ld	r19, X
    1616:	11 97       	sbiw	r26, 0x01	; 1
    1618:	24 0f       	add	r18, r20
    161a:	35 1f       	adc	r19, r21
    161c:	2e 5f       	subi	r18, 0xFE	; 254
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	31 83       	std	Z+1, r19	; 0x01
    1622:	20 83       	st	Z, r18
    1624:	12 96       	adiw	r26, 0x02	; 2
    1626:	2d 91       	ld	r18, X+
    1628:	3c 91       	ld	r19, X
    162a:	13 97       	sbiw	r26, 0x03	; 3
    162c:	33 83       	std	Z+3, r19	; 0x03
    162e:	22 83       	std	Z+2, r18	; 0x02
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	29 f4       	brne	.+10     	; 0x163e <free+0xa6>
    1634:	f0 93 0e 03 	sts	0x030E, r31
    1638:	e0 93 0d 03 	sts	0x030D, r30
    163c:	43 c0       	rjmp	.+134    	; 0x16c4 <free+0x12c>
    163e:	dc 01       	movw	r26, r24
    1640:	13 96       	adiw	r26, 0x03	; 3
    1642:	fc 93       	st	X, r31
    1644:	ee 93       	st	-X, r30
    1646:	12 97       	sbiw	r26, 0x02	; 2
    1648:	4d 91       	ld	r20, X+
    164a:	5d 91       	ld	r21, X+
    164c:	a4 0f       	add	r26, r20
    164e:	b5 1f       	adc	r27, r21
    1650:	ea 17       	cp	r30, r26
    1652:	fb 07       	cpc	r31, r27
    1654:	69 f4       	brne	.+26     	; 0x1670 <free+0xd8>
    1656:	20 81       	ld	r18, Z
    1658:	31 81       	ldd	r19, Z+1	; 0x01
    165a:	24 0f       	add	r18, r20
    165c:	35 1f       	adc	r19, r21
    165e:	2e 5f       	subi	r18, 0xFE	; 254
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	ec 01       	movw	r28, r24
    1664:	39 83       	std	Y+1, r19	; 0x01
    1666:	28 83       	st	Y, r18
    1668:	22 81       	ldd	r18, Z+2	; 0x02
    166a:	33 81       	ldd	r19, Z+3	; 0x03
    166c:	3b 83       	std	Y+3, r19	; 0x03
    166e:	2a 83       	std	Y+2, r18	; 0x02
    1670:	e0 e0       	ldi	r30, 0x00	; 0
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <free+0xe2>
    1676:	fb 01       	movw	r30, r22
    1678:	bc 01       	movw	r22, r24
    167a:	db 01       	movw	r26, r22
    167c:	12 96       	adiw	r26, 0x02	; 2
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	13 97       	sbiw	r26, 0x03	; 3
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	b9 f7       	brne	.-18     	; 0x1676 <free+0xde>
    1688:	9b 01       	movw	r18, r22
    168a:	2e 5f       	subi	r18, 0xFE	; 254
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	11 97       	sbiw	r26, 0x01	; 1
    1694:	82 0f       	add	r24, r18
    1696:	93 1f       	adc	r25, r19
    1698:	40 91 0b 03 	lds	r20, 0x030B
    169c:	50 91 0c 03 	lds	r21, 0x030C
    16a0:	48 17       	cp	r20, r24
    16a2:	59 07       	cpc	r21, r25
    16a4:	79 f4       	brne	.+30     	; 0x16c4 <free+0x12c>
    16a6:	30 97       	sbiw	r30, 0x00	; 0
    16a8:	29 f4       	brne	.+10     	; 0x16b4 <free+0x11c>
    16aa:	10 92 0e 03 	sts	0x030E, r1
    16ae:	10 92 0d 03 	sts	0x030D, r1
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <free+0x120>
    16b4:	13 82       	std	Z+3, r1	; 0x03
    16b6:	12 82       	std	Z+2, r1	; 0x02
    16b8:	22 50       	subi	r18, 0x02	; 2
    16ba:	30 40       	sbci	r19, 0x00	; 0
    16bc:	30 93 0c 03 	sts	0x030C, r19
    16c0:	20 93 0b 03 	sts	0x030B, r18
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <memset>:
    16ca:	dc 01       	movw	r26, r24
    16cc:	01 c0       	rjmp	.+2      	; 0x16d0 <memset+0x6>
    16ce:	6d 93       	st	X+, r22
    16d0:	41 50       	subi	r20, 0x01	; 1
    16d2:	50 40       	sbci	r21, 0x00	; 0
    16d4:	e0 f7       	brcc	.-8      	; 0x16ce <memset+0x4>
    16d6:	08 95       	ret

000016d8 <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    16d8:	0e 94 56 06 	call	0xcac	; 0xcac <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    16dc:	08 95       	ret
    16de:	f8 94       	cli

000016e0 <__stop_program>:
    16e0:	ff cf       	rjmp	.-2      	; 0x16e0 <__stop_program>
