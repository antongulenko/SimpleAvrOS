
Main-Tank-MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00002358  000023ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000239  008001b0  008001b0  0000249c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  00002cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000116d  00000000  00000000  00002f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004291  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aed  00000000  00000000  0000835d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004030  00000000  00000000  00008e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000930  00000000  00000000  0000ce7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001947  00000000  00000000  0000d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019fd  00000000  00000000  0000f0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0003ee15  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000059d  00000000  00000000  0004f905  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000200  00000000  00000000  0004fea2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_26>
      6c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      70:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      74:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      78:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      7c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      80:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_32>
      84:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_33>
      88:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	f3 e2       	ldi	r31, 0x23	; 35
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3b       	cpi	r26, 0xB0	; 176
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	a0 eb       	ldi	r26, 0xB0	; 176
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3e       	cpi	r26, 0xE9	; 233
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_reset_condition_kernel_init>:
	MCUSR = 0;
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
	#endif
}
KERNEL_INIT(init_reset_condition)
      c2:	0e 94 c2 00 	call	0x184	; 0x184 <init_reset_condition>

000000c6 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <init_ports_m1284P>

000000ca <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      ca:	0e 94 df 01 	call	0x3be	; 0x3be <init_timer_m1284P>

000000ce <init_timer_kernel_init>:
	#define MILLISECOND_TIMER_VALUE ((uint16_t) 2500)
	
	setTimerCompareValue(Timer3A, MILLISECOND_TIMER_VALUE);
	setTimerCompareValue(Timer3B, MILLISECOND_TIMER_VALUE);
}
KERNEL_INIT(init_timer)
      ce:	0e 94 ae 02 	call	0x55c	; 0x55c <init_timer>

000000d2 <init_tank_motors_kernel_init>:
	LeftMotorBase->minValue = MOTOR_MIN_VALUE;
	RightMotorBase->minValue = MOTOR_MIN_VALUE;
	LeftMotorBase->maxValue = MOTOR_MAX_VALUE;
	RightMotorBase->maxValue = MOTOR_MAX_VALUE;
}
KERNEL_INIT(init_tank_motors)
      d2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <init_tank_motors>

000000d6 <init_smooth_motors_kernel_init>:
	#endif
	
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, MOTOR_ADJUSTMENT_STEP)
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, MOTOR_ADJUSTMENT_STEP)
}
KERNEL_INIT(init_smooth_motors)
      d6:	0e 94 3b 04 	call	0x876	; 0x876 <init_smooth_motors>

000000da <init_twi_kernel_init>:
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
KERNEL_INIT(init_twi)
      da:	0e 94 9f 04 	call	0x93e	; 0x93e <init_twi>

000000de <init_kernel_kernel_init>:
	#ifdef TIMER_INTERRUPT_B
	enableTimerInterrupt(CLOCKTIMER_B);
	#endif
	sei();
}
KERNEL_INIT(init_kernel)
      de:	0e 94 de 0b 	call	0x17bc	; 0x17bc <init_kernel>
      e2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <main>
      e6:	0c 94 a7 11 	jmp	0x234e	; 0x234e <MainProcessEnd>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <twi_stop>:
static inline void twi_stop() {
	#ifdef TWI_Slave
		twi_base | _BV(TWSTO) | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base | _BV(TWSTO);
      ee:	85 e9       	ldi	r24, 0x95	; 149
      f0:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
      f4:	10 92 8a 03 	sts	0x038A, r1
      f8:	10 92 89 03 	sts	0x0389, r1
}
      fc:	08 95       	ret

000000fe <twi_ack_receive>:

static inline void twi_ack_receive() {
	// Directly after a (repeated) start condition, in MR mode,
	// buffer size 0 and 1 both lead to a NACK of the first received byte.
	// In case of buffer size 0, this byte will be 'useless'.
	if (alreadyHandled + 1 < twi_buffer.size) {
      fe:	80 91 28 03 	lds	r24, 0x0328
     102:	90 91 29 03 	lds	r25, 0x0329
     106:	01 96       	adiw	r24, 0x01	; 1
     108:	20 91 84 03 	lds	r18, 0x0384
     10c:	30 91 85 03 	lds	r19, 0x0385
     110:	82 17       	cp	r24, r18
     112:	93 07       	cpc	r25, r19
     114:	10 f4       	brcc	.+4      	; 0x11a <twi_ack_receive+0x1c>
		twi_ack(); // Still more than one byte to go.
     116:	85 ec       	ldi	r24, 0xC5	; 197
     118:	01 c0       	rjmp	.+2      	; 0x11c <twi_ack_receive+0x1e>
	} else {
		twi_continue();  // Want to receive one more byte. Next byte will get NOT ACK.
     11a:	85 e8       	ldi	r24, 0x85	; 133
     11c:	80 93 bc 00 	sts	0x00BC, r24
     120:	08 95       	ret

00000122 <twi_read_byte>:
	
	// Additional if-guard necessary, e.g. if the receive-buffer size
	// is zero (because in Master-Receiver mode, we have to receive
	// AT LEAST one byte, so we will end up here, even if the receive-
	// buffer has no space at all reserved. Fix by skipping this byte).
	if (alreadyHandled < twi_buffer.size)
     122:	80 91 28 03 	lds	r24, 0x0328
     126:	90 91 29 03 	lds	r25, 0x0329
     12a:	20 91 84 03 	lds	r18, 0x0384
     12e:	30 91 85 03 	lds	r19, 0x0385
     132:	82 17       	cp	r24, r18
     134:	93 07       	cpc	r25, r19
     136:	70 f4       	brcc	.+28     	; 0x154 <twi_read_byte+0x32>
		twi_buffer.data[alreadyHandled++] = TWDR;
     138:	20 91 bb 00 	lds	r18, 0x00BB
     13c:	e0 91 82 03 	lds	r30, 0x0382
     140:	f0 91 83 03 	lds	r31, 0x0383
     144:	e8 0f       	add	r30, r24
     146:	f9 1f       	adc	r31, r25
     148:	20 83       	st	Z, r18
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	90 93 29 03 	sts	0x0329, r25
     150:	80 93 28 03 	sts	0x0328, r24
     154:	08 95       	ret

00000156 <fillSendBuffer>:
		// twi_handleMasterRequest, in case the rpc-call requires a response.
		receiveBuffer = twi_buffer;
	}
#endif

static inline void fillSendBuffer(byte operation, TWIBuffer parameters) {
     156:	9b 01       	movw	r18, r22
	sendBuffer.data[0] = operation;
     158:	e0 91 6a 01 	lds	r30, 0x016A
     15c:	f0 91 6b 01 	lds	r31, 0x016B
     160:	80 83       	st	Z, r24
	sendBuffer.size = parameters.size + 1;
     162:	cb 01       	movw	r24, r22
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	90 93 6d 01 	sts	0x016D, r25
     16a:	80 93 6c 01 	sts	0x016C, r24
	memcpy(sendBuffer.data + 1, parameters.data, parameters.size);
     16e:	e0 91 6a 01 	lds	r30, 0x016A
     172:	f0 91 6b 01 	lds	r31, 0x016B
     176:	31 96       	adiw	r30, 0x01	; 1
     178:	cf 01       	movw	r24, r30
     17a:	ba 01       	movw	r22, r20
     17c:	a9 01       	movw	r20, r18
     17e:	0e 94 9e 11 	call	0x233c	; 0x233c <memcpy>
}
     182:	08 95       	ret

00000184 <init_reset_condition>:

void init_reset_condition() {
	// Read and reset the MCU-status-register.
	// This kernel-file should be included in the very beginning, as MCUSR should
	// be reset in the very beginning.
	current_reset_status = MCUSR;
     184:	84 b7       	in	r24, 0x34	; 52
     186:	80 93 b0 01 	sts	0x01B0, r24
	MCUSR = 0;
     18a:	14 be       	out	0x34, r1	; 52
	#ifndef KEEP_WDT_ENABLED
		wdt_disable();
     18c:	88 e1       	ldi	r24, 0x18	; 24
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	f8 94       	cli
     192:	80 93 60 00 	sts	0x0060, r24
     196:	10 92 60 00 	sts	0x0060, r1
     19a:	0f be       	out	0x3f, r0	; 63
	#endif
}
     19c:	08 95       	ret

0000019e <getResetStatus>:
KERNEL_INIT(init_reset_condition)

uint8_t getResetStatus() {
	return current_reset_status;
}
     19e:	80 91 b0 01 	lds	r24, 0x01B0
     1a2:	08 95       	ret

000001a4 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     1a4:	a1 ea       	ldi	r26, 0xA1	; 161
     1a6:	b3 e0       	ldi	r27, 0x03	; 3
     1a8:	ec e9       	ldi	r30, 0x9C	; 156
     1aa:	f1 e0       	ldi	r31, 0x01	; 1
     1ac:	86 e0       	ldi	r24, 0x06	; 6
     1ae:	01 90       	ld	r0, Z+
     1b0:	0d 92       	st	X+, r0
     1b2:	81 50       	subi	r24, 0x01	; 1
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <init_ports_m1284P+0xa>
     1b6:	81 ea       	ldi	r24, 0xA1	; 161
     1b8:	93 e0       	ldi	r25, 0x03	; 3
     1ba:	90 93 62 03 	sts	0x0362, r25
     1be:	80 93 61 03 	sts	0x0361, r24
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	20 93 63 03 	sts	0x0363, r18
     1c8:	90 93 de 02 	sts	0x02DE, r25
     1cc:	80 93 dd 02 	sts	0x02DD, r24
     1d0:	22 e0       	ldi	r18, 0x02	; 2
     1d2:	20 93 df 02 	sts	0x02DF, r18
     1d6:	90 93 9f 03 	sts	0x039F, r25
     1da:	80 93 9e 03 	sts	0x039E, r24
     1de:	24 e0       	ldi	r18, 0x04	; 4
     1e0:	20 93 a0 03 	sts	0x03A0, r18
     1e4:	90 93 87 03 	sts	0x0387, r25
     1e8:	80 93 86 03 	sts	0x0386, r24
     1ec:	28 e0       	ldi	r18, 0x08	; 8
     1ee:	20 93 88 03 	sts	0x0388, r18
     1f2:	90 93 1a 03 	sts	0x031A, r25
     1f6:	80 93 19 03 	sts	0x0319, r24
     1fa:	20 e1       	ldi	r18, 0x10	; 16
     1fc:	20 93 1b 03 	sts	0x031B, r18
     200:	90 93 bc 01 	sts	0x01BC, r25
     204:	80 93 bb 01 	sts	0x01BB, r24
     208:	20 e2       	ldi	r18, 0x20	; 32
     20a:	20 93 bd 01 	sts	0x01BD, r18
     20e:	90 93 d6 01 	sts	0x01D6, r25
     212:	80 93 d5 01 	sts	0x01D5, r24
     216:	20 e4       	ldi	r18, 0x40	; 64
     218:	20 93 d7 01 	sts	0x01D7, r18
     21c:	90 93 30 03 	sts	0x0330, r25
     220:	80 93 2f 03 	sts	0x032F, r24
     224:	80 e8       	ldi	r24, 0x80	; 128
     226:	80 93 31 03 	sts	0x0331, r24
	INIT_PORT_AND_PINS(B);
     22a:	af e1       	ldi	r26, 0x1F	; 31
     22c:	b3 e0       	ldi	r27, 0x03	; 3
     22e:	e6 e9       	ldi	r30, 0x96	; 150
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	86 e0       	ldi	r24, 0x06	; 6
     234:	01 90       	ld	r0, Z+
     236:	0d 92       	st	X+, r0
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	e1 f7       	brne	.-8      	; 0x234 <init_ports_m1284P+0x90>
     23c:	8f e1       	ldi	r24, 0x1F	; 31
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	90 93 96 03 	sts	0x0396, r25
     244:	80 93 95 03 	sts	0x0395, r24
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	20 93 97 03 	sts	0x0397, r18
     24e:	90 93 2d 03 	sts	0x032D, r25
     252:	80 93 2c 03 	sts	0x032C, r24
     256:	22 e0       	ldi	r18, 0x02	; 2
     258:	20 93 2e 03 	sts	0x032E, r18
     25c:	90 93 d9 01 	sts	0x01D9, r25
     260:	80 93 d8 01 	sts	0x01D8, r24
     264:	24 e0       	ldi	r18, 0x04	; 4
     266:	20 93 da 01 	sts	0x01DA, r18
     26a:	90 93 b8 03 	sts	0x03B8, r25
     26e:	80 93 b7 03 	sts	0x03B7, r24
     272:	28 e0       	ldi	r18, 0x08	; 8
     274:	20 93 b9 03 	sts	0x03B9, r18
     278:	90 93 99 03 	sts	0x0399, r25
     27c:	80 93 98 03 	sts	0x0398, r24
     280:	20 e1       	ldi	r18, 0x10	; 16
     282:	20 93 9a 03 	sts	0x039A, r18
     286:	90 93 80 03 	sts	0x0380, r25
     28a:	80 93 7f 03 	sts	0x037F, r24
     28e:	20 e2       	ldi	r18, 0x20	; 32
     290:	20 93 81 03 	sts	0x0381, r18
     294:	90 93 db 03 	sts	0x03DB, r25
     298:	80 93 da 03 	sts	0x03DA, r24
     29c:	20 e4       	ldi	r18, 0x40	; 64
     29e:	20 93 dc 03 	sts	0x03DC, r18
     2a2:	90 93 33 03 	sts	0x0333, r25
     2a6:	80 93 32 03 	sts	0x0332, r24
     2aa:	80 e8       	ldi	r24, 0x80	; 128
     2ac:	80 93 34 03 	sts	0x0334, r24
	INIT_PORT_AND_PINS(C);
     2b0:	a5 e4       	ldi	r26, 0x45	; 69
     2b2:	b3 e0       	ldi	r27, 0x03	; 3
     2b4:	e0 e9       	ldi	r30, 0x90	; 144
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <init_ports_m1284P+0x116>
     2c2:	85 e4       	ldi	r24, 0x45	; 69
     2c4:	93 e0       	ldi	r25, 0x03	; 3
     2c6:	90 93 26 03 	sts	0x0326, r25
     2ca:	80 93 25 03 	sts	0x0325, r24
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	20 93 27 03 	sts	0x0327, r18
     2d4:	90 93 c2 01 	sts	0x01C2, r25
     2d8:	80 93 c1 01 	sts	0x01C1, r24
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	20 93 c3 01 	sts	0x01C3, r18
     2e2:	90 93 f8 02 	sts	0x02F8, r25
     2e6:	80 93 f7 02 	sts	0x02F7, r24
     2ea:	24 e0       	ldi	r18, 0x04	; 4
     2ec:	20 93 f9 02 	sts	0x02F9, r18
     2f0:	90 93 17 03 	sts	0x0317, r25
     2f4:	80 93 16 03 	sts	0x0316, r24
     2f8:	28 e0       	ldi	r18, 0x08	; 8
     2fa:	20 93 18 03 	sts	0x0318, r18
     2fe:	90 93 c5 01 	sts	0x01C5, r25
     302:	80 93 c4 01 	sts	0x01C4, r24
     306:	20 e1       	ldi	r18, 0x10	; 16
     308:	20 93 c6 01 	sts	0x01C6, r18
     30c:	90 93 1d 03 	sts	0x031D, r25
     310:	80 93 1c 03 	sts	0x031C, r24
     314:	20 e2       	ldi	r18, 0x20	; 32
     316:	20 93 1e 03 	sts	0x031E, r18
     31a:	90 93 70 03 	sts	0x0370, r25
     31e:	80 93 6f 03 	sts	0x036F, r24
     322:	20 e4       	ldi	r18, 0x40	; 64
     324:	20 93 71 03 	sts	0x0371, r18
     328:	90 93 d3 01 	sts	0x01D3, r25
     32c:	80 93 d2 01 	sts	0x01D2, r24
     330:	80 e8       	ldi	r24, 0x80	; 128
     332:	80 93 d4 01 	sts	0x01D4, r24
	INIT_PORT_AND_PINS(D);
     336:	aa ef       	ldi	r26, 0xFA	; 250
     338:	b2 e0       	ldi	r27, 0x02	; 2
     33a:	ea e8       	ldi	r30, 0x8A	; 138
     33c:	f1 e0       	ldi	r31, 0x01	; 1
     33e:	86 e0       	ldi	r24, 0x06	; 6
     340:	01 90       	ld	r0, Z+
     342:	0d 92       	st	X+, r0
     344:	81 50       	subi	r24, 0x01	; 1
     346:	e1 f7       	brne	.-8      	; 0x340 <init_ports_m1284P+0x19c>
     348:	8a ef       	ldi	r24, 0xFA	; 250
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	90 93 dc 01 	sts	0x01DC, r25
     350:	80 93 db 01 	sts	0x01DB, r24
     354:	21 e0       	ldi	r18, 0x01	; 1
     356:	20 93 dd 01 	sts	0x01DD, r18
     35a:	90 93 d0 03 	sts	0x03D0, r25
     35e:	80 93 cf 03 	sts	0x03CF, r24
     362:	22 e0       	ldi	r18, 0x02	; 2
     364:	20 93 d1 03 	sts	0x03D1, r18
     368:	90 93 65 03 	sts	0x0365, r25
     36c:	80 93 64 03 	sts	0x0364, r24
     370:	24 e0       	ldi	r18, 0x04	; 4
     372:	20 93 66 03 	sts	0x0366, r18
     376:	90 93 8c 03 	sts	0x038C, r25
     37a:	80 93 8b 03 	sts	0x038B, r24
     37e:	28 e0       	ldi	r18, 0x08	; 8
     380:	20 93 8d 03 	sts	0x038D, r18
     384:	90 93 7b 03 	sts	0x037B, r25
     388:	80 93 7a 03 	sts	0x037A, r24
     38c:	20 e1       	ldi	r18, 0x10	; 16
     38e:	20 93 7c 03 	sts	0x037C, r18
     392:	90 93 5f 03 	sts	0x035F, r25
     396:	80 93 5e 03 	sts	0x035E, r24
     39a:	20 e2       	ldi	r18, 0x20	; 32
     39c:	20 93 60 03 	sts	0x0360, r18
     3a0:	90 93 9c 03 	sts	0x039C, r25
     3a4:	80 93 9b 03 	sts	0x039B, r24
     3a8:	20 e4       	ldi	r18, 0x40	; 64
     3aa:	20 93 9d 03 	sts	0x039D, r18
     3ae:	90 93 bf 01 	sts	0x01BF, r25
     3b2:	80 93 be 01 	sts	0x01BE, r24
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	80 93 c0 01 	sts	0x01C0, r24
}
     3bc:	08 95       	ret

000003be <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     3be:	ae e8       	ldi	r26, 0x8E	; 142
     3c0:	b3 e0       	ldi	r27, 0x03	; 3
     3c2:	e3 e8       	ldi	r30, 0x83	; 131
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     3d0:	a0 ef       	ldi	r26, 0xF0	; 240
     3d2:	b2 e0       	ldi	r27, 0x02	; 2
     3d4:	ec e7       	ldi	r30, 0x7C	; 124
     3d6:	f1 e0       	ldi	r31, 0x01	; 1
     3d8:	87 e0       	ldi	r24, 0x07	; 7
     3da:	01 90       	ld	r0, Z+
     3dc:	0d 92       	st	X+, r0
     3de:	81 50       	subi	r24, 0x01	; 1
     3e0:	e1 f7       	brne	.-8      	; 0x3da <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     3e2:	a0 e0       	ldi	r26, 0x00	; 0
     3e4:	b3 e0       	ldi	r27, 0x03	; 3
     3e6:	e5 e7       	ldi	r30, 0x75	; 117
     3e8:	f1 e0       	ldi	r31, 0x01	; 1
     3ea:	87 e0       	ldi	r24, 0x07	; 7
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     3f4:	a7 e0       	ldi	r26, 0x07	; 7
     3f6:	b3 e0       	ldi	r27, 0x03	; 3
     3f8:	ee e6       	ldi	r30, 0x6E	; 110
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	87 e0       	ldi	r24, 0x07	; 7
     3fe:	01 90       	ld	r0, Z+
     400:	0d 92       	st	X+, r0
     402:	81 50       	subi	r24, 0x01	; 1
     404:	e1 f7       	brne	.-8      	; 0x3fe <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     406:	8e e8       	ldi	r24, 0x8E	; 142
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	90 93 de 03 	sts	0x03DE, r25
     40e:	80 93 dd 03 	sts	0x03DD, r24
     412:	27 e4       	ldi	r18, 0x47	; 71
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	30 93 e0 03 	sts	0x03E0, r19
     41a:	20 93 df 03 	sts	0x03DF, r18
     41e:	10 92 e2 03 	sts	0x03E2, r1
     422:	10 92 e1 03 	sts	0x03E1, r1
     426:	27 eb       	ldi	r18, 0xB7	; 183
     428:	33 e0       	ldi	r19, 0x03	; 3
     42a:	30 93 e4 03 	sts	0x03E4, r19
     42e:	20 93 e3 03 	sts	0x03E3, r18
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     432:	90 93 0f 03 	sts	0x030F, r25
     436:	80 93 0e 03 	sts	0x030E, r24
     43a:	88 e4       	ldi	r24, 0x48	; 72
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 11 03 	sts	0x0311, r25
     442:	80 93 10 03 	sts	0x0310, r24
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 13 03 	sts	0x0313, r25
     44e:	80 93 12 03 	sts	0x0312, r24
     452:	28 e9       	ldi	r18, 0x98	; 152
     454:	33 e0       	ldi	r19, 0x03	; 3
     456:	30 93 15 03 	sts	0x0315, r19
     45a:	20 93 14 03 	sts	0x0314, r18
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     45e:	20 ef       	ldi	r18, 0xF0	; 240
     460:	32 e0       	ldi	r19, 0x02	; 2
     462:	30 93 e9 02 	sts	0x02E9, r19
     466:	20 93 e8 02 	sts	0x02E8, r18
     46a:	48 e8       	ldi	r20, 0x88	; 136
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	50 93 eb 02 	sts	0x02EB, r21
     472:	40 93 ea 02 	sts	0x02EA, r20
     476:	10 92 ed 02 	sts	0x02ED, r1
     47a:	10 92 ec 02 	sts	0x02EC, r1
     47e:	4e e5       	ldi	r20, 0x5E	; 94
     480:	53 e0       	ldi	r21, 0x03	; 3
     482:	50 93 ef 02 	sts	0x02EF, r21
     486:	40 93 ee 02 	sts	0x02EE, r20
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     48a:	30 93 4c 03 	sts	0x034C, r19
     48e:	20 93 4b 03 	sts	0x034B, r18
     492:	2a e8       	ldi	r18, 0x8A	; 138
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	30 93 4e 03 	sts	0x034E, r19
     49a:	20 93 4d 03 	sts	0x034D, r18
     49e:	90 93 50 03 	sts	0x0350, r25
     4a2:	80 93 4f 03 	sts	0x034F, r24
     4a6:	2a e7       	ldi	r18, 0x7A	; 122
     4a8:	33 e0       	ldi	r19, 0x03	; 3
     4aa:	30 93 52 03 	sts	0x0352, r19
     4ae:	20 93 51 03 	sts	0x0351, r18
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	33 e0       	ldi	r19, 0x03	; 3
     4b6:	30 93 d3 03 	sts	0x03D3, r19
     4ba:	20 93 d2 03 	sts	0x03D2, r18
     4be:	43 eb       	ldi	r20, 0xB3	; 179
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	50 93 d5 03 	sts	0x03D5, r21
     4c6:	40 93 d4 03 	sts	0x03D4, r20
     4ca:	10 92 d7 03 	sts	0x03D7, r1
     4ce:	10 92 d6 03 	sts	0x03D6, r1
     4d2:	4e eb       	ldi	r20, 0xBE	; 190
     4d4:	51 e0       	ldi	r21, 0x01	; 1
     4d6:	50 93 d9 03 	sts	0x03D9, r21
     4da:	40 93 d8 03 	sts	0x03D8, r20
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     4de:	30 93 68 03 	sts	0x0368, r19
     4e2:	20 93 67 03 	sts	0x0367, r18
     4e6:	24 eb       	ldi	r18, 0xB4	; 180
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	30 93 6a 03 	sts	0x036A, r19
     4ee:	20 93 69 03 	sts	0x0369, r18
     4f2:	90 93 6c 03 	sts	0x036C, r25
     4f6:	80 93 6b 03 	sts	0x036B, r24
     4fa:	2b e9       	ldi	r18, 0x9B	; 155
     4fc:	33 e0       	ldi	r19, 0x03	; 3
     4fe:	30 93 6e 03 	sts	0x036E, r19
     502:	20 93 6d 03 	sts	0x036D, r18
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     506:	27 e0       	ldi	r18, 0x07	; 7
     508:	33 e0       	ldi	r19, 0x03	; 3
     50a:	30 93 e1 02 	sts	0x02E1, r19
     50e:	20 93 e0 02 	sts	0x02E0, r18
     512:	48 e9       	ldi	r20, 0x98	; 152
     514:	50 e0       	ldi	r21, 0x00	; 0
     516:	50 93 e3 02 	sts	0x02E3, r21
     51a:	40 93 e2 02 	sts	0x02E2, r20
     51e:	10 92 e5 02 	sts	0x02E5, r1
     522:	10 92 e4 02 	sts	0x02E4, r1
     526:	4a ed       	ldi	r20, 0xDA	; 218
     528:	53 e0       	ldi	r21, 0x03	; 3
     52a:	50 93 e7 02 	sts	0x02E7, r21
     52e:	40 93 e6 02 	sts	0x02E6, r20
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     532:	30 93 73 03 	sts	0x0373, r19
     536:	20 93 72 03 	sts	0x0372, r18
     53a:	2a e9       	ldi	r18, 0x9A	; 154
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	30 93 75 03 	sts	0x0375, r19
     542:	20 93 74 03 	sts	0x0374, r18
     546:	90 93 77 03 	sts	0x0377, r25
     54a:	80 93 76 03 	sts	0x0376, r24
     54e:	82 e3       	ldi	r24, 0x32	; 50
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	90 93 79 03 	sts	0x0379, r25
     556:	80 93 78 03 	sts	0x0378, r24
}
     55a:	08 95       	ret

0000055c <init_timer>:
#define CLOCKISR_A TIMER3_COMPA_vect
#define CLOCKISR_B TIMER3_COMPB_vect
#define CLOCKTIMER_A Timer3A
#define CLOCKTIMER_B Timer3B

void init_timer() {
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
	setWaveformGenerationMode(Timer3, clear_timer_on_match);
     560:	c7 e0       	ldi	r28, 0x07	; 7
     562:	d3 e0       	ldi	r29, 0x03	; 3
     564:	ce 01       	movw	r24, r28
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <setWaveformGenerationMode>
	setTimerClockSelect(Timer3, prescale_8);
     56e:	ce 01       	movw	r24, r28
     570:	62 e0       	ldi	r22, 0x02	; 2
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setTimerClockSelect>
	
	// --> 8 * 2500 = 20000 @ 20MHz
	// results in one compare-match every millisecond.
	#define MILLISECOND_TIMER_VALUE ((uint16_t) 2500)
	
	setTimerCompareValue(Timer3A, MILLISECOND_TIMER_VALUE);
     578:	80 ee       	ldi	r24, 0xE0	; 224
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	64 ec       	ldi	r22, 0xC4	; 196
     57e:	79 e0       	ldi	r23, 0x09	; 9
     580:	0e 94 0e 10 	call	0x201c	; 0x201c <setTimerCompareValue>
	setTimerCompareValue(Timer3B, MILLISECOND_TIMER_VALUE);
     584:	82 e7       	ldi	r24, 0x72	; 114
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	64 ec       	ldi	r22, 0xC4	; 196
     58a:	79 e0       	ldi	r23, 0x09	; 9
     58c:	0e 94 0e 10 	call	0x201c	; 0x201c <setTimerCompareValue>
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <in_timer_tick>:
#define TIMER_TICK_ISR_NAKED ISR(CLOCKISR, __attribute__((naked)))
#define TIMER_TICK_ISR ISR(CLOCKISR)

// Can be implemented by the application. Mainly for testing purposes.
void in_timer_tick() __attribute__((weak));
void in_timer_tick() {};
     596:	08 95       	ret

00000598 <__vector_32>:
#define _SIMPLE_TIMER_KERNEL_

// This should be included after timer_base.kernel.h
// This does nothing but increase the milliseconds_running value.

TIMER_TICK_ISR {
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	0b b6       	in	r0, 0x3b	; 59
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
	TIMER_TICK_ACTION
     5be:	80 91 b1 01 	lds	r24, 0x01B1
     5c2:	90 91 b2 01 	lds	r25, 0x01B2
     5c6:	a0 91 b3 01 	lds	r26, 0x01B3
     5ca:	b0 91 b4 01 	lds	r27, 0x01B4
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	a1 1d       	adc	r26, r1
     5d2:	b1 1d       	adc	r27, r1
     5d4:	80 93 b1 01 	sts	0x01B1, r24
     5d8:	90 93 b2 01 	sts	0x01B2, r25
     5dc:	a0 93 b3 01 	sts	0x01B3, r26
     5e0:	b0 93 b4 01 	sts	0x01B4, r27
     5e4:	0e 94 cb 02 	call	0x596	; 0x596 <in_timer_tick>
}
     5e8:	ff 91       	pop	r31
     5ea:	ef 91       	pop	r30
     5ec:	bf 91       	pop	r27
     5ee:	af 91       	pop	r26
     5f0:	9f 91       	pop	r25
     5f2:	8f 91       	pop	r24
     5f4:	7f 91       	pop	r23
     5f6:	6f 91       	pop	r22
     5f8:	5f 91       	pop	r21
     5fa:	4f 91       	pop	r20
     5fc:	3f 91       	pop	r19
     5fe:	2f 91       	pop	r18
     600:	0f 90       	pop	r0
     602:	0b be       	out	0x3b, r0	; 59
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <mutex_create>:
typedef struct {
	BOOL interruptsWereEnabled;
} AtomicMutex;

Mutex mutex_create() {
	return (Mutex) malloc(sizeof(AtomicMutex));
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <malloc>
}
     616:	08 95       	ret

00000618 <mutex_lock>:

void mutex_lock(Mutex mutex) {
	((AtomicMutex *) mutex)->interruptsWereEnabled = SREG & _BV(7);
     618:	2f b7       	in	r18, 0x3f	; 63
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	20 78       	andi	r18, 0x80	; 128
     61e:	30 70       	andi	r19, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	31 83       	std	Z+1, r19	; 0x01
     624:	20 83       	st	Z, r18
	cli();
     626:	f8 94       	cli
}
     628:	08 95       	ret

0000062a <mutex_trylock>:

BOOL mutex_trylock(Mutex mutex) {
	mutex_lock(mutex);
     62a:	0e 94 0c 03 	call	0x618	; 0x618 <mutex_lock>
	return TRUE;
}
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret

00000634 <mutex_release>:

void mutex_release(Mutex mutex) {
	// if (((AtomicMutex *) mutex)->interruptsWereEnabled)
		sei();
     634:	78 94       	sei
}
     636:	08 95       	ret

00000638 <initMotor>:
#define _MOTOR_KERNEL_

#include "../kernel_init.h"
#include "motor.h"

void initMotor(PMotor motor) {
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	ec 01       	movw	r28, r24
	// Configure the timer. These are configurations,
	// that should work fine for motors, but might also be changed elsewhere.
	setTimerClockSelect(motor->pwmTimer->timer, prescale_1);
     63e:	eb 81       	ldd	r30, Y+3	; 0x03
     640:	fc 81       	ldd	r31, Y+4	; 0x04
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <setTimerClockSelect>
	setWaveformGenerationMode(motor->pwmTimer->timer, pwm_phase_correct);
     64e:	eb 81       	ldd	r30, Y+3	; 0x03
     650:	fc 81       	ldd	r31, Y+4	; 0x04
     652:	80 81       	ld	r24, Z
     654:	91 81       	ldd	r25, Z+1	; 0x01
     656:	64 e0       	ldi	r22, 0x04	; 4
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <setWaveformGenerationMode>
	
	setCompareMatchOutputMode(motor->pwmTimer, clear_on_match);
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	9c 81       	ldd	r25, Y+4	; 0x04
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <setCompareMatchOutputMode>
	setTimerCompareValue(motor->pwmTimer, motor->minValue);
     66a:	6d 81       	ldd	r22, Y+5	; 0x05
     66c:	7e 81       	ldd	r23, Y+6	; 0x06
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	0e 94 0e 10 	call	0x201c	; 0x201c <setTimerCompareValue>
	
	setPinOutput(motor->direction);
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <setPinOutput>
	if (!(motor->flags & MOTOR_TWO_DIR_PINS))
     67e:	88 81       	ld	r24, Y
     680:	83 fd       	sbrc	r24, 3
     682:	04 c0       	rjmp	.+8      	; 0x68c <initMotor+0x54>
		setPinOne(motor->direction);
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	0e 94 75 0e 	call	0x1cea	; 0x1cea <setPinOne>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <initMotor2Pins>:

void initMotor2Pins(PMotor2Pins motor) {
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	ec 01       	movw	r28, r24
	initMotor((PMotor) motor);
     698:	0e 94 1c 03 	call	0x638	; 0x638 <initMotor>
	setPinOutput(motor->direction2);
     69c:	89 85       	ldd	r24, Y+9	; 0x09
     69e:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <setPinOutput>
	setPinZero(motor->motor.direction);
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
	setPinZero(motor->direction2);
     6ac:	89 85       	ldd	r24, Y+9	; 0x09
     6ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <init_tank_motors>:
#include <kernel/kernel_init.h>
#include <kernel/devices/timer_m1284P.kernel.h>
#include <kernel/devices/motor.kernel.h>
#include "tank_motor.h"

void init_tank_motors() {
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
	// Voltage range: 2..4,5 V
	// On 10-bit timer (1024 resolution): 410..922
	#define MOTOR_MIN_VALUE 410
	#define MOTOR_MAX_VALUE 922
	
	Timer1->flags |= TIMER_RESOLUTION_10bit;
     6be:	80 91 f0 02 	lds	r24, 0x02F0
     6c2:	80 62       	ori	r24, 0x20	; 32
     6c4:	80 93 f0 02 	sts	0x02F0, r24
	INIT_2DirPins_MOTOR(LeftMotorBase, MOTOR_INVERSE_SPEED, PinC4, Timer1B, PinC5)
     6c8:	0b e0       	ldi	r16, 0x0B	; 11
     6ca:	83 e5       	ldi	r24, 0x53	; 83
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 2f       	mov	r18, r16
     6d2:	11 92       	st	Z+, r1
     6d4:	2a 95       	dec	r18
     6d6:	e9 f7       	brne	.-6      	; 0x6d2 <init_tank_motors+0x18>
     6d8:	1a e0       	ldi	r17, 0x0A	; 10
     6da:	10 93 53 03 	sts	0x0353, r17
     6de:	24 ec       	ldi	r18, 0xC4	; 196
     6e0:	31 e0       	ldi	r19, 0x01	; 1
     6e2:	30 93 55 03 	sts	0x0355, r19
     6e6:	20 93 54 03 	sts	0x0354, r18
     6ea:	2b e4       	ldi	r18, 0x4B	; 75
     6ec:	33 e0       	ldi	r19, 0x03	; 3
     6ee:	30 93 57 03 	sts	0x0357, r19
     6f2:	20 93 56 03 	sts	0x0356, r18
     6f6:	2c e1       	ldi	r18, 0x1C	; 28
     6f8:	33 e0       	ldi	r19, 0x03	; 3
     6fa:	30 93 5d 03 	sts	0x035D, r19
     6fe:	20 93 5c 03 	sts	0x035C, r18
     702:	0e 94 49 03 	call	0x692	; 0x692 <initMotor2Pins>
	INIT_2DirPins_MOTOR(RightMotorBase, MOTOR_INVERSE_SPEED, PinC2, Timer1A, PinC3)
     706:	87 ec       	ldi	r24, 0xC7	; 199
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	fc 01       	movw	r30, r24
     70c:	11 92       	st	Z+, r1
     70e:	0a 95       	dec	r16
     710:	e9 f7       	brne	.-6      	; 0x70c <init_tank_motors+0x52>
     712:	10 93 c7 01 	sts	0x01C7, r17
     716:	27 ef       	ldi	r18, 0xF7	; 247
     718:	32 e0       	ldi	r19, 0x02	; 2
     71a:	30 93 c9 01 	sts	0x01C9, r19
     71e:	20 93 c8 01 	sts	0x01C8, r18
     722:	28 ee       	ldi	r18, 0xE8	; 232
     724:	32 e0       	ldi	r19, 0x02	; 2
     726:	30 93 cb 01 	sts	0x01CB, r19
     72a:	20 93 ca 01 	sts	0x01CA, r18
     72e:	26 e1       	ldi	r18, 0x16	; 22
     730:	33 e0       	ldi	r19, 0x03	; 3
     732:	30 93 d1 01 	sts	0x01D1, r19
     736:	20 93 d0 01 	sts	0x01D0, r18
     73a:	0e 94 49 03 	call	0x692	; 0x692 <initMotor2Pins>
	
	LeftMotorBase->minValue = MOTOR_MIN_VALUE;
     73e:	8a e9       	ldi	r24, 0x9A	; 154
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	90 93 59 03 	sts	0x0359, r25
     746:	80 93 58 03 	sts	0x0358, r24
	RightMotorBase->minValue = MOTOR_MIN_VALUE;
     74a:	90 93 cd 01 	sts	0x01CD, r25
     74e:	80 93 cc 01 	sts	0x01CC, r24
	LeftMotorBase->maxValue = MOTOR_MAX_VALUE;
     752:	8a e9       	ldi	r24, 0x9A	; 154
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	90 93 5b 03 	sts	0x035B, r25
     75a:	80 93 5a 03 	sts	0x035A, r24
	RightMotorBase->maxValue = MOTOR_MAX_VALUE;
     75e:	90 93 cf 01 	sts	0x01CF, r25
     762:	80 93 ce 01 	sts	0x01CE, r24
}
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <initSmoothMotor>:
void motor_smooth_stop_tick(PSmoothMotor motor);

// This must be used when implementing above function. Implemented in motor_smooth.c
void motor_smooth_tick(PSmoothMotor motor);

void initSmoothMotor(PSmoothMotor motor) {
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ec 01       	movw	r28, r24
	motor->mutex = mutex_create();
     772:	0e 94 07 03 	call	0x60e	; 0x60e <mutex_create>
     776:	9f 87       	std	Y+15, r25	; 0x0f
     778:	8e 87       	std	Y+14, r24	; 0x0e
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <smooth_motor_tick>:
void motor_smooth_stop_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, FALSE);
}

void smooth_motor_tick() {
	if (motor_A_running) motor_smooth_tick(SMOOTH_MOTOR_A);
     780:	80 91 b5 01 	lds	r24, 0x01B5
     784:	90 91 b6 01 	lds	r25, 0x01B6
     788:	00 97       	sbiw	r24, 0x00	; 0
     78a:	21 f0       	breq	.+8      	; 0x794 <smooth_motor_tick+0x14>
     78c:	85 e3       	ldi	r24, 0x35	; 53
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 cf 0c 	call	0x199e	; 0x199e <motor_smooth_tick>
	if (motor_B_running) motor_smooth_tick(SMOOTH_MOTOR_B);
     794:	80 91 b7 01 	lds	r24, 0x01B7
     798:	90 91 b8 01 	lds	r25, 0x01B8
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	21 f0       	breq	.+8      	; 0x7a8 <smooth_motor_tick+0x28>
     7a0:	87 ea       	ldi	r24, 0xA7	; 167
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	0e 94 cf 0c 	call	0x199e	; 0x199e <motor_smooth_tick>
     7a8:	08 95       	ret

000007aa <smooth_enable_tick>:

#include <kernel/kernel_init.h>
#include <kernel/devices/motor_smooth_pair.kernel.h>

void smooth_enable_tick(BOOL enabled) {
	if (enabled) enableTimerInterrupt(CLOCKTIMER_B);
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	29 f0       	breq	.+10     	; 0x7b8 <smooth_enable_tick+0xe>
     7ae:	82 e7       	ldi	r24, 0x72	; 114
     7b0:	93 e0       	ldi	r25, 0x03	; 3
     7b2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <enableTimerInterrupt>
     7b6:	08 95       	ret
	else disableTimerInterrupt(CLOCKTIMER_B);
     7b8:	82 e7       	ldi	r24, 0x72	; 114
     7ba:	93 e0       	ldi	r25, 0x03	; 3
     7bc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <disableTimerInterrupt>
     7c0:	08 95       	ret

000007c2 <control_smooth_motor>:

BOOL motor_A_running = FALSE;
BOOL motor_B_running = FALSE;

static void control_smooth_motor(PSmoothMotor motor, BOOL running) {
	if (motor == SMOOTH_MOTOR_A) {
     7c2:	23 e0       	ldi	r18, 0x03	; 3
     7c4:	85 33       	cpi	r24, 0x35	; 53
     7c6:	92 07       	cpc	r25, r18
     7c8:	29 f4       	brne	.+10     	; 0x7d4 <control_smooth_motor+0x12>
		motor_A_running = running;
     7ca:	70 93 b6 01 	sts	0x01B6, r23
     7ce:	60 93 b5 01 	sts	0x01B5, r22
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <control_smooth_motor+0x22>
	} else if (motor == SMOOTH_MOTOR_B) {
     7d4:	23 e0       	ldi	r18, 0x03	; 3
     7d6:	87 3a       	cpi	r24, 0xA7	; 167
     7d8:	92 07       	cpc	r25, r18
     7da:	d1 f4       	brne	.+52     	; 0x810 <control_smooth_motor+0x4e>
		motor_B_running = running;
     7dc:	70 93 b8 01 	sts	0x01B8, r23
     7e0:	60 93 b7 01 	sts	0x01B7, r22
	} else {
		return;
	}
	smooth_enable_tick(motor_A_running || motor_B_running);
     7e4:	80 91 b5 01 	lds	r24, 0x01B5
     7e8:	90 91 b6 01 	lds	r25, 0x01B6
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	61 f4       	brne	.+24     	; 0x808 <control_smooth_motor+0x46>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	20 91 b7 01 	lds	r18, 0x01B7
     7f8:	30 91 b8 01 	lds	r19, 0x01B8
     7fc:	21 15       	cp	r18, r1
     7fe:	31 05       	cpc	r19, r1
     800:	29 f4       	brne	.+10     	; 0x80c <control_smooth_motor+0x4a>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <control_smooth_motor+0x4a>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <smooth_enable_tick>
     810:	08 95       	ret

00000812 <motor_smooth_stop_tick>:
void motor_smooth_start_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, TRUE);
}

void motor_smooth_stop_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, FALSE);
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <control_smooth_motor>
}
     81a:	08 95       	ret

0000081c <motor_smooth_start_tick>:
	}
	smooth_enable_tick(motor_A_running || motor_B_running);
}

void motor_smooth_start_tick(PSmoothMotor motor) {
	control_smooth_motor(motor, TRUE);
     81c:	61 e0       	ldi	r22, 0x01	; 1
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <control_smooth_motor>
}
     824:	08 95       	ret

00000826 <__vector_33>:
}

ISR(CLOCKISR_B) {
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	0b b6       	in	r0, 0x3b	; 59
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
	smooth_motor_tick();
     84c:	0e 94 c0 03 	call	0x780	; 0x780 <smooth_motor_tick>
}
     850:	ff 91       	pop	r31
     852:	ef 91       	pop	r30
     854:	bf 91       	pop	r27
     856:	af 91       	pop	r26
     858:	9f 91       	pop	r25
     85a:	8f 91       	pop	r24
     85c:	7f 91       	pop	r23
     85e:	6f 91       	pop	r22
     860:	5f 91       	pop	r21
     862:	4f 91       	pop	r20
     864:	3f 91       	pop	r19
     866:	2f 91       	pop	r18
     868:	0f 90       	pop	r0
     86a:	0b be       	out	0x3b, r0	; 59
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	0f 90       	pop	r0
     872:	1f 90       	pop	r1
     874:	18 95       	reti

00000876 <init_smooth_motors>:

void init_smooth_motors() {
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	#ifndef MOTOR_ADJUSTMENT_STEP
	#define MOTOR_ADJUSTMENT_STEP 200
	#endif
	
	INIT_SMOOTH_MOTOR(LeftMotor, LeftMotorBase, MOTOR_ADJUSTMENT_STEP)
     87e:	83 e5       	ldi	r24, 0x53	; 83
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	90 93 36 03 	sts	0x0336, r25
     886:	80 93 35 03 	sts	0x0335, r24
     88a:	10 92 38 03 	sts	0x0338, r1
     88e:	10 92 37 03 	sts	0x0337, r1
     892:	c1 e0       	ldi	r28, 0x01	; 1
     894:	d0 e0       	ldi	r29, 0x00	; 0
     896:	d0 93 3a 03 	sts	0x033A, r29
     89a:	c0 93 39 03 	sts	0x0339, r28
     89e:	10 92 3c 03 	sts	0x033C, r1
     8a2:	10 92 3b 03 	sts	0x033B, r1
     8a6:	d0 93 3e 03 	sts	0x033E, r29
     8aa:	c0 93 3d 03 	sts	0x033D, r28
     8ae:	10 92 40 03 	sts	0x0340, r1
     8b2:	10 92 3f 03 	sts	0x033F, r1
     8b6:	0a e0       	ldi	r16, 0x0A	; 10
     8b8:	10 e0       	ldi	r17, 0x00	; 0
     8ba:	10 93 42 03 	sts	0x0342, r17
     8be:	00 93 41 03 	sts	0x0341, r16
     8c2:	10 92 44 03 	sts	0x0344, r1
     8c6:	10 92 43 03 	sts	0x0343, r1

// This must be used when implementing above function. Implemented in motor_smooth.c
void motor_smooth_tick(PSmoothMotor motor);

void initSmoothMotor(PSmoothMotor motor) {
	motor->mutex = mutex_create();
     8ca:	0e 94 07 03 	call	0x60e	; 0x60e <mutex_create>
     8ce:	90 93 44 03 	sts	0x0344, r25
     8d2:	80 93 43 03 	sts	0x0343, r24
	INIT_SMOOTH_MOTOR(RightMotor, RightMotorBase, MOTOR_ADJUSTMENT_STEP)
     8d6:	87 ec       	ldi	r24, 0xC7	; 199
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	90 93 a8 03 	sts	0x03A8, r25
     8de:	80 93 a7 03 	sts	0x03A7, r24
     8e2:	10 92 aa 03 	sts	0x03AA, r1
     8e6:	10 92 a9 03 	sts	0x03A9, r1
     8ea:	d0 93 ac 03 	sts	0x03AC, r29
     8ee:	c0 93 ab 03 	sts	0x03AB, r28
     8f2:	10 92 ae 03 	sts	0x03AE, r1
     8f6:	10 92 ad 03 	sts	0x03AD, r1
     8fa:	d0 93 b0 03 	sts	0x03B0, r29
     8fe:	c0 93 af 03 	sts	0x03AF, r28
     902:	10 92 b2 03 	sts	0x03B2, r1
     906:	10 92 b1 03 	sts	0x03B1, r1
     90a:	10 93 b4 03 	sts	0x03B4, r17
     90e:	00 93 b3 03 	sts	0x03B3, r16
     912:	10 92 b6 03 	sts	0x03B6, r1
     916:	10 92 b5 03 	sts	0x03B5, r1
     91a:	0e 94 07 03 	call	0x60e	; 0x60e <mutex_create>
     91e:	90 93 b6 03 	sts	0x03B6, r25
     922:	80 93 b5 03 	sts	0x03B5, r24
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	08 95       	ret

00000930 <twi_handleMasterRequest>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer);
	byte twi_defaultSlaveBufferData[TWI_Buffer_Size];
	TWIBuffer twi_defaultSlaveBuffer = { twi_defaultSlaveBufferData, TWI_Buffer_Size };
#else
	// Define empty functions
	TWIBuffer twi_handleMasterRequest() { return (TWIBuffer) { 0 }; }
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	08 95       	ret

0000093a <twi_handleMasterTransmission>:
	void twi_handleMasterTransmission(TWIBuffer twi_buffer) {}
     93a:	08 95       	ret

0000093c <twi_unexpectedCondition>:
// This can be implemented by the application code to handle
// unexpected conditions in TWI traffic. Or define this macro.
void twi_unexpectedCondition() __attribute__((weak));
void twi_unexpectedCondition() {
	TWI_DEBUG_ERROR(twi_error)
}
     93c:	08 95       	ret

0000093e <init_twi>:
TWIError twi_error;
TWIOperation furtherOperations[NUM_TWI_OPERATIONS]; // Space allocated for 4 subsequent operations
int nextTwiOperation;

void init_twi() {
	TWCR = _BV(TWIE) | _BV(TWEN);
     93e:	85 e0       	ldi	r24, 0x05	; 5
     940:	80 93 bc 00 	sts	0x00BC, r24
	TWDR = 0xff;
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	80 93 bb 00 	sts	0x00BB, r24
	TWBR = TWI_BIT_RATE_VALUE;
     94a:	81 e1       	ldi	r24, 0x11	; 17
     94c:	80 93 b8 00 	sts	0x00B8, r24
	TWSR = TWI_PRESCALER_MASK; // Writing the non-prescaler bits will be ignored.
     950:	10 92 b9 00 	sts	0x00B9, r1
		#ifndef TWI_Slave_Address
		#error This module requires TWI_Slave_Address to be defined for slave mode!
		#endif
		TWAR = TWI_Slave_Address;
	#endif
}
     954:	08 95       	ret

00000956 <next_twi_operation>:
		twi_base | _BV(TWSTO);
	#endif
	twi_running = FALSE;
}

BOOL next_twi_operation() {
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	27 97       	sbiw	r28, 0x07	; 7
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
	TWIOperation current;
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     96a:	80 91 7d 03 	lds	r24, 0x037D
     96e:	90 91 7e 03 	lds	r25, 0x037E
     972:	83 30       	cpi	r24, 0x03	; 3
     974:	91 05       	cpc	r25, r1
     976:	0c f0       	brlt	.+2      	; 0x97a <next_twi_operation+0x24>
     978:	52 c0       	rjmp	.+164    	; 0xa1e <next_twi_operation+0xc8>
	do {
		current = furtherOperations[nextTwiOperation++];
     97a:	ae 01       	movw	r20, r28
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	80 91 7d 03 	lds	r24, 0x037D
     984:	90 91 7e 03 	lds	r25, 0x037E
     988:	fc 01       	movw	r30, r24
     98a:	33 e0       	ldi	r19, 0x03	; 3
     98c:	ee 0f       	add	r30, r30
     98e:	ff 1f       	adc	r31, r31
     990:	3a 95       	dec	r19
     992:	e1 f7       	brne	.-8      	; 0x98c <next_twi_operation+0x36>
     994:	e8 1b       	sub	r30, r24
     996:	f9 0b       	sbc	r31, r25
     998:	da 01       	movw	r26, r20
     99a:	e6 54       	subi	r30, 0x46	; 70
     99c:	fc 4f       	sbci	r31, 0xFC	; 252
     99e:	27 e0       	ldi	r18, 0x07	; 7
     9a0:	01 90       	ld	r0, Z+
     9a2:	0d 92       	st	X+, r0
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <next_twi_operation+0x4a>
     9a8:	fc 01       	movw	r30, r24
     9aa:	23 e0       	ldi	r18, 0x03	; 3
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	2a 95       	dec	r18
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <next_twi_operation+0x56>
     9b4:	e8 1b       	sub	r30, r24
     9b6:	f9 0b       	sbc	r31, r25
     9b8:	e6 54       	subi	r30, 0x46	; 70
     9ba:	fc 4f       	sbci	r31, 0xFC	; 252
     9bc:	64 81       	ldd	r22, Z+4	; 0x04
     9be:	25 81       	ldd	r18, Z+5	; 0x05
     9c0:	36 81       	ldd	r19, Z+6	; 0x06
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	90 93 7e 03 	sts	0x037E, r25
     9c8:	80 93 7d 03 	sts	0x037D, r24
		if (current.operationMode != TWI_IllegalOperation) break;
     9cc:	21 15       	cp	r18, r1
     9ce:	31 05       	cpc	r19, r1
     9d0:	21 f0       	breq	.+8      	; 0x9da <next_twi_operation+0x84>
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	91 05       	cpc	r25, r1
     9d6:	2c f0       	brlt	.+10     	; 0x9e2 <next_twi_operation+0x8c>
     9d8:	22 c0       	rjmp	.+68     	; 0xa1e <next_twi_operation+0xc8>
	
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
     9da:	83 30       	cpi	r24, 0x03	; 3
     9dc:	91 05       	cpc	r25, r1
     9de:	84 f2       	brlt	.-96     	; 0x980 <next_twi_operation+0x2a>
     9e0:	1e c0       	rjmp	.+60     	; 0xa1e <next_twi_operation+0xc8>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	
	// Delete or set the LSB, which describes sla+w or sla+r (reading or writing
	// slave address)
	if (current.operationMode == TWI_Send) {
     9e2:	22 30       	cpi	r18, 0x02	; 2
     9e4:	31 05       	cpc	r19, r1
     9e6:	11 f4       	brne	.+4      	; 0x9ec <next_twi_operation+0x96>
		twi_address.address = current.device.address & ~_BV(0);
     9e8:	6e 7f       	andi	r22, 0xFE	; 254
     9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <next_twi_operation+0x9e>
	} else if (current.operationMode == TWI_Receive) {
     9ec:	21 30       	cpi	r18, 0x01	; 1
     9ee:	31 05       	cpc	r19, r1
     9f0:	19 f4       	brne	.+6      	; 0x9f8 <next_twi_operation+0xa2>
		twi_address.address = current.device.address | _BV(0);
     9f2:	61 60       	ori	r22, 0x01	; 1
     9f4:	60 93 ba 01 	sts	0x01BA, r22
	}
	alreadyHandled = 0;
     9f8:	10 92 29 03 	sts	0x0329, r1
     9fc:	10 92 28 03 	sts	0x0328, r1
	twi_buffer = current.buffer;
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	ab 81       	ldd	r26, Y+3	; 0x03
     a06:	bc 81       	ldd	r27, Y+4	; 0x04
     a08:	80 93 82 03 	sts	0x0382, r24
     a0c:	90 93 83 03 	sts	0x0383, r25
     a10:	a0 93 84 03 	sts	0x0384, r26
     a14:	b0 93 85 03 	sts	0x0385, r27
	return TRUE;
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <next_twi_operation+0xcc>
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
	do {
		current = furtherOperations[nextTwiOperation++];
		if (current.operationMode != TWI_IllegalOperation) break;
	} while (nextTwiOperation < NUM_TWI_OPERATIONS);
	if (nextTwiOperation >= NUM_TWI_OPERATIONS) return FALSE;
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
		twi_address.address = current.device.address | _BV(0);
	}
	alreadyHandled = 0;
	twi_buffer = current.buffer;
	return TRUE;
}
     a22:	c9 01       	movw	r24, r18
     a24:	27 96       	adiw	r28, 0x07	; 7
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	f8 94       	cli
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	cd bf       	out	0x3d, r28	; 61
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	08 95       	ret

00000a36 <twi_stop_or_next>:

static inline void twi_stop_or_next() {
	if (!next_twi_operation()) {
     a36:	0e 94 ab 04 	call	0x956	; 0x956 <next_twi_operation>
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	19 f4       	brne	.+6      	; 0xa44 <twi_stop_or_next+0xe>
		twi_stop();
     a3e:	0e 94 77 00 	call	0xee	; 0xee <twi_stop>
     a42:	08 95       	ret
	} else {
		// Next operation, without releasing the bus. Repeated START condition!
		twi_start();
     a44:	85 ea       	ldi	r24, 0xA5	; 165
     a46:	80 93 bc 00 	sts	0x00BC, r24
     a4a:	08 95       	ret

00000a4c <twi_start_master_operation>:
	#endif
	twi_running = FALSE;
}

void twi_start_master_operation() {
	twi_error = TWI_No_Error;
     a4c:	10 92 2b 03 	sts	0x032B, r1
     a50:	10 92 2a 03 	sts	0x032A, r1
	twi_running = TRUE;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	90 93 8a 03 	sts	0x038A, r25
     a5c:	80 93 89 03 	sts	0x0389, r24
	nextTwiOperation = 0;
     a60:	10 92 7e 03 	sts	0x037E, r1
     a64:	10 92 7d 03 	sts	0x037D, r1
	if (next_twi_operation()) {
     a68:	0e 94 ab 04 	call	0x956	; 0x956 <next_twi_operation>
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	19 f0       	breq	.+6      	; 0xa76 <twi_start_master_operation+0x2a>
		twi_start();
     a70:	85 ea       	ldi	r24, 0xA5	; 165
     a72:	80 93 bc 00 	sts	0x00BC, r24
     a76:	08 95       	ret

00000a78 <__vector_26>:
	// buffer has no space at all reserved. Fix by skipping this byte).
	if (alreadyHandled < twi_buffer.size)
		twi_buffer.data[alreadyHandled++] = TWDR;
}

ISR(TWI_vect) {
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
	TWI_DEBUG_INTERRUPT(TW_STATUS)
	
	switch(TW_STATUS) {
     a9e:	80 91 b9 00 	lds	r24, 0x00B9
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	88 7f       	andi	r24, 0xF8	; 248
     aa6:	90 70       	andi	r25, 0x00	; 0
     aa8:	80 33       	cpi	r24, 0x30	; 48
     aaa:	91 05       	cpc	r25, r1
     aac:	09 f4       	brne	.+2      	; 0xab0 <__vector_26+0x38>
     aae:	69 c0       	rjmp	.+210    	; 0xb82 <__vector_26+0x10a>
     ab0:	81 33       	cpi	r24, 0x31	; 49
     ab2:	91 05       	cpc	r25, r1
     ab4:	d4 f4       	brge	.+52     	; 0xaea <__vector_26+0x72>
     ab6:	80 31       	cpi	r24, 0x10	; 16
     ab8:	91 05       	cpc	r25, r1
     aba:	99 f1       	breq	.+102    	; 0xb22 <__vector_26+0xaa>
     abc:	81 31       	cpi	r24, 0x11	; 17
     abe:	91 05       	cpc	r25, r1
     ac0:	44 f4       	brge	.+16     	; 0xad2 <__vector_26+0x5a>
     ac2:	00 97       	sbiw	r24, 0x00	; 0
     ac4:	09 f4       	brne	.+2      	; 0xac8 <__vector_26+0x50>
     ac6:	76 c0       	rjmp	.+236    	; 0xbb4 <__vector_26+0x13c>
     ac8:	88 30       	cpi	r24, 0x08	; 8
     aca:	91 05       	cpc	r25, r1
     acc:	09 f0       	breq	.+2      	; 0xad0 <__vector_26+0x58>
     ace:	75 c0       	rjmp	.+234    	; 0xbba <__vector_26+0x142>
     ad0:	28 c0       	rjmp	.+80     	; 0xb22 <__vector_26+0xaa>
     ad2:	80 32       	cpi	r24, 0x20	; 32
     ad4:	91 05       	cpc	r25, r1
     ad6:	09 f4       	brne	.+2      	; 0xada <__vector_26+0x62>
     ad8:	5c c0       	rjmp	.+184    	; 0xb92 <__vector_26+0x11a>
     ada:	88 32       	cpi	r24, 0x28	; 40
     adc:	91 05       	cpc	r25, r1
     ade:	a1 f1       	breq	.+104    	; 0xb48 <__vector_26+0xd0>
     ae0:	88 31       	cpi	r24, 0x18	; 24
     ae2:	91 05       	cpc	r25, r1
     ae4:	09 f0       	breq	.+2      	; 0xae8 <__vector_26+0x70>
     ae6:	69 c0       	rjmp	.+210    	; 0xbba <__vector_26+0x142>
     ae8:	2f c0       	rjmp	.+94     	; 0xb48 <__vector_26+0xd0>
     aea:	88 34       	cpi	r24, 0x48	; 72
     aec:	91 05       	cpc	r25, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <__vector_26+0x7a>
     af0:	50 c0       	rjmp	.+160    	; 0xb92 <__vector_26+0x11a>
     af2:	89 34       	cpi	r24, 0x49	; 73
     af4:	91 05       	cpc	r25, r1
     af6:	44 f4       	brge	.+16     	; 0xb08 <__vector_26+0x90>
     af8:	88 33       	cpi	r24, 0x38	; 56
     afa:	91 05       	cpc	r25, r1
     afc:	b9 f0       	breq	.+46     	; 0xb2c <__vector_26+0xb4>
     afe:	80 34       	cpi	r24, 0x40	; 64
     b00:	91 05       	cpc	r25, r1
     b02:	09 f0       	breq	.+2      	; 0xb06 <__vector_26+0x8e>
     b04:	5a c0       	rjmp	.+180    	; 0xbba <__vector_26+0x142>
     b06:	42 c0       	rjmp	.+132    	; 0xb8c <__vector_26+0x114>
     b08:	88 35       	cpi	r24, 0x58	; 88
     b0a:	91 05       	cpc	r25, r1
     b0c:	09 f4       	brne	.+2      	; 0xb10 <__vector_26+0x98>
     b0e:	4a c0       	rjmp	.+148    	; 0xba4 <__vector_26+0x12c>
     b10:	88 3f       	cpi	r24, 0xF8	; 248
     b12:	91 05       	cpc	r25, r1
     b14:	09 f4       	brne	.+2      	; 0xb18 <__vector_26+0xa0>
     b16:	4b c0       	rjmp	.+150    	; 0xbae <__vector_26+0x136>
     b18:	80 35       	cpi	r24, 0x50	; 80
     b1a:	91 05       	cpc	r25, r1
     b1c:	09 f0       	breq	.+2      	; 0xb20 <__vector_26+0xa8>
     b1e:	4d c0       	rjmp	.+154    	; 0xbba <__vector_26+0x142>
     b20:	33 c0       	rjmp	.+102    	; 0xb88 <__vector_26+0x110>
// Master
		case TW_START:
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
     b22:	80 91 ba 01 	lds	r24, 0x01BA
#define twi_continue() twi_base
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_send(uint8_t data) {
	TWI_DEBUG_BYTE_SENT(data)
	TWDR = data;
     b26:	80 93 bb 00 	sts	0x00BB, r24
     b2a:	27 c0       	rjmp	.+78     	; 0xb7a <__vector_26+0x102>
		case TW_REP_START:
			// Start has been acknowledged, now send the slave address. Is already either READ or WRITE.
			twi_send(twi_address.address);
			break;
		case TW_MR_ARB_LOST: // OR TW_MT_ARB_LOST
			twi_error = TWI_Arbitration_Lost;
     b2c:	85 e0       	ldi	r24, 0x05	; 5
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	90 93 2b 03 	sts	0x032B, r25
     b34:	80 93 2a 03 	sts	0x032A, r24
static inline void twi_end() {
	#ifdef TWI_Slave
		twi_base | _BV(TWEA);
		twi_buffer = twi_defaultSlaveBuffer;
	#else
		twi_base;
     b38:	85 e8       	ldi	r24, 0x85	; 133
     b3a:	80 93 bc 00 	sts	0x00BC, r24
	#endif
	twi_running = FALSE;
     b3e:	10 92 8a 03 	sts	0x038A, r1
     b42:	10 92 89 03 	sts	0x0389, r1
     b46:	41 c0       	rjmp	.+130    	; 0xbca <__vector_26+0x152>
// Master Transmitter
		case TW_MT_DATA_ACK:
		case TW_MT_SLA_ACK:
			// Data byte acknowledged, send next byte.
			// Or: Slave address acknowledged, send first byte.
			if (alreadyHandled < twi_buffer.size) {
     b48:	80 91 28 03 	lds	r24, 0x0328
     b4c:	90 91 29 03 	lds	r25, 0x0329
     b50:	20 91 84 03 	lds	r18, 0x0384
     b54:	30 91 85 03 	lds	r19, 0x0385
     b58:	82 17       	cp	r24, r18
     b5a:	93 07       	cpc	r25, r19
     b5c:	28 f5       	brcc	.+74     	; 0xba8 <__vector_26+0x130>
				twi_send(twi_buffer.data[alreadyHandled++]);
     b5e:	e0 91 82 03 	lds	r30, 0x0382
     b62:	f0 91 83 03 	lds	r31, 0x0383
     b66:	e8 0f       	add	r30, r24
     b68:	f9 1f       	adc	r31, r25
     b6a:	20 81       	ld	r18, Z
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	90 93 29 03 	sts	0x0329, r25
     b72:	80 93 28 03 	sts	0x0328, r24
#define twi_continue() twi_base
#define twi_send_ack(data) TWDR = data; twi_ack()

static inline void twi_send(uint8_t data) {
	TWI_DEBUG_BYTE_SENT(data)
	TWDR = data;
     b76:	20 93 bb 00 	sts	0x00BB, r18
	twi_continue();
     b7a:	85 e8       	ldi	r24, 0x85	; 133
     b7c:	80 93 bc 00 	sts	0x00BC, r24
     b80:	24 c0       	rjmp	.+72     	; 0xbca <__vector_26+0x152>
		case TW_MT_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
			twi_stop();
			break;
		case TW_MT_DATA_NACK:
			twi_error = TWI_Master_TooMuchDataTransmitted;
     b82:	86 e0       	ldi	r24, 0x06	; 6
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	07 c0       	rjmp	.+14     	; 0xb96 <__vector_26+0x11e>
// Master Receiver
		case TW_MR_SLA_ACK:
			twi_ack_receive();
			break;
		case TW_MR_DATA_ACK:
			twi_read_byte();
     b88:	0e 94 91 00 	call	0x122	; 0x122 <twi_read_byte>
			twi_ack_receive();
     b8c:	0e 94 7f 00 	call	0xfe	; 0xfe <twi_ack_receive>
			break;
     b90:	1c c0       	rjmp	.+56     	; 0xbca <__vector_26+0x152>
		case TW_MR_SLA_NACK:
			twi_error = TWI_SlaveAddress_NoAck;
     b92:	84 e0       	ldi	r24, 0x04	; 4
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 2b 03 	sts	0x032B, r25
     b9a:	80 93 2a 03 	sts	0x032A, r24
			twi_stop();
     b9e:	0e 94 77 00 	call	0xee	; 0xee <twi_stop>
			break;
     ba2:	13 c0       	rjmp	.+38     	; 0xbca <__vector_26+0x152>
		case TW_MR_DATA_NACK:
			// We have aborted the transmission. Everything seems normal.
			// Cannot tell whether we have received too much or not enough or the exactly correct amount...
			twi_read_byte();
     ba4:	0e 94 91 00 	call	0x122	; 0x122 <twi_read_byte>
			twi_stop_or_next();
     ba8:	0e 94 1b 05 	call	0xa36	; 0xa36 <twi_stop_or_next>
			break;
     bac:	0e c0       	rjmp	.+28     	; 0xbca <__vector_26+0x152>
			twi_end(); // Transmission finished normally. Cannot tell whether Master wanted to send more.
			break;
#endif
// Misc
		case TW_NO_INFO:
			twi_error = TWI_No_Info_Interrupt;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	05 c0       	rjmp	.+10     	; 0xbbe <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		case TW_BUS_ERROR:
			twi_error = TWI_Bus_Error;
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <__vector_26+0x146>
			twi_unexpectedCondition();
			break;
		default:
			twi_error = TWI_Illegal_Status;
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	90 93 2b 03 	sts	0x032B, r25
     bc2:	80 93 2a 03 	sts	0x032A, r24
			twi_unexpectedCondition();
     bc6:	0e 94 9e 04 	call	0x93c	; 0x93c <twi_unexpectedCondition>
			break;
	}
}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <twiMultipleOperations>:
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     bf0:	1f 93       	push	r17
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     bfa:	0f c0       	rjmp	.+30     	; 0xc1a <twiMultipleOperations+0x2a>
		furtherOperations[i] = operations[i];
     bfc:	da 01       	movw	r26, r20
     bfe:	a6 54       	subi	r26, 0x46	; 70
     c00:	bc 4f       	sbci	r27, 0xFC	; 252
     c02:	fb 01       	movw	r30, r22
     c04:	e4 0f       	add	r30, r20
     c06:	f5 1f       	adc	r31, r21
     c08:	17 e0       	ldi	r17, 0x07	; 7
     c0a:	01 90       	ld	r0, Z+
     c0c:	0d 92       	st	X+, r0
     c0e:	11 50       	subi	r17, 0x01	; 1
     c10:	e1 f7       	brne	.-8      	; 0xc0a <twiMultipleOperations+0x1a>
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     c12:	2f 5f       	subi	r18, 0xFF	; 255
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	49 5f       	subi	r20, 0xF9	; 249
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	28 17       	cp	r18, r24
     c1c:	39 07       	cpc	r19, r25
     c1e:	5c f0       	brlt	.+22     	; 0xc36 <twiMultipleOperations+0x46>
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
}

void twiMultipleOperations(int count, TWIOperation *operations) {
     c20:	f9 01       	movw	r30, r18
     c22:	43 e0       	ldi	r20, 0x03	; 3
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	4a 95       	dec	r20
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <twiMultipleOperations+0x34>
     c2c:	e2 1b       	sub	r30, r18
     c2e:	f3 0b       	sbc	r31, r19
     c30:	e1 54       	subi	r30, 0x41	; 65
     c32:	fc 4f       	sbci	r31, 0xFC	; 252
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <twiMultipleOperations+0x58>
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
     c36:	23 30       	cpi	r18, 0x03	; 3
     c38:	31 05       	cpc	r19, r1
     c3a:	01 f7       	brne	.-64     	; 0xbfc <twiMultipleOperations+0xc>
     c3c:	f1 cf       	rjmp	.-30     	; 0xc20 <twiMultipleOperations+0x30>
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i].operationMode = TWI_IllegalOperation;
     c3e:	11 82       	std	Z+1, r1	; 0x01
     c40:	10 82       	st	Z, r1
void twiMultipleOperations(int count, TWIOperation *operations) {
	int i = 0;
	for (; i < count && i < NUM_TWI_OPERATIONS; i++) {
		furtherOperations[i] = operations[i];
	}
	for (; i < NUM_TWI_OPERATIONS; i++) {
     c42:	2f 5f       	subi	r18, 0xFF	; 255
     c44:	3f 4f       	sbci	r19, 0xFF	; 255
     c46:	37 96       	adiw	r30, 0x07	; 7
     c48:	23 30       	cpi	r18, 0x03	; 3
     c4a:	31 05       	cpc	r19, r1
     c4c:	c4 f3       	brlt	.-16     	; 0xc3e <twiMultipleOperations+0x4e>
		furtherOperations[i].operationMode = TWI_IllegalOperation;
	}
	twi_start_master_operation();
     c4e:	0e 94 26 05 	call	0xa4c	; 0xa4c <twi_start_master_operation>
}
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <twiSendReceive>:
void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
	twiMultipleOperations(1, op);
}

void twiSendReceive(TWIDevice targetDevice, TWIBuffer sendData, TWIBuffer receiveBuffer) {
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2e 97       	sbiw	r28, 0x0e	; 14
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
	TWIOperation ops[2] = {
     c6e:	fe 01       	movw	r30, r28
     c70:	31 96       	adiw	r30, 0x01	; 1
     c72:	9e e0       	ldi	r25, 0x0E	; 14
     c74:	df 01       	movw	r26, r30
     c76:	1d 92       	st	X+, r1
     c78:	9a 95       	dec	r25
     c7a:	e9 f7       	brne	.-6      	; 0xc76 <twiSendReceive+0x20>
     c7c:	49 83       	std	Y+1, r20	; 0x01
     c7e:	5a 83       	std	Y+2, r21	; 0x02
     c80:	6b 83       	std	Y+3, r22	; 0x03
     c82:	7c 83       	std	Y+4, r23	; 0x04
     c84:	8d 83       	std	Y+5, r24	; 0x05
     c86:	42 e0       	ldi	r20, 0x02	; 2
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	5f 83       	std	Y+7, r21	; 0x07
     c8c:	4e 83       	std	Y+6, r20	; 0x06
     c8e:	08 87       	std	Y+8, r16	; 0x08
     c90:	19 87       	std	Y+9, r17	; 0x09
     c92:	2a 87       	std	Y+10, r18	; 0x0a
     c94:	3b 87       	std	Y+11, r19	; 0x0b
     c96:	8c 87       	std	Y+12, r24	; 0x0c
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9e 87       	std	Y+14, r25	; 0x0e
     c9e:	8d 87       	std	Y+13, r24	; 0x0d
		(TWIOperation) { sendData, targetDevice, TWI_Send },
		(TWIOperation) { receiveBuffer, targetDevice, TWI_Receive }
	};
	twiMultipleOperations(2, ops);
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	bf 01       	movw	r22, r30
     ca6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <twiMultipleOperations>
}
     caa:	2e 96       	adiw	r28, 0x0e	; 14
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <twiReceive>:
void twiSend(TWIDevice targetDevice, TWIBuffer data) {
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
	twiMultipleOperations(1, op);
}

void twiReceive(TWIDevice targetDevice, TWIBuffer receiveBuffer) {
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	27 97       	sbiw	r28, 0x07	; 7
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { receiveBuffer, targetDevice, TWI_Receive} };
     cd4:	fe 01       	movw	r30, r28
     cd6:	31 96       	adiw	r30, 0x01	; 1
     cd8:	97 e0       	ldi	r25, 0x07	; 7
     cda:	df 01       	movw	r26, r30
     cdc:	1d 92       	st	X+, r1
     cde:	9a 95       	dec	r25
     ce0:	e9 f7       	brne	.-6      	; 0xcdc <twiReceive+0x1c>
     ce2:	49 83       	std	Y+1, r20	; 0x01
     ce4:	5a 83       	std	Y+2, r21	; 0x02
     ce6:	6b 83       	std	Y+3, r22	; 0x03
     ce8:	7c 83       	std	Y+4, r23	; 0x04
     cea:	8d 83       	std	Y+5, r24	; 0x05
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9f 83       	std	Y+7, r25	; 0x07
     cf2:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     cf4:	bf 01       	movw	r22, r30
     cf6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <twiMultipleOperations>
}
     cfa:	27 96       	adiw	r28, 0x07	; 7
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <twiSend>:
			twi_unexpectedCondition();
			break;
	}
}

void twiSend(TWIDevice targetDevice, TWIBuffer data) {
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	27 97       	sbiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
	TWIOperation op[1] = { (TWIOperation) { data, targetDevice, TWI_Send} };
     d20:	fe 01       	movw	r30, r28
     d22:	31 96       	adiw	r30, 0x01	; 1
     d24:	97 e0       	ldi	r25, 0x07	; 7
     d26:	df 01       	movw	r26, r30
     d28:	1d 92       	st	X+, r1
     d2a:	9a 95       	dec	r25
     d2c:	e9 f7       	brne	.-6      	; 0xd28 <twiSend+0x1c>
     d2e:	49 83       	std	Y+1, r20	; 0x01
     d30:	5a 83       	std	Y+2, r21	; 0x02
     d32:	6b 83       	std	Y+3, r22	; 0x03
     d34:	7c 83       	std	Y+4, r23	; 0x04
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9f 83       	std	Y+7, r25	; 0x07
     d3e:	8e 83       	std	Y+6, r24	; 0x06
	twiMultipleOperations(1, op);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	bf 01       	movw	r22, r30
     d46:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <twiMultipleOperations>
}
     d4a:	27 96       	adiw	r28, 0x07	; 7
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <WAIT_FOR_TWI>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d5c:	f8 94       	cli

void WAIT_FOR_TWI() {
	while (1) {
		uint8_t still_running;
		ATOMIC_BLOCK(ATOMIC_FORCEON) {
			still_running = twi_running;
     d5e:	80 91 89 03 	lds	r24, 0x0389
     d62:	90 91 8a 03 	lds	r25, 0x038A
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     d66:	78 94       	sei
		}
		if (!still_running) {
     d68:	88 23       	and	r24, r24
     d6a:	c1 f7       	brne	.-16     	; 0xd5c <WAIT_FOR_TWI>
			_delay_ms(TWI_DELAY);
			#endif
			break;
		}
	}
}
     d6c:	08 95       	ret

00000d6e <turn_word>:

void turn_word(uint16_t *word) {
	uint8_t temp = ((uint8_t*) word)[0];
     d6e:	fc 01       	movw	r30, r24
     d70:	80 81       	ld	r24, Z
	((uint8_t*) word)[0] = ((uint8_t*) word)[1];
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	90 83       	st	Z, r25
	((uint8_t*) word)[1] = temp;
     d76:	81 83       	std	Z+1, r24	; 0x01
}
     d78:	08 95       	ret

00000d7a <twi_rpc_oneway>:

void twi_rpc_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
     d7a:	1f 93       	push	r17
     d7c:	18 2f       	mov	r17, r24
     d7e:	86 2f       	mov	r24, r22
     d80:	ba 01       	movw	r22, r20
     d82:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
     d84:	0e 94 ab 00 	call	0x156	; 0x156 <fillSendBuffer>
	twiSend(device, sendBuffer);
     d88:	40 91 6a 01 	lds	r20, 0x016A
     d8c:	50 91 6b 01 	lds	r21, 0x016B
     d90:	60 91 6c 01 	lds	r22, 0x016C
     d94:	70 91 6d 01 	lds	r23, 0x016D
     d98:	81 2f       	mov	r24, r17
     d9a:	0e 94 86 06 	call	0xd0c	; 0xd0c <twiSend>
}
     d9e:	1f 91       	pop	r17
     da0:	08 95       	ret

00000da2 <tankIO_blinkByte>:

TWI_RPC_FUNCTION_VOID	(tankIO_flashLed, TANK_IO_flashLed, FlashLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_flashLeds, TANK_IO_flashLeds, FlashLedsParam)
TWI_RPC_FUNCTION_VOID	(tankIO_flashAllLeds, TANK_IO_flashAllLeds, FlashAllLedsParam)

TWI_RPC_FUNCTION_VOID	(tankIO_blinkByte, TANK_IO_blinkByte, BlinkByteParam)
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <tankIO_blinkByte+0x6>
     da8:	00 d0       	rcall	.+0      	; 0xdaa <tankIO_blinkByte+0x8>
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	49 83       	std	Y+1, r20	; 0x01
     db2:	5a 83       	std	Y+2, r21	; 0x02
     db4:	6b 83       	std	Y+3, r22	; 0x03
     db6:	7c 83       	std	Y+4, r23	; 0x04
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	9e 01       	movw	r18, r28
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	45 e0       	ldi	r20, 0x05	; 5
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	80 91 69 01 	lds	r24, 0x0169
     dc8:	60 eb       	ldi	r22, 0xB0	; 176
     dca:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     dce:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <tankIO_flashAllLeds>:
TWI_RPC_FUNCTION_VOID	(tankIO_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkAllLeds, TANK_IO_blinkAllLeds, BlinkAllLedsParam)

TWI_RPC_FUNCTION_VOID	(tankIO_flashLed, TANK_IO_flashLed, FlashLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_flashLeds, TANK_IO_flashLeds, FlashLedsParam)
TWI_RPC_FUNCTION_VOID	(tankIO_flashAllLeds, TANK_IO_flashAllLeds, FlashAllLedsParam)
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	00 d0       	rcall	.+0      	; 0xde8 <tankIO_flashAllLeds+0x6>
     de8:	00 d0       	rcall	.+0      	; 0xdea <tankIO_flashAllLeds+0x8>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	69 83       	std	Y+1, r22	; 0x01
     df0:	7a 83       	std	Y+2, r23	; 0x02
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	9e 01       	movw	r18, r28
     df8:	2f 5f       	subi	r18, 0xFF	; 255
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	44 e0       	ldi	r20, 0x04	; 4
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	80 91 69 01 	lds	r24, 0x0169
     e04:	6f ea       	ldi	r22, 0xAF	; 175
     e06:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     e0a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <tankIO_flashLeds>:
TWI_RPC_FUNCTION_VOID	(tankIO_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkAllLeds, TANK_IO_blinkAllLeds, BlinkAllLedsParam)

TWI_RPC_FUNCTION_VOID	(tankIO_flashLed, TANK_IO_flashLed, FlashLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_flashLeds, TANK_IO_flashLeds, FlashLedsParam)
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	00 d0       	rcall	.+0      	; 0xe22 <tankIO_flashLeds+0x6>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <tankIO_flashLeds+0x8>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <tankIO_flashLeds+0xa>
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	49 83       	std	Y+1, r20	; 0x01
     e2c:	5a 83       	std	Y+2, r21	; 0x02
     e2e:	6b 83       	std	Y+3, r22	; 0x03
     e30:	7c 83       	std	Y+4, r23	; 0x04
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	9e 01       	movw	r18, r28
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	46 e0       	ldi	r20, 0x06	; 6
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	80 91 69 01 	lds	r24, 0x0169
     e44:	6e ea       	ldi	r22, 0xAE	; 174
     e46:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     e4a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     e4e:	26 96       	adiw	r28, 0x06	; 6
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <tankIO_flashLed>:

TWI_RPC_FUNCTION_VOID	(tankIO_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkAllLeds, TANK_IO_blinkAllLeds, BlinkAllLedsParam)

TWI_RPC_FUNCTION_VOID	(tankIO_flashLed, TANK_IO_flashLed, FlashLedParam)
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <tankIO_flashLed+0x6>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <tankIO_flashLed+0x8>
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	49 83       	std	Y+1, r20	; 0x01
     e70:	5a 83       	std	Y+2, r21	; 0x02
     e72:	6b 83       	std	Y+3, r22	; 0x03
     e74:	7c 83       	std	Y+4, r23	; 0x04
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	9e 01       	movw	r18, r28
     e7a:	2f 5f       	subi	r18, 0xFF	; 255
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	45 e0       	ldi	r20, 0x05	; 5
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	80 91 69 01 	lds	r24, 0x0169
     e86:	6d ea       	ldi	r22, 0xAD	; 173
     e88:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     e8c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <tankIO_blinkAllLeds>:
TWI_RPC_FUNCTION_VOID	(tankIO_disableLeds, TANK_IO_disableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_setLeds, TANK_IO_setLeds, MaskedLeds)

TWI_RPC_FUNCTION_VOID	(tankIO_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkAllLeds, TANK_IO_blinkAllLeds, BlinkAllLedsParam)
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <tankIO_blinkAllLeds+0x6>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	69 83       	std	Y+1, r22	; 0x01
     eae:	7a 83       	std	Y+2, r23	; 0x02
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	9e 01       	movw	r18, r28
     eb4:	2f 5f       	subi	r18, 0xFF	; 255
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	43 e0       	ldi	r20, 0x03	; 3
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	80 91 69 01 	lds	r24, 0x0169
     ec0:	6c ea       	ldi	r22, 0xAC	; 172
     ec2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     ec6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <tankIO_blinkLeds>:
TWI_RPC_FUNCTION_VOID	(tankIO_enableLeds, TANK_IO_enableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLeds, TANK_IO_disableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_setLeds, TANK_IO_setLeds, MaskedLeds)

TWI_RPC_FUNCTION_VOID	(tankIO_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
TWI_RPC_FUNCTION_VOID	(tankIO_blinkLeds, TANK_IO_blinkLeds, BlinkLedsParam)
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <tankIO_blinkLeds+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <tankIO_blinkLeds+0x8>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	49 83       	std	Y+1, r20	; 0x01
     ee6:	5a 83       	std	Y+2, r21	; 0x02
     ee8:	6b 83       	std	Y+3, r22	; 0x03
     eea:	7c 83       	std	Y+4, r23	; 0x04
     eec:	8d 83       	std	Y+5, r24	; 0x05
     eee:	9e 01       	movw	r18, r28
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	45 e0       	ldi	r20, 0x05	; 5
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	80 91 69 01 	lds	r24, 0x0169
     efc:	6b ea       	ldi	r22, 0xAB	; 171
     efe:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     f02:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <tankIO_blinkLed>:

TWI_RPC_FUNCTION_VOID	(tankIO_enableLeds, TANK_IO_enableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLeds, TANK_IO_disableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_setLeds, TANK_IO_setLeds, MaskedLeds)

TWI_RPC_FUNCTION_VOID	(tankIO_blinkLed, TANK_IO_blinkLed, BlinkLedParam)
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	00 d0       	rcall	.+0      	; 0xf1c <tankIO_blinkLed+0x6>
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <tankIO_blinkLed+0x8>
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	69 83       	std	Y+1, r22	; 0x01
     f24:	7a 83       	std	Y+2, r23	; 0x02
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	9e 01       	movw	r18, r28
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	44 e0       	ldi	r20, 0x04	; 4
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	80 91 69 01 	lds	r24, 0x0169
     f38:	6a ea       	ldi	r22, 0xAA	; 170
     f3a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     f3e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <tankIO_setLeds>:
TWI_RPC_FUNCTION_VOID	(tankIO_disableLed, TANK_IO_disableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_setLed, TANK_IO_setLed, SingleLed)

TWI_RPC_FUNCTION_VOID	(tankIO_enableLeds, TANK_IO_enableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLeds, TANK_IO_disableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_setLeds, TANK_IO_setLeds, MaskedLeds)
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <tankIO_setLeds+0x6>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <tankIO_setLeds+0x8>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	69 83       	std	Y+1, r22	; 0x01
     f5e:	7a 83       	std	Y+2, r23	; 0x02
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	9e 01       	movw	r18, r28
     f66:	2f 5f       	subi	r18, 0xFF	; 255
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	44 e0       	ldi	r20, 0x04	; 4
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	80 91 69 01 	lds	r24, 0x0169
     f72:	67 ea       	ldi	r22, 0xA7	; 167
     f74:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     f78:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <tankIO_disableLeds>:
TWI_RPC_FUNCTION_VOID	(tankIO_enableLed, TANK_IO_enableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLed, TANK_IO_disableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_setLed, TANK_IO_setLed, SingleLed)

TWI_RPC_FUNCTION_VOID	(tankIO_enableLeds, TANK_IO_enableLeds, TankIoLeds)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLeds, TANK_IO_disableLeds, TankIoLeds)
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <tankIO_disableLeds+0x6>
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	9e 01       	movw	r18, r28
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	42 e0       	ldi	r20, 0x02	; 2
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	80 91 69 01 	lds	r24, 0x0169
     fa6:	69 ea       	ldi	r22, 0xA9	; 169
     fa8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     fac:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <tankIO_enableLeds>:

TWI_RPC_FUNCTION_VOID	(tankIO_enableLed, TANK_IO_enableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLed, TANK_IO_disableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_setLed, TANK_IO_setLed, SingleLed)

TWI_RPC_FUNCTION_VOID	(tankIO_enableLeds, TANK_IO_enableLeds, TankIoLeds)
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <tankIO_enableLeds+0x6>
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	9e 01       	movw	r18, r28
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	42 e0       	ldi	r20, 0x02	; 2
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	80 91 69 01 	lds	r24, 0x0169
     fd6:	68 ea       	ldi	r22, 0xA8	; 168
     fd8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
     fdc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <tankIO_setLed>:
TWI_RPC_FUNCTION_NOARGS	(tankIO_buttonStatus, TANK_IO_buttonStatus, uint8_t)
TWI_RPC_FUNCTION_NOARGS	(tankIO_pressedButtons, TANK_IO_pressedButtons, uint8_t)

TWI_RPC_FUNCTION_VOID	(tankIO_enableLed, TANK_IO_enableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLed, TANK_IO_disableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_setLed, TANK_IO_setLed, SingleLed)
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <tankIO_setLed+0x6>
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	69 83       	std	Y+1, r22	; 0x01
     ff8:	7a 83       	std	Y+2, r23	; 0x02
     ffa:	8b 83       	std	Y+3, r24	; 0x03
     ffc:	9e 01       	movw	r18, r28
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	43 e0       	ldi	r20, 0x03	; 3
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	80 91 69 01 	lds	r24, 0x0169
    100a:	66 ea       	ldi	r22, 0xA6	; 166
    100c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
    1010:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <tankIO_disableLed>:

TWI_RPC_FUNCTION_NOARGS	(tankIO_buttonStatus, TANK_IO_buttonStatus, uint8_t)
TWI_RPC_FUNCTION_NOARGS	(tankIO_pressedButtons, TANK_IO_pressedButtons, uint8_t)

TWI_RPC_FUNCTION_VOID	(tankIO_enableLed, TANK_IO_enableLed, SingleLed)
TWI_RPC_FUNCTION_VOID	(tankIO_disableLed, TANK_IO_disableLed, SingleLed)
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	00 d0       	rcall	.+0      	; 0x1026 <tankIO_disableLed+0x6>
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	69 83       	std	Y+1, r22	; 0x01
    102e:	7a 83       	std	Y+2, r23	; 0x02
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	9e 01       	movw	r18, r28
    1034:	2f 5f       	subi	r18, 0xFF	; 255
    1036:	3f 4f       	sbci	r19, 0xFF	; 255
    1038:	43 e0       	ldi	r20, 0x03	; 3
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	80 91 69 01 	lds	r24, 0x0169
    1040:	65 ea       	ldi	r22, 0xA5	; 165
    1042:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
    1046:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <tankIO_enableLed>:
TWI_RPC_FUNCTION_NOARGS	(tankIO_isInitialized, TANK_IO_isInitialized, uint8_t)

TWI_RPC_FUNCTION_NOARGS	(tankIO_buttonStatus, TANK_IO_buttonStatus, uint8_t)
TWI_RPC_FUNCTION_NOARGS	(tankIO_pressedButtons, TANK_IO_pressedButtons, uint8_t)

TWI_RPC_FUNCTION_VOID	(tankIO_enableLed, TANK_IO_enableLed, SingleLed)
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <tankIO_enableLed+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	69 83       	std	Y+1, r22	; 0x01
    1064:	7a 83       	std	Y+2, r23	; 0x02
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	9e 01       	movw	r18, r28
    106a:	2f 5f       	subi	r18, 0xFF	; 255
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	43 e0       	ldi	r20, 0x03	; 3
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	80 91 69 01 	lds	r24, 0x0169
    1076:	64 ea       	ldi	r22, 0xA4	; 164
    1078:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
    107c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <tankIO_reset>:
#endif
#define TWI_DEVICE tank_IO

#include <kernel/TWI/twi_rpc_client.h>

TWI_RPC_FUNCTION_NOTIFY	(tankIO_reset, TANK_IO_reset)
    108c:	80 91 69 01 	lds	r24, 0x0169
    1090:	60 ea       	ldi	r22, 0xA0	; 160
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	0e 94 bd 06 	call	0xd7a	; 0xd7a <twi_rpc_oneway>
    109c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    10a0:	08 95       	ret

000010a2 <twi_rpc_pseudo_oneway>:

void twi_rpc_pseudo_oneway(TWIDevice device, byte operation, TWIBuffer parameters) {
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	18 2f       	mov	r17, r24
    10a8:	86 2f       	mov	r24, r22
    10aa:	ba 01       	movw	r22, r20
    10ac:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
    10ae:	0e 94 ab 00 	call	0x156	; 0x156 <fillSendBuffer>
	twiSendReceive(device, sendBuffer, (TWIBuffer) { 0, 0 });
    10b2:	40 91 6a 01 	lds	r20, 0x016A
    10b6:	50 91 6b 01 	lds	r21, 0x016B
    10ba:	60 91 6c 01 	lds	r22, 0x016C
    10be:	70 91 6d 01 	lds	r23, 0x016D
    10c2:	81 2f       	mov	r24, r17
    10c4:	00 e0       	ldi	r16, 0x00	; 0
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	98 01       	movw	r18, r16
    10ca:	0e 94 2b 06 	call	0xc56	; 0xc56 <twiSendReceive>
}
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <bgx1_setIllumination>:

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setIllumination, CMD_SetIllumination, uint16_t)
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <bgx1_setIllumination+0x6>
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	9e 01       	movw	r18, r28
    10e4:	2f 5f       	subi	r18, 0xFF	; 255
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	42 e0       	ldi	r20, 0x02	; 2
    10ea:	50 e0       	ldi	r21, 0x00	; 0
    10ec:	80 91 68 01 	lds	r24, 0x0168
    10f0:	63 e4       	ldi	r22, 0x43	; 67
    10f2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    10f6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <bgx1_termScroll>:
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	9e 01       	movw	r18, r28
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	80 91 68 01 	lds	r24, 0x0168
    111e:	62 e3       	ldi	r22, 0x32	; 50
    1120:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    1124:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <bgx1_termGoto_base>:
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <bgx1_termGoto_base+0x6>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	9e 01       	movw	r18, r28
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	42 e0       	ldi	r20, 0x02	; 2
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	80 91 68 01 	lds	r24, 0x0168
    114c:	61 e3       	ldi	r22, 0x31	; 49
    114e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    1152:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <bgx1_termClear>:
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)

// Terminal
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
    1160:	80 91 68 01 	lds	r24, 0x0168
    1164:	60 e3       	ldi	r22, 0x30	; 48
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	a9 01       	movw	r20, r18
    116c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    1170:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1174:	08 95       	ret

00001176 <bgx1_selectFont>:
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	9e 01       	movw	r18, r28
    1184:	2f 5f       	subi	r18, 0xFF	; 255
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	80 91 68 01 	lds	r24, 0x0168
    1190:	65 e1       	ldi	r22, 0x15	; 21
    1192:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    1196:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <bgx1_fillAll>:
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	9e 01       	movw	r18, r28
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	80 91 68 01 	lds	r24, 0x0168
    11bc:	62 e1       	ldi	r22, 0x12	; 18
    11be:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    11c2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <bgx1_mode>:
// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	9e 01       	movw	r18, r28
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	80 91 68 01 	lds	r24, 0x0168
    11e8:	61 e1       	ldi	r22, 0x11	; 17
    11ea:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    11ee:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <bgx1_move_base>:

// Indicates, that a whole string with variable length has to be sent.
typedef char StringArg;

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <bgx1_move_base+0x6>
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	9a 83       	std	Y+2, r25	; 0x02
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	9e 01       	movw	r18, r28
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	42 e0       	ldi	r20, 0x02	; 2
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	80 91 68 01 	lds	r24, 0x0168
    1216:	60 e1       	ldi	r22, 0x10	; 16
    1218:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    121c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <bgx1_setStatus>:

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_setStatus, CMD_SetStatus, uint8_t)
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	9e 01       	movw	r18, r28
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	80 91 68 01 	lds	r24, 0x0168
    1244:	63 e0       	ldi	r22, 0x03	; 3
    1246:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    124a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <bgx1_reset>:
  
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
    1256:	80 91 68 01 	lds	r24, 0x0168
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	0e 94 51 08 	call	0x10a2	; 0x10a2 <twi_rpc_pseudo_oneway>
    1266:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    126a:	08 95       	ret

0000126c <twi_rpc>:

void twi_rpc(TWIDevice device, byte operation, TWIBuffer parameters, TWIBuffer resultBuffer) {
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	d8 2e       	mov	r13, r24
    1278:	86 2f       	mov	r24, r22
    127a:	ba 01       	movw	r22, r20
    127c:	a9 01       	movw	r20, r18
	fillSendBuffer(operation, parameters);
    127e:	0e 94 ab 00 	call	0x156	; 0x156 <fillSendBuffer>
	twiSendReceive(device, sendBuffer, resultBuffer);
    1282:	40 91 6a 01 	lds	r20, 0x016A
    1286:	50 91 6b 01 	lds	r21, 0x016B
    128a:	60 91 6c 01 	lds	r22, 0x016C
    128e:	70 91 6d 01 	lds	r23, 0x016D
    1292:	8d 2d       	mov	r24, r13
    1294:	98 01       	movw	r18, r16
    1296:	87 01       	movw	r16, r14
    1298:	0e 94 2b 06 	call	0xc56	; 0xc56 <twiSendReceive>
}
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	08 95       	ret

000012a8 <tankIO_pressedButtons>:
TWI_RPC_FUNCTION_NOARGS	(tankIO_isInitialized, TANK_IO_isInitialized, uint8_t)

TWI_RPC_FUNCTION_NOARGS	(tankIO_buttonStatus, TANK_IO_buttonStatus, uint8_t)
TWI_RPC_FUNCTION_NOARGS	(tankIO_pressedButtons, TANK_IO_pressedButtons, uint8_t)
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	7e 01       	movw	r14, r28
    12bc:	08 94       	sec
    12be:	e1 1c       	adc	r14, r1
    12c0:	f1 1c       	adc	r15, r1
    12c2:	01 e0       	ldi	r16, 0x01	; 1
    12c4:	10 e0       	ldi	r17, 0x00	; 0
    12c6:	80 91 69 01 	lds	r24, 0x0169
    12ca:	63 ea       	ldi	r22, 0xA3	; 163
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    12d6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	08 95       	ret

000012ec <tankIO_buttonStatus>:
#include <kernel/TWI/twi_rpc_client.h>

TWI_RPC_FUNCTION_NOTIFY	(tankIO_reset, TANK_IO_reset)
TWI_RPC_FUNCTION_NOARGS	(tankIO_isInitialized, TANK_IO_isInitialized, uint8_t)

TWI_RPC_FUNCTION_NOARGS	(tankIO_buttonStatus, TANK_IO_buttonStatus, uint8_t)
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	0f 92       	push	r0
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	7e 01       	movw	r14, r28
    1300:	08 94       	sec
    1302:	e1 1c       	adc	r14, r1
    1304:	f1 1c       	adc	r15, r1
    1306:	01 e0       	ldi	r16, 0x01	; 1
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	80 91 69 01 	lds	r24, 0x0169
    130e:	62 ea       	ldi	r22, 0xA2	; 162
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    131a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <tankIO_isInitialized>:
#define TWI_DEVICE tank_IO

#include <kernel/TWI/twi_rpc_client.h>

TWI_RPC_FUNCTION_NOTIFY	(tankIO_reset, TANK_IO_reset)
TWI_RPC_FUNCTION_NOARGS	(tankIO_isInitialized, TANK_IO_isInitialized, uint8_t)
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	0f 92       	push	r0
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	7e 01       	movw	r14, r28
    1344:	08 94       	sec
    1346:	e1 1c       	adc	r14, r1
    1348:	f1 1c       	adc	r15, r1
    134a:	01 e0       	ldi	r16, 0x01	; 1
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	80 91 69 01 	lds	r24, 0x0169
    1352:	61 ea       	ldi	r22, 0xA1	; 161
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    135e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret

00001374 <tankIO_wait>:
TWI_RPC_FUNCTION_VOID	(tankIO_blinkByte, TANK_IO_blinkByte, BlinkByteParam)

// Put header and implementation here to avoid additional .c-file.
#ifdef _KERNEL_
	void tankIO_wait() {
		while (!tankIO_isInitialized() != TANK_IO_INITIALIZED) {
    1374:	0e 94 98 09 	call	0x1330	; 0x1330 <tankIO_isInitialized>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1378:	8f e7       	ldi	r24, 0x7F	; 127
    137a:	98 e3       	ldi	r25, 0x38	; 56
    137c:	a1 e0       	ldi	r26, 0x01	; 1
    137e:	81 50       	subi	r24, 0x01	; 1
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	a0 40       	sbci	r26, 0x00	; 0
    1384:	e1 f7       	brne	.-8      	; 0x137e <tankIO_wait+0xa>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <tankIO_wait+0x14>
    1388:	00 00       	nop
    138a:	f4 cf       	rjmp	.-24     	; 0x1374 <tankIO_wait>

0000138c <bgx1_syncInterface>:
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
TWI_RPC_FUNCTION		(bgx1_syncInterface, CMD_SyncInterface, uint8_t, uint8_t)
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	00 d0       	rcall	.+0      	; 0x139a <bgx1_syncInterface+0xe>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	9e 01       	movw	r18, r28
    13a2:	2e 5f       	subi	r18, 0xFE	; 254
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	7e 01       	movw	r14, r28
    13ac:	08 94       	sec
    13ae:	e1 1c       	adc	r14, r1
    13b0:	f1 1c       	adc	r15, r1
    13b2:	01 e0       	ldi	r16, 0x01	; 1
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	80 91 68 01 	lds	r24, 0x0168
    13ba:	62 e4       	ldi	r22, 0x42	; 66
    13bc:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    13c0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	08 95       	ret

000013d8 <bgx1_getAnalog_base>:
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
TWI_RPC_FUNCTION		(bgx1_getAnalog_base, CMD_GetAnalog, uint8_t, uint16_t)
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <bgx1_getAnalog_base+0xe>
    13e6:	0f 92       	push	r0
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	9e 01       	movw	r18, r28
    13f0:	2d 5f       	subi	r18, 0xFD	; 253
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	7e 01       	movw	r14, r28
    13fa:	08 94       	sec
    13fc:	e1 1c       	adc	r14, r1
    13fe:	f1 1c       	adc	r15, r1
    1400:	02 e0       	ldi	r16, 0x02	; 2
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	80 91 68 01 	lds	r24, 0x0168
    1408:	61 e4       	ldi	r22, 0x41	; 65
    140a:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    140e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	9a 81       	ldd	r25, Y+2	; 0x02
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	08 95       	ret

0000142a <bgx1_syncPort_base>:
	uint8_t ddr;
	uint8_t port;
} SyncPortArgs, *PSyncPortArgs;

// IO
TWI_RPC_FUNCTION		(bgx1_syncPort_base, CMD_SyncPort, SyncPortArgs, uint8_t)
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <bgx1_syncPort_base+0xe>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	9b 83       	std	Y+3, r25	; 0x03
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	9e 01       	movw	r18, r28
    1444:	2e 5f       	subi	r18, 0xFE	; 254
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	42 e0       	ldi	r20, 0x02	; 2
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	7e 01       	movw	r14, r28
    144e:	08 94       	sec
    1450:	e1 1c       	adc	r14, r1
    1452:	f1 1c       	adc	r15, r1
    1454:	01 e0       	ldi	r16, 0x01	; 1
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	80 91 68 01 	lds	r24, 0x0168
    145c:	60 e4       	ldi	r22, 0x40	; 64
    145e:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    1462:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	08 95       	ret

0000147c <bgx1_termPrint_base>:
TWI_RPC_FUNCTION_PNOTIFY(bgx1_termClear, CMD_TermClear)
TWI_RPC_FUNCTION_PVOID	(bgx1_termGoto_base, CMD_TermGoto, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_termScroll, CMD_TermScroll, int8_t)

// The NIBObee lib receives an extra byte when executing this, don't know why
TWI_RPC_FUNCTION_VARARGS(bgx1_termPrint_base, CMD_TermPrint, StringArg, byte)
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9c 01       	movw	r18, r24
    1490:	ab 01       	movw	r20, r22
    1492:	7e 01       	movw	r14, r28
    1494:	08 94       	sec
    1496:	e1 1c       	adc	r14, r1
    1498:	f1 1c       	adc	r15, r1
    149a:	01 e0       	ldi	r16, 0x01	; 1
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	80 91 68 01 	lds	r24, 0x0168
    14a2:	63 e3       	ldi	r22, 0x33	; 51
    14a4:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    14a8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	08 95       	ret

000014be <bgx1_lineTo_base>:
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_lineTo_base, CMD_LineTo, Point, Point)
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <bgx1_lineTo_base+0xe>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <bgx1_lineTo_base+0x10>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	9e 01       	movw	r18, r28
    14d8:	2d 5f       	subi	r18, 0xFD	; 253
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	42 e0       	ldi	r20, 0x02	; 2
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	7e 01       	movw	r14, r28
    14e2:	08 94       	sec
    14e4:	e1 1c       	adc	r14, r1
    14e6:	f1 1c       	adc	r15, r1
    14e8:	02 e0       	ldi	r16, 0x02	; 2
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	80 91 68 01 	lds	r24, 0x0168
    14f0:	6b e1       	ldi	r22, 0x1B	; 27
    14f2:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    14f6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	08 95       	ret

00001514 <bgx1_embeddedImage>:
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
TWI_RPC_FUNCTION		(bgx1_embeddedImage, CMD_EmbeddedImage, uint8_t, Point)
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <bgx1_embeddedImage+0xe>
    1522:	0f 92       	push	r0
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	9e 01       	movw	r18, r28
    152c:	2d 5f       	subi	r18, 0xFD	; 253
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	7e 01       	movw	r14, r28
    1536:	08 94       	sec
    1538:	e1 1c       	adc	r14, r1
    153a:	f1 1c       	adc	r15, r1
    153c:	02 e0       	ldi	r16, 0x02	; 2
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	80 91 68 01 	lds	r24, 0x0168
    1544:	6a e1       	ldi	r22, 0x1A	; 26
    1546:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    154a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	08 95       	ret

00001566 <bgx1_drawBitmap_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_drawBitmap_base, CMD_Bitmap, BitmapArguments, Point)
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <bgx1_drawBitmap_base+0xe>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	9c 01       	movw	r18, r24
    157a:	ab 01       	movw	r20, r22
    157c:	7e 01       	movw	r14, r28
    157e:	08 94       	sec
    1580:	e1 1c       	adc	r14, r1
    1582:	f1 1c       	adc	r15, r1
    1584:	02 e0       	ldi	r16, 0x02	; 2
    1586:	10 e0       	ldi	r17, 0x00	; 0
    1588:	80 91 68 01 	lds	r24, 0x0168
    158c:	69 e1       	ldi	r22, 0x19	; 25
    158e:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    1592:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	08 95       	ret

000015ac <bgx1_box_base>:
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_box_base, CMD_Box, Rect, Point)
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <bgx1_box_base+0xe>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <bgx1_box_base+0x10>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	9e 01       	movw	r18, r28
    15c6:	2d 5f       	subi	r18, 0xFD	; 253
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	42 e0       	ldi	r20, 0x02	; 2
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	7e 01       	movw	r14, r28
    15d0:	08 94       	sec
    15d2:	e1 1c       	adc	r14, r1
    15d4:	f1 1c       	adc	r15, r1
    15d6:	02 e0       	ldi	r16, 0x02	; 2
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	80 91 68 01 	lds	r24, 0x0168
    15de:	68 e1       	ldi	r22, 0x18	; 24
    15e0:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    15e4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	08 95       	ret

00001602 <bgx1_vLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
TWI_RPC_FUNCTION		(bgx1_vLine, CMD_VLine, uint8_t, Point)
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	df 93       	push	r29
    160c:	cf 93       	push	r28
    160e:	00 d0       	rcall	.+0      	; 0x1610 <bgx1_vLine+0xe>
    1610:	0f 92       	push	r0
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	9e 01       	movw	r18, r28
    161a:	2d 5f       	subi	r18, 0xFD	; 253
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	7e 01       	movw	r14, r28
    1624:	08 94       	sec
    1626:	e1 1c       	adc	r14, r1
    1628:	f1 1c       	adc	r15, r1
    162a:	02 e0       	ldi	r16, 0x02	; 2
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	80 91 68 01 	lds	r24, 0x0168
    1632:	67 e1       	ldi	r22, 0x17	; 23
    1634:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    1638:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	08 95       	ret

00001654 <bgx1_hLine>:
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_selectFont, CMD_SelectFont, uint8_t)
TWI_RPC_FUNCTION		(bgx1_hLine, CMD_HLine, uint8_t, Point)
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <bgx1_hLine+0xe>
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	9e 01       	movw	r18, r28
    166c:	2d 5f       	subi	r18, 0xFD	; 253
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	7e 01       	movw	r14, r28
    1676:	08 94       	sec
    1678:	e1 1c       	adc	r14, r1
    167a:	f1 1c       	adc	r15, r1
    167c:	02 e0       	ldi	r16, 0x02	; 2
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	80 91 68 01 	lds	r24, 0x0168
    1684:	66 e1       	ldi	r22, 0x16	; 22
    1686:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    168a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	08 95       	ret

000016a6 <bgx1_textWidth_base>:
// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
TWI_RPC_FUNCTION_VARARGS(bgx1_textWidth_base, CMD_TextWidth, StringArg, uint8_t)
    16a6:	ef 92       	push	r14
    16a8:	ff 92       	push	r15
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	0f 92       	push	r0
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	9c 01       	movw	r18, r24
    16ba:	ab 01       	movw	r20, r22
    16bc:	7e 01       	movw	r14, r28
    16be:	08 94       	sec
    16c0:	e1 1c       	adc	r14, r1
    16c2:	f1 1c       	adc	r15, r1
    16c4:	01 e0       	ldi	r16, 0x01	; 1
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	80 91 68 01 	lds	r24, 0x0168
    16cc:	64 e1       	ldi	r22, 0x14	; 20
    16ce:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    16d2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	08 95       	ret

000016e8 <bgx1_print_base>:

// Display
TWI_RPC_FUNCTION_PVOID	(bgx1_move_base, CMD_Move, Point)
TWI_RPC_FUNCTION_PVOID	(bgx1_mode, CMD_Mode, uint8_t)
TWI_RPC_FUNCTION_PVOID	(bgx1_fillAll, CMD_FillAll, uint8_t)
TWI_RPC_FUNCTION_VARARGS(bgx1_print_base, CMD_Print, StringArg, Point)
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <bgx1_print_base+0xe>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	9c 01       	movw	r18, r24
    16fc:	ab 01       	movw	r20, r22
    16fe:	7e 01       	movw	r14, r28
    1700:	08 94       	sec
    1702:	e1 1c       	adc	r14, r1
    1704:	f1 1c       	adc	r15, r1
    1706:	02 e0       	ldi	r16, 0x02	; 2
    1708:	10 e0       	ldi	r17, 0x00	; 0
    170a:	80 91 68 01 	lds	r24, 0x0168
    170e:	63 e1       	ldi	r22, 0x13	; 19
    1710:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    1714:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	08 95       	ret

0000172e <bgx1_getStatus>:
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getStatus, CMD_GetStatus, uint8_t)
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	0f 92       	push	r0
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	7e 01       	movw	r14, r28
    1742:	08 94       	sec
    1744:	e1 1c       	adc	r14, r1
    1746:	f1 1c       	adc	r15, r1
    1748:	01 e0       	ldi	r16, 0x01	; 1
    174a:	10 e0       	ldi	r17, 0x00	; 0
    174c:	80 91 68 01 	lds	r24, 0x0168
    1750:	62 e0       	ldi	r22, 0x02	; 2
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    175c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	ff 90       	pop	r15
    176e:	ef 90       	pop	r14
    1770:	08 95       	ret

00001772 <bgx1_getVersion_base>:
  CMD_INVALID         = 0xff 
};

// System
TWI_RPC_FUNCTION_PNOTIFY(bgx1_reset, CMD_Reset)
TWI_RPC_FUNCTION_NOARGS	(bgx1_getVersion_base, CMD_GetVersion, uint16_t)
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <bgx1_getVersion_base+0xe>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	7e 01       	movw	r14, r28
    1786:	08 94       	sec
    1788:	e1 1c       	adc	r14, r1
    178a:	f1 1c       	adc	r15, r1
    178c:	02 e0       	ldi	r16, 0x02	; 2
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	80 91 68 01 	lds	r24, 0x0168
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	a9 01       	movw	r20, r18
    179c:	0e 94 36 09 	call	0x126c	; 0x126c <twi_rpc>
    17a0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <WAIT_FOR_TWI>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	08 95       	ret

000017ba <before_timer>:
#define _BASE_AFTER_KERNEL_

// This function can be implemented in user code to have some initialization-code 
// before the timer starts running.
void before_timer() __attribute__((weak));
void before_timer() {}
    17ba:	08 95       	ret

000017bc <init_kernel>:

// TODO put some common init-parts into the AntonLib-kernel
void init_kernel() {
	// Power saving settings
	ACSR |= _BV(ACD); // Turn off Analog Comparator - not needed
    17bc:	80 b7       	in	r24, 0x30	; 48
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	80 bf       	out	0x30, r24	; 48
	PRR0 |= _BV(PRTIM0) | _BV(PRTIM2); // Turn off unused timers
    17c2:	e4 e6       	ldi	r30, 0x64	; 100
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 66       	ori	r24, 0x60	; 96
    17ca:	80 83       	st	Z, r24
	// BOD - TODO configure?
	
	// Final initialization-sequence.
	// AFTER other modules modified __default_stack_size and __main_process_additional_memory
	INITIALIZE_SCHEDULER
	before_timer(); // AFTER all other initialization and BEFORE starting the scheduler
    17cc:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <before_timer>
	#ifdef TIMER_INTERRUPT_A
	enableTimerInterrupt(CLOCKTIMER_A);
    17d0:	80 ee       	ldi	r24, 0xE0	; 224
    17d2:	92 e0       	ldi	r25, 0x02	; 2
    17d4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <enableTimerInterrupt>
	#endif
	#ifdef TIMER_INTERRUPT_B
	enableTimerInterrupt(CLOCKTIMER_B);
	#endif
	sei();
    17d8:	78 94       	sei
}
    17da:	08 95       	ret

000017dc <testStatus>:

void testStatus() {
    17dc:	6f 92       	push	r6
    17de:	7f 92       	push	r7
    17e0:	8f 92       	push	r8
    17e2:	9f 92       	push	r9
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
	while (1) {
		byte btns = tankIO_buttonStatus();
    17f8:	0e 94 76 09 	call	0x12ec	; 0x12ec <tankIO_buttonStatus>
		uint16_t buttons = AS_WORD(btns << 3);
    17fc:	c8 2f       	mov	r28, r24
    17fe:	d0 e0       	ldi	r29, 0x00	; 0
		tankIO_setLeds((MaskedLeds) { LEDS_LEFT, buttons});
    1800:	21 e0       	ldi	r18, 0x01	; 1
    1802:	e2 2e       	mov	r14, r18
    1804:	f1 2c       	mov	r15, r1
    1806:	8e 01       	movw	r16, r28
    1808:	c8 01       	movw	r24, r16
    180a:	b7 01       	movw	r22, r14
    180c:	0e 94 a8 07 	call	0xf50	; 0xf50 <tankIO_setLeds>
		tankIO_setLeds((MaskedLeds) { LEDS_MIDDLE, buttons});
    1810:	93 e0       	ldi	r25, 0x03	; 3
    1812:	a9 2e       	mov	r10, r25
    1814:	b1 2c       	mov	r11, r1
    1816:	6e 01       	movw	r12, r28
    1818:	c6 01       	movw	r24, r12
    181a:	b5 01       	movw	r22, r10
    181c:	0e 94 a8 07 	call	0xf50	; 0xf50 <tankIO_setLeds>
		tankIO_setLeds((MaskedLeds) { LEDS_RIGHT, buttons});
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	68 2e       	mov	r6, r24
    1824:	71 2c       	mov	r7, r1
    1826:	4e 01       	movw	r8, r28
    1828:	c4 01       	movw	r24, r8
    182a:	b3 01       	movw	r22, r6
    182c:	0e 94 a8 07 	call	0xf50	; 0xf50 <tankIO_setLeds>
    1830:	e3 cf       	rjmp	.-58     	; 0x17f8 <testStatus+0x1c>

00001832 <testPressed>:
	}
}

void testPressed() {
    1832:	6f 92       	push	r6
    1834:	7f 92       	push	r7
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
	while (1) {
		byte btns = tankIO_pressedButtons();
    184e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <tankIO_pressedButtons>
		uint16_t buttons = AS_WORD(btns << 3);
    1852:	c8 2f       	mov	r28, r24
    1854:	d0 e0       	ldi	r29, 0x00	; 0
		tankIO_setLeds((MaskedLeds) { LEDS_LEFT, buttons});
    1856:	51 e0       	ldi	r21, 0x01	; 1
    1858:	e5 2e       	mov	r14, r21
    185a:	f1 2c       	mov	r15, r1
    185c:	8e 01       	movw	r16, r28
    185e:	c8 01       	movw	r24, r16
    1860:	b7 01       	movw	r22, r14
    1862:	0e 94 a8 07 	call	0xf50	; 0xf50 <tankIO_setLeds>
		tankIO_setLeds((MaskedLeds) { LEDS_MIDDLE, buttons});
    1866:	43 e0       	ldi	r20, 0x03	; 3
    1868:	a4 2e       	mov	r10, r20
    186a:	b1 2c       	mov	r11, r1
    186c:	6e 01       	movw	r12, r28
    186e:	c6 01       	movw	r24, r12
    1870:	b5 01       	movw	r22, r10
    1872:	0e 94 a8 07 	call	0xf50	; 0xf50 <tankIO_setLeds>
		tankIO_setLeds((MaskedLeds) { LEDS_RIGHT, buttons});
    1876:	32 e0       	ldi	r19, 0x02	; 2
    1878:	63 2e       	mov	r6, r19
    187a:	71 2c       	mov	r7, r1
    187c:	4e 01       	movw	r8, r28
    187e:	c4 01       	movw	r24, r8
    1880:	b3 01       	movw	r22, r6
    1882:	0e 94 a8 07 	call	0xf50	; 0xf50 <tankIO_setLeds>
    1886:	e3 cf       	rjmp	.-58     	; 0x184e <testPressed+0x1c>

00001888 <test_communication_raw>:
	test_communication_raw();
}

void test_communication_raw() {
	
	DDRC = 0xff;
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xff & ~(1 << PORTC0);
    188c:	8e ef       	ldi	r24, 0xFE	; 254
    188e:	88 b9       	out	0x08, r24	; 8
	
	uint8_t b = 0;
    1890:	80 e0       	ldi	r24, 0x00	; 0
	while (1) {
		delay(2000);
		if (b)
			PORTC = 0xff & ~(1 << PORTC0);
		else
			PORTC = 0xff & ~(1 << PORTC1);
    1892:	3d ef       	ldi	r19, 0xFD	; 253
	uint8_t b = 0;
	
	while (1) {
		delay(2000);
		if (b)
			PORTC = 0xff & ~(1 << PORTC0);
    1894:	2e ef       	ldi	r18, 0xFE	; 254
		else
			PORTC = 0xff & ~(1 << PORTC1);
		b = !b;
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	4f ef       	ldi	r20, 0xFF	; 255
    189a:	51 e1       	ldi	r21, 0x11	; 17
    189c:	6a e7       	ldi	r22, 0x7A	; 122
    189e:	41 50       	subi	r20, 0x01	; 1
    18a0:	50 40       	sbci	r21, 0x00	; 0
    18a2:	60 40       	sbci	r22, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <test_communication_raw+0x16>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <test_communication_raw+0x20>
    18a8:	00 00       	nop
	
	uint8_t b = 0;
	
	while (1) {
		delay(2000);
		if (b)
    18aa:	88 23       	and	r24, r24
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <test_communication_raw+0x2a>
			PORTC = 0xff & ~(1 << PORTC0);
    18ae:	28 b9       	out	0x08, r18	; 8
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <test_communication_raw+0x2c>
		else
			PORTC = 0xff & ~(1 << PORTC1);
    18b2:	38 b9       	out	0x08, r19	; 8
		b = !b;
    18b4:	89 27       	eor	r24, r25
	}
    18b6:	f0 cf       	rjmp	.-32     	; 0x1898 <test_communication_raw+0x10>

000018b8 <main>:
void test_communication_raw();

int main() {
	// testStatus();
	// testPressed();
	test_communication_raw();
    18b8:	0e 94 44 0c 	call	0x1888	; 0x1888 <test_communication_raw>
}
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	08 95       	ret

000018c2 <regulateSpeed>:

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
}

void regulateSpeed(PSmoothMotor motor, uint16_t speed, MotorDirection direction) {
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
    18d0:	8b 01       	movw	r16, r22
    18d2:	7a 01       	movw	r14, r20
	mutex_lock(motor->mutex);
    18d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    18d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    18d8:	0e 94 0c 03 	call	0x618	; 0x618 <mutex_lock>
	motor->targetSpeed = speed;
    18dc:	1f 83       	std	Y+7, r17	; 0x07
    18de:	0e 83       	std	Y+6, r16	; 0x06
	motor->targetDirection = direction;
    18e0:	f9 86       	std	Y+9, r15	; 0x09
    18e2:	e8 86       	std	Y+8, r14	; 0x08
	if (!motor->tickRunning) {
    18e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	39 f4       	brne	.+14     	; 0x18fa <regulateSpeed+0x38>
		motor_smooth_start_tick(motor);
    18ec:	ce 01       	movw	r24, r28
    18ee:	0e 94 0e 04 	call	0x81c	; 0x81c <motor_smooth_start_tick>
		motor->tickRunning = TRUE;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	9b 87       	std	Y+11, r25	; 0x0b
    18f8:	8a 87       	std	Y+10, r24	; 0x0a
	}
	mutex_release(motor->mutex);
    18fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    18fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    18fe:	0e 94 1a 03 	call	0x634	; 0x634 <mutex_release>
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	1f 91       	pop	r17
    1908:	0f 91       	pop	r16
    190a:	ff 90       	pop	r15
    190c:	ef 90       	pop	r14
    190e:	08 95       	ret

00001910 <regulateStopMotor>:

// 'Imported' from motor.c. Avoided adding internal-header just for this function.
uint16_t motor_toUnsignedSpeed(int16_t speed);

void regulateStopMotor(PSmoothMotor motor) {
	regulateSpeed(motor, 0, MOTOR_STOPPED);
    1910:	60 e0       	ldi	r22, 0x00	; 0
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	42 e0       	ldi	r20, 0x02	; 2
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <regulateSpeed>
}
    191c:	08 95       	ret

0000191e <regulateSpeedForward>:
	}
	mutex_release(motor->mutex);
}

void regulateSpeedForward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, FORWARD);
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <regulateSpeed>
}
    1926:	08 95       	ret

00001928 <regulateSpeedBackward>:

void regulateSpeedBackward(PSmoothMotor motor, uint16_t speed) {
	regulateSpeed(motor, speed, BACKWARD);
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <regulateSpeed>
}
    1930:	08 95       	ret

00001932 <regulateDirSpeed>:

void regulateDirSpeed(PSmoothMotor motor, int16_t speed) {
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
    193c:	8b 01       	movw	r16, r22
	if (speed == 0) {
    193e:	61 15       	cp	r22, r1
    1940:	71 05       	cpc	r23, r1
    1942:	19 f4       	brne	.+6      	; 0x194a <regulateDirSpeed+0x18>
		regulateStopMotor(motor);
    1944:	0e 94 88 0c 	call	0x1910	; 0x1910 <regulateStopMotor>
		return;
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <regulateDirSpeed+0x32>
	}
	regulateSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    194a:	cb 01       	movw	r24, r22
    194c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <motor_toUnsignedSpeed>
    1950:	bc 01       	movw	r22, r24
    1952:	41 2f       	mov	r20, r17
    1954:	40 95       	com	r20
    1956:	44 1f       	adc	r20, r20
    1958:	44 27       	eor	r20, r20
    195a:	44 1f       	adc	r20, r20
    195c:	ce 01       	movw	r24, r28
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <regulateSpeed>
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	08 95       	ret

0000196e <motor_smooth_needsTick>:

int motor_smooth_needsTick(PSmoothMotor motor) {
    196e:	fc 01       	movw	r30, r24
	return motor->targetSpeed != motor->currentSpeed ||
    1970:	26 81       	ldd	r18, Z+6	; 0x06
    1972:	37 81       	ldd	r19, Z+7	; 0x07
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	28 17       	cp	r18, r24
    197a:	39 07       	cpc	r19, r25
    197c:	61 f4       	brne	.+24     	; 0x1996 <motor_smooth_needsTick+0x28>
    197e:	21 e0       	ldi	r18, 0x01	; 1
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 85       	ldd	r20, Z+8	; 0x08
    1984:	51 85       	ldd	r21, Z+9	; 0x09
    1986:	84 81       	ldd	r24, Z+4	; 0x04
    1988:	95 81       	ldd	r25, Z+5	; 0x05
    198a:	48 17       	cp	r20, r24
    198c:	59 07       	cpc	r21, r25
    198e:	29 f4       	brne	.+10     	; 0x199a <motor_smooth_needsTick+0x2c>
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <motor_smooth_needsTick+0x2c>
    1996:	21 e0       	ldi	r18, 0x01	; 1
    1998:	30 e0       	ldi	r19, 0x00	; 0
		motor->targetDirection != motor->currentDirection;
}
    199a:	c9 01       	movw	r24, r18
    199c:	08 95       	ret

0000199e <motor_smooth_tick>:

void motor_smooth_tick(PSmoothMotor motor) {
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ec 01       	movw	r28, r24
	mutex_lock(motor->mutex);
    19a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    19a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    19a8:	0e 94 0c 03 	call	0x618	; 0x618 <mutex_lock>
	
	// Make sure to not do this if not needed...
	if (motor_smooth_needsTick(motor)) {
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 94 b7 0c 	call	0x196e	; 0x196e <motor_smooth_needsTick>
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <motor_smooth_tick+0x1a>
    19b6:	44 c0       	rjmp	.+136    	; 0x1a40 <motor_smooth_tick+0xa2>
		// Load all values into registers.
		MotorDirection targetDir = motor->targetDirection;
    19b8:	48 85       	ldd	r20, Y+8	; 0x08
    19ba:	59 85       	ldd	r21, Y+9	; 0x09
		uint16_t currentSpeed = motor->currentSpeed;
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	9b 81       	ldd	r25, Y+3	; 0x03
		uint16_t targetSpeed = motor->targetSpeed;
    19c0:	6e 81       	ldd	r22, Y+6	; 0x06
    19c2:	7f 81       	ldd	r23, Y+7	; 0x07
		uint16_t adjustment = motor->adjustmentStep;
    19c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    19c6:	3d 85       	ldd	r19, Y+13	; 0x0d
	
		if (motor->currentDirection != targetDir) {
    19c8:	ec 81       	ldd	r30, Y+4	; 0x04
    19ca:	fd 81       	ldd	r31, Y+5	; 0x05
    19cc:	e4 17       	cp	r30, r20
    19ce:	f5 07       	cpc	r31, r21
    19d0:	79 f0       	breq	.+30     	; 0x19f0 <motor_smooth_tick+0x52>
			// Slowing down until we can change the direction.
			if (currentSpeed < adjustment) {
    19d2:	82 17       	cp	r24, r18
    19d4:	93 07       	cpc	r25, r19
    19d6:	f8 f4       	brcc	.+62     	; 0x1a16 <motor_smooth_tick+0x78>
				// Reached zero. Now we either finished stopping,
				// or can continue in the other direction.
				currentSpeed = motor->motor->minValue;
    19d8:	e8 81       	ld	r30, Y
    19da:	f9 81       	ldd	r31, Y+1	; 0x01
    19dc:	65 81       	ldd	r22, Z+5	; 0x05
    19de:	76 81       	ldd	r23, Z+6	; 0x06
				if (targetDir != MOTOR_STOPPED)
    19e0:	42 30       	cpi	r20, 0x02	; 2
    19e2:	51 05       	cpc	r21, r1
    19e4:	11 f0       	breq	.+4      	; 0x19ea <motor_smooth_tick+0x4c>
					// Avoid stopping the motor when changing direction.
					currentSpeed++;
    19e6:	6f 5f       	subi	r22, 0xFF	; 255
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
				motor->currentDirection = targetDir;
    19ea:	5d 83       	std	Y+5, r21	; 0x05
    19ec:	4c 83       	std	Y+4, r20	; 0x04
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <motor_smooth_tick+0x7e>
			} else {
				currentSpeed -= adjustment;
			}
		} else {
			// Going in the correct direction already.
			if (currentSpeed < targetSpeed) { // Speeding up
    19f0:	86 17       	cp	r24, r22
    19f2:	97 07       	cpc	r25, r23
    19f4:	50 f4       	brcc	.+20     	; 0x1a0a <motor_smooth_tick+0x6c>
				if (targetSpeed - currentSpeed < adjustment) {
    19f6:	ab 01       	movw	r20, r22
    19f8:	48 1b       	sub	r20, r24
    19fa:	59 0b       	sbc	r21, r25
    19fc:	42 17       	cp	r20, r18
    19fe:	53 07       	cpc	r21, r19
    1a00:	68 f0       	brcs	.+26     	; 0x1a1c <motor_smooth_tick+0x7e>
					currentSpeed = targetSpeed;
				} else {
					currentSpeed += adjustment;
    1a02:	b9 01       	movw	r22, r18
    1a04:	68 0f       	add	r22, r24
    1a06:	79 1f       	adc	r23, r25
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <motor_smooth_tick+0x7e>
				}
			} else { // Slowing down
				if (currentSpeed - targetSpeed < adjustment) {
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	46 1b       	sub	r20, r22
    1a0e:	57 0b       	sbc	r21, r23
    1a10:	42 17       	cp	r20, r18
    1a12:	53 07       	cpc	r21, r19
    1a14:	18 f0       	brcs	.+6      	; 0x1a1c <motor_smooth_tick+0x7e>
					currentSpeed = targetSpeed;
				} else {
					currentSpeed -= adjustment;
    1a16:	bc 01       	movw	r22, r24
    1a18:	62 1b       	sub	r22, r18
    1a1a:	73 0b       	sbc	r23, r19
				}
			}
		}
	
		// After the calculations, update the actual value!
		motor->currentSpeed = currentSpeed;
    1a1c:	7b 83       	std	Y+3, r23	; 0x03
    1a1e:	6a 83       	std	Y+2, r22	; 0x02
		setSpeed(motor->motor, motor->currentSpeed, motor->currentDirection);
    1a20:	4c 81       	ldd	r20, Y+4	; 0x04
    1a22:	5d 81       	ldd	r21, Y+5	; 0x05
    1a24:	88 81       	ld	r24, Y
    1a26:	99 81       	ldd	r25, Y+1	; 0x01
    1a28:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <setSpeed>
		
		// If we are ready adjusting, stop ticking.
		if (motor_smooth_needsTick(motor)) {
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	0e 94 b7 0c 	call	0x196e	; 0x196e <motor_smooth_needsTick>
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	29 f0       	breq	.+10     	; 0x1a40 <motor_smooth_tick+0xa2>
			motor_smooth_stop_tick(motor);
    1a36:	ce 01       	movw	r24, r28
    1a38:	0e 94 09 04 	call	0x812	; 0x812 <motor_smooth_stop_tick>
			motor->tickRunning = FALSE;
    1a3c:	1b 86       	std	Y+11, r1	; 0x0b
    1a3e:	1a 86       	std	Y+10, r1	; 0x0a
		}
	}		
	mutex_release(motor->mutex);
    1a40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a44:	0e 94 1a 03 	call	0x634	; 0x634 <mutex_release>
}
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <stopMotor>:
		speed = motor->maxValue;
	}
	setTimerCompareValue(motor->pwmTimer, speed);
}

void stopMotor(PMotor motor) {
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	ec 01       	movw	r28, r24
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1a54:	88 81       	ld	r24, Y
    1a56:	83 ff       	sbrs	r24, 3
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <stopMotor+0x1e>
		// Also set direction-pins to zero.
		setPinZero(motor->direction);
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
		setPinZero(Dir2(motor));
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
    1a6a:	1c c0       	rjmp	.+56     	; 0x1aa4 <stopMotor+0x56>
	} else {
		disableOutputCompare(motor->pwmTimer);
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	0e 94 09 10 	call	0x2012	; 0x2012 <disableOutputCompare>
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

static void setMotorCompareValue(PMotor motor, uint16_t speed) {
	if (motor->flags & MOTOR_INVERSE_SPEED) speed = 0xFFFF - speed;
    1a74:	88 81       	ld	r24, Y
    1a76:	81 fd       	sbrc	r24, 1
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <stopMotor+0x32>
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <stopMotor+0x36>
    1a80:	6f ef       	ldi	r22, 0xFF	; 255
    1a82:	7f ef       	ldi	r23, 0xFF	; 255
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	68 17       	cp	r22, r24
    1a8a:	79 07       	cpc	r23, r25
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <stopMotor+0x42>
    1a8e:	bc 01       	movw	r22, r24
		speed = motor->minValue;
	}
	if (speed > motor->maxValue) {
		speed = motor->maxValue;
	}
	setTimerCompareValue(motor->pwmTimer, speed);
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	2f 81       	ldd	r18, Y+7	; 0x07
    1a96:	38 85       	ldd	r19, Y+8	; 0x08
    1a98:	26 17       	cp	r18, r22
    1a9a:	37 07       	cpc	r19, r23
    1a9c:	08 f4       	brcc	.+2      	; 0x1aa0 <stopMotor+0x52>
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	0e 94 0e 10 	call	0x201c	; 0x201c <setTimerCompareValue>
		setPinZero(Dir2(motor));
	} else {
		disableOutputCompare(motor->pwmTimer);
		setMotorCompareValue(motor, 0);
	}
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <getSpeed>:

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    1aaa:	fc 01       	movw	r30, r24
    1aac:	83 81       	ldd	r24, Z+3	; 0x03
    1aae:	94 81       	ldd	r25, Z+4	; 0x04
    1ab0:	0e 94 35 10 	call	0x206a	; 0x206a <getTimerCompareValue>
}
    1ab4:	08 95       	ret

00001ab6 <getDirection>:

MotorDirection getDirection(PMotor motor) {
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	ec 01       	movw	r28, r24
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1ac0:	28 81       	ld	r18, Y
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	23 ff       	sbrs	r18, 3
    1ac8:	12 c0       	rjmp	.+36     	; 0x1aee <getDirection+0x38>
		BOOL dir1 = readPin(motor->direction);
    1aca:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <readPin>
    1ace:	8c 01       	movw	r16, r24
		BOOL dir2 = readPin(Dir2(motor));
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <readPin>
		if (dir1 && !dir2) val = FORWARD;
    1ad8:	01 15       	cp	r16, r1
    1ada:	11 05       	cpc	r17, r1
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <getDirection+0x2e>
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	e9 f0       	breq	.+58     	; 0x1b1c <getDirection+0x66>
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <getDirection+0x32>
		else if (!dir1 && dir2) val = BACKWARD;
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	e9 f4       	brne	.+58     	; 0x1b22 <getDirection+0x6c>
    1ae8:	22 e0       	ldi	r18, 0x02	; 2
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	11 c0       	rjmp	.+34     	; 0x1b10 <getDirection+0x5a>
		else val = MOTOR_STOPPED;
	} else {
		val = readPin(motor->direction);
    1aee:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <readPin>
    1af2:	9c 01       	movw	r18, r24
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	59 f0       	breq	.+22     	; 0x1b10 <getDirection+0x5a>
    1afa:	88 81       	ld	r24, Y
    1afc:	82 ff       	sbrs	r24, 2
    1afe:	08 c0       	rjmp	.+16     	; 0x1b10 <getDirection+0x5a>
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	21 15       	cp	r18, r1
    1b06:	31 05       	cpc	r19, r1
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <getDirection+0x58>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 01       	movw	r18, r24
	return val;
}
    1b10:	c9 01       	movw	r24, r18
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	08 95       	ret
MotorDirection getDirection(PMotor motor) {
	MotorDirection val;
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
		BOOL dir1 = readPin(motor->direction);
		BOOL dir2 = readPin(Dir2(motor));
		if (dir1 && !dir2) val = FORWARD;
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	ec cf       	rjmp	.-40     	; 0x1afa <getDirection+0x44>
		else if (!dir1 && dir2) val = BACKWARD;
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	e9 cf       	rjmp	.-46     	; 0x1afa <getDirection+0x44>

00001b28 <setSpeed>:
	}
	if (val != MOTOR_STOPPED && (motor->flags & MOTOR_INVERSE_DIRECTION)) val = !val;
	return val;
}

void setSpeed(PMotor motor, uint16_t speed, MotorDirection direction) {
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	ec 01       	movw	r28, r24
    1b32:	8b 01       	movw	r16, r22
    1b34:	ba 01       	movw	r22, r20
	if (direction == MOTOR_STOPPED || speed == 0) {
    1b36:	42 30       	cpi	r20, 0x02	; 2
    1b38:	51 05       	cpc	r21, r1
    1b3a:	19 f0       	breq	.+6      	; 0x1b42 <setSpeed+0x1a>
    1b3c:	01 15       	cp	r16, r1
    1b3e:	11 05       	cpc	r17, r1
    1b40:	21 f4       	brne	.+8      	; 0x1b4a <setSpeed+0x22>
		stopMotor(motor);
    1b42:	ce 01       	movw	r24, r28
    1b44:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <stopMotor>
		return;
    1b48:	3e c0       	rjmp	.+124    	; 0x1bc6 <setSpeed+0x9e>
	}
	if (motor->flags & MOTOR_INVERSE_DIRECTION) direction = !direction;
    1b4a:	28 81       	ld	r18, Y
    1b4c:	22 ff       	sbrs	r18, 2
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <setSpeed+0x38>
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	41 15       	cp	r20, r1
    1b56:	51 05       	cpc	r21, r1
    1b58:	11 f0       	breq	.+4      	; 0x1b5e <setSpeed+0x36>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	bc 01       	movw	r22, r24
	// TODO -- this is quite an overhead to do on each speed-change...
	// maybe memorize some motor-state internally.
	if (motor->flags & MOTOR_TWO_DIR_PINS) {
    1b60:	23 ff       	sbrs	r18, 3
    1b62:	13 c0       	rjmp	.+38     	; 0x1b8a <setSpeed+0x62>
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
		if (direction == FORWARD) {
    1b68:	61 30       	cpi	r22, 0x01	; 1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	39 f4       	brne	.+14     	; 0x1b7c <setSpeed+0x54>
			setPinOne(motor->direction);
    1b6e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <setPinOne>
			setPinZero(Dir2(motor));
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
    1b7a:	0b c0       	rjmp	.+22     	; 0x1b92 <setSpeed+0x6a>
		} else {
			setPinZero(motor->direction);
    1b7c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
			setPinOne(Dir2(motor));
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	0e 94 75 0e 	call	0x1cea	; 0x1cea <setPinOne>
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <setSpeed+0x6a>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <writePin>
#include "timer.h"

#define Dir2(motor) (((PMotor2Pins) motor)->direction2)

static void setMotorCompareValue(PMotor motor, uint16_t speed) {
	if (motor->flags & MOTOR_INVERSE_SPEED) speed = 0xFFFF - speed;
    1b92:	88 81       	ld	r24, Y
    1b94:	81 ff       	sbrs	r24, 1
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <setSpeed+0x74>
    1b98:	00 95       	com	r16
    1b9a:	10 95       	com	r17
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	08 17       	cp	r16, r24
    1ba2:	19 07       	cpc	r17, r25
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <setSpeed+0x80>
    1ba6:	8c 01       	movw	r16, r24
		speed = motor->minValue;
	}
	if (speed > motor->maxValue) {
		speed = motor->maxValue;
	}
	setTimerCompareValue(motor->pwmTimer, speed);
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	2f 81       	ldd	r18, Y+7	; 0x07
    1bae:	38 85       	ldd	r19, Y+8	; 0x08
    1bb0:	b8 01       	movw	r22, r16
    1bb2:	20 17       	cp	r18, r16
    1bb4:	31 07       	cpc	r19, r17
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <setSpeed+0x92>
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 0e 10 	call	0x201c	; 0x201c <setTimerCompareValue>
		}
	} else {
		writePin(motor->direction, (BOOL) direction);
	}
	setMotorCompareValue(motor, speed);
	enableOutputCompare(motor->pwmTimer);
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <enableOutputCompare>
}
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <setSpeedForward>:

void setSpeedForward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, FORWARD);
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <setSpeed>
}
    1bd8:	08 95       	ret

00001bda <setSpeedBackward>:

void setSpeedBackward(PMotor motor, uint16_t speed) {
	setSpeed(motor, speed, BACKWARD);
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <setSpeed>
}
    1be2:	08 95       	ret

00001be4 <getDirSpeed>:

int16_t getDirSpeed(PMotor motor) {
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	8c 01       	movw	r16, r24
	MotorDirection dir = getDirection(motor);
    1bee:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <getDirection>
    1bf2:	ec 01       	movw	r28, r24
	if (dir == MOTOR_STOPPED) return 0;
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	71 f0       	breq	.+28     	; 0x1c16 <getDirSpeed+0x32>
		setMotorCompareValue(motor, 0);
	}
}

uint16_t getSpeed(PMotor motor) {
	return getTimerCompareValue(motor->pwmTimer);
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	83 81       	ldd	r24, Z+3	; 0x03
    1bfe:	94 81       	ldd	r25, Z+4	; 0x04
    1c00:	0e 94 35 10 	call	0x206a	; 0x206a <getTimerCompareValue>
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
    1c04:	9c 01       	movw	r18, r24
    1c06:	36 95       	lsr	r19
    1c08:	27 95       	ror	r18
	if (dir == BACKWARD)
    1c0a:	20 97       	sbiw	r28, 0x00	; 0
    1c0c:	31 f4       	brne	.+12     	; 0x1c1a <getDirSpeed+0x36>
		val *= -1; // Should be optimized away by compiler.
    1c0e:	30 95       	com	r19
    1c10:	21 95       	neg	r18
    1c12:	3f 4f       	sbci	r19, 0xFF	; 255
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <getDirSpeed+0x36>
	setSpeed(motor, speed, BACKWARD);
}

int16_t getDirSpeed(PMotor motor) {
	MotorDirection dir = getDirection(motor);
	if (dir == MOTOR_STOPPED) return 0;
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
	int16_t val = abs((int16_t) (getSpeed(motor) >> 1));
	if (dir == BACKWARD)
		val *= -1; // Should be optimized away by compiler.
	return val;
}
    1c1a:	c9 01       	movw	r24, r18
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <motor_toUnsignedSpeed>:

uint16_t motor_toUnsignedSpeed(int16_t speed) {
	uint16_t absv = abs(speed);
    1c26:	28 2f       	mov	r18, r24
    1c28:	39 2f       	mov	r19, r25
    1c2a:	37 ff       	sbrs	r19, 7
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <motor_toUnsignedSpeed+0xe>
    1c2e:	30 95       	com	r19
    1c30:	21 95       	neg	r18
    1c32:	3f 4f       	sbci	r19, 0xFF	; 255
	// This if-clause is just to avoid making the value smaller.
	if (!(absv & (1 << 15))) absv = absv << 1;
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
	return absv;
}
    1c38:	c9 01       	movw	r24, r18
    1c3a:	08 95       	ret

00001c3c <setDirSpeed>:

void setDirSpeed(PMotor motor, int16_t speed) {
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
    1c46:	8b 01       	movw	r16, r22
	if (speed == 0) {
    1c48:	61 15       	cp	r22, r1
    1c4a:	71 05       	cpc	r23, r1
    1c4c:	19 f4       	brne	.+6      	; 0x1c54 <setDirSpeed+0x18>
		stopMotor(motor);
    1c4e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <stopMotor>
		return;
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <setDirSpeed+0x32>
	}
	setSpeed(motor, motor_toUnsignedSpeed(speed), speed < 0 ? BACKWARD : FORWARD);
    1c54:	cb 01       	movw	r24, r22
    1c56:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <motor_toUnsignedSpeed>
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	41 2f       	mov	r20, r17
    1c5e:	40 95       	com	r20
    1c60:	44 1f       	adc	r20, r20
    1c62:	44 27       	eor	r20, r20
    1c64:	44 1f       	adc	r20, r20
    1c66:	ce 01       	movw	r24, r28
    1c68:	50 e0       	ldi	r21, 0x00	; 0
    1c6a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <setSpeed>
}
    1c6e:	df 91       	pop	r29
    1c70:	cf 91       	pop	r28
    1c72:	1f 91       	pop	r17
    1c74:	0f 91       	pop	r16
    1c76:	08 95       	ret

00001c78 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1c78:	dc 01       	movw	r26, r24
    1c7a:	14 96       	adiw	r26, 0x04	; 4
    1c7c:	ed 91       	ld	r30, X+
    1c7e:	fc 91       	ld	r31, X
    1c80:	15 97       	sbiw	r26, 0x05	; 5
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	80 83       	st	Z, r24
}
    1c86:	08 95       	ret

00001c88 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1c88:	dc 01       	movw	r26, r24
    1c8a:	14 96       	adiw	r26, 0x04	; 4
    1c8c:	ed 91       	ld	r30, X+
    1c8e:	fc 91       	ld	r31, X
    1c90:	15 97       	sbiw	r26, 0x05	; 5
    1c92:	10 82       	st	Z, r1
}
    1c94:	08 95       	ret

00001c96 <setPinOutput>:

void setPinOutput(PPin pin) {
    1c96:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1c98:	ed 91       	ld	r30, X+
    1c9a:	fc 91       	ld	r31, X
    1c9c:	11 97       	sbiw	r26, 0x01	; 1
    1c9e:	04 80       	ldd	r0, Z+4	; 0x04
    1ca0:	f5 81       	ldd	r31, Z+5	; 0x05
    1ca2:	e0 2d       	mov	r30, r0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	12 96       	adiw	r26, 0x02	; 2
    1ca8:	9c 91       	ld	r25, X
    1caa:	12 97       	sbiw	r26, 0x02	; 2
    1cac:	89 2b       	or	r24, r25
    1cae:	80 83       	st	Z, r24
}
    1cb0:	08 95       	ret

00001cb2 <setPinInput>:

void setPinInput(PPin pin) {
    1cb2:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	11 97       	sbiw	r26, 0x01	; 1
    1cba:	04 80       	ldd	r0, Z+4	; 0x04
    1cbc:	f5 81       	ldd	r31, Z+5	; 0x05
    1cbe:	e0 2d       	mov	r30, r0
    1cc0:	90 81       	ld	r25, Z
    1cc2:	12 96       	adiw	r26, 0x02	; 2
    1cc4:	8c 91       	ld	r24, X
    1cc6:	12 97       	sbiw	r26, 0x02	; 2
    1cc8:	80 95       	com	r24
    1cca:	89 23       	and	r24, r25
    1ccc:	80 83       	st	Z, r24
}
    1cce:	08 95       	ret

00001cd0 <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	ed 91       	ld	r30, X+
    1cd4:	fc 91       	ld	r31, X
    1cd6:	11 97       	sbiw	r26, 0x01	; 1
    1cd8:	60 83       	st	Z, r22
}
    1cda:	08 95       	ret

00001cdc <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    1cdc:	dc 01       	movw	r26, r24
    1cde:	12 96       	adiw	r26, 0x02	; 2
    1ce0:	ed 91       	ld	r30, X+
    1ce2:	fc 91       	ld	r31, X
    1ce4:	13 97       	sbiw	r26, 0x03	; 3
    1ce6:	80 81       	ld	r24, Z
}
    1ce8:	08 95       	ret

00001cea <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1cea:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1cec:	ed 91       	ld	r30, X+
    1cee:	fc 91       	ld	r31, X
    1cf0:	11 97       	sbiw	r26, 0x01	; 1
    1cf2:	01 90       	ld	r0, Z+
    1cf4:	f0 81       	ld	r31, Z
    1cf6:	e0 2d       	mov	r30, r0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	12 96       	adiw	r26, 0x02	; 2
    1cfc:	9c 91       	ld	r25, X
    1cfe:	12 97       	sbiw	r26, 0x02	; 2
    1d00:	89 2b       	or	r24, r25
    1d02:	80 83       	st	Z, r24
}
    1d04:	08 95       	ret

00001d06 <setPinZero>:

void setPinZero(PPin pin) {
    1d06:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	11 97       	sbiw	r26, 0x01	; 1
    1d0e:	01 90       	ld	r0, Z+
    1d10:	f0 81       	ld	r31, Z
    1d12:	e0 2d       	mov	r30, r0
    1d14:	90 81       	ld	r25, Z
    1d16:	12 96       	adiw	r26, 0x02	; 2
    1d18:	8c 91       	ld	r24, X
    1d1a:	12 97       	sbiw	r26, 0x02	; 2
    1d1c:	80 95       	com	r24
    1d1e:	89 23       	and	r24, r25
    1d20:	80 83       	st	Z, r24
}
    1d22:	08 95       	ret

00001d24 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1d24:	61 15       	cp	r22, r1
    1d26:	71 05       	cpc	r23, r1
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <writePin+0xc>
    1d2a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <setPinOne>
    1d2e:	08 95       	ret
	else setPinZero(pin);
    1d30:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <setPinZero>
    1d34:	08 95       	ret

00001d36 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1d36:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    1d38:	a0 81       	ld	r26, Z
    1d3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1d3c:	12 96       	adiw	r26, 0x02	; 2
    1d3e:	0d 90       	ld	r0, X+
    1d40:	bc 91       	ld	r27, X
    1d42:	a0 2d       	mov	r26, r0
    1d44:	8c 91       	ld	r24, X
    1d46:	92 81       	ldd	r25, Z+2	; 0x02
    1d48:	89 23       	and	r24, r25
		return TRUE;
    1d4a:	21 e0       	ldi	r18, 0x01	; 1
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <readPin+0x1e>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1d54:	c9 01       	movw	r24, r18
    1d56:	08 95       	ret

00001d58 <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
    1d58:	fc 01       	movw	r30, r24
    1d5a:	64 30       	cpi	r22, 0x04	; 4
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	48 f4       	brcc	.+18     	; 0x1d72 <setCompareMatchOutputMode+0x1a>
    1d60:	db 01       	movw	r26, r22
    1d62:	ae 55       	subi	r26, 0x5E	; 94
    1d64:	be 4f       	sbci	r27, 0xFE	; 254
    1d66:	2c 91       	ld	r18, X
    1d68:	6a 55       	subi	r22, 0x5A	; 90
    1d6a:	7e 4f       	sbci	r23, 0xFE	; 254
    1d6c:	db 01       	movw	r26, r22
    1d6e:	3c 91       	ld	r19, X
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <setCompareMatchOutputMode+0x1e>
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0B1) | _BV(COM0B0);
			break;
	}
	if (timer->type == TIMER_A) {
    1d76:	84 81       	ldd	r24, Z+4	; 0x04
    1d78:	95 81       	ldd	r25, Z+5	; 0x05
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <setCompareMatchOutputMode+0x2e>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		// Use left shift to avoid the arithmetic shift.
		oneBits = oneBits << 2;
    1d7e:	33 0f       	add	r19, r19
    1d80:	33 0f       	add	r19, r19
		zeroBits = zeroBits << 2;
    1d82:	22 0f       	add	r18, r18
    1d84:	22 0f       	add	r18, r18
	}
	*timer->timer->controlRegisterA |= oneBits;
    1d86:	a0 81       	ld	r26, Z
    1d88:	b1 81       	ldd	r27, Z+1	; 0x01
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	0d 90       	ld	r0, X+
    1d8e:	bc 91       	ld	r27, X
    1d90:	a0 2d       	mov	r26, r0
    1d92:	8c 91       	ld	r24, X
    1d94:	83 2b       	or	r24, r19
    1d96:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
    1d98:	01 90       	ld	r0, Z+
    1d9a:	f0 81       	ld	r31, Z
    1d9c:	e0 2d       	mov	r30, r0
    1d9e:	01 80       	ldd	r0, Z+1	; 0x01
    1da0:	f2 81       	ldd	r31, Z+2	; 0x02
    1da2:	e0 2d       	mov	r30, r0
    1da4:	80 81       	ld	r24, Z
    1da6:	20 95       	com	r18
    1da8:	28 23       	and	r18, r24
    1daa:	20 83       	st	Z, r18
}
    1dac:	08 95       	ret

00001dae <setTimerClockSelect>:

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
    1dae:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
    1db0:	80 81       	ld	r24, Z
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	82 70       	andi	r24, 0x02	; 2
    1db6:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
    1db8:	64 30       	cpi	r22, 0x04	; 4
    1dba:	71 05       	cpc	r23, r1
    1dbc:	71 f1       	breq	.+92     	; 0x1e1a <setTimerClockSelect+0x6c>
    1dbe:	65 30       	cpi	r22, 0x05	; 5
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	68 f4       	brcc	.+26     	; 0x1dde <setTimerClockSelect+0x30>
    1dc4:	61 30       	cpi	r22, 0x01	; 1
    1dc6:	71 05       	cpc	r23, r1
    1dc8:	f9 f0       	breq	.+62     	; 0x1e08 <setTimerClockSelect+0x5a>
    1dca:	61 30       	cpi	r22, 0x01	; 1
    1dcc:	71 05       	cpc	r23, r1
    1dce:	d8 f1       	brcs	.+118    	; 0x1e46 <setTimerClockSelect+0x98>
    1dd0:	62 30       	cpi	r22, 0x02	; 2
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	e1 f0       	breq	.+56     	; 0x1e0e <setTimerClockSelect+0x60>
    1dd6:	63 30       	cpi	r22, 0x03	; 3
    1dd8:	71 05       	cpc	r23, r1
    1dda:	a1 f4       	brne	.+40     	; 0x1e04 <setTimerClockSelect+0x56>
    1ddc:	1b c0       	rjmp	.+54     	; 0x1e14 <setTimerClockSelect+0x66>
    1dde:	67 30       	cpi	r22, 0x07	; 7
    1de0:	71 05       	cpc	r23, r1
    1de2:	21 f1       	breq	.+72     	; 0x1e2c <setTimerClockSelect+0x7e>
    1de4:	68 30       	cpi	r22, 0x08	; 8
    1de6:	71 05       	cpc	r23, r1
    1de8:	38 f4       	brcc	.+14     	; 0x1df8 <setTimerClockSelect+0x4a>
    1dea:	65 30       	cpi	r22, 0x05	; 5
    1dec:	71 05       	cpc	r23, r1
    1dee:	c1 f0       	breq	.+48     	; 0x1e20 <setTimerClockSelect+0x72>
    1df0:	66 30       	cpi	r22, 0x06	; 6
    1df2:	71 05       	cpc	r23, r1
    1df4:	39 f4       	brne	.+14     	; 0x1e04 <setTimerClockSelect+0x56>
    1df6:	17 c0       	rjmp	.+46     	; 0x1e26 <setTimerClockSelect+0x78>
    1df8:	68 30       	cpi	r22, 0x08	; 8
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	d1 f0       	breq	.+52     	; 0x1e32 <setTimerClockSelect+0x84>
    1dfe:	69 30       	cpi	r22, 0x09	; 9
    1e00:	71 05       	cpc	r23, r1
    1e02:	e1 f0       	breq	.+56     	; 0x1e3c <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	1d c0       	rjmp	.+58     	; 0x1e42 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
    1e08:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
    1e0a:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
    1e0c:	27 c0       	rjmp	.+78     	; 0x1e5c <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
    1e0e:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
    1e10:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
    1e12:	24 c0       	rjmp	.+72     	; 0x1e5c <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	e9 f4       	brne	.+58     	; 0x1e52 <setTimerClockSelect+0xa4>
    1e18:	2d c0       	rjmp	.+90     	; 0x1e74 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	b9 f0       	breq	.+46     	; 0x1e4c <setTimerClockSelect+0x9e>
    1e1e:	19 c0       	rjmp	.+50     	; 0x1e52 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	d1 f4       	brne	.+52     	; 0x1e58 <setTimerClockSelect+0xaa>
    1e24:	27 c0       	rjmp	.+78     	; 0x1e74 <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	a1 f0       	breq	.+40     	; 0x1e52 <setTimerClockSelect+0xa4>
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	a1 f0       	breq	.+40     	; 0x1e58 <setTimerClockSelect+0xaa>
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	f9 f4       	brne	.+62     	; 0x1e74 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
    1e36:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	10 c0       	rjmp	.+32     	; 0x1e5c <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	d1 f4       	brne	.+52     	; 0x1e74 <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1e40:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerPair timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	0b c0       	rjmp	.+22     	; 0x1e5c <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
    1e46:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
    1e48:	87 e0       	ldi	r24, 0x07	; 7
    1e4a:	08 c0       	rjmp	.+16     	; 0x1e5c <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
    1e4c:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
    1e4e:	84 e0       	ldi	r24, 0x04	; 4
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
    1e52:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
    1e54:	83 e0       	ldi	r24, 0x03	; 3
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
    1e58:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
    1e5c:	a3 81       	ldd	r26, Z+3	; 0x03
    1e5e:	b4 81       	ldd	r27, Z+4	; 0x04
    1e60:	2c 91       	ld	r18, X
    1e62:	29 2b       	or	r18, r25
    1e64:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
    1e66:	03 80       	ldd	r0, Z+3	; 0x03
    1e68:	f4 81       	ldd	r31, Z+4	; 0x04
    1e6a:	e0 2d       	mov	r30, r0
    1e6c:	90 81       	ld	r25, Z
    1e6e:	80 95       	com	r24
    1e70:	89 23       	and	r24, r25
    1e72:	80 83       	st	Z, r24
    1e74:	08 95       	ret

00001e76 <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
    1e76:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
    1e78:	80 81       	ld	r24, Z
    1e7a:	82 ff       	sbrs	r24, 2
    1e7c:	37 c0       	rjmp	.+110    	; 0x1eec <setWaveformGenerationMode+0x76>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
    1e7e:	63 30       	cpi	r22, 0x03	; 3
    1e80:	71 05       	cpc	r23, r1
    1e82:	31 f1       	breq	.+76     	; 0x1ed0 <setWaveformGenerationMode+0x5a>
    1e84:	64 30       	cpi	r22, 0x04	; 4
    1e86:	71 05       	cpc	r23, r1
    1e88:	40 f4       	brcc	.+16     	; 0x1e9a <setWaveformGenerationMode+0x24>
    1e8a:	61 30       	cpi	r22, 0x01	; 1
    1e8c:	71 05       	cpc	r23, r1
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <setWaveformGenerationMode+0x1c>
    1e90:	57 c0       	rjmp	.+174    	; 0x1f40 <setWaveformGenerationMode+0xca>
    1e92:	62 30       	cpi	r22, 0x02	; 2
    1e94:	71 05       	cpc	r23, r1
    1e96:	80 f4       	brcc	.+32     	; 0x1eb8 <setWaveformGenerationMode+0x42>
    1e98:	0b c0       	rjmp	.+22     	; 0x1eb0 <setWaveformGenerationMode+0x3a>
    1e9a:	65 30       	cpi	r22, 0x05	; 5
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	81 f0       	breq	.+32     	; 0x1ec0 <setWaveformGenerationMode+0x4a>
    1ea0:	65 30       	cpi	r22, 0x05	; 5
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	c8 f0       	brcs	.+50     	; 0x1ed8 <setWaveformGenerationMode+0x62>
    1ea6:	66 30       	cpi	r22, 0x06	; 6
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <setWaveformGenerationMode+0x38>
    1eac:	7a c0       	rjmp	.+244    	; 0x1fa2 <setWaveformGenerationMode+0x12c>
    1eae:	1c c0       	rjmp	.+56     	; 0x1ee8 <setWaveformGenerationMode+0x72>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1eb4:	88 e1       	ldi	r24, 0x18	; 24
    1eb6:	47 c0       	rjmp	.+142    	; 0x1f46 <setWaveformGenerationMode+0xd0>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1eb8:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1eba:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
    1ebc:	80 e1       	ldi	r24, 0x10	; 16
    1ebe:	3e c0       	rjmp	.+124    	; 0x1f3c <setWaveformGenerationMode+0xc6>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
    1ec0:	84 fd       	sbrc	r24, 4
    1ec2:	43 c0       	rjmp	.+134    	; 0x1f4a <setWaveformGenerationMode+0xd4>
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
    1ec4:	85 ff       	sbrs	r24, 5
    1ec6:	45 c0       	rjmp	.+138    	; 0x1f52 <setWaveformGenerationMode+0xdc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
    1ec8:	98 e0       	ldi	r25, 0x08	; 8
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    1eca:	33 e0       	ldi	r19, 0x03	; 3
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    1ecc:	80 e1       	ldi	r24, 0x10	; 16
    1ece:	4c c0       	rjmp	.+152    	; 0x1f68 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
					oneBitsB = _BV(WGM13) | _BV(WGM12);
				}
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
    1ed2:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1ed4:	88 e1       	ldi	r24, 0x18	; 24
    1ed6:	32 c0       	rjmp	.+100    	; 0x1f3c <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
    1ed8:	84 fd       	sbrc	r24, 4
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <setWaveformGenerationMode+0xe4>
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
    1edc:	85 ff       	sbrs	r24, 5
    1ede:	41 c0       	rjmp	.+130    	; 0x1f62 <setWaveformGenerationMode+0xec>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    1ee2:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1ee4:	88 e1       	ldi	r24, 0x18	; 24
    1ee6:	40 c0       	rjmp	.+128    	; 0x1f68 <setWaveformGenerationMode+0xf2>
				}
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
    1ee8:	90 e1       	ldi	r25, 0x10	; 16
    1eea:	22 c0       	rjmp	.+68     	; 0x1f30 <setWaveformGenerationMode+0xba>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
    1eec:	62 30       	cpi	r22, 0x02	; 2
    1eee:	71 05       	cpc	r23, r1
    1ef0:	d1 f0       	breq	.+52     	; 0x1f26 <setWaveformGenerationMode+0xb0>
    1ef2:	63 30       	cpi	r22, 0x03	; 3
    1ef4:	71 05       	cpc	r23, r1
    1ef6:	40 f4       	brcc	.+16     	; 0x1f08 <setWaveformGenerationMode+0x92>
    1ef8:	61 15       	cp	r22, r1
    1efa:	71 05       	cpc	r23, r1
    1efc:	81 f0       	breq	.+32     	; 0x1f1e <setWaveformGenerationMode+0xa8>
    1efe:	61 30       	cpi	r22, 0x01	; 1
    1f00:	71 05       	cpc	r23, r1
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <setWaveformGenerationMode+0x90>
    1f04:	4e c0       	rjmp	.+156    	; 0x1fa2 <setWaveformGenerationMode+0x12c>
    1f06:	32 c0       	rjmp	.+100    	; 0x1f6c <setWaveformGenerationMode+0xf6>
    1f08:	64 30       	cpi	r22, 0x04	; 4
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	a1 f0       	breq	.+40     	; 0x1f36 <setWaveformGenerationMode+0xc0>
    1f0e:	64 30       	cpi	r22, 0x04	; 4
    1f10:	71 05       	cpc	r23, r1
    1f12:	68 f0       	brcs	.+26     	; 0x1f2e <setWaveformGenerationMode+0xb8>
    1f14:	65 30       	cpi	r22, 0x05	; 5
    1f16:	71 05       	cpc	r23, r1
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <setWaveformGenerationMode+0xa6>
    1f1a:	43 c0       	rjmp	.+134    	; 0x1fa2 <setWaveformGenerationMode+0x12c>
    1f1c:	06 c0       	rjmp	.+12     	; 0x1f2a <setWaveformGenerationMode+0xb4>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1f20:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1f22:	88 e0       	ldi	r24, 0x08	; 8
    1f24:	10 c0       	rjmp	.+32     	; 0x1f46 <setWaveformGenerationMode+0xd0>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	1d c0       	rjmp	.+58     	; 0x1f64 <setWaveformGenerationMode+0xee>
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
    1f2a:	98 e0       	ldi	r25, 0x08	; 8
    1f2c:	13 c0       	rjmp	.+38     	; 0x1f54 <setWaveformGenerationMode+0xde>

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
    1f30:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
    1f32:	88 e0       	ldi	r24, 0x08	; 8
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <setWaveformGenerationMode+0xc6>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
    1f36:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
    1f38:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
    1f3c:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
    1f3e:	1a c0       	rjmp	.+52     	; 0x1f74 <setWaveformGenerationMode+0xfe>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
    1f40:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
    1f42:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
    1f44:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
    1f46:	23 e0       	ldi	r18, 0x03	; 3
    1f48:	15 c0       	rjmp	.+42     	; 0x1f74 <setWaveformGenerationMode+0xfe>
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
    1f4a:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0110
					oneBitsA = _BV(WGM11);
    1f4c:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsA = _BV(WGM10);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
    1f4e:	80 e1       	ldi	r24, 0x10	; 16
    1f50:	10 c0       	rjmp	.+32     	; 0x1f72 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					oneBitsB = _BV(WGM13) | _BV(WGM12);
    1f52:	98 e1       	ldi	r25, 0x18	; 24
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0111
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					oneBitsB = _BV(WGM12);
					zeroBitsB = _BV(WGM13);
				} else { // 1111
					oneBitsA = _BV(WGM11) | _BV(WGM10);
    1f54:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	07 c0       	rjmp	.+14     	; 0x1f68 <setWaveformGenerationMode+0xf2>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct:
				if (timer->flags & TIMER_RESOLUTION_9bit) { // 0010
					zeroBitsA = _BV(WGM10);
					oneBitsA = _BV(WGM11);
    1f5c:	32 e0       	ldi	r19, 0x02	; 2
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
    1f5e:	88 e1       	ldi	r24, 0x18	; 24
    1f60:	08 c0       	rjmp	.+16     	; 0x1f72 <setWaveformGenerationMode+0xfc>
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
					zeroBitsB = _BV(WGM12);
					oneBitsB = _BV(WGM13);
    1f62:	90 e1       	ldi	r25, 0x10	; 16
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else if (timer->flags & TIMER_RESOLUTION_10bit) { // 0011
					oneBitsA = _BV(WGM11) | _BV(WGM10);
					zeroBitsB = _BV(WGM13) | _BV(WGM12);
				} else { // 1011
					oneBitsA = _BV(WGM10) | _BV(WGM11);
    1f64:	33 e0       	ldi	r19, 0x03	; 3
					zeroBitsB = _BV(WGM12);
    1f66:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerPair timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	04 c0       	rjmp	.+8      	; 0x1f74 <setWaveformGenerationMode+0xfe>
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
    1f6e:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
    1f70:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
    1f72:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
    1f74:	a1 81       	ldd	r26, Z+1	; 0x01
    1f76:	b2 81       	ldd	r27, Z+2	; 0x02
    1f78:	4c 91       	ld	r20, X
    1f7a:	43 2b       	or	r20, r19
    1f7c:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
    1f7e:	a1 81       	ldd	r26, Z+1	; 0x01
    1f80:	b2 81       	ldd	r27, Z+2	; 0x02
    1f82:	3c 91       	ld	r19, X
    1f84:	20 95       	com	r18
    1f86:	23 23       	and	r18, r19
    1f88:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
    1f8a:	a3 81       	ldd	r26, Z+3	; 0x03
    1f8c:	b4 81       	ldd	r27, Z+4	; 0x04
    1f8e:	2c 91       	ld	r18, X
    1f90:	29 2b       	or	r18, r25
    1f92:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
    1f94:	03 80       	ldd	r0, Z+3	; 0x03
    1f96:	f4 81       	ldd	r31, Z+4	; 0x04
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	90 81       	ld	r25, Z
    1f9c:	80 95       	com	r24
    1f9e:	89 23       	and	r24, r25
    1fa0:	80 83       	st	Z, r24
    1fa2:	08 95       	ret

00001fa4 <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
    1fa4:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative macro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    1fa6:	ed 91       	ld	r30, X+
    1fa8:	fc 91       	ld	r31, X
    1faa:	11 97       	sbiw	r26, 0x01	; 1
    1fac:	05 80       	ldd	r0, Z+5	; 0x05
    1fae:	f6 81       	ldd	r31, Z+6	; 0x06
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	20 81       	ld	r18, Z
    1fb4:	14 96       	adiw	r26, 0x04	; 4
    1fb6:	8d 91       	ld	r24, X+
    1fb8:	9c 91       	ld	r25, X
    1fba:	15 97       	sbiw	r26, 0x05	; 5
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	11 f4       	brne	.+4      	; 0x1fc4 <enableTimerInterrupt+0x20>
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <enableTimerInterrupt+0x22>
    1fc4:	84 e0       	ldi	r24, 0x04	; 4
    1fc6:	82 2b       	or	r24, r18
    1fc8:	80 83       	st	Z, r24
}
    1fca:	08 95       	ret

00001fcc <disableTimerInterrupt>:

void disableTimerInterrupt(PTimer timer) {
    1fcc:	dc 01       	movw	r26, r24
	*timer->timer->interruptMaskRegister &= ~_BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
    1fce:	ed 91       	ld	r30, X+
    1fd0:	fc 91       	ld	r31, X
    1fd2:	11 97       	sbiw	r26, 0x01	; 1
    1fd4:	05 80       	ldd	r0, Z+5	; 0x05
    1fd6:	f6 81       	ldd	r31, Z+6	; 0x06
    1fd8:	e0 2d       	mov	r30, r0
    1fda:	20 81       	ld	r18, Z
    1fdc:	14 96       	adiw	r26, 0x04	; 4
    1fde:	8d 91       	ld	r24, X+
    1fe0:	9c 91       	ld	r25, X
    1fe2:	15 97       	sbiw	r26, 0x05	; 5
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	11 f4       	brne	.+4      	; 0x1fec <disableTimerInterrupt+0x20>
    1fe8:	8d ef       	ldi	r24, 0xFD	; 253
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <disableTimerInterrupt+0x22>
    1fec:	8b ef       	ldi	r24, 0xFB	; 251
    1fee:	82 23       	and	r24, r18
    1ff0:	80 83       	st	Z, r24
}
    1ff2:	08 95       	ret

00001ff4 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
    1ffa:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffe:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <setPinOutput>
	// TODO set_on_match is used, because its used for motors, and we want
	// the timer-compare-value to reflect the voltage.
	// Should be configured somewhere else.
	setCompareMatchOutputMode(timer, set_on_match);
    2002:	ce 01       	movw	r24, r28
    2004:	63 e0       	ldi	r22, 0x03	; 3
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <setCompareMatchOutputMode>
}
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	08 95       	ret

00002012 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <setCompareMatchOutputMode>
}
    201a:	08 95       	ret

0000201c <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
    201c:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
    201e:	a0 81       	ld	r26, Z
    2020:	b1 81       	ldd	r27, Z+1	; 0x01
    2022:	8c 91       	ld	r24, X
    2024:	82 ff       	sbrs	r24, 2
    2026:	1c c0       	rjmp	.+56     	; 0x2060 <setTimerCompareValue+0x44>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
    2028:	9f b7       	in	r25, 0x3f	; 63
		// Use as many significant bits as possible.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    202a:	84 ff       	sbrs	r24, 4
    202c:	06 c0       	rjmp	.+12     	; 0x203a <setTimerCompareValue+0x1e>
			value = value >> (16 - 9);
    202e:	66 0f       	add	r22, r22
    2030:	67 2f       	mov	r22, r23
    2032:	66 1f       	adc	r22, r22
    2034:	77 0b       	sbc	r23, r23
    2036:	71 95       	neg	r23
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <setTimerCompareValue+0x2c>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    203a:	85 ff       	sbrs	r24, 5
    203c:	05 c0       	rjmp	.+10     	; 0x2048 <setTimerCompareValue+0x2c>
			value = value >> (16 - 10);
    203e:	86 e0       	ldi	r24, 0x06	; 6
    2040:	76 95       	lsr	r23
    2042:	67 95       	ror	r22
    2044:	8a 95       	dec	r24
    2046:	e1 f7       	brne	.-8      	; 0x2040 <setTimerCompareValue+0x24>
		}
		cli();
    2048:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
    204a:	a2 81       	ldd	r26, Z+2	; 0x02
    204c:	b3 81       	ldd	r27, Z+3	; 0x03
    204e:	11 96       	adiw	r26, 0x01	; 1
    2050:	7c 93       	st	X, r23
    2052:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
    2054:	02 80       	ldd	r0, Z+2	; 0x02
    2056:	f3 81       	ldd	r31, Z+3	; 0x03
    2058:	e0 2d       	mov	r30, r0
    205a:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
    205c:	9f bf       	out	0x3f, r25	; 63
    205e:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
    2060:	02 80       	ldd	r0, Z+2	; 0x02
    2062:	f3 81       	ldd	r31, Z+3	; 0x03
    2064:	e0 2d       	mov	r30, r0
    2066:	70 83       	st	Z, r23
    2068:	08 95       	ret

0000206a <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
    206a:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
    206c:	a0 81       	ld	r26, Z
    206e:	b1 81       	ldd	r27, Z+1	; 0x01
    2070:	8c 91       	ld	r24, X
    2072:	82 ff       	sbrs	r24, 2
    2074:	1c c0       	rjmp	.+56     	; 0x20ae <getTimerCompareValue+0x44>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
    2076:	8f b7       	in	r24, 0x3f	; 63
		cli();
    2078:	f8 94       	cli
		// Reading OCR-register does not require any particular ordering of reading the bytes.
		result = *((uint16_t*) timer->outputCompareRegister);
    207a:	a2 81       	ldd	r26, Z+2	; 0x02
    207c:	b3 81       	ldd	r27, Z+3	; 0x03
    207e:	2d 91       	ld	r18, X+
    2080:	3c 91       	ld	r19, X
    2082:	11 97       	sbiw	r26, 0x01	; 1
		SREG = sreg; // re-enable interrupts
    2084:	8f bf       	out	0x3f, r24	; 63
		
		// Shift the value back. Non-significant bits are lost.
		if (timer->timer->flags & TIMER_RESOLUTION_9bit) {
    2086:	01 90       	ld	r0, Z+
    2088:	f0 81       	ld	r31, Z
    208a:	e0 2d       	mov	r30, r0
    208c:	80 81       	ld	r24, Z
    208e:	84 ff       	sbrs	r24, 4
    2090:	06 c0       	rjmp	.+12     	; 0x209e <getTimerCompareValue+0x34>
			result = result << (16 - 9);
    2092:	36 95       	lsr	r19
    2094:	32 2f       	mov	r19, r18
    2096:	22 27       	eor	r18, r18
    2098:	37 95       	ror	r19
    209a:	27 95       	ror	r18
    209c:	0e c0       	rjmp	.+28     	; 0x20ba <getTimerCompareValue+0x50>
		} else if (timer->timer->flags & TIMER_RESOLUTION_10bit) {
    209e:	85 ff       	sbrs	r24, 5
    20a0:	0c c0       	rjmp	.+24     	; 0x20ba <getTimerCompareValue+0x50>
			result = result << (16 - 10);
    20a2:	46 e0       	ldi	r20, 0x06	; 6
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	4a 95       	dec	r20
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <getTimerCompareValue+0x3a>
    20ac:	06 c0       	rjmp	.+12     	; 0x20ba <getTimerCompareValue+0x50>
		}
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
    20ae:	02 80       	ldd	r0, Z+2	; 0x02
    20b0:	f3 81       	ldd	r31, Z+3	; 0x03
    20b2:	e0 2d       	mov	r30, r0
    20b4:	80 81       	ld	r24, Z
    20b6:	38 2f       	mov	r19, r24
    20b8:	20 e0       	ldi	r18, 0x00	; 0
	}
	return result;
}
    20ba:	c9 01       	movw	r24, r18
    20bc:	08 95       	ret

000020be <processor_idle>:
#include "idle.h"
#include <avr/sleep.h>
#include "../anton_std.h"

void processor_idle() {
	sleep_enable();
    20be:	83 b7       	in	r24, 0x33	; 51
    20c0:	81 60       	ori	r24, 0x01	; 1
    20c2:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
    20c4:	83 b7       	in	r24, 0x33	; 51
    20c6:	81 7f       	andi	r24, 0xF1	; 241
    20c8:	83 bf       	out	0x33, r24	; 51
	sei(); // Just in case, if this is called form an ISR
    20ca:	78 94       	sei
	sleep_cpu();
    20cc:	88 95       	sleep
}
    20ce:	08 95       	ret

000020d0 <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
    20d0:	0e 94 5f 10 	call	0x20be	; 0x20be <processor_idle>
    20d4:	fd cf       	rjmp	.-6      	; 0x20d0 <processor_loop_idle>

000020d6 <malloc>:
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	91 05       	cpc	r25, r1
    20de:	10 f4       	brcc	.+4      	; 0x20e4 <malloc+0xe>
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	e0 91 e7 03 	lds	r30, 0x03E7
    20e8:	f0 91 e8 03 	lds	r31, 0x03E8
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	26 c0       	rjmp	.+76     	; 0x2142 <malloc+0x6c>
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	68 17       	cp	r22, r24
    20fc:	79 07       	cpc	r23, r25
    20fe:	e0 f0       	brcs	.+56     	; 0x2138 <malloc+0x62>
    2100:	68 17       	cp	r22, r24
    2102:	79 07       	cpc	r23, r25
    2104:	81 f4       	brne	.+32     	; 0x2126 <malloc+0x50>
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	21 15       	cp	r18, r1
    210c:	31 05       	cpc	r19, r1
    210e:	31 f0       	breq	.+12     	; 0x211c <malloc+0x46>
    2110:	d9 01       	movw	r26, r18
    2112:	13 96       	adiw	r26, 0x03	; 3
    2114:	9c 93       	st	X, r25
    2116:	8e 93       	st	-X, r24
    2118:	12 97       	sbiw	r26, 0x02	; 2
    211a:	2b c0       	rjmp	.+86     	; 0x2172 <malloc+0x9c>
    211c:	90 93 e8 03 	sts	0x03E8, r25
    2120:	80 93 e7 03 	sts	0x03E7, r24
    2124:	26 c0       	rjmp	.+76     	; 0x2172 <malloc+0x9c>
    2126:	41 15       	cp	r20, r1
    2128:	51 05       	cpc	r21, r1
    212a:	19 f0       	breq	.+6      	; 0x2132 <malloc+0x5c>
    212c:	64 17       	cp	r22, r20
    212e:	75 07       	cpc	r23, r21
    2130:	18 f4       	brcc	.+6      	; 0x2138 <malloc+0x62>
    2132:	ab 01       	movw	r20, r22
    2134:	e9 01       	movw	r28, r18
    2136:	df 01       	movw	r26, r30
    2138:	9f 01       	movw	r18, r30
    213a:	72 81       	ldd	r23, Z+2	; 0x02
    213c:	63 81       	ldd	r22, Z+3	; 0x03
    213e:	e7 2f       	mov	r30, r23
    2140:	f6 2f       	mov	r31, r22
    2142:	30 97       	sbiw	r30, 0x00	; 0
    2144:	c1 f6       	brne	.-80     	; 0x20f6 <malloc+0x20>
    2146:	41 15       	cp	r20, r1
    2148:	51 05       	cpc	r21, r1
    214a:	01 f1       	breq	.+64     	; 0x218c <malloc+0xb6>
    214c:	48 1b       	sub	r20, r24
    214e:	59 0b       	sbc	r21, r25
    2150:	44 30       	cpi	r20, 0x04	; 4
    2152:	51 05       	cpc	r21, r1
    2154:	80 f4       	brcc	.+32     	; 0x2176 <malloc+0xa0>
    2156:	12 96       	adiw	r26, 0x02	; 2
    2158:	8d 91       	ld	r24, X+
    215a:	9c 91       	ld	r25, X
    215c:	13 97       	sbiw	r26, 0x03	; 3
    215e:	20 97       	sbiw	r28, 0x00	; 0
    2160:	19 f0       	breq	.+6      	; 0x2168 <malloc+0x92>
    2162:	9b 83       	std	Y+3, r25	; 0x03
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <malloc+0x9a>
    2168:	90 93 e8 03 	sts	0x03E8, r25
    216c:	80 93 e7 03 	sts	0x03E7, r24
    2170:	fd 01       	movw	r30, r26
    2172:	32 96       	adiw	r30, 0x02	; 2
    2174:	46 c0       	rjmp	.+140    	; 0x2202 <malloc+0x12c>
    2176:	fd 01       	movw	r30, r26
    2178:	e4 0f       	add	r30, r20
    217a:	f5 1f       	adc	r31, r21
    217c:	81 93       	st	Z+, r24
    217e:	91 93       	st	Z+, r25
    2180:	42 50       	subi	r20, 0x02	; 2
    2182:	50 40       	sbci	r21, 0x00	; 0
    2184:	11 96       	adiw	r26, 0x01	; 1
    2186:	5c 93       	st	X, r21
    2188:	4e 93       	st	-X, r20
    218a:	3b c0       	rjmp	.+118    	; 0x2202 <malloc+0x12c>
    218c:	20 91 e5 03 	lds	r18, 0x03E5
    2190:	30 91 e6 03 	lds	r19, 0x03E6
    2194:	21 15       	cp	r18, r1
    2196:	31 05       	cpc	r19, r1
    2198:	41 f4       	brne	.+16     	; 0x21aa <malloc+0xd4>
    219a:	20 91 ac 01 	lds	r18, 0x01AC
    219e:	30 91 ad 01 	lds	r19, 0x01AD
    21a2:	30 93 e6 03 	sts	0x03E6, r19
    21a6:	20 93 e5 03 	sts	0x03E5, r18
    21aa:	20 91 ae 01 	lds	r18, 0x01AE
    21ae:	30 91 af 01 	lds	r19, 0x01AF
    21b2:	21 15       	cp	r18, r1
    21b4:	31 05       	cpc	r19, r1
    21b6:	41 f4       	brne	.+16     	; 0x21c8 <malloc+0xf2>
    21b8:	2d b7       	in	r18, 0x3d	; 61
    21ba:	3e b7       	in	r19, 0x3e	; 62
    21bc:	40 91 aa 01 	lds	r20, 0x01AA
    21c0:	50 91 ab 01 	lds	r21, 0x01AB
    21c4:	24 1b       	sub	r18, r20
    21c6:	35 0b       	sbc	r19, r21
    21c8:	e0 91 e5 03 	lds	r30, 0x03E5
    21cc:	f0 91 e6 03 	lds	r31, 0x03E6
    21d0:	e2 17       	cp	r30, r18
    21d2:	f3 07       	cpc	r31, r19
    21d4:	a0 f4       	brcc	.+40     	; 0x21fe <malloc+0x128>
    21d6:	2e 1b       	sub	r18, r30
    21d8:	3f 0b       	sbc	r19, r31
    21da:	28 17       	cp	r18, r24
    21dc:	39 07       	cpc	r19, r25
    21de:	78 f0       	brcs	.+30     	; 0x21fe <malloc+0x128>
    21e0:	ac 01       	movw	r20, r24
    21e2:	4e 5f       	subi	r20, 0xFE	; 254
    21e4:	5f 4f       	sbci	r21, 0xFF	; 255
    21e6:	24 17       	cp	r18, r20
    21e8:	35 07       	cpc	r19, r21
    21ea:	48 f0       	brcs	.+18     	; 0x21fe <malloc+0x128>
    21ec:	4e 0f       	add	r20, r30
    21ee:	5f 1f       	adc	r21, r31
    21f0:	50 93 e6 03 	sts	0x03E6, r21
    21f4:	40 93 e5 03 	sts	0x03E5, r20
    21f8:	81 93       	st	Z+, r24
    21fa:	91 93       	st	Z+, r25
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <malloc+0x12c>
    21fe:	e0 e0       	ldi	r30, 0x00	; 0
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	cf 01       	movw	r24, r30
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	08 95       	ret

0000220a <free>:
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	09 f4       	brne	.+2      	; 0x2214 <free+0xa>
    2212:	91 c0       	rjmp	.+290    	; 0x2336 <free+0x12c>
    2214:	fc 01       	movw	r30, r24
    2216:	32 97       	sbiw	r30, 0x02	; 2
    2218:	13 82       	std	Z+3, r1	; 0x03
    221a:	12 82       	std	Z+2, r1	; 0x02
    221c:	60 91 e7 03 	lds	r22, 0x03E7
    2220:	70 91 e8 03 	lds	r23, 0x03E8
    2224:	61 15       	cp	r22, r1
    2226:	71 05       	cpc	r23, r1
    2228:	81 f4       	brne	.+32     	; 0x224a <free+0x40>
    222a:	20 81       	ld	r18, Z
    222c:	31 81       	ldd	r19, Z+1	; 0x01
    222e:	28 0f       	add	r18, r24
    2230:	39 1f       	adc	r19, r25
    2232:	80 91 e5 03 	lds	r24, 0x03E5
    2236:	90 91 e6 03 	lds	r25, 0x03E6
    223a:	82 17       	cp	r24, r18
    223c:	93 07       	cpc	r25, r19
    223e:	99 f5       	brne	.+102    	; 0x22a6 <free+0x9c>
    2240:	f0 93 e6 03 	sts	0x03E6, r31
    2244:	e0 93 e5 03 	sts	0x03E5, r30
    2248:	76 c0       	rjmp	.+236    	; 0x2336 <free+0x12c>
    224a:	db 01       	movw	r26, r22
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <free+0x4c>
    2252:	cd 01       	movw	r24, r26
    2254:	d9 01       	movw	r26, r18
    2256:	ae 17       	cp	r26, r30
    2258:	bf 07       	cpc	r27, r31
    225a:	48 f4       	brcc	.+18     	; 0x226e <free+0x64>
    225c:	12 96       	adiw	r26, 0x02	; 2
    225e:	2d 91       	ld	r18, X+
    2260:	3c 91       	ld	r19, X
    2262:	13 97       	sbiw	r26, 0x03	; 3
    2264:	21 15       	cp	r18, r1
    2266:	31 05       	cpc	r19, r1
    2268:	a1 f7       	brne	.-24     	; 0x2252 <free+0x48>
    226a:	cd 01       	movw	r24, r26
    226c:	21 c0       	rjmp	.+66     	; 0x22b0 <free+0xa6>
    226e:	b3 83       	std	Z+3, r27	; 0x03
    2270:	a2 83       	std	Z+2, r26	; 0x02
    2272:	ef 01       	movw	r28, r30
    2274:	49 91       	ld	r20, Y+
    2276:	59 91       	ld	r21, Y+
    2278:	9e 01       	movw	r18, r28
    227a:	24 0f       	add	r18, r20
    227c:	35 1f       	adc	r19, r21
    227e:	a2 17       	cp	r26, r18
    2280:	b3 07       	cpc	r27, r19
    2282:	79 f4       	brne	.+30     	; 0x22a2 <free+0x98>
    2284:	2d 91       	ld	r18, X+
    2286:	3c 91       	ld	r19, X
    2288:	11 97       	sbiw	r26, 0x01	; 1
    228a:	24 0f       	add	r18, r20
    228c:	35 1f       	adc	r19, r21
    228e:	2e 5f       	subi	r18, 0xFE	; 254
    2290:	3f 4f       	sbci	r19, 0xFF	; 255
    2292:	31 83       	std	Z+1, r19	; 0x01
    2294:	20 83       	st	Z, r18
    2296:	12 96       	adiw	r26, 0x02	; 2
    2298:	2d 91       	ld	r18, X+
    229a:	3c 91       	ld	r19, X
    229c:	13 97       	sbiw	r26, 0x03	; 3
    229e:	33 83       	std	Z+3, r19	; 0x03
    22a0:	22 83       	std	Z+2, r18	; 0x02
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	29 f4       	brne	.+10     	; 0x22b0 <free+0xa6>
    22a6:	f0 93 e8 03 	sts	0x03E8, r31
    22aa:	e0 93 e7 03 	sts	0x03E7, r30
    22ae:	43 c0       	rjmp	.+134    	; 0x2336 <free+0x12c>
    22b0:	dc 01       	movw	r26, r24
    22b2:	13 96       	adiw	r26, 0x03	; 3
    22b4:	fc 93       	st	X, r31
    22b6:	ee 93       	st	-X, r30
    22b8:	12 97       	sbiw	r26, 0x02	; 2
    22ba:	4d 91       	ld	r20, X+
    22bc:	5d 91       	ld	r21, X+
    22be:	a4 0f       	add	r26, r20
    22c0:	b5 1f       	adc	r27, r21
    22c2:	ea 17       	cp	r30, r26
    22c4:	fb 07       	cpc	r31, r27
    22c6:	69 f4       	brne	.+26     	; 0x22e2 <free+0xd8>
    22c8:	20 81       	ld	r18, Z
    22ca:	31 81       	ldd	r19, Z+1	; 0x01
    22cc:	24 0f       	add	r18, r20
    22ce:	35 1f       	adc	r19, r21
    22d0:	2e 5f       	subi	r18, 0xFE	; 254
    22d2:	3f 4f       	sbci	r19, 0xFF	; 255
    22d4:	ec 01       	movw	r28, r24
    22d6:	39 83       	std	Y+1, r19	; 0x01
    22d8:	28 83       	st	Y, r18
    22da:	22 81       	ldd	r18, Z+2	; 0x02
    22dc:	33 81       	ldd	r19, Z+3	; 0x03
    22de:	3b 83       	std	Y+3, r19	; 0x03
    22e0:	2a 83       	std	Y+2, r18	; 0x02
    22e2:	e0 e0       	ldi	r30, 0x00	; 0
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <free+0xe2>
    22e8:	fb 01       	movw	r30, r22
    22ea:	bc 01       	movw	r22, r24
    22ec:	db 01       	movw	r26, r22
    22ee:	12 96       	adiw	r26, 0x02	; 2
    22f0:	8d 91       	ld	r24, X+
    22f2:	9c 91       	ld	r25, X
    22f4:	13 97       	sbiw	r26, 0x03	; 3
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	b9 f7       	brne	.-18     	; 0x22e8 <free+0xde>
    22fa:	9b 01       	movw	r18, r22
    22fc:	2e 5f       	subi	r18, 0xFE	; 254
    22fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2300:	8d 91       	ld	r24, X+
    2302:	9c 91       	ld	r25, X
    2304:	11 97       	sbiw	r26, 0x01	; 1
    2306:	82 0f       	add	r24, r18
    2308:	93 1f       	adc	r25, r19
    230a:	40 91 e5 03 	lds	r20, 0x03E5
    230e:	50 91 e6 03 	lds	r21, 0x03E6
    2312:	48 17       	cp	r20, r24
    2314:	59 07       	cpc	r21, r25
    2316:	79 f4       	brne	.+30     	; 0x2336 <free+0x12c>
    2318:	30 97       	sbiw	r30, 0x00	; 0
    231a:	29 f4       	brne	.+10     	; 0x2326 <free+0x11c>
    231c:	10 92 e8 03 	sts	0x03E8, r1
    2320:	10 92 e7 03 	sts	0x03E7, r1
    2324:	02 c0       	rjmp	.+4      	; 0x232a <free+0x120>
    2326:	13 82       	std	Z+3, r1	; 0x03
    2328:	12 82       	std	Z+2, r1	; 0x02
    232a:	22 50       	subi	r18, 0x02	; 2
    232c:	30 40       	sbci	r19, 0x00	; 0
    232e:	30 93 e6 03 	sts	0x03E6, r19
    2332:	20 93 e5 03 	sts	0x03E5, r18
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	08 95       	ret

0000233c <memcpy>:
    233c:	fb 01       	movw	r30, r22
    233e:	dc 01       	movw	r26, r24
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <memcpy+0xa>
    2342:	01 90       	ld	r0, Z+
    2344:	0d 92       	st	X+, r0
    2346:	41 50       	subi	r20, 0x01	; 1
    2348:	50 40       	sbci	r21, 0x00	; 0
    234a:	d8 f7       	brcc	.-10     	; 0x2342 <memcpy+0x6>
    234c:	08 95       	ret

0000234e <MainProcessEnd>:
#include "../misc/idle.h"

// This makes the initial main()-process idle when finishing (like all other processes).
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	processor_loop_idle();
    234e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <processor_loop_idle>
}
    2352:	08 95       	ret
    2354:	f8 94       	cli

00002356 <__stop_program>:
    2356:	ff cf       	rjmp	.-2      	; 0x2356 <__stop_program>
