
Main-Simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  000014de  00001572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000118  008001e6  008001e6  00001658  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a0b  00000000  00000000  000021f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002795  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a36  00000000  00000000  00005393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003920  00000000  00000000  00005dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  000096ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f7e  00000000  00000000  00009c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017aa  00000000  00000000  0000abda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0003fdd8  00000000  00000000  0000c384  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000458  00000000  00000000  0004c15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e8  00000000  00000000  0004c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      80:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_32>
      84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ed       	ldi	r30, 0xDE	; 222
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3e       	cpi	r26, 0xE6	; 230
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a6 ee       	ldi	r26, 0xE6	; 230
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3f       	cpi	r26, 0xFE	; 254
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c2:	0e 94 39 02 	call	0x472	; 0x472 <init_ports_m1284P>

000000c6 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      c6:	0e 94 7e 03 	call	0x6fc	; 0x6fc <init_timer_m1284P>

000000ca <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      ca:	0e 94 6a 05 	call	0xad4	; 0xad4 <init_idle_scheduler>

000000ce <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 250); // THIS is the main difference between this kernel and the others
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      ce:	0e 94 7d 05 	call	0xafa	; 0xafa <init_scheduler>

000000d2 <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	// rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      d2:	0e 94 28 06 	call	0xc50	; 0xc50 <init_kernel>
      d6:	0e 94 c1 00 	call	0x182	; 0x182 <main>
      da:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <MainProcessEnd>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <MyPeriodicJob>:

volatile long long counter = 0;
volatile long long main_counter = 0;

void MyPeriodicJob() {
	counter++;
      e2:	40 91 e6 01 	lds	r20, 0x01E6
      e6:	30 91 e7 01 	lds	r19, 0x01E7
      ea:	20 91 e8 01 	lds	r18, 0x01E8
      ee:	90 91 e9 01 	lds	r25, 0x01E9
      f2:	80 91 ea 01 	lds	r24, 0x01EA
      f6:	f0 91 eb 01 	lds	r31, 0x01EB
      fa:	e0 91 ec 01 	lds	r30, 0x01EC
      fe:	a0 91 ed 01 	lds	r26, 0x01ED
     102:	64 2f       	mov	r22, r20
     104:	6f 5f       	subi	r22, 0xFF	; 255
     106:	51 e0       	ldi	r21, 0x01	; 1
     108:	64 17       	cp	r22, r20
     10a:	08 f0       	brcs	.+2      	; 0x10e <MyPeriodicJob+0x2c>
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	53 0f       	add	r21, r19
     110:	41 e0       	ldi	r20, 0x01	; 1
     112:	53 17       	cp	r21, r19
     114:	08 f0       	brcs	.+2      	; 0x118 <MyPeriodicJob+0x36>
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	42 0f       	add	r20, r18
     11a:	31 e0       	ldi	r19, 0x01	; 1
     11c:	42 17       	cp	r20, r18
     11e:	08 f0       	brcs	.+2      	; 0x122 <MyPeriodicJob+0x40>
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	39 0f       	add	r19, r25
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	39 17       	cp	r19, r25
     128:	08 f0       	brcs	.+2      	; 0x12c <MyPeriodicJob+0x4a>
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	28 0f       	add	r18, r24
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	28 17       	cp	r18, r24
     132:	08 f0       	brcs	.+2      	; 0x136 <MyPeriodicJob+0x54>
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	9f 0f       	add	r25, r31
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	9f 17       	cp	r25, r31
     13c:	08 f0       	brcs	.+2      	; 0x140 <MyPeriodicJob+0x5e>
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	8e 0f       	add	r24, r30
     142:	71 e0       	ldi	r23, 0x01	; 1
     144:	8e 17       	cp	r24, r30
     146:	08 f0       	brcs	.+2      	; 0x14a <MyPeriodicJob+0x68>
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	7a 0f       	add	r23, r26
     14c:	60 93 e6 01 	sts	0x01E6, r22
     150:	50 93 e7 01 	sts	0x01E7, r21
     154:	40 93 e8 01 	sts	0x01E8, r20
     158:	30 93 e9 01 	sts	0x01E9, r19
     15c:	20 93 ea 01 	sts	0x01EA, r18
     160:	90 93 eb 01 	sts	0x01EB, r25
     164:	80 93 ec 01 	sts	0x01EC, r24
     168:	70 93 ed 01 	sts	0x01ED, r23
}
     16c:	08 95       	ret

0000016e <before_scheduler>:

void before_scheduler() {
	createPeriodicJob(&MyPeriodicJob, 50, 0);
     16e:	81 e7       	ldi	r24, 0x71	; 113
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	42 e3       	ldi	r20, 0x32	; 50
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	0e 94 a9 01 	call	0x352	; 0x352 <createPeriodicJob>
}
     180:	08 95       	ret

00000182 <main>:

int main() {
	// Just let the main pass. Will enter ProcessGraveyard.
	// This is not really the idle-thread, but the infinite sleep-loop inside has the same effect.
	// To really get the idle-thread, comment out the rr_captureMainThread() in the kernel-setup.
}
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret

00000188 <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
     188:	ef 92       	push	r14
     18a:	ff 92       	push	r15
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
	PJob job = JobMem(process);
     190:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     194:	e8 2e       	mov	r14, r24
     196:	e7 01       	movw	r28, r14
     198:	7e 01       	movw	r14, r28
     19a:	f9 2e       	mov	r15, r25
     19c:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
     19e:	e9 81       	ldd	r30, Y+1	; 0x01
     1a0:	fa 81       	ldd	r31, Y+2	; 0x02
     1a2:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
     1a4:	1c 86       	std	Y+12, r1	; 0x0c
     1a6:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
     1a8:	0e 94 21 02 	call	0x442	; 0x442 <schedule_next>
     1ac:	f8 cf       	rjmp	.-16     	; 0x19e <AperiodicJobWrapper+0x16>

000001ae <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
     1ae:	ef 92       	push	r14
     1b0:	ff 92       	push	r15
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
	PJob job = JobMem(process);
     1b6:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     1ba:	e8 2e       	mov	r14, r24
     1bc:	e7 01       	movw	r28, r14
     1be:	7e 01       	movw	r14, r28
     1c0:	f9 2e       	mov	r15, r25
     1c2:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
     1c4:	e9 81       	ldd	r30, Y+1	; 0x01
     1c6:	fa 81       	ldd	r31, Y+2	; 0x02
     1c8:	09 95       	icall
		periodicJob->nextPeriod += job->period;
     1ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     1cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ce:	ad 85       	ldd	r26, Y+13	; 0x0d
     1d0:	be 85       	ldd	r27, Y+14	; 0x0e
     1d2:	2d 81       	ldd	r18, Y+5	; 0x05
     1d4:	3e 81       	ldd	r19, Y+6	; 0x06
     1d6:	4f 81       	ldd	r20, Y+7	; 0x07
     1d8:	58 85       	ldd	r21, Y+8	; 0x08
     1da:	82 0f       	add	r24, r18
     1dc:	93 1f       	adc	r25, r19
     1de:	a4 1f       	adc	r26, r20
     1e0:	b5 1f       	adc	r27, r21
     1e2:	8b 87       	std	Y+11, r24	; 0x0b
     1e4:	9c 87       	std	Y+12, r25	; 0x0c
     1e6:	ad 87       	std	Y+13, r26	; 0x0d
     1e8:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
     1ea:	0e 94 21 02 	call	0x442	; 0x442 <schedule_next>
     1ee:	ea cf       	rjmp	.-44     	; 0x1c4 <PeriodicJobWrapper+0x16>

000001f0 <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
     1f8:	c0 91 ff 01 	lds	r28, 0x01FF
     1fc:	d0 91 00 02 	lds	r29, 0x0200
	while (current) {
     200:	25 c0       	rjmp	.+74     	; 0x24c <dms_schedule+0x5c>
		PJob job = JobMem(current);
     202:	ce 01       	movw	r24, r28
     204:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     208:	fc 01       	movw	r30, r24
		switch(job->jobType) {
     20a:	81 85       	ldd	r24, Z+9	; 0x09
     20c:	92 85       	ldd	r25, Z+10	; 0x0a
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	21 f0       	breq	.+8      	; 0x21a <dms_schedule+0x2a>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	91 05       	cpc	r25, r1
     216:	c1 f4       	brne	.+48     	; 0x248 <dms_schedule+0x58>
     218:	12 c0       	rjmp	.+36     	; 0x23e <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
     21a:	63 85       	ldd	r22, Z+11	; 0x0b
     21c:	74 85       	ldd	r23, Z+12	; 0x0c
     21e:	85 85       	ldd	r24, Z+13	; 0x0d
     220:	96 85       	ldd	r25, Z+14	; 0x0e
     222:	20 91 f9 01 	lds	r18, 0x01F9
     226:	30 91 fa 01 	lds	r19, 0x01FA
     22a:	40 91 fb 01 	lds	r20, 0x01FB
     22e:	50 91 fc 01 	lds	r21, 0x01FC
     232:	26 17       	cp	r18, r22
     234:	37 07       	cpc	r19, r23
     236:	48 07       	cpc	r20, r24
     238:	59 07       	cpc	r21, r25
     23a:	30 f0       	brcs	.+12     	; 0x248 <dms_schedule+0x58>
     23c:	09 c0       	rjmp	.+18     	; 0x250 <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
     23e:	83 85       	ldd	r24, Z+11	; 0x0b
     240:	94 85       	ldd	r25, Z+12	; 0x0c
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	91 05       	cpc	r25, r1
     246:	21 f0       	breq	.+8      	; 0x250 <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
     248:	c3 81       	ldd	r28, Z+3	; 0x03
     24a:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
     24c:	20 97       	sbiw	r28, 0x00	; 0
     24e:	c9 f6       	brne	.-78     	; 0x202 <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
     250:	ce 01       	movw	r24, r28
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	08 95       	ret

0000025c <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	8c 01       	movw	r16, r24
     266:	eb 01       	movw	r28, r22
	if (!processListHead) {
     268:	80 91 ff 01 	lds	r24, 0x01FF
     26c:	90 91 00 02 	lds	r25, 0x0200
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	39 f4       	brne	.+14     	; 0x282 <insertJobIntoList+0x26>
		processListHead = process;
     274:	10 93 00 02 	sts	0x0200, r17
     278:	00 93 ff 01 	sts	0x01FF, r16
		job->nextJob = NULL;
     27c:	1c 82       	std	Y+4, r1	; 0x04
     27e:	1b 82       	std	Y+3, r1	; 0x03
     280:	2d c0       	rjmp	.+90     	; 0x2dc <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
     282:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     286:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
     288:	65 81       	ldd	r22, Z+5	; 0x05
     28a:	76 81       	ldd	r23, Z+6	; 0x06
     28c:	87 81       	ldd	r24, Z+7	; 0x07
     28e:	90 85       	ldd	r25, Z+8	; 0x08
     290:	2d 81       	ldd	r18, Y+5	; 0x05
     292:	3e 81       	ldd	r19, Y+6	; 0x06
     294:	4f 81       	ldd	r20, Y+7	; 0x07
     296:	58 85       	ldd	r21, Y+8	; 0x08
     298:	26 17       	cp	r18, r22
     29a:	37 07       	cpc	r19, r23
     29c:	48 07       	cpc	r20, r24
     29e:	59 07       	cpc	r21, r25
     2a0:	68 f0       	brcs	.+26     	; 0x2bc <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
     2a2:	62 17       	cp	r22, r18
     2a4:	73 07       	cpc	r23, r19
     2a6:	84 07       	cpc	r24, r20
     2a8:	95 07       	cpc	r25, r21
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <insertJobIntoList+0x58>
     2ac:	90 81       	ld	r25, Z
     2ae:	88 81       	ld	r24, Y
     2b0:	98 17       	cp	r25, r24
     2b2:	20 f0       	brcs	.+8      	; 0x2bc <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
     2b4:	83 81       	ldd	r24, Z+3	; 0x03
     2b6:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	19 f7       	brne	.-58     	; 0x282 <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     2c4:	fc 01       	movw	r30, r24
     2c6:	83 81       	ldd	r24, Z+3	; 0x03
     2c8:	94 81       	ldd	r25, Z+4	; 0x04
     2ca:	9c 83       	std	Y+4, r25	; 0x04
     2cc:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     2d6:	fc 01       	movw	r30, r24
     2d8:	14 83       	std	Z+4, r17	; 0x04
     2da:	03 83       	std	Z+3, r16	; 0x03
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     2e6:	6f 92       	push	r6
     2e8:	7f 92       	push	r7
     2ea:	8f 92       	push	r8
     2ec:	9f 92       	push	r9
     2ee:	af 92       	push	r10
     2f0:	bf 92       	push	r11
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	5c 01       	movw	r10, r24
     304:	4b 01       	movw	r8, r22
     306:	69 01       	movw	r12, r18
     308:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
     30a:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     30e:	19 2f       	mov	r17, r25
     310:	68 2e       	mov	r6, r24
     312:	e3 01       	movw	r28, r6
     314:	3e 01       	movw	r6, r28
     316:	79 2e       	mov	r7, r25
     318:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
     31a:	9a 82       	std	Y+2, r9	; 0x02
     31c:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
     31e:	08 83       	st	Y, r16
	job->period = period;
     320:	cd 82       	std	Y+5, r12	; 0x05
     322:	de 82       	std	Y+6, r13	; 0x06
     324:	ef 82       	std	Y+7, r14	; 0x07
     326:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
     328:	c5 01       	movw	r24, r10
     32a:	b3 01       	movw	r22, r6
     32c:	0e 94 2e 01 	call	0x25c	; 0x25c <insertJobIntoList>
	return job;
}
     330:	86 2d       	mov	r24, r6
     332:	91 2f       	mov	r25, r17
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	bf 90       	pop	r11
     346:	af 90       	pop	r10
     348:	9f 90       	pop	r9
     34a:	8f 90       	pop	r8
     34c:	7f 90       	pop	r7
     34e:	6f 90       	pop	r6
     350:	08 95       	ret

00000352 <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     352:	af 92       	push	r10
     354:	bf 92       	push	r11
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ff 92       	push	r15
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	ec 01       	movw	r28, r24
     366:	5a 01       	movw	r10, r20
     368:	6b 01       	movw	r12, r22
     36a:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
     36c:	40 91 00 01 	lds	r20, 0x0100
     370:	50 91 01 01 	lds	r21, 0x0101
     374:	87 ed       	ldi	r24, 0xD7	; 215
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	2f e0       	ldi	r18, 0x0F	; 15
     37e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <createProcess3>
     382:	f8 2e       	mov	r15, r24
     384:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
     386:	be 01       	movw	r22, r28
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <initializeJob>
     390:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
     392:	12 86       	std	Z+10, r1	; 0x0a
     394:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
     396:	20 91 f9 01 	lds	r18, 0x01F9
     39a:	30 91 fa 01 	lds	r19, 0x01FA
     39e:	40 91 fb 01 	lds	r20, 0x01FB
     3a2:	50 91 fc 01 	lds	r21, 0x01FC
     3a6:	2a 0d       	add	r18, r10
     3a8:	3b 1d       	adc	r19, r11
     3aa:	4c 1d       	adc	r20, r12
     3ac:	5d 1d       	adc	r21, r13
     3ae:	23 87       	std	Z+11, r18	; 0x0b
     3b0:	34 87       	std	Z+12, r19	; 0x0c
     3b2:	45 87       	std	Z+13, r20	; 0x0d
     3b4:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
     3b6:	8f 2d       	mov	r24, r15
     3b8:	91 2f       	mov	r25, r17
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	08 95       	ret

000003ce <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
     3ce:	af 92       	push	r10
     3d0:	bf 92       	push	r11
     3d2:	cf 92       	push	r12
     3d4:	df 92       	push	r13
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	ec 01       	movw	r28, r24
     3e2:	5a 01       	movw	r10, r20
     3e4:	6b 01       	movw	r12, r22
     3e6:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
     3e8:	40 91 00 01 	lds	r20, 0x0100
     3ec:	50 91 01 01 	lds	r21, 0x0101
     3f0:	84 ec       	ldi	r24, 0xC4	; 196
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	2d e0       	ldi	r18, 0x0D	; 13
     3fa:	0e 94 e6 04 	call	0x9cc	; 0x9cc <createProcess3>
     3fe:	f8 2e       	mov	r15, r24
     400:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
     402:	be 01       	movw	r22, r28
     404:	a6 01       	movw	r20, r12
     406:	95 01       	movw	r18, r10
     408:	0e 94 73 01 	call	0x2e6	; 0x2e6 <initializeJob>
     40c:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	92 87       	std	Z+10, r25	; 0x0a
     414:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
     416:	14 86       	std	Z+12, r1	; 0x0c
     418:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
     41a:	8f 2d       	mov	r24, r15
     41c:	91 2f       	mov	r25, r17
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	08 95       	ret

00000432 <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
     432:	0e 94 47 05 	call	0xa8e	; 0xa8e <getProcessMemory>
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	fc 01       	movw	r30, r24
     43c:	34 87       	std	Z+12, r19	; 0x0c
     43e:	23 87       	std	Z+11, r18	; 0x0b
}
     440:	08 95       	ret

00000442 <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 9b 05 	call	0xb36	; 0xb36 <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
     44a:	00 97       	sbiw	r24, 0x00	; 0
     44c:	11 f0       	breq	.+4      	; 0x452 <schedule_next+0x10>
	switchProcess(next); // Will not return here.
     44e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <switchProcess>
     452:	08 95       	ret

00000454 <processor_idle>:
}

void processor_idle() {
	sleep_enable();
     454:	83 b7       	in	r24, 0x33	; 51
     456:	81 60       	ori	r24, 0x01	; 1
     458:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
     45a:	83 b7       	in	r24, 0x33	; 51
     45c:	81 7f       	andi	r24, 0xF1	; 241
     45e:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
     460:	78 94       	sei
	sleep_cpu();
     462:	88 95       	sleep
}
     464:	08 95       	ret

00000466 <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
     466:	0e 94 2a 02 	call	0x454	; 0x454 <processor_idle>
     46a:	fd cf       	rjmp	.-6      	; 0x466 <processor_loop_idle>

0000046c <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
     46c:	0e 94 33 02 	call	0x466	; 0x466 <processor_loop_idle>
}
     470:	08 95       	ret

00000472 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     472:	af e7       	ldi	r26, 0x7F	; 127
     474:	b2 e0       	ldi	r27, 0x02	; 2
     476:	e2 ed       	ldi	r30, 0xD2	; 210
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	86 e0       	ldi	r24, 0x06	; 6
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	81 50       	subi	r24, 0x01	; 1
     482:	e1 f7       	brne	.-8      	; 0x47c <init_ports_m1284P+0xa>
     484:	ac e7       	ldi	r26, 0x7C	; 124
     486:	b2 e0       	ldi	r27, 0x02	; 2
     488:	ef ec       	ldi	r30, 0xCF	; 207
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	01 90       	ld	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	81 50       	subi	r24, 0x01	; 1
     494:	e1 f7       	brne	.-8      	; 0x48e <init_ports_m1284P+0x1c>
     496:	ab ec       	ldi	r26, 0xCB	; 203
     498:	b2 e0       	ldi	r27, 0x02	; 2
     49a:	ec ec       	ldi	r30, 0xCC	; 204
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <init_ports_m1284P+0x2e>
     4a8:	a9 e5       	ldi	r26, 0x59	; 89
     4aa:	b2 e0       	ldi	r27, 0x02	; 2
     4ac:	e9 ec       	ldi	r30, 0xC9	; 201
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	01 90       	ld	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <init_ports_m1284P+0x40>
     4ba:	aa e6       	ldi	r26, 0x6A	; 106
     4bc:	b2 e0       	ldi	r27, 0x02	; 2
     4be:	e6 ec       	ldi	r30, 0xC6	; 198
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <init_ports_m1284P+0x52>
     4cc:	aa e2       	ldi	r26, 0x2A	; 42
     4ce:	b2 e0       	ldi	r27, 0x02	; 2
     4d0:	e3 ec       	ldi	r30, 0xC3	; 195
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	01 90       	ld	r0, Z+
     4d8:	0d 92       	st	X+, r0
     4da:	81 50       	subi	r24, 0x01	; 1
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <init_ports_m1284P+0x64>
     4de:	a6 e5       	ldi	r26, 0x56	; 86
     4e0:	b2 e0       	ldi	r27, 0x02	; 2
     4e2:	e0 ec       	ldi	r30, 0xC0	; 192
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	01 90       	ld	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	81 50       	subi	r24, 0x01	; 1
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <init_ports_m1284P+0x76>
     4f0:	ae eb       	ldi	r26, 0xBE	; 190
     4f2:	b2 e0       	ldi	r27, 0x02	; 2
     4f4:	ed eb       	ldi	r30, 0xBD	; 189
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	83 e0       	ldi	r24, 0x03	; 3
     4fa:	01 90       	ld	r0, Z+
     4fc:	0d 92       	st	X+, r0
     4fe:	81 50       	subi	r24, 0x01	; 1
     500:	e1 f7       	brne	.-8      	; 0x4fa <init_ports_m1284P+0x88>
     502:	a8 e8       	ldi	r26, 0x88	; 136
     504:	b2 e0       	ldi	r27, 0x02	; 2
     506:	ea eb       	ldi	r30, 0xBA	; 186
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	01 90       	ld	r0, Z+
     50e:	0d 92       	st	X+, r0
     510:	81 50       	subi	r24, 0x01	; 1
     512:	e1 f7       	brne	.-8      	; 0x50c <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     514:	a1 ed       	ldi	r26, 0xD1	; 209
     516:	b2 e0       	ldi	r27, 0x02	; 2
     518:	e4 eb       	ldi	r30, 0xB4	; 180
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	86 e0       	ldi	r24, 0x06	; 6
     51e:	01 90       	ld	r0, Z+
     520:	0d 92       	st	X+, r0
     522:	81 50       	subi	r24, 0x01	; 1
     524:	e1 f7       	brne	.-8      	; 0x51e <init_ports_m1284P+0xac>
     526:	a3 e7       	ldi	r26, 0x73	; 115
     528:	b2 e0       	ldi	r27, 0x02	; 2
     52a:	e1 eb       	ldi	r30, 0xB1	; 177
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	81 50       	subi	r24, 0x01	; 1
     536:	e1 f7       	brne	.-8      	; 0x530 <init_ports_m1284P+0xbe>
     538:	ae ec       	ldi	r26, 0xCE	; 206
     53a:	b2 e0       	ldi	r27, 0x02	; 2
     53c:	ee ea       	ldi	r30, 0xAE	; 174
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	01 90       	ld	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	81 50       	subi	r24, 0x01	; 1
     548:	e1 f7       	brne	.-8      	; 0x542 <init_ports_m1284P+0xd0>
     54a:	a3 e1       	ldi	r26, 0x13	; 19
     54c:	b2 e0       	ldi	r27, 0x02	; 2
     54e:	eb ea       	ldi	r30, 0xAB	; 171
     550:	f1 e0       	ldi	r31, 0x01	; 1
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	01 90       	ld	r0, Z+
     556:	0d 92       	st	X+, r0
     558:	81 50       	subi	r24, 0x01	; 1
     55a:	e1 f7       	brne	.-8      	; 0x554 <init_ports_m1284P+0xe2>
     55c:	a5 e8       	ldi	r26, 0x85	; 133
     55e:	b2 e0       	ldi	r27, 0x02	; 2
     560:	e8 ea       	ldi	r30, 0xA8	; 168
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	01 90       	ld	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	81 50       	subi	r24, 0x01	; 1
     56c:	e1 f7       	brne	.-8      	; 0x566 <init_ports_m1284P+0xf4>
     56e:	a2 e9       	ldi	r26, 0x92	; 146
     570:	b2 e0       	ldi	r27, 0x02	; 2
     572:	e5 ea       	ldi	r30, 0xA5	; 165
     574:	f1 e0       	ldi	r31, 0x01	; 1
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	01 90       	ld	r0, Z+
     57a:	0d 92       	st	X+, r0
     57c:	81 50       	subi	r24, 0x01	; 1
     57e:	e1 f7       	brne	.-8      	; 0x578 <init_ports_m1284P+0x106>
     580:	a5 e4       	ldi	r26, 0x45	; 69
     582:	b2 e0       	ldi	r27, 0x02	; 2
     584:	e2 ea       	ldi	r30, 0xA2	; 162
     586:	f1 e0       	ldi	r31, 0x01	; 1
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	01 90       	ld	r0, Z+
     58c:	0d 92       	st	X+, r0
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	e1 f7       	brne	.-8      	; 0x58a <init_ports_m1284P+0x118>
     592:	a6 e1       	ldi	r26, 0x16	; 22
     594:	b2 e0       	ldi	r27, 0x02	; 2
     596:	ef e9       	ldi	r30, 0x9F	; 159
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	01 90       	ld	r0, Z+
     59e:	0d 92       	st	X+, r0
     5a0:	81 50       	subi	r24, 0x01	; 1
     5a2:	e1 f7       	brne	.-8      	; 0x59c <init_ports_m1284P+0x12a>
     5a4:	a2 e4       	ldi	r26, 0x42	; 66
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	ec e9       	ldi	r30, 0x9C	; 156
     5aa:	f1 e0       	ldi	r31, 0x01	; 1
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     5b6:	a6 e7       	ldi	r26, 0x76	; 118
     5b8:	b2 e0       	ldi	r27, 0x02	; 2
     5ba:	e6 e9       	ldi	r30, 0x96	; 150
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	86 e0       	ldi	r24, 0x06	; 6
     5c0:	01 90       	ld	r0, Z+
     5c2:	0d 92       	st	X+, r0
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <init_ports_m1284P+0x14e>
     5c8:	ad e9       	ldi	r26, 0x9D	; 157
     5ca:	b2 e0       	ldi	r27, 0x02	; 2
     5cc:	e3 e9       	ldi	r30, 0x93	; 147
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	83 e0       	ldi	r24, 0x03	; 3
     5d2:	01 90       	ld	r0, Z+
     5d4:	0d 92       	st	X+, r0
     5d6:	81 50       	subi	r24, 0x01	; 1
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <init_ports_m1284P+0x160>
     5da:	a0 e7       	ldi	r26, 0x70	; 112
     5dc:	b2 e0       	ldi	r27, 0x02	; 2
     5de:	e0 e9       	ldi	r30, 0x90	; 144
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	01 90       	ld	r0, Z+
     5e6:	0d 92       	st	X+, r0
     5e8:	81 50       	subi	r24, 0x01	; 1
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <init_ports_m1284P+0x172>
     5ec:	a5 e9       	ldi	r26, 0x95	; 149
     5ee:	b2 e0       	ldi	r27, 0x02	; 2
     5f0:	ed e8       	ldi	r30, 0x8D	; 141
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <init_ports_m1284P+0x184>
     5fe:	a8 e3       	ldi	r26, 0x38	; 56
     600:	b2 e0       	ldi	r27, 0x02	; 2
     602:	ea e8       	ldi	r30, 0x8A	; 138
     604:	f1 e0       	ldi	r31, 0x01	; 1
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	e1 f7       	brne	.-8      	; 0x608 <init_ports_m1284P+0x196>
     610:	a7 e2       	ldi	r26, 0x27	; 39
     612:	b2 e0       	ldi	r27, 0x02	; 2
     614:	e7 e8       	ldi	r30, 0x87	; 135
     616:	f1 e0       	ldi	r31, 0x01	; 1
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	01 90       	ld	r0, Z+
     61c:	0d 92       	st	X+, r0
     61e:	81 50       	subi	r24, 0x01	; 1
     620:	e1 f7       	brne	.-8      	; 0x61a <init_ports_m1284P+0x1a8>
     622:	ad e6       	ldi	r26, 0x6D	; 109
     624:	b2 e0       	ldi	r27, 0x02	; 2
     626:	e4 e8       	ldi	r30, 0x84	; 132
     628:	f1 e0       	ldi	r31, 0x01	; 1
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	01 90       	ld	r0, Z+
     62e:	0d 92       	st	X+, r0
     630:	81 50       	subi	r24, 0x01	; 1
     632:	e1 f7       	brne	.-8      	; 0x62c <init_ports_m1284P+0x1ba>
     634:	af e5       	ldi	r26, 0x5F	; 95
     636:	b2 e0       	ldi	r27, 0x02	; 2
     638:	e1 e8       	ldi	r30, 0x81	; 129
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	01 90       	ld	r0, Z+
     640:	0d 92       	st	X+, r0
     642:	81 50       	subi	r24, 0x01	; 1
     644:	e1 f7       	brne	.-8      	; 0x63e <init_ports_m1284P+0x1cc>
     646:	a9 e0       	ldi	r26, 0x09	; 9
     648:	b2 e0       	ldi	r27, 0x02	; 2
     64a:	ee e7       	ldi	r30, 0x7E	; 126
     64c:	f1 e0       	ldi	r31, 0x01	; 1
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	81 50       	subi	r24, 0x01	; 1
     656:	e1 f7       	brne	.-8      	; 0x650 <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     658:	a0 e5       	ldi	r26, 0x50	; 80
     65a:	b2 e0       	ldi	r27, 0x02	; 2
     65c:	e8 e7       	ldi	r30, 0x78	; 120
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	86 e0       	ldi	r24, 0x06	; 6
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	81 50       	subi	r24, 0x01	; 1
     668:	e1 f7       	brne	.-8      	; 0x662 <init_ports_m1284P+0x1f0>
     66a:	a4 e2       	ldi	r26, 0x24	; 36
     66c:	b2 e0       	ldi	r27, 0x02	; 2
     66e:	e5 e7       	ldi	r30, 0x75	; 117
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	81 50       	subi	r24, 0x01	; 1
     67a:	e1 f7       	brne	.-8      	; 0x674 <init_ports_m1284P+0x202>
     67c:	ad e2       	ldi	r26, 0x2D	; 45
     67e:	b2 e0       	ldi	r27, 0x02	; 2
     680:	e2 e7       	ldi	r30, 0x72	; 114
     682:	f1 e0       	ldi	r31, 0x01	; 1
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	01 90       	ld	r0, Z+
     688:	0d 92       	st	X+, r0
     68a:	81 50       	subi	r24, 0x01	; 1
     68c:	e1 f7       	brne	.-8      	; 0x686 <init_ports_m1284P+0x214>
     68e:	a1 e2       	ldi	r26, 0x21	; 33
     690:	b2 e0       	ldi	r27, 0x02	; 2
     692:	ef e6       	ldi	r30, 0x6F	; 111
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	01 90       	ld	r0, Z+
     69a:	0d 92       	st	X+, r0
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	e1 f7       	brne	.-8      	; 0x698 <init_ports_m1284P+0x226>
     6a0:	ac e5       	ldi	r26, 0x5C	; 92
     6a2:	b2 e0       	ldi	r27, 0x02	; 2
     6a4:	ec e6       	ldi	r30, 0x6C	; 108
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	01 90       	ld	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	81 50       	subi	r24, 0x01	; 1
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <init_ports_m1284P+0x238>
     6b2:	a3 eb       	ldi	r26, 0xB3	; 179
     6b4:	b2 e0       	ldi	r27, 0x02	; 2
     6b6:	e9 e6       	ldi	r30, 0x69	; 105
     6b8:	f1 e0       	ldi	r31, 0x01	; 1
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	01 90       	ld	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	81 50       	subi	r24, 0x01	; 1
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <init_ports_m1284P+0x24a>
     6c4:	a8 e9       	ldi	r26, 0x98	; 152
     6c6:	b2 e0       	ldi	r27, 0x02	; 2
     6c8:	e6 e6       	ldi	r30, 0x66	; 102
     6ca:	f1 e0       	ldi	r31, 0x01	; 1
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	01 90       	ld	r0, Z+
     6d0:	0d 92       	st	X+, r0
     6d2:	81 50       	subi	r24, 0x01	; 1
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <init_ports_m1284P+0x25c>
     6d6:	a8 ec       	ldi	r26, 0xC8	; 200
     6d8:	b2 e0       	ldi	r27, 0x02	; 2
     6da:	e3 e6       	ldi	r30, 0x63	; 99
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	81 50       	subi	r24, 0x01	; 1
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <init_ports_m1284P+0x26e>
     6e8:	a0 ea       	ldi	r26, 0xA0	; 160
     6ea:	b2 e0       	ldi	r27, 0x02	; 2
     6ec:	e0 e6       	ldi	r30, 0x60	; 96
     6ee:	f1 e0       	ldi	r31, 0x01	; 1
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	01 90       	ld	r0, Z+
     6f4:	0d 92       	st	X+, r0
     6f6:	81 50       	subi	r24, 0x01	; 1
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <init_ports_m1284P+0x280>
}
     6fa:	08 95       	ret

000006fc <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     6fc:	ab e3       	ldi	r26, 0x3B	; 59
     6fe:	b2 e0       	ldi	r27, 0x02	; 2
     700:	e9 e5       	ldi	r30, 0x59	; 89
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	87 e0       	ldi	r24, 0x07	; 7
     706:	01 90       	ld	r0, Z+
     708:	0d 92       	st	X+, r0
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	e1 f7       	brne	.-8      	; 0x706 <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     70e:	a1 ec       	ldi	r26, 0xC1	; 193
     710:	b2 e0       	ldi	r27, 0x02	; 2
     712:	e2 e5       	ldi	r30, 0x52	; 82
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	87 e0       	ldi	r24, 0x07	; 7
     718:	01 90       	ld	r0, Z+
     71a:	0d 92       	st	X+, r0
     71c:	81 50       	subi	r24, 0x01	; 1
     71e:	e1 f7       	brne	.-8      	; 0x718 <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     720:	ab e8       	ldi	r26, 0x8B	; 139
     722:	b2 e0       	ldi	r27, 0x02	; 2
     724:	eb e4       	ldi	r30, 0x4B	; 75
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	87 e0       	ldi	r24, 0x07	; 7
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	81 50       	subi	r24, 0x01	; 1
     730:	e1 f7       	brne	.-8      	; 0x72a <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     732:	ac e0       	ldi	r26, 0x0C	; 12
     734:	b2 e0       	ldi	r27, 0x02	; 2
     736:	e4 e4       	ldi	r30, 0x44	; 68
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	81 50       	subi	r24, 0x01	; 1
     742:	e1 f7       	brne	.-8      	; 0x73c <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     744:	a2 e6       	ldi	r26, 0x62	; 98
     746:	b2 e0       	ldi	r27, 0x02	; 2
     748:	ec e3       	ldi	r30, 0x3C	; 60
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	88 e0       	ldi	r24, 0x08	; 8
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	81 50       	subi	r24, 0x01	; 1
     754:	e1 f7       	brne	.-8      	; 0x74e <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     756:	a6 eb       	ldi	r26, 0xB6	; 182
     758:	b2 e0       	ldi	r27, 0x02	; 2
     75a:	e4 e3       	ldi	r30, 0x34	; 52
     75c:	f1 e0       	ldi	r31, 0x01	; 1
     75e:	88 e0       	ldi	r24, 0x08	; 8
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	81 50       	subi	r24, 0x01	; 1
     766:	e1 f7       	brne	.-8      	; 0x760 <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     768:	a9 e1       	ldi	r26, 0x19	; 25
     76a:	b2 e0       	ldi	r27, 0x02	; 2
     76c:	ec e2       	ldi	r30, 0x2C	; 44
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	88 e0       	ldi	r24, 0x08	; 8
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	81 50       	subi	r24, 0x01	; 1
     778:	e1 f7       	brne	.-8      	; 0x772 <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     77a:	ab ea       	ldi	r26, 0xAB	; 171
     77c:	b2 e0       	ldi	r27, 0x02	; 2
     77e:	e4 e2       	ldi	r30, 0x24	; 36
     780:	f1 e0       	ldi	r31, 0x01	; 1
     782:	88 e0       	ldi	r24, 0x08	; 8
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	81 50       	subi	r24, 0x01	; 1
     78a:	e1 f7       	brne	.-8      	; 0x784 <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     78c:	a8 e4       	ldi	r26, 0x48	; 72
     78e:	b2 e0       	ldi	r27, 0x02	; 2
     790:	ec e1       	ldi	r30, 0x1C	; 28
     792:	f1 e0       	ldi	r31, 0x01	; 1
     794:	88 e0       	ldi	r24, 0x08	; 8
     796:	01 90       	ld	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	81 50       	subi	r24, 0x01	; 1
     79c:	e1 f7       	brne	.-8      	; 0x796 <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     79e:	a3 ea       	ldi	r26, 0xA3	; 163
     7a0:	b2 e0       	ldi	r27, 0x02	; 2
     7a2:	e4 e1       	ldi	r30, 0x14	; 20
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	88 e0       	ldi	r24, 0x08	; 8
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     7b0:	a0 e3       	ldi	r26, 0x30	; 48
     7b2:	b2 e0       	ldi	r27, 0x02	; 2
     7b4:	ec e0       	ldi	r30, 0x0C	; 12
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	88 e0       	ldi	r24, 0x08	; 8
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     7c2:	a1 e0       	ldi	r26, 0x01	; 1
     7c4:	b2 e0       	ldi	r27, 0x02	; 2
     7c6:	e4 e0       	ldi	r30, 0x04	; 4
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <init_timer_m1284P+0xd0>
}
     7d4:	08 95       	ret

000007d6 <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	90 e4       	ldi	r25, 0x40	; 64
     7da:	20 91 00 01 	lds	r18, 0x0100
     7de:	30 91 01 01 	lds	r19, 0x0101
     7e2:	82 1b       	sub	r24, r18
     7e4:	93 0b       	sbc	r25, r19
     7e6:	90 93 e5 01 	sts	0x01E5, r25
     7ea:	80 93 e4 01 	sts	0x01E4, r24
	__malloc_margin = 0;
     7ee:	10 92 e1 01 	sts	0x01E1, r1
     7f2:	10 92 e0 01 	sts	0x01E0, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     7f6:	60 91 f6 01 	lds	r22, 0x01F6
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	6e 5f       	subi	r22, 0xFE	; 254
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 0b 09 	call	0x1216	; 0x1216 <calloc>
     808:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     80a:	00 97       	sbiw	r24, 0x00	; 0
     80c:	19 f0       	breq	.+6      	; 0x814 <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     80e:	11 82       	std	Z+1, r1	; 0x01
     810:	10 82       	st	Z, r1
     812:	02 c0       	rjmp	.+4      	; 0x818 <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     814:	e0 e0       	ldi	r30, 0x00	; 0
     816:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     818:	f0 93 f8 01 	sts	0x01F8, r31
     81c:	e0 93 f7 01 	sts	0x01F7, r30
}
     820:	08 95       	ret

00000822 <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     822:	af 92       	push	r10
     824:	bf 92       	push	r11
     826:	cf 92       	push	r12
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	00 d0       	rcall	.+0      	; 0x838 <createProcessBase3+0x16>
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	d8 2e       	mov	r13, r24
     83e:	c9 2e       	mov	r12, r25
     840:	7b 01       	movw	r14, r22
     842:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     844:	ca 01       	movw	r24, r20
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	29 83       	std	Y+1, r18	; 0x01
     84c:	0e 94 0b 09 	call	0x1216	; 0x1216 <calloc>
     850:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     852:	29 81       	ldd	r18, Y+1	; 0x01
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	b1 f1       	breq	.+108    	; 0x8c4 <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     858:	a5 01       	movw	r20, r10
     85a:	41 50       	subi	r20, 0x01	; 1
     85c:	50 40       	sbci	r21, 0x00	; 0
     85e:	48 0f       	add	r20, r24
     860:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     862:	86 e3       	ldi	r24, 0x36	; 54
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	fa 01       	movw	r30, r20
     868:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     86e:	fa 01       	movw	r30, r20
     870:	32 97       	sbiw	r30, 0x02	; 2
     872:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     874:	fa 01       	movw	r30, r20
     876:	33 97       	sbiw	r30, 0x03	; 3
     878:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     87a:	62 2f       	mov	r22, r18
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	6e 5f       	subi	r22, 0xFE	; 254
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	49 83       	std	Y+1, r20	; 0x01
     888:	5a 83       	std	Y+2, r21	; 0x02
     88a:	0e 94 0b 09 	call	0x1216	; 0x1216 <calloc>
     88e:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     890:	49 81       	ldd	r20, Y+1	; 0x01
     892:	5a 81       	ldd	r21, Y+2	; 0x02
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	49 f0       	breq	.+18     	; 0x8aa <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     898:	ca 01       	movw	r24, r20
     89a:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     89c:	f9 01       	movw	r30, r18
     89e:	91 83       	std	Z+1, r25	; 0x01
     8a0:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     8a2:	e1 14       	cp	r14, r1
     8a4:	f1 04       	cpc	r15, r1
     8a6:	31 f4       	brne	.+12     	; 0x8b4 <createProcessBase3+0x92>
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     8aa:	c8 01       	movw	r24, r16
     8ac:	0e 94 ca 09 	call	0x1394	; 0x1394 <free>
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     8b2:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     8b4:	fa 01       	movw	r30, r20
     8b6:	7e 97       	sbiw	r30, 0x1e	; 30
     8b8:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     8ba:	4f 51       	subi	r20, 0x1F	; 31
     8bc:	50 40       	sbci	r21, 0x00	; 0
     8be:	fa 01       	movw	r30, r20
     8c0:	f0 82       	st	Z, r15
	return result;
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     8c8:	c9 01       	movw	r24, r18
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	08 95       	ret

000008e4 <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
     8e4:	40 91 00 01 	lds	r20, 0x0100
     8e8:	50 91 01 01 	lds	r21, 0x0101
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	0e 94 11 04 	call	0x822	; 0x822 <createProcessBase3>
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
}
     8f2:	08 95       	ret

000008f4 <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <createProcessBase2>
	return createProcess2(entryPoint, NULL);
}
     8fc:	08 95       	ret

000008fe <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	0f 92       	push	r0
     906:	0b b6       	in	r0, 0x3b	; 59
     908:	0f 92       	push	r0
     90a:	1f 92       	push	r1
     90c:	11 24       	eor	r1, r1
     90e:	2f 92       	push	r2
     910:	3f 92       	push	r3
     912:	4f 92       	push	r4
     914:	5f 92       	push	r5
     916:	6f 92       	push	r6
     918:	7f 92       	push	r7
     91a:	8f 92       	push	r8
     91c:	9f 92       	push	r9
     91e:	af 92       	push	r10
     920:	bf 92       	push	r11
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ef 93       	push	r30
     948:	ff 93       	push	r31
	PushProcessContext()
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     94a:	dc 01       	movw	r26, r24
	StoreContextStack()
     94c:	0d b6       	in	r0, 0x3d	; 61
     94e:	0d 92       	st	X+, r0
     950:	0e b6       	in	r0, 0x3e	; 62
     952:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     954:	db 01       	movw	r26, r22
	RestoreContextStack()
     956:	0d 90       	ld	r0, X+
     958:	0d be       	out	0x3d, r0	; 61
     95a:	0d 90       	ld	r0, X+
     95c:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	bf 91       	pop	r27
     968:	af 91       	pop	r26
     96a:	9f 91       	pop	r25
     96c:	8f 91       	pop	r24
     96e:	7f 91       	pop	r23
     970:	6f 91       	pop	r22
     972:	5f 91       	pop	r21
     974:	4f 91       	pop	r20
     976:	3f 91       	pop	r19
     978:	2f 91       	pop	r18
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	bf 90       	pop	r11
     988:	af 90       	pop	r10
     98a:	9f 90       	pop	r9
     98c:	8f 90       	pop	r8
     98e:	7f 90       	pop	r7
     990:	6f 90       	pop	r6
     992:	5f 90       	pop	r5
     994:	4f 90       	pop	r4
     996:	3f 90       	pop	r3
     998:	2f 90       	pop	r2
     99a:	1f 90       	pop	r1
     99c:	0f 90       	pop	r0
     99e:	0b be       	out	0x3b, r0	; 59
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0

	sei();
     9a6:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     9a8:	08 95       	ret

000009aa <getCurrentProcess>:

inline Process getCurrentProcess() {
     9aa:	80 91 f7 01 	lds	r24, 0x01F7
     9ae:	90 91 f8 01 	lds	r25, 0x01F8
     9b2:	08 95       	ret

000009b4 <switchProcess>:
	return (Process) __current_process;
}

void switchProcess(Process newProcess) {
     9b4:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     9b6:	80 91 f7 01 	lds	r24, 0x01F7
     9ba:	90 91 f8 01 	lds	r25, 0x01F8
	__current_process = newProcess;
     9be:	70 93 f8 01 	sts	0x01F8, r23
     9c2:	60 93 f7 01 	sts	0x01F7, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     9c6:	0e 94 7f 04 	call	0x8fe	; 0x8fe <switchContext>
}
     9ca:	08 95       	ret

000009cc <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     9d2:	2a 5f       	subi	r18, 0xFA	; 250
     9d4:	0e 94 11 04 	call	0x822	; 0x822 <createProcessBase3>
     9d8:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	e9 f0       	breq	.+58     	; 0xa18 <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     9de:	dc 01       	movw	r26, r24
     9e0:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     9e2:	80 91 02 01 	lds	r24, 0x0102
     9e6:	90 91 03 01 	lds	r25, 0x0103
     9ea:	95 83       	std	Z+5, r25	; 0x05
     9ec:	84 83       	std	Z+4, r24	; 0x04
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	90 93 03 01 	sts	0x0103, r25
     9f4:	80 93 02 01 	sts	0x0102, r24
	ext->stackSize = stackSize;
     9f8:	13 96       	adiw	r26, 0x03	; 3
     9fa:	dc 93       	st	X, r29
     9fc:	ce 93       	st	-X, r28
     9fe:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     a00:	27 e2       	ldi	r18, 0x27	; 39
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	2c 1b       	sub	r18, r28
     a06:	3d 0b       	sbc	r19, r29
     a08:	80 81       	ld	r24, Z
     a0a:	91 81       	ldd	r25, Z+1	; 0x01
     a0c:	82 0f       	add	r24, r18
     a0e:	93 1f       	adc	r25, r19
     a10:	15 96       	adiw	r26, 0x05	; 5
     a12:	9c 93       	st	X, r25
     a14:	8e 93       	st	-X, r24
     a16:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     a18:	cf 01       	movw	r24, r30
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
     a20:	40 91 00 01 	lds	r20, 0x0100
     a24:	50 91 01 01 	lds	r21, 0x0101
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <createProcess3>
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
}
     a2e:	08 95       	ret

00000a30 <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	0e 94 10 05 	call	0xa20	; 0xa20 <createProcess2>
	return createProcess2(entryPoint, NULL);
}
     a38:	08 95       	ret

00000a3a <freeProcess>:

void freeProcess(Process process) {
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     a40:	80 91 f7 01 	lds	r24, 0x01F7
     a44:	90 91 f8 01 	lds	r25, 0x01F8
     a48:	c8 17       	cp	r28, r24
     a4a:	d9 07       	cpc	r29, r25
     a4c:	69 f0       	breq	.+26     	; 0xa68 <freeProcess+0x2e>
     a4e:	fe 01       	movw	r30, r28
     a50:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     a52:	8c 81       	ldd	r24, Y+4	; 0x04
     a54:	9d 81       	ldd	r25, Y+5	; 0x05
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	21 f0       	breq	.+8      	; 0xa62 <freeProcess+0x28>
		free(pcb->stackTop);
     a5a:	84 81       	ldd	r24, Z+4	; 0x04
     a5c:	95 81       	ldd	r25, Z+5	; 0x05
     a5e:	0e 94 ca 09 	call	0x1394	; 0x1394 <free>
	}
	free(process);
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 ca 09 	call	0x1394	; 0x1394 <free>
}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
     a6e:	fc 01       	movw	r30, r24
     a70:	86 81       	ldd	r24, Z+6	; 0x06
     a72:	08 95       	ret

00000a74 <getFreeProcessStackSize>:
	return ProcMem(process)->stackSize;
}

uint16_t getFreeProcessStackSize(Process process) {
     a74:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     a76:	20 85       	ldd	r18, Z+8	; 0x08
     a78:	31 85       	ldd	r19, Z+9	; 0x09
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	28 1b       	sub	r18, r24
     a80:	39 0b       	sbc	r19, r25
}
     a82:	c9 01       	movw	r24, r18
     a84:	08 95       	ret

00000a86 <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     a86:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	95 81       	ldd	r25, Z+5	; 0x05
     a8c:	08 95       	ret

00000a8e <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
     a8e:	9c 01       	movw	r18, r24
     a90:	28 5d       	subi	r18, 0xD8	; 216
     a92:	3f 4f       	sbci	r19, 0xFF	; 255
	return ProcMem(proc) + ADDITIONAL_MEMORY;
}
     a94:	c9 01       	movw	r24, r18
     a96:	08 95       	ret

00000a98 <init_process>:

// Initialize the API in this header.
// This is not a KERNEL_INIT-function and has to be called explicitely. This includes initialization
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
     a98:	80 91 f6 01 	lds	r24, 0x01F6
     a9c:	8a 5f       	subi	r24, 0xFA	; 250
     a9e:	80 93 f6 01 	sts	0x01F6, r24
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
	init_process_base();
     aa2:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <init_process_base>
     aa6:	a0 91 f7 01 	lds	r26, 0x01F7
     aaa:	b0 91 f8 01 	lds	r27, 0x01F8
     aae:	fd 01       	movw	r30, r26
     ab0:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     ab2:	15 96       	adiw	r26, 0x05	; 5
     ab4:	1c 92       	st	X, r1
     ab6:	1e 92       	st	-X, r1
     ab8:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     aba:	80 91 00 01 	lds	r24, 0x0100
     abe:	90 91 01 01 	lds	r25, 0x0101
     ac2:	93 83       	std	Z+3, r25	; 0x03
     ac4:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     ac6:	80 91 e4 01 	lds	r24, 0x01E4
     aca:	90 91 e5 01 	lds	r25, 0x01E5
     ace:	95 83       	std	Z+5, r25	; 0x05
     ad0:	84 83       	std	Z+4, r24	; 0x04
}
     ad2:	08 95       	ret

00000ad4 <init_idle_scheduler>:
#error This scheduler-kernel-module requires the Process module to be included!
#endif

Process __idle_process;

void init_idle_scheduler() {
     ad4:	86 e3       	ldi	r24, 0x36	; 54
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	40 e4       	ldi	r20, 0x40	; 64
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <createProcess3>
     ae6:	90 93 9c 02 	sts	0x029C, r25
     aea:	80 93 9b 02 	sts	0x029B, r24
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
     aee:	08 95       	ret

00000af0 <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
     af0:	80 91 9b 02 	lds	r24, 0x029B
     af4:	90 91 9c 02 	lds	r25, 0x029C
     af8:	08 95       	ret

00000afa <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     afe:	cc e0       	ldi	r28, 0x0C	; 12
     b00:	d2 e0       	ldi	r29, 0x02	; 2
     b02:	ce 01       	movw	r24, r28
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	0e 94 bf 06 	call	0xd7e	; 0xd7e <setWaveformGenerationMode>
	setTimerCompareValue(timer, 250); // THIS is the main difference between this kernel and the others
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	6a ef       	ldi	r22, 0xFA	; 250
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	0e 94 8e 07 	call	0xf1c	; 0xf1c <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     b18:	ce 01       	movw	r24, r28
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
     b28:	80 e3       	ldi	r24, 0x30	; 48
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 66 07 	call	0xecc	; 0xecc <enableTimerInterrupt>
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
	sei();
     b30:	78 94       	sei
}
     b32:	08 95       	ret

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     b34:	08 95       	ret

00000b36 <schedule>:

// Regular header-files
#include "kernel.h"

Process schedule(BOOL fromTimer) {
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     b3c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <dms_schedule>
     b40:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     b42:	00 97       	sbiw	r24, 0x00	; 0
     b44:	51 f4       	brne	.+20     	; 0xb5a <schedule+0x24>
     b46:	ce 01       	movw	r24, r28
     b48:	0e 94 3c 08 	call	0x1078	; 0x1078 <rr_schedule>
     b4c:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	21 f4       	brne	.+8      	; 0xb5a <schedule+0x24>
	return __idle_process;
     b52:	20 91 9b 02 	lds	r18, 0x029B
     b56:	30 91 9c 02 	lds	r19, 0x029C
	return p;
}
     b5a:	c9 01       	movw	r24, r18
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <__vector_32>:
// This is defined in timed_scheduler.kernel to be the ISR of the timer-interrupt.
// If not yet defined, the scheduler-ISR will just be a regular function.
#ifndef SCHEDULER_TICK_ISR
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	0f 92       	push	r0
     b6a:	0b b6       	in	r0, 0x3b	; 59
     b6c:	0f 92       	push	r0
     b6e:	1f 92       	push	r1
     b70:	11 24       	eor	r1, r1
     b72:	2f 92       	push	r2
     b74:	3f 92       	push	r3
     b76:	4f 92       	push	r4
     b78:	5f 92       	push	r5
     b7a:	6f 92       	push	r6
     b7c:	7f 92       	push	r7
     b7e:	8f 92       	push	r8
     b80:	9f 92       	push	r9
     b82:	af 92       	push	r10
     b84:	bf 92       	push	r11
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ef 93       	push	r30
     bac:	ff 93       	push	r31
	// First push the current context, before any register may be modified.
	PushProcessContext()

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     bae:	80 91 f9 01 	lds	r24, 0x01F9
     bb2:	90 91 fa 01 	lds	r25, 0x01FA
     bb6:	a0 91 fb 01 	lds	r26, 0x01FB
     bba:	b0 91 fc 01 	lds	r27, 0x01FC
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	a1 1d       	adc	r26, r1
     bc2:	b1 1d       	adc	r27, r1
     bc4:	80 93 f9 01 	sts	0x01F9, r24
     bc8:	90 93 fa 01 	sts	0x01FA, r25
     bcc:	a0 93 fb 01 	sts	0x01FB, r26
     bd0:	b0 93 fc 01 	sts	0x01FC, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     bd4:	a0 91 f7 01 	lds	r26, 0x01F7
	asm volatile("lds r27, __current_process + 1");
     bd8:	b0 91 f8 01 	lds	r27, 0x01F8
	StoreContextStack()
     bdc:	0d b6       	in	r0, 0x3d	; 61
     bde:	0d 92       	st	X+, r0
     be0:	0e b6       	in	r0, 0x3e	; 62
     be2:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 9b 05 	call	0xb36	; 0xb36 <schedule>
     bec:	90 93 f8 01 	sts	0x01F8, r25
     bf0:	80 93 f7 01 	sts	0x01F7, r24
	if (__current_process == InvalidProcess) {
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	11 f4       	brne	.+4      	; 0xbfc <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     bf8:	0e 94 90 08 	call	0x1120	; 0x1120 <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     bfc:	dc 01       	movw	r26, r24
	RestoreContextStack()
     bfe:	0d 90       	ld	r0, X+
     c00:	0d be       	out	0x3d, r0	; 61
     c02:	0d 90       	ld	r0, X+
     c04:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	bf 91       	pop	r27
     c10:	af 91       	pop	r26
     c12:	9f 91       	pop	r25
     c14:	8f 91       	pop	r24
     c16:	7f 91       	pop	r23
     c18:	6f 91       	pop	r22
     c1a:	5f 91       	pop	r21
     c1c:	4f 91       	pop	r20
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	7f 90       	pop	r7
     c38:	6f 90       	pop	r6
     c3a:	5f 90       	pop	r5
     c3c:	4f 90       	pop	r4
     c3e:	3f 90       	pop	r3
     c40:	2f 90       	pop	r2
     c42:	1f 90       	pop	r1
     c44:	0f 90       	pop	r0
     c46:	0b be       	out	0x3b, r0	; 59
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     c4e:	18 95       	reti

00000c50 <init_kernel>:
}
     c50:	0e 94 4c 05 	call	0xa98	; 0xa98 <init_process>

void init_kernel() {
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	// rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     c54:	0e 94 b7 00 	call	0x16e	; 0x16e <before_scheduler>
	start_scheduler();
     c58:	0e 94 94 05 	call	0xb28	; 0xb28 <start_scheduler>
}
     c5c:	08 95       	ret

00000c5e <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
     c5e:	fc 01       	movw	r30, r24
     c60:	64 30       	cpi	r22, 0x04	; 4
     c62:	71 05       	cpc	r23, r1
     c64:	48 f4       	brcc	.+18     	; 0xc78 <setCompareMatchOutputMode+0x1a>
     c66:	db 01       	movw	r26, r22
     c68:	a8 52       	subi	r26, 0x28	; 40
     c6a:	be 4f       	sbci	r27, 0xFE	; 254
     c6c:	2c 91       	ld	r18, X
     c6e:	64 52       	subi	r22, 0x24	; 36
     c70:	7e 4f       	sbci	r23, 0xFE	; 254
     c72:	db 01       	movw	r26, r22
     c74:	3c 91       	ld	r19, X
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <setCompareMatchOutputMode+0x1e>
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
     c7c:	84 81       	ldd	r24, Z+4	; 0x04
     c7e:	95 81       	ldd	r25, Z+5	; 0x05
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	21 f4       	brne	.+8      	; 0xc8e <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
     c86:	36 95       	lsr	r19
     c88:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
     c8a:	26 95       	lsr	r18
     c8c:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
     c8e:	a0 81       	ld	r26, Z
     c90:	b1 81       	ldd	r27, Z+1	; 0x01
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	8c 91       	ld	r24, X
     c9c:	83 2b       	or	r24, r19
     c9e:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
     ca0:	01 90       	ld	r0, Z+
     ca2:	f0 81       	ld	r31, Z
     ca4:	e0 2d       	mov	r30, r0
     ca6:	01 80       	ldd	r0, Z+1	; 0x01
     ca8:	f2 81       	ldd	r31, Z+2	; 0x02
     caa:	e0 2d       	mov	r30, r0
     cac:	80 81       	ld	r24, Z
     cae:	20 95       	com	r18
     cb0:	28 23       	and	r18, r24
     cb2:	20 83       	st	Z, r18
}
     cb4:	08 95       	ret

00000cb6 <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
     cb6:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
     cb8:	80 81       	ld	r24, Z
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	82 70       	andi	r24, 0x02	; 2
     cbe:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
     cc0:	64 30       	cpi	r22, 0x04	; 4
     cc2:	71 05       	cpc	r23, r1
     cc4:	71 f1       	breq	.+92     	; 0xd22 <setTimerClockSelect+0x6c>
     cc6:	65 30       	cpi	r22, 0x05	; 5
     cc8:	71 05       	cpc	r23, r1
     cca:	68 f4       	brcc	.+26     	; 0xce6 <setTimerClockSelect+0x30>
     ccc:	61 30       	cpi	r22, 0x01	; 1
     cce:	71 05       	cpc	r23, r1
     cd0:	f9 f0       	breq	.+62     	; 0xd10 <setTimerClockSelect+0x5a>
     cd2:	61 30       	cpi	r22, 0x01	; 1
     cd4:	71 05       	cpc	r23, r1
     cd6:	d8 f1       	brcs	.+118    	; 0xd4e <setTimerClockSelect+0x98>
     cd8:	62 30       	cpi	r22, 0x02	; 2
     cda:	71 05       	cpc	r23, r1
     cdc:	e1 f0       	breq	.+56     	; 0xd16 <setTimerClockSelect+0x60>
     cde:	63 30       	cpi	r22, 0x03	; 3
     ce0:	71 05       	cpc	r23, r1
     ce2:	a1 f4       	brne	.+40     	; 0xd0c <setTimerClockSelect+0x56>
     ce4:	1b c0       	rjmp	.+54     	; 0xd1c <setTimerClockSelect+0x66>
     ce6:	67 30       	cpi	r22, 0x07	; 7
     ce8:	71 05       	cpc	r23, r1
     cea:	21 f1       	breq	.+72     	; 0xd34 <setTimerClockSelect+0x7e>
     cec:	68 30       	cpi	r22, 0x08	; 8
     cee:	71 05       	cpc	r23, r1
     cf0:	38 f4       	brcc	.+14     	; 0xd00 <setTimerClockSelect+0x4a>
     cf2:	65 30       	cpi	r22, 0x05	; 5
     cf4:	71 05       	cpc	r23, r1
     cf6:	c1 f0       	breq	.+48     	; 0xd28 <setTimerClockSelect+0x72>
     cf8:	66 30       	cpi	r22, 0x06	; 6
     cfa:	71 05       	cpc	r23, r1
     cfc:	39 f4       	brne	.+14     	; 0xd0c <setTimerClockSelect+0x56>
     cfe:	17 c0       	rjmp	.+46     	; 0xd2e <setTimerClockSelect+0x78>
     d00:	68 30       	cpi	r22, 0x08	; 8
     d02:	71 05       	cpc	r23, r1
     d04:	d1 f0       	breq	.+52     	; 0xd3a <setTimerClockSelect+0x84>
     d06:	69 30       	cpi	r22, 0x09	; 9
     d08:	71 05       	cpc	r23, r1
     d0a:	e1 f0       	breq	.+56     	; 0xd44 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	1d c0       	rjmp	.+58     	; 0xd4a <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
     d10:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
     d12:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
     d14:	27 c0       	rjmp	.+78     	; 0xd64 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
     d16:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
     d18:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
     d1a:	24 c0       	rjmp	.+72     	; 0xd64 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	e9 f4       	brne	.+58     	; 0xd5a <setTimerClockSelect+0xa4>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	b9 f0       	breq	.+46     	; 0xd54 <setTimerClockSelect+0x9e>
     d26:	19 c0       	rjmp	.+50     	; 0xd5a <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	d1 f4       	brne	.+52     	; 0xd60 <setTimerClockSelect+0xaa>
     d2c:	27 c0       	rjmp	.+78     	; 0xd7c <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	a1 f0       	breq	.+40     	; 0xd5a <setTimerClockSelect+0xa4>
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	a1 f0       	breq	.+40     	; 0xd60 <setTimerClockSelect+0xaa>
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	f9 f4       	brne	.+62     	; 0xd7c <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
     d3e:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	d1 f4       	brne	.+52     	; 0xd7c <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
     d48:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
     d4e:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
     d54:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
     d56:	84 e0       	ldi	r24, 0x04	; 4
     d58:	05 c0       	rjmp	.+10     	; 0xd64 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
     d5a:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
     d60:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
     d62:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
     d64:	a3 81       	ldd	r26, Z+3	; 0x03
     d66:	b4 81       	ldd	r27, Z+4	; 0x04
     d68:	2c 91       	ld	r18, X
     d6a:	29 2b       	or	r18, r25
     d6c:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
     d6e:	03 80       	ldd	r0, Z+3	; 0x03
     d70:	f4 81       	ldd	r31, Z+4	; 0x04
     d72:	e0 2d       	mov	r30, r0
     d74:	90 81       	ld	r25, Z
     d76:	80 95       	com	r24
     d78:	89 23       	and	r24, r25
     d7a:	80 83       	st	Z, r24
     d7c:	08 95       	ret

00000d7e <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
     d7e:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
     d80:	80 81       	ld	r24, Z
     d82:	82 ff       	sbrs	r24, 2
     d84:	54 c0       	rjmp	.+168    	; 0xe2e <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
     d86:	65 30       	cpi	r22, 0x05	; 5
     d88:	71 05       	cpc	r23, r1
     d8a:	b9 f1       	breq	.+110    	; 0xdfa <setWaveformGenerationMode+0x7c>
     d8c:	66 30       	cpi	r22, 0x06	; 6
     d8e:	71 05       	cpc	r23, r1
     d90:	b0 f4       	brcc	.+44     	; 0xdbe <setWaveformGenerationMode+0x40>
     d92:	62 30       	cpi	r22, 0x02	; 2
     d94:	71 05       	cpc	r23, r1
     d96:	69 f1       	breq	.+90     	; 0xdf2 <setWaveformGenerationMode+0x74>
     d98:	63 30       	cpi	r22, 0x03	; 3
     d9a:	71 05       	cpc	r23, r1
     d9c:	40 f4       	brcc	.+16     	; 0xdae <setWaveformGenerationMode+0x30>
     d9e:	61 15       	cp	r22, r1
     da0:	71 05       	cpc	r23, r1
     da2:	19 f1       	breq	.+70     	; 0xdea <setWaveformGenerationMode+0x6c>
     da4:	61 30       	cpi	r22, 0x01	; 1
     da6:	71 05       	cpc	r23, r1
     da8:	09 f0       	breq	.+2      	; 0xdac <setWaveformGenerationMode+0x2e>
     daa:	8f c0       	rjmp	.+286    	; 0xeca <setWaveformGenerationMode+0x14c>
     dac:	6e c0       	rjmp	.+220    	; 0xe8a <setWaveformGenerationMode+0x10c>
     dae:	63 30       	cpi	r22, 0x03	; 3
     db0:	71 05       	cpc	r23, r1
     db2:	29 f1       	breq	.+74     	; 0xdfe <setWaveformGenerationMode+0x80>
     db4:	64 30       	cpi	r22, 0x04	; 4
     db6:	71 05       	cpc	r23, r1
     db8:	09 f0       	breq	.+2      	; 0xdbc <setWaveformGenerationMode+0x3e>
     dba:	87 c0       	rjmp	.+270    	; 0xeca <setWaveformGenerationMode+0x14c>
     dbc:	24 c0       	rjmp	.+72     	; 0xe06 <setWaveformGenerationMode+0x88>
     dbe:	68 30       	cpi	r22, 0x08	; 8
     dc0:	71 05       	cpc	r23, r1
     dc2:	29 f1       	breq	.+74     	; 0xe0e <setWaveformGenerationMode+0x90>
     dc4:	69 30       	cpi	r22, 0x09	; 9
     dc6:	71 05       	cpc	r23, r1
     dc8:	40 f4       	brcc	.+16     	; 0xdda <setWaveformGenerationMode+0x5c>
     dca:	66 30       	cpi	r22, 0x06	; 6
     dcc:	71 05       	cpc	r23, r1
     dce:	39 f1       	breq	.+78     	; 0xe1e <setWaveformGenerationMode+0xa0>
     dd0:	67 30       	cpi	r22, 0x07	; 7
     dd2:	71 05       	cpc	r23, r1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <setWaveformGenerationMode+0x5a>
     dd6:	79 c0       	rjmp	.+242    	; 0xeca <setWaveformGenerationMode+0x14c>
     dd8:	26 c0       	rjmp	.+76     	; 0xe26 <setWaveformGenerationMode+0xa8>
     dda:	69 30       	cpi	r22, 0x09	; 9
     ddc:	71 05       	cpc	r23, r1
     dde:	d9 f0       	breq	.+54     	; 0xe16 <setWaveformGenerationMode+0x98>
     de0:	6a 30       	cpi	r22, 0x0A	; 10
     de2:	71 05       	cpc	r23, r1
     de4:	09 f0       	breq	.+2      	; 0xde8 <setWaveformGenerationMode+0x6a>
     de6:	71 c0       	rjmp	.+226    	; 0xeca <setWaveformGenerationMode+0x14c>
     de8:	10 c0       	rjmp	.+32     	; 0xe0a <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     dea:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
     dec:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     dee:	88 e1       	ldi	r24, 0x18	; 24
     df0:	4f c0       	rjmp	.+158    	; 0xe90 <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
     df2:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
     df4:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
     df6:	80 e1       	ldi	r24, 0x10	; 16
     df8:	46 c0       	rjmp	.+140    	; 0xe86 <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
     dfa:	98 e1       	ldi	r25, 0x18	; 24
     dfc:	3a c0       	rjmp	.+116    	; 0xe72 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     dfe:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
     e00:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     e02:	88 e1       	ldi	r24, 0x18	; 24
     e04:	40 c0       	rjmp	.+128    	; 0xe86 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
     e06:	90 e1       	ldi	r25, 0x10	; 16
     e08:	2f c0       	rjmp	.+94     	; 0xe68 <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
     e0a:	90 e1       	ldi	r25, 0x10	; 16
     e0c:	36 c0       	rjmp	.+108    	; 0xe7a <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
     e0e:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
     e10:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
     e12:	80 e1       	ldi	r24, 0x10	; 16
     e14:	42 c0       	rjmp	.+132    	; 0xe9a <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
     e16:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
     e18:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
     e1a:	80 e1       	ldi	r24, 0x10	; 16
     e1c:	27 c0       	rjmp	.+78     	; 0xe6c <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e1e:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
     e20:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     e22:	88 e1       	ldi	r24, 0x18	; 24
     e24:	3a c0       	rjmp	.+116    	; 0xe9a <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e26:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
     e28:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     e2a:	88 e1       	ldi	r24, 0x18	; 24
     e2c:	1f c0       	rjmp	.+62     	; 0xe6c <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
     e2e:	62 30       	cpi	r22, 0x02	; 2
     e30:	71 05       	cpc	r23, r1
     e32:	c9 f0       	breq	.+50     	; 0xe66 <setWaveformGenerationMode+0xe8>
     e34:	63 30       	cpi	r22, 0x03	; 3
     e36:	71 05       	cpc	r23, r1
     e38:	40 f4       	brcc	.+16     	; 0xe4a <setWaveformGenerationMode+0xcc>
     e3a:	61 15       	cp	r22, r1
     e3c:	71 05       	cpc	r23, r1
     e3e:	79 f0       	breq	.+30     	; 0xe5e <setWaveformGenerationMode+0xe0>
     e40:	61 30       	cpi	r22, 0x01	; 1
     e42:	71 05       	cpc	r23, r1
     e44:	09 f0       	breq	.+2      	; 0xe48 <setWaveformGenerationMode+0xca>
     e46:	41 c0       	rjmp	.+130    	; 0xeca <setWaveformGenerationMode+0x14c>
     e48:	25 c0       	rjmp	.+74     	; 0xe94 <setWaveformGenerationMode+0x116>
     e4a:	64 30       	cpi	r22, 0x04	; 4
     e4c:	71 05       	cpc	r23, r1
     e4e:	c1 f0       	breq	.+48     	; 0xe80 <setWaveformGenerationMode+0x102>
     e50:	64 30       	cpi	r22, 0x04	; 4
     e52:	71 05       	cpc	r23, r1
     e54:	88 f0       	brcs	.+34     	; 0xe78 <setWaveformGenerationMode+0xfa>
     e56:	65 30       	cpi	r22, 0x05	; 5
     e58:	71 05       	cpc	r23, r1
     e5a:	b9 f5       	brne	.+110    	; 0xeca <setWaveformGenerationMode+0x14c>
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e5e:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
     e60:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	15 c0       	rjmp	.+42     	; 0xe90 <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e66:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
     e68:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
     e6a:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
     e6c:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
     e6e:	16 c0       	rjmp	.+44     	; 0xe9c <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
     e70:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
     e72:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	fa cf       	rjmp	.-12     	; 0xe6c <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e78:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
     e7a:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	03 c0       	rjmp	.+6      	; 0xe86 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
     e80:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
     e82:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
     e84:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
     e86:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
     e8a:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
     e8c:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
     e8e:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
     e90:	23 e0       	ldi	r18, 0x03	; 3
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e94:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
     e96:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
     e98:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
     e9a:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
     e9c:	a1 81       	ldd	r26, Z+1	; 0x01
     e9e:	b2 81       	ldd	r27, Z+2	; 0x02
     ea0:	4c 91       	ld	r20, X
     ea2:	43 2b       	or	r20, r19
     ea4:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
     ea6:	a1 81       	ldd	r26, Z+1	; 0x01
     ea8:	b2 81       	ldd	r27, Z+2	; 0x02
     eaa:	3c 91       	ld	r19, X
     eac:	20 95       	com	r18
     eae:	23 23       	and	r18, r19
     eb0:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
     eb2:	a3 81       	ldd	r26, Z+3	; 0x03
     eb4:	b4 81       	ldd	r27, Z+4	; 0x04
     eb6:	2c 91       	ld	r18, X
     eb8:	29 2b       	or	r18, r25
     eba:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
     ebc:	03 80       	ldd	r0, Z+3	; 0x03
     ebe:	f4 81       	ldd	r31, Z+4	; 0x04
     ec0:	e0 2d       	mov	r30, r0
     ec2:	90 81       	ld	r25, Z
     ec4:	80 95       	com	r24
     ec6:	89 23       	and	r24, r25
     ec8:	80 83       	st	Z, r24
     eca:	08 95       	ret

00000ecc <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
     ecc:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
     ece:	ed 91       	ld	r30, X+
     ed0:	fc 91       	ld	r31, X
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	05 80       	ldd	r0, Z+5	; 0x05
     ed6:	f6 81       	ldd	r31, Z+6	; 0x06
     ed8:	e0 2d       	mov	r30, r0
     eda:	20 81       	ld	r18, Z
     edc:	14 96       	adiw	r26, 0x04	; 4
     ede:	8d 91       	ld	r24, X+
     ee0:	9c 91       	ld	r25, X
     ee2:	15 97       	sbiw	r26, 0x05	; 5
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	11 f4       	brne	.+4      	; 0xeec <enableTimerInterrupt+0x20>
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	01 c0       	rjmp	.+2      	; 0xeee <enableTimerInterrupt+0x22>
     eec:	84 e0       	ldi	r24, 0x04	; 4
     eee:	82 2b       	or	r24, r18
     ef0:	80 83       	st	Z, r24
}
     ef2:	08 95       	ret

00000ef4 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
     efa:	8e 81       	ldd	r24, Y+6	; 0x06
     efc:	9f 81       	ldd	r25, Y+7	; 0x07
     efe:	0e 94 aa 08 	call	0x1154	; 0x1154 <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
     f02:	ce 01       	movw	r24, r28
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	0e 94 2f 06 	call	0xc5e	; 0xc5e <setCompareMatchOutputMode>
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 2f 06 	call	0xc5e	; 0xc5e <setCompareMatchOutputMode>
}
     f1a:	08 95       	ret

00000f1c <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
     f1c:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
     f1e:	a0 81       	ld	r26, Z
     f20:	b1 81       	ldd	r27, Z+1	; 0x01
     f22:	8c 91       	ld	r24, X
     f24:	82 ff       	sbrs	r24, 2
     f26:	0d c0       	rjmp	.+26     	; 0xf42 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
     f28:	8f b7       	in	r24, 0x3f	; 63
		cli();
     f2a:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
     f2c:	a2 81       	ldd	r26, Z+2	; 0x02
     f2e:	b3 81       	ldd	r27, Z+3	; 0x03
     f30:	11 96       	adiw	r26, 0x01	; 1
     f32:	7c 93       	st	X, r23
     f34:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
     f36:	02 80       	ldd	r0, Z+2	; 0x02
     f38:	f3 81       	ldd	r31, Z+3	; 0x03
     f3a:	e0 2d       	mov	r30, r0
     f3c:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
     f3e:	8f bf       	out	0x3f, r24	; 63
     f40:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
     f42:	02 80       	ldd	r0, Z+2	; 0x02
     f44:	f3 81       	ldd	r31, Z+3	; 0x03
     f46:	e0 2d       	mov	r30, r0
     f48:	70 83       	st	Z, r23
     f4a:	08 95       	ret

00000f4c <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
     f4c:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
     f4e:	a0 81       	ld	r26, Z
     f50:	b1 81       	ldd	r27, Z+1	; 0x01
     f52:	8c 91       	ld	r24, X
     f54:	82 ff       	sbrs	r24, 2
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
     f58:	2f b7       	in	r18, 0x3f	; 63
		cli();
     f5a:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
     f5c:	02 80       	ldd	r0, Z+2	; 0x02
     f5e:	f3 81       	ldd	r31, Z+3	; 0x03
     f60:	e0 2d       	mov	r30, r0
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
     f66:	2f bf       	out	0x3f, r18	; 63
     f68:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
     f6a:	02 80       	ldd	r0, Z+2	; 0x02
     f6c:	f3 81       	ldd	r31, Z+3	; 0x03
     f6e:	e0 2d       	mov	r30, r0
     f70:	90 81       	ld	r25, Z
     f72:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
     f74:	08 95       	ret

00000f76 <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	8c 01       	movw	r16, r24
     f80:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	64 e0       	ldi	r22, 0x04	; 4
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	0e 94 0b 09 	call	0x1216	; 0x1216 <calloc>
     f8e:	fc 01       	movw	r30, r24
	elem->thread = thread;
     f90:	11 83       	std	Z+1, r17	; 0x01
     f92:	00 83       	st	Z, r16
	elem->next = queue->first;
     f94:	de 01       	movw	r26, r28
     f96:	aa 0f       	add	r26, r26
     f98:	bb 1f       	adc	r27, r27
     f9a:	aa 0f       	add	r26, r26
     f9c:	bb 1f       	adc	r27, r27
     f9e:	ac 0f       	add	r26, r28
     fa0:	bd 1f       	adc	r27, r29
     fa2:	a9 52       	subi	r26, 0x29	; 41
     fa4:	bd 4f       	sbci	r27, 0xFD	; 253
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	93 83       	std	Z+3, r25	; 0x03
     fae:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
     fb0:	11 96       	adiw	r26, 0x01	; 1
     fb2:	fc 93       	st	X, r31
     fb4:	ee 93       	st	-X, r30
	if (queue->count == 0)
     fb6:	14 96       	adiw	r26, 0x04	; 4
     fb8:	8c 91       	ld	r24, X
     fba:	14 97       	sbiw	r26, 0x04	; 4
     fbc:	88 23       	and	r24, r24
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <insertThreadIntoQueue+0x52>
		queue->current = elem;
     fc0:	13 96       	adiw	r26, 0x03	; 3
     fc2:	fc 93       	st	X, r31
     fc4:	ee 93       	st	-X, r30
     fc6:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
     fc8:	fe 01       	movw	r30, r28
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	ec 0f       	add	r30, r28
     fd4:	fd 1f       	adc	r31, r29
     fd6:	e9 52       	subi	r30, 0x29	; 41
     fd8:	fd 4f       	sbci	r31, 0xFD	; 253
     fda:	84 81       	ldd	r24, Z+4	; 0x04
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
     fe0:	80 91 fd 01 	lds	r24, 0x01FD
     fe4:	90 91 fe 01 	lds	r25, 0x01FE
     fe8:	8c 17       	cp	r24, r28
     fea:	9d 07       	cpc	r25, r29
     fec:	20 f4       	brcc	.+8      	; 0xff6 <insertThreadIntoQueue+0x80>
     fee:	d0 93 fe 01 	sts	0x01FE, r29
     ff2:	c0 93 fd 01 	sts	0x01FD, r28
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
    100a:	0e 94 18 05 	call	0xa30	; 0xa30 <createProcess>
    100e:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1010:	be 01       	movw	r22, r28
    1012:	0e 94 bb 07 	call	0xf76	; 0xf76 <insertThreadIntoQueue>
	return thread;
}
    1016:	c8 01       	movw	r24, r16
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	08 95       	ret

00001022 <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
    1022:	63 e0       	ldi	r22, 0x03	; 3
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 00 08 	call	0x1000	; 0x1000 <createThread2>
}
    102a:	08 95       	ret

0000102c <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	eb 01       	movw	r28, r22
    1036:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
    1038:	0e 94 10 05 	call	0xa20	; 0xa20 <createProcess2>
    103c:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    103e:	be 01       	movw	r22, r28
    1040:	0e 94 bb 07 	call	0xf76	; 0xf76 <insertThreadIntoQueue>
	return thread;
}
    1044:	c8 01       	movw	r24, r16
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	eb 01       	movw	r28, r22
    105a:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
    105c:	a9 01       	movw	r20, r18
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	0e 94 e6 04 	call	0x9cc	; 0x9cc <createProcess3>
    1064:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1066:	be 01       	movw	r22, r28
    1068:	0e 94 bb 07 	call	0xf76	; 0xf76 <insertThreadIntoQueue>
	return thread;
}
    106c:	c8 01       	movw	r24, r16
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    1078:	80 91 fd 01 	lds	r24, 0x01FD
    107c:	90 91 fe 01 	lds	r25, 0x01FE
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <rr_schedule+0xc>
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	29 f4       	brne	.+10     	; 0x1092 <rr_schedule+0x1a>
    1088:	10 92 fd 01 	sts	0x01FD, r1
    108c:	10 92 fe 01 	sts	0x01FE, r1
    1090:	10 c0       	rjmp	.+32     	; 0x10b2 <rr_schedule+0x3a>
    1092:	fc 01       	movw	r30, r24
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	e8 0f       	add	r30, r24
    109e:	f9 1f       	adc	r31, r25
    10a0:	e9 52       	subi	r30, 0x29	; 41
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	24 81       	ldd	r18, Z+4	; 0x04
    10a6:	22 23       	and	r18, r18
    10a8:	61 f3       	breq	.-40     	; 0x1082 <rr_schedule+0xa>
    10aa:	80 93 fd 01 	sts	0x01FD, r24
    10ae:	90 93 fe 01 	sts	0x01FE, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    10b2:	fc 01       	movw	r30, r24
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e8 0f       	add	r30, r24
    10be:	f9 1f       	adc	r31, r25
    10c0:	e9 52       	subi	r30, 0x29	; 41
    10c2:	fd 4f       	sbci	r31, 0xFD	; 253
    10c4:	24 81       	ldd	r18, Z+4	; 0x04
    10c6:	22 23       	and	r18, r18
    10c8:	c9 f0       	breq	.+50     	; 0x10fc <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    10ca:	a2 81       	ldd	r26, Z+2	; 0x02
    10cc:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    10ce:	12 96       	adiw	r26, 0x02	; 2
    10d0:	0d 90       	ld	r0, X+
    10d2:	bc 91       	ld	r27, X
    10d4:	a0 2d       	mov	r26, r0
    10d6:	10 97       	sbiw	r26, 0x00	; 0
    10d8:	11 f4       	brne	.+4      	; 0x10de <rr_schedule+0x66>
    10da:	a0 81       	ld	r26, Z
    10dc:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    10de:	fc 01       	movw	r30, r24
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	ee 0f       	add	r30, r30
    10e6:	ff 1f       	adc	r31, r31
    10e8:	e8 0f       	add	r30, r24
    10ea:	f9 1f       	adc	r31, r25
    10ec:	e9 52       	subi	r30, 0x29	; 41
    10ee:	fd 4f       	sbci	r31, 0xFD	; 253
    10f0:	b3 83       	std	Z+3, r27	; 0x03
    10f2:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    10f4:	2d 91       	ld	r18, X+
    10f6:	3c 91       	ld	r19, X
    10f8:	11 97       	sbiw	r26, 0x01	; 1
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    1100:	c9 01       	movw	r24, r18
    1102:	08 95       	ret

00001104 <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    110a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <getCurrentProcess>
    110e:	be 01       	movw	r22, r28
    1110:	0e 94 bb 07 	call	0xf76	; 0xf76 <insertThreadIntoQueue>
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	08 95       	ret

0000111a <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    111a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <getCurrentProcess>
}
    111e:	08 95       	ret

00001120 <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    1120:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    1122:	84 b7       	in	r24, 0x34	; 52
    1124:	88 70       	andi	r24, 0x08	; 8
    1126:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    1128:	80 e1       	ldi	r24, 0x10	; 16
    112a:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	80 93 60 00 	sts	0x0060, r24
    1134:	ff cf       	rjmp	.-2      	; 0x1134 <HARDWARE_RESET+0x14>

00001136 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    1136:	dc 01       	movw	r26, r24
    1138:	14 96       	adiw	r26, 0x04	; 4
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	15 97       	sbiw	r26, 0x05	; 5
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	80 83       	st	Z, r24
}
    1144:	08 95       	ret

00001146 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    1146:	dc 01       	movw	r26, r24
    1148:	14 96       	adiw	r26, 0x04	; 4
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	15 97       	sbiw	r26, 0x05	; 5
    1150:	10 82       	st	Z, r1
}
    1152:	08 95       	ret

00001154 <setPinOutput>:

void setPinOutput(PPin pin) {
    1154:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    1156:	ed 91       	ld	r30, X+
    1158:	fc 91       	ld	r31, X
    115a:	11 97       	sbiw	r26, 0x01	; 1
    115c:	04 80       	ldd	r0, Z+4	; 0x04
    115e:	f5 81       	ldd	r31, Z+5	; 0x05
    1160:	e0 2d       	mov	r30, r0
    1162:	80 81       	ld	r24, Z
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	9c 91       	ld	r25, X
    1168:	12 97       	sbiw	r26, 0x02	; 2
    116a:	89 2b       	or	r24, r25
    116c:	80 83       	st	Z, r24
}
    116e:	08 95       	ret

00001170 <setPinInput>:

void setPinInput(PPin pin) {
    1170:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	11 97       	sbiw	r26, 0x01	; 1
    1178:	04 80       	ldd	r0, Z+4	; 0x04
    117a:	f5 81       	ldd	r31, Z+5	; 0x05
    117c:	e0 2d       	mov	r30, r0
    117e:	90 81       	ld	r25, Z
    1180:	12 96       	adiw	r26, 0x02	; 2
    1182:	8c 91       	ld	r24, X
    1184:	12 97       	sbiw	r26, 0x02	; 2
    1186:	80 95       	com	r24
    1188:	89 23       	and	r24, r25
    118a:	80 83       	st	Z, r24
}
    118c:	08 95       	ret

0000118e <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    118e:	dc 01       	movw	r26, r24
    1190:	ed 91       	ld	r30, X+
    1192:	fc 91       	ld	r31, X
    1194:	11 97       	sbiw	r26, 0x01	; 1
    1196:	60 83       	st	Z, r22
}
    1198:	08 95       	ret

0000119a <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    119a:	dc 01       	movw	r26, r24
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	ed 91       	ld	r30, X+
    11a0:	fc 91       	ld	r31, X
    11a2:	13 97       	sbiw	r26, 0x03	; 3
    11a4:	80 81       	ld	r24, Z
}
    11a6:	08 95       	ret

000011a8 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    11a8:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    11aa:	ed 91       	ld	r30, X+
    11ac:	fc 91       	ld	r31, X
    11ae:	11 97       	sbiw	r26, 0x01	; 1
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	80 81       	ld	r24, Z
    11b8:	12 96       	adiw	r26, 0x02	; 2
    11ba:	9c 91       	ld	r25, X
    11bc:	12 97       	sbiw	r26, 0x02	; 2
    11be:	89 2b       	or	r24, r25
    11c0:	80 83       	st	Z, r24
}
    11c2:	08 95       	ret

000011c4 <setPinZero>:

void setPinZero(PPin pin) {
    11c4:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    11c6:	ed 91       	ld	r30, X+
    11c8:	fc 91       	ld	r31, X
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	01 90       	ld	r0, Z+
    11ce:	f0 81       	ld	r31, Z
    11d0:	e0 2d       	mov	r30, r0
    11d2:	90 81       	ld	r25, Z
    11d4:	12 96       	adiw	r26, 0x02	; 2
    11d6:	8c 91       	ld	r24, X
    11d8:	12 97       	sbiw	r26, 0x02	; 2
    11da:	80 95       	com	r24
    11dc:	89 23       	and	r24, r25
    11de:	80 83       	st	Z, r24
}
    11e0:	08 95       	ret

000011e2 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    11e2:	61 15       	cp	r22, r1
    11e4:	71 05       	cpc	r23, r1
    11e6:	19 f0       	breq	.+6      	; 0x11ee <writePin+0xc>
    11e8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <setPinOne>
    11ec:	08 95       	ret
	else setPinZero(pin);
    11ee:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <setPinZero>
    11f2:	08 95       	ret

000011f4 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    11f4:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    11f6:	a0 81       	ld	r26, Z
    11f8:	b1 81       	ldd	r27, Z+1	; 0x01
    11fa:	12 96       	adiw	r26, 0x02	; 2
    11fc:	0d 90       	ld	r0, X+
    11fe:	bc 91       	ld	r27, X
    1200:	a0 2d       	mov	r26, r0
    1202:	8c 91       	ld	r24, X
    1204:	92 81       	ldd	r25, Z+2	; 0x02
    1206:	89 23       	and	r24, r25
		return TRUE;
    1208:	21 e0       	ldi	r18, 0x01	; 1
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	11 f4       	brne	.+4      	; 0x1212 <readPin+0x1e>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    1212:	c9 01       	movw	r24, r18
    1214:	08 95       	ret

00001216 <calloc>:
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	68 9f       	mul	r22, r24
    1224:	80 01       	movw	r16, r0
    1226:	69 9f       	mul	r22, r25
    1228:	10 0d       	add	r17, r0
    122a:	78 9f       	mul	r23, r24
    122c:	10 0d       	add	r17, r0
    122e:	11 24       	eor	r1, r1
    1230:	c8 01       	movw	r24, r16
    1232:	0e 94 30 09 	call	0x1260	; 0x1260 <malloc>
    1236:	e8 2e       	mov	r14, r24
    1238:	e7 01       	movw	r28, r14
    123a:	7e 01       	movw	r14, r28
    123c:	f9 2e       	mov	r15, r25
    123e:	e7 01       	movw	r28, r14
    1240:	20 97       	sbiw	r28, 0x00	; 0
    1242:	31 f0       	breq	.+12     	; 0x1250 <calloc+0x3a>
    1244:	8e 2d       	mov	r24, r14
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	a8 01       	movw	r20, r16
    124c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <memset>
    1250:	ce 01       	movw	r24, r28
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	08 95       	ret

00001260 <malloc>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	91 05       	cpc	r25, r1
    1268:	10 f4       	brcc	.+4      	; 0x126e <malloc+0xe>
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	e0 91 fc 02 	lds	r30, 0x02FC
    1272:	f0 91 fd 02 	lds	r31, 0x02FD
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	26 c0       	rjmp	.+76     	; 0x12cc <malloc+0x6c>
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	68 17       	cp	r22, r24
    1286:	79 07       	cpc	r23, r25
    1288:	e0 f0       	brcs	.+56     	; 0x12c2 <malloc+0x62>
    128a:	68 17       	cp	r22, r24
    128c:	79 07       	cpc	r23, r25
    128e:	81 f4       	brne	.+32     	; 0x12b0 <malloc+0x50>
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	93 81       	ldd	r25, Z+3	; 0x03
    1294:	21 15       	cp	r18, r1
    1296:	31 05       	cpc	r19, r1
    1298:	31 f0       	breq	.+12     	; 0x12a6 <malloc+0x46>
    129a:	d9 01       	movw	r26, r18
    129c:	13 96       	adiw	r26, 0x03	; 3
    129e:	9c 93       	st	X, r25
    12a0:	8e 93       	st	-X, r24
    12a2:	12 97       	sbiw	r26, 0x02	; 2
    12a4:	2b c0       	rjmp	.+86     	; 0x12fc <malloc+0x9c>
    12a6:	90 93 fd 02 	sts	0x02FD, r25
    12aa:	80 93 fc 02 	sts	0x02FC, r24
    12ae:	26 c0       	rjmp	.+76     	; 0x12fc <malloc+0x9c>
    12b0:	41 15       	cp	r20, r1
    12b2:	51 05       	cpc	r21, r1
    12b4:	19 f0       	breq	.+6      	; 0x12bc <malloc+0x5c>
    12b6:	64 17       	cp	r22, r20
    12b8:	75 07       	cpc	r23, r21
    12ba:	18 f4       	brcc	.+6      	; 0x12c2 <malloc+0x62>
    12bc:	ab 01       	movw	r20, r22
    12be:	e9 01       	movw	r28, r18
    12c0:	df 01       	movw	r26, r30
    12c2:	9f 01       	movw	r18, r30
    12c4:	72 81       	ldd	r23, Z+2	; 0x02
    12c6:	63 81       	ldd	r22, Z+3	; 0x03
    12c8:	e7 2f       	mov	r30, r23
    12ca:	f6 2f       	mov	r31, r22
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	c1 f6       	brne	.-80     	; 0x1280 <malloc+0x20>
    12d0:	41 15       	cp	r20, r1
    12d2:	51 05       	cpc	r21, r1
    12d4:	01 f1       	breq	.+64     	; 0x1316 <malloc+0xb6>
    12d6:	48 1b       	sub	r20, r24
    12d8:	59 0b       	sbc	r21, r25
    12da:	44 30       	cpi	r20, 0x04	; 4
    12dc:	51 05       	cpc	r21, r1
    12de:	80 f4       	brcc	.+32     	; 0x1300 <malloc+0xa0>
    12e0:	12 96       	adiw	r26, 0x02	; 2
    12e2:	8d 91       	ld	r24, X+
    12e4:	9c 91       	ld	r25, X
    12e6:	13 97       	sbiw	r26, 0x03	; 3
    12e8:	20 97       	sbiw	r28, 0x00	; 0
    12ea:	19 f0       	breq	.+6      	; 0x12f2 <malloc+0x92>
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <malloc+0x9a>
    12f2:	90 93 fd 02 	sts	0x02FD, r25
    12f6:	80 93 fc 02 	sts	0x02FC, r24
    12fa:	fd 01       	movw	r30, r26
    12fc:	32 96       	adiw	r30, 0x02	; 2
    12fe:	46 c0       	rjmp	.+140    	; 0x138c <malloc+0x12c>
    1300:	fd 01       	movw	r30, r26
    1302:	e4 0f       	add	r30, r20
    1304:	f5 1f       	adc	r31, r21
    1306:	81 93       	st	Z+, r24
    1308:	91 93       	st	Z+, r25
    130a:	42 50       	subi	r20, 0x02	; 2
    130c:	50 40       	sbci	r21, 0x00	; 0
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	5c 93       	st	X, r21
    1312:	4e 93       	st	-X, r20
    1314:	3b c0       	rjmp	.+118    	; 0x138c <malloc+0x12c>
    1316:	20 91 fa 02 	lds	r18, 0x02FA
    131a:	30 91 fb 02 	lds	r19, 0x02FB
    131e:	21 15       	cp	r18, r1
    1320:	31 05       	cpc	r19, r1
    1322:	41 f4       	brne	.+16     	; 0x1334 <malloc+0xd4>
    1324:	20 91 e2 01 	lds	r18, 0x01E2
    1328:	30 91 e3 01 	lds	r19, 0x01E3
    132c:	30 93 fb 02 	sts	0x02FB, r19
    1330:	20 93 fa 02 	sts	0x02FA, r18
    1334:	20 91 e4 01 	lds	r18, 0x01E4
    1338:	30 91 e5 01 	lds	r19, 0x01E5
    133c:	21 15       	cp	r18, r1
    133e:	31 05       	cpc	r19, r1
    1340:	41 f4       	brne	.+16     	; 0x1352 <malloc+0xf2>
    1342:	2d b7       	in	r18, 0x3d	; 61
    1344:	3e b7       	in	r19, 0x3e	; 62
    1346:	40 91 e0 01 	lds	r20, 0x01E0
    134a:	50 91 e1 01 	lds	r21, 0x01E1
    134e:	24 1b       	sub	r18, r20
    1350:	35 0b       	sbc	r19, r21
    1352:	e0 91 fa 02 	lds	r30, 0x02FA
    1356:	f0 91 fb 02 	lds	r31, 0x02FB
    135a:	e2 17       	cp	r30, r18
    135c:	f3 07       	cpc	r31, r19
    135e:	a0 f4       	brcc	.+40     	; 0x1388 <malloc+0x128>
    1360:	2e 1b       	sub	r18, r30
    1362:	3f 0b       	sbc	r19, r31
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	78 f0       	brcs	.+30     	; 0x1388 <malloc+0x128>
    136a:	ac 01       	movw	r20, r24
    136c:	4e 5f       	subi	r20, 0xFE	; 254
    136e:	5f 4f       	sbci	r21, 0xFF	; 255
    1370:	24 17       	cp	r18, r20
    1372:	35 07       	cpc	r19, r21
    1374:	48 f0       	brcs	.+18     	; 0x1388 <malloc+0x128>
    1376:	4e 0f       	add	r20, r30
    1378:	5f 1f       	adc	r21, r31
    137a:	50 93 fb 02 	sts	0x02FB, r21
    137e:	40 93 fa 02 	sts	0x02FA, r20
    1382:	81 93       	st	Z+, r24
    1384:	91 93       	st	Z+, r25
    1386:	02 c0       	rjmp	.+4      	; 0x138c <malloc+0x12c>
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	cf 01       	movw	r24, r30
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	08 95       	ret

00001394 <free>:
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	09 f4       	brne	.+2      	; 0x139e <free+0xa>
    139c:	91 c0       	rjmp	.+290    	; 0x14c0 <free+0x12c>
    139e:	fc 01       	movw	r30, r24
    13a0:	32 97       	sbiw	r30, 0x02	; 2
    13a2:	13 82       	std	Z+3, r1	; 0x03
    13a4:	12 82       	std	Z+2, r1	; 0x02
    13a6:	60 91 fc 02 	lds	r22, 0x02FC
    13aa:	70 91 fd 02 	lds	r23, 0x02FD
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	81 f4       	brne	.+32     	; 0x13d4 <free+0x40>
    13b4:	20 81       	ld	r18, Z
    13b6:	31 81       	ldd	r19, Z+1	; 0x01
    13b8:	28 0f       	add	r18, r24
    13ba:	39 1f       	adc	r19, r25
    13bc:	80 91 fa 02 	lds	r24, 0x02FA
    13c0:	90 91 fb 02 	lds	r25, 0x02FB
    13c4:	82 17       	cp	r24, r18
    13c6:	93 07       	cpc	r25, r19
    13c8:	99 f5       	brne	.+102    	; 0x1430 <free+0x9c>
    13ca:	f0 93 fb 02 	sts	0x02FB, r31
    13ce:	e0 93 fa 02 	sts	0x02FA, r30
    13d2:	76 c0       	rjmp	.+236    	; 0x14c0 <free+0x12c>
    13d4:	db 01       	movw	r26, r22
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <free+0x4c>
    13dc:	cd 01       	movw	r24, r26
    13de:	d9 01       	movw	r26, r18
    13e0:	ae 17       	cp	r26, r30
    13e2:	bf 07       	cpc	r27, r31
    13e4:	48 f4       	brcc	.+18     	; 0x13f8 <free+0x64>
    13e6:	12 96       	adiw	r26, 0x02	; 2
    13e8:	2d 91       	ld	r18, X+
    13ea:	3c 91       	ld	r19, X
    13ec:	13 97       	sbiw	r26, 0x03	; 3
    13ee:	21 15       	cp	r18, r1
    13f0:	31 05       	cpc	r19, r1
    13f2:	a1 f7       	brne	.-24     	; 0x13dc <free+0x48>
    13f4:	cd 01       	movw	r24, r26
    13f6:	21 c0       	rjmp	.+66     	; 0x143a <free+0xa6>
    13f8:	b3 83       	std	Z+3, r27	; 0x03
    13fa:	a2 83       	std	Z+2, r26	; 0x02
    13fc:	ef 01       	movw	r28, r30
    13fe:	49 91       	ld	r20, Y+
    1400:	59 91       	ld	r21, Y+
    1402:	9e 01       	movw	r18, r28
    1404:	24 0f       	add	r18, r20
    1406:	35 1f       	adc	r19, r21
    1408:	a2 17       	cp	r26, r18
    140a:	b3 07       	cpc	r27, r19
    140c:	79 f4       	brne	.+30     	; 0x142c <free+0x98>
    140e:	2d 91       	ld	r18, X+
    1410:	3c 91       	ld	r19, X
    1412:	11 97       	sbiw	r26, 0x01	; 1
    1414:	24 0f       	add	r18, r20
    1416:	35 1f       	adc	r19, r21
    1418:	2e 5f       	subi	r18, 0xFE	; 254
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	31 83       	std	Z+1, r19	; 0x01
    141e:	20 83       	st	Z, r18
    1420:	12 96       	adiw	r26, 0x02	; 2
    1422:	2d 91       	ld	r18, X+
    1424:	3c 91       	ld	r19, X
    1426:	13 97       	sbiw	r26, 0x03	; 3
    1428:	33 83       	std	Z+3, r19	; 0x03
    142a:	22 83       	std	Z+2, r18	; 0x02
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	29 f4       	brne	.+10     	; 0x143a <free+0xa6>
    1430:	f0 93 fd 02 	sts	0x02FD, r31
    1434:	e0 93 fc 02 	sts	0x02FC, r30
    1438:	43 c0       	rjmp	.+134    	; 0x14c0 <free+0x12c>
    143a:	dc 01       	movw	r26, r24
    143c:	13 96       	adiw	r26, 0x03	; 3
    143e:	fc 93       	st	X, r31
    1440:	ee 93       	st	-X, r30
    1442:	12 97       	sbiw	r26, 0x02	; 2
    1444:	4d 91       	ld	r20, X+
    1446:	5d 91       	ld	r21, X+
    1448:	a4 0f       	add	r26, r20
    144a:	b5 1f       	adc	r27, r21
    144c:	ea 17       	cp	r30, r26
    144e:	fb 07       	cpc	r31, r27
    1450:	69 f4       	brne	.+26     	; 0x146c <free+0xd8>
    1452:	20 81       	ld	r18, Z
    1454:	31 81       	ldd	r19, Z+1	; 0x01
    1456:	24 0f       	add	r18, r20
    1458:	35 1f       	adc	r19, r21
    145a:	2e 5f       	subi	r18, 0xFE	; 254
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	ec 01       	movw	r28, r24
    1460:	39 83       	std	Y+1, r19	; 0x01
    1462:	28 83       	st	Y, r18
    1464:	22 81       	ldd	r18, Z+2	; 0x02
    1466:	33 81       	ldd	r19, Z+3	; 0x03
    1468:	3b 83       	std	Y+3, r19	; 0x03
    146a:	2a 83       	std	Y+2, r18	; 0x02
    146c:	e0 e0       	ldi	r30, 0x00	; 0
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <free+0xe2>
    1472:	fb 01       	movw	r30, r22
    1474:	bc 01       	movw	r22, r24
    1476:	db 01       	movw	r26, r22
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	8d 91       	ld	r24, X+
    147c:	9c 91       	ld	r25, X
    147e:	13 97       	sbiw	r26, 0x03	; 3
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	b9 f7       	brne	.-18     	; 0x1472 <free+0xde>
    1484:	9b 01       	movw	r18, r22
    1486:	2e 5f       	subi	r18, 0xFE	; 254
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	11 97       	sbiw	r26, 0x01	; 1
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	40 91 fa 02 	lds	r20, 0x02FA
    1498:	50 91 fb 02 	lds	r21, 0x02FB
    149c:	48 17       	cp	r20, r24
    149e:	59 07       	cpc	r21, r25
    14a0:	79 f4       	brne	.+30     	; 0x14c0 <free+0x12c>
    14a2:	30 97       	sbiw	r30, 0x00	; 0
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <free+0x11c>
    14a6:	10 92 fd 02 	sts	0x02FD, r1
    14aa:	10 92 fc 02 	sts	0x02FC, r1
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <free+0x120>
    14b0:	13 82       	std	Z+3, r1	; 0x03
    14b2:	12 82       	std	Z+2, r1	; 0x02
    14b4:	22 50       	subi	r18, 0x02	; 2
    14b6:	30 40       	sbci	r19, 0x00	; 0
    14b8:	30 93 fb 02 	sts	0x02FB, r19
    14bc:	20 93 fa 02 	sts	0x02FA, r18
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <memset>:
    14c6:	dc 01       	movw	r26, r24
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <memset+0x6>
    14ca:	6d 93       	st	X+, r22
    14cc:	41 50       	subi	r20, 0x01	; 1
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	e0 f7       	brcc	.-8      	; 0x14ca <memset+0x4>
    14d2:	08 95       	ret

000014d4 <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    14d4:	0e 94 33 02 	call	0x466	; 0x466 <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    14d8:	08 95       	ret
    14da:	f8 94       	cli

000014dc <__stop_program>:
    14dc:	ff cf       	rjmp	.-2      	; 0x14dc <__stop_program>
