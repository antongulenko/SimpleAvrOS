
Main-Simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e6  00800100  0000147c  00001510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  008001e6  008001e6  000015f6  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000010b  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000358  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000a0b  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000027e0  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a43  00000000  00000000  0000537e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000390b  00000000  00000000  00005dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  000096cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f7e  00000000  00000000  00009c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017aa  00000000  00000000  0000abba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0003fdd1  00000000  00000000  0000c364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000465  00000000  00000000  0004c135  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002e8  00000000  00000000  0004c59a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      80:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_32>
      84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e7       	ldi	r30, 0x7C	; 124
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3e       	cpi	r26, 0xE6	; 230
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a6 ee       	ldi	r26, 0xE6	; 230
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3f       	cpi	r26, 0xF2	; 242
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <init_ports_m1284P_kernel_init>:
	INIT_PORT_AND_PINS(A);
	INIT_PORT_AND_PINS(B);
	INIT_PORT_AND_PINS(C);
	INIT_PORT_AND_PINS(D);
}
KERNEL_INIT(init_ports_m1284P)
      c2:	0e 94 04 02 	call	0x408	; 0x408 <init_ports_m1284P>

000000c6 <init_timer_m1284P_kernel_init>:
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
}
KERNEL_INIT(init_timer_m1284P)
      c6:	0e 94 49 03 	call	0x692	; 0x692 <init_timer_m1284P>

000000ca <init_idle_scheduler_kernel_init>:

void init_idle_scheduler() {
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
KERNEL_INIT(init_idle_scheduler)
      ca:	0e 94 35 05 	call	0xa6a	; 0xa6a <init_idle_scheduler>

000000ce <init_scheduler_kernel_init>:
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
	setTimerCompareValue(timer, 250); // THIS is the main difference between this kernel and the others
	setTimerClockSelect(timerConf, prescale_8);
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
KERNEL_INIT(init_scheduler)
      ce:	0e 94 48 05 	call	0xa90	; 0xa90 <init_scheduler>

000000d2 <init_kernel_kernel_init>:
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
	start_scheduler();
}
KERNEL_INIT(init_kernel)
      d2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <init_kernel>
      d6:	0e 94 85 00 	call	0x10a	; 0x10a <main>
      da:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <MainProcessEnd>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <MyPeriodicJob>:

volatile uint16_t counter = 0;
volatile uint16_t main_counter = 0;

void MyPeriodicJob() {
	counter++;
      e2:	80 91 e6 01 	lds	r24, 0x01E6
      e6:	90 91 e7 01 	lds	r25, 0x01E7
      ea:	01 96       	adiw	r24, 0x01	; 1
      ec:	90 93 e7 01 	sts	0x01E7, r25
      f0:	80 93 e6 01 	sts	0x01E6, r24
}
      f4:	08 95       	ret

000000f6 <before_scheduler>:

void before_scheduler() {
	createPeriodicJob(&MyPeriodicJob, 50, 0);
      f6:	81 e7       	ldi	r24, 0x71	; 113
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	42 e3       	ldi	r20, 0x32	; 50
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	0e 94 74 01 	call	0x2e8	; 0x2e8 <createPeriodicJob>
}
     108:	08 95       	ret

0000010a <main>:

int main() {
	// This will continue as rr-thread.
	while (1) {
		main_counter++;
     10a:	80 91 e8 01 	lds	r24, 0x01E8
     10e:	90 91 e9 01 	lds	r25, 0x01E9
     112:	01 96       	adiw	r24, 0x01	; 1
     114:	90 93 e9 01 	sts	0x01E9, r25
     118:	80 93 e8 01 	sts	0x01E8, r24
     11c:	f6 cf       	rjmp	.-20     	; 0x10a <main>

0000011e <AperiodicJobWrapper>:
		periodicJob->nextPeriod += job->period;
		schedule_next();
	}
}

void AperiodicJobWrapper(Process process) {
     11e:	ef 92       	push	r14
     120:	ff 92       	push	r15
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
	PJob job = JobMem(process);
     126:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     12a:	e8 2e       	mov	r14, r24
     12c:	e7 01       	movw	r28, r14
     12e:	7e 01       	movw	r14, r28
     130:	f9 2e       	mov	r15, r25
     132:	e7 01       	movw	r28, r14
	PAperiodicJob aperiodicJob = (PAperiodicJob) job;
	while (1) {
		job->entryPoint();
     134:	e9 81       	ldd	r30, Y+1	; 0x01
     136:	fa 81       	ldd	r31, Y+2	; 0x02
     138:	09 95       	icall
		aperiodicJob->wantsToRun = FALSE;
     13a:	1c 86       	std	Y+12, r1	; 0x0c
     13c:	1b 86       	std	Y+11, r1	; 0x0b
		schedule_next();
     13e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <schedule_next>
     142:	f8 cf       	rjmp	.-16     	; 0x134 <AperiodicJobWrapper+0x16>

00000144 <PeriodicJobWrapper>:
	BOOL wantsToRun;
} AperiodicJob, *PAperiodicJob;

#define JobMem(proc) ((PJob)getProcessMemory(proc))

void PeriodicJobWrapper(Process process) {
     144:	ef 92       	push	r14
     146:	ff 92       	push	r15
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
	PJob job = JobMem(process);
     14c:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     150:	e8 2e       	mov	r14, r24
     152:	e7 01       	movw	r28, r14
     154:	7e 01       	movw	r14, r28
     156:	f9 2e       	mov	r15, r25
     158:	e7 01       	movw	r28, r14
	PPeriodicJob periodicJob = (PPeriodicJob) job;
	while (1) {
		job->entryPoint();
     15a:	e9 81       	ldd	r30, Y+1	; 0x01
     15c:	fa 81       	ldd	r31, Y+2	; 0x02
     15e:	09 95       	icall
		periodicJob->nextPeriod += job->period;
     160:	8b 85       	ldd	r24, Y+11	; 0x0b
     162:	9c 85       	ldd	r25, Y+12	; 0x0c
     164:	ad 85       	ldd	r26, Y+13	; 0x0d
     166:	be 85       	ldd	r27, Y+14	; 0x0e
     168:	2d 81       	ldd	r18, Y+5	; 0x05
     16a:	3e 81       	ldd	r19, Y+6	; 0x06
     16c:	4f 81       	ldd	r20, Y+7	; 0x07
     16e:	58 85       	ldd	r21, Y+8	; 0x08
     170:	82 0f       	add	r24, r18
     172:	93 1f       	adc	r25, r19
     174:	a4 1f       	adc	r26, r20
     176:	b5 1f       	adc	r27, r21
     178:	8b 87       	std	Y+11, r24	; 0x0b
     17a:	9c 87       	std	Y+12, r25	; 0x0c
     17c:	ad 87       	std	Y+13, r26	; 0x0d
     17e:	be 87       	std	Y+14, r27	; 0x0e
		schedule_next();
     180:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <schedule_next>
     184:	ea cf       	rjmp	.-44     	; 0x15a <PeriodicJobWrapper+0x16>

00000186 <dms_schedule>:
}

// The first element in the job list, the job with the highest priority.
Process processListHead;

Process dms_schedule(BOOL invokedFromTimer) {
     186:	ef 92       	push	r14
     188:	ff 92       	push	r15
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
     18e:	c0 91 f3 01 	lds	r28, 0x01F3
     192:	d0 91 f4 01 	lds	r29, 0x01F4
	while (current) {
     196:	25 c0       	rjmp	.+74     	; 0x1e2 <dms_schedule+0x5c>
		PJob job = JobMem(current);
     198:	ce 01       	movw	r24, r28
     19a:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     19e:	fc 01       	movw	r30, r24
		switch(job->jobType) {
     1a0:	81 85       	ldd	r24, Z+9	; 0x09
     1a2:	92 85       	ldd	r25, Z+10	; 0x0a
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	21 f0       	breq	.+8      	; 0x1b0 <dms_schedule+0x2a>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	91 05       	cpc	r25, r1
     1ac:	c1 f4       	brne	.+48     	; 0x1de <dms_schedule+0x58>
     1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <dms_schedule+0x4e>
			case (Periodic):
				if (((PPeriodicJob) job)->nextPeriod <= milliseconds_running) {
     1b0:	63 85       	ldd	r22, Z+11	; 0x0b
     1b2:	74 85       	ldd	r23, Z+12	; 0x0c
     1b4:	85 85       	ldd	r24, Z+13	; 0x0d
     1b6:	96 85       	ldd	r25, Z+14	; 0x0e
     1b8:	20 91 ed 01 	lds	r18, 0x01ED
     1bc:	30 91 ee 01 	lds	r19, 0x01EE
     1c0:	40 91 ef 01 	lds	r20, 0x01EF
     1c4:	50 91 f0 01 	lds	r21, 0x01F0
     1c8:	26 17       	cp	r18, r22
     1ca:	37 07       	cpc	r19, r23
     1cc:	48 07       	cpc	r20, r24
     1ce:	59 07       	cpc	r21, r25
     1d0:	30 f0       	brcs	.+12     	; 0x1de <dms_schedule+0x58>
     1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <dms_schedule+0x60>
					return current;
				}
				break;
			case (Aperiodic):
				if (((PAperiodicJob) job)->wantsToRun == TRUE) {
     1d4:	83 85       	ldd	r24, Z+11	; 0x0b
     1d6:	94 85       	ldd	r25, Z+12	; 0x0c
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	91 05       	cpc	r25, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <dms_schedule+0x60>
					return current;
				}
				break;
		}
		current = job->nextJob;
     1de:	c3 81       	ldd	r28, Z+3	; 0x03
     1e0:	d4 81       	ldd	r29, Z+4	; 0x04
Process dms_schedule(BOOL invokedFromTimer) {
	// invokedFromTimer parameter is ignored - if a Job calls schedule_next,
	// we schedule again; if a higher-prio aperiodic job has woken up, it will be scheduled;
	// else, the same job should scheduled again, because other periodic threads did not wake up yet.
	Process current = processListHead;
	while (current) {
     1e2:	20 97       	sbiw	r28, 0x00	; 0
     1e4:	c9 f6       	brne	.-78     	; 0x198 <dms_schedule+0x12>
				break;
		}
		current = job->nextJob;
	}
	return InvalidProcess;
}
     1e6:	ce 01       	movw	r24, r28
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	ff 90       	pop	r15
     1ee:	ef 90       	pop	r14
     1f0:	08 95       	ret

000001f2 <insertJobIntoList>:

void insertJobIntoList(Process process, PJob job) {
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	8c 01       	movw	r16, r24
     1fc:	eb 01       	movw	r28, r22
	if (!processListHead) {
     1fe:	80 91 f3 01 	lds	r24, 0x01F3
     202:	90 91 f4 01 	lds	r25, 0x01F4
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	39 f4       	brne	.+14     	; 0x218 <insertJobIntoList+0x26>
		processListHead = process;
     20a:	10 93 f4 01 	sts	0x01F4, r17
     20e:	00 93 f3 01 	sts	0x01F3, r16
		job->nextJob = NULL;
     212:	1c 82       	std	Y+4, r1	; 0x04
     214:	1b 82       	std	Y+3, r1	; 0x03
     216:	2d c0       	rjmp	.+90     	; 0x272 <insertJobIntoList+0x80>
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
			PJob currentJob = JobMem(current);
     218:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     21c:	fc 01       	movw	r30, r24
			if (currentJob->period > job->period)
     21e:	65 81       	ldd	r22, Z+5	; 0x05
     220:	76 81       	ldd	r23, Z+6	; 0x06
     222:	87 81       	ldd	r24, Z+7	; 0x07
     224:	90 85       	ldd	r25, Z+8	; 0x08
     226:	2d 81       	ldd	r18, Y+5	; 0x05
     228:	3e 81       	ldd	r19, Y+6	; 0x06
     22a:	4f 81       	ldd	r20, Y+7	; 0x07
     22c:	58 85       	ldd	r21, Y+8	; 0x08
     22e:	26 17       	cp	r18, r22
     230:	37 07       	cpc	r19, r23
     232:	48 07       	cpc	r20, r24
     234:	59 07       	cpc	r21, r25
     236:	68 f0       	brcs	.+26     	; 0x252 <insertJobIntoList+0x60>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
     238:	62 17       	cp	r22, r18
     23a:	73 07       	cpc	r23, r19
     23c:	84 07       	cpc	r24, r20
     23e:	95 07       	cpc	r25, r21
     240:	21 f4       	brne	.+8      	; 0x24a <insertJobIntoList+0x58>
     242:	90 81       	ld	r25, Z
     244:	88 81       	ld	r24, Y
     246:	98 17       	cp	r25, r24
     248:	20 f0       	brcs	.+8      	; 0x252 <insertJobIntoList+0x60>
				break;
			current = currentJob->nextJob;
     24a:	83 81       	ldd	r24, Z+3	; 0x03
     24c:	94 81       	ldd	r25, Z+4	; 0x04
		processListHead = process;
		job->nextJob = NULL;
	} else {
		Process current = processListHead;
		Process predecessor = NULL;
		while (current) {
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	19 f7       	brne	.-58     	; 0x218 <insertJobIntoList+0x26>
				break;
			if (currentJob->period == job->period && currentJob->userPriority < job->userPriority)
				break;
			current = currentJob->nextJob;
		}
		job->nextJob = JobMem(predecessor)->nextJob;
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     25a:	fc 01       	movw	r30, r24
     25c:	83 81       	ldd	r24, Z+3	; 0x03
     25e:	94 81       	ldd	r25, Z+4	; 0x04
     260:	9c 83       	std	Y+4, r25	; 0x04
     262:	8b 83       	std	Y+3, r24	; 0x03
		JobMem(predecessor)->nextJob = process;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     26c:	fc 01       	movw	r30, r24
     26e:	14 83       	std	Z+4, r17	; 0x04
     270:	03 83       	std	Z+3, r16	; 0x03
	}
}
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	1f 91       	pop	r17
     278:	0f 91       	pop	r16
     27a:	08 95       	ret

0000027c <initializeJob>:

PJob initializeJob(Process process, JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     27c:	6f 92       	push	r6
     27e:	7f 92       	push	r7
     280:	8f 92       	push	r8
     282:	9f 92       	push	r9
     284:	af 92       	push	r10
     286:	bf 92       	push	r11
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	5c 01       	movw	r10, r24
     29a:	4b 01       	movw	r8, r22
     29c:	69 01       	movw	r12, r18
     29e:	7a 01       	movw	r14, r20
	PJob job = JobMem(process);
     2a0:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     2a4:	19 2f       	mov	r17, r25
     2a6:	68 2e       	mov	r6, r24
     2a8:	e3 01       	movw	r28, r6
     2aa:	3e 01       	movw	r6, r28
     2ac:	79 2e       	mov	r7, r25
     2ae:	e3 01       	movw	r28, r6
	job->entryPoint = entryPoint;
     2b0:	9a 82       	std	Y+2, r9	; 0x02
     2b2:	89 82       	std	Y+1, r8	; 0x01
	job->userPriority = userPriority;
     2b4:	08 83       	st	Y, r16
	job->period = period;
     2b6:	cd 82       	std	Y+5, r12	; 0x05
     2b8:	de 82       	std	Y+6, r13	; 0x06
     2ba:	ef 82       	std	Y+7, r14	; 0x07
     2bc:	f8 86       	std	Y+8, r15	; 0x08
	insertJobIntoList(process, job);
     2be:	c5 01       	movw	r24, r10
     2c0:	b3 01       	movw	r22, r6
     2c2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <insertJobIntoList>
	return job;
}
     2c6:	86 2d       	mov	r24, r6
     2c8:	91 2f       	mov	r25, r17
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	bf 90       	pop	r11
     2dc:	af 90       	pop	r10
     2de:	9f 90       	pop	r9
     2e0:	8f 90       	pop	r8
     2e2:	7f 90       	pop	r7
     2e4:	6f 90       	pop	r6
     2e6:	08 95       	ret

000002e8 <createPeriodicJob>:

Process createPeriodicJob(JobEntryPoint entryPoint, uint32_t period, uint8_t userPriority) {
     2e8:	af 92       	push	r10
     2ea:	bf 92       	push	r11
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ff 92       	push	r15
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	5a 01       	movw	r10, r20
     2fe:	6b 01       	movw	r12, r22
     300:	02 2f       	mov	r16, r18
	Process process = createProcess3(&PeriodicJobWrapper, NULL, __default_stack_size, sizeof(PeriodicJob));
     302:	40 91 00 01 	lds	r20, 0x0100
     306:	50 91 01 01 	lds	r21, 0x0101
     30a:	82 ea       	ldi	r24, 0xA2	; 162
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	2f e0       	ldi	r18, 0x0F	; 15
     314:	0e 94 b1 04 	call	0x962	; 0x962 <createProcess3>
     318:	f8 2e       	mov	r15, r24
     31a:	19 2f       	mov	r17, r25
	PPeriodicJob job = (PPeriodicJob) initializeJob(process, entryPoint, period, userPriority);
     31c:	be 01       	movw	r22, r28
     31e:	a6 01       	movw	r20, r12
     320:	95 01       	movw	r18, r10
     322:	0e 94 3e 01 	call	0x27c	; 0x27c <initializeJob>
     326:	fc 01       	movw	r30, r24
	job->job.jobType = Periodic;
     328:	12 86       	std	Z+10, r1	; 0x0a
     32a:	11 86       	std	Z+9, r1	; 0x09
	job->nextPeriod = milliseconds_running + period;
     32c:	20 91 ed 01 	lds	r18, 0x01ED
     330:	30 91 ee 01 	lds	r19, 0x01EE
     334:	40 91 ef 01 	lds	r20, 0x01EF
     338:	50 91 f0 01 	lds	r21, 0x01F0
     33c:	2a 0d       	add	r18, r10
     33e:	3b 1d       	adc	r19, r11
     340:	4c 1d       	adc	r20, r12
     342:	5d 1d       	adc	r21, r13
     344:	23 87       	std	Z+11, r18	; 0x0b
     346:	34 87       	std	Z+12, r19	; 0x0c
     348:	45 87       	std	Z+13, r20	; 0x0d
     34a:	56 87       	std	Z+14, r21	; 0x0e
	return process;
}
     34c:	8f 2d       	mov	r24, r15
     34e:	91 2f       	mov	r25, r17
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	bf 90       	pop	r11
     360:	af 90       	pop	r10
     362:	08 95       	ret

00000364 <createAperiodicJob>:

Process createAperiodicJob(JobEntryPoint entryPoint, uint32_t minimalPeriod, uint8_t userPriority) {
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
     378:	5a 01       	movw	r10, r20
     37a:	6b 01       	movw	r12, r22
     37c:	02 2f       	mov	r16, r18
	Process process = createProcess3(&AperiodicJobWrapper, NULL, __default_stack_size, sizeof(AperiodicJob));
     37e:	40 91 00 01 	lds	r20, 0x0100
     382:	50 91 01 01 	lds	r21, 0x0101
     386:	8f e8       	ldi	r24, 0x8F	; 143
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	2d e0       	ldi	r18, 0x0D	; 13
     390:	0e 94 b1 04 	call	0x962	; 0x962 <createProcess3>
     394:	f8 2e       	mov	r15, r24
     396:	19 2f       	mov	r17, r25
	PAperiodicJob job = (PAperiodicJob) initializeJob(process, entryPoint, minimalPeriod, userPriority);
     398:	be 01       	movw	r22, r28
     39a:	a6 01       	movw	r20, r12
     39c:	95 01       	movw	r18, r10
     39e:	0e 94 3e 01 	call	0x27c	; 0x27c <initializeJob>
     3a2:	fc 01       	movw	r30, r24
	job->job.jobType = Aperiodic;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	92 87       	std	Z+10, r25	; 0x0a
     3aa:	81 87       	std	Z+9, r24	; 0x09
	job->wantsToRun = FALSE;
     3ac:	14 86       	std	Z+12, r1	; 0x0c
     3ae:	13 86       	std	Z+11, r1	; 0x0b
	return process;
}
     3b0:	8f 2d       	mov	r24, r15
     3b2:	91 2f       	mov	r25, r17
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	bf 90       	pop	r11
     3c4:	af 90       	pop	r10
     3c6:	08 95       	ret

000003c8 <triggerAperiodicJob>:

void triggerAperiodicJob(Process proc) {
	((PAperiodicJob) JobMem(proc))->wantsToRun = TRUE;
     3c8:	0e 94 12 05 	call	0xa24	; 0xa24 <getProcessMemory>
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	fc 01       	movw	r30, r24
     3d2:	34 87       	std	Z+12, r19	; 0x0c
     3d4:	23 87       	std	Z+11, r18	; 0x0b
}
     3d6:	08 95       	ret

000003d8 <schedule_next>:
// invoked it has saved all its registers, that are important. As this function
// also does not take any arguments, nothing can go wrong here.
// Contrary to the scheduler-timer-isr, this does not make the processor idle, if schedule
// does not return a valid Process.
void schedule_next() {
	Process next = schedule(FALSE);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 66 05 	call	0xacc	; 0xacc <schedule>
	// This is actually an invalid condition, but no need for a hardware reset here.
	if (next == InvalidProcess) return;
     3e0:	00 97       	sbiw	r24, 0x00	; 0
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <schedule_next+0x10>
	switchProcess(next); // Will not return here.
     3e4:	0e 94 a5 04 	call	0x94a	; 0x94a <switchProcess>
     3e8:	08 95       	ret

000003ea <processor_idle>:
}

void processor_idle() {
	sleep_enable();
     3ea:	83 b7       	in	r24, 0x33	; 51
     3ec:	81 60       	ori	r24, 0x01	; 1
     3ee:	83 bf       	out	0x33, r24	; 51
	set_sleep_mode(SLEEP_MODE_IDLE);
     3f0:	83 b7       	in	r24, 0x33	; 51
     3f2:	81 7f       	andi	r24, 0xF1	; 241
     3f4:	83 bf       	out	0x33, r24	; 51
	enable_interrupts(); // Just in case, if this is called form an ISR
     3f6:	78 94       	sei
	sleep_cpu();
     3f8:	88 95       	sleep
}
     3fa:	08 95       	ret

000003fc <processor_loop_idle>:

void processor_loop_idle() {
	while (TRUE) {
		processor_idle();
     3fc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <processor_idle>
     400:	fd cf       	rjmp	.-6      	; 0x3fc <processor_loop_idle>

00000402 <ProcessGraveyard>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
     402:	0e 94 fe 01 	call	0x3fc	; 0x3fc <processor_loop_idle>
}
     406:	08 95       	ret

00000408 <init_ports_m1284P>:

#include "../kernel_init.h"
#include "port_m1284P.h"

void init_ports_m1284P() {
	INIT_PORT_AND_PINS(A);
     408:	a3 e7       	ldi	r26, 0x73	; 115
     40a:	b2 e0       	ldi	r27, 0x02	; 2
     40c:	e2 ed       	ldi	r30, 0xD2	; 210
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	86 e0       	ldi	r24, 0x06	; 6
     412:	01 90       	ld	r0, Z+
     414:	0d 92       	st	X+, r0
     416:	81 50       	subi	r24, 0x01	; 1
     418:	e1 f7       	brne	.-8      	; 0x412 <init_ports_m1284P+0xa>
     41a:	a0 e7       	ldi	r26, 0x70	; 112
     41c:	b2 e0       	ldi	r27, 0x02	; 2
     41e:	ef ec       	ldi	r30, 0xCF	; 207
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	01 90       	ld	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	e1 f7       	brne	.-8      	; 0x424 <init_ports_m1284P+0x1c>
     42c:	af eb       	ldi	r26, 0xBF	; 191
     42e:	b2 e0       	ldi	r27, 0x02	; 2
     430:	ec ec       	ldi	r30, 0xCC	; 204
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	01 90       	ld	r0, Z+
     438:	0d 92       	st	X+, r0
     43a:	81 50       	subi	r24, 0x01	; 1
     43c:	e1 f7       	brne	.-8      	; 0x436 <init_ports_m1284P+0x2e>
     43e:	ad e4       	ldi	r26, 0x4D	; 77
     440:	b2 e0       	ldi	r27, 0x02	; 2
     442:	e9 ec       	ldi	r30, 0xC9	; 201
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	01 90       	ld	r0, Z+
     44a:	0d 92       	st	X+, r0
     44c:	81 50       	subi	r24, 0x01	; 1
     44e:	e1 f7       	brne	.-8      	; 0x448 <init_ports_m1284P+0x40>
     450:	ae e5       	ldi	r26, 0x5E	; 94
     452:	b2 e0       	ldi	r27, 0x02	; 2
     454:	e6 ec       	ldi	r30, 0xC6	; 198
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	01 90       	ld	r0, Z+
     45c:	0d 92       	st	X+, r0
     45e:	81 50       	subi	r24, 0x01	; 1
     460:	e1 f7       	brne	.-8      	; 0x45a <init_ports_m1284P+0x52>
     462:	ae e1       	ldi	r26, 0x1E	; 30
     464:	b2 e0       	ldi	r27, 0x02	; 2
     466:	e3 ec       	ldi	r30, 0xC3	; 195
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	01 90       	ld	r0, Z+
     46e:	0d 92       	st	X+, r0
     470:	81 50       	subi	r24, 0x01	; 1
     472:	e1 f7       	brne	.-8      	; 0x46c <init_ports_m1284P+0x64>
     474:	aa e4       	ldi	r26, 0x4A	; 74
     476:	b2 e0       	ldi	r27, 0x02	; 2
     478:	e0 ec       	ldi	r30, 0xC0	; 192
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	81 50       	subi	r24, 0x01	; 1
     484:	e1 f7       	brne	.-8      	; 0x47e <init_ports_m1284P+0x76>
     486:	a2 eb       	ldi	r26, 0xB2	; 178
     488:	b2 e0       	ldi	r27, 0x02	; 2
     48a:	ed eb       	ldi	r30, 0xBD	; 189
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	01 90       	ld	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	81 50       	subi	r24, 0x01	; 1
     496:	e1 f7       	brne	.-8      	; 0x490 <init_ports_m1284P+0x88>
     498:	ac e7       	ldi	r26, 0x7C	; 124
     49a:	b2 e0       	ldi	r27, 0x02	; 2
     49c:	ea eb       	ldi	r30, 0xBA	; 186
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	81 50       	subi	r24, 0x01	; 1
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <init_ports_m1284P+0x9a>
	INIT_PORT_AND_PINS(B);
     4aa:	a5 ec       	ldi	r26, 0xC5	; 197
     4ac:	b2 e0       	ldi	r27, 0x02	; 2
     4ae:	e4 eb       	ldi	r30, 0xB4	; 180
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	01 90       	ld	r0, Z+
     4b6:	0d 92       	st	X+, r0
     4b8:	81 50       	subi	r24, 0x01	; 1
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <init_ports_m1284P+0xac>
     4bc:	a7 e6       	ldi	r26, 0x67	; 103
     4be:	b2 e0       	ldi	r27, 0x02	; 2
     4c0:	e1 eb       	ldi	r30, 0xB1	; 177
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	01 90       	ld	r0, Z+
     4c8:	0d 92       	st	X+, r0
     4ca:	81 50       	subi	r24, 0x01	; 1
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <init_ports_m1284P+0xbe>
     4ce:	a2 ec       	ldi	r26, 0xC2	; 194
     4d0:	b2 e0       	ldi	r27, 0x02	; 2
     4d2:	ee ea       	ldi	r30, 0xAE	; 174
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	83 e0       	ldi	r24, 0x03	; 3
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	81 50       	subi	r24, 0x01	; 1
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <init_ports_m1284P+0xd0>
     4e0:	a7 e0       	ldi	r26, 0x07	; 7
     4e2:	b2 e0       	ldi	r27, 0x02	; 2
     4e4:	eb ea       	ldi	r30, 0xAB	; 171
     4e6:	f1 e0       	ldi	r31, 0x01	; 1
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	01 90       	ld	r0, Z+
     4ec:	0d 92       	st	X+, r0
     4ee:	81 50       	subi	r24, 0x01	; 1
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <init_ports_m1284P+0xe2>
     4f2:	a9 e7       	ldi	r26, 0x79	; 121
     4f4:	b2 e0       	ldi	r27, 0x02	; 2
     4f6:	e8 ea       	ldi	r30, 0xA8	; 168
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	01 90       	ld	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	81 50       	subi	r24, 0x01	; 1
     502:	e1 f7       	brne	.-8      	; 0x4fc <init_ports_m1284P+0xf4>
     504:	a6 e8       	ldi	r26, 0x86	; 134
     506:	b2 e0       	ldi	r27, 0x02	; 2
     508:	e5 ea       	ldi	r30, 0xA5	; 165
     50a:	f1 e0       	ldi	r31, 0x01	; 1
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	01 90       	ld	r0, Z+
     510:	0d 92       	st	X+, r0
     512:	81 50       	subi	r24, 0x01	; 1
     514:	e1 f7       	brne	.-8      	; 0x50e <init_ports_m1284P+0x106>
     516:	a9 e3       	ldi	r26, 0x39	; 57
     518:	b2 e0       	ldi	r27, 0x02	; 2
     51a:	e2 ea       	ldi	r30, 0xA2	; 162
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	83 e0       	ldi	r24, 0x03	; 3
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	81 50       	subi	r24, 0x01	; 1
     526:	e1 f7       	brne	.-8      	; 0x520 <init_ports_m1284P+0x118>
     528:	aa e0       	ldi	r26, 0x0A	; 10
     52a:	b2 e0       	ldi	r27, 0x02	; 2
     52c:	ef e9       	ldi	r30, 0x9F	; 159
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	01 90       	ld	r0, Z+
     534:	0d 92       	st	X+, r0
     536:	81 50       	subi	r24, 0x01	; 1
     538:	e1 f7       	brne	.-8      	; 0x532 <init_ports_m1284P+0x12a>
     53a:	a6 e3       	ldi	r26, 0x36	; 54
     53c:	b2 e0       	ldi	r27, 0x02	; 2
     53e:	ec e9       	ldi	r30, 0x9C	; 156
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	81 50       	subi	r24, 0x01	; 1
     54a:	e1 f7       	brne	.-8      	; 0x544 <init_ports_m1284P+0x13c>
	INIT_PORT_AND_PINS(C);
     54c:	aa e6       	ldi	r26, 0x6A	; 106
     54e:	b2 e0       	ldi	r27, 0x02	; 2
     550:	e6 e9       	ldi	r30, 0x96	; 150
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	86 e0       	ldi	r24, 0x06	; 6
     556:	01 90       	ld	r0, Z+
     558:	0d 92       	st	X+, r0
     55a:	81 50       	subi	r24, 0x01	; 1
     55c:	e1 f7       	brne	.-8      	; 0x556 <init_ports_m1284P+0x14e>
     55e:	a1 e9       	ldi	r26, 0x91	; 145
     560:	b2 e0       	ldi	r27, 0x02	; 2
     562:	e3 e9       	ldi	r30, 0x93	; 147
     564:	f1 e0       	ldi	r31, 0x01	; 1
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	81 50       	subi	r24, 0x01	; 1
     56e:	e1 f7       	brne	.-8      	; 0x568 <init_ports_m1284P+0x160>
     570:	a4 e6       	ldi	r26, 0x64	; 100
     572:	b2 e0       	ldi	r27, 0x02	; 2
     574:	e0 e9       	ldi	r30, 0x90	; 144
     576:	f1 e0       	ldi	r31, 0x01	; 1
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	01 90       	ld	r0, Z+
     57c:	0d 92       	st	X+, r0
     57e:	81 50       	subi	r24, 0x01	; 1
     580:	e1 f7       	brne	.-8      	; 0x57a <init_ports_m1284P+0x172>
     582:	a9 e8       	ldi	r26, 0x89	; 137
     584:	b2 e0       	ldi	r27, 0x02	; 2
     586:	ed e8       	ldi	r30, 0x8D	; 141
     588:	f1 e0       	ldi	r31, 0x01	; 1
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	81 50       	subi	r24, 0x01	; 1
     592:	e1 f7       	brne	.-8      	; 0x58c <init_ports_m1284P+0x184>
     594:	ac e2       	ldi	r26, 0x2C	; 44
     596:	b2 e0       	ldi	r27, 0x02	; 2
     598:	ea e8       	ldi	r30, 0x8A	; 138
     59a:	f1 e0       	ldi	r31, 0x01	; 1
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	01 90       	ld	r0, Z+
     5a0:	0d 92       	st	X+, r0
     5a2:	81 50       	subi	r24, 0x01	; 1
     5a4:	e1 f7       	brne	.-8      	; 0x59e <init_ports_m1284P+0x196>
     5a6:	ab e1       	ldi	r26, 0x1B	; 27
     5a8:	b2 e0       	ldi	r27, 0x02	; 2
     5aa:	e7 e8       	ldi	r30, 0x87	; 135
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	01 90       	ld	r0, Z+
     5b2:	0d 92       	st	X+, r0
     5b4:	81 50       	subi	r24, 0x01	; 1
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <init_ports_m1284P+0x1a8>
     5b8:	a1 e6       	ldi	r26, 0x61	; 97
     5ba:	b2 e0       	ldi	r27, 0x02	; 2
     5bc:	e4 e8       	ldi	r30, 0x84	; 132
     5be:	f1 e0       	ldi	r31, 0x01	; 1
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	01 90       	ld	r0, Z+
     5c4:	0d 92       	st	X+, r0
     5c6:	81 50       	subi	r24, 0x01	; 1
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <init_ports_m1284P+0x1ba>
     5ca:	a3 e5       	ldi	r26, 0x53	; 83
     5cc:	b2 e0       	ldi	r27, 0x02	; 2
     5ce:	e1 e8       	ldi	r30, 0x81	; 129
     5d0:	f1 e0       	ldi	r31, 0x01	; 1
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	01 90       	ld	r0, Z+
     5d6:	0d 92       	st	X+, r0
     5d8:	81 50       	subi	r24, 0x01	; 1
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <init_ports_m1284P+0x1cc>
     5dc:	ad ef       	ldi	r26, 0xFD	; 253
     5de:	b1 e0       	ldi	r27, 0x01	; 1
     5e0:	ee e7       	ldi	r30, 0x7E	; 126
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	01 90       	ld	r0, Z+
     5e8:	0d 92       	st	X+, r0
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <init_ports_m1284P+0x1de>
	INIT_PORT_AND_PINS(D);
     5ee:	a4 e4       	ldi	r26, 0x44	; 68
     5f0:	b2 e0       	ldi	r27, 0x02	; 2
     5f2:	e8 e7       	ldi	r30, 0x78	; 120
     5f4:	f1 e0       	ldi	r31, 0x01	; 1
     5f6:	86 e0       	ldi	r24, 0x06	; 6
     5f8:	01 90       	ld	r0, Z+
     5fa:	0d 92       	st	X+, r0
     5fc:	81 50       	subi	r24, 0x01	; 1
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <init_ports_m1284P+0x1f0>
     600:	a8 e1       	ldi	r26, 0x18	; 24
     602:	b2 e0       	ldi	r27, 0x02	; 2
     604:	e5 e7       	ldi	r30, 0x75	; 117
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	01 90       	ld	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	81 50       	subi	r24, 0x01	; 1
     610:	e1 f7       	brne	.-8      	; 0x60a <init_ports_m1284P+0x202>
     612:	a1 e2       	ldi	r26, 0x21	; 33
     614:	b2 e0       	ldi	r27, 0x02	; 2
     616:	e2 e7       	ldi	r30, 0x72	; 114
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	01 90       	ld	r0, Z+
     61e:	0d 92       	st	X+, r0
     620:	81 50       	subi	r24, 0x01	; 1
     622:	e1 f7       	brne	.-8      	; 0x61c <init_ports_m1284P+0x214>
     624:	a5 e1       	ldi	r26, 0x15	; 21
     626:	b2 e0       	ldi	r27, 0x02	; 2
     628:	ef e6       	ldi	r30, 0x6F	; 111
     62a:	f1 e0       	ldi	r31, 0x01	; 1
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	01 90       	ld	r0, Z+
     630:	0d 92       	st	X+, r0
     632:	81 50       	subi	r24, 0x01	; 1
     634:	e1 f7       	brne	.-8      	; 0x62e <init_ports_m1284P+0x226>
     636:	a0 e5       	ldi	r26, 0x50	; 80
     638:	b2 e0       	ldi	r27, 0x02	; 2
     63a:	ec e6       	ldi	r30, 0x6C	; 108
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	81 50       	subi	r24, 0x01	; 1
     646:	e1 f7       	brne	.-8      	; 0x640 <init_ports_m1284P+0x238>
     648:	a7 ea       	ldi	r26, 0xA7	; 167
     64a:	b2 e0       	ldi	r27, 0x02	; 2
     64c:	e9 e6       	ldi	r30, 0x69	; 105
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	01 90       	ld	r0, Z+
     654:	0d 92       	st	X+, r0
     656:	81 50       	subi	r24, 0x01	; 1
     658:	e1 f7       	brne	.-8      	; 0x652 <init_ports_m1284P+0x24a>
     65a:	ac e8       	ldi	r26, 0x8C	; 140
     65c:	b2 e0       	ldi	r27, 0x02	; 2
     65e:	e6 e6       	ldi	r30, 0x66	; 102
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	01 90       	ld	r0, Z+
     666:	0d 92       	st	X+, r0
     668:	81 50       	subi	r24, 0x01	; 1
     66a:	e1 f7       	brne	.-8      	; 0x664 <init_ports_m1284P+0x25c>
     66c:	ac eb       	ldi	r26, 0xBC	; 188
     66e:	b2 e0       	ldi	r27, 0x02	; 2
     670:	e3 e6       	ldi	r30, 0x63	; 99
     672:	f1 e0       	ldi	r31, 0x01	; 1
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	01 90       	ld	r0, Z+
     678:	0d 92       	st	X+, r0
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	e1 f7       	brne	.-8      	; 0x676 <init_ports_m1284P+0x26e>
     67e:	a4 e9       	ldi	r26, 0x94	; 148
     680:	b2 e0       	ldi	r27, 0x02	; 2
     682:	e0 e6       	ldi	r30, 0x60	; 96
     684:	f1 e0       	ldi	r31, 0x01	; 1
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	01 90       	ld	r0, Z+
     68a:	0d 92       	st	X+, r0
     68c:	81 50       	subi	r24, 0x01	; 1
     68e:	e1 f7       	brne	.-8      	; 0x688 <init_ports_m1284P+0x280>
}
     690:	08 95       	ret

00000692 <init_timer_m1284P>:
#include "../kernel_init.h"
#include "timer_m1284P.h"
#include "port_m1284P.kernel.h"

void init_timer_m1284P() {
	INIT_TIMER_CONFIG(Timer0, TIMER_NORMAL, TCCR0A, TCCR0B, TIMSK0)
     692:	af e2       	ldi	r26, 0x2F	; 47
     694:	b2 e0       	ldi	r27, 0x02	; 2
     696:	e9 e5       	ldi	r30, 0x59	; 89
     698:	f1 e0       	ldi	r31, 0x01	; 1
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	01 90       	ld	r0, Z+
     69e:	0d 92       	st	X+, r0
     6a0:	81 50       	subi	r24, 0x01	; 1
     6a2:	e1 f7       	brne	.-8      	; 0x69c <init_timer_m1284P+0xa>
	INIT_TIMER_CONFIG(Timer1, TIMER_16bit, TCCR1A, TCCR1B, TIMSK1)
     6a4:	a5 eb       	ldi	r26, 0xB5	; 181
     6a6:	b2 e0       	ldi	r27, 0x02	; 2
     6a8:	e2 e5       	ldi	r30, 0x52	; 82
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	87 e0       	ldi	r24, 0x07	; 7
     6ae:	01 90       	ld	r0, Z+
     6b0:	0d 92       	st	X+, r0
     6b2:	81 50       	subi	r24, 0x01	; 1
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <init_timer_m1284P+0x1c>
	INIT_TIMER_CONFIG(Timer2, TIMER_ASYNCHRONOUS, TCCR2A, TCCR2B, TIMSK2)
     6b6:	af e7       	ldi	r26, 0x7F	; 127
     6b8:	b2 e0       	ldi	r27, 0x02	; 2
     6ba:	eb e4       	ldi	r30, 0x4B	; 75
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	87 e0       	ldi	r24, 0x07	; 7
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <init_timer_m1284P+0x2e>
	INIT_TIMER_CONFIG(Timer3, TIMER_16bit, TCCR3A, TCCR3B, TIMSK3)
     6c8:	a0 e0       	ldi	r26, 0x00	; 0
     6ca:	b2 e0       	ldi	r27, 0x02	; 2
     6cc:	e4 e4       	ldi	r30, 0x44	; 68
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	87 e0       	ldi	r24, 0x07	; 7
     6d2:	01 90       	ld	r0, Z+
     6d4:	0d 92       	st	X+, r0
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <init_timer_m1284P+0x40>

	INIT_TIMER(Timer0A, Timer0, OCR0A, TIMER_A, PinB3) // Pin 4
     6da:	a6 e5       	ldi	r26, 0x56	; 86
     6dc:	b2 e0       	ldi	r27, 0x02	; 2
     6de:	ec e3       	ldi	r30, 0x3C	; 60
     6e0:	f1 e0       	ldi	r31, 0x01	; 1
     6e2:	88 e0       	ldi	r24, 0x08	; 8
     6e4:	01 90       	ld	r0, Z+
     6e6:	0d 92       	st	X+, r0
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	e1 f7       	brne	.-8      	; 0x6e4 <init_timer_m1284P+0x52>
	INIT_TIMER(Timer0B, Timer0, OCR0B, TIMER_B, PinB4) // Pin 5
     6ec:	aa ea       	ldi	r26, 0xAA	; 170
     6ee:	b2 e0       	ldi	r27, 0x02	; 2
     6f0:	e4 e3       	ldi	r30, 0x34	; 52
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	88 e0       	ldi	r24, 0x08	; 8
     6f6:	01 90       	ld	r0, Z+
     6f8:	0d 92       	st	X+, r0
     6fa:	81 50       	subi	r24, 0x01	; 1
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <init_timer_m1284P+0x64>
	INIT_TIMER(Timer1A, Timer1, OCR1A, TIMER_A, PinD5) // Pin 19
     6fe:	ad e0       	ldi	r26, 0x0D	; 13
     700:	b2 e0       	ldi	r27, 0x02	; 2
     702:	ec e2       	ldi	r30, 0x2C	; 44
     704:	f1 e0       	ldi	r31, 0x01	; 1
     706:	88 e0       	ldi	r24, 0x08	; 8
     708:	01 90       	ld	r0, Z+
     70a:	0d 92       	st	X+, r0
     70c:	81 50       	subi	r24, 0x01	; 1
     70e:	e1 f7       	brne	.-8      	; 0x708 <init_timer_m1284P+0x76>
	INIT_TIMER(Timer1B, Timer1, OCR1B, TIMER_B, PinD4) // Pin 18
     710:	af e9       	ldi	r26, 0x9F	; 159
     712:	b2 e0       	ldi	r27, 0x02	; 2
     714:	e4 e2       	ldi	r30, 0x24	; 36
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	01 90       	ld	r0, Z+
     71c:	0d 92       	st	X+, r0
     71e:	81 50       	subi	r24, 0x01	; 1
     720:	e1 f7       	brne	.-8      	; 0x71a <init_timer_m1284P+0x88>
	INIT_TIMER(Timer2A, Timer2, OCR2A, TIMER_A, PinD7) // Pin 21
     722:	ac e3       	ldi	r26, 0x3C	; 60
     724:	b2 e0       	ldi	r27, 0x02	; 2
     726:	ec e1       	ldi	r30, 0x1C	; 28
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	88 e0       	ldi	r24, 0x08	; 8
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	81 50       	subi	r24, 0x01	; 1
     732:	e1 f7       	brne	.-8      	; 0x72c <init_timer_m1284P+0x9a>
	INIT_TIMER(Timer2B, Timer2, OCR2B, TIMER_B, PinD6) // Pin 20
     734:	a7 e9       	ldi	r26, 0x97	; 151
     736:	b2 e0       	ldi	r27, 0x02	; 2
     738:	e4 e1       	ldi	r30, 0x14	; 20
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	88 e0       	ldi	r24, 0x08	; 8
     73e:	01 90       	ld	r0, Z+
     740:	0d 92       	st	X+, r0
     742:	81 50       	subi	r24, 0x01	; 1
     744:	e1 f7       	brne	.-8      	; 0x73e <init_timer_m1284P+0xac>
	INIT_TIMER(Timer3A, Timer3, OCR3A, TIMER_A, PinB6) // Pin7
     746:	a4 e2       	ldi	r26, 0x24	; 36
     748:	b2 e0       	ldi	r27, 0x02	; 2
     74a:	ec e0       	ldi	r30, 0x0C	; 12
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	01 90       	ld	r0, Z+
     752:	0d 92       	st	X+, r0
     754:	81 50       	subi	r24, 0x01	; 1
     756:	e1 f7       	brne	.-8      	; 0x750 <init_timer_m1284P+0xbe>
	INIT_TIMER(Timer3B, Timer3, OCR3B, TIMER_B, PinB7) // Pin 8
     758:	a5 ef       	ldi	r26, 0xF5	; 245
     75a:	b1 e0       	ldi	r27, 0x01	; 1
     75c:	e4 e0       	ldi	r30, 0x04	; 4
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	01 90       	ld	r0, Z+
     764:	0d 92       	st	X+, r0
     766:	81 50       	subi	r24, 0x01	; 1
     768:	e1 f7       	brne	.-8      	; 0x762 <init_timer_m1284P+0xd0>
}
     76a:	08 95       	ret

0000076c <init_process_base>:
	// allocating memory (otherwise it would attempt to detect heap-stack-collisions). 
	// When using multiple processes, we have multiple stacks and this collision-detection
	// is therefore not usable. Malloc can use the whole heap, except for the stack of the
	// first running process, which is at the end of the usable RAM.
	// As expected, you really have to think about what stack sizes you choose...
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	90 e4       	ldi	r25, 0x40	; 64
     770:	20 91 00 01 	lds	r18, 0x0100
     774:	30 91 01 01 	lds	r19, 0x0101
     778:	82 1b       	sub	r24, r18
     77a:	93 0b       	sbc	r25, r19
     77c:	90 93 e5 01 	sts	0x01E5, r25
     780:	80 93 e4 01 	sts	0x01E4, r24
	__malloc_margin = 0;
     784:	10 92 e1 01 	sts	0x01E1, r1
     788:	10 92 e0 01 	sts	0x01E0, r1
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     78c:	60 91 ea 01 	lds	r22, 0x01EA
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	6e 5f       	subi	r22, 0xFE	; 254
     794:	7f 4f       	sbci	r23, 0xFF	; 255
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <calloc>
     79e:	fc 01       	movw	r30, r24
	if (!process) { return InvalidProcess; }
     7a0:	00 97       	sbiw	r24, 0x00	; 0
     7a2:	19 f0       	breq	.+6      	; 0x7aa <init_process_base+0x3e>
	process->stackPointer = stackPointer;
     7a4:	11 82       	std	Z+1, r1	; 0x01
     7a6:	10 82       	st	Z, r1
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <init_process_base+0x42>

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
     7aa:	e0 e0       	ldi	r30, 0x00	; 0
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
	__malloc_heap_end = (void*) (RAMEND - __default_stack_size);
	__malloc_margin = 0;
	
	// The stack-pointer is left to zero, because this process-structure will be stored
	// into, before it will be restored again.
	__current_process = initializeProcessInternal(__main_process_additional_memory, NULL);
     7ae:	f0 93 ec 01 	sts	0x01EC, r31
     7b2:	e0 93 eb 01 	sts	0x01EB, r30
}
     7b6:	08 95       	ret

000007b8 <createProcessBase3>:
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}

Process createProcess3(ProcessEntryPoint entryPoint, void *parameter, uint16_t stackSize, uint8_t additionalMem) {
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <createProcessBase3+0x16>
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	d8 2e       	mov	r13, r24
     7d4:	c9 2e       	mov	r12, r25
     7d6:	7b 01       	movw	r14, r22
     7d8:	5a 01       	movw	r10, r20
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
     7da:	ca 01       	movw	r24, r20
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	29 83       	std	Y+1, r18	; 0x01
     7e2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <calloc>
     7e6:	8c 01       	movw	r16, r24
	if (!stackTop) { return InvalidProcess; }
     7e8:	29 81       	ldd	r18, Y+1	; 0x01
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	b1 f1       	breq	.+108    	; 0x85a <createProcessBase3+0xa2>
	uint8_t *stackBottom = stackTop + stackSize - 1;
     7ee:	a5 01       	movw	r20, r10
     7f0:	41 50       	subi	r20, 0x01	; 1
     7f2:	50 40       	sbci	r21, 0x00	; 0
     7f4:	48 0f       	add	r20, r24
     7f6:	59 1f       	adc	r21, r25
	// "Push" the address of the ProcessGraveyard and the actual entryPoint
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	fa 01       	movw	r30, r20
     7fe:	80 83       	st	Z, r24
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	90 83       	st	Z, r25
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
     804:	fa 01       	movw	r30, r20
     806:	32 97       	sbiw	r30, 0x02	; 2
     808:	d0 82       	st	Z, r13
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
     80a:	fa 01       	movw	r30, r20
     80c:	33 97       	sbiw	r30, 0x03	; 3
     80e:	c0 82       	st	Z, r12
#include "scheduler_internal.h"

Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
     810:	62 2f       	mov	r22, r18
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	6e 5f       	subi	r22, 0xFE	; 254
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	49 83       	std	Y+1, r20	; 0x01
     81e:	5a 83       	std	Y+2, r21	; 0x02
     820:	0e 94 da 08 	call	0x11b4	; 0x11b4 <calloc>
     824:	9c 01       	movw	r18, r24
	if (!process) { return InvalidProcess; }
     826:	49 81       	ldd	r20, Y+1	; 0x01
     828:	5a 81       	ldd	r21, Y+2	; 0x02
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	49 f0       	breq	.+18     	; 0x840 <createProcessBase3+0x88>
	*(stackBottom - 0) = LOBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
     82e:	ca 01       	movw	r24, r20
     830:	86 97       	sbiw	r24, 0x26	; 38
Process __current_process = NULL;

static Process initializeProcessInternal(uint8_t additionalMemory, void *stackPointer) {
	PPCB process = (PPCB) calloc(1, sizeof(PCB) + additionalMemory);
	if (!process) { return InvalidProcess; }
	process->stackPointer = stackPointer;
     832:	f9 01       	movw	r30, r18
     834:	91 83       	std	Z+1, r25	; 0x01
     836:	80 83       	st	Z, r24
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     838:	e1 14       	cp	r14, r1
     83a:	f1 04       	cpc	r15, r1
     83c:	31 f4       	brne	.+12     	; 0x84a <createProcessBase3+0x92>
     83e:	04 c0       	rjmp	.+8      	; 0x848 <createProcessBase3+0x90>
	*(stackBottom - 1) = HIBYTE((uint16_t) ProcessGraveyard);
	*(stackBottom - 2) = LOBYTE((uint16_t) entryPoint);
	*(stackBottom - 3) = HIBYTE((uint16_t) entryPoint);
	
	Process result = initializeProcessInternal(additionalMem, (void*) (stackBottom - INITIAL_STACK_SIZE));
	if (result == InvalidProcess) { free(stackTop); return InvalidProcess; }
     840:	c8 01       	movw	r24, r16
     842:	0e 94 99 09 	call	0x1332	; 0x1332 <free>
     846:	09 c0       	rjmp	.+18     	; 0x85a <createProcessBase3+0xa2>
	
	// "Push" the process-parameter on r25 and r24, following GCCs calling convention.
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
     848:	79 01       	movw	r14, r18
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
     84a:	fa 01       	movw	r30, r20
     84c:	7e 97       	sbiw	r30, 0x1e	; 30
     84e:	e0 82       	st	Z, r14
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
     850:	4f 51       	subi	r20, 0x1F	; 31
     852:	50 40       	sbci	r21, 0x00	; 0
     854:	fa 01       	movw	r30, r20
     856:	f0 82       	st	Z, r15
	return result;
     858:	02 c0       	rjmp	.+4      	; 0x85e <createProcessBase3+0xa6>
	// Allocate stack-memory and set the stack-pointer.
	// The stack-pointer of the new process is the end of the allocated block,
	// because the stack grows in opposite direction as the allocation.
	// 2 and sizeof(PCB) are subtracted because there is an initial context pushed there.
	uint8_t *stackTop = (uint8_t*) calloc(stackSize, sizeof(uint8_t));
	if (!stackTop) { return InvalidProcess; }
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
	// 6 bytes are pushed on the initial stack below the first register r0
	if (!parameter) parameter = result;
	*(stackBottom - (6 + 24)) = LOBYTE((uint16_t) parameter);
	*(stackBottom - (6 + 25)) = HIBYTE((uint16_t) parameter);
	return result;
}
     85e:	c9 01       	movw	r24, r18
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	08 95       	ret

0000087a <createProcessBase2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *parameter) {
     87a:	40 91 00 01 	lds	r20, 0x0100
     87e:	50 91 01 01 	lds	r21, 0x0101
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <createProcessBase3>
	return createProcess3(entryPoint, parameter, __default_stack_size, 0);
}
     888:	08 95       	ret

0000088a <createProcessBase>:

Process createProcess(ProcessEntryPoint entryPoint) {
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 3d 04 	call	0x87a	; 0x87a <createProcessBase2>
	return createProcess2(entryPoint, NULL);
}
     892:	08 95       	ret

00000894 <switchContext>:

// This method may not call other methods, so that gcc does not save any registers at the beginning.
void switchContext(PPCB oldProcess, PPCB newProcess) {
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	0f 92       	push	r0
     89c:	0b b6       	in	r0, 0x3b	; 59
     89e:	0f 92       	push	r0
     8a0:	1f 92       	push	r1
     8a2:	11 24       	eor	r1, r1
     8a4:	2f 92       	push	r2
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	2f 93       	push	r18
     8c6:	3f 93       	push	r19
     8c8:	4f 93       	push	r20
     8ca:	5f 93       	push	r21
     8cc:	6f 93       	push	r22
     8ce:	7f 93       	push	r23
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	af 93       	push	r26
     8d6:	bf 93       	push	r27
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	ef 93       	push	r30
     8de:	ff 93       	push	r31
	PushProcessContext()
	asm volatile("movw r26, r24"); // Place oldProcess in the X-register
     8e0:	dc 01       	movw	r26, r24
	StoreContextStack()
     8e2:	0d b6       	in	r0, 0x3d	; 61
     8e4:	0d 92       	st	X+, r0
     8e6:	0e b6       	in	r0, 0x3e	; 62
     8e8:	0d 92       	st	X+, r0
	asm volatile("movw r26, r22"); // Place newProcess in the X-register
     8ea:	db 01       	movw	r26, r22
	RestoreContextStack()
     8ec:	0d 90       	ld	r0, X+
     8ee:	0d be       	out	0x3d, r0	; 61
     8f0:	0d 90       	ld	r0, X+
     8f2:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	9f 90       	pop	r9
     922:	8f 90       	pop	r8
     924:	7f 90       	pop	r7
     926:	6f 90       	pop	r6
     928:	5f 90       	pop	r5
     92a:	4f 90       	pop	r4
     92c:	3f 90       	pop	r3
     92e:	2f 90       	pop	r2
     930:	1f 90       	pop	r1
     932:	0f 90       	pop	r0
     934:	0b be       	out	0x3b, r0	; 59
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0

	sei();
     93c:	78 94       	sei
	// Enable interrupts here, since we don't have the reti-instruction at the end.
	// Most likely interrupts would be disabled otherwise, since the status-register is stored in the 
	// timer-ISR, while interrupts are still disabled.
}
     93e:	08 95       	ret

00000940 <getCurrentProcess>:

inline Process getCurrentProcess() {
     940:	80 91 eb 01 	lds	r24, 0x01EB
     944:	90 91 ec 01 	lds	r25, 0x01EC
     948:	08 95       	ret

0000094a <switchProcess>:
	return (Process) __current_process;
}

void switchProcess(Process newProcess) {
     94a:	bc 01       	movw	r22, r24
	Process oldCurrentProcess = __current_process;
     94c:	80 91 eb 01 	lds	r24, 0x01EB
     950:	90 91 ec 01 	lds	r25, 0x01EC
	__current_process = newProcess;
     954:	70 93 ec 01 	sts	0x01EC, r23
     958:	60 93 eb 01 	sts	0x01EB, r22
	switchContext((PPCB) oldCurrentProcess, (PPCB) newProcess);
     95c:	0e 94 4a 04 	call	0x894	; 0x894 <switchContext>
}
     960:	08 95       	ret

00000962 <createProcess3>:
#undef init_process

#define ProcMem(proc) ((PPCBExt)getProcessMemoryBase((Process) proc))
#define StackPointer(proc) ((uint8_t*)((PPCB)proc)->stackPointer)

Process createProcess3(ProcessEntryPoint entryPoint, void *processArgument, uint16_t stackSize, uint8_t additionalMemory) {
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	ea 01       	movw	r28, r20
	Process proc = createProcessBase3(entryPoint, processArgument, stackSize, sizeof(PCBExt) + additionalMemory);
     968:	2a 5f       	subi	r18, 0xFA	; 250
     96a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <createProcessBase3>
     96e:	fc 01       	movw	r30, r24
	if (proc == InvalidProcess) return proc;
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	e9 f0       	breq	.+58     	; 0x9ae <createProcess3+0x4c>

inline void *getProcessMemory(Process proc) {
	return proc + sizeof(PCB);
     974:	dc 01       	movw	r26, r24
     976:	14 96       	adiw	r26, 0x04	; 4
	PPCBExt ext = ProcMem(proc);
	ext->processNumber = __nextProcessNumber++;
     978:	80 91 02 01 	lds	r24, 0x0102
     97c:	90 91 03 01 	lds	r25, 0x0103
     980:	95 83       	std	Z+5, r25	; 0x05
     982:	84 83       	std	Z+4, r24	; 0x04
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	90 93 03 01 	sts	0x0103, r25
     98a:	80 93 02 01 	sts	0x0102, r24
	ext->stackSize = stackSize;
     98e:	13 96       	adiw	r26, 0x03	; 3
     990:	dc 93       	st	X, r29
     992:	ce 93       	st	-X, r28
     994:	12 97       	sbiw	r26, 0x02	; 2
	ext->stackTop = StackPointer(proc) + INITIAL_STACK_SIZE - stackSize + 1; // A little hacky, but at least no magic numbers here.
     996:	27 e2       	ldi	r18, 0x27	; 39
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	2c 1b       	sub	r18, r28
     99c:	3d 0b       	sbc	r19, r29
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	82 0f       	add	r24, r18
     9a4:	93 1f       	adc	r25, r19
     9a6:	15 96       	adiw	r26, 0x05	; 5
     9a8:	9c 93       	st	X, r25
     9aa:	8e 93       	st	-X, r24
     9ac:	14 97       	sbiw	r26, 0x04	; 4
	return proc;
}
     9ae:	cf 01       	movw	r24, r30
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <createProcess2>:

Process createProcess2(ProcessEntryPoint entryPoint, void *processArgument) {
     9b6:	40 91 00 01 	lds	r20, 0x0100
     9ba:	50 91 01 01 	lds	r21, 0x0101
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	0e 94 b1 04 	call	0x962	; 0x962 <createProcess3>
	return createProcess3(entryPoint, processArgument, __default_stack_size, 0);
}
     9c4:	08 95       	ret

000009c6 <createProcess>:

Process createProcess(ProcessEntryPoint entryPoint) {
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 db 04 	call	0x9b6	; 0x9b6 <createProcess2>
	return createProcess2(entryPoint, NULL);
}
     9ce:	08 95       	ret

000009d0 <freeProcess>:

void freeProcess(Process process) {
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
	if (process == getCurrentProcess()) return;
     9d6:	80 91 eb 01 	lds	r24, 0x01EB
     9da:	90 91 ec 01 	lds	r25, 0x01EC
     9de:	c8 17       	cp	r28, r24
     9e0:	d9 07       	cpc	r29, r25
     9e2:	69 f0       	breq	.+26     	; 0x9fe <freeProcess+0x2e>
     9e4:	fe 01       	movw	r30, r28
     9e6:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt pcb = ProcMem(process);
	if (pcb->processNumber != 0) { // Dont free intial stack.
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	9d 81       	ldd	r25, Y+5	; 0x05
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	21 f0       	breq	.+8      	; 0x9f8 <freeProcess+0x28>
		free(pcb->stackTop);
     9f0:	84 81       	ldd	r24, Z+4	; 0x04
     9f2:	95 81       	ldd	r25, Z+5	; 0x05
     9f4:	0e 94 99 09 	call	0x1332	; 0x1332 <free>
	}
	free(process);
     9f8:	ce 01       	movw	r24, r28
     9fa:	0e 94 99 09 	call	0x1332	; 0x1332 <free>
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <getProcessStackSize>:

uint8_t getProcessStackSize(Process process) {
     a04:	fc 01       	movw	r30, r24
     a06:	86 81       	ldd	r24, Z+6	; 0x06
     a08:	08 95       	ret

00000a0a <getFreeProcessStackSize>:
	return ProcMem(process)->stackSize;
}

uint16_t getFreeProcessStackSize(Process process) {
     a0a:	fc 01       	movw	r30, r24
	PPCBExt pcb = ProcMem(process);
	return (uint16_t) ((uint8_t*) pcb->stackTop - StackPointer(process));
     a0c:	20 85       	ldd	r18, Z+8	; 0x08
     a0e:	31 85       	ldd	r19, Z+9	; 0x09
     a10:	80 81       	ld	r24, Z
     a12:	91 81       	ldd	r25, Z+1	; 0x01
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
}
     a18:	c9 01       	movw	r24, r18
     a1a:	08 95       	ret

00000a1c <getProcessNumber>:

uint16_t getProcessNumber(Process process) {
     a1c:	fc 01       	movw	r30, r24
	return ProcMem(process)->processNumber;
}
     a1e:	84 81       	ldd	r24, Z+4	; 0x04
     a20:	95 81       	ldd	r25, Z+5	; 0x05
     a22:	08 95       	ret

00000a24 <getProcessMemory>:

inline void *getProcessMemory(Process proc) {
     a24:	9c 01       	movw	r18, r24
     a26:	28 5d       	subi	r18, 0xD8	; 216
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
	return ProcMem(proc) + ADDITIONAL_MEMORY;
}
     a2a:	c9 01       	movw	r24, r18
     a2c:	08 95       	ret

00000a2e <init_process>:

// Initialize the API in this header.
// This is not a KERNEL_INIT-function and has to be called explicitely. This includes initialization
// for the basic process-module.
// This should be called as late as possible, but before starting any scheduler.
void init_process() {
     a2e:	80 91 ea 01 	lds	r24, 0x01EA
     a32:	8a 5f       	subi	r24, 0xFA	; 250
     a34:	80 93 ea 01 	sts	0x01EA, r24
	// Incrementing this variable must be done before the process.kernel init-routine.
	// Other kernels would need to define a KERNEL_INIT function, but here we can just do it before the base-function.
	__main_process_additional_memory += ADDITIONAL_MEMORY;
	init_process_base();
     a38:	0e 94 b6 03 	call	0x76c	; 0x76c <init_process_base>
     a3c:	a0 91 eb 01 	lds	r26, 0x01EB
     a40:	b0 91 ec 01 	lds	r27, 0x01EC
     a44:	fd 01       	movw	r30, r26
     a46:	34 96       	adiw	r30, 0x04	; 4
	PPCBExt initialProcess = ProcMem(__current_process);
	initialProcess->processNumber = 0;
     a48:	15 96       	adiw	r26, 0x05	; 5
     a4a:	1c 92       	st	X, r1
     a4c:	1e 92       	st	-X, r1
     a4e:	14 97       	sbiw	r26, 0x04	; 4
	initialProcess->stackSize = __default_stack_size;
     a50:	80 91 00 01 	lds	r24, 0x0100
     a54:	90 91 01 01 	lds	r25, 0x0101
     a58:	93 83       	std	Z+3, r25	; 0x03
     a5a:	82 83       	std	Z+2, r24	; 0x02
	initialProcess->stackTop = __malloc_heap_end;
     a5c:	80 91 e4 01 	lds	r24, 0x01E4
     a60:	90 91 e5 01 	lds	r25, 0x01E5
     a64:	95 83       	std	Z+5, r25	; 0x05
     a66:	84 83       	std	Z+4, r24	; 0x04
}
     a68:	08 95       	ret

00000a6a <init_idle_scheduler>:
#error This scheduler-kernel-module requires the Process module to be included!
#endif

Process __idle_process;

void init_idle_scheduler() {
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	40 e4       	ldi	r20, 0x40	; 64
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	0e 94 b1 04 	call	0x962	; 0x962 <createProcess3>
     a7c:	90 93 90 02 	sts	0x0290, r25
     a80:	80 93 8f 02 	sts	0x028F, r24
	// 64 byte stack... as little as possible for still allowing interrupts.
	__idle_process = createProcess3(ProcessGraveyard, NULL, 64, 0);
}
     a84:	08 95       	ret

00000a86 <idle_schedule>:
KERNEL_INIT(init_idle_scheduler)

Process idle_schedule(BOOL invokedFromTimer) {
     a86:	80 91 8f 02 	lds	r24, 0x028F
     a8a:	90 91 90 02 	lds	r25, 0x0290
     a8e:	08 95       	ret

00000a90 <init_scheduler>:
#include <kernel/processes/idle/idle_scheduler.kernel.h>

#define CLOCKISR TIMER3_COMPA_vect
#include <kernel/processes/timed_scheduler.kernel.h>

void init_scheduler() {
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	PTimerConfig timerConf = &Timer3;
	PTimer timer = &Timer3A;
	
	setWaveformGenerationMode(timerConf, clear_timer_on_match);
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d2 e0       	ldi	r29, 0x02	; 2
     a98:	ce 01       	movw	r24, r28
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <setWaveformGenerationMode>
	setTimerCompareValue(timer, 250); // THIS is the main difference between this kernel and the others
     aa2:	84 e2       	ldi	r24, 0x24	; 36
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	6a ef       	ldi	r22, 0xFA	; 250
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	0e 94 5d 07 	call	0xeba	; 0xeba <setTimerCompareValue>
	setTimerClockSelect(timerConf, prescale_8);
     aae:	ce 01       	movw	r24, r28
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	0e 94 2a 06 	call	0xc54	; 0xc54 <setTimerClockSelect>
	// --> 8 * 2500 = 20000, resulting in one compare-match every millisecond
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <start_scheduler>:
KERNEL_INIT(init_scheduler)

void start_scheduler() {
     abe:	84 e2       	ldi	r24, 0x24	; 36
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 35 07 	call	0xe6a	; 0xe6a <enableTimerInterrupt>
	// Enabling the interrupt will start invoking the scheduler.
	enableTimerInterrupt(&Timer3A);
	sei();
     ac6:	78 94       	sei
}
     ac8:	08 95       	ret

// This function can be implemented in user code to have some initialization-code before the timer starts running.
// This kernel-module should be included after all process-related modules.
void before_scheduler() __attribute__((weak));
void before_scheduler() {}
     aca:	08 95       	ret

00000acc <schedule>:

// Regular header-files
#include "kernel.h"

Process schedule(BOOL fromTimer) {
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	ec 01       	movw	r28, r24
	Process p = dms_schedule(fromTimer);
     ad2:	0e 94 c3 00 	call	0x186	; 0x186 <dms_schedule>
     ad6:	9c 01       	movw	r18, r24
	if (!p) p = rr_schedule(fromTimer);
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	51 f4       	brne	.+20     	; 0xaf0 <schedule+0x24>
     adc:	ce 01       	movw	r24, r28
     ade:	0e 94 0b 08 	call	0x1016	; 0x1016 <rr_schedule>
     ae2:	9c 01       	movw	r18, r24
	if (!p) p = idle_schedule(fromTimer);
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <schedule+0x24>
	return __idle_process;
     ae8:	20 91 8f 02 	lds	r18, 0x028F
     aec:	30 91 90 02 	lds	r19, 0x0290
	return p;
}
     af0:	c9 01       	movw	r24, r18
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <__vector_32>:
// This is defined in timed_scheduler.kernel to be the ISR of the timer-interrupt.
// If not yet defined, the scheduler-ISR will just be a regular function.
#ifndef SCHEDULER_TICK_ISR
void scheduler_tick() {
#else
SCHEDULER_TICK_ISR {
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	0f 92       	push	r0
     b00:	0b b6       	in	r0, 0x3b	; 59
     b02:	0f 92       	push	r0
     b04:	1f 92       	push	r1
     b06:	11 24       	eor	r1, r1
     b08:	2f 92       	push	r2
     b0a:	3f 92       	push	r3
     b0c:	4f 92       	push	r4
     b0e:	5f 92       	push	r5
     b10:	6f 92       	push	r6
     b12:	7f 92       	push	r7
     b14:	8f 92       	push	r8
     b16:	9f 92       	push	r9
     b18:	af 92       	push	r10
     b1a:	bf 92       	push	r11
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	2f 93       	push	r18
     b2a:	3f 93       	push	r19
     b2c:	4f 93       	push	r20
     b2e:	5f 93       	push	r21
     b30:	6f 93       	push	r22
     b32:	7f 93       	push	r23
     b34:	8f 93       	push	r24
     b36:	9f 93       	push	r25
     b38:	af 93       	push	r26
     b3a:	bf 93       	push	r27
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
	// First push the current context, before any register may be modified.
	PushProcessContext()

	// Can be defined before including this file, to include some additional action here
	#ifdef SCHEDULER_TICK_ISR_CONTEXT_PUSHED
	SCHEDULER_TICK_ISR_CONTEXT_PUSHED
     b44:	80 91 ed 01 	lds	r24, 0x01ED
     b48:	90 91 ee 01 	lds	r25, 0x01EE
     b4c:	a0 91 ef 01 	lds	r26, 0x01EF
     b50:	b0 91 f0 01 	lds	r27, 0x01F0
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	a1 1d       	adc	r26, r1
     b58:	b1 1d       	adc	r27, r1
     b5a:	80 93 ed 01 	sts	0x01ED, r24
     b5e:	90 93 ee 01 	sts	0x01EE, r25
     b62:	a0 93 ef 01 	sts	0x01EF, r26
     b66:	b0 93 f0 01 	sts	0x01F0, r27
	#endif

	// Place current process in the X-register, store the stack-pointer.
	asm volatile("lds r26, __current_process");
     b6a:	a0 91 eb 01 	lds	r26, 0x01EB
	asm volatile("lds r27, __current_process + 1");
     b6e:	b0 91 ec 01 	lds	r27, 0x01EC
	StoreContextStack()
     b72:	0d b6       	in	r0, 0x3d	; 61
     b74:	0d 92       	st	X+, r0
     b76:	0e b6       	in	r0, 0x3e	; 62
     b78:	0d 92       	st	X+, r0

	__current_process = schedule(TRUE);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 66 05 	call	0xacc	; 0xacc <schedule>
     b82:	90 93 ec 01 	sts	0x01EC, r25
     b86:	80 93 eb 01 	sts	0x01EB, r24
	if (__current_process == InvalidProcess) {
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	11 f4       	brne	.+4      	; 0xb92 <__vector_32+0x9a>
		// This is an invalid condition. The schedule() function is required to return a valid process.
		// Force a hardware-reset using the watchdog-timer.
		// Use the idle-scheduler to have a default fallback-process.
		HARDWARE_RESET();
     b8e:	0e 94 5f 08 	call	0x10be	; 0x10be <HARDWARE_RESET>
	}

	asm volatile("movw r26, r24"); // Place newProcess in the X-register
     b92:	dc 01       	movw	r26, r24
	RestoreContextStack()
     b94:	0d 90       	ld	r0, X+
     b96:	0d be       	out	0x3d, r0	; 61
     b98:	0d 90       	ld	r0, X+
     b9a:	0e be       	out	0x3e, r0	; 62
	PopProcessContext()
     b9c:	ff 91       	pop	r31
     b9e:	ef 91       	pop	r30
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	bf 91       	pop	r27
     ba6:	af 91       	pop	r26
     ba8:	9f 91       	pop	r25
     baa:	8f 91       	pop	r24
     bac:	7f 91       	pop	r23
     bae:	6f 91       	pop	r22
     bb0:	5f 91       	pop	r21
     bb2:	4f 91       	pop	r20
     bb4:	3f 91       	pop	r19
     bb6:	2f 91       	pop	r18
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	7f 90       	pop	r7
     bce:	6f 90       	pop	r6
     bd0:	5f 90       	pop	r5
     bd2:	4f 90       	pop	r4
     bd4:	3f 90       	pop	r3
     bd6:	2f 90       	pop	r2
     bd8:	1f 90       	pop	r1
     bda:	0f 90       	pop	r0
     bdc:	0b be       	out	0x3b, r0	; 59
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	0f 90       	pop	r0
	
	// Return from the interrupt, into the context of the new process.
	asm volatile("reti");
     be4:	18 95       	reti

00000be6 <init_kernel>:
}
     be6:	0e 94 17 05 	call	0xa2e	; 0xa2e <init_process>

void init_kernel() {
	// Final initialization-sequence
	init_process(); // AFTER other modules modified __default_stack_size and __main_process_additional_memory
	rr_captureMainProcess(PrioNormal);
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 51 08 	call	0x10a2	; 0x10a2 <rr_captureMainProcess>
	before_scheduler(); // AFTER all other initialization and BEFORE starting the scheduler
     bf2:	0e 94 7b 00 	call	0xf6	; 0xf6 <before_scheduler>
	start_scheduler();
     bf6:	0e 94 5f 05 	call	0xabe	; 0xabe <start_scheduler>
}
     bfa:	08 95       	ret

00000bfc <setCompareMatchOutputMode>:
 */ 

#include "timer.h"
#include "port.h"

void setCompareMatchOutputMode(PTimer timer, CompareMatchOutputMode com) {
     bfc:	fc 01       	movw	r30, r24
     bfe:	64 30       	cpi	r22, 0x04	; 4
     c00:	71 05       	cpc	r23, r1
     c02:	48 f4       	brcc	.+18     	; 0xc16 <setCompareMatchOutputMode+0x1a>
     c04:	db 01       	movw	r26, r22
     c06:	a8 52       	subi	r26, 0x28	; 40
     c08:	be 4f       	sbci	r27, 0xFE	; 254
     c0a:	2c 91       	ld	r18, X
     c0c:	64 52       	subi	r22, 0x24	; 36
     c0e:	7e 4f       	sbci	r23, 0xFE	; 254
     c10:	db 01       	movw	r26, r22
     c12:	3c 91       	ld	r19, X
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <setCompareMatchOutputMode+0x1e>
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	20 e0       	ldi	r18, 0x00	; 0
			break;
		case clear_on_match:
			oneBits = _BV(COM0A1) | _BV(COM0A0);
			break;
	}
	if (timer->type == TIMER_B) {
     c1a:	84 81       	ldd	r24, Z+4	; 0x04
     c1c:	95 81       	ldd	r25, Z+5	; 0x05
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	91 05       	cpc	r25, r1
     c22:	21 f4       	brne	.+8      	; 0xc2c <setCompareMatchOutputMode+0x30>
		// The COM-bits for the B-timer are right next to the A-timer-bits.
		oneBits = oneBits >> 2;
     c24:	36 95       	lsr	r19
     c26:	36 95       	lsr	r19
		zeroBits = zeroBits >> 2;
     c28:	26 95       	lsr	r18
     c2a:	26 95       	lsr	r18
	}
	*timer->timer->controlRegisterA |= oneBits;
     c2c:	a0 81       	ld	r26, Z
     c2e:	b1 81       	ldd	r27, Z+1	; 0x01
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	0d 90       	ld	r0, X+
     c34:	bc 91       	ld	r27, X
     c36:	a0 2d       	mov	r26, r0
     c38:	8c 91       	ld	r24, X
     c3a:	83 2b       	or	r24, r19
     c3c:	8c 93       	st	X, r24
	*timer->timer->controlRegisterA &= ~zeroBits;
     c3e:	01 90       	ld	r0, Z+
     c40:	f0 81       	ld	r31, Z
     c42:	e0 2d       	mov	r30, r0
     c44:	01 80       	ldd	r0, Z+1	; 0x01
     c46:	f2 81       	ldd	r31, Z+2	; 0x02
     c48:	e0 2d       	mov	r30, r0
     c4a:	80 81       	ld	r24, Z
     c4c:	20 95       	com	r18
     c4e:	28 23       	and	r18, r24
     c50:	20 83       	st	Z, r18
}
     c52:	08 95       	ret

00000c54 <setTimerClockSelect>:

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
     c54:	fc 01       	movw	r30, r24
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
     c56:	80 81       	ld	r24, Z
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	82 70       	andi	r24, 0x02	; 2
     c5c:	90 70       	andi	r25, 0x00	; 0
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
	switch (cs) {
     c5e:	64 30       	cpi	r22, 0x04	; 4
     c60:	71 05       	cpc	r23, r1
     c62:	71 f1       	breq	.+92     	; 0xcc0 <setTimerClockSelect+0x6c>
     c64:	65 30       	cpi	r22, 0x05	; 5
     c66:	71 05       	cpc	r23, r1
     c68:	68 f4       	brcc	.+26     	; 0xc84 <setTimerClockSelect+0x30>
     c6a:	61 30       	cpi	r22, 0x01	; 1
     c6c:	71 05       	cpc	r23, r1
     c6e:	f9 f0       	breq	.+62     	; 0xcae <setTimerClockSelect+0x5a>
     c70:	61 30       	cpi	r22, 0x01	; 1
     c72:	71 05       	cpc	r23, r1
     c74:	d8 f1       	brcs	.+118    	; 0xcec <setTimerClockSelect+0x98>
     c76:	62 30       	cpi	r22, 0x02	; 2
     c78:	71 05       	cpc	r23, r1
     c7a:	e1 f0       	breq	.+56     	; 0xcb4 <setTimerClockSelect+0x60>
     c7c:	63 30       	cpi	r22, 0x03	; 3
     c7e:	71 05       	cpc	r23, r1
     c80:	a1 f4       	brne	.+40     	; 0xcaa <setTimerClockSelect+0x56>
     c82:	1b c0       	rjmp	.+54     	; 0xcba <setTimerClockSelect+0x66>
     c84:	67 30       	cpi	r22, 0x07	; 7
     c86:	71 05       	cpc	r23, r1
     c88:	21 f1       	breq	.+72     	; 0xcd2 <setTimerClockSelect+0x7e>
     c8a:	68 30       	cpi	r22, 0x08	; 8
     c8c:	71 05       	cpc	r23, r1
     c8e:	38 f4       	brcc	.+14     	; 0xc9e <setTimerClockSelect+0x4a>
     c90:	65 30       	cpi	r22, 0x05	; 5
     c92:	71 05       	cpc	r23, r1
     c94:	c1 f0       	breq	.+48     	; 0xcc6 <setTimerClockSelect+0x72>
     c96:	66 30       	cpi	r22, 0x06	; 6
     c98:	71 05       	cpc	r23, r1
     c9a:	39 f4       	brne	.+14     	; 0xcaa <setTimerClockSelect+0x56>
     c9c:	17 c0       	rjmp	.+46     	; 0xccc <setTimerClockSelect+0x78>
     c9e:	68 30       	cpi	r22, 0x08	; 8
     ca0:	71 05       	cpc	r23, r1
     ca2:	d1 f0       	breq	.+52     	; 0xcd8 <setTimerClockSelect+0x84>
     ca4:	69 30       	cpi	r22, 0x09	; 9
     ca6:	71 05       	cpc	r23, r1
     ca8:	e1 f0       	breq	.+56     	; 0xce2 <setTimerClockSelect+0x8e>
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
	uint8_t oneBits = 0;
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	1d c0       	rjmp	.+58     	; 0xce8 <setTimerClockSelect+0x94>
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
     cae:	91 e0       	ldi	r25, 0x01	; 1
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
     cb0:	86 e0       	ldi	r24, 0x06	; 6
			oneBits = _BV(CS00);
			break;
     cb2:	27 c0       	rjmp	.+78     	; 0xd02 <setTimerClockSelect+0xae>
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
			oneBits = _BV(CS01);
     cb4:	92 e0       	ldi	r25, 0x02	; 2
		case prescale_1: // 001
			zeroBits = _BV(CS02) | _BV(CS01);
			oneBits = _BV(CS00);
			break;
		case prescale_8: // 010
			zeroBits = _BV(CS02) | _BV(CS00);
     cb6:	85 e0       	ldi	r24, 0x05	; 5
			oneBits = _BV(CS01);
			break;
     cb8:	24 c0       	rjmp	.+72     	; 0xd02 <setTimerClockSelect+0xae>
		case prescale_32: // (only async) 011
			if (!asyncTimer) return; // INVALID!
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	e9 f4       	brne	.+58     	; 0xcf8 <setTimerClockSelect+0xa4>
     cbe:	2d c0       	rjmp	.+90     	; 0xd1a <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS02);
			oneBits = _BV(CS01) | _BV(CS00);
		case prescale_64:
			if (asyncTimer) { // 100
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	b9 f0       	breq	.+46     	; 0xcf2 <setTimerClockSelect+0x9e>
     cc4:	19 c0       	rjmp	.+50     	; 0xcf8 <setTimerClockSelect+0xa4>
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
			}
			break;
		case prescale_128: // (only async) 101
			if (!asyncTimer) return; // INVALID!
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	d1 f4       	brne	.+52     	; 0xcfe <setTimerClockSelect+0xaa>
     cca:	27 c0       	rjmp	.+78     	; 0xd1a <setTimerClockSelect+0xc6>
			zeroBits = _BV(CS01);
			oneBits = _BV(CS02) | _BV(CS00);
			break;
		case prescale_256:
			if (asyncTimer) { // 110
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	a1 f0       	breq	.+40     	; 0xcf8 <setTimerClockSelect+0xa4>
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <setTimerClockSelect+0x88>
				oneBits = _BV(CS02);
				zeroBits = _BV(CS00) | _BV(CS01);
			}
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	a1 f0       	breq	.+40     	; 0xcfe <setTimerClockSelect+0xaa>
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <setTimerClockSelect+0x92>
				oneBits = _BV(CS02) | _BV(CS00);
				zeroBits = _BV(CS01);
			}
			break;
		case external_falling_edge: // (no async) 110 
			if (asyncTimer) return; // INVALID!
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	f9 f4       	brne	.+62     	; 0xd1a <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01);
     cdc:	96 e0       	ldi	r25, 0x06	; 6
			zeroBits = _BV(CS00);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	10 c0       	rjmp	.+32     	; 0xd02 <setTimerClockSelect+0xae>
			break;
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	d1 f4       	brne	.+52     	; 0xd1a <setTimerClockSelect+0xc6>
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
     ce6:	97 e0       	ldi	r25, 0x07	; 7
	*timer->timer->controlRegisterA &= ~zeroBits;
}

void setTimerClockSelect(PTimerConfig timer, TimerClockSelect cs) {
	BOOL asyncTimer = timer->flags & TIMER_ASYNCHRONOUS;
	uint8_t zeroBits = 0;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0b c0       	rjmp	.+22     	; 0xd02 <setTimerClockSelect+0xae>
	uint8_t oneBits = 0;
     cec:	90 e0       	ldi	r25, 0x00	; 0
	switch (cs) {
		case no_clock: // 000
			zeroBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
     cee:	87 e0       	ldi	r24, 0x07	; 7
     cf0:	08 c0       	rjmp	.+16     	; 0xd02 <setTimerClockSelect+0xae>
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
				oneBits = _BV(CS01) | _BV(CS00);
     cf2:	93 e0       	ldi	r25, 0x03	; 3
		case prescale_64:
			if (asyncTimer) { // 100
				zeroBits = _BV(CS01) | _BV(CS00);
				oneBits = _BV(CS02);
			} else { // 011
				zeroBits = _BV(CS02);
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <setTimerClockSelect+0xae>
		case prescale_256:
			if (asyncTimer) { // 110
				oneBits = _BV(CS02) | _BV(CS01);
				zeroBits = _BV(CS00);
			} else { // 100
				oneBits = _BV(CS02);
     cf8:	94 e0       	ldi	r25, 0x04	; 4
				zeroBits = _BV(CS00) | _BV(CS01);
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <setTimerClockSelect+0xae>
			break;
		case prescale_1024:
			if (asyncTimer) { // 111
				oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			} else { // 101
				oneBits = _BV(CS02) | _BV(CS00);
     cfe:	95 e0       	ldi	r25, 0x05	; 5
				zeroBits = _BV(CS01);
     d00:	82 e0       	ldi	r24, 0x02	; 2
		case external_rising_edge: // (no async) 111
			if (asyncTimer) return; // INVALID!
			oneBits = _BV(CS02) | _BV(CS01) | _BV(CS00);
			break;
	}
	*timer->controlRegisterB |= oneBits;
     d02:	a3 81       	ldd	r26, Z+3	; 0x03
     d04:	b4 81       	ldd	r27, Z+4	; 0x04
     d06:	2c 91       	ld	r18, X
     d08:	29 2b       	or	r18, r25
     d0a:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBits;
     d0c:	03 80       	ldd	r0, Z+3	; 0x03
     d0e:	f4 81       	ldd	r31, Z+4	; 0x04
     d10:	e0 2d       	mov	r30, r0
     d12:	90 81       	ld	r25, Z
     d14:	80 95       	com	r24
     d16:	89 23       	and	r24, r25
     d18:	80 83       	st	Z, r24
     d1a:	08 95       	ret

00000d1c <setWaveformGenerationMode>:
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
     d1c:	fc 01       	movw	r30, r24
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
	if (timer->flags & TIMER_16bit) {
     d1e:	80 81       	ld	r24, Z
     d20:	82 ff       	sbrs	r24, 2
     d22:	54 c0       	rjmp	.+168    	; 0xdcc <setWaveformGenerationMode+0xb0>
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
     d24:	65 30       	cpi	r22, 0x05	; 5
     d26:	71 05       	cpc	r23, r1
     d28:	b9 f1       	breq	.+110    	; 0xd98 <setWaveformGenerationMode+0x7c>
     d2a:	66 30       	cpi	r22, 0x06	; 6
     d2c:	71 05       	cpc	r23, r1
     d2e:	b0 f4       	brcc	.+44     	; 0xd5c <setWaveformGenerationMode+0x40>
     d30:	62 30       	cpi	r22, 0x02	; 2
     d32:	71 05       	cpc	r23, r1
     d34:	69 f1       	breq	.+90     	; 0xd90 <setWaveformGenerationMode+0x74>
     d36:	63 30       	cpi	r22, 0x03	; 3
     d38:	71 05       	cpc	r23, r1
     d3a:	40 f4       	brcc	.+16     	; 0xd4c <setWaveformGenerationMode+0x30>
     d3c:	61 15       	cp	r22, r1
     d3e:	71 05       	cpc	r23, r1
     d40:	19 f1       	breq	.+70     	; 0xd88 <setWaveformGenerationMode+0x6c>
     d42:	61 30       	cpi	r22, 0x01	; 1
     d44:	71 05       	cpc	r23, r1
     d46:	09 f0       	breq	.+2      	; 0xd4a <setWaveformGenerationMode+0x2e>
     d48:	8f c0       	rjmp	.+286    	; 0xe68 <setWaveformGenerationMode+0x14c>
     d4a:	6e c0       	rjmp	.+220    	; 0xe28 <setWaveformGenerationMode+0x10c>
     d4c:	63 30       	cpi	r22, 0x03	; 3
     d4e:	71 05       	cpc	r23, r1
     d50:	29 f1       	breq	.+74     	; 0xd9c <setWaveformGenerationMode+0x80>
     d52:	64 30       	cpi	r22, 0x04	; 4
     d54:	71 05       	cpc	r23, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <setWaveformGenerationMode+0x3e>
     d58:	87 c0       	rjmp	.+270    	; 0xe68 <setWaveformGenerationMode+0x14c>
     d5a:	24 c0       	rjmp	.+72     	; 0xda4 <setWaveformGenerationMode+0x88>
     d5c:	68 30       	cpi	r22, 0x08	; 8
     d5e:	71 05       	cpc	r23, r1
     d60:	29 f1       	breq	.+74     	; 0xdac <setWaveformGenerationMode+0x90>
     d62:	69 30       	cpi	r22, 0x09	; 9
     d64:	71 05       	cpc	r23, r1
     d66:	40 f4       	brcc	.+16     	; 0xd78 <setWaveformGenerationMode+0x5c>
     d68:	66 30       	cpi	r22, 0x06	; 6
     d6a:	71 05       	cpc	r23, r1
     d6c:	39 f1       	breq	.+78     	; 0xdbc <setWaveformGenerationMode+0xa0>
     d6e:	67 30       	cpi	r22, 0x07	; 7
     d70:	71 05       	cpc	r23, r1
     d72:	09 f0       	breq	.+2      	; 0xd76 <setWaveformGenerationMode+0x5a>
     d74:	79 c0       	rjmp	.+242    	; 0xe68 <setWaveformGenerationMode+0x14c>
     d76:	26 c0       	rjmp	.+76     	; 0xdc4 <setWaveformGenerationMode+0xa8>
     d78:	69 30       	cpi	r22, 0x09	; 9
     d7a:	71 05       	cpc	r23, r1
     d7c:	d9 f0       	breq	.+54     	; 0xdb4 <setWaveformGenerationMode+0x98>
     d7e:	6a 30       	cpi	r22, 0x0A	; 10
     d80:	71 05       	cpc	r23, r1
     d82:	09 f0       	breq	.+2      	; 0xd86 <setWaveformGenerationMode+0x6a>
     d84:	71 c0       	rjmp	.+226    	; 0xe68 <setWaveformGenerationMode+0x14c>
     d86:	10 c0       	rjmp	.+32     	; 0xda8 <setWaveformGenerationMode+0x8c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     d88:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
     d8a:	30 e0       	ldi	r19, 0x00	; 0
	if (timer->flags & TIMER_16bit) {
		// 16 bit: 1+0 in A, 2+3 in B
		switch(wgm) {
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     d8c:	88 e1       	ldi	r24, 0x18	; 24
     d8e:	4f c0       	rjmp	.+158    	; 0xe2e <setWaveformGenerationMode+0x112>
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
     d90:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast_FF: // 0101
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
     d92:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13);
     d94:	80 e1       	ldi	r24, 0x10	; 16
     d96:	46 c0       	rjmp	.+140    	; 0xe24 <setWaveformGenerationMode+0x108>
				oneBitsB = _BV(WGM12);
				break;
			case pwm_fast: // 1111
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
     d98:	98 e1       	ldi	r25, 0x18	; 24
     d9a:	3a c0       	rjmp	.+116    	; 0xe10 <setWaveformGenerationMode+0xf4>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     d9c:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM11) | _BV(WGM10);
				oneBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_FF: // 0001
				zeroBitsA = _BV(WGM11);
				oneBitsA = _BV(WGM10);
     d9e:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     da0:	88 e1       	ldi	r24, 0x18	; 24
     da2:	40 c0       	rjmp	.+128    	; 0xe24 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 1011
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				zeroBitsB = _BV(WGM12);
				oneBitsB = _BV(WGM13);
     da4:	90 e1       	ldi	r25, 0x10	; 16
     da6:	2f c0       	rjmp	.+94     	; 0xe06 <setWaveformGenerationMode+0xea>
				break;
			case pwm_phase_and_frequency_correct: // 1001
				oneBitsA = _BV(WGM10);
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
     da8:	90 e1       	ldi	r25, 0x10	; 16
     daa:	36 c0       	rjmp	.+108    	; 0xe18 <setWaveformGenerationMode+0xfc>
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
     dac:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM11);
				oneBitsB = _BV(WGM13);
				zeroBitsB = _BV(WGM12);
				break;
			case pwm_fast_9bit: // 0110
				oneBitsA = _BV(WGM11);
     dae:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
     db0:	80 e1       	ldi	r24, 0x10	; 16
     db2:	42 c0       	rjmp	.+132    	; 0xe38 <setWaveformGenerationMode+0x11c>
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
				oneBitsB = _BV(WGM12);
     db4:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM10);
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_fast_10bit: // 0111
				oneBitsA = _BV(WGM10) | _BV(WGM11);
     db6:	33 e0       	ldi	r19, 0x03	; 3
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
     db8:	80 e1       	ldi	r24, 0x10	; 16
     dba:	27 c0       	rjmp	.+78     	; 0xe0a <setWaveformGenerationMode+0xee>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     dbc:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsB = _BV(WGM12);
				zeroBitsB = _BV(WGM13);
				break;
			case pwm_phase_correct_9bit: // 0010
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
     dbe:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     dc0:	88 e1       	ldi	r24, 0x18	; 24
     dc2:	3a c0       	rjmp	.+116    	; 0xe38 <setWaveformGenerationMode+0x11c>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     dc4:	90 e0       	ldi	r25, 0x00	; 0
				zeroBitsA = _BV(WGM10);
				oneBitsA = _BV(WGM11);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case pwm_phase_correct_10bit: // 0011
				oneBitsA = _BV(WGM11) | _BV(WGM10);
     dc6:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
     dc8:	88 e1       	ldi	r24, 0x18	; 24
     dca:	1f c0       	rjmp	.+62     	; 0xe0a <setWaveformGenerationMode+0xee>
			default:
				return;
		}
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
     dcc:	62 30       	cpi	r22, 0x02	; 2
     dce:	71 05       	cpc	r23, r1
     dd0:	c9 f0       	breq	.+50     	; 0xe04 <setWaveformGenerationMode+0xe8>
     dd2:	63 30       	cpi	r22, 0x03	; 3
     dd4:	71 05       	cpc	r23, r1
     dd6:	40 f4       	brcc	.+16     	; 0xde8 <setWaveformGenerationMode+0xcc>
     dd8:	61 15       	cp	r22, r1
     dda:	71 05       	cpc	r23, r1
     ddc:	79 f0       	breq	.+30     	; 0xdfc <setWaveformGenerationMode+0xe0>
     dde:	61 30       	cpi	r22, 0x01	; 1
     de0:	71 05       	cpc	r23, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <setWaveformGenerationMode+0xca>
     de4:	41 c0       	rjmp	.+130    	; 0xe68 <setWaveformGenerationMode+0x14c>
     de6:	25 c0       	rjmp	.+74     	; 0xe32 <setWaveformGenerationMode+0x116>
     de8:	64 30       	cpi	r22, 0x04	; 4
     dea:	71 05       	cpc	r23, r1
     dec:	c1 f0       	breq	.+48     	; 0xe1e <setWaveformGenerationMode+0x102>
     dee:	64 30       	cpi	r22, 0x04	; 4
     df0:	71 05       	cpc	r23, r1
     df2:	88 f0       	brcs	.+34     	; 0xe16 <setWaveformGenerationMode+0xfa>
     df4:	65 30       	cpi	r22, 0x05	; 5
     df6:	71 05       	cpc	r23, r1
     df8:	b9 f5       	brne	.+110    	; 0xe68 <setWaveformGenerationMode+0x14c>
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <setWaveformGenerationMode+0xf2>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     dfc:	90 e0       	ldi	r25, 0x00	; 0
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
     dfe:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		// 8 bit: 0+1 in A, 2 in B
		switch (wgm) {
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
     e00:	88 e0       	ldi	r24, 0x08	; 8
     e02:	15 c0       	rjmp	.+42     	; 0xe2e <setWaveformGenerationMode+0x112>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e04:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
     e06:	33 e0       	ldi	r19, 0x03	; 3
				zeroBitsB = _BV(WGM02);
     e08:	88 e0       	ldi	r24, 0x08	; 8
	*timer->controlRegisterB |= oneBits;
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
     e0a:	20 e0       	ldi	r18, 0x00	; 0
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
     e0c:	16 c0       	rjmp	.+44     	; 0xe3a <setWaveformGenerationMode+0x11e>
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
     e0e:	98 e0       	ldi	r25, 0x08	; 8
			case pwm_fast_FF: // 011
				oneBitsA = _BV(WGM00) | _BV(WGM01);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_fast: // 111
				oneBitsA = _BV(WGM01) | _BV(WGM00);
     e10:	33 e0       	ldi	r19, 0x03	; 3
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	fa cf       	rjmp	.-12     	; 0xe0a <setWaveformGenerationMode+0xee>
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e16:	90 e0       	ldi	r25, 0x00	; 0
				oneBitsA = _BV(WGM01) | _BV(WGM00);
				oneBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct_FF: // 001
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
     e18:	31 e0       	ldi	r19, 0x01	; 1
				zeroBitsB = _BV(WGM02);
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <setWaveformGenerationMode+0x108>
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
				oneBitsB = _BV(WGM02);
     e1e:	98 e0       	ldi	r25, 0x08	; 8
				zeroBitsA = _BV(WGM01);
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
     e20:	31 e0       	ldi	r19, 0x01	; 1
	*timer->controlRegisterB &= ~zeroBits;
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
     e22:	80 e0       	ldi	r24, 0x00	; 0
				oneBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case pwm_phase_correct: // 101
				oneBitsA = _BV(WGM00);
				zeroBitsA = _BV(WGM01);
     e24:	22 e0       	ldi	r18, 0x02	; 2
				oneBitsB = _BV(WGM02);
				break;
     e26:	09 c0       	rjmp	.+18     	; 0xe3a <setWaveformGenerationMode+0x11e>
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
				oneBitsB = _BV(WGM12);
     e28:	98 e0       	ldi	r25, 0x08	; 8
}

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
     e2a:	30 e0       	ldi	r19, 0x00	; 0
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13);
     e2c:	80 e1       	ldi	r24, 0x10	; 16
			case wgm_normal: // 0000
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
				zeroBitsB = _BV(WGM13) | _BV(WGM12);
				break;
			case clear_timer_on_match: // 0100
				zeroBitsA = _BV(WGM11) | _BV(WGM10);
     e2e:	23 e0       	ldi	r18, 0x03	; 3
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <setWaveformGenerationMode+0x11e>

void setWaveformGenerationMode(PTimerConfig timer, WaveformGenerationMode wgm) {
	uint8_t zeroBitsA = 0;
	uint8_t zeroBitsB = 0;
	uint8_t oneBitsA = 0;
	uint8_t oneBitsB = 0;
     e32:	90 e0       	ldi	r25, 0x00	; 0
			case wgm_normal: // 000
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
     e34:	32 e0       	ldi	r19, 0x02	; 2
				zeroBitsA = _BV(WGM00);
				zeroBitsB = _BV(WGM02);
     e36:	88 e0       	ldi	r24, 0x08	; 8
				zeroBitsA = _BV(WGM01) | _BV(WGM00);
				zeroBitsB = _BV(WGM02);
				break;
			case clear_timer_on_match: // 010
				oneBitsA = _BV(WGM01);
				zeroBitsA = _BV(WGM00);
     e38:	21 e0       	ldi	r18, 0x01	; 1
				break;
			default:
				return;
		}
	}
	*timer->controlRegisterA |= oneBitsA;
     e3a:	a1 81       	ldd	r26, Z+1	; 0x01
     e3c:	b2 81       	ldd	r27, Z+2	; 0x02
     e3e:	4c 91       	ld	r20, X
     e40:	43 2b       	or	r20, r19
     e42:	4c 93       	st	X, r20
	*timer->controlRegisterA &= ~zeroBitsA;
     e44:	a1 81       	ldd	r26, Z+1	; 0x01
     e46:	b2 81       	ldd	r27, Z+2	; 0x02
     e48:	3c 91       	ld	r19, X
     e4a:	20 95       	com	r18
     e4c:	23 23       	and	r18, r19
     e4e:	2c 93       	st	X, r18
	*timer->controlRegisterB |= oneBitsB;
     e50:	a3 81       	ldd	r26, Z+3	; 0x03
     e52:	b4 81       	ldd	r27, Z+4	; 0x04
     e54:	2c 91       	ld	r18, X
     e56:	29 2b       	or	r18, r25
     e58:	2c 93       	st	X, r18
	*timer->controlRegisterB &= ~zeroBitsB;
     e5a:	03 80       	ldd	r0, Z+3	; 0x03
     e5c:	f4 81       	ldd	r31, Z+4	; 0x04
     e5e:	e0 2d       	mov	r30, r0
     e60:	90 81       	ld	r25, Z
     e62:	80 95       	com	r24
     e64:	89 23       	and	r24, r25
     e66:	80 83       	st	Z, r24
     e68:	08 95       	ret

00000e6a <enableTimerInterrupt>:
}

void enableTimerInterrupt(PTimer timer) {
     e6a:	dc 01       	movw	r26, r24
	// OCIE0x is used as representative makro for all timers. All other values are the same.
	*timer->timer->interruptMaskRegister |= _BV(timer->type == TIMER_A ? OCIE0A : OCIE0B);
     e6c:	ed 91       	ld	r30, X+
     e6e:	fc 91       	ld	r31, X
     e70:	11 97       	sbiw	r26, 0x01	; 1
     e72:	05 80       	ldd	r0, Z+5	; 0x05
     e74:	f6 81       	ldd	r31, Z+6	; 0x06
     e76:	e0 2d       	mov	r30, r0
     e78:	20 81       	ld	r18, Z
     e7a:	14 96       	adiw	r26, 0x04	; 4
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	15 97       	sbiw	r26, 0x05	; 5
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	11 f4       	brne	.+4      	; 0xe8a <enableTimerInterrupt+0x20>
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <enableTimerInterrupt+0x22>
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	82 2b       	or	r24, r18
     e8e:	80 83       	st	Z, r24
}
     e90:	08 95       	ret

00000e92 <enableOutputCompare>:

void enableOutputCompare(PTimer timer) {
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
	setPinOutput(timer->outputComparePin);
     e98:	8e 81       	ldd	r24, Y+6	; 0x06
     e9a:	9f 81       	ldd	r25, Y+7	; 0x07
     e9c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <setPinOutput>
	setCompareMatchOutputMode(timer, toggle_on_match);
     ea0:	ce 01       	movw	r24, r28
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <setCompareMatchOutputMode>
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <disableOutputCompare>:

void disableOutputCompare(PTimer timer) {
	setCompareMatchOutputMode(timer, no_output);
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <setCompareMatchOutputMode>
}
     eb8:	08 95       	ret

00000eba <setTimerCompareValue>:

void setTimerCompareValue(PTimer timer, uint16_t value) {
     eba:	fc 01       	movw	r30, r24
	if (timer->timer->flags & TIMER_16bit) {
     ebc:	a0 81       	ld	r26, Z
     ebe:	b1 81       	ldd	r27, Z+1	; 0x01
     ec0:	8c 91       	ld	r24, X
     ec2:	82 ff       	sbrs	r24, 2
     ec4:	0d c0       	rjmp	.+26     	; 0xee0 <setTimerCompareValue+0x26>
		// Setting a 16-bit register requires disabling interrupts for a short period.
		// The assembler-code will involve writing the high part to the TEMP register
		// before writing the low part directly into the low register, which also copies the TEMP register.
		uint8_t sreg = SREG;
     ec6:	8f b7       	in	r24, 0x3f	; 63
		cli();
     ec8:	f8 94       	cli
		// 16-bit register access -- high byte first. m1284P-manual page 113.
		// Compiler will turn these two sub-accesses around, so code them separately.
		*((uint8_t*) timer->outputCompareRegister + 1) = HIBYTE(value);
     eca:	a2 81       	ldd	r26, Z+2	; 0x02
     ecc:	b3 81       	ldd	r27, Z+3	; 0x03
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	7c 93       	st	X, r23
     ed2:	11 97       	sbiw	r26, 0x01	; 1
		*((uint8_t*) timer->outputCompareRegister) = LOBYTE(value);
     ed4:	02 80       	ldd	r0, Z+2	; 0x02
     ed6:	f3 81       	ldd	r31, Z+3	; 0x03
     ed8:	e0 2d       	mov	r30, r0
     eda:	60 83       	st	Z, r22
		SREG = sreg; // re-enable interrupts
     edc:	8f bf       	out	0x3f, r24	; 63
     ede:	08 95       	ret
	} else {
		*timer->outputCompareRegister = HIBYTE(value);
     ee0:	02 80       	ldd	r0, Z+2	; 0x02
     ee2:	f3 81       	ldd	r31, Z+3	; 0x03
     ee4:	e0 2d       	mov	r30, r0
     ee6:	70 83       	st	Z, r23
     ee8:	08 95       	ret

00000eea <getTimerCompareValue>:
	}
}

uint16_t getTimerCompareValue(PTimer timer) {
     eea:	fc 01       	movw	r30, r24
	uint16_t result;
	if (timer->timer->flags & TIMER_16bit) {
     eec:	a0 81       	ld	r26, Z
     eee:	b1 81       	ldd	r27, Z+1	; 0x01
     ef0:	8c 91       	ld	r24, X
     ef2:	82 ff       	sbrs	r24, 2
     ef4:	09 c0       	rjmp	.+18     	; 0xf08 <getTimerCompareValue+0x1e>
		// See comment above about 16-bit registers.
		uint8_t sreg = SREG;
     ef6:	2f b7       	in	r18, 0x3f	; 63
		cli();
     ef8:	f8 94       	cli
		// Reading OCR-register does not require any particular
		result = *((uint16_t*) timer->outputCompareRegister);
     efa:	02 80       	ldd	r0, Z+2	; 0x02
     efc:	f3 81       	ldd	r31, Z+3	; 0x03
     efe:	e0 2d       	mov	r30, r0
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
		SREG = sreg; // re-enable interrupts
     f04:	2f bf       	out	0x3f, r18	; 63
     f06:	08 95       	ret
	} else {
		// Use the 8-bit value as the high part of a word, filled with zeros.
		result = MAKE_WORD(*timer->outputCompareRegister, 0x0);
     f08:	02 80       	ldd	r0, Z+2	; 0x02
     f0a:	f3 81       	ldd	r31, Z+3	; 0x03
     f0c:	e0 2d       	mov	r30, r0
     f0e:	90 81       	ld	r25, Z
     f10:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
     f12:	08 95       	ret

00000f14 <insertThreadIntoQueue>:
} ThreadQueue, *PThreadQueue;

ThreadPriority highestPrio = PrioLowest;
ThreadQueue queues[NUM_PRIOS];

void insertThreadIntoQueue(Thread thread, ThreadPriority prio) {
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	8c 01       	movw	r16, r24
     f1e:	eb 01       	movw	r28, r22
	// TODO - this is not concurrency-safe.
	PThreadQueue queue = &queues[prio];
	PThreadQueueElement elem = (PThreadQueueElement) calloc(1, sizeof(ThreadQueueElement));
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	64 e0       	ldi	r22, 0x04	; 4
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	0e 94 da 08 	call	0x11b4	; 0x11b4 <calloc>
     f2c:	fc 01       	movw	r30, r24
	elem->thread = thread;
     f2e:	11 83       	std	Z+1, r17	; 0x01
     f30:	00 83       	st	Z, r16
	elem->next = queue->first;
     f32:	de 01       	movw	r26, r28
     f34:	aa 0f       	add	r26, r26
     f36:	bb 1f       	adc	r27, r27
     f38:	aa 0f       	add	r26, r26
     f3a:	bb 1f       	adc	r27, r27
     f3c:	ac 0f       	add	r26, r28
     f3e:	bd 1f       	adc	r27, r29
     f40:	a5 53       	subi	r26, 0x35	; 53
     f42:	bd 4f       	sbci	r27, 0xFD	; 253
     f44:	8d 91       	ld	r24, X+
     f46:	9c 91       	ld	r25, X
     f48:	11 97       	sbiw	r26, 0x01	; 1
     f4a:	93 83       	std	Z+3, r25	; 0x03
     f4c:	82 83       	std	Z+2, r24	; 0x02
	queue->first = elem;
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	fc 93       	st	X, r31
     f52:	ee 93       	st	-X, r30
	if (queue->count == 0)
     f54:	14 96       	adiw	r26, 0x04	; 4
     f56:	8c 91       	ld	r24, X
     f58:	14 97       	sbiw	r26, 0x04	; 4
     f5a:	88 23       	and	r24, r24
     f5c:	21 f4       	brne	.+8      	; 0xf66 <insertThreadIntoQueue+0x52>
		queue->current = elem;
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	fc 93       	st	X, r31
     f62:	ee 93       	st	-X, r30
     f64:	12 97       	sbiw	r26, 0x02	; 2
	queue->count++;
     f66:	fe 01       	movw	r30, r28
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	e5 53       	subi	r30, 0x35	; 53
     f76:	fd 4f       	sbci	r31, 0xFD	; 253
     f78:	84 81       	ldd	r24, Z+4	; 0x04
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	84 83       	std	Z+4, r24	; 0x04
	if (prio > highestPrio) highestPrio = prio;
     f7e:	80 91 f1 01 	lds	r24, 0x01F1
     f82:	90 91 f2 01 	lds	r25, 0x01F2
     f86:	8c 17       	cp	r24, r28
     f88:	9d 07       	cpc	r25, r29
     f8a:	20 f4       	brcc	.+8      	; 0xf94 <insertThreadIntoQueue+0x80>
     f8c:	d0 93 f2 01 	sts	0x01F2, r29
     f90:	c0 93 f1 01 	sts	0x01F1, r28
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <createThread2>:

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
}

Thread createThread2(ThreadEntryPoint entry, ThreadPriority prio) {
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	eb 01       	movw	r28, r22
	Thread thread = (Thread) createProcess(entry);
     fa8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <createProcess>
     fac:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
     fae:	be 01       	movw	r22, r28
     fb0:	0e 94 8a 07 	call	0xf14	; 0xf14 <insertThreadIntoQueue>
	return thread;
}
     fb4:	c8 01       	movw	r24, r16
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <createThread>:
	queue->count++;
	if (prio > highestPrio) highestPrio = prio;
}

Thread createThread(ThreadEntryPoint entry) {
	return createThread2(entry, PrioNormal);
     fc0:	63 e0       	ldi	r22, 0x03	; 3
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	0e 94 cf 07 	call	0xf9e	; 0xf9e <createThread2>
}
     fc8:	08 95       	ret

00000fca <createThread3>:
	Thread thread = (Thread) createProcess(entry);
	insertThreadIntoQueue(thread, prio);
	return thread;
}

Thread createThread3(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter) {
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	eb 01       	movw	r28, r22
     fd4:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess2(entry, threadParameter);
     fd6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <createProcess2>
     fda:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
     fdc:	be 01       	movw	r22, r28
     fde:	0e 94 8a 07 	call	0xf14	; 0xf14 <insertThreadIntoQueue>
	return thread;
}
     fe2:	c8 01       	movw	r24, r16
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <createThread4>:

Thread createThread4(ThreadEntryPoint entry, ThreadPriority prio, void *threadParameter, uint16_t stackSize) {
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	eb 01       	movw	r28, r22
     ff8:	ba 01       	movw	r22, r20
	Thread thread = (Thread) createProcess3(entry, threadParameter, stackSize, 0);
     ffa:	a9 01       	movw	r20, r18
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	0e 94 b1 04 	call	0x962	; 0x962 <createProcess3>
    1002:	8c 01       	movw	r16, r24
	insertThreadIntoQueue(thread, prio);
    1004:	be 01       	movw	r22, r28
    1006:	0e 94 8a 07 	call	0xf14	; 0xf14 <insertThreadIntoQueue>
	return thread;
}
    100a:	c8 01       	movw	r24, r16
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <rr_schedule>:
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    1016:	80 91 f1 01 	lds	r24, 0x01F1
    101a:	90 91 f2 01 	lds	r25, 0x01F2
	return thread;
}

Process rr_schedule(BOOL invokedFromTimer) {
	// Lower the top-priority, if necessary. It must be increased at all relevant places!
	while (highestPrio > 0 && queues[highestPrio].count == 0) highestPrio--;
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <rr_schedule+0xc>
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	29 f4       	brne	.+10     	; 0x1030 <rr_schedule+0x1a>
    1026:	10 92 f1 01 	sts	0x01F1, r1
    102a:	10 92 f2 01 	sts	0x01F2, r1
    102e:	10 c0       	rjmp	.+32     	; 0x1050 <rr_schedule+0x3a>
    1030:	fc 01       	movw	r30, r24
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	e8 0f       	add	r30, r24
    103c:	f9 1f       	adc	r31, r25
    103e:	e5 53       	subi	r30, 0x35	; 53
    1040:	fd 4f       	sbci	r31, 0xFD	; 253
    1042:	24 81       	ldd	r18, Z+4	; 0x04
    1044:	22 23       	and	r18, r18
    1046:	61 f3       	breq	.-40     	; 0x1020 <rr_schedule+0xa>
    1048:	80 93 f1 01 	sts	0x01F1, r24
    104c:	90 93 f2 01 	sts	0x01F2, r25
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
    1050:	fc 01       	movw	r30, r24
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	e8 0f       	add	r30, r24
    105c:	f9 1f       	adc	r31, r25
    105e:	e5 53       	subi	r30, 0x35	; 53
    1060:	fd 4f       	sbci	r31, 0xFD	; 253
    1062:	24 81       	ldd	r18, Z+4	; 0x04
    1064:	22 23       	and	r18, r18
    1066:	c9 f0       	breq	.+50     	; 0x109a <rr_schedule+0x84>
		return InvalidProcess;
	
	PThreadQueueElement current = queue->current;
    1068:	a2 81       	ldd	r26, Z+2	; 0x02
    106a:	b3 81       	ldd	r27, Z+3	; 0x03
	current = current->next == NULL ? queue->first : current->next;
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	0d 90       	ld	r0, X+
    1070:	bc 91       	ld	r27, X
    1072:	a0 2d       	mov	r26, r0
    1074:	10 97       	sbiw	r26, 0x00	; 0
    1076:	11 f4       	brne	.+4      	; 0x107c <rr_schedule+0x66>
    1078:	a0 81       	ld	r26, Z
    107a:	b1 81       	ldd	r27, Z+1	; 0x01
	queue->current = current;
    107c:	fc 01       	movw	r30, r24
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	e5 53       	subi	r30, 0x35	; 53
    108c:	fd 4f       	sbci	r31, 0xFD	; 253
    108e:	b3 83       	std	Z+3, r27	; 0x03
    1090:	a2 83       	std	Z+2, r26	; 0x02
	return (Process) current->thread;
    1092:	2d 91       	ld	r18, X+
    1094:	3c 91       	ld	r19, X
    1096:	11 97       	sbiw	r26, 0x01	; 1
    1098:	02 c0       	rjmp	.+4      	; 0x109e <rr_schedule+0x88>
	
	PThreadQueue queue = &queues[highestPrio];
	
	// Nothing to schedule?
	if (queue->count == 0)
		return InvalidProcess;
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
	
	PThreadQueueElement current = queue->current;
	current = current->next == NULL ? queue->first : current->next;
	queue->current = current;
	return (Process) current->thread;
}
    109e:	c9 01       	movw	r24, r18
    10a0:	08 95       	ret

000010a2 <rr_captureMainProcess>:

void rr_captureMainProcess(ThreadPriority prio) {
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	ec 01       	movw	r28, r24
	insertThreadIntoQueue((Thread) getCurrentProcess(), prio);
    10a8:	0e 94 a0 04 	call	0x940	; 0x940 <getCurrentProcess>
    10ac:	be 01       	movw	r22, r28
    10ae:	0e 94 8a 07 	call	0xf14	; 0xf14 <insertThreadIntoQueue>
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <getCurrentThread>:

Thread getCurrentThread() {
	return (Thread) getCurrentProcess();
    10b8:	0e 94 a0 04 	call	0x940	; 0x940 <getCurrentProcess>
}
    10bc:	08 95       	ret

000010be <HARDWARE_RESET>:

#include "../anton_std.h"
#include "hardware_reset.h"

void HARDWARE_RESET() {
	cli();
    10be:	f8 94       	cli
	MCUSR &= _BV(WDRF); // Clear this bit to enable WDE
    10c0:	84 b7       	in	r24, 0x34	; 52
    10c2:	88 70       	andi	r24, 0x08	; 8
    10c4:	84 bf       	out	0x34, r24	; 52
	WDTCSR = _BV(WDCE);
    10c6:	80 e1       	ldi	r24, 0x10	; 16
    10c8:	80 93 60 00 	sts	0x0060, r24
	WDTCSR = _BV(WDE); // All prescaler bits set to zero -> shortest possible timeout.
    10cc:	88 e0       	ldi	r24, 0x08	; 8
    10ce:	80 93 60 00 	sts	0x0060, r24
    10d2:	ff cf       	rjmp	.-2      	; 0x10d2 <HARDWARE_RESET+0x14>

000010d4 <setPortOutput>:
#define _PORT_KERNEL_H_

#include "port.h"

void setPortOutput(PPort port) {
	*port->ddr = 0xFF;
    10d4:	dc 01       	movw	r26, r24
    10d6:	14 96       	adiw	r26, 0x04	; 4
    10d8:	ed 91       	ld	r30, X+
    10da:	fc 91       	ld	r31, X
    10dc:	15 97       	sbiw	r26, 0x05	; 5
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	80 83       	st	Z, r24
}
    10e2:	08 95       	ret

000010e4 <setPortInput>:

void setPortInput(PPort port) {
	*port->ddr = 0;
    10e4:	dc 01       	movw	r26, r24
    10e6:	14 96       	adiw	r26, 0x04	; 4
    10e8:	ed 91       	ld	r30, X+
    10ea:	fc 91       	ld	r31, X
    10ec:	15 97       	sbiw	r26, 0x05	; 5
    10ee:	10 82       	st	Z, r1
}
    10f0:	08 95       	ret

000010f2 <setPinOutput>:

void setPinOutput(PPin pin) {
    10f2:	dc 01       	movw	r26, r24
	*pin->port->ddr |= pin->mask;
    10f4:	ed 91       	ld	r30, X+
    10f6:	fc 91       	ld	r31, X
    10f8:	11 97       	sbiw	r26, 0x01	; 1
    10fa:	04 80       	ldd	r0, Z+4	; 0x04
    10fc:	f5 81       	ldd	r31, Z+5	; 0x05
    10fe:	e0 2d       	mov	r30, r0
    1100:	80 81       	ld	r24, Z
    1102:	12 96       	adiw	r26, 0x02	; 2
    1104:	9c 91       	ld	r25, X
    1106:	12 97       	sbiw	r26, 0x02	; 2
    1108:	89 2b       	or	r24, r25
    110a:	80 83       	st	Z, r24
}
    110c:	08 95       	ret

0000110e <setPinInput>:

void setPinInput(PPin pin) {
    110e:	dc 01       	movw	r26, r24
	*pin->port->ddr &= ~pin->mask;
    1110:	ed 91       	ld	r30, X+
    1112:	fc 91       	ld	r31, X
    1114:	11 97       	sbiw	r26, 0x01	; 1
    1116:	04 80       	ldd	r0, Z+4	; 0x04
    1118:	f5 81       	ldd	r31, Z+5	; 0x05
    111a:	e0 2d       	mov	r30, r0
    111c:	90 81       	ld	r25, Z
    111e:	12 96       	adiw	r26, 0x02	; 2
    1120:	8c 91       	ld	r24, X
    1122:	12 97       	sbiw	r26, 0x02	; 2
    1124:	80 95       	com	r24
    1126:	89 23       	and	r24, r25
    1128:	80 83       	st	Z, r24
}
    112a:	08 95       	ret

0000112c <writePort>:

void writePort(PPort port, uint8_t value) {
	*port->port = value;
    112c:	dc 01       	movw	r26, r24
    112e:	ed 91       	ld	r30, X+
    1130:	fc 91       	ld	r31, X
    1132:	11 97       	sbiw	r26, 0x01	; 1
    1134:	60 83       	st	Z, r22
}
    1136:	08 95       	ret

00001138 <readPort>:

uint8_t readPort(PPort port) {
	return *port->pin;
    1138:	dc 01       	movw	r26, r24
    113a:	12 96       	adiw	r26, 0x02	; 2
    113c:	ed 91       	ld	r30, X+
    113e:	fc 91       	ld	r31, X
    1140:	13 97       	sbiw	r26, 0x03	; 3
    1142:	80 81       	ld	r24, Z
}
    1144:	08 95       	ret

00001146 <setPinOne>:
void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
	else setPinZero(pin);
}

void setPinOne(PPin pin) {
    1146:	dc 01       	movw	r26, r24
	*pin->port->port |= pin->mask;
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	11 97       	sbiw	r26, 0x01	; 1
    114e:	01 90       	ld	r0, Z+
    1150:	f0 81       	ld	r31, Z
    1152:	e0 2d       	mov	r30, r0
    1154:	80 81       	ld	r24, Z
    1156:	12 96       	adiw	r26, 0x02	; 2
    1158:	9c 91       	ld	r25, X
    115a:	12 97       	sbiw	r26, 0x02	; 2
    115c:	89 2b       	or	r24, r25
    115e:	80 83       	st	Z, r24
}
    1160:	08 95       	ret

00001162 <setPinZero>:

void setPinZero(PPin pin) {
    1162:	dc 01       	movw	r26, r24
	*pin->port->port &= ~pin->mask;
    1164:	ed 91       	ld	r30, X+
    1166:	fc 91       	ld	r31, X
    1168:	11 97       	sbiw	r26, 0x01	; 1
    116a:	01 90       	ld	r0, Z+
    116c:	f0 81       	ld	r31, Z
    116e:	e0 2d       	mov	r30, r0
    1170:	90 81       	ld	r25, Z
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	8c 91       	ld	r24, X
    1176:	12 97       	sbiw	r26, 0x02	; 2
    1178:	80 95       	com	r24
    117a:	89 23       	and	r24, r25
    117c:	80 83       	st	Z, r24
}
    117e:	08 95       	ret

00001180 <writePin>:
uint8_t readPort(PPort port) {
	return *port->pin;
}

void writePin(PPin pin, BOOL value) {
	if (value) setPinOne(pin);
    1180:	61 15       	cp	r22, r1
    1182:	71 05       	cpc	r23, r1
    1184:	19 f0       	breq	.+6      	; 0x118c <writePin+0xc>
    1186:	0e 94 a3 08 	call	0x1146	; 0x1146 <setPinOne>
    118a:	08 95       	ret
	else setPinZero(pin);
    118c:	0e 94 b1 08 	call	0x1162	; 0x1162 <setPinZero>
    1190:	08 95       	ret

00001192 <readPin>:

void setPinZero(PPin pin) {
	*pin->port->port &= ~pin->mask;
}

BOOL readPin(PPin pin) {
    1192:	fc 01       	movw	r30, r24
	if (*pin->port->pin & pin->mask)
    1194:	a0 81       	ld	r26, Z
    1196:	b1 81       	ldd	r27, Z+1	; 0x01
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	0d 90       	ld	r0, X+
    119c:	bc 91       	ld	r27, X
    119e:	a0 2d       	mov	r26, r0
    11a0:	8c 91       	ld	r24, X
    11a2:	92 81       	ldd	r25, Z+2	; 0x02
    11a4:	89 23       	and	r24, r25
		return TRUE;
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <readPin+0x1e>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
	else
		return FALSE;
}
    11b0:	c9 01       	movw	r24, r18
    11b2:	08 95       	ret

000011b4 <calloc>:
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	68 9f       	mul	r22, r24
    11c2:	80 01       	movw	r16, r0
    11c4:	69 9f       	mul	r22, r25
    11c6:	10 0d       	add	r17, r0
    11c8:	78 9f       	mul	r23, r24
    11ca:	10 0d       	add	r17, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	c8 01       	movw	r24, r16
    11d0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <malloc>
    11d4:	e8 2e       	mov	r14, r24
    11d6:	e7 01       	movw	r28, r14
    11d8:	7e 01       	movw	r14, r28
    11da:	f9 2e       	mov	r15, r25
    11dc:	e7 01       	movw	r28, r14
    11de:	20 97       	sbiw	r28, 0x00	; 0
    11e0:	31 f0       	breq	.+12     	; 0x11ee <calloc+0x3a>
    11e2:	8e 2d       	mov	r24, r14
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	a8 01       	movw	r20, r16
    11ea:	0e 94 32 0a 	call	0x1464	; 0x1464 <memset>
    11ee:	ce 01       	movw	r24, r28
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	08 95       	ret

000011fe <malloc>:
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	91 05       	cpc	r25, r1
    1206:	10 f4       	brcc	.+4      	; 0x120c <malloc+0xe>
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	e0 91 f0 02 	lds	r30, 0x02F0
    1210:	f0 91 f1 02 	lds	r31, 0x02F1
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	26 c0       	rjmp	.+76     	; 0x126a <malloc+0x6c>
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	68 17       	cp	r22, r24
    1224:	79 07       	cpc	r23, r25
    1226:	e0 f0       	brcs	.+56     	; 0x1260 <malloc+0x62>
    1228:	68 17       	cp	r22, r24
    122a:	79 07       	cpc	r23, r25
    122c:	81 f4       	brne	.+32     	; 0x124e <malloc+0x50>
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	31 f0       	breq	.+12     	; 0x1244 <malloc+0x46>
    1238:	d9 01       	movw	r26, r18
    123a:	13 96       	adiw	r26, 0x03	; 3
    123c:	9c 93       	st	X, r25
    123e:	8e 93       	st	-X, r24
    1240:	12 97       	sbiw	r26, 0x02	; 2
    1242:	2b c0       	rjmp	.+86     	; 0x129a <malloc+0x9c>
    1244:	90 93 f1 02 	sts	0x02F1, r25
    1248:	80 93 f0 02 	sts	0x02F0, r24
    124c:	26 c0       	rjmp	.+76     	; 0x129a <malloc+0x9c>
    124e:	41 15       	cp	r20, r1
    1250:	51 05       	cpc	r21, r1
    1252:	19 f0       	breq	.+6      	; 0x125a <malloc+0x5c>
    1254:	64 17       	cp	r22, r20
    1256:	75 07       	cpc	r23, r21
    1258:	18 f4       	brcc	.+6      	; 0x1260 <malloc+0x62>
    125a:	ab 01       	movw	r20, r22
    125c:	e9 01       	movw	r28, r18
    125e:	df 01       	movw	r26, r30
    1260:	9f 01       	movw	r18, r30
    1262:	72 81       	ldd	r23, Z+2	; 0x02
    1264:	63 81       	ldd	r22, Z+3	; 0x03
    1266:	e7 2f       	mov	r30, r23
    1268:	f6 2f       	mov	r31, r22
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	c1 f6       	brne	.-80     	; 0x121e <malloc+0x20>
    126e:	41 15       	cp	r20, r1
    1270:	51 05       	cpc	r21, r1
    1272:	01 f1       	breq	.+64     	; 0x12b4 <malloc+0xb6>
    1274:	48 1b       	sub	r20, r24
    1276:	59 0b       	sbc	r21, r25
    1278:	44 30       	cpi	r20, 0x04	; 4
    127a:	51 05       	cpc	r21, r1
    127c:	80 f4       	brcc	.+32     	; 0x129e <malloc+0xa0>
    127e:	12 96       	adiw	r26, 0x02	; 2
    1280:	8d 91       	ld	r24, X+
    1282:	9c 91       	ld	r25, X
    1284:	13 97       	sbiw	r26, 0x03	; 3
    1286:	20 97       	sbiw	r28, 0x00	; 0
    1288:	19 f0       	breq	.+6      	; 0x1290 <malloc+0x92>
    128a:	9b 83       	std	Y+3, r25	; 0x03
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <malloc+0x9a>
    1290:	90 93 f1 02 	sts	0x02F1, r25
    1294:	80 93 f0 02 	sts	0x02F0, r24
    1298:	fd 01       	movw	r30, r26
    129a:	32 96       	adiw	r30, 0x02	; 2
    129c:	46 c0       	rjmp	.+140    	; 0x132a <malloc+0x12c>
    129e:	fd 01       	movw	r30, r26
    12a0:	e4 0f       	add	r30, r20
    12a2:	f5 1f       	adc	r31, r21
    12a4:	81 93       	st	Z+, r24
    12a6:	91 93       	st	Z+, r25
    12a8:	42 50       	subi	r20, 0x02	; 2
    12aa:	50 40       	sbci	r21, 0x00	; 0
    12ac:	11 96       	adiw	r26, 0x01	; 1
    12ae:	5c 93       	st	X, r21
    12b0:	4e 93       	st	-X, r20
    12b2:	3b c0       	rjmp	.+118    	; 0x132a <malloc+0x12c>
    12b4:	20 91 ee 02 	lds	r18, 0x02EE
    12b8:	30 91 ef 02 	lds	r19, 0x02EF
    12bc:	21 15       	cp	r18, r1
    12be:	31 05       	cpc	r19, r1
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <malloc+0xd4>
    12c2:	20 91 e2 01 	lds	r18, 0x01E2
    12c6:	30 91 e3 01 	lds	r19, 0x01E3
    12ca:	30 93 ef 02 	sts	0x02EF, r19
    12ce:	20 93 ee 02 	sts	0x02EE, r18
    12d2:	20 91 e4 01 	lds	r18, 0x01E4
    12d6:	30 91 e5 01 	lds	r19, 0x01E5
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	41 f4       	brne	.+16     	; 0x12f0 <malloc+0xf2>
    12e0:	2d b7       	in	r18, 0x3d	; 61
    12e2:	3e b7       	in	r19, 0x3e	; 62
    12e4:	40 91 e0 01 	lds	r20, 0x01E0
    12e8:	50 91 e1 01 	lds	r21, 0x01E1
    12ec:	24 1b       	sub	r18, r20
    12ee:	35 0b       	sbc	r19, r21
    12f0:	e0 91 ee 02 	lds	r30, 0x02EE
    12f4:	f0 91 ef 02 	lds	r31, 0x02EF
    12f8:	e2 17       	cp	r30, r18
    12fa:	f3 07       	cpc	r31, r19
    12fc:	a0 f4       	brcc	.+40     	; 0x1326 <malloc+0x128>
    12fe:	2e 1b       	sub	r18, r30
    1300:	3f 0b       	sbc	r19, r31
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	78 f0       	brcs	.+30     	; 0x1326 <malloc+0x128>
    1308:	ac 01       	movw	r20, r24
    130a:	4e 5f       	subi	r20, 0xFE	; 254
    130c:	5f 4f       	sbci	r21, 0xFF	; 255
    130e:	24 17       	cp	r18, r20
    1310:	35 07       	cpc	r19, r21
    1312:	48 f0       	brcs	.+18     	; 0x1326 <malloc+0x128>
    1314:	4e 0f       	add	r20, r30
    1316:	5f 1f       	adc	r21, r31
    1318:	50 93 ef 02 	sts	0x02EF, r21
    131c:	40 93 ee 02 	sts	0x02EE, r20
    1320:	81 93       	st	Z+, r24
    1322:	91 93       	st	Z+, r25
    1324:	02 c0       	rjmp	.+4      	; 0x132a <malloc+0x12c>
    1326:	e0 e0       	ldi	r30, 0x00	; 0
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	cf 01       	movw	r24, r30
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <free>:
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	09 f4       	brne	.+2      	; 0x133c <free+0xa>
    133a:	91 c0       	rjmp	.+290    	; 0x145e <free+0x12c>
    133c:	fc 01       	movw	r30, r24
    133e:	32 97       	sbiw	r30, 0x02	; 2
    1340:	13 82       	std	Z+3, r1	; 0x03
    1342:	12 82       	std	Z+2, r1	; 0x02
    1344:	60 91 f0 02 	lds	r22, 0x02F0
    1348:	70 91 f1 02 	lds	r23, 0x02F1
    134c:	61 15       	cp	r22, r1
    134e:	71 05       	cpc	r23, r1
    1350:	81 f4       	brne	.+32     	; 0x1372 <free+0x40>
    1352:	20 81       	ld	r18, Z
    1354:	31 81       	ldd	r19, Z+1	; 0x01
    1356:	28 0f       	add	r18, r24
    1358:	39 1f       	adc	r19, r25
    135a:	80 91 ee 02 	lds	r24, 0x02EE
    135e:	90 91 ef 02 	lds	r25, 0x02EF
    1362:	82 17       	cp	r24, r18
    1364:	93 07       	cpc	r25, r19
    1366:	99 f5       	brne	.+102    	; 0x13ce <free+0x9c>
    1368:	f0 93 ef 02 	sts	0x02EF, r31
    136c:	e0 93 ee 02 	sts	0x02EE, r30
    1370:	76 c0       	rjmp	.+236    	; 0x145e <free+0x12c>
    1372:	db 01       	movw	r26, r22
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <free+0x4c>
    137a:	cd 01       	movw	r24, r26
    137c:	d9 01       	movw	r26, r18
    137e:	ae 17       	cp	r26, r30
    1380:	bf 07       	cpc	r27, r31
    1382:	48 f4       	brcc	.+18     	; 0x1396 <free+0x64>
    1384:	12 96       	adiw	r26, 0x02	; 2
    1386:	2d 91       	ld	r18, X+
    1388:	3c 91       	ld	r19, X
    138a:	13 97       	sbiw	r26, 0x03	; 3
    138c:	21 15       	cp	r18, r1
    138e:	31 05       	cpc	r19, r1
    1390:	a1 f7       	brne	.-24     	; 0x137a <free+0x48>
    1392:	cd 01       	movw	r24, r26
    1394:	21 c0       	rjmp	.+66     	; 0x13d8 <free+0xa6>
    1396:	b3 83       	std	Z+3, r27	; 0x03
    1398:	a2 83       	std	Z+2, r26	; 0x02
    139a:	ef 01       	movw	r28, r30
    139c:	49 91       	ld	r20, Y+
    139e:	59 91       	ld	r21, Y+
    13a0:	9e 01       	movw	r18, r28
    13a2:	24 0f       	add	r18, r20
    13a4:	35 1f       	adc	r19, r21
    13a6:	a2 17       	cp	r26, r18
    13a8:	b3 07       	cpc	r27, r19
    13aa:	79 f4       	brne	.+30     	; 0x13ca <free+0x98>
    13ac:	2d 91       	ld	r18, X+
    13ae:	3c 91       	ld	r19, X
    13b0:	11 97       	sbiw	r26, 0x01	; 1
    13b2:	24 0f       	add	r18, r20
    13b4:	35 1f       	adc	r19, r21
    13b6:	2e 5f       	subi	r18, 0xFE	; 254
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	31 83       	std	Z+1, r19	; 0x01
    13bc:	20 83       	st	Z, r18
    13be:	12 96       	adiw	r26, 0x02	; 2
    13c0:	2d 91       	ld	r18, X+
    13c2:	3c 91       	ld	r19, X
    13c4:	13 97       	sbiw	r26, 0x03	; 3
    13c6:	33 83       	std	Z+3, r19	; 0x03
    13c8:	22 83       	std	Z+2, r18	; 0x02
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	29 f4       	brne	.+10     	; 0x13d8 <free+0xa6>
    13ce:	f0 93 f1 02 	sts	0x02F1, r31
    13d2:	e0 93 f0 02 	sts	0x02F0, r30
    13d6:	43 c0       	rjmp	.+134    	; 0x145e <free+0x12c>
    13d8:	dc 01       	movw	r26, r24
    13da:	13 96       	adiw	r26, 0x03	; 3
    13dc:	fc 93       	st	X, r31
    13de:	ee 93       	st	-X, r30
    13e0:	12 97       	sbiw	r26, 0x02	; 2
    13e2:	4d 91       	ld	r20, X+
    13e4:	5d 91       	ld	r21, X+
    13e6:	a4 0f       	add	r26, r20
    13e8:	b5 1f       	adc	r27, r21
    13ea:	ea 17       	cp	r30, r26
    13ec:	fb 07       	cpc	r31, r27
    13ee:	69 f4       	brne	.+26     	; 0x140a <free+0xd8>
    13f0:	20 81       	ld	r18, Z
    13f2:	31 81       	ldd	r19, Z+1	; 0x01
    13f4:	24 0f       	add	r18, r20
    13f6:	35 1f       	adc	r19, r21
    13f8:	2e 5f       	subi	r18, 0xFE	; 254
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	ec 01       	movw	r28, r24
    13fe:	39 83       	std	Y+1, r19	; 0x01
    1400:	28 83       	st	Y, r18
    1402:	22 81       	ldd	r18, Z+2	; 0x02
    1404:	33 81       	ldd	r19, Z+3	; 0x03
    1406:	3b 83       	std	Y+3, r19	; 0x03
    1408:	2a 83       	std	Y+2, r18	; 0x02
    140a:	e0 e0       	ldi	r30, 0x00	; 0
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <free+0xe2>
    1410:	fb 01       	movw	r30, r22
    1412:	bc 01       	movw	r22, r24
    1414:	db 01       	movw	r26, r22
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	8d 91       	ld	r24, X+
    141a:	9c 91       	ld	r25, X
    141c:	13 97       	sbiw	r26, 0x03	; 3
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	b9 f7       	brne	.-18     	; 0x1410 <free+0xde>
    1422:	9b 01       	movw	r18, r22
    1424:	2e 5f       	subi	r18, 0xFE	; 254
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	8d 91       	ld	r24, X+
    142a:	9c 91       	ld	r25, X
    142c:	11 97       	sbiw	r26, 0x01	; 1
    142e:	82 0f       	add	r24, r18
    1430:	93 1f       	adc	r25, r19
    1432:	40 91 ee 02 	lds	r20, 0x02EE
    1436:	50 91 ef 02 	lds	r21, 0x02EF
    143a:	48 17       	cp	r20, r24
    143c:	59 07       	cpc	r21, r25
    143e:	79 f4       	brne	.+30     	; 0x145e <free+0x12c>
    1440:	30 97       	sbiw	r30, 0x00	; 0
    1442:	29 f4       	brne	.+10     	; 0x144e <free+0x11c>
    1444:	10 92 f1 02 	sts	0x02F1, r1
    1448:	10 92 f0 02 	sts	0x02F0, r1
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <free+0x120>
    144e:	13 82       	std	Z+3, r1	; 0x03
    1450:	12 82       	std	Z+2, r1	; 0x02
    1452:	22 50       	subi	r18, 0x02	; 2
    1454:	30 40       	sbci	r19, 0x00	; 0
    1456:	30 93 ef 02 	sts	0x02EF, r19
    145a:	20 93 ee 02 	sts	0x02EE, r18
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <memset>:
    1464:	dc 01       	movw	r26, r24
    1466:	01 c0       	rjmp	.+2      	; 0x146a <memset+0x6>
    1468:	6d 93       	st	X+, r22
    146a:	41 50       	subi	r20, 0x01	; 1
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	e0 f7       	brcc	.-8      	; 0x1468 <memset+0x4>
    1470:	08 95       	ret

00001472 <MainProcessEnd>:
// The first created process is an exception, as it uses the initial stack; we use gcc's .fini1 section 
// to make the main-process end up here as well (see below).
// If a process ends up here without any scheduler set up, nothing will happen anymore.
// The watchdog-timer can detect such a condition.
void ProcessGraveyard() {
	processor_loop_idle();
    1472:	0e 94 fe 01 	call	0x3fc	; 0x3fc <processor_loop_idle>
// This makes the initial main()-process end up in the ProcessGraveyard, like
// every other process.
void MainProcessEnd() __attribute__((section (".fini1")));
void MainProcessEnd() {
	ProcessGraveyard();
}
    1476:	08 95       	ret
    1478:	f8 94       	cli

0000147a <__stop_program>:
    147a:	ff cf       	rjmp	.-2      	; 0x147a <__stop_program>
